
CocktailMachineF4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00023654  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000496c  08023814  08023814  00033814  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 ExtFlashSection 001cebb8  08028180  08028180  00038180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontFlashSection 0000162c  081f6d38  081f6d38  00206d38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 TextFlashSection 000001c4  081f8364  081f8364  00208364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .ARM.extab    00000000  081f8528  081f8528  002100e8  2**0
                  CONTENTS
  7 .ARM          00000008  081f8528  081f8528  00208528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .preinit_array 00000000  081f8530  081f8530  002100e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .init_array   00000014  081f8530  081f8530  00208530  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .fini_array   00000008  081f8544  081f8544  00208544  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .data         000000e8  20000000  081f854c  00210000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .bss          0000d62c  200000e8  081f8634  002100e8  2**2
                  ALLOC
 13 ._user_heap_stack 00000604  2000d714  081f8634  0021d714  2**0
                  ALLOC
 14 .ARM.attributes 00000030  00000000  00000000  002100e8  2**0
                  CONTENTS, READONLY
 15 .debug_info   000510ff  00000000  00000000  00210118  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_abbrev 0000cd8c  00000000  00000000  00261217  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_aranges 00003ac8  00000000  00000000  0026dfa8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 000035e8  00000000  00000000  00271a70  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_macro  00037f62  00000000  00000000  00275058  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_line   0003a3f0  00000000  00000000  002acfba  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_str    0012569b  00000000  00000000  002e73aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .comment      000000fa  00000000  00000000  0040ca45  2**0
                  CONTENTS, READONLY
 23 .debug_frame  00010024  00000000  00000000  0040cb40  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200000e8 	.word	0x200000e8
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080237fc 	.word	0x080237fc

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200000ec 	.word	0x200000ec
 80001fc:	080237fc 	.word	0x080237fc

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b972 	b.w	800059c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	4688      	mov	r8, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14b      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4615      	mov	r5, r2
 80002e2:	d967      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0720 	rsb	r7, r2, #32
 80002ee:	fa01 f302 	lsl.w	r3, r1, r2
 80002f2:	fa20 f707 	lsr.w	r7, r0, r7
 80002f6:	4095      	lsls	r5, r2
 80002f8:	ea47 0803 	orr.w	r8, r7, r3
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbb8 f7fe 	udiv	r7, r8, lr
 8000308:	fa1f fc85 	uxth.w	ip, r5
 800030c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000310:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000314:	fb07 f10c 	mul.w	r1, r7, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000322:	f080 811b 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8118 	bls.w	800055c <__udivmoddi4+0x28c>
 800032c:	3f02      	subs	r7, #2
 800032e:	442b      	add	r3, r5
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0fe 	udiv	r0, r3, lr
 8000338:	fb0e 3310 	mls	r3, lr, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fc0c 	mul.w	ip, r0, ip
 8000344:	45a4      	cmp	ip, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	192c      	adds	r4, r5, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	f080 8107 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000352:	45a4      	cmp	ip, r4
 8000354:	f240 8104 	bls.w	8000560 <__udivmoddi4+0x290>
 8000358:	3802      	subs	r0, #2
 800035a:	442c      	add	r4, r5
 800035c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000360:	eba4 040c 	sub.w	r4, r4, ip
 8000364:	2700      	movs	r7, #0
 8000366:	b11e      	cbz	r6, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c6 4300 	strd	r4, r3, [r6]
 8000370:	4639      	mov	r1, r7
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d909      	bls.n	800038e <__udivmoddi4+0xbe>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80eb 	beq.w	8000556 <__udivmoddi4+0x286>
 8000380:	2700      	movs	r7, #0
 8000382:	e9c6 0100 	strd	r0, r1, [r6]
 8000386:	4638      	mov	r0, r7
 8000388:	4639      	mov	r1, r7
 800038a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038e:	fab3 f783 	clz	r7, r3
 8000392:	2f00      	cmp	r7, #0
 8000394:	d147      	bne.n	8000426 <__udivmoddi4+0x156>
 8000396:	428b      	cmp	r3, r1
 8000398:	d302      	bcc.n	80003a0 <__udivmoddi4+0xd0>
 800039a:	4282      	cmp	r2, r0
 800039c:	f200 80fa 	bhi.w	8000594 <__udivmoddi4+0x2c4>
 80003a0:	1a84      	subs	r4, r0, r2
 80003a2:	eb61 0303 	sbc.w	r3, r1, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	4698      	mov	r8, r3
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	d0e0      	beq.n	8000370 <__udivmoddi4+0xa0>
 80003ae:	e9c6 4800 	strd	r4, r8, [r6]
 80003b2:	e7dd      	b.n	8000370 <__udivmoddi4+0xa0>
 80003b4:	b902      	cbnz	r2, 80003b8 <__udivmoddi4+0xe8>
 80003b6:	deff      	udf	#255	; 0xff
 80003b8:	fab2 f282 	clz	r2, r2
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f040 808f 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c2:	1b49      	subs	r1, r1, r5
 80003c4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003c8:	fa1f f885 	uxth.w	r8, r5
 80003cc:	2701      	movs	r7, #1
 80003ce:	fbb1 fcfe 	udiv	ip, r1, lr
 80003d2:	0c23      	lsrs	r3, r4, #16
 80003d4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003d8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003dc:	fb08 f10c 	mul.w	r1, r8, ip
 80003e0:	4299      	cmp	r1, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e4:	18eb      	adds	r3, r5, r3
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4299      	cmp	r1, r3
 80003ee:	f200 80cd 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1a59      	subs	r1, r3, r1
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1410 	mls	r4, lr, r0, r1
 8000400:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x14c>
 800040c:	192c      	adds	r4, r5, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x14a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80b6 	bhi.w	8000586 <__udivmoddi4+0x2b6>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e79f      	b.n	8000366 <__udivmoddi4+0x96>
 8000426:	f1c7 0c20 	rsb	ip, r7, #32
 800042a:	40bb      	lsls	r3, r7
 800042c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000430:	ea4e 0e03 	orr.w	lr, lr, r3
 8000434:	fa01 f407 	lsl.w	r4, r1, r7
 8000438:	fa20 f50c 	lsr.w	r5, r0, ip
 800043c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000440:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000444:	4325      	orrs	r5, r4
 8000446:	fbb3 f9f8 	udiv	r9, r3, r8
 800044a:	0c2c      	lsrs	r4, r5, #16
 800044c:	fb08 3319 	mls	r3, r8, r9, r3
 8000450:	fa1f fa8e 	uxth.w	sl, lr
 8000454:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000458:	fb09 f40a 	mul.w	r4, r9, sl
 800045c:	429c      	cmp	r4, r3
 800045e:	fa02 f207 	lsl.w	r2, r2, r7
 8000462:	fa00 f107 	lsl.w	r1, r0, r7
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1e 0303 	adds.w	r3, lr, r3
 800046c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000470:	f080 8087 	bcs.w	8000582 <__udivmoddi4+0x2b2>
 8000474:	429c      	cmp	r4, r3
 8000476:	f240 8084 	bls.w	8000582 <__udivmoddi4+0x2b2>
 800047a:	f1a9 0902 	sub.w	r9, r9, #2
 800047e:	4473      	add	r3, lr
 8000480:	1b1b      	subs	r3, r3, r4
 8000482:	b2ad      	uxth	r5, r5
 8000484:	fbb3 f0f8 	udiv	r0, r3, r8
 8000488:	fb08 3310 	mls	r3, r8, r0, r3
 800048c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000490:	fb00 fa0a 	mul.w	sl, r0, sl
 8000494:	45a2      	cmp	sl, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1e 0404 	adds.w	r4, lr, r4
 800049c:	f100 33ff 	add.w	r3, r0, #4294967295
 80004a0:	d26b      	bcs.n	800057a <__udivmoddi4+0x2aa>
 80004a2:	45a2      	cmp	sl, r4
 80004a4:	d969      	bls.n	800057a <__udivmoddi4+0x2aa>
 80004a6:	3802      	subs	r0, #2
 80004a8:	4474      	add	r4, lr
 80004aa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ae:	fba0 8902 	umull	r8, r9, r0, r2
 80004b2:	eba4 040a 	sub.w	r4, r4, sl
 80004b6:	454c      	cmp	r4, r9
 80004b8:	46c2      	mov	sl, r8
 80004ba:	464b      	mov	r3, r9
 80004bc:	d354      	bcc.n	8000568 <__udivmoddi4+0x298>
 80004be:	d051      	beq.n	8000564 <__udivmoddi4+0x294>
 80004c0:	2e00      	cmp	r6, #0
 80004c2:	d069      	beq.n	8000598 <__udivmoddi4+0x2c8>
 80004c4:	ebb1 050a 	subs.w	r5, r1, sl
 80004c8:	eb64 0403 	sbc.w	r4, r4, r3
 80004cc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004d0:	40fd      	lsrs	r5, r7
 80004d2:	40fc      	lsrs	r4, r7
 80004d4:	ea4c 0505 	orr.w	r5, ip, r5
 80004d8:	e9c6 5400 	strd	r5, r4, [r6]
 80004dc:	2700      	movs	r7, #0
 80004de:	e747      	b.n	8000370 <__udivmoddi4+0xa0>
 80004e0:	f1c2 0320 	rsb	r3, r2, #32
 80004e4:	fa20 f703 	lsr.w	r7, r0, r3
 80004e8:	4095      	lsls	r5, r2
 80004ea:	fa01 f002 	lsl.w	r0, r1, r2
 80004ee:	fa21 f303 	lsr.w	r3, r1, r3
 80004f2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004f6:	4338      	orrs	r0, r7
 80004f8:	0c01      	lsrs	r1, r0, #16
 80004fa:	fbb3 f7fe 	udiv	r7, r3, lr
 80004fe:	fa1f f885 	uxth.w	r8, r5
 8000502:	fb0e 3317 	mls	r3, lr, r7, r3
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb07 f308 	mul.w	r3, r7, r8
 800050e:	428b      	cmp	r3, r1
 8000510:	fa04 f402 	lsl.w	r4, r4, r2
 8000514:	d907      	bls.n	8000526 <__udivmoddi4+0x256>
 8000516:	1869      	adds	r1, r5, r1
 8000518:	f107 3cff 	add.w	ip, r7, #4294967295
 800051c:	d22f      	bcs.n	800057e <__udivmoddi4+0x2ae>
 800051e:	428b      	cmp	r3, r1
 8000520:	d92d      	bls.n	800057e <__udivmoddi4+0x2ae>
 8000522:	3f02      	subs	r7, #2
 8000524:	4429      	add	r1, r5
 8000526:	1acb      	subs	r3, r1, r3
 8000528:	b281      	uxth	r1, r0
 800052a:	fbb3 f0fe 	udiv	r0, r3, lr
 800052e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000532:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000536:	fb00 f308 	mul.w	r3, r0, r8
 800053a:	428b      	cmp	r3, r1
 800053c:	d907      	bls.n	800054e <__udivmoddi4+0x27e>
 800053e:	1869      	adds	r1, r5, r1
 8000540:	f100 3cff 	add.w	ip, r0, #4294967295
 8000544:	d217      	bcs.n	8000576 <__udivmoddi4+0x2a6>
 8000546:	428b      	cmp	r3, r1
 8000548:	d915      	bls.n	8000576 <__udivmoddi4+0x2a6>
 800054a:	3802      	subs	r0, #2
 800054c:	4429      	add	r1, r5
 800054e:	1ac9      	subs	r1, r1, r3
 8000550:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000554:	e73b      	b.n	80003ce <__udivmoddi4+0xfe>
 8000556:	4637      	mov	r7, r6
 8000558:	4630      	mov	r0, r6
 800055a:	e709      	b.n	8000370 <__udivmoddi4+0xa0>
 800055c:	4607      	mov	r7, r0
 800055e:	e6e7      	b.n	8000330 <__udivmoddi4+0x60>
 8000560:	4618      	mov	r0, r3
 8000562:	e6fb      	b.n	800035c <__udivmoddi4+0x8c>
 8000564:	4541      	cmp	r1, r8
 8000566:	d2ab      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 8000568:	ebb8 0a02 	subs.w	sl, r8, r2
 800056c:	eb69 020e 	sbc.w	r2, r9, lr
 8000570:	3801      	subs	r0, #1
 8000572:	4613      	mov	r3, r2
 8000574:	e7a4      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000576:	4660      	mov	r0, ip
 8000578:	e7e9      	b.n	800054e <__udivmoddi4+0x27e>
 800057a:	4618      	mov	r0, r3
 800057c:	e795      	b.n	80004aa <__udivmoddi4+0x1da>
 800057e:	4667      	mov	r7, ip
 8000580:	e7d1      	b.n	8000526 <__udivmoddi4+0x256>
 8000582:	4681      	mov	r9, r0
 8000584:	e77c      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000586:	3802      	subs	r0, #2
 8000588:	442c      	add	r4, r5
 800058a:	e747      	b.n	800041c <__udivmoddi4+0x14c>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	442b      	add	r3, r5
 8000592:	e72f      	b.n	80003f4 <__udivmoddi4+0x124>
 8000594:	4638      	mov	r0, r7
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xda>
 8000598:	4637      	mov	r7, r6
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0xa0>

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80005a4:	bf00      	nop
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr

080005ae <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80005ae:	b480      	push	{r7}
 80005b0:	b083      	sub	sp, #12
 80005b2:	af00      	add	r7, sp, #0
 80005b4:	6078      	str	r0, [r7, #4]
 80005b6:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80005b8:	bf00      	nop
 80005ba:	370c      	adds	r7, #12
 80005bc:	46bd      	mov	sp, r7
 80005be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c2:	4770      	bx	lr

080005c4 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 80005c8:	bf00      	nop
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr
	...

080005d4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005d4:	b480      	push	{r7}
 80005d6:	b085      	sub	sp, #20
 80005d8:	af00      	add	r7, sp, #0
 80005da:	60f8      	str	r0, [r7, #12]
 80005dc:	60b9      	str	r1, [r7, #8]
 80005de:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	4a07      	ldr	r2, [pc, #28]	; (8000600 <vApplicationGetIdleTaskMemory+0x2c>)
 80005e4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005e6:	68bb      	ldr	r3, [r7, #8]
 80005e8:	4a06      	ldr	r2, [pc, #24]	; (8000604 <vApplicationGetIdleTaskMemory+0x30>)
 80005ea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	2280      	movs	r2, #128	; 0x80
 80005f0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005f2:	bf00      	nop
 80005f4:	3714      	adds	r7, #20
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop
 8000600:	20000104 	.word	0x20000104
 8000604:	2000015c 	.word	0x2000015c

08000608 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000608:	b5b0      	push	{r4, r5, r7, lr}
 800060a:	b088      	sub	sp, #32
 800060c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800060e:	f009 fd73 	bl	800a0f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000612:	f000 f82f 	bl	8000674 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000616:	f000 fbe5 	bl	8000de4 <MX_GPIO_Init>
  MX_CRC_Init();
 800061a:	f000 f90f 	bl	800083c <MX_CRC_Init>
  MX_DMA2D_Init();
 800061e:	f000 f921 	bl	8000864 <MX_DMA2D_Init>
  MX_DSIHOST_DSI_Init();
 8000622:	f000 f951 	bl	80008c8 <MX_DSIHOST_DSI_Init>
  MX_FMC_Init();
 8000626:	f000 fb8d 	bl	8000d44 <MX_FMC_Init>
  MX_I2C1_Init();
 800062a:	f000 fa4f 	bl	8000acc <MX_I2C1_Init>
  MX_LTDC_Init();
 800062e:	f000 fa7b 	bl	8000b28 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 8000632:	f000 fb31 	bl	8000c98 <MX_QUADSPI_Init>
  MX_UART5_Init();
 8000636:	f000 fb5b 	bl	8000cf0 <MX_UART5_Init>
  MX_ADC1_Init();
 800063a:	f000 f8ad 	bl	8000798 <MX_ADC1_Init>
  MX_TouchGFX_Init();
 800063e:	f001 f9a2 	bl	8001986 <MX_TouchGFX_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000642:	4b0a      	ldr	r3, [pc, #40]	; (800066c <main+0x64>)
 8000644:	1d3c      	adds	r4, r7, #4
 8000646:	461d      	mov	r5, r3
 8000648:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800064a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800064c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000650:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000654:	1d3b      	adds	r3, r7, #4
 8000656:	2100      	movs	r1, #0
 8000658:	4618      	mov	r0, r3
 800065a:	f00f fbd8 	bl	800fe0e <osThreadCreate>
 800065e:	4602      	mov	r2, r0
 8000660:	4b03      	ldr	r3, [pc, #12]	; (8000670 <main+0x68>)
 8000662:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000664:	f00f fbcc 	bl	800fe00 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000668:	e7fe      	b.n	8000668 <main+0x60>
 800066a:	bf00      	nop
 800066c:	08023820 	.word	0x08023820
 8000670:	2000d460 	.word	0x2000d460

08000674 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b0a4      	sub	sp, #144	; 0x90
 8000678:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800067e:	2234      	movs	r2, #52	; 0x34
 8000680:	2100      	movs	r1, #0
 8000682:	4618      	mov	r0, r3
 8000684:	f022 f93d 	bl	8022902 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000688:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	605a      	str	r2, [r3, #4]
 8000692:	609a      	str	r2, [r3, #8]
 8000694:	60da      	str	r2, [r3, #12]
 8000696:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000698:	f107 030c 	add.w	r3, r7, #12
 800069c:	223c      	movs	r2, #60	; 0x3c
 800069e:	2100      	movs	r1, #0
 80006a0:	4618      	mov	r0, r3
 80006a2:	f022 f92e 	bl	8022902 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006a6:	2300      	movs	r3, #0
 80006a8:	60bb      	str	r3, [r7, #8]
 80006aa:	4b39      	ldr	r3, [pc, #228]	; (8000790 <SystemClock_Config+0x11c>)
 80006ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ae:	4a38      	ldr	r2, [pc, #224]	; (8000790 <SystemClock_Config+0x11c>)
 80006b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006b4:	6413      	str	r3, [r2, #64]	; 0x40
 80006b6:	4b36      	ldr	r3, [pc, #216]	; (8000790 <SystemClock_Config+0x11c>)
 80006b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006be:	60bb      	str	r3, [r7, #8]
 80006c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006c2:	2300      	movs	r3, #0
 80006c4:	607b      	str	r3, [r7, #4]
 80006c6:	4b33      	ldr	r3, [pc, #204]	; (8000794 <SystemClock_Config+0x120>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	4a32      	ldr	r2, [pc, #200]	; (8000794 <SystemClock_Config+0x120>)
 80006cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006d0:	6013      	str	r3, [r2, #0]
 80006d2:	4b30      	ldr	r3, [pc, #192]	; (8000794 <SystemClock_Config+0x120>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006da:	607b      	str	r3, [r7, #4]
 80006dc:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006de:	2301      	movs	r3, #1
 80006e0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006e6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e8:	2302      	movs	r3, #2
 80006ea:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ec:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006f0:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = 10;
 80006f2:	230a      	movs	r3, #10
 80006f4:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 360;
 80006f6:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80006fa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006fe:	2302      	movs	r3, #2
 8000700:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000704:	2304      	movs	r3, #4
 8000706:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = 6;
 800070a:	2306      	movs	r3, #6
 800070c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000710:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000714:	4618      	mov	r0, r3
 8000716:	f00e f9eb 	bl	800eaf0 <HAL_RCC_OscConfig>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000720:	f000 fc79 	bl	8001016 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000724:	f00d fc96 	bl	800e054 <HAL_PWREx_EnableOverDrive>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800072e:	f000 fc72 	bl	8001016 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000732:	230f      	movs	r3, #15
 8000734:	64bb      	str	r3, [r7, #72]	; 0x48
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000736:	2302      	movs	r3, #2
 8000738:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800073a:	2300      	movs	r3, #0
 800073c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800073e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000742:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000744:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000748:	65bb      	str	r3, [r7, #88]	; 0x58

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800074a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800074e:	2105      	movs	r1, #5
 8000750:	4618      	mov	r0, r3
 8000752:	f00d fd91 	bl	800e278 <HAL_RCC_ClockConfig>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <SystemClock_Config+0xec>
  {
    Error_Handler();
 800075c:	f000 fc5b 	bl	8001016 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000760:	2308      	movs	r3, #8
 8000762:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 417;
 8000764:	f240 13a1 	movw	r3, #417	; 0x1a1
 8000768:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 800076a:	2305      	movs	r3, #5
 800076c:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 800076e:	2300      	movs	r3, #0
 8000770:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000772:	f107 030c 	add.w	r3, r7, #12
 8000776:	4618      	mov	r0, r3
 8000778:	f00d ff7c 	bl	800e674 <HAL_RCCEx_PeriphCLKConfig>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <SystemClock_Config+0x112>
  {
    Error_Handler();
 8000782:	f000 fc48 	bl	8001016 <Error_Handler>
  }
}
 8000786:	bf00      	nop
 8000788:	3790      	adds	r7, #144	; 0x90
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	40023800 	.word	0x40023800
 8000794:	40007000 	.word	0x40007000

08000798 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b084      	sub	sp, #16
 800079c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800079e:	463b      	mov	r3, r7
 80007a0:	2200      	movs	r2, #0
 80007a2:	601a      	str	r2, [r3, #0]
 80007a4:	605a      	str	r2, [r3, #4]
 80007a6:	609a      	str	r2, [r3, #8]
 80007a8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80007aa:	4b21      	ldr	r3, [pc, #132]	; (8000830 <MX_ADC1_Init+0x98>)
 80007ac:	4a21      	ldr	r2, [pc, #132]	; (8000834 <MX_ADC1_Init+0x9c>)
 80007ae:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007b0:	4b1f      	ldr	r3, [pc, #124]	; (8000830 <MX_ADC1_Init+0x98>)
 80007b2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80007b6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007b8:	4b1d      	ldr	r3, [pc, #116]	; (8000830 <MX_ADC1_Init+0x98>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80007be:	4b1c      	ldr	r3, [pc, #112]	; (8000830 <MX_ADC1_Init+0x98>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007c4:	4b1a      	ldr	r3, [pc, #104]	; (8000830 <MX_ADC1_Init+0x98>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007ca:	4b19      	ldr	r3, [pc, #100]	; (8000830 <MX_ADC1_Init+0x98>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007d2:	4b17      	ldr	r3, [pc, #92]	; (8000830 <MX_ADC1_Init+0x98>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007d8:	4b15      	ldr	r3, [pc, #84]	; (8000830 <MX_ADC1_Init+0x98>)
 80007da:	4a17      	ldr	r2, [pc, #92]	; (8000838 <MX_ADC1_Init+0xa0>)
 80007dc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007de:	4b14      	ldr	r3, [pc, #80]	; (8000830 <MX_ADC1_Init+0x98>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80007e4:	4b12      	ldr	r3, [pc, #72]	; (8000830 <MX_ADC1_Init+0x98>)
 80007e6:	2201      	movs	r2, #1
 80007e8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007ea:	4b11      	ldr	r3, [pc, #68]	; (8000830 <MX_ADC1_Init+0x98>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007f2:	4b0f      	ldr	r3, [pc, #60]	; (8000830 <MX_ADC1_Init+0x98>)
 80007f4:	2201      	movs	r2, #1
 80007f6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007f8:	480d      	ldr	r0, [pc, #52]	; (8000830 <MX_ADC1_Init+0x98>)
 80007fa:	f009 fcbf 	bl	800a17c <HAL_ADC_Init>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000804:	f000 fc07 	bl	8001016 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000808:	2303      	movs	r3, #3
 800080a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800080c:	2301      	movs	r3, #1
 800080e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000810:	2300      	movs	r3, #0
 8000812:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000814:	463b      	mov	r3, r7
 8000816:	4619      	mov	r1, r3
 8000818:	4805      	ldr	r0, [pc, #20]	; (8000830 <MX_ADC1_Init+0x98>)
 800081a:	f009 fcf3 	bl	800a204 <HAL_ADC_ConfigChannel>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000824:	f000 fbf7 	bl	8001016 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000828:	bf00      	nop
 800082a:	3710      	adds	r7, #16
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	2000d5c4 	.word	0x2000d5c4
 8000834:	40012000 	.word	0x40012000
 8000838:	0f000001 	.word	0x0f000001

0800083c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000840:	4b06      	ldr	r3, [pc, #24]	; (800085c <MX_CRC_Init+0x20>)
 8000842:	4a07      	ldr	r2, [pc, #28]	; (8000860 <MX_CRC_Init+0x24>)
 8000844:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000846:	4805      	ldr	r0, [pc, #20]	; (800085c <MX_CRC_Init+0x20>)
 8000848:	f00a f81c 	bl	800a884 <HAL_CRC_Init>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000852:	f000 fbe0 	bl	8001016 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000856:	bf00      	nop
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	2000d4b8 	.word	0x2000d4b8
 8000860:	40023000 	.word	0x40023000

08000864 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000868:	4b15      	ldr	r3, [pc, #84]	; (80008c0 <MX_DMA2D_Init+0x5c>)
 800086a:	4a16      	ldr	r2, [pc, #88]	; (80008c4 <MX_DMA2D_Init+0x60>)
 800086c:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800086e:	4b14      	ldr	r3, [pc, #80]	; (80008c0 <MX_DMA2D_Init+0x5c>)
 8000870:	2200      	movs	r2, #0
 8000872:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000874:	4b12      	ldr	r3, [pc, #72]	; (80008c0 <MX_DMA2D_Init+0x5c>)
 8000876:	2200      	movs	r2, #0
 8000878:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800087a:	4b11      	ldr	r3, [pc, #68]	; (80008c0 <MX_DMA2D_Init+0x5c>)
 800087c:	2200      	movs	r2, #0
 800087e:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000880:	4b0f      	ldr	r3, [pc, #60]	; (80008c0 <MX_DMA2D_Init+0x5c>)
 8000882:	2200      	movs	r2, #0
 8000884:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000886:	4b0e      	ldr	r3, [pc, #56]	; (80008c0 <MX_DMA2D_Init+0x5c>)
 8000888:	2200      	movs	r2, #0
 800088a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800088c:	4b0c      	ldr	r3, [pc, #48]	; (80008c0 <MX_DMA2D_Init+0x5c>)
 800088e:	2200      	movs	r2, #0
 8000890:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000892:	4b0b      	ldr	r3, [pc, #44]	; (80008c0 <MX_DMA2D_Init+0x5c>)
 8000894:	2200      	movs	r2, #0
 8000896:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000898:	4809      	ldr	r0, [pc, #36]	; (80008c0 <MX_DMA2D_Init+0x5c>)
 800089a:	f00a f83f 	bl	800a91c <HAL_DMA2D_Init>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80008a4:	f000 fbb7 	bl	8001016 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80008a8:	2101      	movs	r1, #1
 80008aa:	4805      	ldr	r0, [pc, #20]	; (80008c0 <MX_DMA2D_Init+0x5c>)
 80008ac:	f00a fb00 	bl	800aeb0 <HAL_DMA2D_ConfigLayer>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80008b6:	f000 fbae 	bl	8001016 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	2000d60c 	.word	0x2000d60c
 80008c4:	4002b000 	.word	0x4002b000

080008c8 <MX_DSIHOST_DSI_Init>:
  * @brief DSIHOST Initialization Function
  * @param None
  * @retval None
  */
static void MX_DSIHOST_DSI_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b0aa      	sub	sp, #168	; 0xa8
 80008cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DSIHOST_Init 0 */

  /* USER CODE END DSIHOST_Init 0 */

  DSI_PLLInitTypeDef PLLInit = {0};
 80008ce:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80008d2:	2200      	movs	r2, #0
 80008d4:	601a      	str	r2, [r3, #0]
 80008d6:	605a      	str	r2, [r3, #4]
 80008d8:	609a      	str	r2, [r3, #8]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 80008da:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80008de:	2224      	movs	r2, #36	; 0x24
 80008e0:	2100      	movs	r1, #0
 80008e2:	4618      	mov	r0, r3
 80008e4:	f022 f80d 	bl	8022902 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 80008e8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80008ec:	2200      	movs	r2, #0
 80008ee:	601a      	str	r2, [r3, #0]
 80008f0:	605a      	str	r2, [r3, #4]
 80008f2:	609a      	str	r2, [r3, #8]
 80008f4:	60da      	str	r2, [r3, #12]
 80008f6:	611a      	str	r2, [r3, #16]
 80008f8:	615a      	str	r2, [r3, #20]
  DSI_LPCmdTypeDef LPCmd = {0};
 80008fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008fe:	2234      	movs	r2, #52	; 0x34
 8000900:	2100      	movs	r1, #0
 8000902:	4618      	mov	r0, r3
 8000904:	f021 fffd 	bl	8022902 <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 8000908:	463b      	mov	r3, r7
 800090a:	222c      	movs	r2, #44	; 0x2c
 800090c:	2100      	movs	r1, #0
 800090e:	4618      	mov	r0, r3
 8000910:	f021 fff7 	bl	8022902 <memset>

  /* USER CODE BEGIN DSIHOST_Init 1 */

  /* USER CODE END DSIHOST_Init 1 */
  hdsi.Instance = DSI;
 8000914:	4b6b      	ldr	r3, [pc, #428]	; (8000ac4 <MX_DSIHOST_DSI_Init+0x1fc>)
 8000916:	4a6c      	ldr	r2, [pc, #432]	; (8000ac8 <MX_DSIHOST_DSI_Init+0x200>)
 8000918:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 800091a:	4b6a      	ldr	r3, [pc, #424]	; (8000ac4 <MX_DSIHOST_DSI_Init+0x1fc>)
 800091c:	2200      	movs	r2, #0
 800091e:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 4;
 8000920:	4b68      	ldr	r3, [pc, #416]	; (8000ac4 <MX_DSIHOST_DSI_Init+0x1fc>)
 8000922:	2204      	movs	r2, #4
 8000924:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 8000926:	4b67      	ldr	r3, [pc, #412]	; (8000ac4 <MX_DSIHOST_DSI_Init+0x1fc>)
 8000928:	2201      	movs	r2, #1
 800092a:	60da      	str	r2, [r3, #12]
  PLLInit.PLLNDIV = 100;
 800092c:	2364      	movs	r3, #100	; 0x64
 800092e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  PLLInit.PLLIDF = DSI_PLL_IN_DIV2;
 8000932:	2302      	movs	r3, #2
 8000934:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  PLLInit.PLLODF = DSI_PLL_OUT_DIV1;
 8000938:	2300      	movs	r3, #0
 800093a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 800093e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000942:	4619      	mov	r1, r3
 8000944:	485f      	ldr	r0, [pc, #380]	; (8000ac4 <MX_DSIHOST_DSI_Init+0x1fc>)
 8000946:	f00a fbe1 	bl	800b10c <HAL_DSI_Init>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <MX_DSIHOST_DSI_Init+0x8c>
  {
    Error_Handler();
 8000950:	f000 fb61 	bl	8001016 <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 8000954:	2301      	movs	r3, #1
 8000956:	67bb      	str	r3, [r7, #120]	; 0x78
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 8000958:	2300      	movs	r3, #0
 800095a:	67fb      	str	r3, [r7, #124]	; 0x7c
  HostTimeouts.LowPowerReceptionTimeout = 0;
 800095c:	2300      	movs	r3, #0
 800095e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  HostTimeouts.HighSpeedReadTimeout = 0;
 8000962:	2300      	movs	r3, #0
 8000964:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  HostTimeouts.LowPowerReadTimeout = 0;
 8000968:	2300      	movs	r3, #0
 800096a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  HostTimeouts.HighSpeedWriteTimeout = 0;
 800096e:	2300      	movs	r3, #0
 8000970:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 8000974:	2300      	movs	r3, #0
 8000976:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  HostTimeouts.LowPowerWriteTimeout = 0;
 800097a:	2300      	movs	r3, #0
 800097c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  HostTimeouts.BTATimeout = 0;
 8000980:	2300      	movs	r3, #0
 8000982:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 8000986:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800098a:	4619      	mov	r1, r3
 800098c:	484d      	ldr	r0, [pc, #308]	; (8000ac4 <MX_DSIHOST_DSI_Init+0x1fc>)
 800098e:	f00b f86b 	bl	800ba68 <HAL_DSI_ConfigHostTimeouts>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_DSIHOST_DSI_Init+0xd4>
  {
    Error_Handler();
 8000998:	f000 fb3d 	bl	8001016 <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 28;
 800099c:	231c      	movs	r3, #28
 800099e:	663b      	str	r3, [r7, #96]	; 0x60
  PhyTimings.ClockLaneLP2HSTime = 33;
 80009a0:	2321      	movs	r3, #33	; 0x21
 80009a2:	667b      	str	r3, [r7, #100]	; 0x64
  PhyTimings.DataLaneHS2LPTime = 15;
 80009a4:	230f      	movs	r3, #15
 80009a6:	66bb      	str	r3, [r7, #104]	; 0x68
  PhyTimings.DataLaneLP2HSTime = 25;
 80009a8:	2319      	movs	r3, #25
 80009aa:	66fb      	str	r3, [r7, #108]	; 0x6c
  PhyTimings.DataLaneMaxReadTime = 0;
 80009ac:	2300      	movs	r3, #0
 80009ae:	673b      	str	r3, [r7, #112]	; 0x70
  PhyTimings.StopWaitTime = 0;
 80009b0:	2300      	movs	r3, #0
 80009b2:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 80009b4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80009b8:	4619      	mov	r1, r3
 80009ba:	4842      	ldr	r0, [pc, #264]	; (8000ac4 <MX_DSIHOST_DSI_Init+0x1fc>)
 80009bc:	f00a ffea 	bl	800b994 <HAL_DSI_ConfigPhyTimer>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <MX_DSIHOST_DSI_Init+0x102>
  {
    Error_Handler();
 80009c6:	f000 fb26 	bl	8001016 <Error_Handler>
  }
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 80009ca:	2104      	movs	r1, #4
 80009cc:	483d      	ldr	r0, [pc, #244]	; (8000ac4 <MX_DSIHOST_DSI_Init+0x1fc>)
 80009ce:	f00a ffb9 	bl	800b944 <HAL_DSI_ConfigFlowControl>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_DSIHOST_DSI_Init+0x114>
  {
    Error_Handler();
 80009d8:	f000 fb1d 	bl	8001016 <Error_Handler>
  }
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 80009dc:	f242 7110 	movw	r1, #10000	; 0x2710
 80009e0:	4838      	ldr	r0, [pc, #224]	; (8000ac4 <MX_DSIHOST_DSI_Init+0x1fc>)
 80009e2:	f00b f907 	bl	800bbf4 <HAL_DSI_SetLowPowerRXFilter>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <MX_DSIHOST_DSI_Init+0x128>
  {
    Error_Handler();
 80009ec:	f000 fb13 	bl	8001016 <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_OVF) != HAL_OK)
 80009f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009f4:	4833      	ldr	r0, [pc, #204]	; (8000ac4 <MX_DSIHOST_DSI_Init+0x1fc>)
 80009f6:	f00a fca3 	bl	800b340 <HAL_DSI_ConfigErrorMonitor>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <MX_DSIHOST_DSI_Init+0x13c>
  {
    Error_Handler();
 8000a00:	f000 fb09 	bl	8001016 <Error_Handler>
  }
  LPCmd.LPGenShortWriteNoP = DSI_LP_GSW0P_ENABLE;
 8000a04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a08:	62fb      	str	r3, [r7, #44]	; 0x2c
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 8000a0a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a0e:	633b      	str	r3, [r7, #48]	; 0x30
  LPCmd.LPGenShortWriteTwoP = DSI_LP_GSW2P_ENABLE;
 8000a10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a14:	637b      	str	r3, [r7, #52]	; 0x34
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8000a16:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a1a:	63bb      	str	r3, [r7, #56]	; 0x38
  LPCmd.LPGenShortReadOneP = DSI_LP_GSR1P_ENABLE;
 8000a1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a20:	63fb      	str	r3, [r7, #60]	; 0x3c
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 8000a22:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a26:	643b      	str	r3, [r7, #64]	; 0x40
  LPCmd.LPGenLongWrite = DSI_LP_GLW_ENABLE;
 8000a28:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000a2c:	647b      	str	r3, [r7, #68]	; 0x44
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8000a2e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a32:	64bb      	str	r3, [r7, #72]	; 0x48
  LPCmd.LPDcsShortWriteOneP = DSI_LP_DSW1P_ENABLE;
 8000a34:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a38:	64fb      	str	r3, [r7, #76]	; 0x4c
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8000a3a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000a3e:	653b      	str	r3, [r7, #80]	; 0x50
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_ENABLE;
 8000a40:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000a44:	657b      	str	r3, [r7, #84]	; 0x54
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8000a46:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000a4a:	65bb      	str	r3, [r7, #88]	; 0x58
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_ENABLE;
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000a50:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a54:	4619      	mov	r1, r3
 8000a56:	481b      	ldr	r0, [pc, #108]	; (8000ac4 <MX_DSIHOST_DSI_Init+0x1fc>)
 8000a58:	f00a ff16 	bl	800b888 <HAL_DSI_ConfigCommand>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <MX_DSIHOST_DSI_Init+0x19e>
  {
    Error_Handler();
 8000a62:	f000 fad8 	bl	8001016 <Error_Handler>
  }
  CmdCfg.VirtualChannelID = 0;
 8000a66:	2300      	movs	r3, #0
 8000a68:	603b      	str	r3, [r7, #0]
  CmdCfg.ColorCoding = DSI_RGB888;
 8000a6a:	2305      	movs	r3, #5
 8000a6c:	607b      	str	r3, [r7, #4]
  CmdCfg.CommandSize = 448;
 8000a6e:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8000a72:	60bb      	str	r3, [r7, #8]
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 8000a74:	2310      	movs	r3, #16
 8000a76:	60fb      	str	r3, [r7, #12]
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	613b      	str	r3, [r7, #16]
  CmdCfg.HSPolarity = DSI_HSYNC_ACTIVE_LOW;
 8000a7c:	2304      	movs	r3, #4
 8000a7e:	617b      	str	r3, [r7, #20]
  CmdCfg.VSPolarity = DSI_VSYNC_ACTIVE_LOW;
 8000a80:	2302      	movs	r3, #2
 8000a82:	61bb      	str	r3, [r7, #24]
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8000a84:	2300      	movs	r3, #0
 8000a86:	61fb      	str	r3, [r7, #28]
  CmdCfg.VSyncPol = DSI_VSYNC_FALLING;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	623b      	str	r3, [r7, #32]
  CmdCfg.AutomaticRefresh = DSI_AR_DISABLE;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	627b      	str	r3, [r7, #36]	; 0x24
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_ENABLE;
 8000a90:	2301      	movs	r3, #1
 8000a92:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8000a94:	463b      	mov	r3, r7
 8000a96:	4619      	mov	r1, r3
 8000a98:	480a      	ldr	r0, [pc, #40]	; (8000ac4 <MX_DSIHOST_DSI_Init+0x1fc>)
 8000a9a:	f00a fe1d 	bl	800b6d8 <HAL_DSI_ConfigAdaptedCommandMode>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_DSIHOST_DSI_Init+0x1e0>
  {
    Error_Handler();
 8000aa4:	f000 fab7 	bl	8001016 <Error_Handler>
  }
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	4806      	ldr	r0, [pc, #24]	; (8000ac4 <MX_DSIHOST_DSI_Init+0x1fc>)
 8000aac:	f00a fdec 	bl	800b688 <HAL_DSI_SetGenericVCID>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <MX_DSIHOST_DSI_Init+0x1f2>
  {
    Error_Handler();
 8000ab6:	f000 faae 	bl	8001016 <Error_Handler>
  }
  /* USER CODE BEGIN DSIHOST_Init 2 */

  /* USER CODE END DSIHOST_Init 2 */

}
 8000aba:	bf00      	nop
 8000abc:	37a8      	adds	r7, #168	; 0xa8
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	2000d4c0 	.word	0x2000d4c0
 8000ac8:	40016c00 	.word	0x40016c00

08000acc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ad0:	4b12      	ldr	r3, [pc, #72]	; (8000b1c <MX_I2C1_Init+0x50>)
 8000ad2:	4a13      	ldr	r2, [pc, #76]	; (8000b20 <MX_I2C1_Init+0x54>)
 8000ad4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000ad6:	4b11      	ldr	r3, [pc, #68]	; (8000b1c <MX_I2C1_Init+0x50>)
 8000ad8:	4a12      	ldr	r2, [pc, #72]	; (8000b24 <MX_I2C1_Init+0x58>)
 8000ada:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000adc:	4b0f      	ldr	r3, [pc, #60]	; (8000b1c <MX_I2C1_Init+0x50>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000ae2:	4b0e      	ldr	r3, [pc, #56]	; (8000b1c <MX_I2C1_Init+0x50>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ae8:	4b0c      	ldr	r3, [pc, #48]	; (8000b1c <MX_I2C1_Init+0x50>)
 8000aea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000aee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000af0:	4b0a      	ldr	r3, [pc, #40]	; (8000b1c <MX_I2C1_Init+0x50>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000af6:	4b09      	ldr	r3, [pc, #36]	; (8000b1c <MX_I2C1_Init+0x50>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000afc:	4b07      	ldr	r3, [pc, #28]	; (8000b1c <MX_I2C1_Init+0x50>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b02:	4b06      	ldr	r3, [pc, #24]	; (8000b1c <MX_I2C1_Init+0x50>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b08:	4804      	ldr	r0, [pc, #16]	; (8000b1c <MX_I2C1_Init+0x50>)
 8000b0a:	f00b fa65 	bl	800bfd8 <HAL_I2C_Init>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b14:	f000 fa7f 	bl	8001016 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b18:	bf00      	nop
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	2000d464 	.word	0x2000d464
 8000b20:	40005400 	.word	0x40005400
 8000b24:	00061a80 	.word	0x00061a80

08000b28 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b09a      	sub	sp, #104	; 0x68
 8000b2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000b2e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000b32:	2234      	movs	r2, #52	; 0x34
 8000b34:	2100      	movs	r1, #0
 8000b36:	4618      	mov	r0, r3
 8000b38:	f021 fee3 	bl	8022902 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8000b3c:	463b      	mov	r3, r7
 8000b3e:	2234      	movs	r2, #52	; 0x34
 8000b40:	2100      	movs	r1, #0
 8000b42:	4618      	mov	r0, r3
 8000b44:	f021 fedd 	bl	8022902 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000b48:	4b51      	ldr	r3, [pc, #324]	; (8000c90 <MX_LTDC_Init+0x168>)
 8000b4a:	4a52      	ldr	r2, [pc, #328]	; (8000c94 <MX_LTDC_Init+0x16c>)
 8000b4c:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000b4e:	4b50      	ldr	r3, [pc, #320]	; (8000c90 <MX_LTDC_Init+0x168>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000b54:	4b4e      	ldr	r3, [pc, #312]	; (8000c90 <MX_LTDC_Init+0x168>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000b5a:	4b4d      	ldr	r3, [pc, #308]	; (8000c90 <MX_LTDC_Init+0x168>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000b60:	4b4b      	ldr	r3, [pc, #300]	; (8000c90 <MX_LTDC_Init+0x168>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 1;
 8000b66:	4b4a      	ldr	r3, [pc, #296]	; (8000c90 <MX_LTDC_Init+0x168>)
 8000b68:	2201      	movs	r2, #1
 8000b6a:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 8000b6c:	4b48      	ldr	r3, [pc, #288]	; (8000c90 <MX_LTDC_Init+0x168>)
 8000b6e:	2201      	movs	r2, #1
 8000b70:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 2;
 8000b72:	4b47      	ldr	r3, [pc, #284]	; (8000c90 <MX_LTDC_Init+0x168>)
 8000b74:	2202      	movs	r2, #2
 8000b76:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 2;
 8000b78:	4b45      	ldr	r3, [pc, #276]	; (8000c90 <MX_LTDC_Init+0x168>)
 8000b7a:	2202      	movs	r2, #2
 8000b7c:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 450;
 8000b7e:	4b44      	ldr	r3, [pc, #272]	; (8000c90 <MX_LTDC_Init+0x168>)
 8000b80:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 8000b84:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 482;
 8000b86:	4b42      	ldr	r3, [pc, #264]	; (8000c90 <MX_LTDC_Init+0x168>)
 8000b88:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8000b8c:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 451;
 8000b8e:	4b40      	ldr	r3, [pc, #256]	; (8000c90 <MX_LTDC_Init+0x168>)
 8000b90:	f240 12c3 	movw	r2, #451	; 0x1c3
 8000b94:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 483;
 8000b96:	4b3e      	ldr	r3, [pc, #248]	; (8000c90 <MX_LTDC_Init+0x168>)
 8000b98:	f240 12e3 	movw	r2, #483	; 0x1e3
 8000b9c:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000b9e:	4b3c      	ldr	r3, [pc, #240]	; (8000c90 <MX_LTDC_Init+0x168>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000ba6:	4b3a      	ldr	r3, [pc, #232]	; (8000c90 <MX_LTDC_Init+0x168>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000bae:	4b38      	ldr	r3, [pc, #224]	; (8000c90 <MX_LTDC_Init+0x168>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000bb6:	4836      	ldr	r0, [pc, #216]	; (8000c90 <MX_LTDC_Init+0x168>)
 8000bb8:	f00c fee4 	bl	800d984 <HAL_LTDC_Init>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8000bc2:	f000 fa28 	bl	8001016 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 448;
 8000bca:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8000bce:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 480;
 8000bd4:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000bd8:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 255;
 8000bde:	23ff      	movs	r3, #255	; 0xff
 8000be0:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8000be2:	2300      	movs	r3, #0
 8000be4:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000be6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bea:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000bec:	2305      	movs	r3, #5
 8000bee:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0xC0000000;
 8000bf0:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8000bf4:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 448;
 8000bf6:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8000bfa:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 480;
 8000bfc:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000c00:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8000c02:	2300      	movs	r3, #0
 8000c04:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000c14:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000c18:	2200      	movs	r2, #0
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	481c      	ldr	r0, [pc, #112]	; (8000c90 <MX_LTDC_Init+0x168>)
 8000c1e:	f00d f843 	bl	800dca8 <HAL_LTDC_ConfigLayer>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <MX_LTDC_Init+0x104>
  {
    Error_Handler();
 8000c28:	f000 f9f5 	bl	8001016 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8000c30:	2300      	movs	r3, #0
 8000c32:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8000c34:	2300      	movs	r3, #0
 8000c36:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8000c40:	2300      	movs	r3, #0
 8000c42:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8000c44:	2300      	movs	r3, #0
 8000c46:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000c48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c4c:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000c4e:	2305      	movs	r3, #5
 8000c50:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8000c52:	2300      	movs	r3, #0
 8000c54:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 8000c56:	2300      	movs	r3, #0
 8000c58:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8000c64:	2300      	movs	r3, #0
 8000c66:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8000c70:	463b      	mov	r3, r7
 8000c72:	2201      	movs	r2, #1
 8000c74:	4619      	mov	r1, r3
 8000c76:	4806      	ldr	r0, [pc, #24]	; (8000c90 <MX_LTDC_Init+0x168>)
 8000c78:	f00d f816 	bl	800dca8 <HAL_LTDC_ConfigLayer>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <MX_LTDC_Init+0x15e>
  {
    Error_Handler();
 8000c82:	f000 f9c8 	bl	8001016 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000c86:	bf00      	nop
 8000c88:	3768      	adds	r7, #104	; 0x68
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	2000d4dc 	.word	0x2000d4dc
 8000c94:	40016800 	.word	0x40016800

08000c98 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000c9c:	4b12      	ldr	r3, [pc, #72]	; (8000ce8 <MX_QUADSPI_Init+0x50>)
 8000c9e:	4a13      	ldr	r2, [pc, #76]	; (8000cec <MX_QUADSPI_Init+0x54>)
 8000ca0:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 8000ca2:	4b11      	ldr	r3, [pc, #68]	; (8000ce8 <MX_QUADSPI_Init+0x50>)
 8000ca4:	2202      	movs	r2, #2
 8000ca6:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000ca8:	4b0f      	ldr	r3, [pc, #60]	; (8000ce8 <MX_QUADSPI_Init+0x50>)
 8000caa:	2201      	movs	r2, #1
 8000cac:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000cae:	4b0e      	ldr	r3, [pc, #56]	; (8000ce8 <MX_QUADSPI_Init+0x50>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 21;
 8000cb4:	4b0c      	ldr	r3, [pc, #48]	; (8000ce8 <MX_QUADSPI_Init+0x50>)
 8000cb6:	2215      	movs	r2, #21
 8000cb8:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000cba:	4b0b      	ldr	r3, [pc, #44]	; (8000ce8 <MX_QUADSPI_Init+0x50>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000cc0:	4b09      	ldr	r3, [pc, #36]	; (8000ce8 <MX_QUADSPI_Init+0x50>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000cc6:	4b08      	ldr	r3, [pc, #32]	; (8000ce8 <MX_QUADSPI_Init+0x50>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000ccc:	4b06      	ldr	r3, [pc, #24]	; (8000ce8 <MX_QUADSPI_Init+0x50>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000cd2:	4805      	ldr	r0, [pc, #20]	; (8000ce8 <MX_QUADSPI_Init+0x50>)
 8000cd4:	f00d fa0e 	bl	800e0f4 <HAL_QSPI_Init>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8000cde:	f000 f99a 	bl	8001016 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000ce2:	bf00      	nop
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	2000d680 	.word	0x2000d680
 8000cec:	a0001000 	.word	0xa0001000

08000cf0 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000cf4:	4b11      	ldr	r3, [pc, #68]	; (8000d3c <MX_UART5_Init+0x4c>)
 8000cf6:	4a12      	ldr	r2, [pc, #72]	; (8000d40 <MX_UART5_Init+0x50>)
 8000cf8:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000cfa:	4b10      	ldr	r3, [pc, #64]	; (8000d3c <MX_UART5_Init+0x4c>)
 8000cfc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d00:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000d02:	4b0e      	ldr	r3, [pc, #56]	; (8000d3c <MX_UART5_Init+0x4c>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000d08:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <MX_UART5_Init+0x4c>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000d0e:	4b0b      	ldr	r3, [pc, #44]	; (8000d3c <MX_UART5_Init+0x4c>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000d14:	4b09      	ldr	r3, [pc, #36]	; (8000d3c <MX_UART5_Init+0x4c>)
 8000d16:	220c      	movs	r2, #12
 8000d18:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d1a:	4b08      	ldr	r3, [pc, #32]	; (8000d3c <MX_UART5_Init+0x4c>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d20:	4b06      	ldr	r3, [pc, #24]	; (8000d3c <MX_UART5_Init+0x4c>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000d26:	4805      	ldr	r0, [pc, #20]	; (8000d3c <MX_UART5_Init+0x4c>)
 8000d28:	f00e fb96 	bl	800f458 <HAL_UART_Init>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8000d32:	f000 f970 	bl	8001016 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000d36:	bf00      	nop
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	2000d584 	.word	0x2000d584
 8000d40:	40005000 	.word	0x40005000

08000d44 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b088      	sub	sp, #32
 8000d48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000d4a:	1d3b      	adds	r3, r7, #4
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	601a      	str	r2, [r3, #0]
 8000d50:	605a      	str	r2, [r3, #4]
 8000d52:	609a      	str	r2, [r3, #8]
 8000d54:	60da      	str	r2, [r3, #12]
 8000d56:	611a      	str	r2, [r3, #16]
 8000d58:	615a      	str	r2, [r3, #20]
 8000d5a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000d5c:	4b1f      	ldr	r3, [pc, #124]	; (8000ddc <MX_FMC_Init+0x98>)
 8000d5e:	4a20      	ldr	r2, [pc, #128]	; (8000de0 <MX_FMC_Init+0x9c>)
 8000d60:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000d62:	4b1e      	ldr	r3, [pc, #120]	; (8000ddc <MX_FMC_Init+0x98>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000d68:	4b1c      	ldr	r3, [pc, #112]	; (8000ddc <MX_FMC_Init+0x98>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000d6e:	4b1b      	ldr	r3, [pc, #108]	; (8000ddc <MX_FMC_Init+0x98>)
 8000d70:	2204      	movs	r2, #4
 8000d72:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000d74:	4b19      	ldr	r3, [pc, #100]	; (8000ddc <MX_FMC_Init+0x98>)
 8000d76:	2210      	movs	r2, #16
 8000d78:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000d7a:	4b18      	ldr	r3, [pc, #96]	; (8000ddc <MX_FMC_Init+0x98>)
 8000d7c:	2240      	movs	r2, #64	; 0x40
 8000d7e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000d80:	4b16      	ldr	r3, [pc, #88]	; (8000ddc <MX_FMC_Init+0x98>)
 8000d82:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000d86:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000d88:	4b14      	ldr	r3, [pc, #80]	; (8000ddc <MX_FMC_Init+0x98>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000d8e:	4b13      	ldr	r3, [pc, #76]	; (8000ddc <MX_FMC_Init+0x98>)
 8000d90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d94:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000d96:	4b11      	ldr	r3, [pc, #68]	; (8000ddc <MX_FMC_Init+0x98>)
 8000d98:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d9c:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000d9e:	4b0f      	ldr	r3, [pc, #60]	; (8000ddc <MX_FMC_Init+0x98>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 3;
 8000da4:	2303      	movs	r3, #3
 8000da6:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 12;
 8000da8:	230c      	movs	r3, #12
 8000daa:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 3;
 8000dac:	2303      	movs	r3, #3
 8000dae:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 5;
 8000db0:	2305      	movs	r3, #5
 8000db2:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 5;
 8000db4:	2305      	movs	r3, #5
 8000db6:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 5;
 8000db8:	2305      	movs	r3, #5
 8000dba:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 3;
 8000dbc:	2303      	movs	r3, #3
 8000dbe:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000dc0:	1d3b      	adds	r3, r7, #4
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	4805      	ldr	r0, [pc, #20]	; (8000ddc <MX_FMC_Init+0x98>)
 8000dc6:	f00e f8d5 	bl	800ef74 <HAL_SDRAM_Init>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000dd0:	f000 f921 	bl	8001016 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000dd4:	bf00      	nop
 8000dd6:	3720      	adds	r7, #32
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	2000d64c 	.word	0x2000d64c
 8000de0:	a0000140 	.word	0xa0000140

08000de4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b08e      	sub	sp, #56	; 0x38
 8000de8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dee:	2200      	movs	r2, #0
 8000df0:	601a      	str	r2, [r3, #0]
 8000df2:	605a      	str	r2, [r3, #4]
 8000df4:	609a      	str	r2, [r3, #8]
 8000df6:	60da      	str	r2, [r3, #12]
 8000df8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	623b      	str	r3, [r7, #32]
 8000dfe:	4b75      	ldr	r3, [pc, #468]	; (8000fd4 <MX_GPIO_Init+0x1f0>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e02:	4a74      	ldr	r2, [pc, #464]	; (8000fd4 <MX_GPIO_Init+0x1f0>)
 8000e04:	f043 0310 	orr.w	r3, r3, #16
 8000e08:	6313      	str	r3, [r2, #48]	; 0x30
 8000e0a:	4b72      	ldr	r3, [pc, #456]	; (8000fd4 <MX_GPIO_Init+0x1f0>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0e:	f003 0310 	and.w	r3, r3, #16
 8000e12:	623b      	str	r3, [r7, #32]
 8000e14:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e16:	2300      	movs	r3, #0
 8000e18:	61fb      	str	r3, [r7, #28]
 8000e1a:	4b6e      	ldr	r3, [pc, #440]	; (8000fd4 <MX_GPIO_Init+0x1f0>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1e:	4a6d      	ldr	r2, [pc, #436]	; (8000fd4 <MX_GPIO_Init+0x1f0>)
 8000e20:	f043 0320 	orr.w	r3, r3, #32
 8000e24:	6313      	str	r3, [r2, #48]	; 0x30
 8000e26:	4b6b      	ldr	r3, [pc, #428]	; (8000fd4 <MX_GPIO_Init+0x1f0>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2a:	f003 0320 	and.w	r3, r3, #32
 8000e2e:	61fb      	str	r3, [r7, #28]
 8000e30:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e32:	2300      	movs	r3, #0
 8000e34:	61bb      	str	r3, [r7, #24]
 8000e36:	4b67      	ldr	r3, [pc, #412]	; (8000fd4 <MX_GPIO_Init+0x1f0>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3a:	4a66      	ldr	r2, [pc, #408]	; (8000fd4 <MX_GPIO_Init+0x1f0>)
 8000e3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e40:	6313      	str	r3, [r2, #48]	; 0x30
 8000e42:	4b64      	ldr	r3, [pc, #400]	; (8000fd4 <MX_GPIO_Init+0x1f0>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e4a:	61bb      	str	r3, [r7, #24]
 8000e4c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e4e:	2300      	movs	r3, #0
 8000e50:	617b      	str	r3, [r7, #20]
 8000e52:	4b60      	ldr	r3, [pc, #384]	; (8000fd4 <MX_GPIO_Init+0x1f0>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e56:	4a5f      	ldr	r2, [pc, #380]	; (8000fd4 <MX_GPIO_Init+0x1f0>)
 8000e58:	f043 0304 	orr.w	r3, r3, #4
 8000e5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e5e:	4b5d      	ldr	r3, [pc, #372]	; (8000fd4 <MX_GPIO_Init+0x1f0>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e62:	f003 0304 	and.w	r3, r3, #4
 8000e66:	617b      	str	r3, [r7, #20]
 8000e68:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	613b      	str	r3, [r7, #16]
 8000e6e:	4b59      	ldr	r3, [pc, #356]	; (8000fd4 <MX_GPIO_Init+0x1f0>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e72:	4a58      	ldr	r2, [pc, #352]	; (8000fd4 <MX_GPIO_Init+0x1f0>)
 8000e74:	f043 0301 	orr.w	r3, r3, #1
 8000e78:	6313      	str	r3, [r2, #48]	; 0x30
 8000e7a:	4b56      	ldr	r3, [pc, #344]	; (8000fd4 <MX_GPIO_Init+0x1f0>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7e:	f003 0301 	and.w	r3, r3, #1
 8000e82:	613b      	str	r3, [r7, #16]
 8000e84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e86:	2300      	movs	r3, #0
 8000e88:	60fb      	str	r3, [r7, #12]
 8000e8a:	4b52      	ldr	r3, [pc, #328]	; (8000fd4 <MX_GPIO_Init+0x1f0>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8e:	4a51      	ldr	r2, [pc, #324]	; (8000fd4 <MX_GPIO_Init+0x1f0>)
 8000e90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e94:	6313      	str	r3, [r2, #48]	; 0x30
 8000e96:	4b4f      	ldr	r3, [pc, #316]	; (8000fd4 <MX_GPIO_Init+0x1f0>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e9e:	60fb      	str	r3, [r7, #12]
 8000ea0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	60bb      	str	r3, [r7, #8]
 8000ea6:	4b4b      	ldr	r3, [pc, #300]	; (8000fd4 <MX_GPIO_Init+0x1f0>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eaa:	4a4a      	ldr	r2, [pc, #296]	; (8000fd4 <MX_GPIO_Init+0x1f0>)
 8000eac:	f043 0302 	orr.w	r3, r3, #2
 8000eb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb2:	4b48      	ldr	r3, [pc, #288]	; (8000fd4 <MX_GPIO_Init+0x1f0>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb6:	f003 0302 	and.w	r3, r3, #2
 8000eba:	60bb      	str	r3, [r7, #8]
 8000ebc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	607b      	str	r3, [r7, #4]
 8000ec2:	4b44      	ldr	r3, [pc, #272]	; (8000fd4 <MX_GPIO_Init+0x1f0>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec6:	4a43      	ldr	r2, [pc, #268]	; (8000fd4 <MX_GPIO_Init+0x1f0>)
 8000ec8:	f043 0308 	orr.w	r3, r3, #8
 8000ecc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ece:	4b41      	ldr	r3, [pc, #260]	; (8000fd4 <MX_GPIO_Init+0x1f0>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed2:	f003 0308 	and.w	r3, r3, #8
 8000ed6:	607b      	str	r3, [r7, #4]
 8000ed8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, PUMP1_ON_Pin|PUMP2_ON_Pin|PUMP3_ON_Pin|PUMP4_ON_Pin, GPIO_PIN_RESET);
 8000eda:	2200      	movs	r2, #0
 8000edc:	2178      	movs	r1, #120	; 0x78
 8000ede:	483e      	ldr	r0, [pc, #248]	; (8000fd8 <MX_GPIO_Init+0x1f4>)
 8000ee0:	f00b f860 	bl	800bfa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_Pin|LED_YELLOW_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	21e0      	movs	r1, #224	; 0xe0
 8000ee8:	483c      	ldr	r0, [pc, #240]	; (8000fdc <MX_GPIO_Init+0x1f8>)
 8000eea:	f00b f85b 	bl	800bfa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DSI_RESET_GPIO_Port, DSI_RESET_Pin, GPIO_PIN_SET);
 8000eee:	2201      	movs	r2, #1
 8000ef0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ef4:	483a      	ldr	r0, [pc, #232]	; (8000fe0 <MX_GPIO_Init+0x1fc>)
 8000ef6:	f00b f855 	bl	800bfa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BT_RESET_GPIO_Port, BT_RESET_Pin, GPIO_PIN_RESET);
 8000efa:	2200      	movs	r2, #0
 8000efc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f00:	4838      	ldr	r0, [pc, #224]	; (8000fe4 <MX_GPIO_Init+0x200>)
 8000f02:	f00b f84f 	bl	800bfa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PUMP1_ON_Pin */
  GPIO_InitStruct.Pin = PUMP1_ON_Pin;
 8000f06:	2308      	movs	r3, #8
 8000f08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f12:	2300      	movs	r3, #0
 8000f14:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(PUMP1_ON_GPIO_Port, &GPIO_InitStruct);
 8000f16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	482e      	ldr	r0, [pc, #184]	; (8000fd8 <MX_GPIO_Init+0x1f4>)
 8000f1e:	f00a fe97 	bl	800bc50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PUMP2_ON_Pin PUMP3_ON_Pin PUMP4_ON_Pin */
  GPIO_InitStruct.Pin = PUMP2_ON_Pin|PUMP3_ON_Pin|PUMP4_ON_Pin;
 8000f22:	2370      	movs	r3, #112	; 0x70
 8000f24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f26:	2301      	movs	r3, #1
 8000f28:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f2a:	2302      	movs	r3, #2
 8000f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f36:	4619      	mov	r1, r3
 8000f38:	4827      	ldr	r0, [pc, #156]	; (8000fd8 <MX_GPIO_Init+0x1f4>)
 8000f3a:	f00a fe89 	bl	800bc50 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8000f3e:	2320      	movs	r3, #32
 8000f40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f42:	2301      	movs	r3, #1
 8000f44:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f46:	2302      	movs	r3, #2
 8000f48:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8000f4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f52:	4619      	mov	r1, r3
 8000f54:	4821      	ldr	r0, [pc, #132]	; (8000fdc <MX_GPIO_Init+0x1f8>)
 8000f56:	f00a fe7b 	bl	800bc50 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_YELLOW_Pin LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin|LED_GREEN_Pin;
 8000f5a:	23c0      	movs	r3, #192	; 0xc0
 8000f5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f62:	2300      	movs	r3, #0
 8000f64:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f66:	2300      	movs	r3, #0
 8000f68:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f6e:	4619      	mov	r1, r3
 8000f70:	481a      	ldr	r0, [pc, #104]	; (8000fdc <MX_GPIO_Init+0x1f8>)
 8000f72:	f00a fe6d 	bl	800bc50 <HAL_GPIO_Init>

  /*Configure GPIO pin : DSI_RESET_Pin */
  GPIO_InitStruct.Pin = DSI_RESET_Pin;
 8000f76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f7a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f80:	2301      	movs	r3, #1
 8000f82:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f84:	2303      	movs	r3, #3
 8000f86:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(DSI_RESET_GPIO_Port, &GPIO_InitStruct);
 8000f88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	4814      	ldr	r0, [pc, #80]	; (8000fe0 <MX_GPIO_Init+0x1fc>)
 8000f90:	f00a fe5e 	bl	800bc50 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_INT_Pin LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin|LCD_BL_CTRL_Pin;
 8000f94:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000f98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fa2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	480d      	ldr	r0, [pc, #52]	; (8000fe0 <MX_GPIO_Init+0x1fc>)
 8000faa:	f00a fe51 	bl	800bc50 <HAL_GPIO_Init>

  /*Configure GPIO pin : BT_RESET_Pin */
  GPIO_InitStruct.Pin = BT_RESET_Pin;
 8000fae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fb2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(BT_RESET_GPIO_Port, &GPIO_InitStruct);
 8000fc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	4807      	ldr	r0, [pc, #28]	; (8000fe4 <MX_GPIO_Init+0x200>)
 8000fc8:	f00a fe42 	bl	800bc50 <HAL_GPIO_Init>

}
 8000fcc:	bf00      	nop
 8000fce:	3738      	adds	r7, #56	; 0x38
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	40023800 	.word	0x40023800
 8000fd8:	40021000 	.word	0x40021000
 8000fdc:	40020000 	.word	0x40020000
 8000fe0:	40020400 	.word	0x40020400
 8000fe4:	40020800 	.word	0x40020800

08000fe8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000ff0:	2001      	movs	r0, #1
 8000ff2:	f00e ff58 	bl	800fea6 <osDelay>
 8000ff6:	e7fb      	b.n	8000ff0 <StartDefaultTask+0x8>

08000ff8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001008:	d101      	bne.n	800100e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800100a:	f009 f897 	bl	800a13c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800100e:	bf00      	nop
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}

08001016 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001016:	b480      	push	{r7}
 8001018:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800101a:	bf00      	nop
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr

08001024 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800102a:	2300      	movs	r3, #0
 800102c:	607b      	str	r3, [r7, #4]
 800102e:	4b12      	ldr	r3, [pc, #72]	; (8001078 <HAL_MspInit+0x54>)
 8001030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001032:	4a11      	ldr	r2, [pc, #68]	; (8001078 <HAL_MspInit+0x54>)
 8001034:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001038:	6453      	str	r3, [r2, #68]	; 0x44
 800103a:	4b0f      	ldr	r3, [pc, #60]	; (8001078 <HAL_MspInit+0x54>)
 800103c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800103e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001042:	607b      	str	r3, [r7, #4]
 8001044:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001046:	2300      	movs	r3, #0
 8001048:	603b      	str	r3, [r7, #0]
 800104a:	4b0b      	ldr	r3, [pc, #44]	; (8001078 <HAL_MspInit+0x54>)
 800104c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104e:	4a0a      	ldr	r2, [pc, #40]	; (8001078 <HAL_MspInit+0x54>)
 8001050:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001054:	6413      	str	r3, [r2, #64]	; 0x40
 8001056:	4b08      	ldr	r3, [pc, #32]	; (8001078 <HAL_MspInit+0x54>)
 8001058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800105e:	603b      	str	r3, [r7, #0]
 8001060:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001062:	2200      	movs	r2, #0
 8001064:	210f      	movs	r1, #15
 8001066:	f06f 0001 	mvn.w	r0, #1
 800106a:	f009 fbd3 	bl	800a814 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800106e:	bf00      	nop
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	40023800 	.word	0x40023800

0800107c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b08a      	sub	sp, #40	; 0x28
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001084:	f107 0314 	add.w	r3, r7, #20
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	605a      	str	r2, [r3, #4]
 800108e:	609a      	str	r2, [r3, #8]
 8001090:	60da      	str	r2, [r3, #12]
 8001092:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a17      	ldr	r2, [pc, #92]	; (80010f8 <HAL_ADC_MspInit+0x7c>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d127      	bne.n	80010ee <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800109e:	2300      	movs	r3, #0
 80010a0:	613b      	str	r3, [r7, #16]
 80010a2:	4b16      	ldr	r3, [pc, #88]	; (80010fc <HAL_ADC_MspInit+0x80>)
 80010a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010a6:	4a15      	ldr	r2, [pc, #84]	; (80010fc <HAL_ADC_MspInit+0x80>)
 80010a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010ac:	6453      	str	r3, [r2, #68]	; 0x44
 80010ae:	4b13      	ldr	r3, [pc, #76]	; (80010fc <HAL_ADC_MspInit+0x80>)
 80010b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010b6:	613b      	str	r3, [r7, #16]
 80010b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ba:	2300      	movs	r3, #0
 80010bc:	60fb      	str	r3, [r7, #12]
 80010be:	4b0f      	ldr	r3, [pc, #60]	; (80010fc <HAL_ADC_MspInit+0x80>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c2:	4a0e      	ldr	r2, [pc, #56]	; (80010fc <HAL_ADC_MspInit+0x80>)
 80010c4:	f043 0301 	orr.w	r3, r3, #1
 80010c8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ca:	4b0c      	ldr	r3, [pc, #48]	; (80010fc <HAL_ADC_MspInit+0x80>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ce:	f003 0301 	and.w	r3, r3, #1
 80010d2:	60fb      	str	r3, [r7, #12]
 80010d4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80010d6:	2308      	movs	r3, #8
 80010d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010da:	2303      	movs	r3, #3
 80010dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010de:	2300      	movs	r3, #0
 80010e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e2:	f107 0314 	add.w	r3, r7, #20
 80010e6:	4619      	mov	r1, r3
 80010e8:	4805      	ldr	r0, [pc, #20]	; (8001100 <HAL_ADC_MspInit+0x84>)
 80010ea:	f00a fdb1 	bl	800bc50 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80010ee:	bf00      	nop
 80010f0:	3728      	adds	r7, #40	; 0x28
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	40012000 	.word	0x40012000
 80010fc:	40023800 	.word	0x40023800
 8001100:	40020000 	.word	0x40020000

08001104 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001104:	b480      	push	{r7}
 8001106:	b085      	sub	sp, #20
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a0b      	ldr	r2, [pc, #44]	; (8001140 <HAL_CRC_MspInit+0x3c>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d10d      	bne.n	8001132 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001116:	2300      	movs	r3, #0
 8001118:	60fb      	str	r3, [r7, #12]
 800111a:	4b0a      	ldr	r3, [pc, #40]	; (8001144 <HAL_CRC_MspInit+0x40>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111e:	4a09      	ldr	r2, [pc, #36]	; (8001144 <HAL_CRC_MspInit+0x40>)
 8001120:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001124:	6313      	str	r3, [r2, #48]	; 0x30
 8001126:	4b07      	ldr	r3, [pc, #28]	; (8001144 <HAL_CRC_MspInit+0x40>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800112e:	60fb      	str	r3, [r7, #12]
 8001130:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001132:	bf00      	nop
 8001134:	3714      	adds	r7, #20
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	40023000 	.word	0x40023000
 8001144:	40023800 	.word	0x40023800

08001148 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a0e      	ldr	r2, [pc, #56]	; (8001190 <HAL_DMA2D_MspInit+0x48>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d115      	bne.n	8001186 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800115a:	2300      	movs	r3, #0
 800115c:	60fb      	str	r3, [r7, #12]
 800115e:	4b0d      	ldr	r3, [pc, #52]	; (8001194 <HAL_DMA2D_MspInit+0x4c>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	4a0c      	ldr	r2, [pc, #48]	; (8001194 <HAL_DMA2D_MspInit+0x4c>)
 8001164:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001168:	6313      	str	r3, [r2, #48]	; 0x30
 800116a:	4b0a      	ldr	r3, [pc, #40]	; (8001194 <HAL_DMA2D_MspInit+0x4c>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001172:	60fb      	str	r3, [r7, #12]
 8001174:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8001176:	2200      	movs	r2, #0
 8001178:	2105      	movs	r1, #5
 800117a:	205a      	movs	r0, #90	; 0x5a
 800117c:	f009 fb4a 	bl	800a814 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001180:	205a      	movs	r0, #90	; 0x5a
 8001182:	f009 fb63 	bl	800a84c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8001186:	bf00      	nop
 8001188:	3710      	adds	r7, #16
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	4002b000 	.word	0x4002b000
 8001194:	40023800 	.word	0x40023800

08001198 <HAL_DMA2D_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspDeInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a07      	ldr	r2, [pc, #28]	; (80011c4 <HAL_DMA2D_MspDeInit+0x2c>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d108      	bne.n	80011bc <HAL_DMA2D_MspDeInit+0x24>
  {
  /* USER CODE BEGIN DMA2D_MspDeInit 0 */

  /* USER CODE END DMA2D_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_DMA2D_CLK_DISABLE();
 80011aa:	4b07      	ldr	r3, [pc, #28]	; (80011c8 <HAL_DMA2D_MspDeInit+0x30>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ae:	4a06      	ldr	r2, [pc, #24]	; (80011c8 <HAL_DMA2D_MspDeInit+0x30>)
 80011b0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80011b4:	6313      	str	r3, [r2, #48]	; 0x30

    /* DMA2D interrupt DeInit */
    HAL_NVIC_DisableIRQ(DMA2D_IRQn);
 80011b6:	205a      	movs	r0, #90	; 0x5a
 80011b8:	f009 fb56 	bl	800a868 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN DMA2D_MspDeInit 1 */

  /* USER CODE END DMA2D_MspDeInit 1 */
  }

}
 80011bc:	bf00      	nop
 80011be:	3708      	adds	r7, #8
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	4002b000 	.word	0x4002b000
 80011c8:	40023800 	.word	0x40023800

080011cc <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b08a      	sub	sp, #40	; 0x28
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d4:	f107 0314 	add.w	r3, r7, #20
 80011d8:	2200      	movs	r2, #0
 80011da:	601a      	str	r2, [r3, #0]
 80011dc:	605a      	str	r2, [r3, #4]
 80011de:	609a      	str	r2, [r3, #8]
 80011e0:	60da      	str	r2, [r3, #12]
 80011e2:	611a      	str	r2, [r3, #16]
  if(hdsi->Instance==DSI)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a1d      	ldr	r2, [pc, #116]	; (8001260 <HAL_DSI_MspInit+0x94>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d134      	bne.n	8001258 <HAL_DSI_MspInit+0x8c>
  {
  /* USER CODE BEGIN DSI_MspInit 0 */

  /* USER CODE END DSI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 80011ee:	2300      	movs	r3, #0
 80011f0:	613b      	str	r3, [r7, #16]
 80011f2:	4b1c      	ldr	r3, [pc, #112]	; (8001264 <HAL_DSI_MspInit+0x98>)
 80011f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f6:	4a1b      	ldr	r2, [pc, #108]	; (8001264 <HAL_DSI_MspInit+0x98>)
 80011f8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80011fc:	6453      	str	r3, [r2, #68]	; 0x44
 80011fe:	4b19      	ldr	r3, [pc, #100]	; (8001264 <HAL_DSI_MspInit+0x98>)
 8001200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001202:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001206:	613b      	str	r3, [r7, #16]
 8001208:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800120a:	2300      	movs	r3, #0
 800120c:	60fb      	str	r3, [r7, #12]
 800120e:	4b15      	ldr	r3, [pc, #84]	; (8001264 <HAL_DSI_MspInit+0x98>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001212:	4a14      	ldr	r2, [pc, #80]	; (8001264 <HAL_DSI_MspInit+0x98>)
 8001214:	f043 0302 	orr.w	r3, r3, #2
 8001218:	6313      	str	r3, [r2, #48]	; 0x30
 800121a:	4b12      	ldr	r3, [pc, #72]	; (8001264 <HAL_DSI_MspInit+0x98>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121e:	f003 0302 	and.w	r3, r3, #2
 8001222:	60fb      	str	r3, [r7, #12]
 8001224:	68fb      	ldr	r3, [r7, #12]
    /**DSIHOST GPIO Configuration
    PB11     ------> DSIHOST_TE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001226:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800122a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800122c:	2302      	movs	r3, #2
 800122e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001230:	2300      	movs	r3, #0
 8001232:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001234:	2300      	movs	r3, #0
 8001236:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 8001238:	230d      	movs	r3, #13
 800123a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800123c:	f107 0314 	add.w	r3, r7, #20
 8001240:	4619      	mov	r1, r3
 8001242:	4809      	ldr	r0, [pc, #36]	; (8001268 <HAL_DSI_MspInit+0x9c>)
 8001244:	f00a fd04 	bl	800bc50 <HAL_GPIO_Init>

    /* DSI interrupt Init */
    HAL_NVIC_SetPriority(DSI_IRQn, 5, 0);
 8001248:	2200      	movs	r2, #0
 800124a:	2105      	movs	r1, #5
 800124c:	205c      	movs	r0, #92	; 0x5c
 800124e:	f009 fae1 	bl	800a814 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DSI_IRQn);
 8001252:	205c      	movs	r0, #92	; 0x5c
 8001254:	f009 fafa 	bl	800a84c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }

}
 8001258:	bf00      	nop
 800125a:	3728      	adds	r7, #40	; 0x28
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	40016c00 	.word	0x40016c00
 8001264:	40023800 	.word	0x40023800
 8001268:	40020400 	.word	0x40020400

0800126c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b08a      	sub	sp, #40	; 0x28
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001274:	f107 0314 	add.w	r3, r7, #20
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]
 800127c:	605a      	str	r2, [r3, #4]
 800127e:	609a      	str	r2, [r3, #8]
 8001280:	60da      	str	r2, [r3, #12]
 8001282:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a1d      	ldr	r2, [pc, #116]	; (8001300 <HAL_I2C_MspInit+0x94>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d133      	bne.n	80012f6 <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	613b      	str	r3, [r7, #16]
 8001292:	4b1c      	ldr	r3, [pc, #112]	; (8001304 <HAL_I2C_MspInit+0x98>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	4a1b      	ldr	r2, [pc, #108]	; (8001304 <HAL_I2C_MspInit+0x98>)
 8001298:	f043 0302 	orr.w	r3, r3, #2
 800129c:	6313      	str	r3, [r2, #48]	; 0x30
 800129e:	4b19      	ldr	r3, [pc, #100]	; (8001304 <HAL_I2C_MspInit+0x98>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	f003 0302 	and.w	r3, r3, #2
 80012a6:	613b      	str	r3, [r7, #16]
 80012a8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80012aa:	23c0      	movs	r3, #192	; 0xc0
 80012ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012ae:	2312      	movs	r3, #18
 80012b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012b2:	2301      	movs	r3, #1
 80012b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b6:	2303      	movs	r3, #3
 80012b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012ba:	2304      	movs	r3, #4
 80012bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012be:	f107 0314 	add.w	r3, r7, #20
 80012c2:	4619      	mov	r1, r3
 80012c4:	4810      	ldr	r0, [pc, #64]	; (8001308 <HAL_I2C_MspInit+0x9c>)
 80012c6:	f00a fcc3 	bl	800bc50 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	60fb      	str	r3, [r7, #12]
 80012ce:	4b0d      	ldr	r3, [pc, #52]	; (8001304 <HAL_I2C_MspInit+0x98>)
 80012d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d2:	4a0c      	ldr	r2, [pc, #48]	; (8001304 <HAL_I2C_MspInit+0x98>)
 80012d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012d8:	6413      	str	r3, [r2, #64]	; 0x40
 80012da:	4b0a      	ldr	r3, [pc, #40]	; (8001304 <HAL_I2C_MspInit+0x98>)
 80012dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012e2:	60fb      	str	r3, [r7, #12]
 80012e4:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80012e6:	2200      	movs	r2, #0
 80012e8:	2100      	movs	r1, #0
 80012ea:	201f      	movs	r0, #31
 80012ec:	f009 fa92 	bl	800a814 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80012f0:	201f      	movs	r0, #31
 80012f2:	f009 faab 	bl	800a84c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80012f6:	bf00      	nop
 80012f8:	3728      	adds	r7, #40	; 0x28
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	40005400 	.word	0x40005400
 8001304:	40023800 	.word	0x40023800
 8001308:	40020400 	.word	0x40020400

0800130c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  if(hltdc->Instance==LTDC)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a12      	ldr	r2, [pc, #72]	; (8001364 <HAL_LTDC_MspInit+0x58>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d11d      	bne.n	800135a <HAL_LTDC_MspInit+0x4e>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800131e:	2300      	movs	r3, #0
 8001320:	60fb      	str	r3, [r7, #12]
 8001322:	4b11      	ldr	r3, [pc, #68]	; (8001368 <HAL_LTDC_MspInit+0x5c>)
 8001324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001326:	4a10      	ldr	r2, [pc, #64]	; (8001368 <HAL_LTDC_MspInit+0x5c>)
 8001328:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800132c:	6453      	str	r3, [r2, #68]	; 0x44
 800132e:	4b0e      	ldr	r3, [pc, #56]	; (8001368 <HAL_LTDC_MspInit+0x5c>)
 8001330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001332:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001336:	60fb      	str	r3, [r7, #12]
 8001338:	68fb      	ldr	r3, [r7, #12]
    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 3, 0);
 800133a:	2200      	movs	r2, #0
 800133c:	2103      	movs	r1, #3
 800133e:	2058      	movs	r0, #88	; 0x58
 8001340:	f009 fa68 	bl	800a814 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001344:	2058      	movs	r0, #88	; 0x58
 8001346:	f009 fa81 	bl	800a84c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(LTDC_ER_IRQn, 3, 0);
 800134a:	2200      	movs	r2, #0
 800134c:	2103      	movs	r1, #3
 800134e:	2059      	movs	r0, #89	; 0x59
 8001350:	f009 fa60 	bl	800a814 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_ER_IRQn);
 8001354:	2059      	movs	r0, #89	; 0x59
 8001356:	f009 fa79 	bl	800a84c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800135a:	bf00      	nop
 800135c:	3710      	adds	r7, #16
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	40016800 	.word	0x40016800
 8001368:	40023800 	.word	0x40023800

0800136c <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b08a      	sub	sp, #40	; 0x28
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001374:	f107 0314 	add.w	r3, r7, #20
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]
 800137c:	605a      	str	r2, [r3, #4]
 800137e:	609a      	str	r2, [r3, #8]
 8001380:	60da      	str	r2, [r3, #12]
 8001382:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a31      	ldr	r2, [pc, #196]	; (8001450 <HAL_QSPI_MspInit+0xe4>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d15c      	bne.n	8001448 <HAL_QSPI_MspInit+0xdc>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800138e:	2300      	movs	r3, #0
 8001390:	613b      	str	r3, [r7, #16]
 8001392:	4b30      	ldr	r3, [pc, #192]	; (8001454 <HAL_QSPI_MspInit+0xe8>)
 8001394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001396:	4a2f      	ldr	r2, [pc, #188]	; (8001454 <HAL_QSPI_MspInit+0xe8>)
 8001398:	f043 0302 	orr.w	r3, r3, #2
 800139c:	6393      	str	r3, [r2, #56]	; 0x38
 800139e:	4b2d      	ldr	r3, [pc, #180]	; (8001454 <HAL_QSPI_MspInit+0xe8>)
 80013a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013a2:	f003 0302 	and.w	r3, r3, #2
 80013a6:	613b      	str	r3, [r7, #16]
 80013a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80013aa:	2300      	movs	r3, #0
 80013ac:	60fb      	str	r3, [r7, #12]
 80013ae:	4b29      	ldr	r3, [pc, #164]	; (8001454 <HAL_QSPI_MspInit+0xe8>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b2:	4a28      	ldr	r2, [pc, #160]	; (8001454 <HAL_QSPI_MspInit+0xe8>)
 80013b4:	f043 0320 	orr.w	r3, r3, #32
 80013b8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ba:	4b26      	ldr	r3, [pc, #152]	; (8001454 <HAL_QSPI_MspInit+0xe8>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013be:	f003 0320 	and.w	r3, r3, #32
 80013c2:	60fb      	str	r3, [r7, #12]
 80013c4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013c6:	2300      	movs	r3, #0
 80013c8:	60bb      	str	r3, [r7, #8]
 80013ca:	4b22      	ldr	r3, [pc, #136]	; (8001454 <HAL_QSPI_MspInit+0xe8>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ce:	4a21      	ldr	r2, [pc, #132]	; (8001454 <HAL_QSPI_MspInit+0xe8>)
 80013d0:	f043 0302 	orr.w	r3, r3, #2
 80013d4:	6313      	str	r3, [r2, #48]	; 0x30
 80013d6:	4b1f      	ldr	r3, [pc, #124]	; (8001454 <HAL_QSPI_MspInit+0xe8>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013da:	f003 0302 	and.w	r3, r3, #2
 80013de:	60bb      	str	r3, [r7, #8]
 80013e0:	68bb      	ldr	r3, [r7, #8]
    PF8     ------> QUADSPI_BK1_IO0
    PF9     ------> QUADSPI_BK1_IO1
    PF10     ------> QUADSPI_CLK
    PB10     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 80013e2:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 80013e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e8:	2302      	movs	r3, #2
 80013ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ec:	2300      	movs	r3, #0
 80013ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013f0:	2303      	movs	r3, #3
 80013f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 80013f4:	2309      	movs	r3, #9
 80013f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80013f8:	f107 0314 	add.w	r3, r7, #20
 80013fc:	4619      	mov	r1, r3
 80013fe:	4816      	ldr	r0, [pc, #88]	; (8001458 <HAL_QSPI_MspInit+0xec>)
 8001400:	f00a fc26 	bl	800bc50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001404:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001408:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800140a:	2302      	movs	r3, #2
 800140c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140e:	2300      	movs	r3, #0
 8001410:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001412:	2303      	movs	r3, #3
 8001414:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QSPI;
 8001416:	230a      	movs	r3, #10
 8001418:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800141a:	f107 0314 	add.w	r3, r7, #20
 800141e:	4619      	mov	r1, r3
 8001420:	480d      	ldr	r0, [pc, #52]	; (8001458 <HAL_QSPI_MspInit+0xec>)
 8001422:	f00a fc15 	bl	800bc50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001426:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800142a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142c:	2302      	movs	r3, #2
 800142e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001430:	2300      	movs	r3, #0
 8001432:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001434:	2303      	movs	r3, #3
 8001436:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8001438:	2309      	movs	r3, #9
 800143a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800143c:	f107 0314 	add.w	r3, r7, #20
 8001440:	4619      	mov	r1, r3
 8001442:	4806      	ldr	r0, [pc, #24]	; (800145c <HAL_QSPI_MspInit+0xf0>)
 8001444:	f00a fc04 	bl	800bc50 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001448:	bf00      	nop
 800144a:	3728      	adds	r7, #40	; 0x28
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	a0001000 	.word	0xa0001000
 8001454:	40023800 	.word	0x40023800
 8001458:	40021400 	.word	0x40021400
 800145c:	40020400 	.word	0x40020400

08001460 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b08a      	sub	sp, #40	; 0x28
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001468:	f107 0314 	add.w	r3, r7, #20
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	605a      	str	r2, [r3, #4]
 8001472:	609a      	str	r2, [r3, #8]
 8001474:	60da      	str	r2, [r3, #12]
 8001476:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a28      	ldr	r2, [pc, #160]	; (8001520 <HAL_UART_MspInit+0xc0>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d14a      	bne.n	8001518 <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001482:	2300      	movs	r3, #0
 8001484:	613b      	str	r3, [r7, #16]
 8001486:	4b27      	ldr	r3, [pc, #156]	; (8001524 <HAL_UART_MspInit+0xc4>)
 8001488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148a:	4a26      	ldr	r2, [pc, #152]	; (8001524 <HAL_UART_MspInit+0xc4>)
 800148c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001490:	6413      	str	r3, [r2, #64]	; 0x40
 8001492:	4b24      	ldr	r3, [pc, #144]	; (8001524 <HAL_UART_MspInit+0xc4>)
 8001494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001496:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800149a:	613b      	str	r3, [r7, #16]
 800149c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800149e:	2300      	movs	r3, #0
 80014a0:	60fb      	str	r3, [r7, #12]
 80014a2:	4b20      	ldr	r3, [pc, #128]	; (8001524 <HAL_UART_MspInit+0xc4>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a6:	4a1f      	ldr	r2, [pc, #124]	; (8001524 <HAL_UART_MspInit+0xc4>)
 80014a8:	f043 0304 	orr.w	r3, r3, #4
 80014ac:	6313      	str	r3, [r2, #48]	; 0x30
 80014ae:	4b1d      	ldr	r3, [pc, #116]	; (8001524 <HAL_UART_MspInit+0xc4>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b2:	f003 0304 	and.w	r3, r3, #4
 80014b6:	60fb      	str	r3, [r7, #12]
 80014b8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014ba:	2300      	movs	r3, #0
 80014bc:	60bb      	str	r3, [r7, #8]
 80014be:	4b19      	ldr	r3, [pc, #100]	; (8001524 <HAL_UART_MspInit+0xc4>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c2:	4a18      	ldr	r2, [pc, #96]	; (8001524 <HAL_UART_MspInit+0xc4>)
 80014c4:	f043 0308 	orr.w	r3, r3, #8
 80014c8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ca:	4b16      	ldr	r3, [pc, #88]	; (8001524 <HAL_UART_MspInit+0xc4>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ce:	f003 0308 	and.w	r3, r3, #8
 80014d2:	60bb      	str	r3, [r7, #8]
 80014d4:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80014d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014dc:	2302      	movs	r3, #2
 80014de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014e0:	2301      	movs	r3, #1
 80014e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e4:	2303      	movs	r3, #3
 80014e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80014e8:	2308      	movs	r3, #8
 80014ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014ec:	f107 0314 	add.w	r3, r7, #20
 80014f0:	4619      	mov	r1, r3
 80014f2:	480d      	ldr	r0, [pc, #52]	; (8001528 <HAL_UART_MspInit+0xc8>)
 80014f4:	f00a fbac 	bl	800bc50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80014f8:	2304      	movs	r3, #4
 80014fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014fc:	2302      	movs	r3, #2
 80014fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001500:	2301      	movs	r3, #1
 8001502:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001504:	2303      	movs	r3, #3
 8001506:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001508:	2308      	movs	r3, #8
 800150a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800150c:	f107 0314 	add.w	r3, r7, #20
 8001510:	4619      	mov	r1, r3
 8001512:	4806      	ldr	r0, [pc, #24]	; (800152c <HAL_UART_MspInit+0xcc>)
 8001514:	f00a fb9c 	bl	800bc50 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 8001518:	bf00      	nop
 800151a:	3728      	adds	r7, #40	; 0x28
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	40005000 	.word	0x40005000
 8001524:	40023800 	.word	0x40023800
 8001528:	40020800 	.word	0x40020800
 800152c:	40020c00 	.word	0x40020c00

08001530 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001530:	b580      	push	{r7, lr}
 8001532:	b086      	sub	sp, #24
 8001534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001536:	1d3b      	adds	r3, r7, #4
 8001538:	2200      	movs	r2, #0
 800153a:	601a      	str	r2, [r3, #0]
 800153c:	605a      	str	r2, [r3, #4]
 800153e:	609a      	str	r2, [r3, #8]
 8001540:	60da      	str	r2, [r3, #12]
 8001542:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001544:	4b34      	ldr	r3, [pc, #208]	; (8001618 <HAL_FMC_MspInit+0xe8>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d160      	bne.n	800160e <HAL_FMC_MspInit+0xde>
    return;
  }
  FMC_Initialized = 1;
 800154c:	4b32      	ldr	r3, [pc, #200]	; (8001618 <HAL_FMC_MspInit+0xe8>)
 800154e:	2201      	movs	r2, #1
 8001550:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001552:	2300      	movs	r3, #0
 8001554:	603b      	str	r3, [r7, #0]
 8001556:	4b31      	ldr	r3, [pc, #196]	; (800161c <HAL_FMC_MspInit+0xec>)
 8001558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800155a:	4a30      	ldr	r2, [pc, #192]	; (800161c <HAL_FMC_MspInit+0xec>)
 800155c:	f043 0301 	orr.w	r3, r3, #1
 8001560:	6393      	str	r3, [r2, #56]	; 0x38
 8001562:	4b2e      	ldr	r3, [pc, #184]	; (800161c <HAL_FMC_MspInit+0xec>)
 8001564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001566:	f003 0301 	and.w	r3, r3, #1
 800156a:	603b      	str	r3, [r7, #0]
 800156c:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FMC_D3
  PG15   ------> FMC_SDNCAS
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800156e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001572:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001574:	2302      	movs	r3, #2
 8001576:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001578:	2300      	movs	r3, #0
 800157a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800157c:	2303      	movs	r3, #3
 800157e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001580:	230c      	movs	r3, #12
 8001582:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001584:	1d3b      	adds	r3, r7, #4
 8001586:	4619      	mov	r1, r3
 8001588:	4825      	ldr	r0, [pc, #148]	; (8001620 <HAL_FMC_MspInit+0xf0>)
 800158a:	f00a fb61 	bl	800bc50 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 800158e:	230d      	movs	r3, #13
 8001590:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001592:	2302      	movs	r3, #2
 8001594:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001596:	2300      	movs	r3, #0
 8001598:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800159a:	2303      	movs	r3, #3
 800159c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800159e:	230c      	movs	r3, #12
 80015a0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015a2:	1d3b      	adds	r3, r7, #4
 80015a4:	4619      	mov	r1, r3
 80015a6:	481f      	ldr	r0, [pc, #124]	; (8001624 <HAL_FMC_MspInit+0xf4>)
 80015a8:	f00a fb52 	bl	800bc50 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 80015ac:	f248 1333 	movw	r3, #33075	; 0x8133
 80015b0:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b2:	2302      	movs	r3, #2
 80015b4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b6:	2300      	movs	r3, #0
 80015b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ba:	2303      	movs	r3, #3
 80015bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80015be:	230c      	movs	r3, #12
 80015c0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015c2:	1d3b      	adds	r3, r7, #4
 80015c4:	4619      	mov	r1, r3
 80015c6:	4818      	ldr	r0, [pc, #96]	; (8001628 <HAL_FMC_MspInit+0xf8>)
 80015c8:	f00a fb42 	bl	800bc50 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80015cc:	f64f 7383 	movw	r3, #65411	; 0xff83
 80015d0:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d2:	2302      	movs	r3, #2
 80015d4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d6:	2300      	movs	r3, #0
 80015d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015da:	2303      	movs	r3, #3
 80015dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80015de:	230c      	movs	r3, #12
 80015e0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015e2:	1d3b      	adds	r3, r7, #4
 80015e4:	4619      	mov	r1, r3
 80015e6:	4811      	ldr	r0, [pc, #68]	; (800162c <HAL_FMC_MspInit+0xfc>)
 80015e8:	f00a fb32 	bl	800bc50 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 80015ec:	f24c 7303 	movw	r3, #50947	; 0xc703
 80015f0:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f2:	2302      	movs	r3, #2
 80015f4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f6:	2300      	movs	r3, #0
 80015f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015fa:	2303      	movs	r3, #3
 80015fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80015fe:	230c      	movs	r3, #12
 8001600:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001602:	1d3b      	adds	r3, r7, #4
 8001604:	4619      	mov	r1, r3
 8001606:	480a      	ldr	r0, [pc, #40]	; (8001630 <HAL_FMC_MspInit+0x100>)
 8001608:	f00a fb22 	bl	800bc50 <HAL_GPIO_Init>
 800160c:	e000      	b.n	8001610 <HAL_FMC_MspInit+0xe0>
    return;
 800160e:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001610:	3718      	adds	r7, #24
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	2000035c 	.word	0x2000035c
 800161c:	40023800 	.word	0x40023800
 8001620:	40021400 	.word	0x40021400
 8001624:	40020800 	.word	0x40020800
 8001628:	40021800 	.word	0x40021800
 800162c:	40021000 	.word	0x40021000
 8001630:	40020c00 	.word	0x40020c00

08001634 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800163c:	f7ff ff78 	bl	8001530 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001640:	bf00      	nop
 8001642:	3708      	adds	r7, #8
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}

08001648 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b08c      	sub	sp, #48	; 0x30
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001650:	2300      	movs	r3, #0
 8001652:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001654:	2300      	movs	r3, #0
 8001656:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 8001658:	2200      	movs	r2, #0
 800165a:	6879      	ldr	r1, [r7, #4]
 800165c:	201c      	movs	r0, #28
 800165e:	f009 f8d9 	bl	800a814 <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001662:	201c      	movs	r0, #28
 8001664:	f009 f8f2 	bl	800a84c <HAL_NVIC_EnableIRQ>
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001668:	2300      	movs	r3, #0
 800166a:	60fb      	str	r3, [r7, #12]
 800166c:	4b20      	ldr	r3, [pc, #128]	; (80016f0 <HAL_InitTick+0xa8>)
 800166e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001670:	4a1f      	ldr	r2, [pc, #124]	; (80016f0 <HAL_InitTick+0xa8>)
 8001672:	f043 0301 	orr.w	r3, r3, #1
 8001676:	6413      	str	r3, [r2, #64]	; 0x40
 8001678:	4b1d      	ldr	r3, [pc, #116]	; (80016f0 <HAL_InitTick+0xa8>)
 800167a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167c:	f003 0301 	and.w	r3, r3, #1
 8001680:	60fb      	str	r3, [r7, #12]
 8001682:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001684:	f107 0210 	add.w	r2, r7, #16
 8001688:	f107 0314 	add.w	r3, r7, #20
 800168c:	4611      	mov	r1, r2
 800168e:	4618      	mov	r0, r3
 8001690:	f00c ffbe 	bl	800e610 <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001694:	f00c ff94 	bl	800e5c0 <HAL_RCC_GetPCLK1Freq>
 8001698:	4603      	mov	r3, r0
 800169a:	005b      	lsls	r3, r3, #1
 800169c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800169e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016a0:	4a14      	ldr	r2, [pc, #80]	; (80016f4 <HAL_InitTick+0xac>)
 80016a2:	fba2 2303 	umull	r2, r3, r2, r3
 80016a6:	0c9b      	lsrs	r3, r3, #18
 80016a8:	3b01      	subs	r3, #1
 80016aa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80016ac:	4b12      	ldr	r3, [pc, #72]	; (80016f8 <HAL_InitTick+0xb0>)
 80016ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016b2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000 / 1000) - 1;
 80016b4:	4b10      	ldr	r3, [pc, #64]	; (80016f8 <HAL_InitTick+0xb0>)
 80016b6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80016ba:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80016bc:	4a0e      	ldr	r2, [pc, #56]	; (80016f8 <HAL_InitTick+0xb0>)
 80016be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016c0:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80016c2:	4b0d      	ldr	r3, [pc, #52]	; (80016f8 <HAL_InitTick+0xb0>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016c8:	4b0b      	ldr	r3, [pc, #44]	; (80016f8 <HAL_InitTick+0xb0>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 80016ce:	480a      	ldr	r0, [pc, #40]	; (80016f8 <HAL_InitTick+0xb0>)
 80016d0:	f00d fc84 	bl	800efdc <HAL_TIM_Base_Init>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d104      	bne.n	80016e4 <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 80016da:	4807      	ldr	r0, [pc, #28]	; (80016f8 <HAL_InitTick+0xb0>)
 80016dc:	f00d fcb3 	bl	800f046 <HAL_TIM_Base_Start_IT>
 80016e0:	4603      	mov	r3, r0
 80016e2:	e000      	b.n	80016e6 <HAL_InitTick+0x9e>
  }

  /* Return function status */
  return HAL_ERROR;
 80016e4:	2301      	movs	r3, #1
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3730      	adds	r7, #48	; 0x30
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	40023800 	.word	0x40023800
 80016f4:	431bde83 	.word	0x431bde83
 80016f8:	2000d6cc 	.word	0x2000d6cc

080016fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001700:	bf00      	nop
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr

0800170a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800170a:	b480      	push	{r7}
 800170c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800170e:	e7fe      	b.n	800170e <HardFault_Handler+0x4>

08001710 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001714:	e7fe      	b.n	8001714 <MemManage_Handler+0x4>

08001716 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001716:	b480      	push	{r7}
 8001718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800171a:	e7fe      	b.n	800171a <BusFault_Handler+0x4>

0800171c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001720:	e7fe      	b.n	8001720 <UsageFault_Handler+0x4>

08001722 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001722:	b480      	push	{r7}
 8001724:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001726:	bf00      	nop
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr

08001730 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001734:	4802      	ldr	r0, [pc, #8]	; (8001740 <TIM2_IRQHandler+0x10>)
 8001736:	f00d fcaa 	bl	800f08e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800173a:	bf00      	nop
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	2000d6cc 	.word	0x2000d6cc

08001744 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001748:	4802      	ldr	r0, [pc, #8]	; (8001754 <I2C1_EV_IRQHandler+0x10>)
 800174a:	f00a fd7d 	bl	800c248 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800174e:	bf00      	nop
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	2000d464 	.word	0x2000d464

08001758 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 800175c:	4802      	ldr	r0, [pc, #8]	; (8001768 <LTDC_IRQHandler+0x10>)
 800175e:	f00c f9e1 	bl	800db24 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8001762:	bf00      	nop
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	2000d4dc 	.word	0x2000d4dc

0800176c <LTDC_ER_IRQHandler>:

/**
  * @brief This function handles LTDC global error interrupt.
  */
void LTDC_ER_IRQHandler(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_ER_IRQn 0 */

  /* USER CODE END LTDC_ER_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001770:	4802      	ldr	r0, [pc, #8]	; (800177c <LTDC_ER_IRQHandler+0x10>)
 8001772:	f00c f9d7 	bl	800db24 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_ER_IRQn 1 */

  /* USER CODE END LTDC_ER_IRQn 1 */
}
 8001776:	bf00      	nop
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	2000d4dc 	.word	0x2000d4dc

08001780 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001784:	4802      	ldr	r0, [pc, #8]	; (8001790 <DMA2D_IRQHandler+0x10>)
 8001786:	f009 fa82 	bl	800ac8e <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800178a:	bf00      	nop
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	2000d60c 	.word	0x2000d60c

08001794 <DSI_IRQHandler>:

/**
  * @brief This function handles DSI global interrupt.
  */
void DSI_IRQHandler(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DSI_IRQn 0 */

  /* USER CODE END DSI_IRQn 0 */
  HAL_DSI_IRQHandler(&hdsi);
 8001798:	4802      	ldr	r0, [pc, #8]	; (80017a4 <DSI_IRQHandler+0x10>)
 800179a:	f009 fe8e 	bl	800b4ba <HAL_DSI_IRQHandler>
  /* USER CODE BEGIN DSI_IRQn 1 */

  /* USER CODE END DSI_IRQn 1 */
}
 800179e:	bf00      	nop
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	2000d4c0 	.word	0x2000d4c0

080017a8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
	return 1;
 80017ac:	2301      	movs	r3, #1
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr

080017b8 <_kill>:

int _kill(int pid, int sig)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
 80017c0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80017c2:	f021 f847 	bl	8022854 <__errno>
 80017c6:	4602      	mov	r2, r0
 80017c8:	2316      	movs	r3, #22
 80017ca:	6013      	str	r3, [r2, #0]
	return -1;
 80017cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3708      	adds	r7, #8
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}

080017d8 <_exit>:

void _exit (int status)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80017e0:	f04f 31ff 	mov.w	r1, #4294967295
 80017e4:	6878      	ldr	r0, [r7, #4]
 80017e6:	f7ff ffe7 	bl	80017b8 <_kill>
	while (1) {}		/* Make sure we hang here */
 80017ea:	e7fe      	b.n	80017ea <_exit+0x12>

080017ec <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b086      	sub	sp, #24
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	60f8      	str	r0, [r7, #12]
 80017f4:	60b9      	str	r1, [r7, #8]
 80017f6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017f8:	2300      	movs	r3, #0
 80017fa:	617b      	str	r3, [r7, #20]
 80017fc:	e00a      	b.n	8001814 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80017fe:	f3af 8000 	nop.w
 8001802:	4601      	mov	r1, r0
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	1c5a      	adds	r2, r3, #1
 8001808:	60ba      	str	r2, [r7, #8]
 800180a:	b2ca      	uxtb	r2, r1
 800180c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	3301      	adds	r3, #1
 8001812:	617b      	str	r3, [r7, #20]
 8001814:	697a      	ldr	r2, [r7, #20]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	429a      	cmp	r2, r3
 800181a:	dbf0      	blt.n	80017fe <_read+0x12>
	}

return len;
 800181c:	687b      	ldr	r3, [r7, #4]
}
 800181e:	4618      	mov	r0, r3
 8001820:	3718      	adds	r7, #24
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}

08001826 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001826:	b580      	push	{r7, lr}
 8001828:	b086      	sub	sp, #24
 800182a:	af00      	add	r7, sp, #0
 800182c:	60f8      	str	r0, [r7, #12]
 800182e:	60b9      	str	r1, [r7, #8]
 8001830:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001832:	2300      	movs	r3, #0
 8001834:	617b      	str	r3, [r7, #20]
 8001836:	e009      	b.n	800184c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	1c5a      	adds	r2, r3, #1
 800183c:	60ba      	str	r2, [r7, #8]
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	4618      	mov	r0, r3
 8001842:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	3301      	adds	r3, #1
 800184a:	617b      	str	r3, [r7, #20]
 800184c:	697a      	ldr	r2, [r7, #20]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	429a      	cmp	r2, r3
 8001852:	dbf1      	blt.n	8001838 <_write+0x12>
	}
	return len;
 8001854:	687b      	ldr	r3, [r7, #4]
}
 8001856:	4618      	mov	r0, r3
 8001858:	3718      	adds	r7, #24
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}

0800185e <_close>:

int _close(int file)
{
 800185e:	b480      	push	{r7}
 8001860:	b083      	sub	sp, #12
 8001862:	af00      	add	r7, sp, #0
 8001864:	6078      	str	r0, [r7, #4]
	return -1;
 8001866:	f04f 33ff 	mov.w	r3, #4294967295
}
 800186a:	4618      	mov	r0, r3
 800186c:	370c      	adds	r7, #12
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr

08001876 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001876:	b480      	push	{r7}
 8001878:	b083      	sub	sp, #12
 800187a:	af00      	add	r7, sp, #0
 800187c:	6078      	str	r0, [r7, #4]
 800187e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001886:	605a      	str	r2, [r3, #4]
	return 0;
 8001888:	2300      	movs	r3, #0
}
 800188a:	4618      	mov	r0, r3
 800188c:	370c      	adds	r7, #12
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr

08001896 <_isatty>:

int _isatty(int file)
{
 8001896:	b480      	push	{r7}
 8001898:	b083      	sub	sp, #12
 800189a:	af00      	add	r7, sp, #0
 800189c:	6078      	str	r0, [r7, #4]
	return 1;
 800189e:	2301      	movs	r3, #1
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	370c      	adds	r7, #12
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr

080018ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b085      	sub	sp, #20
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	60f8      	str	r0, [r7, #12]
 80018b4:	60b9      	str	r1, [r7, #8]
 80018b6:	607a      	str	r2, [r7, #4]
	return 0;
 80018b8:	2300      	movs	r3, #0
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3714      	adds	r7, #20
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
	...

080018c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b086      	sub	sp, #24
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018d0:	4a14      	ldr	r2, [pc, #80]	; (8001924 <_sbrk+0x5c>)
 80018d2:	4b15      	ldr	r3, [pc, #84]	; (8001928 <_sbrk+0x60>)
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018dc:	4b13      	ldr	r3, [pc, #76]	; (800192c <_sbrk+0x64>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d102      	bne.n	80018ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018e4:	4b11      	ldr	r3, [pc, #68]	; (800192c <_sbrk+0x64>)
 80018e6:	4a12      	ldr	r2, [pc, #72]	; (8001930 <_sbrk+0x68>)
 80018e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018ea:	4b10      	ldr	r3, [pc, #64]	; (800192c <_sbrk+0x64>)
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4413      	add	r3, r2
 80018f2:	693a      	ldr	r2, [r7, #16]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d207      	bcs.n	8001908 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018f8:	f020 ffac 	bl	8022854 <__errno>
 80018fc:	4602      	mov	r2, r0
 80018fe:	230c      	movs	r3, #12
 8001900:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001902:	f04f 33ff 	mov.w	r3, #4294967295
 8001906:	e009      	b.n	800191c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001908:	4b08      	ldr	r3, [pc, #32]	; (800192c <_sbrk+0x64>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800190e:	4b07      	ldr	r3, [pc, #28]	; (800192c <_sbrk+0x64>)
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4413      	add	r3, r2
 8001916:	4a05      	ldr	r2, [pc, #20]	; (800192c <_sbrk+0x64>)
 8001918:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800191a:	68fb      	ldr	r3, [r7, #12]
}
 800191c:	4618      	mov	r0, r3
 800191e:	3718      	adds	r7, #24
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	20050000 	.word	0x20050000
 8001928:	00000400 	.word	0x00000400
 800192c:	20000360 	.word	0x20000360
 8001930:	2000d718 	.word	0x2000d718

08001934 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001934:	f8df d034 	ldr.w	sp, [pc, #52]	; 800196c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001938:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800193a:	e003      	b.n	8001944 <LoopCopyDataInit>

0800193c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800193c:	4b0c      	ldr	r3, [pc, #48]	; (8001970 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800193e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001940:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001942:	3104      	adds	r1, #4

08001944 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001944:	480b      	ldr	r0, [pc, #44]	; (8001974 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001946:	4b0c      	ldr	r3, [pc, #48]	; (8001978 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001948:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800194a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800194c:	d3f6      	bcc.n	800193c <CopyDataInit>
  ldr  r2, =_sbss
 800194e:	4a0b      	ldr	r2, [pc, #44]	; (800197c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001950:	e002      	b.n	8001958 <LoopFillZerobss>

08001952 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001952:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001954:	f842 3b04 	str.w	r3, [r2], #4

08001958 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001958:	4b09      	ldr	r3, [pc, #36]	; (8001980 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800195a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800195c:	d3f9      	bcc.n	8001952 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800195e:	f008 fbb5 	bl	800a0cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001962:	f020 ff8f 	bl	8022884 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001966:	f7fe fe4f 	bl	8000608 <main>
  bx  lr    
 800196a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800196c:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8001970:	081f854c 	.word	0x081f854c
  ldr  r0, =_sdata
 8001974:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001978:	200000e8 	.word	0x200000e8
  ldr  r2, =_sbss
 800197c:	200000e8 	.word	0x200000e8
  ldr  r3, = _ebss
 8001980:	2000d714 	.word	0x2000d714

08001984 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001984:	e7fe      	b.n	8001984 <ADC_IRQHandler>

08001986 <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 8001986:	b580      	push	{r7, lr}
 8001988:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_init();
 800198a:	f001 fc19 	bl	80031c0 <touchgfx_init>
}
 800198e:	bf00      	nop
 8001990:	bd80      	pop	{r7, pc}
	...

08001994 <_ZN8touchgfx15TouchControllerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~TouchController()
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
    {
 800199c:	4a04      	ldr	r2, [pc, #16]	; (80019b0 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	601a      	str	r2, [r3, #0]
    }
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4618      	mov	r0, r3
 80019a6:	370c      	adds	r7, #12
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr
 80019b0:	08024018 	.word	0x08024018

080019b4 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
    }
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	f7ff ffe9 	bl	8001994 <_ZN8touchgfx15TouchControllerD1Ev>
 80019c2:	2104      	movs	r1, #4
 80019c4:	6878      	ldr	r0, [r7, #4]
 80019c6:	f020 fee8 	bl	802279a <_ZdlPvj>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4618      	mov	r0, r3
 80019ce:	3708      	adds	r7, #8
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}

080019d4 <_ZN20STM32TouchController4initEv>:
/* USER CODE BEGIN STM32TouchController */

#include <STM32TouchController.hpp>

void STM32TouchController::init()
{
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
}
 80019dc:	bf00      	nop
 80019de:	370c      	adds	r7, #12
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr

080019e8 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b085      	sub	sp, #20
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	60f8      	str	r0, [r7, #12]
 80019f0:	60b9      	str	r1, [r7, #8]
 80019f2:	607a      	str	r2, [r7, #4]
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    return false;
 80019f4:	2300      	movs	r3, #0
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3714      	adds	r7, #20
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
	...

08001a04 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	4a05      	ldr	r2, [pc, #20]	; (8001a24 <_ZN20STM32TouchControllerD1Ev+0x20>)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	601a      	str	r2, [r3, #0]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7ff ffbd 	bl	8001994 <_ZN8touchgfx15TouchControllerD1Ev>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3708      	adds	r7, #8
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	08024000 	.word	0x08024000

08001a28 <_ZN20STM32TouchControllerD0Ev>:
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	6878      	ldr	r0, [r7, #4]
 8001a32:	f7ff ffe7 	bl	8001a04 <_ZN20STM32TouchControllerD1Ev>
 8001a36:	2104      	movs	r1, #4
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	f020 feae 	bl	802279a <_ZdlPvj>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4618      	mov	r0, r3
 8001a42:	3708      	adds	r7, #8
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}

08001a48 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	4603      	mov	r3, r0
 8001a50:	71fb      	strb	r3, [r7, #7]

}
 8001a52:	bf00      	nop
 8001a54:	370c      	adds	r7, #12
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr

08001a5e <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 8001a5e:	b480      	push	{r7}
 8001a60:	b083      	sub	sp, #12
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	4603      	mov	r3, r0
 8001a66:	71fb      	strb	r3, [r7, #7]

}
 8001a68:	bf00      	nop
 8001a6a:	370c      	adds	r7, #12
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr

08001a74 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	71fb      	strb	r3, [r7, #7]

}
 8001a7e:	bf00      	nop
 8001a80:	370c      	adds	r7, #12
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
	...

08001a8c <_ZN8touchgfx3HALD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~HAL()
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
    {
 8001a94:	4a04      	ldr	r2, [pc, #16]	; (8001aa8 <_ZN8touchgfx3HALD1Ev+0x1c>)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	601a      	str	r2, [r3, #0]
    }
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	370c      	adds	r7, #12
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr
 8001aa8:	08025818 	.word	0x08025818

08001aac <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
    }
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	f7ff ffe9 	bl	8001a8c <_ZN8touchgfx3HALD1Ev>
 8001aba:	2178      	movs	r1, #120	; 0x78
 8001abc:	6878      	ldr	r0, [r7, #4]
 8001abe:	f020 fe6c 	bl	802279a <_ZdlPvj>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3708      	adds	r7, #8
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}

08001acc <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     *
     * @note A screen transition must occur before this takes effect!
     *
     * @param orientation The desired display orientation.
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
 8001ad4:	460b      	mov	r3, r1
 8001ad6:	70fb      	strb	r3, [r7, #3]
    {
        requestedOrientation = orientation;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	78fa      	ldrb	r2, [r7, #3]
 8001adc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 8001ae8:	bf00      	nop
 8001aea:	370c      	adds	r7, #12
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr

08001af4 <_ZN8touchgfx3HAL3lcdEv>:
     *
     *        Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8001af8:	4b0b      	ldr	r3, [pc, #44]	; (8001b28 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d008      	beq.n	8001b16 <_ZN8touchgfx3HAL3lcdEv+0x22>
 8001b04:	4b08      	ldr	r3, [pc, #32]	; (8001b28 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d003      	beq.n	8001b16 <_ZN8touchgfx3HAL3lcdEv+0x22>
        {
            return *instance->auxiliaryLCD;
 8001b0e:	4b06      	ldr	r3, [pc, #24]	; (8001b28 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b14:	e002      	b.n	8001b1c <_ZN8touchgfx3HAL3lcdEv+0x28>
        }
        else
        {
            return instance->lcdRef;
 8001b16:	4b04      	ldr	r3, [pc, #16]	; (8001b28 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	689b      	ldr	r3, [r3, #8]
        }
    }
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	2000d1a4 	.word	0x2000d1a4

08001b2c <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *        As default, will return whatever blitcaps are reported by the associated DMA
     *        object.
     *
     * @return a bitmask of the supported blitcaps.
     */
    virtual BlitOperations getBlitCaps()
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
    {
        return dma.getBlitCaps();
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	685a      	ldr	r2, [r3, #4]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4610      	mov	r0, r2
 8001b42:	4798      	blx	r3
 8001b44:	4603      	mov	r3, r0
    }
 8001b46:	4618      	mov	r0, r3
 8001b48:	3708      	adds	r7, #8
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}

08001b4e <_ZN8touchgfx3HAL15backPorchExitedEv>:
     * @brief Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     *        Has to be called from within the LCD IRQ rutine when the Back Porch Exit is
     *        reached.
     */
    virtual void backPorchExited()
 8001b4e:	b580      	push	{r7, lr}
 8001b50:	b082      	sub	sp, #8
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	f012 fc36 	bl	80143c8 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	3390      	adds	r3, #144	; 0x90
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	6878      	ldr	r0, [r7, #4]
 8001b66:	4798      	blx	r3
    }
 8001b68:	bf00      	nop
 8001b6a:	3708      	adds	r7, #8
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}

08001b70 <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	6039      	str	r1, [r7, #0]
    {
        return false;
 8001b7a:	2300      	movs	r3, #0
    }
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	370c      	adds	r7, #12
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr

08001b88 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb>:
     * @param      useDoubleBuffering  (Optional) If true, reserve memory for an extra frame buffer.
     * @param      useAnimationStorage (Optional) If true, reserve memory for animation storage.
     *
     * @deprecated Use the setFramaBufferStartAddress with 'format' parameter instead of 'depth'
     */
    virtual void setFrameBufferStartAddress(void* adr, uint16_t depth = 16, bool useDoubleBuffering = true, bool useAnimationStorage = true)
 8001b88:	b590      	push	{r4, r7, lr}
 8001b8a:	b08b      	sub	sp, #44	; 0x2c
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	60f8      	str	r0, [r7, #12]
 8001b90:	60b9      	str	r1, [r7, #8]
 8001b92:	4611      	mov	r1, r2
 8001b94:	461a      	mov	r2, r3
 8001b96:	460b      	mov	r3, r1
 8001b98:	80fb      	strh	r3, [r7, #6]
 8001b9a:	4613      	mov	r3, r2
 8001b9c:	717b      	strb	r3, [r7, #5]
    {
        uint16_t stride = lcd().framebufferStride();
 8001b9e:	f7ff ffa9 	bl	8001af4 <_ZN8touchgfx3HAL3lcdEv>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	6813      	ldr	r3, [r2, #0]
 8001ba6:	3328      	adds	r3, #40	; 0x28
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4610      	mov	r0, r2
 8001bac:	4798      	blx	r3
 8001bae:	4603      	mov	r3, r0
 8001bb0:	837b      	strh	r3, [r7, #26]
        uint32_t bufferSizeInBytes = stride * FRAME_BUFFER_HEIGHT;
 8001bb2:	8b7b      	ldrh	r3, [r7, #26]
 8001bb4:	4a3d      	ldr	r2, [pc, #244]	; (8001cac <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x124>)
 8001bb6:	8812      	ldrh	r2, [r2, #0]
 8001bb8:	fb02 f303 	mul.w	r3, r2, r3
 8001bbc:	617b      	str	r3, [r7, #20]
        uint8_t* ptr = (uint8_t*)adr;
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	627b      	str	r3, [r7, #36]	; 0x24
        void* double_buf = 0;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	623b      	str	r3, [r7, #32]
        void* anim_store = 0;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	61fb      	str	r3, [r7, #28]
        if (useDoubleBuffering)
 8001bca:	797b      	ldrb	r3, [r7, #5]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d005      	beq.n	8001bdc <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x54>
        {
            ptr += bufferSizeInBytes; // Move past used buffer (framebuffer)
 8001bd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	4413      	add	r3, r2
 8001bd6:	627b      	str	r3, [r7, #36]	; 0x24
            double_buf = (void*)ptr;
 8001bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bda:	623b      	str	r3, [r7, #32]
        }
        if (useAnimationStorage)
 8001bdc:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d005      	beq.n	8001bf0 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x68>
        {
            ptr += bufferSizeInBytes; // Move past used buffer (framebuffer and possibly double buffer)
 8001be4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	4413      	add	r3, r2
 8001bea:	627b      	str	r3, [r7, #36]	; 0x24
            anim_store = (void*)ptr;
 8001bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bee:	61fb      	str	r3, [r7, #28]
        }
        switch (depth)
 8001bf0:	88fb      	ldrh	r3, [r7, #6]
 8001bf2:	3b01      	subs	r3, #1
 8001bf4:	2b1f      	cmp	r3, #31
 8001bf6:	d84d      	bhi.n	8001c94 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x10c>
 8001bf8:	a201      	add	r2, pc, #4	; (adr r2, 8001c00 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x78>)
 8001bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bfe:	bf00      	nop
 8001c00:	08001c81 	.word	0x08001c81
 8001c04:	08001c81 	.word	0x08001c81
 8001c08:	08001c95 	.word	0x08001c95
 8001c0c:	08001c81 	.word	0x08001c81
 8001c10:	08001c95 	.word	0x08001c95
 8001c14:	08001c95 	.word	0x08001c95
 8001c18:	08001c95 	.word	0x08001c95
 8001c1c:	08001c81 	.word	0x08001c81
 8001c20:	08001c95 	.word	0x08001c95
 8001c24:	08001c95 	.word	0x08001c95
 8001c28:	08001c95 	.word	0x08001c95
 8001c2c:	08001c95 	.word	0x08001c95
 8001c30:	08001c95 	.word	0x08001c95
 8001c34:	08001c95 	.word	0x08001c95
 8001c38:	08001c95 	.word	0x08001c95
 8001c3c:	08001c81 	.word	0x08001c81
 8001c40:	08001c95 	.word	0x08001c95
 8001c44:	08001c95 	.word	0x08001c95
 8001c48:	08001c95 	.word	0x08001c95
 8001c4c:	08001c95 	.word	0x08001c95
 8001c50:	08001c95 	.word	0x08001c95
 8001c54:	08001c95 	.word	0x08001c95
 8001c58:	08001c95 	.word	0x08001c95
 8001c5c:	08001c81 	.word	0x08001c81
 8001c60:	08001c95 	.word	0x08001c95
 8001c64:	08001c95 	.word	0x08001c95
 8001c68:	08001c95 	.word	0x08001c95
 8001c6c:	08001c95 	.word	0x08001c95
 8001c70:	08001c95 	.word	0x08001c95
 8001c74:	08001c95 	.word	0x08001c95
 8001c78:	08001c95 	.word	0x08001c95
 8001c7c:	08001c81 	.word	0x08001c81
        case 16:
        case 8:
        case 4:
        case 2:
        case 1:
            setFrameBufferStartAddresses(adr, double_buf, anim_store);
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	3374      	adds	r3, #116	; 0x74
 8001c86:	681c      	ldr	r4, [r3, #0]
 8001c88:	69fb      	ldr	r3, [r7, #28]
 8001c8a:	6a3a      	ldr	r2, [r7, #32]
 8001c8c:	68b9      	ldr	r1, [r7, #8]
 8001c8e:	68f8      	ldr	r0, [r7, #12]
 8001c90:	47a0      	blx	r4
            break;
 8001c92:	e006      	b.n	8001ca2 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x11a>
        default:
            assert(0 && "Unsupported bit depth");
 8001c94:	4b06      	ldr	r3, [pc, #24]	; (8001cb0 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x128>)
 8001c96:	4a07      	ldr	r2, [pc, #28]	; (8001cb4 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x12c>)
 8001c98:	f240 3125 	movw	r1, #805	; 0x325
 8001c9c:	4806      	ldr	r0, [pc, #24]	; (8001cb8 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x130>)
 8001c9e:	f020 fda7 	bl	80227f0 <__assert_func>
            break;
        }
    }
 8001ca2:	bf00      	nop
 8001ca4:	372c      	adds	r7, #44	; 0x2c
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd90      	pop	{r4, r7, pc}
 8001caa:	bf00      	nop
 8001cac:	2000d1a0 	.word	0x2000d1a0
 8001cb0:	0802383c 	.word	0x0802383c
 8001cb4:	0802412c 	.word	0x0802412c
 8001cb8:	0802385c 	.word	0x0802385c

08001cbc <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     *
     * @param [in] frameBuffer      Buffer for frame buffer data, must be non-null.
     * @param [in] doubleBuffer     If non-null, buffer for double buffer data. If null double buffering is disabled.
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage is disabled.
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b084      	sub	sp, #16
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	60f8      	str	r0, [r7, #12]
 8001cc4:	60b9      	str	r1, [r7, #8]
 8001cc6:	607a      	str	r2, [r7, #4]
 8001cc8:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d106      	bne.n	8001cde <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 8001cd0:	4b11      	ldr	r3, [pc, #68]	; (8001d18 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 8001cd2:	4a12      	ldr	r2, [pc, #72]	; (8001d1c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 8001cd4:	f240 3137 	movw	r1, #823	; 0x337
 8001cd8:	4811      	ldr	r0, [pc, #68]	; (8001d20 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x64>)
 8001cda:	f020 fd89 	bl	80227f0 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	68ba      	ldr	r2, [r7, #8]
 8001ce2:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	687a      	ldr	r2, [r7, #4]
 8001ce8:	641a      	str	r2, [r3, #64]	; 0x40
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	683a      	ldr	r2, [r7, #0]
 8001cee:	645a      	str	r2, [r3, #68]	; 0x44
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	bf14      	ite	ne
 8001cf6:	2301      	movne	r3, #1
 8001cf8:	2300      	moveq	r3, #0
 8001cfa:	b2da      	uxtb	r2, r3
 8001cfc:	4b09      	ldr	r3, [pc, #36]	; (8001d24 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x68>)
 8001cfe:	701a      	strb	r2, [r3, #0]
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	bf14      	ite	ne
 8001d06:	2301      	movne	r3, #1
 8001d08:	2300      	moveq	r3, #0
 8001d0a:	b2da      	uxtb	r2, r3
 8001d0c:	4b06      	ldr	r3, [pc, #24]	; (8001d28 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x6c>)
 8001d0e:	701a      	strb	r2, [r3, #0]
    }
 8001d10:	bf00      	nop
 8001d12:	3710      	adds	r7, #16
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	080238a4 	.word	0x080238a4
 8001d1c:	080240dc 	.word	0x080240dc
 8001d20:	0802385c 	.word	0x0802385c
 8001d24:	2000d1a2 	.word	0x2000d1a2
 8001d28:	2000d1a3 	.word	0x2000d1a3

08001d2c <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param ms Number of milliseconds to wait.
     *
     * @see void registerTaskDelayFunction(void (*delayF)(uint16_t))
     */
    virtual void taskDelay(uint16_t ms)
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	460b      	mov	r3, r1
 8001d36:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d004      	beq.n	8001d4a <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d44:	887a      	ldrh	r2, [r7, #2]
 8001d46:	4610      	mov	r0, r2
 8001d48:	4798      	blx	r3
        }
    }
 8001d4a:	bf00      	nop
 8001d4c:	3708      	adds	r7, #8
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}

08001d52 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *        not used, then the getTFTCurrentLine function is never called and can be
     *        disregarded.
     *
     * @return In this default implementation, 0xFFFF is returned to signify "not implemented".
     */
    virtual uint16_t getTFTCurrentLine()
 8001d52:	b480      	push	{r7}
 8001d54:	b083      	sub	sp, #12
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	6078      	str	r0, [r7, #4]
    {
        return 0xFFFFu;
 8001d5a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    }
 8001d5e:	4618      	mov	r0, r3
 8001d60:	370c      	adds	r7, #12
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr

08001d6a <_ZN8touchgfx3HAL10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA implementation.
     *        As default, will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 8001d6a:	b580      	push	{r7, lr}
 8001d6c:	b082      	sub	sp, #8
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	685a      	ldr	r2, [r3, #4]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	3318      	adds	r3, #24
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4610      	mov	r0, r2
 8001d82:	4798      	blx	r3
 8001d84:	4603      	mov	r3, r0
    }
 8001d86:	4618      	mov	r0, r3
 8001d88:	3708      	adds	r7, #8
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
	...

08001d90 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
     *
     * @brief Perform the actual display orientation change.
     *
     *        Perform the actual display orientation change.
     */
    virtual void performDisplayOrientationChange()
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d017      	beq.n	8001dd8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x48>
        {
            if (DISPLAY_ROTATION == rotate0)
 8001da8:	4b1a      	ldr	r3, [pc, #104]	; (8001e14 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d12a      	bne.n	8001e06 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            {
                FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 8001db0:	4b19      	ldr	r3, [pc, #100]	; (8001e18 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8001db2:	881a      	ldrh	r2, [r3, #0]
 8001db4:	4b19      	ldr	r3, [pc, #100]	; (8001e1c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8001db6:	801a      	strh	r2, [r3, #0]
                FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 8001db8:	4b19      	ldr	r3, [pc, #100]	; (8001e20 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8001dba:	881a      	ldrh	r2, [r3, #0]
 8001dbc:	4b19      	ldr	r3, [pc, #100]	; (8001e24 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8001dbe:	801a      	strh	r2, [r3, #0]
                DISPLAY_HEIGHT = FRAME_BUFFER_WIDTH;
 8001dc0:	4b16      	ldr	r3, [pc, #88]	; (8001e1c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8001dc2:	881a      	ldrh	r2, [r3, #0]
 8001dc4:	4b16      	ldr	r3, [pc, #88]	; (8001e20 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8001dc6:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = FRAME_BUFFER_HEIGHT;
 8001dc8:	4b16      	ldr	r3, [pc, #88]	; (8001e24 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8001dca:	881a      	ldrh	r2, [r3, #0]
 8001dcc:	4b12      	ldr	r3, [pc, #72]	; (8001e18 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8001dce:	801a      	strh	r2, [r3, #0]
                DISPLAY_ROTATION = rotate90;
 8001dd0:	4b10      	ldr	r3, [pc, #64]	; (8001e14 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	701a      	strb	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
            DISPLAY_ROTATION = rotate0;
        }
    }
 8001dd6:	e016      	b.n	8001e06 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
        else if (DISPLAY_ROTATION != rotate0)
 8001dd8:	4b0e      	ldr	r3, [pc, #56]	; (8001e14 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d012      	beq.n	8001e06 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            FRAME_BUFFER_WIDTH = DISPLAY_HEIGHT;
 8001de0:	4b0f      	ldr	r3, [pc, #60]	; (8001e20 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8001de2:	881a      	ldrh	r2, [r3, #0]
 8001de4:	4b0d      	ldr	r3, [pc, #52]	; (8001e1c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8001de6:	801a      	strh	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
 8001de8:	4b0b      	ldr	r3, [pc, #44]	; (8001e18 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8001dea:	881a      	ldrh	r2, [r3, #0]
 8001dec:	4b0d      	ldr	r3, [pc, #52]	; (8001e24 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8001dee:	801a      	strh	r2, [r3, #0]
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
 8001df0:	4b0c      	ldr	r3, [pc, #48]	; (8001e24 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8001df2:	881a      	ldrh	r2, [r3, #0]
 8001df4:	4b0a      	ldr	r3, [pc, #40]	; (8001e20 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8001df6:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
 8001df8:	4b08      	ldr	r3, [pc, #32]	; (8001e1c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8001dfa:	881a      	ldrh	r2, [r3, #0]
 8001dfc:	4b06      	ldr	r3, [pc, #24]	; (8001e18 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8001dfe:	801a      	strh	r2, [r3, #0]
            DISPLAY_ROTATION = rotate0;
 8001e00:	4b04      	ldr	r3, [pc, #16]	; (8001e14 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	701a      	strb	r2, [r3, #0]
    }
 8001e06:	bf00      	nop
 8001e08:	370c      	adds	r7, #12
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop
 8001e14:	2000d19c 	.word	0x2000d19c
 8001e18:	2000d198 	.word	0x2000d198
 8001e1c:	2000d19e 	.word	0x2000d19e
 8001e20:	2000d19a 	.word	0x2000d19a
 8001e24:	2000d1a0 	.word	0x2000d1a0

08001e28 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	4618      	mov	r0, r3
 8001e34:	f011 fd4b 	bl	80138ce <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 8001e38:	bf00      	nop
 8001e3a:	3708      	adds	r7, #8
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}

08001e40 <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	4a05      	ldr	r2, [pc, #20]	; (8001e60 <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	601a      	str	r2, [r3, #0]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7ff fe1b 	bl	8001a8c <_ZN8touchgfx3HALD1Ev>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4618      	mov	r0, r3
 8001e5a:	3708      	adds	r7, #8
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	08024424 	.word	0x08024424

08001e64 <_ZN20TouchGFXGeneratedHALD0Ev>:
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	f7ff ffe7 	bl	8001e40 <_ZN20TouchGFXGeneratedHALD1Ev>
 8001e72:	2178      	movs	r1, #120	; 0x78
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f020 fc90 	bl	802279a <_ZdlPvj>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3708      	adds	r7, #8
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}

08001e84 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f7ff ffca 	bl	8001e28 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 8001e94:	bf00      	nop
 8001e96:	3708      	adds	r7, #8
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}

08001e9c <_ZN11TouchGFXHAL10initializeEv>:
#include "stm32f4xx.h"

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f001 fca6 	bl	80037f8 <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 8001eac:	bf00      	nop
 8001eae:	3708      	adds	r7, #8
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f001 fcec 	bl	800389c <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 8001ec4:	4603      	mov	r3, r0
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3708      	adds	r7, #8
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}

08001ece <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 8001ece:	b580      	push	{r7, lr}
 8001ed0:	b082      	sub	sp, #8
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	6078      	str	r0, [r7, #4]
 8001ed6:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6839      	ldr	r1, [r7, #0]
 8001edc:	4618      	mov	r0, r3
 8001ede:	f001 fce8 	bl	80038b2 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 8001ee2:	bf00      	nop
 8001ee4:	3708      	adds	r7, #8
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}

08001eea <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8001eea:	b580      	push	{r7, lr}
 8001eec:	b082      	sub	sp, #8
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	6078      	str	r0, [r7, #4]
 8001ef2:	6039      	str	r1, [r7, #0]
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6839      	ldr	r1, [r7, #0]
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f001 fce5 	bl	80038c8 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
}
 8001efe:	bf00      	nop
 8001f00:	3708      	adds	r7, #8
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}

08001f06 <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 8001f06:	b580      	push	{r7, lr}
 8001f08:	b082      	sub	sp, #8
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4618      	mov	r0, r3
 8001f12:	f001 fc97 	bl	8003844 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 8001f16:	bf00      	nop
 8001f18:	3708      	adds	r7, #8
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}

08001f1e <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 8001f1e:	b580      	push	{r7, lr}
 8001f20:	b082      	sub	sp, #8
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f001 fc97 	bl	800385c <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 8001f2e:	bf00      	nop
 8001f30:	3708      	adds	r7, #8
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}

08001f36 <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 8001f36:	b580      	push	{r7, lr}
 8001f38:	b082      	sub	sp, #8
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4618      	mov	r0, r3
 8001f42:	f001 fc96 	bl	8003872 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 8001f46:	bf00      	nop
 8001f48:	3708      	adds	r7, #8
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}

08001f4e <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 8001f4e:	b580      	push	{r7, lr}
 8001f50:	b082      	sub	sp, #8
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f001 fc95 	bl	8003888 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 8001f5e:	bf00      	nop
 8001f60:	3708      	adds	r7, #8
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
	...

08001f68 <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	4a05      	ldr	r2, [pc, #20]	; (8001f88 <_ZN11TouchGFXHALD1Ev+0x20>)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	601a      	str	r2, [r3, #0]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f7ff ff61 	bl	8001e40 <_ZN20TouchGFXGeneratedHALD1Ev>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4618      	mov	r0, r3
 8001f82:	3708      	adds	r7, #8
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	08024030 	.word	0x08024030

08001f8c <_ZN11TouchGFXHALD0Ev>:
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	f7ff ffe7 	bl	8001f68 <_ZN11TouchGFXHALD1Ev>
 8001f9a:	2178      	movs	r1, #120	; 0x78
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	f020 fbfc 	bl	802279a <_ZdlPvj>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3708      	adds	r7, #8
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}

08001fac <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	af00      	add	r7, sp, #0
    vSemaphoreCreateBinary(frame_buffer_sem);
 8001fb0:	2203      	movs	r2, #3
 8001fb2:	2100      	movs	r1, #0
 8001fb4:	2001      	movs	r0, #1
 8001fb6:	f00e fcc3 	bl	8010940 <xQueueGenericCreate>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	4b0b      	ldr	r3, [pc, #44]	; (8001fec <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8001fbe:	601a      	str	r2, [r3, #0]
 8001fc0:	4b0a      	ldr	r3, [pc, #40]	; (8001fec <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d006      	beq.n	8001fd6 <_ZN8touchgfx10OSWrappers10initializeEv+0x2a>
 8001fc8:	4b08      	ldr	r3, [pc, #32]	; (8001fec <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8001fca:	6818      	ldr	r0, [r3, #0]
 8001fcc:	2300      	movs	r3, #0
 8001fce:	2200      	movs	r2, #0
 8001fd0:	2100      	movs	r1, #0
 8001fd2:	f00e fd13 	bl	80109fc <xQueueGenericSend>
    // Create a queue of length 1
    vsync_q = xQueueGenericCreate(1, 1, 0);
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	2101      	movs	r1, #1
 8001fda:	2001      	movs	r0, #1
 8001fdc:	f00e fcb0 	bl	8010940 <xQueueGenericCreate>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	4b03      	ldr	r3, [pc, #12]	; (8001ff0 <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 8001fe4:	601a      	str	r2, [r3, #0]
}
 8001fe6:	bf00      	nop
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	20000364 	.word	0x20000364
 8001ff0:	20000368 	.word	0x20000368

08001ff4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	af00      	add	r7, sp, #0
    xSemaphoreTake(frame_buffer_sem, portMAX_DELAY);
 8001ff8:	4b04      	ldr	r3, [pc, #16]	; (800200c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f04f 31ff 	mov.w	r1, #4294967295
 8002000:	4618      	mov	r0, r3
 8002002:	f00e ff5b 	bl	8010ebc <xQueueSemaphoreTake>
}
 8002006:	bf00      	nop
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	20000364 	.word	0x20000364

08002010 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 8002010:	b580      	push	{r7, lr}
 8002012:	af00      	add	r7, sp, #0
    xSemaphoreGive(frame_buffer_sem);
 8002014:	4b04      	ldr	r3, [pc, #16]	; (8002028 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x18>)
 8002016:	6818      	ldr	r0, [r3, #0]
 8002018:	2300      	movs	r3, #0
 800201a:	2200      	movs	r2, #0
 800201c:	2100      	movs	r1, #0
 800201e:	f00e fced 	bl	80109fc <xQueueGenericSend>
}
 8002022:	bf00      	nop
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	20000364 	.word	0x20000364

0800202c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 800202c:	b580      	push	{r7, lr}
 800202e:	af00      	add	r7, sp, #0
    xSemaphoreTake(frame_buffer_sem, 0);
 8002030:	4b03      	ldr	r3, [pc, #12]	; (8002040 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	2100      	movs	r1, #0
 8002036:	4618      	mov	r0, r3
 8002038:	f00e ff40 	bl	8010ebc <xQueueSemaphoreTake>
}
 800203c:	bf00      	nop
 800203e:	bd80      	pop	{r7, pc}
 8002040:	20000364 	.word	0x20000364

08002044 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
    // Since this is called from an interrupt, FreeRTOS requires special handling to trigger a
    // re-scheduling. May be applicable for other OSes as well.
    portBASE_TYPE px = pdFALSE;
 800204a:	2300      	movs	r3, #0
 800204c:	607b      	str	r3, [r7, #4]
    xSemaphoreGiveFromISR(frame_buffer_sem, &px);
 800204e:	4b0b      	ldr	r3, [pc, #44]	; (800207c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x38>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	1d3a      	adds	r2, r7, #4
 8002054:	4611      	mov	r1, r2
 8002056:	4618      	mov	r0, r3
 8002058:	f00e fdca 	bl	8010bf0 <xQueueGiveFromISR>
    portEND_SWITCHING_ISR(px);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d007      	beq.n	8002072 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x2e>
 8002062:	4b07      	ldr	r3, [pc, #28]	; (8002080 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x3c>)
 8002064:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002068:	601a      	str	r2, [r3, #0]
 800206a:	f3bf 8f4f 	dsb	sy
 800206e:	f3bf 8f6f 	isb	sy
}
 8002072:	bf00      	nop
 8002074:	3708      	adds	r7, #8
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	20000364 	.word	0x20000364
 8002080:	e000ed04 	.word	0xe000ed04

08002084 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8002084:	b580      	push	{r7, lr}
 8002086:	af00      	add	r7, sp, #0
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    xQueueReceive(vsync_q, &dummy, 0);
 8002088:	4b08      	ldr	r3, [pc, #32]	; (80020ac <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x28>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	2200      	movs	r2, #0
 800208e:	4908      	ldr	r1, [pc, #32]	; (80020b0 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8002090:	4618      	mov	r0, r3
 8002092:	f00e fe37 	bl	8010d04 <xQueueReceive>

    // Then, wait for next VSYNC to occur.
    xQueueReceive(vsync_q, &dummy, portMAX_DELAY);
 8002096:	4b05      	ldr	r3, [pc, #20]	; (80020ac <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x28>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f04f 32ff 	mov.w	r2, #4294967295
 800209e:	4904      	ldr	r1, [pc, #16]	; (80020b0 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 80020a0:	4618      	mov	r0, r3
 80020a2:	f00e fe2f 	bl	8010d04 <xQueueReceive>
}
 80020a6:	bf00      	nop
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	20000368 	.word	0x20000368
 80020b0:	20000004 	.word	0x20000004

080020b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	4603      	mov	r3, r0
 80020bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	db0d      	blt.n	80020e2 <__NVIC_EnableIRQ+0x2e>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	f003 021f 	and.w	r2, r3, #31
 80020d0:	4907      	ldr	r1, [pc, #28]	; (80020f0 <__NVIC_EnableIRQ+0x3c>)
 80020d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d6:	095b      	lsrs	r3, r3, #5
 80020d8:	2001      	movs	r0, #1
 80020da:	fa00 f202 	lsl.w	r2, r0, r2
 80020de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020e2:	bf00      	nop
 80020e4:	370c      	adds	r7, #12
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr
 80020ee:	bf00      	nop
 80020f0:	e000e100 	.word	0xe000e100

080020f4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	4603      	mov	r3, r0
 80020fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002102:	2b00      	cmp	r3, #0
 8002104:	db12      	blt.n	800212c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800210a:	b2db      	uxtb	r3, r3
 800210c:	f003 021f 	and.w	r2, r3, #31
 8002110:	4909      	ldr	r1, [pc, #36]	; (8002138 <__NVIC_DisableIRQ+0x44>)
 8002112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002116:	095b      	lsrs	r3, r3, #5
 8002118:	2001      	movs	r0, #1
 800211a:	fa00 f202 	lsl.w	r2, r0, r2
 800211e:	3320      	adds	r3, #32
 8002120:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002124:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002128:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 800212c:	bf00      	nop
 800212e:	370c      	adds	r7, #12
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr
 8002138:	e000e100 	.word	0xe000e100

0800213c <_ZN8touchgfx9colortypeC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor. Creates a black (0) color.
     */
    colortype() : color(0) {}
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2200      	movs	r2, #0
 8002148:	601a      	str	r2, [r3, #0]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4618      	mov	r0, r3
 800214e:	370c      	adds	r7, #12
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr

08002158 <_ZNK8touchgfx9colortype10getColor32Ev>:
     *
     * @see Color::getRedColor()
     * @see Color::getGreenColor()
     * @see Color::getBlueColor()
     */
    inline uint32_t getColor32() const
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
    {
        return color;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
    }
 8002164:	4618      	mov	r0, r3
 8002166:	370c      	adds	r7, #12
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr

08002170 <_ZNK8touchgfx9colortypecvtEv>:
     *        Cast that converts the given colortype to an uint16_t. Provided only for backward
     *        compatibility. Not recommended to use.
     *
     * @return The result of the operation.
     */
    operator uint16_t() const
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
    {
        return (uint16_t)color;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	b29b      	uxth	r3, r3
    }
 800217e:	4618      	mov	r0, r3
 8002180:	370c      	adds	r7, #12
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr
	...

0800218c <_ZN8touchgfx9DMA_QueueD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~DMA_Queue()
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
    {
 8002194:	4a04      	ldr	r2, [pc, #16]	; (80021a8 <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	601a      	str	r2, [r3, #0]
    }
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4618      	mov	r0, r3
 800219e:	370c      	adds	r7, #12
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr
 80021a8:	080241d8 	.word	0x080241d8

080021ac <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
    }
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f7ff ffe9 	bl	800218c <_ZN8touchgfx9DMA_QueueD1Ev>
 80021ba:	2104      	movs	r1, #4
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	f020 faec 	bl	802279a <_ZdlPvj>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4618      	mov	r0, r3
 80021c6:	3708      	adds	r7, #8
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}

080021cc <_ZN8touchgfx13DMA_Interface5flushEv>:
     *
     * @brief This function blocks until all DMA transfers in the queue have been completed.
     *
     *        This function blocks until all DMA transfers in the queue have been completed.
     */
    virtual void flush()
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	3344      	adds	r3, #68	; 0x44
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	4798      	blx	r3
    }
 80021e0:	bf00      	nop
 80021e2:	3708      	adds	r7, #8
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}

080021e8 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual DMAType getDMAType(void)
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
    {
        return DMA_TYPE_GENERIC;
 80021f0:	2300      	movs	r3, #0
    }
 80021f2:	4618      	mov	r0, r3
 80021f4:	370c      	adds	r7, #12
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
	...

08002200 <_ZN8touchgfx13DMA_InterfaceD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~DMA_Interface()
 8002200:	b480      	push	{r7}
 8002202:	b083      	sub	sp, #12
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
    {
 8002208:	4a04      	ldr	r2, [pc, #16]	; (800221c <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	601a      	str	r2, [r3, #0]
    }
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4618      	mov	r0, r3
 8002212:	370c      	adds	r7, #12
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr
 800221c:	08025c5c 	.word	0x08025c5c

08002220 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
    }
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	f7ff ffe9 	bl	8002200 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 800222e:	210c      	movs	r1, #12
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	f020 fab2 	bl	802279a <_ZdlPvj>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4618      	mov	r0, r3
 800223a:	3708      	adds	r7, #8
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}

08002240 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
     *
     *        Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 800224a:	4a09      	ldr	r2, [pc, #36]	; (8002270 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	601a      	str	r2, [r3, #0]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	683a      	ldr	r2, [r7, #0]
 8002254:	605a      	str	r2, [r3, #4]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2200      	movs	r2, #0
 800225a:	721a      	strb	r2, [r3, #8]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2200      	movs	r2, #0
 8002260:	725a      	strb	r2, [r3, #9]
    {
    }
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4618      	mov	r0, r3
 8002266:	370c      	adds	r7, #12
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr
 8002270:	08025c5c 	.word	0x08025c5c

08002274 <_ZN8touchgfx3HAL11getInstanceEv>:
    static HAL* getInstance()
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
        return instance;
 8002278:	4b03      	ldr	r3, [pc, #12]	; (8002288 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 800227a:	681b      	ldr	r3, [r3, #0]
    }
 800227c:	4618      	mov	r0, r3
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr
 8002286:	bf00      	nop
 8002288:	2000d1a4 	.word	0x2000d1a4

0800228c <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	685a      	ldr	r2, [r3, #4]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	3314      	adds	r3, #20
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4610      	mov	r0, r2
 80022a4:	4798      	blx	r3
    }
 80022a6:	bf00      	nop
 80022a8:	3708      	adds	r7, #8
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}

080022ae <_ZN10STM32F4DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 80022ae:	b580      	push	{r7, lr}
 80022b0:	b082      	sub	sp, #8
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 80022b6:	687a      	ldr	r2, [r7, #4]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	3328      	adds	r3, #40	; 0x28
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4610      	mov	r0, r2
 80022c2:	4798      	blx	r3
    }
 80022c4:	bf00      	nop
 80022c6:	3708      	adds	r7, #8
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}

080022cc <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>:
/* USER CODE END user includes */

extern DMA2D_HandleTypeDef hdma2d;

static HAL_StatusTypeDef HAL_DMA2D_SetMode(DMA2D_HandleTypeDef *hdma2d, uint32_t mode, uint32_t color, uint32_t offset)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b085      	sub	sp, #20
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	60f8      	str	r0, [r7, #12]
 80022d4:	60b9      	str	r1, [r7, #8]
 80022d6:	607a      	str	r2, [r7, #4]
 80022d8:	603b      	str	r3, [r7, #0]
    assert_param(IS_DMA2D_ALL_INSTANCE(hdma2d->Instance));

    MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, mode);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80022e4:	68ba      	ldr	r2, [r7, #8]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	430a      	orrs	r2, r1
 80022ec:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, color);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022f4:	f023 0107 	bic.w	r1, r3, #7
 80022f8:	687a      	ldr	r2, [r7, #4]
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	430a      	orrs	r2, r1
 8002300:	635a      	str	r2, [r3, #52]	; 0x34
    MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, offset);
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002308:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800230c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002310:	6839      	ldr	r1, [r7, #0]
 8002312:	68fa      	ldr	r2, [r7, #12]
 8002314:	6812      	ldr	r2, [r2, #0]
 8002316:	430b      	orrs	r3, r1
 8002318:	6413      	str	r3, [r2, #64]	; 0x40

    return HAL_OK;
 800231a:	2300      	movs	r3, #0
}
 800231c:	4618      	mov	r0, r3
 800231e:	3714      	adds	r7, #20
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr

08002328 <DMA2D_XferCpltCallback>:

extern "C" {

static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
    touchgfx::HAL::getInstance()->signalDMAInterrupt();
 8002330:	f7ff ffa0 	bl	8002274 <_ZN8touchgfx3HAL11getInstanceEv>
 8002334:	4603      	mov	r3, r0
 8002336:	4618      	mov	r0, r3
 8002338:	f7ff ffa8 	bl	800228c <_ZN8touchgfx3HAL18signalDMAInterruptEv>
}
 800233c:	bf00      	nop
 800233e:	3708      	adds	r7, #8
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}

08002344 <DMA2D_XferErrorCallback>:

static void DMA2D_XferErrorCallback(DMA2D_HandleTypeDef* handle)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b082      	sub	sp, #8
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
    assert(0);
 800234c:	4b02      	ldr	r3, [pc, #8]	; (8002358 <DMA2D_XferErrorCallback+0x14>)
 800234e:	4a03      	ldr	r2, [pc, #12]	; (800235c <DMA2D_XferErrorCallback+0x18>)
 8002350:	2136      	movs	r1, #54	; 0x36
 8002352:	4803      	ldr	r0, [pc, #12]	; (8002360 <DMA2D_XferErrorCallback+0x1c>)
 8002354:	f020 fa4c 	bl	80227f0 <__assert_func>
 8002358:	080238dc 	.word	0x080238dc
 800235c:	080241f4 	.word	0x080241f4
 8002360:	080238e0 	.word	0x080238e0

08002364 <_ZN8touchgfx6BlitOpC1Ev>:
 *        (frame buffer) using DMA.
 *
 *        BlitOp instances carry the required information for performing operations on the LCD
 *        (frame buffer) using DMA.
 */
struct BlitOp
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	3318      	adds	r3, #24
 8002370:	4618      	mov	r0, r3
 8002372:	f7ff fee3 	bl	800213c <_ZN8touchgfx9colortypeC1Ev>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4618      	mov	r0, r3
 800237a:	3708      	adds	r7, #8
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}

08002380 <_ZN10STM32F4DMAC1Ev>:
}

}

STM32F4DMA::STM32F4DMA()
 8002380:	b5b0      	push	{r4, r5, r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8002388:	687a      	ldr	r2, [r7, #4]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	330c      	adds	r3, #12
 800238e:	4619      	mov	r1, r3
 8002390:	4610      	mov	r0, r2
 8002392:	f7ff ff55 	bl	8002240 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 8002396:	4a0e      	ldr	r2, [pc, #56]	; (80023d0 <_ZN10STM32F4DMAC1Ev+0x50>)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	601a      	str	r2, [r3, #0]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	f103 000c 	add.w	r0, r3, #12
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	3320      	adds	r3, #32
 80023a6:	2260      	movs	r2, #96	; 0x60
 80023a8:	4619      	mov	r1, r3
 80023aa:	f012 f933 	bl	8014614 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	3320      	adds	r3, #32
 80023b2:	245f      	movs	r4, #95	; 0x5f
 80023b4:	461d      	mov	r5, r3
 80023b6:	2c00      	cmp	r4, #0
 80023b8:	db05      	blt.n	80023c6 <_ZN10STM32F4DMAC1Ev+0x46>
 80023ba:	4628      	mov	r0, r5
 80023bc:	f7ff ffd2 	bl	8002364 <_ZN8touchgfx6BlitOpC1Ev>
 80023c0:	3520      	adds	r5, #32
 80023c2:	3c01      	subs	r4, #1
 80023c4:	e7f7      	b.n	80023b6 <_ZN10STM32F4DMAC1Ev+0x36>
{}
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4618      	mov	r0, r3
 80023ca:	3708      	adds	r7, #8
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bdb0      	pop	{r4, r5, r7, pc}
 80023d0:	08024188 	.word	0x08024188

080023d4 <_ZN10STM32F4DMAD1Ev>:

STM32F4DMA::~STM32F4DMA()
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b082      	sub	sp, #8
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	4a0b      	ldr	r2, [pc, #44]	; (800240c <_ZN10STM32F4DMAD1Ev+0x38>)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	601a      	str	r2, [r3, #0]
{
    HAL_DMA2D_DeInit(&hdma2d);
 80023e2:	480b      	ldr	r0, [pc, #44]	; (8002410 <_ZN10STM32F4DMAD1Ev+0x3c>)
 80023e4:	f008 fae4 	bl	800a9b0 <HAL_DMA2D_DeInit>
    NVIC_DisableIRQ(DMA2D_IRQn);
 80023e8:	205a      	movs	r0, #90	; 0x5a
 80023ea:	f7ff fe83 	bl	80020f4 <__NVIC_DisableIRQ>
STM32F4DMA::~STM32F4DMA()
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	330c      	adds	r3, #12
 80023f2:	4618      	mov	r0, r3
 80023f4:	f000 faa0 	bl	8002938 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	4618      	mov	r0, r3
 80023fc:	f7ff ff00 	bl	8002200 <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	4618      	mov	r0, r3
 8002404:	3708      	adds	r7, #8
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	08024188 	.word	0x08024188
 8002410:	2000d60c 	.word	0x2000d60c

08002414 <_ZN10STM32F4DMAD0Ev>:
STM32F4DMA::~STM32F4DMA()
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
}
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f7ff ffd9 	bl	80023d4 <_ZN10STM32F4DMAD1Ev>
 8002422:	f44f 6142 	mov.w	r1, #3104	; 0xc20
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	f020 f9b7 	bl	802279a <_ZdlPvj>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	4618      	mov	r0, r3
 8002430:	3708      	adds	r7, #8
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
	...

08002438 <_ZN10STM32F4DMA10initializeEv>:

void STM32F4DMA::initialize()
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
    hdma2d.Instance = DMA2D;
 8002440:	4b09      	ldr	r3, [pc, #36]	; (8002468 <_ZN10STM32F4DMA10initializeEv+0x30>)
 8002442:	4a0a      	ldr	r2, [pc, #40]	; (800246c <_ZN10STM32F4DMA10initializeEv+0x34>)
 8002444:	601a      	str	r2, [r3, #0]
    HAL_DMA2D_Init(&hdma2d);
 8002446:	4808      	ldr	r0, [pc, #32]	; (8002468 <_ZN10STM32F4DMA10initializeEv+0x30>)
 8002448:	f008 fa68 	bl	800a91c <HAL_DMA2D_Init>

    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 800244c:	4b06      	ldr	r3, [pc, #24]	; (8002468 <_ZN10STM32F4DMA10initializeEv+0x30>)
 800244e:	4a08      	ldr	r2, [pc, #32]	; (8002470 <_ZN10STM32F4DMA10initializeEv+0x38>)
 8002450:	611a      	str	r2, [r3, #16]
    hdma2d.XferErrorCallback = DMA2D_XferErrorCallback;
 8002452:	4b05      	ldr	r3, [pc, #20]	; (8002468 <_ZN10STM32F4DMA10initializeEv+0x30>)
 8002454:	4a07      	ldr	r2, [pc, #28]	; (8002474 <_ZN10STM32F4DMA10initializeEv+0x3c>)
 8002456:	615a      	str	r2, [r3, #20]

    NVIC_EnableIRQ(DMA2D_IRQn);
 8002458:	205a      	movs	r0, #90	; 0x5a
 800245a:	f7ff fe2b 	bl	80020b4 <__NVIC_EnableIRQ>
}
 800245e:	bf00      	nop
 8002460:	3708      	adds	r7, #8
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	2000d60c 	.word	0x2000d60c
 800246c:	4002b000 	.word	0x4002b000
 8002470:	08002329 	.word	0x08002329
 8002474:	08002345 	.word	0x08002345

08002478 <_ZN10STM32F4DMA11getBlitCapsEv>:

BlitOperations STM32F4DMA::getBlitCaps()
{
 8002478:	b480      	push	{r7}
 800247a:	b083      	sub	sp, #12
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
                                        | BLIT_OP_COPY
                                        | BLIT_OP_COPY_WITH_ALPHA
                                        | BLIT_OP_COPY_ARGB8888
                                        | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                        | BLIT_OP_COPY_A4
                                        | BLIT_OP_COPY_A8);
 8002480:	f240 13ef 	movw	r3, #495	; 0x1ef
}
 8002484:	4618      	mov	r0, r3
 8002486:	370c      	adds	r7, #12
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr

08002490 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE>:

void STM32F4DMA::setupDataCopy(const BlitOp& blitOp)
{
 8002490:	b590      	push	{r4, r7, lr}
 8002492:	b08d      	sub	sp, #52	; 0x34
 8002494:	af02      	add	r7, sp, #8
 8002496:	6078      	str	r0, [r7, #4]
 8002498:	6039      	str	r1, [r7, #0]
    uint32_t dma2dTransferMode = DMA2D_M2M_BLEND;
 800249a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800249e:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t dma2dColorMode = 0;
 80024a0:	2300      	movs	r3, #0
 80024a2:	623b      	str	r3, [r7, #32]

    bool blendingImage = (blitOp.operation == BLIT_OP_COPY_ARGB8888
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	681b      	ldr	r3, [r3, #0]
                          || blitOp.operation == BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                          || blitOp.operation == BLIT_OP_COPY_WITH_ALPHA);
 80024a8:	2b20      	cmp	r3, #32
 80024aa:	d007      	beq.n	80024bc <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
                          || blitOp.operation == BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	2b40      	cmp	r3, #64	; 0x40
 80024b2:	d003      	beq.n	80024bc <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
                          || blitOp.operation == BLIT_OP_COPY_WITH_ALPHA);
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	2b04      	cmp	r3, #4
 80024ba:	d101      	bne.n	80024c0 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x30>
 80024bc:	2301      	movs	r3, #1
 80024be:	e000      	b.n	80024c2 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x32>
 80024c0:	2300      	movs	r3, #0
    bool blendingImage = (blitOp.operation == BLIT_OP_COPY_ARGB8888
 80024c2:	77fb      	strb	r3, [r7, #31]

    bool blendingText = (blitOp.operation == BLIT_OP_COPY_A4
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	681b      	ldr	r3, [r3, #0]
                         || blitOp.operation == BLIT_OP_COPY_A8);
 80024c8:	2b80      	cmp	r3, #128	; 0x80
 80024ca:	d004      	beq.n	80024d6 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x46>
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024d4:	d101      	bne.n	80024da <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4a>
 80024d6:	2301      	movs	r3, #1
 80024d8:	e000      	b.n	80024dc <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4c>
 80024da:	2300      	movs	r3, #0
    bool blendingText = (blitOp.operation == BLIT_OP_COPY_A4
 80024dc:	77bb      	strb	r3, [r7, #30]

    uint8_t bitDepth = HAL::lcd().bitDepth();
 80024de:	f7ff fb09 	bl	8001af4 <_ZN8touchgfx3HAL3lcdEv>
 80024e2:	4602      	mov	r2, r0
 80024e4:	6813      	ldr	r3, [r2, #0]
 80024e6:	3320      	adds	r3, #32
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4610      	mov	r0, r2
 80024ec:	4798      	blx	r3
 80024ee:	4603      	mov	r3, r0
 80024f0:	777b      	strb	r3, [r7, #29]

    switch (blitOp.operation)
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	2b40      	cmp	r3, #64	; 0x40
 80024f8:	d01d      	beq.n	8002536 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa6>
 80024fa:	2b40      	cmp	r3, #64	; 0x40
 80024fc:	d804      	bhi.n	8002508 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x78>
 80024fe:	2b04      	cmp	r3, #4
 8002500:	d00e      	beq.n	8002520 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x90>
 8002502:	2b20      	cmp	r3, #32
 8002504:	d017      	beq.n	8002536 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa6>
 8002506:	e019      	b.n	800253c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xac>
 8002508:	2b80      	cmp	r3, #128	; 0x80
 800250a:	d003      	beq.n	8002514 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x84>
 800250c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002510:	d003      	beq.n	800251a <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x8a>
 8002512:	e013      	b.n	800253c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xac>
    {
    case BLIT_OP_COPY_A4:
        dma2dColorMode = CM_A4;
 8002514:	230a      	movs	r3, #10
 8002516:	623b      	str	r3, [r7, #32]
        break;
 8002518:	e01a      	b.n	8002550 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_A8:
        dma2dColorMode = CM_A8;
 800251a:	2309      	movs	r3, #9
 800251c:	623b      	str	r3, [r7, #32]
        break;
 800251e:	e017      	b.n	8002550 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_WITH_ALPHA:
        dma2dTransferMode = DMA2D_M2M_BLEND;
 8002520:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002524:	627b      	str	r3, [r7, #36]	; 0x24
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8002526:	7f7b      	ldrb	r3, [r7, #29]
 8002528:	2b10      	cmp	r3, #16
 800252a:	d101      	bne.n	8002530 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa0>
 800252c:	2302      	movs	r3, #2
 800252e:	e000      	b.n	8002532 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa2>
 8002530:	2301      	movs	r3, #1
 8002532:	623b      	str	r3, [r7, #32]
        break;
 8002534:	e00c      	b.n	8002550 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        dma2dColorMode = CM_ARGB8888;
 8002536:	2300      	movs	r3, #0
 8002538:	623b      	str	r3, [r7, #32]
        break;
 800253a:	e009      	b.n	8002550 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    default:
        dma2dTransferMode = DMA2D_M2M;
 800253c:	2300      	movs	r3, #0
 800253e:	627b      	str	r3, [r7, #36]	; 0x24
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8002540:	7f7b      	ldrb	r3, [r7, #29]
 8002542:	2b10      	cmp	r3, #16
 8002544:	d101      	bne.n	800254a <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xba>
 8002546:	2302      	movs	r3, #2
 8002548:	e000      	b.n	800254c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xbc>
 800254a:	2301      	movs	r3, #1
 800254c:	623b      	str	r3, [r7, #32]
        break;
 800254e:	bf00      	nop
    }

    /* HAL_DMA2D_ConfigLayer() depends on hdma2d.Init */
    hdma2d.Init.Mode = dma2dTransferMode;
 8002550:	4a76      	ldr	r2, [pc, #472]	; (800272c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8002552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002554:	6053      	str	r3, [r2, #4]
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 8002556:	7f7b      	ldrb	r3, [r7, #29]
 8002558:	2b10      	cmp	r3, #16
 800255a:	d101      	bne.n	8002560 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 800255c:	2302      	movs	r3, #2
 800255e:	e000      	b.n	8002562 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd2>
 8002560:	2301      	movs	r3, #1
 8002562:	4a72      	ldr	r2, [pc, #456]	; (800272c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8002564:	6093      	str	r3, [r2, #8]
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	8adb      	ldrh	r3, [r3, #22]
 800256a:	461a      	mov	r2, r3
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	8a1b      	ldrh	r3, [r3, #16]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	461a      	mov	r2, r3
 8002574:	4b6d      	ldr	r3, [pc, #436]	; (800272c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8002576:	60da      	str	r2, [r3, #12]

    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8002578:	7f7b      	ldrb	r3, [r7, #29]
 800257a:	2b10      	cmp	r3, #16
 800257c:	d101      	bne.n	8002582 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf2>
 800257e:	2202      	movs	r2, #2
 8002580:	e000      	b.n	8002584 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf4>
 8002582:	2201      	movs	r2, #1
                      (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888,
                      blitOp.dstLoopStride - blitOp.nSteps);
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	8adb      	ldrh	r3, [r3, #22]
 8002588:	4619      	mov	r1, r3
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	8a1b      	ldrh	r3, [r3, #16]
 800258e:	1acb      	subs	r3, r1, r3
    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8002590:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002592:	4866      	ldr	r0, [pc, #408]	; (800272c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8002594:	f7ff fe9a 	bl	80022cc <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>

    hdma2d.LayerCfg[1].InputColorMode = dma2dColorMode;
 8002598:	4a64      	ldr	r2, [pc, #400]	; (800272c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800259a:	6a3b      	ldr	r3, [r7, #32]
 800259c:	62d3      	str	r3, [r2, #44]	; 0x2c
    hdma2d.LayerCfg[1].InputOffset = blitOp.srcLoopStride - blitOp.nSteps;
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	8a9b      	ldrh	r3, [r3, #20]
 80025a2:	461a      	mov	r2, r3
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	8a1b      	ldrh	r3, [r3, #16]
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	461a      	mov	r2, r3
 80025ac:	4b5f      	ldr	r3, [pc, #380]	; (800272c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80025ae:	629a      	str	r2, [r3, #40]	; 0x28

    if (blendingImage || blendingText)
 80025b0:	7ffb      	ldrb	r3, [r7, #31]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d103      	bne.n	80025be <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12e>
 80025b6:	7fbb      	ldrb	r3, [r7, #30]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	f000 8082 	beq.w	80026c2 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x232>
    {
        if (blitOp.alpha < 255)
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	7f1b      	ldrb	r3, [r3, #28]
 80025c2:	2bff      	cmp	r3, #255	; 0xff
 80025c4:	d008      	beq.n	80025d8 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>
        {
            hdma2d.LayerCfg[1].AlphaMode = DMA2D_COMBINE_ALPHA;
 80025c6:	4b59      	ldr	r3, [pc, #356]	; (800272c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80025c8:	2202      	movs	r2, #2
 80025ca:	631a      	str	r2, [r3, #48]	; 0x30
            hdma2d.LayerCfg[1].InputAlpha = blitOp.alpha;
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	7f1b      	ldrb	r3, [r3, #28]
 80025d0:	461a      	mov	r2, r3
 80025d2:	4b56      	ldr	r3, [pc, #344]	; (800272c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80025d4:	635a      	str	r2, [r3, #52]	; 0x34
 80025d6:	e002      	b.n	80025de <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14e>
        }
        else
        {
            hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80025d8:	4b54      	ldr	r3, [pc, #336]	; (800272c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80025da:	2200      	movs	r2, #0
 80025dc:	631a      	str	r2, [r3, #48]	; 0x30
        }

        if (blendingText)
 80025de:	7fbb      	ldrb	r3, [r7, #30]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d059      	beq.n	8002698 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x208>
        {
            if (bitDepth == 16)
 80025e4:	7f7b      	ldrb	r3, [r7, #29]
 80025e6:	2b10      	cmp	r3, #16
 80025e8:	d14a      	bne.n	8002680 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f0>
            {
                uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	3318      	adds	r3, #24
 80025ee:	4618      	mov	r0, r3
 80025f0:	f7ff fdbe 	bl	8002170 <_ZNK8touchgfx9colortypecvtEv>
 80025f4:	4603      	mov	r3, r0
 80025f6:	12db      	asrs	r3, r3, #11
 80025f8:	f003 021f 	and.w	r2, r3, #31
 80025fc:	4613      	mov	r3, r2
 80025fe:	021b      	lsls	r3, r3, #8
 8002600:	1a9b      	subs	r3, r3, r2
 8002602:	4a4b      	ldr	r2, [pc, #300]	; (8002730 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002604:	fb82 1203 	smull	r1, r2, r2, r3
 8002608:	441a      	add	r2, r3
 800260a:	1112      	asrs	r2, r2, #4
 800260c:	17db      	asrs	r3, r3, #31
 800260e:	1ad3      	subs	r3, r2, r3
 8002610:	61bb      	str	r3, [r7, #24]
                uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	3318      	adds	r3, #24
 8002616:	4618      	mov	r0, r3
 8002618:	f7ff fdaa 	bl	8002170 <_ZNK8touchgfx9colortypecvtEv>
 800261c:	4603      	mov	r3, r0
 800261e:	115b      	asrs	r3, r3, #5
 8002620:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002624:	4613      	mov	r3, r2
 8002626:	021b      	lsls	r3, r3, #8
 8002628:	1a9b      	subs	r3, r3, r2
 800262a:	4a42      	ldr	r2, [pc, #264]	; (8002734 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 800262c:	fb82 1203 	smull	r1, r2, r2, r3
 8002630:	441a      	add	r2, r3
 8002632:	1152      	asrs	r2, r2, #5
 8002634:	17db      	asrs	r3, r3, #31
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	617b      	str	r3, [r7, #20]
                uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	3318      	adds	r3, #24
 800263e:	4618      	mov	r0, r3
 8002640:	f7ff fd96 	bl	8002170 <_ZNK8touchgfx9colortypecvtEv>
 8002644:	4603      	mov	r3, r0
 8002646:	f003 021f 	and.w	r2, r3, #31
 800264a:	4613      	mov	r3, r2
 800264c:	021b      	lsls	r3, r3, #8
 800264e:	1a9b      	subs	r3, r3, r2
 8002650:	4a37      	ldr	r2, [pc, #220]	; (8002730 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002652:	fb82 1203 	smull	r1, r2, r2, r3
 8002656:	441a      	add	r2, r3
 8002658:	1112      	asrs	r2, r2, #4
 800265a:	17db      	asrs	r3, r3, #31
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	613b      	str	r3, [r7, #16]
                uint32_t alpha = blitOp.alpha;
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	7f1b      	ldrb	r3, [r3, #28]
 8002664:	60fb      	str	r3, [r7, #12]
                hdma2d.LayerCfg[1].InputAlpha = (alpha << 24) | (red << 16) | (green << 8) | blue;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	061a      	lsls	r2, r3, #24
 800266a:	69bb      	ldr	r3, [r7, #24]
 800266c:	041b      	lsls	r3, r3, #16
 800266e:	431a      	orrs	r2, r3
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	021b      	lsls	r3, r3, #8
 8002674:	431a      	orrs	r2, r3
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	4313      	orrs	r3, r2
 800267a:	4a2c      	ldr	r2, [pc, #176]	; (800272c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800267c:	6353      	str	r3, [r2, #52]	; 0x34
 800267e:	e00b      	b.n	8002698 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x208>
            }
            else
            {
                hdma2d.LayerCfg[1].InputAlpha = blitOp.color.getColor32() | (blitOp.alpha << 24);
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	3318      	adds	r3, #24
 8002684:	4618      	mov	r0, r3
 8002686:	f7ff fd67 	bl	8002158 <_ZNK8touchgfx9colortype10getColor32Ev>
 800268a:	4602      	mov	r2, r0
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	7f1b      	ldrb	r3, [r3, #28]
 8002690:	061b      	lsls	r3, r3, #24
 8002692:	4313      	orrs	r3, r2
 8002694:	4a25      	ldr	r2, [pc, #148]	; (800272c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8002696:	6353      	str	r3, [r2, #52]	; 0x34
            }
        }

        hdma2d.LayerCfg[0].InputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	8adb      	ldrh	r3, [r3, #22]
 800269c:	461a      	mov	r2, r3
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	8a1b      	ldrh	r3, [r3, #16]
 80026a2:	1ad3      	subs	r3, r2, r3
 80026a4:	461a      	mov	r2, r3
 80026a6:	4b21      	ldr	r3, [pc, #132]	; (800272c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80026a8:	619a      	str	r2, [r3, #24]
        hdma2d.LayerCfg[0].InputColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 80026aa:	7f7b      	ldrb	r3, [r7, #29]
 80026ac:	2b10      	cmp	r3, #16
 80026ae:	d101      	bne.n	80026b4 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x224>
 80026b0:	2302      	movs	r3, #2
 80026b2:	e000      	b.n	80026b6 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x226>
 80026b4:	2301      	movs	r3, #1
 80026b6:	4a1d      	ldr	r2, [pc, #116]	; (800272c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80026b8:	61d3      	str	r3, [r2, #28]

        HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 80026ba:	2100      	movs	r1, #0
 80026bc:	481b      	ldr	r0, [pc, #108]	; (800272c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80026be:	f008 fbf7 	bl	800aeb0 <HAL_DMA2D_ConfigLayer>
    }

    HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 80026c2:	2101      	movs	r1, #1
 80026c4:	4819      	ldr	r0, [pc, #100]	; (800272c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80026c6:	f008 fbf3 	bl	800aeb0 <HAL_DMA2D_ConfigLayer>

    if (blendingImage || blendingText)
 80026ca:	7ffb      	ldrb	r3, [r7, #31]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d102      	bne.n	80026d6 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x246>
 80026d0:	7fbb      	ldrb	r3, [r7, #30]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d015      	beq.n	8002702 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x272>
    {
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
                                   (unsigned int)blitOp.pSrc,
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	685b      	ldr	r3, [r3, #4]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 80026da:	4619      	mov	r1, r3
                                   (unsigned int)blitOp.pDst,
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 80026e0:	4618      	mov	r0, r3
                                   (unsigned int)blitOp.pDst,
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 80026e6:	461c      	mov	r4, r3
                                   blitOp.nSteps, blitOp.nLoops);
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 80026ec:	461a      	mov	r2, r3
                                   blitOp.nSteps, blitOp.nLoops);
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 80026f2:	9301      	str	r3, [sp, #4]
 80026f4:	9200      	str	r2, [sp, #0]
 80026f6:	4623      	mov	r3, r4
 80026f8:	4602      	mov	r2, r0
 80026fa:	480c      	ldr	r0, [pc, #48]	; (800272c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80026fc:	f008 f9fb 	bl	800aaf6 <HAL_DMA2D_BlendingStart_IT>
 8002700:	e00f      	b.n	8002722 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x292>
    }
    else
    {
        HAL_DMA2D_Start_IT(&hdma2d,
                           (unsigned int)blitOp.pSrc,
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	685b      	ldr	r3, [r3, #4]
        HAL_DMA2D_Start_IT(&hdma2d,
 8002706:	4619      	mov	r1, r3
                           (unsigned int)blitOp.pDst,
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_Start_IT(&hdma2d,
 800270c:	461a      	mov	r2, r3
                           blitOp.nSteps, blitOp.nLoops);
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_Start_IT(&hdma2d,
 8002712:	4618      	mov	r0, r3
                           blitOp.nSteps, blitOp.nLoops);
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_Start_IT(&hdma2d,
 8002718:	9300      	str	r3, [sp, #0]
 800271a:	4603      	mov	r3, r0
 800271c:	4803      	ldr	r0, [pc, #12]	; (800272c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800271e:	f008 f9b7 	bl	800aa90 <HAL_DMA2D_Start_IT>
    }
}
 8002722:	bf00      	nop
 8002724:	372c      	adds	r7, #44	; 0x2c
 8002726:	46bd      	mov	sp, r7
 8002728:	bd90      	pop	{r4, r7, pc}
 800272a:	bf00      	nop
 800272c:	2000d60c 	.word	0x2000d60c
 8002730:	84210843 	.word	0x84210843
 8002734:	82082083 	.word	0x82082083

08002738 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE>:

void STM32F4DMA::setupDataFill(const BlitOp& blitOp)
{
 8002738:	b590      	push	{r4, r7, lr}
 800273a:	b08d      	sub	sp, #52	; 0x34
 800273c:	af02      	add	r7, sp, #8
 800273e:	6078      	str	r0, [r7, #4]
 8002740:	6039      	str	r1, [r7, #0]
    uint8_t bitDepth = HAL::lcd().bitDepth();
 8002742:	f7ff f9d7 	bl	8001af4 <_ZN8touchgfx3HAL3lcdEv>
 8002746:	4602      	mov	r2, r0
 8002748:	6813      	ldr	r3, [r2, #0]
 800274a:	3320      	adds	r3, #32
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4610      	mov	r0, r2
 8002750:	4798      	blx	r3
 8002752:	4603      	mov	r3, r0
 8002754:	77fb      	strb	r3, [r7, #31]
    uint32_t dma2dTransferMode;
    uint32_t dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8002756:	7ffb      	ldrb	r3, [r7, #31]
 8002758:	2b10      	cmp	r3, #16
 800275a:	d101      	bne.n	8002760 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x28>
 800275c:	2302      	movs	r3, #2
 800275e:	e000      	b.n	8002762 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x2a>
 8002760:	2301      	movs	r3, #1
 8002762:	61bb      	str	r3, [r7, #24]

    uint32_t color = 0;
 8002764:	2300      	movs	r3, #0
 8002766:	623b      	str	r3, [r7, #32]
    if (bitDepth == 16)
 8002768:	7ffb      	ldrb	r3, [r7, #31]
 800276a:	2b10      	cmp	r3, #16
 800276c:	d149      	bne.n	8002802 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0xca>
    {
        uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	3318      	adds	r3, #24
 8002772:	4618      	mov	r0, r3
 8002774:	f7ff fcfc 	bl	8002170 <_ZNK8touchgfx9colortypecvtEv>
 8002778:	4603      	mov	r3, r0
 800277a:	12db      	asrs	r3, r3, #11
 800277c:	f003 021f 	and.w	r2, r3, #31
 8002780:	4613      	mov	r3, r2
 8002782:	021b      	lsls	r3, r3, #8
 8002784:	1a9b      	subs	r3, r3, r2
 8002786:	4a69      	ldr	r2, [pc, #420]	; (800292c <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f4>)
 8002788:	fb82 1203 	smull	r1, r2, r2, r3
 800278c:	441a      	add	r2, r3
 800278e:	1112      	asrs	r2, r2, #4
 8002790:	17db      	asrs	r3, r3, #31
 8002792:	1ad3      	subs	r3, r2, r3
 8002794:	617b      	str	r3, [r7, #20]
        uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	3318      	adds	r3, #24
 800279a:	4618      	mov	r0, r3
 800279c:	f7ff fce8 	bl	8002170 <_ZNK8touchgfx9colortypecvtEv>
 80027a0:	4603      	mov	r3, r0
 80027a2:	115b      	asrs	r3, r3, #5
 80027a4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80027a8:	4613      	mov	r3, r2
 80027aa:	021b      	lsls	r3, r3, #8
 80027ac:	1a9b      	subs	r3, r3, r2
 80027ae:	4a60      	ldr	r2, [pc, #384]	; (8002930 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f8>)
 80027b0:	fb82 1203 	smull	r1, r2, r2, r3
 80027b4:	441a      	add	r2, r3
 80027b6:	1152      	asrs	r2, r2, #5
 80027b8:	17db      	asrs	r3, r3, #31
 80027ba:	1ad3      	subs	r3, r2, r3
 80027bc:	613b      	str	r3, [r7, #16]
        uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	3318      	adds	r3, #24
 80027c2:	4618      	mov	r0, r3
 80027c4:	f7ff fcd4 	bl	8002170 <_ZNK8touchgfx9colortypecvtEv>
 80027c8:	4603      	mov	r3, r0
 80027ca:	f003 021f 	and.w	r2, r3, #31
 80027ce:	4613      	mov	r3, r2
 80027d0:	021b      	lsls	r3, r3, #8
 80027d2:	1a9b      	subs	r3, r3, r2
 80027d4:	4a55      	ldr	r2, [pc, #340]	; (800292c <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f4>)
 80027d6:	fb82 1203 	smull	r1, r2, r2, r3
 80027da:	441a      	add	r2, r3
 80027dc:	1112      	asrs	r2, r2, #4
 80027de:	17db      	asrs	r3, r3, #31
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	60fb      	str	r3, [r7, #12]
        uint32_t alpha = blitOp.alpha;
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	7f1b      	ldrb	r3, [r3, #28]
 80027e8:	60bb      	str	r3, [r7, #8]
        color = (alpha << 24) | (red << 16) | (green << 8) | blue;
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	061a      	lsls	r2, r3, #24
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	041b      	lsls	r3, r3, #16
 80027f2:	431a      	orrs	r2, r3
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	021b      	lsls	r3, r3, #8
 80027f8:	4313      	orrs	r3, r2
 80027fa:	68fa      	ldr	r2, [r7, #12]
 80027fc:	4313      	orrs	r3, r2
 80027fe:	623b      	str	r3, [r7, #32]
 8002800:	e00b      	b.n	800281a <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe2>
    }
    else
    {
        color = (blitOp.alpha << 24) | blitOp.color.getColor32();
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	7f1b      	ldrb	r3, [r3, #28]
 8002806:	061b      	lsls	r3, r3, #24
 8002808:	461c      	mov	r4, r3
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	3318      	adds	r3, #24
 800280e:	4618      	mov	r0, r3
 8002810:	f7ff fca2 	bl	8002158 <_ZNK8touchgfx9colortype10getColor32Ev>
 8002814:	4603      	mov	r3, r0
 8002816:	4323      	orrs	r3, r4
 8002818:	623b      	str	r3, [r7, #32]
    }

    switch (blitOp.operation)
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	2b08      	cmp	r3, #8
 8002820:	d103      	bne.n	800282a <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0xf2>
    {
    case BLIT_OP_FILL_WITH_ALPHA:
        dma2dTransferMode = DMA2D_M2M_BLEND;
 8002822:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002826:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002828:	e003      	b.n	8002832 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0xfa>
    default:
        dma2dTransferMode = DMA2D_R2M;
 800282a:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800282e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002830:	bf00      	nop
    };

    /* HAL_DMA2D_ConfigLayer() depends on hdma2d.Init */
    hdma2d.Init.Mode = dma2dTransferMode;
 8002832:	4a40      	ldr	r2, [pc, #256]	; (8002934 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8002834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002836:	6053      	str	r3, [r2, #4]
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 8002838:	7ffb      	ldrb	r3, [r7, #31]
 800283a:	2b10      	cmp	r3, #16
 800283c:	d101      	bne.n	8002842 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10a>
 800283e:	2302      	movs	r3, #2
 8002840:	e000      	b.n	8002844 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10c>
 8002842:	2301      	movs	r3, #1
 8002844:	4a3b      	ldr	r2, [pc, #236]	; (8002934 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8002846:	6093      	str	r3, [r2, #8]
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	8adb      	ldrh	r3, [r3, #22]
 800284c:	461a      	mov	r2, r3
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	8a1b      	ldrh	r3, [r3, #16]
 8002852:	1ad3      	subs	r3, r2, r3
 8002854:	461a      	mov	r2, r3
 8002856:	4b37      	ldr	r3, [pc, #220]	; (8002934 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8002858:	60da      	str	r2, [r3, #12]

    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 800285a:	7ffb      	ldrb	r3, [r7, #31]
 800285c:	2b10      	cmp	r3, #16
 800285e:	d101      	bne.n	8002864 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x12c>
 8002860:	2202      	movs	r2, #2
 8002862:	e000      	b.n	8002866 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x12e>
 8002864:	2201      	movs	r2, #1
                      (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888,
                      blitOp.dstLoopStride - blitOp.nSteps);
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	8adb      	ldrh	r3, [r3, #22]
 800286a:	4619      	mov	r1, r3
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	8a1b      	ldrh	r3, [r3, #16]
 8002870:	1acb      	subs	r3, r1, r3
    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8002872:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002874:	482f      	ldr	r0, [pc, #188]	; (8002934 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8002876:	f7ff fd29 	bl	80022cc <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>

    if (dma2dTransferMode == DMA2D_M2M_BLEND) {
 800287a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002880:	d11e      	bne.n	80028c0 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x188>
        hdma2d.LayerCfg[1].AlphaMode = DMA2D_REPLACE_ALPHA;
 8002882:	4b2c      	ldr	r3, [pc, #176]	; (8002934 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8002884:	2201      	movs	r2, #1
 8002886:	631a      	str	r2, [r3, #48]	; 0x30
        hdma2d.LayerCfg[1].InputAlpha = color;
 8002888:	4a2a      	ldr	r2, [pc, #168]	; (8002934 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 800288a:	6a3b      	ldr	r3, [r7, #32]
 800288c:	6353      	str	r3, [r2, #52]	; 0x34
        hdma2d.LayerCfg[1].InputColorMode = CM_A8;
 800288e:	4b29      	ldr	r3, [pc, #164]	; (8002934 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8002890:	2209      	movs	r2, #9
 8002892:	62da      	str	r2, [r3, #44]	; 0x2c
        hdma2d.LayerCfg[0].InputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	8adb      	ldrh	r3, [r3, #22]
 8002898:	461a      	mov	r2, r3
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	8a1b      	ldrh	r3, [r3, #16]
 800289e:	1ad3      	subs	r3, r2, r3
 80028a0:	461a      	mov	r2, r3
 80028a2:	4b24      	ldr	r3, [pc, #144]	; (8002934 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 80028a4:	619a      	str	r2, [r3, #24]
        hdma2d.LayerCfg[0].InputColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 80028a6:	7ffb      	ldrb	r3, [r7, #31]
 80028a8:	2b10      	cmp	r3, #16
 80028aa:	d101      	bne.n	80028b0 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x178>
 80028ac:	2302      	movs	r3, #2
 80028ae:	e000      	b.n	80028b2 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x17a>
 80028b0:	2301      	movs	r3, #1
 80028b2:	4a20      	ldr	r2, [pc, #128]	; (8002934 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 80028b4:	61d3      	str	r3, [r2, #28]
        HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 80028b6:	2100      	movs	r1, #0
 80028b8:	481e      	ldr	r0, [pc, #120]	; (8002934 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 80028ba:	f008 faf9 	bl	800aeb0 <HAL_DMA2D_ConfigLayer>
 80028be:	e005      	b.n	80028cc <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x194>
    } else {
        hdma2d.LayerCfg[1].InputColorMode = dma2dColorMode;
 80028c0:	4a1c      	ldr	r2, [pc, #112]	; (8002934 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 80028c2:	69bb      	ldr	r3, [r7, #24]
 80028c4:	62d3      	str	r3, [r2, #44]	; 0x2c
        hdma2d.LayerCfg[1].InputOffset = 0;
 80028c6:	4b1b      	ldr	r3, [pc, #108]	; (8002934 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	629a      	str	r2, [r3, #40]	; 0x28
    }

    HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 80028cc:	2101      	movs	r1, #1
 80028ce:	4819      	ldr	r0, [pc, #100]	; (8002934 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 80028d0:	f008 faee 	bl	800aeb0 <HAL_DMA2D_ConfigLayer>

    if (dma2dTransferMode == DMA2D_M2M_BLEND)
 80028d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80028da:	d115      	bne.n	8002908 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1d0>
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
                                   (unsigned int)blitOp.pDst,
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 80028e0:	4619      	mov	r1, r3
                                   (unsigned int)blitOp.pDst,
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 80028e6:	4618      	mov	r0, r3
                                   (unsigned int)blitOp.pDst,
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 80028ec:	461c      	mov	r4, r3
                                   blitOp.nSteps, blitOp.nLoops);
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 80028f2:	461a      	mov	r2, r3
                                   blitOp.nSteps, blitOp.nLoops);
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 80028f8:	9301      	str	r3, [sp, #4]
 80028fa:	9200      	str	r2, [sp, #0]
 80028fc:	4623      	mov	r3, r4
 80028fe:	4602      	mov	r2, r0
 8002900:	480c      	ldr	r0, [pc, #48]	; (8002934 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8002902:	f008 f8f8 	bl	800aaf6 <HAL_DMA2D_BlendingStart_IT>
    else
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
                           blitOp.nSteps, blitOp.nLoops);
}
 8002906:	e00d      	b.n	8002924 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1ec>
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	461a      	mov	r2, r3
                           blitOp.nSteps, blitOp.nLoops);
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 8002912:	4619      	mov	r1, r3
                           blitOp.nSteps, blitOp.nLoops);
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 8002918:	9300      	str	r3, [sp, #0]
 800291a:	460b      	mov	r3, r1
 800291c:	6a39      	ldr	r1, [r7, #32]
 800291e:	4805      	ldr	r0, [pc, #20]	; (8002934 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8002920:	f008 f8b6 	bl	800aa90 <HAL_DMA2D_Start_IT>
}
 8002924:	bf00      	nop
 8002926:	372c      	adds	r7, #44	; 0x2c
 8002928:	46bd      	mov	sp, r7
 800292a:	bd90      	pop	{r4, r7, pc}
 800292c:	84210843 	.word	0x84210843
 8002930:	82082083 	.word	0x82082083
 8002934:	2000d60c 	.word	0x2000d60c

08002938 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	4a05      	ldr	r2, [pc, #20]	; (8002958 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	601a      	str	r2, [r3, #0]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4618      	mov	r0, r3
 800294a:	f7ff fc1f 	bl	800218c <_ZN8touchgfx9DMA_QueueD1Ev>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4618      	mov	r0, r3
 8002952:	3708      	adds	r7, #8
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}
 8002958:	08025cac 	.word	0x08025cac

0800295c <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 800295c:	b580      	push	{r7, lr}
 800295e:	b082      	sub	sp, #8
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	6878      	ldr	r0, [r7, #4]
 8002966:	f7ff ffe7 	bl	8002938 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 800296a:	2114      	movs	r1, #20
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	f01f ff14 	bl	802279a <_ZdlPvj>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4618      	mov	r0, r3
 8002976:	3708      	adds	r7, #8
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}

0800297c <_ZN8touchgfx4RectC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor. Resulting in an empty Rect with coordinates 0,0.
     */
    Rect()
 800297c:	b480      	push	{r7}
 800297e:	b083      	sub	sp, #12
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
    {
        this->x = 0;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2200      	movs	r2, #0
 8002988:	801a      	strh	r2, [r3, #0]
        this->y = 0;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2200      	movs	r2, #0
 800298e:	805a      	strh	r2, [r3, #2]
        this->width = 0;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2200      	movs	r2, #0
 8002994:	809a      	strh	r2, [r3, #4]
        this->height = 0;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2200      	movs	r2, #0
 800299a:	80da      	strh	r2, [r3, #6]
    }
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	4618      	mov	r0, r3
 80029a0:	370c      	adds	r7, #12
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr
	...

080029ac <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
     *
     *        Registers an array of texts.
     *
     * @param t The array of texts.
     */
    static void registerTexts(const Texts* t)
 80029ac:	b480      	push	{r7}
 80029ae:	b083      	sub	sp, #12
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
    {
        texts = t;
 80029b4:	4a04      	ldr	r2, [pc, #16]	; (80029c8 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6013      	str	r3, [r2, #0]
    }
 80029ba:	bf00      	nop
 80029bc:	370c      	adds	r7, #12
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop
 80029c8:	2000d240 	.word	0x2000d240

080029cc <_ZN8touchgfx12FontProviderD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~FontProvider()
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
    {
 80029d4:	4a04      	ldr	r2, [pc, #16]	; (80029e8 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	601a      	str	r2, [r3, #0]
    }
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	4618      	mov	r0, r3
 80029de:	370c      	adds	r7, #12
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr
 80029e8:	08024410 	.word	0x08024410

080029ec <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b082      	sub	sp, #8
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
    }
 80029f4:	6878      	ldr	r0, [r7, #4]
 80029f6:	f7ff ffe9 	bl	80029cc <_ZN8touchgfx12FontProviderD1Ev>
 80029fa:	2104      	movs	r1, #4
 80029fc:	6878      	ldr	r0, [r7, #4]
 80029fe:	f01f fecc 	bl	802279a <_ZdlPvj>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4618      	mov	r0, r3
 8002a06:	3708      	adds	r7, #8
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}

08002a0c <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 8002a0c:	b480      	push	{r7}
 8002a0e:	b085      	sub	sp, #20
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	60f8      	str	r0, [r7, #12]
 8002a14:	60b9      	str	r1, [r7, #8]
 8002a16:	607a      	str	r2, [r7, #4]
 8002a18:	603b      	str	r3, [r7, #0]
            AbstractPartition& scr,
            AbstractPartition& tra,
            MVPApplication& app) : presenterStorage(pres),
        screenStorage(scr),
        transitionStorage(tra),
        frontendApplication(app)
 8002a1a:	4a0b      	ldr	r2, [pc, #44]	; (8002a48 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	601a      	str	r2, [r3, #0]
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	68ba      	ldr	r2, [r7, #8]
 8002a24:	605a      	str	r2, [r3, #4]
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	687a      	ldr	r2, [r7, #4]
 8002a2a:	609a      	str	r2, [r3, #8]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	683a      	ldr	r2, [r7, #0]
 8002a30:	60da      	str	r2, [r3, #12]
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	69ba      	ldr	r2, [r7, #24]
 8002a36:	611a      	str	r2, [r3, #16]
    {
    }
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3714      	adds	r7, #20
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr
 8002a46:	bf00      	nop
 8002a48:	08024400 	.word	0x08024400

08002a4c <_ZN8touchgfx7MVPHeapD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~MVPHeap()
 8002a4c:	b480      	push	{r7}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
    {
 8002a54:	4a04      	ldr	r2, [pc, #16]	; (8002a68 <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	601a      	str	r2, [r3, #0]
    }
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	370c      	adds	r7, #12
 8002a60:	46bd      	mov	sp, r7
 8002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a66:	4770      	bx	lr
 8002a68:	08024400 	.word	0x08024400

08002a6c <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b082      	sub	sp, #8
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
    }
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	f7ff ffe9 	bl	8002a4c <_ZN8touchgfx7MVPHeapD1Ev>
 8002a7a:	2114      	movs	r1, #20
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	f01f fe8c 	bl	802279a <_ZdlPvj>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	4618      	mov	r0, r3
 8002a86:	3708      	adds	r7, #8
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}

08002a8c <_ZN8touchgfx3LCDD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~LCD()
 8002a8c:	b480      	push	{r7}
 8002a8e:	b083      	sub	sp, #12
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
    {
 8002a94:	4a04      	ldr	r2, [pc, #16]	; (8002aa8 <_ZN8touchgfx3LCDD1Ev+0x1c>)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	601a      	str	r2, [r3, #0]
    }
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	370c      	adds	r7, #12
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr
 8002aa8:	080266f0 	.word	0x080266f0

08002aac <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b082      	sub	sp, #8
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
    }
 8002ab4:	6878      	ldr	r0, [r7, #4]
 8002ab6:	f7ff ffe9 	bl	8002a8c <_ZN8touchgfx3LCDD1Ev>
 8002aba:	2108      	movs	r1, #8
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	f01f fe6c 	bl	802279a <_ZdlPvj>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3708      	adds	r7, #8
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}

08002acc <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     *        This handler is invoked when a mouse click or display touch event has been
     *        detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8002acc:	b480      	push	{r7}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	6039      	str	r1, [r7, #0]
    {
    }
 8002ad6:	bf00      	nop
 8002ad8:	370c      	adds	r7, #12
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr

08002ae2 <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
     *
     *        This handler is invoked when a drag event has been detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 8002ae2:	b480      	push	{r7}
 8002ae4:	b083      	sub	sp, #12
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	6078      	str	r0, [r7, #4]
 8002aea:	6039      	str	r1, [r7, #0]
    {
    }
 8002aec:	bf00      	nop
 8002aee:	370c      	adds	r7, #12
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr

08002af8 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
     *
     *        This handler is invoked when a gesture event has been detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	6039      	str	r1, [r7, #0]
    {
    }
 8002b02:	bf00      	nop
 8002b04:	370c      	adds	r7, #12
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr

08002b0e <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
     *        This handler is invoked when a key (or button) event has been detected by the
     *        system.
     *
     * @param c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 8002b0e:	b480      	push	{r7}
 8002b10:	b083      	sub	sp, #12
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	6078      	str	r0, [r7, #4]
 8002b16:	460b      	mov	r3, r1
 8002b18:	70fb      	strb	r3, [r7, #3]
    {
    }
 8002b1a:	bf00      	nop
 8002b1c:	370c      	adds	r7, #12
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr

08002b26 <_ZN8touchgfx15UIEventListener15handleTickEventEv>:
     * @brief This handler is invoked when a system tick event has been generated.
     *
     *        This handler is invoked when a system tick event has been generated. The system
     *        tick period is configured in the HAL.
     */
    virtual void handleTickEvent()
 8002b26:	b480      	push	{r7}
 8002b28:	b083      	sub	sp, #12
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	6078      	str	r0, [r7, #4]
    {
    }
 8002b2e:	bf00      	nop
 8002b30:	370c      	adds	r7, #12
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr

08002b3a <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:
     *
     * @brief This handler is invoked when a change screen event is pending.
     *
     *        This handler is invoked when a change screen event is pending.
     */
    virtual void handlePendingScreenTransition()
 8002b3a:	b480      	push	{r7}
 8002b3c:	b083      	sub	sp, #12
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	6078      	str	r0, [r7, #4]
    {
    }
 8002b42:	bf00      	nop
 8002b44:	370c      	adds	r7, #12
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr
	...

08002b50 <_ZN8touchgfx15UIEventListenerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~UIEventListener()
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
    {
 8002b58:	4a04      	ldr	r2, [pc, #16]	; (8002b6c <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	601a      	str	r2, [r3, #0]
    }
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	4618      	mov	r0, r3
 8002b62:	370c      	adds	r7, #12
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr
 8002b6c:	080243d8 	.word	0x080243d8

08002b70 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b082      	sub	sp, #8
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
    }
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f7ff ffe9 	bl	8002b50 <_ZN8touchgfx15UIEventListenerD1Ev>
 8002b7e:	2104      	movs	r1, #4
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	f01f fe0a 	bl	802279a <_ZdlPvj>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3708      	adds	r7, #8
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}

08002b90 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     *        provide a means to switch screen from places that does not have access to a
     *        pointer to the new screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 8002b90:	b480      	push	{r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	460b      	mov	r3, r1
 8002b9a:	70fb      	strb	r3, [r7, #3]
    {
    }
 8002b9c:	bf00      	nop
 8002b9e:	370c      	adds	r7, #12
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr

08002ba8 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
     *
     * @brief Destructor.
     *
     *        Empty virtual destructor.
     */
    virtual ~GenericCallback()
 8002ba8:	b480      	push	{r7}
 8002baa:	b083      	sub	sp, #12
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
    {
 8002bb0:	4a04      	ldr	r2, [pc, #16]	; (8002bc4 <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	601a      	str	r2, [r3, #0]
    }
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4618      	mov	r0, r3
 8002bba:	370c      	adds	r7, #12
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr
 8002bc4:	080243c0 	.word	0x080243c0

08002bc8 <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b082      	sub	sp, #8
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
    }
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	f7ff ffe9 	bl	8002ba8 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 8002bd6:	2104      	movs	r1, #4
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	f01f fdde 	bl	802279a <_ZdlPvj>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4618      	mov	r0, r3
 8002be2:	3708      	adds	r7, #8
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}

08002be8 <_ZN8touchgfx8Gestures9DragStateC1Ev>:
     *
     *        Defines the state of a drag.
     */
    struct DragState
    {
        DragState() : startX(0),
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
            downX(0),
            downY(0),
            tickCount(0),
            velocityX(0),
            velocityY(0),
            inProgress(false)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	801a      	strh	r2, [r3, #0]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	805a      	strh	r2, [r3, #2]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	809a      	strh	r2, [r3, #4]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2200      	movs	r2, #0
 8002c06:	80da      	strh	r2, [r3, #6]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	811a      	strh	r2, [r3, #8]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2200      	movs	r2, #0
 8002c12:	815a      	strh	r2, [r3, #10]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2200      	movs	r2, #0
 8002c18:	819a      	strh	r2, [r3, #12]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	739a      	strb	r2, [r3, #14]
        {
        }
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	4618      	mov	r0, r3
 8002c24:	370c      	adds	r7, #12
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr

08002c2e <_ZN8touchgfx8GesturesC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor. Does nothing.
     */
    Gestures() : listener(0), dragThresholdValue(0) { }
 8002c2e:	b580      	push	{r7, lr}
 8002c30:	b082      	sub	sp, #8
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	6078      	str	r0, [r7, #4]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f7ff ffd5 	bl	8002be8 <_ZN8touchgfx8Gestures9DragStateC1Ev>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2200      	movs	r2, #0
 8002c42:	611a      	str	r2, [r3, #16]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2200      	movs	r2, #0
 8002c48:	829a      	strh	r2, [r3, #20]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3708      	adds	r7, #8
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}

08002c54 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height) :
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b084      	sub	sp, #16
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	60f8      	str	r0, [r7, #12]
 8002c5c:	60b9      	str	r1, [r7, #8]
 8002c5e:	607a      	str	r2, [r7, #4]
 8002c60:	603b      	str	r3, [r7, #0]
        displayOrientationChangeRequested(false)
 8002c62:	4a44      	ldr	r2, [pc, #272]	; (8002d74 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x120>)
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	601a      	str	r2, [r3, #0]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	68ba      	ldr	r2, [r7, #8]
 8002c6c:	605a      	str	r2, [r3, #4]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	687a      	ldr	r2, [r7, #4]
 8002c72:	609a      	str	r2, [r3, #8]
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	683a      	ldr	r2, [r7, #0]
 8002c78:	60da      	str	r2, [r3, #12]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	611a      	str	r2, [r3, #16]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2200      	movs	r2, #0
 8002c84:	615a      	str	r2, [r3, #20]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	619a      	str	r2, [r3, #24]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	331c      	adds	r3, #28
 8002c90:	4618      	mov	r0, r3
 8002c92:	f7ff ffcc 	bl	8002c2e <_ZN8touchgfx8GesturesC1Ev>
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	639a      	str	r2, [r3, #56]	; 0x38
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	63da      	str	r2, [r3, #60]	; 0x3c
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	641a      	str	r2, [r3, #64]	; 0x40
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2200      	movs	r2, #0
 8002cac:	645a      	str	r2, [r3, #68]	; 0x44
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2201      	movs	r2, #1
 8002cba:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	64da      	str	r2, [r3, #76]	; 0x4c
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	3350      	adds	r3, #80	; 0x50
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f7ff fe53 	bl	800297c <_ZN8touchgfx4RectC1Ev>
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2201      	movs	r2, #1
 8002cda:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2200      	movs	r2, #0
 8002d02:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2200      	movs	r2, #0
 8002d12:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2200      	movs	r2, #0
 8002d22:	671a      	str	r2, [r3, #112]	; 0x70
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2200      	movs	r2, #0
 8002d28:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
        instance = this;
 8002d2c:	4a12      	ldr	r2, [pc, #72]	; (8002d78 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x124>)
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	6013      	str	r3, [r2, #0]
        DISPLAY_WIDTH = width;
 8002d32:	4a12      	ldr	r2, [pc, #72]	; (8002d7c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x128>)
 8002d34:	8b3b      	ldrh	r3, [r7, #24]
 8002d36:	8013      	strh	r3, [r2, #0]
        DISPLAY_HEIGHT = height;
 8002d38:	4a11      	ldr	r2, [pc, #68]	; (8002d80 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x12c>)
 8002d3a:	8bbb      	ldrh	r3, [r7, #28]
 8002d3c:	8013      	strh	r3, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 8002d3e:	4b11      	ldr	r3, [pc, #68]	; (8002d84 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x130>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	701a      	strb	r2, [r3, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 8002d44:	4b0d      	ldr	r3, [pc, #52]	; (8002d7c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x128>)
 8002d46:	881a      	ldrh	r2, [r3, #0]
 8002d48:	4b0f      	ldr	r3, [pc, #60]	; (8002d88 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x134>)
 8002d4a:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 8002d4c:	4b0c      	ldr	r3, [pc, #48]	; (8002d80 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x12c>)
 8002d4e:	881a      	ldrh	r2, [r3, #0]
 8002d50:	4b0e      	ldr	r3, [pc, #56]	; (8002d8c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x138>)
 8002d52:	801a      	strh	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8002d54:	8b3a      	ldrh	r2, [r7, #24]
 8002d56:	8bbb      	ldrh	r3, [r7, #28]
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d301      	bcc.n	8002d60 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x10c>
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	e000      	b.n	8002d62 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x10e>
 8002d60:	2201      	movs	r2, #1
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3710      	adds	r7, #16
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	bf00      	nop
 8002d74:	08025818 	.word	0x08025818
 8002d78:	2000d1a4 	.word	0x2000d1a4
 8002d7c:	2000d198 	.word	0x2000d198
 8002d80:	2000d19a 	.word	0x2000d19a
 8002d84:	2000d19c 	.word	0x2000d19c
 8002d88:	2000d19e 	.word	0x2000d19e
 8002d8c:	2000d1a0 	.word	0x2000d1a0

08002d90 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b082      	sub	sp, #8
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
 8002d98:	4a05      	ldr	r2, [pc, #20]	; (8002db0 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	601a      	str	r2, [r3, #0]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4618      	mov	r0, r3
 8002da2:	f7ff fed5 	bl	8002b50 <_ZN8touchgfx15UIEventListenerD1Ev>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4618      	mov	r0, r3
 8002daa:	3708      	adds	r7, #8
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	080267f4 	.word	0x080267f4

08002db4 <_ZN8touchgfx11ApplicationD0Ev>:
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b082      	sub	sp, #8
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	f7ff ffe7 	bl	8002d90 <_ZN8touchgfx11ApplicationD1Ev>
 8002dc2:	f44f 7198 	mov.w	r1, #304	; 0x130
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f01f fce7 	bl	802279a <_ZdlPvj>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3708      	adds	r7, #8
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
	...

08002dd8 <_ZN8touchgfx14MVPApplicationD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~MVPApplication() { }
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b082      	sub	sp, #8
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
 8002de0:	4a05      	ldr	r2, [pc, #20]	; (8002df8 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	601a      	str	r2, [r3, #0]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4618      	mov	r0, r3
 8002dea:	f7ff ffd1 	bl	8002d90 <_ZN8touchgfx11ApplicationD1Ev>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4618      	mov	r0, r3
 8002df2:	3708      	adds	r7, #8
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	08024384 	.word	0x08024384

08002dfc <_ZN8touchgfx14MVPApplicationD0Ev>:
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b082      	sub	sp, #8
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	f7ff ffe7 	bl	8002dd8 <_ZN8touchgfx14MVPApplicationD1Ev>
 8002e0a:	f44f 719c 	mov.w	r1, #312	; 0x138
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f01f fcc3 	bl	802279a <_ZdlPvj>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	4618      	mov	r0, r3
 8002e18:	3708      	adds	r7, #8
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}

08002e1e <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
     *
     * @brief Handles the pending screen transition.
     *
     *        Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8002e1e:	b580      	push	{r7, lr}
 8002e20:	b082      	sub	sp, #8
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f000 f804 	bl	8002e34 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 8002e2c:	bf00      	nop
 8002e2e:	3708      	adds	r7, #8
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}

08002e34 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:
     * @brief Evaluates the pending Callback instances.
     *
     *        Evaluates the pending Callback instances. If a callback is valid, it is executed
     *        and a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b082      	sub	sp, #8
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d00f      	beq.n	8002e66 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	330c      	adds	r3, #12
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4610      	mov	r0, r2
 8002e5a:	4798      	blx	r3
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d001      	beq.n	8002e66 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8002e62:	2301      	movs	r3, #1
 8002e64:	e000      	b.n	8002e68 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 8002e66:	2300      	movs	r3, #0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d00e      	beq.n	8002e8a <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	3308      	adds	r3, #8
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4610      	mov	r0, r2
 8002e80:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2200      	movs	r2, #0
 8002e86:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
        }
    }
 8002e8a:	bf00      	nop
 8002e8c:	3708      	adds	r7, #8
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
	...

08002e94 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b082      	sub	sp, #8
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
 8002e9c:	4a08      	ldr	r2, [pc, #32]	; (8002ec0 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	601a      	str	r2, [r3, #0]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f000 fad5 	bl	8003458 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f7ff ff91 	bl	8002dd8 <_ZN8touchgfx14MVPApplicationD1Ev>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3708      	adds	r7, #8
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	08024330 	.word	0x08024330

08002ec4 <_ZN23FrontendApplicationBaseD0Ev>:
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b082      	sub	sp, #8
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
 8002ecc:	6878      	ldr	r0, [r7, #4]
 8002ece:	f7ff ffe1 	bl	8002e94 <_ZN23FrontendApplicationBaseD1Ev>
 8002ed2:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f01f fc5f 	bl	802279a <_ZdlPvj>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3708      	adds	r7, #8
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
	...

08002ee8 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b082      	sub	sp, #8
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
 8002ef0:	4a05      	ldr	r2, [pc, #20]	; (8002f08 <_ZN19FrontendApplicationD1Ev+0x20>)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	601a      	str	r2, [r3, #0]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f7ff ffcb 	bl	8002e94 <_ZN23FrontendApplicationBaseD1Ev>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4618      	mov	r0, r3
 8002f02:	3708      	adds	r7, #8
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	080242f4 	.word	0x080242f4

08002f0c <_ZN19FrontendApplicationD0Ev>:
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b082      	sub	sp, #8
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	f7ff ffe7 	bl	8002ee8 <_ZN19FrontendApplicationD1Ev>
 8002f1a:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f01f fc3b 	bl	802279a <_ZdlPvj>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	4618      	mov	r0, r3
 8002f28:	3708      	adds	r7, #8
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}

08002f2e <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8002f2e:	b580      	push	{r7, lr}
 8002f30:	b082      	sub	sp, #8
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f005 fa6f 	bl	8008420 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4618      	mov	r0, r3
 8002f46:	f013 fc2f 	bl	80167a8 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 8002f4a:	bf00      	nop
 8002f4c:	3708      	adds	r7, #8
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}

08002f52 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 8002f52:	b580      	push	{r7, lr}
 8002f54:	b082      	sub	sp, #8
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	6078      	str	r0, [r7, #4]
 8002f5a:	6039      	str	r1, [r7, #0]
    {
        app.gotoScreen1ScreenNoTransition();
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f000 fff0 	bl	8003f44 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
    }
 8002f64:	bf00      	nop
 8002f66:	3708      	adds	r7, #8
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}

08002f6c <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b086      	sub	sp, #24
 8002f70:	af02      	add	r7, sp, #8
 8002f72:	60f8      	str	r0, [r7, #12]
 8002f74:	60b9      	str	r1, [r7, #8]
 8002f76:	607a      	str	r2, [r7, #4]
 8002f78:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 8002f7a:	68f8      	ldr	r0, [r7, #12]
 8002f7c:	69bb      	ldr	r3, [r7, #24]
 8002f7e:	9300      	str	r3, [sp, #0]
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	68b9      	ldr	r1, [r7, #8]
 8002f86:	f7ff fd41 	bl	8002a0c <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 8002f8a:	4a04      	ldr	r2, [pc, #16]	; (8002f9c <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	601a      	str	r2, [r3, #0]
    {

    }
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	4618      	mov	r0, r3
 8002f94:	3710      	adds	r7, #16
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	080242e0 	.word	0x080242e0

08002fa0 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	4801      	ldr	r0, [pc, #4]	; (8002fac <__tcf_0+0xc>)
 8002fa6:	f000 f9d3 	bl	8003350 <_ZN12FrontendHeapD1Ev>
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	2000036c 	.word	0x2000036c

08002fb0 <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 8002fb4:	4b08      	ldr	r3, [pc, #32]	; (8002fd8 <_ZN12FrontendHeap11getInstanceEv+0x28>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0301 	and.w	r3, r3, #1
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d108      	bne.n	8002fd2 <_ZN12FrontendHeap11getInstanceEv+0x22>
 8002fc0:	4806      	ldr	r0, [pc, #24]	; (8002fdc <_ZN12FrontendHeap11getInstanceEv+0x2c>)
 8002fc2:	f000 f831 	bl	8003028 <_ZN12FrontendHeapC1Ev>
 8002fc6:	4b04      	ldr	r3, [pc, #16]	; (8002fd8 <_ZN12FrontendHeap11getInstanceEv+0x28>)
 8002fc8:	2201      	movs	r2, #1
 8002fca:	601a      	str	r2, [r3, #0]
 8002fcc:	4804      	ldr	r0, [pc, #16]	; (8002fe0 <_ZN12FrontendHeap11getInstanceEv+0x30>)
 8002fce:	f01f fc2d 	bl	802282c <atexit>
        return instance;
 8002fd2:	4b02      	ldr	r3, [pc, #8]	; (8002fdc <_ZN12FrontendHeap11getInstanceEv+0x2c>)
    }
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	bd80      	pop	{r7, pc}
 8002fd8:	200042ac 	.word	0x200042ac
 8002fdc:	2000036c 	.word	0x2000036c
 8002fe0:	08002fa1 	.word	0x08002fa1

08002fe4 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b082      	sub	sp, #8
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
 8002fec:	4a05      	ldr	r2, [pc, #20]	; (8003004 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	601a      	str	r2, [r3, #0]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f7ff fd29 	bl	8002a4c <_ZN8touchgfx7MVPHeapD1Ev>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3708      	adds	r7, #8
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}
 8003004:	080242e0 	.word	0x080242e0

08003008 <_ZN16FrontendHeapBaseD0Ev>:
 8003008:	b580      	push	{r7, lr}
 800300a:	b082      	sub	sp, #8
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	6878      	ldr	r0, [r7, #4]
 8003012:	f7ff ffe7 	bl	8002fe4 <_ZN16FrontendHeapBaseD1Ev>
 8003016:	2114      	movs	r1, #20
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	f01f fbbe 	bl	802279a <_ZdlPvj>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	4618      	mov	r0, r3
 8003022:	3708      	adds	r7, #8
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}

08003028 <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    FrontendApplication app;
    Model model;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8003028:	b590      	push	{r4, r7, lr}
 800302a:	b085      	sub	sp, #20
 800302c:	af02      	add	r7, sp, #8
 800302e:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	f103 0114 	add.w	r1, r3, #20
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	f503 5277 	add.w	r2, r3, #15808	; 0x3dc0
 8003044:	3218      	adds	r2, #24
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	f503 5377 	add.w	r3, r3, #15808	; 0x3dc0
 800304c:	332c      	adds	r3, #44	; 0x2c
 800304e:	9300      	str	r3, [sp, #0]
 8003050:	4613      	mov	r3, r2
 8003052:	4622      	mov	r2, r4
 8003054:	f7ff ff8a 	bl	8002f6c <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 8003058:	4a1a      	ldr	r2, [pc, #104]	; (80030c4 <_ZN12FrontendHeapC1Ev+0x9c>)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	601a      	str	r2, [r3, #0]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	3314      	adds	r3, #20
 8003062:	4618      	mov	r0, r3
 8003064:	f000 f8d6 	bl	8003214 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	332c      	adds	r3, #44	; 0x2c
 800306c:	4618      	mov	r0, r3
 800306e:	f000 f905 	bl	800327c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	f503 5377 	add.w	r3, r3, #15808	; 0x3dc0
 8003078:	3318      	adds	r3, #24
 800307a:	4618      	mov	r0, r3
 800307c:	f000 f934 	bl	80032e8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	f503 5377 	add.w	r3, r3, #15808	; 0x3dc0
 8003086:	332c      	adds	r3, #44	; 0x2c
 8003088:	687a      	ldr	r2, [r7, #4]
 800308a:	f502 517c 	add.w	r1, r2, #16128	; 0x3f00
 800308e:	313c      	adds	r1, #60	; 0x3c
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	4618      	mov	r0, r3
 8003094:	f005 f9a0 	bl	80083d8 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	f503 537c 	add.w	r3, r3, #16128	; 0x3f00
 800309e:	333c      	adds	r3, #60	; 0x3c
 80030a0:	4618      	mov	r0, r3
 80030a2:	f005 f9af 	bl	8008404 <_ZN5ModelC1Ev>
    {
        gotoStartScreen(app);
 80030a6:	687a      	ldr	r2, [r7, #4]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f503 5377 	add.w	r3, r3, #15808	; 0x3dc0
 80030ae:	332c      	adds	r3, #44	; 0x2c
 80030b0:	4619      	mov	r1, r3
 80030b2:	4610      	mov	r0, r2
 80030b4:	f7ff ff4d 	bl	8002f52 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	4618      	mov	r0, r3
 80030bc:	370c      	adds	r7, #12
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd90      	pop	{r4, r7, pc}
 80030c2:	bf00      	nop
 80030c4:	08024230 	.word	0x08024230

080030c8 <_ZN8touchgfx8LCD24bppD1Ev>:
class LCD24bpp : public LCD
{
public:
    LCD24bpp();

    virtual ~LCD24bpp()
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b082      	sub	sp, #8
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
    {
 80030d0:	4a05      	ldr	r2, [pc, #20]	; (80030e8 <_ZN8touchgfx8LCD24bppD1Ev+0x20>)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	601a      	str	r2, [r3, #0]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	4618      	mov	r0, r3
 80030da:	f7ff fcd7 	bl	8002a8c <_ZN8touchgfx3LCDD1Ev>
    }
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	4618      	mov	r0, r3
 80030e2:	3708      	adds	r7, #8
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}
 80030e8:	08027aa8 	.word	0x08027aa8

080030ec <_ZN8touchgfx8LCD24bppD0Ev>:
    virtual ~LCD24bpp()
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b082      	sub	sp, #8
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
    }
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	f7ff ffe7 	bl	80030c8 <_ZN8touchgfx8LCD24bppD1Ev>
 80030fa:	2158      	movs	r1, #88	; 0x58
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	f01f fb4c 	bl	802279a <_ZdlPvj>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4618      	mov	r0, r3
 8003106:	3708      	adds	r7, #8
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}

0800310c <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : touchgfx::HAL(dma, display, tc, width, height)
 800310c:	b580      	push	{r7, lr}
 800310e:	b086      	sub	sp, #24
 8003110:	af02      	add	r7, sp, #8
 8003112:	60f8      	str	r0, [r7, #12]
 8003114:	60b9      	str	r1, [r7, #8]
 8003116:	607a      	str	r2, [r7, #4]
 8003118:	603b      	str	r3, [r7, #0]
 800311a:	68f8      	ldr	r0, [r7, #12]
 800311c:	8bbb      	ldrh	r3, [r7, #28]
 800311e:	9301      	str	r3, [sp, #4]
 8003120:	8b3b      	ldrh	r3, [r7, #24]
 8003122:	9300      	str	r3, [sp, #0]
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	68b9      	ldr	r1, [r7, #8]
 800312a:	f7ff fd93 	bl	8002c54 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 800312e:	4a04      	ldr	r2, [pc, #16]	; (8003140 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	601a      	str	r2, [r3, #0]
    }
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	4618      	mov	r0, r3
 8003138:	3710      	adds	r7, #16
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	08024424 	.word	0x08024424

08003144 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 8003144:	b580      	push	{r7, lr}
 8003146:	b086      	sub	sp, #24
 8003148:	af02      	add	r7, sp, #8
 800314a:	60f8      	str	r0, [r7, #12]
 800314c:	60b9      	str	r1, [r7, #8]
 800314e:	607a      	str	r2, [r7, #4]
 8003150:	603b      	str	r3, [r7, #0]
 8003152:	68f8      	ldr	r0, [r7, #12]
 8003154:	8bbb      	ldrh	r3, [r7, #28]
 8003156:	9301      	str	r3, [sp, #4]
 8003158:	8b3b      	ldrh	r3, [r7, #24]
 800315a:	9300      	str	r3, [sp, #0]
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	68b9      	ldr	r1, [r7, #8]
 8003162:	f7ff ffd3 	bl	800310c <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8003166:	4a04      	ldr	r2, [pc, #16]	; (8003178 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	601a      	str	r2, [r3, #0]
    }
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	4618      	mov	r0, r3
 8003170:	3710      	adds	r7, #16
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}
 8003176:	bf00      	nop
 8003178:	08024030 	.word	0x08024030

0800317c <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 800317c:	b480      	push	{r7}
 800317e:	b083      	sub	sp, #12
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
 8003184:	4a04      	ldr	r2, [pc, #16]	; (8003198 <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	601a      	str	r2, [r3, #0]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4618      	mov	r0, r3
 800318e:	370c      	adds	r7, #12
 8003190:	46bd      	mov	sp, r7
 8003192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003196:	4770      	bx	lr
 8003198:	08024018 	.word	0x08024018

0800319c <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 800319c:	b580      	push	{r7, lr}
 800319e:	b082      	sub	sp, #8
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	4618      	mov	r0, r3
 80031a8:	f7ff ffe8 	bl	800317c <_ZN8touchgfx15TouchControllerC1Ev>
 80031ac:	4a03      	ldr	r2, [pc, #12]	; (80031bc <_ZN20STM32TouchControllerC1Ev+0x20>)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	601a      	str	r2, [r3, #0]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4618      	mov	r0, r3
 80031b6:	3708      	adds	r7, #8
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}
 80031bc:	08024000 	.word	0x08024000

080031c0 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 800, 480);

void touchgfx_init()
{
 80031c0:	b590      	push	{r4, r7, lr}
 80031c2:	b085      	sub	sp, #20
 80031c4:	af02      	add	r7, sp, #8
  Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 80031c6:	f000 fbaf 	bl	8003928 <_ZN14BitmapDatabase11getInstanceEv>
 80031ca:	4604      	mov	r4, r0
 80031cc:	f000 fbb6 	bl	800393c <_ZN14BitmapDatabase15getInstanceSizeEv>
 80031d0:	4603      	mov	r3, r0
 80031d2:	4619      	mov	r1, r3
 80031d4:	2300      	movs	r3, #0
 80031d6:	9300      	str	r3, [sp, #0]
 80031d8:	2300      	movs	r3, #0
 80031da:	2200      	movs	r2, #0
 80031dc:	4620      	mov	r0, r4
 80031de:	f015 fd93 	bl	8018d08 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
  TypedText::registerTexts(&texts);
 80031e2:	4809      	ldr	r0, [pc, #36]	; (8003208 <touchgfx_init+0x48>)
 80031e4:	f7ff fbe2 	bl	80029ac <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
  Texts::setLanguage(0);
 80031e8:	2000      	movs	r0, #0
 80031ea:	f004 ffb5 	bl	8008158 <_ZN8touchgfx5Texts11setLanguageEt>

  FontManager::setFontProvider(&fontProvider);
 80031ee:	4807      	ldr	r0, [pc, #28]	; (800320c <touchgfx_init+0x4c>)
 80031f0:	f015 fcd8 	bl	8018ba4 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

  FrontendHeap& heap = FrontendHeap::getInstance();
 80031f4:	f7ff fedc 	bl	8002fb0 <_ZN12FrontendHeap11getInstanceEv>
 80031f8:	6078      	str	r0, [r7, #4]
  (void)heap; // we need to obtain the reference above to initialize the frontend heap.

  hal.initialize();
 80031fa:	4805      	ldr	r0, [pc, #20]	; (8003210 <touchgfx_init+0x50>)
 80031fc:	f7fe fe4e 	bl	8001e9c <_ZN11TouchGFXHAL10initializeEv>
}
 8003200:	bf00      	nop
 8003202:	370c      	adds	r7, #12
 8003204:	46bd      	mov	sp, r7
 8003206:	bd90      	pop	{r4, r7, pc}
 8003208:	20004f2c 	.word	0x20004f2c
 800320c:	20000008 	.word	0x20000008
 8003210:	20004f30 	.word	0x20004f30

08003214 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Constructs an empty Partition.
     */
    Partition() : AbstractPartition()
 8003214:	b580      	push	{r7, lr}
 8003216:	b082      	sub	sp, #8
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	4618      	mov	r0, r3
 8003220:	f00f f920 	bl	8012464 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8003224:	4a03      	ldr	r2, [pc, #12]	; (8003234 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	601a      	str	r2, [r3, #0]
    {
    }
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	4618      	mov	r0, r3
 800322e:	3708      	adds	r7, #8
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}
 8003234:	080242ac 	.word	0x080242ac

08003238 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
    /**
     * @fn virtual Partition::~Partition()
     *
     * @brief Destructor.
     */
    virtual ~Partition()
 8003238:	b580      	push	{r7, lr}
 800323a:	b082      	sub	sp, #8
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
    {
    }
 8003240:	4a05      	ldr	r2, [pc, #20]	; (8003258 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	601a      	str	r2, [r3, #0]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	4618      	mov	r0, r3
 800324a:	f00f f909 	bl	8012460 <_ZN8touchgfx17AbstractPartitionD1Ev>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	4618      	mov	r0, r3
 8003252:	3708      	adds	r7, #8
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}
 8003258:	080242ac 	.word	0x080242ac

0800325c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
    virtual ~Partition()
 800325c:	b580      	push	{r7, lr}
 800325e:	b082      	sub	sp, #8
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
    }
 8003264:	6878      	ldr	r0, [r7, #4]
 8003266:	f7ff ffe7 	bl	8003238 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800326a:	2118      	movs	r1, #24
 800326c:	6878      	ldr	r0, [r7, #4]
 800326e:	f01f fa94 	bl	802279a <_ZdlPvj>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4618      	mov	r0, r3
 8003276:	3708      	adds	r7, #8
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}

0800327c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
    Partition() : AbstractPartition()
 800327c:	b580      	push	{r7, lr}
 800327e:	b082      	sub	sp, #8
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	4618      	mov	r0, r3
 8003288:	f00f f8ec 	bl	8012464 <_ZN8touchgfx17AbstractPartitionC1Ev>
 800328c:	4a03      	ldr	r2, [pc, #12]	; (800329c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	601a      	str	r2, [r3, #0]
    }
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4618      	mov	r0, r3
 8003296:	3708      	adds	r7, #8
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}
 800329c:	08024278 	.word	0x08024278

080032a0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
    virtual ~Partition()
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b082      	sub	sp, #8
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
    }
 80032a8:	4a05      	ldr	r2, [pc, #20]	; (80032c0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	601a      	str	r2, [r3, #0]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4618      	mov	r0, r3
 80032b2:	f00f f8d5 	bl	8012460 <_ZN8touchgfx17AbstractPartitionD1Ev>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4618      	mov	r0, r3
 80032ba:	3708      	adds	r7, #8
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}
 80032c0:	08024278 	.word	0x08024278

080032c4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
    virtual ~Partition()
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b082      	sub	sp, #8
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
    }
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	f7ff ffe7 	bl	80032a0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80032d2:	f643 51ac 	movw	r1, #15788	; 0x3dac
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f01f fa5f 	bl	802279a <_ZdlPvj>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	4618      	mov	r0, r3
 80032e0:	3708      	adds	r7, #8
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}
	...

080032e8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>:
    Partition() : AbstractPartition()
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b082      	sub	sp, #8
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	4618      	mov	r0, r3
 80032f4:	f00f f8b6 	bl	8012464 <_ZN8touchgfx17AbstractPartitionC1Ev>
 80032f8:	4a03      	ldr	r2, [pc, #12]	; (8003308 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	601a      	str	r2, [r3, #0]
    }
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	4618      	mov	r0, r3
 8003302:	3708      	adds	r7, #8
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}
 8003308:	08024244 	.word	0x08024244

0800330c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
    virtual ~Partition()
 800330c:	b580      	push	{r7, lr}
 800330e:	b082      	sub	sp, #8
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
    }
 8003314:	4a05      	ldr	r2, [pc, #20]	; (800332c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	601a      	str	r2, [r3, #0]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4618      	mov	r0, r3
 800331e:	f00f f89f 	bl	8012460 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4618      	mov	r0, r3
 8003326:	3708      	adds	r7, #8
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}
 800332c:	08024244 	.word	0x08024244

08003330 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
    virtual ~Partition()
 8003330:	b580      	push	{r7, lr}
 8003332:	b082      	sub	sp, #8
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
    }
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	f7ff ffe7 	bl	800330c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 800333e:	2114      	movs	r1, #20
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	f01f fa2a 	bl	802279a <_ZdlPvj>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	4618      	mov	r0, r3
 800334a:	3708      	adds	r7, #8
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}

08003350 <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 8003350:	b580      	push	{r7, lr}
 8003352:	b082      	sub	sp, #8
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	4a11      	ldr	r2, [pc, #68]	; (80033a0 <_ZN12FrontendHeapD1Ev+0x50>)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	601a      	str	r2, [r3, #0]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	f503 5377 	add.w	r3, r3, #15808	; 0x3dc0
 8003364:	332c      	adds	r3, #44	; 0x2c
 8003366:	4618      	mov	r0, r3
 8003368:	f7ff fdbe 	bl	8002ee8 <_ZN19FrontendApplicationD1Ev>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	f503 5377 	add.w	r3, r3, #15808	; 0x3dc0
 8003372:	3318      	adds	r3, #24
 8003374:	4618      	mov	r0, r3
 8003376:	f7ff ffc9 	bl	800330c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	332c      	adds	r3, #44	; 0x2c
 800337e:	4618      	mov	r0, r3
 8003380:	f7ff ff8e 	bl	80032a0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	3314      	adds	r3, #20
 8003388:	4618      	mov	r0, r3
 800338a:	f7ff ff55 	bl	8003238 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4618      	mov	r0, r3
 8003392:	f7ff fe27 	bl	8002fe4 <_ZN16FrontendHeapBaseD1Ev>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4618      	mov	r0, r3
 800339a:	3708      	adds	r7, #8
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}
 80033a0:	08024230 	.word	0x08024230

080033a4 <_ZN12FrontendHeapD0Ev>:
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b082      	sub	sp, #8
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f7ff ffcf 	bl	8003350 <_ZN12FrontendHeapD1Ev>
 80033b2:	f44f 517d 	mov.w	r1, #16192	; 0x3f40
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f01f f9ef 	bl	802279a <_ZdlPvj>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	4618      	mov	r0, r3
 80033c0:	3708      	adds	r7, #8
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
	...

080033c8 <_Z41__static_initialization_and_destruction_0ii>:
  * this function from your GUI task.
  *
  * Note This function never returns
  */
  hal.taskEntry();
}
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b084      	sub	sp, #16
 80033cc:	af02      	add	r7, sp, #8
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	6039      	str	r1, [r7, #0]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d119      	bne.n	800340c <_Z41__static_initialization_and_destruction_0ii+0x44>
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80033de:	4293      	cmp	r3, r2
 80033e0:	d114      	bne.n	800340c <_Z41__static_initialization_and_destruction_0ii+0x44>
static STM32TouchController tc;
 80033e2:	4818      	ldr	r0, [pc, #96]	; (8003444 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80033e4:	f7ff feda 	bl	800319c <_ZN20STM32TouchControllerC1Ev>
static STM32F4DMA dma;
 80033e8:	4817      	ldr	r0, [pc, #92]	; (8003448 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80033ea:	f7fe ffc9 	bl	8002380 <_ZN10STM32F4DMAC1Ev>
static LCD24bpp display;
 80033ee:	4817      	ldr	r0, [pc, #92]	; (800344c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80033f0:	f017 feb0 	bl	801b154 <_ZN8touchgfx8LCD24bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 800, 480);
 80033f4:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80033f8:	9301      	str	r3, [sp, #4]
 80033fa:	f44f 7348 	mov.w	r3, #800	; 0x320
 80033fe:	9300      	str	r3, [sp, #0]
 8003400:	4b10      	ldr	r3, [pc, #64]	; (8003444 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8003402:	4a12      	ldr	r2, [pc, #72]	; (800344c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8003404:	4910      	ldr	r1, [pc, #64]	; (8003448 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8003406:	4812      	ldr	r0, [pc, #72]	; (8003450 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8003408:	f7ff fe9c 	bl	8003144 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d113      	bne.n	800343a <_Z41__static_initialization_and_destruction_0ii+0x72>
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003418:	4293      	cmp	r3, r2
 800341a:	d10e      	bne.n	800343a <_Z41__static_initialization_and_destruction_0ii+0x72>
 800341c:	480c      	ldr	r0, [pc, #48]	; (8003450 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800341e:	f7fe fda3 	bl	8001f68 <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 8003422:	480c      	ldr	r0, [pc, #48]	; (8003454 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8003424:	f000 f83a 	bl	800349c <_ZN23ApplicationFontProviderD1Ev>
static LCD24bpp display;
 8003428:	4808      	ldr	r0, [pc, #32]	; (800344c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800342a:	f7ff fe4d 	bl	80030c8 <_ZN8touchgfx8LCD24bppD1Ev>
static STM32F4DMA dma;
 800342e:	4806      	ldr	r0, [pc, #24]	; (8003448 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8003430:	f7fe ffd0 	bl	80023d4 <_ZN10STM32F4DMAD1Ev>
static STM32TouchController tc;
 8003434:	4803      	ldr	r0, [pc, #12]	; (8003444 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8003436:	f7fe fae5 	bl	8001a04 <_ZN20STM32TouchControllerD1Ev>
}
 800343a:	bf00      	nop
 800343c:	3708      	adds	r7, #8
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	200042b0 	.word	0x200042b0
 8003448:	200042b4 	.word	0x200042b4
 800344c:	20004ed4 	.word	0x20004ed4
 8003450:	20004f30 	.word	0x20004f30
 8003454:	20000008 	.word	0x20000008

08003458 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 *       three arguments of any type.
 *
 * @tparam dest_type The type of the class in which the member function resides.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8003458:	b580      	push	{r7, lr}
 800345a:	b082      	sub	sp, #8
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
 8003460:	4a05      	ldr	r2, [pc, #20]	; (8003478 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	601a      	str	r2, [r3, #0]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	4618      	mov	r0, r3
 800346a:	f7ff fb9d 	bl	8002ba8 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	4618      	mov	r0, r3
 8003472:	3708      	adds	r7, #8
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}
 8003478:	0802436c 	.word	0x0802436c

0800347c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 800347c:	b580      	push	{r7, lr}
 800347e:	b082      	sub	sp, #8
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	f7ff ffe7 	bl	8003458 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800348a:	2110      	movs	r1, #16
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	f01f f984 	bl	802279a <_ZdlPvj>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	4618      	mov	r0, r3
 8003496:	3708      	adds	r7, #8
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}

0800349c <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_30_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 800349c:	b580      	push	{r7, lr}
 800349e:	b082      	sub	sp, #8
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	4a05      	ldr	r2, [pc, #20]	; (80034bc <_ZN23ApplicationFontProviderD1Ev+0x20>)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	601a      	str	r2, [r3, #0]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	4618      	mov	r0, r3
 80034ae:	f7ff fa8d 	bl	80029cc <_ZN8touchgfx12FontProviderD1Ev>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	4618      	mov	r0, r3
 80034b6:	3708      	adds	r7, #8
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}
 80034bc:	080244d8 	.word	0x080244d8

080034c0 <_ZN23ApplicationFontProviderD0Ev>:
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b082      	sub	sp, #8
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f7ff ffe7 	bl	800349c <_ZN23ApplicationFontProviderD1Ev>
 80034ce:	2104      	movs	r1, #4
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	f01f f962 	bl	802279a <_ZdlPvj>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	4618      	mov	r0, r3
 80034da:	3708      	adds	r7, #8
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}

080034e0 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
     *
     * @return An uint16_t.
     *
     * @see touchgfx::AbstractPartition::capacity()
     */
    virtual uint16_t capacity() const
 80034e0:	b480      	push	{r7}
 80034e2:	b083      	sub	sp, #12
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 80034e8:	2301      	movs	r3, #1
    }
 80034ea:	4618      	mov	r0, r3
 80034ec:	370c      	adds	r7, #12
 80034ee:	46bd      	mov	sp, r7
 80034f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f4:	4770      	bx	lr

080034f6 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
     *
     * @return An uint32_t.
     *
     * @see touchgfx::AbstractPartition::element_size()
     */
    virtual uint32_t element_size()
 80034f6:	b480      	push	{r7}
 80034f8:	b083      	sub	sp, #12
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 80034fe:	230c      	movs	r3, #12
    }
 8003500:	4618      	mov	r0, r3
 8003502:	370c      	adds	r7, #12
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr

0800350c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:
     *
     * @return null if it fails, else a void*.
     *
     * @see touchgfx::AbstractPartition::element()
     */
    virtual void* element(uint16_t index)
 800350c:	b480      	push	{r7}
 800350e:	b083      	sub	sp, #12
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	460b      	mov	r3, r1
 8003516:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8003518:	887a      	ldrh	r2, [r7, #2]
 800351a:	4613      	mov	r3, r2
 800351c:	005b      	lsls	r3, r3, #1
 800351e:	4413      	add	r3, r2
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	3308      	adds	r3, #8
 8003524:	687a      	ldr	r2, [r7, #4]
 8003526:	4413      	add	r3, r2
    }
 8003528:	4618      	mov	r0, r3
 800352a:	370c      	adds	r7, #12
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr

08003534 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:
     *
     * @return null if it fails, else a void*.
     *
     * @see touchgfx::AbstractPartition::element()
     */
    virtual const void* element(uint16_t index) const
 8003534:	b480      	push	{r7}
 8003536:	b083      	sub	sp, #12
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	460b      	mov	r3, r1
 800353e:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8003540:	887a      	ldrh	r2, [r7, #2]
 8003542:	4613      	mov	r3, r2
 8003544:	005b      	lsls	r3, r3, #1
 8003546:	4413      	add	r3, r2
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	3308      	adds	r3, #8
 800354c:	687a      	ldr	r2, [r7, #4]
 800354e:	4413      	add	r3, r2
    }
 8003550:	4618      	mov	r0, r3
 8003552:	370c      	adds	r7, #12
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr

0800355c <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 800355c:	b480      	push	{r7}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8003564:	2301      	movs	r3, #1
    }
 8003566:	4618      	mov	r0, r3
 8003568:	370c      	adds	r7, #12
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr

08003572 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8003572:	b480      	push	{r7}
 8003574:	b083      	sub	sp, #12
 8003576:	af00      	add	r7, sp, #0
 8003578:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 800357a:	f643 53a4 	movw	r3, #15780	; 0x3da4
    }
 800357e:	4618      	mov	r0, r3
 8003580:	370c      	adds	r7, #12
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr

0800358a <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 800358a:	b480      	push	{r7}
 800358c:	b083      	sub	sp, #12
 800358e:	af00      	add	r7, sp, #0
 8003590:	6078      	str	r0, [r7, #4]
 8003592:	460b      	mov	r3, r1
 8003594:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8003596:	887b      	ldrh	r3, [r7, #2]
 8003598:	f643 52a4 	movw	r2, #15780	; 0x3da4
 800359c:	fb02 f303 	mul.w	r3, r2, r3
 80035a0:	3308      	adds	r3, #8
 80035a2:	687a      	ldr	r2, [r7, #4]
 80035a4:	4413      	add	r3, r2
    }
 80035a6:	4618      	mov	r0, r3
 80035a8:	370c      	adds	r7, #12
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr

080035b2 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 80035b2:	b480      	push	{r7}
 80035b4:	b083      	sub	sp, #12
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	6078      	str	r0, [r7, #4]
 80035ba:	460b      	mov	r3, r1
 80035bc:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80035be:	887b      	ldrh	r3, [r7, #2]
 80035c0:	f643 52a4 	movw	r2, #15780	; 0x3da4
 80035c4:	fb02 f303 	mul.w	r3, r2, r3
 80035c8:	3308      	adds	r3, #8
 80035ca:	687a      	ldr	r2, [r7, #4]
 80035cc:	4413      	add	r3, r2
    }
 80035ce:	4618      	mov	r0, r3
 80035d0:	370c      	adds	r7, #12
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr

080035da <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 80035da:	b480      	push	{r7}
 80035dc:	b083      	sub	sp, #12
 80035de:	af00      	add	r7, sp, #0
 80035e0:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 80035e2:	2301      	movs	r3, #1
    }
 80035e4:	4618      	mov	r0, r3
 80035e6:	370c      	adds	r7, #12
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr

080035f0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 80035f0:	b480      	push	{r7}
 80035f2:	b083      	sub	sp, #12
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 80035f8:	2310      	movs	r3, #16
    }
 80035fa:	4618      	mov	r0, r3
 80035fc:	370c      	adds	r7, #12
 80035fe:	46bd      	mov	sp, r7
 8003600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003604:	4770      	bx	lr

08003606 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8003606:	b480      	push	{r7}
 8003608:	b083      	sub	sp, #12
 800360a:	af00      	add	r7, sp, #0
 800360c:	6078      	str	r0, [r7, #4]
 800360e:	460b      	mov	r3, r1
 8003610:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8003612:	887b      	ldrh	r3, [r7, #2]
 8003614:	011b      	lsls	r3, r3, #4
 8003616:	3308      	adds	r3, #8
 8003618:	687a      	ldr	r2, [r7, #4]
 800361a:	4413      	add	r3, r2
    }
 800361c:	4618      	mov	r0, r3
 800361e:	370c      	adds	r7, #12
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr

08003628 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8003628:	b480      	push	{r7}
 800362a:	b083      	sub	sp, #12
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	460b      	mov	r3, r1
 8003632:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8003634:	887b      	ldrh	r3, [r7, #2]
 8003636:	011b      	lsls	r3, r3, #4
 8003638:	3308      	adds	r3, #8
 800363a:	687a      	ldr	r2, [r7, #4]
 800363c:	4413      	add	r3, r2
    }
 800363e:	4618      	mov	r0, r3
 8003640:	370c      	adds	r7, #12
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr

0800364a <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:
     * @brief Calls the member function.
     *
     *        Calls the member function. Do not call execute unless isValid() returns true (ie.
     *        a pointer to the object and the function has been set).
     */
    virtual void execute()
 800364a:	b580      	push	{r7, lr}
 800364c:	b082      	sub	sp, #8
 800364e:	af00      	add	r7, sp, #0
 8003650:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun_0)();
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	68d2      	ldr	r2, [r2, #12]
 800365a:	1052      	asrs	r2, r2, #1
 800365c:	1899      	adds	r1, r3, r2
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	68db      	ldr	r3, [r3, #12]
 8003662:	f003 0301 	and.w	r3, r3, #1
 8003666:	2b00      	cmp	r3, #0
 8003668:	d102      	bne.n	8003670 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	e00a      	b.n	8003686 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	687a      	ldr	r2, [r7, #4]
 8003676:	68d2      	ldr	r2, [r2, #12]
 8003678:	1052      	asrs	r2, r2, #1
 800367a:	4413      	add	r3, r2
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	6892      	ldr	r2, [r2, #8]
 8003682:	4413      	add	r3, r2
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4608      	mov	r0, r1
 8003688:	4798      	blx	r3
    }
 800368a:	bf00      	nop
 800368c:	3708      	adds	r7, #8
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}

08003692 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
     *
     *        Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 8003692:	b480      	push	{r7}
 8003694:	b083      	sub	sp, #12
 8003696:	af00      	add	r7, sp, #0
 8003698:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun_0 != 0);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d010      	beq.n	80036c4 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d107      	bne.n	80036ba <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	68db      	ldr	r3, [r3, #12]
 80036ae:	f003 0301 	and.w	r3, r3, #1
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d101      	bne.n	80036ba <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 80036b6:	2301      	movs	r3, #1
 80036b8:	e000      	b.n	80036bc <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 80036ba:	2300      	movs	r3, #0
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d001      	beq.n	80036c4 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 80036c0:	2301      	movs	r3, #1
 80036c2:	e000      	b.n	80036c6 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 80036c4:	2300      	movs	r3, #0
    }
 80036c6:	4618      	mov	r0, r3
 80036c8:	370c      	adds	r7, #12
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr

080036d2 <_GLOBAL__sub_I_touchgfx_init>:
 80036d2:	b580      	push	{r7, lr}
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80036da:	2001      	movs	r0, #1
 80036dc:	f7ff fe74 	bl	80033c8 <_Z41__static_initialization_and_destruction_0ii>
 80036e0:	bd80      	pop	{r7, pc}

080036e2 <_GLOBAL__sub_D_touchgfx_init>:
 80036e2:	b580      	push	{r7, lr}
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80036ea:	2000      	movs	r0, #0
 80036ec:	f7ff fe6c 	bl	80033c8 <_Z41__static_initialization_and_destruction_0ii>
 80036f0:	bd80      	pop	{r7, pc}

080036f2 <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>:
    void lockDMAToFrontPorch(bool enableLock)
 80036f2:	b480      	push	{r7}
 80036f4:	b083      	sub	sp, #12
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]
 80036fa:	460b      	mov	r3, r1
 80036fc:	70fb      	strb	r3, [r7, #3]
        lockDMAToPorch = enableLock;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	78fa      	ldrb	r2, [r7, #3]
 8003702:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
    }
 8003706:	bf00      	nop
 8003708:	370c      	adds	r7, #12
 800370a:	46bd      	mov	sp, r7
 800370c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003710:	4770      	bx	lr
	...

08003714 <__NVIC_EnableIRQ>:
{
 8003714:	b480      	push	{r7}
 8003716:	b083      	sub	sp, #12
 8003718:	af00      	add	r7, sp, #0
 800371a:	4603      	mov	r3, r0
 800371c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800371e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003722:	2b00      	cmp	r3, #0
 8003724:	db0d      	blt.n	8003742 <__NVIC_EnableIRQ+0x2e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800372a:	b2db      	uxtb	r3, r3
 800372c:	f003 021f 	and.w	r2, r3, #31
 8003730:	4907      	ldr	r1, [pc, #28]	; (8003750 <__NVIC_EnableIRQ+0x3c>)
 8003732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003736:	095b      	lsrs	r3, r3, #5
 8003738:	2001      	movs	r0, #1
 800373a:	fa00 f202 	lsl.w	r2, r0, r2
 800373e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003742:	bf00      	nop
 8003744:	370c      	adds	r7, #12
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr
 800374e:	bf00      	nop
 8003750:	e000e100 	.word	0xe000e100

08003754 <__NVIC_DisableIRQ>:
{
 8003754:	b480      	push	{r7}
 8003756:	b083      	sub	sp, #12
 8003758:	af00      	add	r7, sp, #0
 800375a:	4603      	mov	r3, r0
 800375c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800375e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003762:	2b00      	cmp	r3, #0
 8003764:	db12      	blt.n	800378c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800376a:	b2db      	uxtb	r3, r3
 800376c:	f003 021f 	and.w	r2, r3, #31
 8003770:	4909      	ldr	r1, [pc, #36]	; (8003798 <__NVIC_DisableIRQ+0x44>)
 8003772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003776:	095b      	lsrs	r3, r3, #5
 8003778:	2001      	movs	r0, #1
 800377a:	fa00 f202 	lsl.w	r2, r0, r2
 800377e:	3320      	adds	r3, #32
 8003780:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003784:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003788:	f3bf 8f6f 	isb	sy
}
 800378c:	bf00      	nop
 800378e:	370c      	adds	r7, #12
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr
 8003798:	e000e100 	.word	0xe000e100

0800379c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800379c:	b480      	push	{r7}
 800379e:	b083      	sub	sp, #12
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	4603      	mov	r3, r0
 80037a4:	6039      	str	r1, [r7, #0]
 80037a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	db0c      	blt.n	80037ca <__NVIC_SetPriority+0x2e>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	4a0e      	ldr	r2, [pc, #56]	; (80037f0 <__NVIC_SetPriority+0x54>)
 80037b6:	f997 1007 	ldrsb.w	r1, [r7, #7]
 80037ba:	4608      	mov	r0, r1
 80037bc:	011b      	lsls	r3, r3, #4
 80037be:	b2d9      	uxtb	r1, r3
 80037c0:	1813      	adds	r3, r2, r0
 80037c2:	460a      	mov	r2, r1
 80037c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037c8:	e00c      	b.n	80037e4 <__NVIC_SetPriority+0x48>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	b2da      	uxtb	r2, r3
 80037ce:	4909      	ldr	r1, [pc, #36]	; (80037f4 <__NVIC_SetPriority+0x58>)
 80037d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	f003 030f 	and.w	r3, r3, #15
 80037da:	3b04      	subs	r3, #4
 80037dc:	0112      	lsls	r2, r2, #4
 80037de:	b2d2      	uxtb	r2, r2
 80037e0:	440b      	add	r3, r1
 80037e2:	761a      	strb	r2, [r3, #24]
}
 80037e4:	bf00      	nop
 80037e6:	370c      	adds	r7, #12
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr
 80037f0:	e000e100 	.word	0xe000e100
 80037f4:	e000ed00 	.word	0xe000ed00

080037f8 <_ZN20TouchGFXGeneratedHAL10initializeEv>:

#include <TouchGFXGeneratedHAL.hpp>
#include "stm32f4xx.h"

void TouchGFXGeneratedHAL::initialize()
{
 80037f8:	b5b0      	push	{r4, r5, r7, lr}
 80037fa:	b082      	sub	sp, #8
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	4618      	mov	r0, r3
 8003804:	f010 fb58 	bl	8013eb8 <_ZN8touchgfx3HAL10initializeEv>

    registerEventListener(*(touchgfx::Application::getInstance()));
 8003808:	687d      	ldr	r5, [r7, #4]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	334c      	adds	r3, #76	; 0x4c
 8003810:	681c      	ldr	r4, [r3, #0]
 8003812:	f013 f8af 	bl	8016974 <_ZN8touchgfx11Application11getInstanceEv>
 8003816:	4603      	mov	r3, r0
 8003818:	4619      	mov	r1, r3
 800381a:	4628      	mov	r0, r5
 800381c:	47a0      	blx	r4

    setFrameBufferStartAddresses((void*)0xC0000000, (void*)0, (void*)0);
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	3374      	adds	r3, #116	; 0x74
 8003826:	681c      	ldr	r4, [r3, #0]
 8003828:	2300      	movs	r3, #0
 800382a:	2200      	movs	r2, #0
 800382c:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8003830:	47a0      	blx	r4
     * Set whether the DMA transfers are locked to the TFT update cycle. If
     * locked, DMA transfer will not begin until the TFT controller has finished
     * updating the display. If not locked, DMA transfers will begin as soon as
     * possible. Default is true (DMA is locked with TFT).
     */
    lockDMAToFrontPorch(true);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2101      	movs	r1, #1
 8003836:	4618      	mov	r0, r3
 8003838:	f7ff ff5b 	bl	80036f2 <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>
}
 800383c:	bf00      	nop
 800383e:	3708      	adds	r7, #8
 8003840:	46bd      	mov	sp, r7
 8003842:	bdb0      	pop	{r4, r5, r7, pc}

08003844 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b082      	sub	sp, #8
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 800384c:	2109      	movs	r1, #9
 800384e:	205a      	movs	r0, #90	; 0x5a
 8003850:	f7ff ffa4 	bl	800379c <__NVIC_SetPriority>
}
 8003854:	bf00      	nop
 8003856:	3708      	adds	r7, #8
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}

0800385c <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b082      	sub	sp, #8
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 8003864:	205a      	movs	r0, #90	; 0x5a
 8003866:	f7ff ff55 	bl	8003714 <__NVIC_EnableIRQ>
}
 800386a:	bf00      	nop
 800386c:	3708      	adds	r7, #8
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}

08003872 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 8003872:	b580      	push	{r7, lr}
 8003874:	b082      	sub	sp, #8
 8003876:	af00      	add	r7, sp, #0
 8003878:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 800387a:	205a      	movs	r0, #90	; 0x5a
 800387c:	f7ff ff6a 	bl	8003754 <__NVIC_DisableIRQ>
}
 8003880:	bf00      	nop
 8003882:	3708      	adds	r7, #8
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}

08003888 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 8003888:	b480      	push	{r7}
 800388a:	b083      	sub	sp, #12
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
}
 8003890:	bf00      	nop
 8003892:	370c      	adds	r7, #12
 8003894:	46bd      	mov	sp, r7
 8003896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389a:	4770      	bx	lr

0800389c <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:
    fbPtr += rect.y * lcd().framebufferStride() + rect.x * 3;
    return fbPtr;
}

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 800389c:	b480      	push	{r7}
 800389e:	b083      	sub	sp, #12
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
    //getTFTFrameBuffer() not used for selected Frame Buffer Strategy
    return 0;
 80038a4:	2300      	movs	r3, #0
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	370c      	adds	r7, #12
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr

080038b2 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 80038b2:	b480      	push	{r7}
 80038b4:	b083      	sub	sp, #12
 80038b6:	af00      	add	r7, sp, #0
 80038b8:	6078      	str	r0, [r7, #4]
 80038ba:	6039      	str	r1, [r7, #0]
    //setTFTFrameBuffer() not used for selected display interface
}
 80038bc:	bf00      	nop
 80038be:	370c      	adds	r7, #12
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr

080038c8 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b082      	sub	sp, #8
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6839      	ldr	r1, [r7, #0]
 80038d6:	4618      	mov	r0, r3
 80038d8:	f00f ffff 	bl	80138da <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
}
 80038dc:	bf00      	nop
 80038de:	3708      	adds	r7, #8
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}

080038e4 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b082      	sub	sp, #8
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	460b      	mov	r3, r1
 80038ee:	807b      	strh	r3, [r7, #2]
    switch (typography)
 80038f0:	887b      	ldrh	r3, [r7, #2]
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d008      	beq.n	8003908 <_ZN23ApplicationFontProvider7getFontEt+0x24>
 80038f6:	2b02      	cmp	r3, #2
 80038f8:	d00b      	beq.n	8003912 <_ZN23ApplicationFontProvider7getFontEt+0x2e>
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d10e      	bne.n	800391c <_ZN23ApplicationFontProvider7getFontEt+0x38>
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 80038fe:	f004 fca3 	bl	8008248 <_ZN17TypedTextDatabase8getFontsEv>
 8003902:	4603      	mov	r3, r0
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	e00a      	b.n	800391e <_ZN23ApplicationFontProvider7getFontEt+0x3a>
    case Typography::LARGE:
        // verdana_30_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 8003908:	f004 fc9e 	bl	8008248 <_ZN17TypedTextDatabase8getFontsEv>
 800390c:	4603      	mov	r3, r0
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	e005      	b.n	800391e <_ZN23ApplicationFontProvider7getFontEt+0x3a>
    case Typography::SMALL:
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 8003912:	f004 fc99 	bl	8008248 <_ZN17TypedTextDatabase8getFontsEv>
 8003916:	4603      	mov	r3, r0
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	e000      	b.n	800391e <_ZN23ApplicationFontProvider7getFontEt+0x3a>
    default:
        return 0;
 800391c:	2300      	movs	r3, #0
    }
}
 800391e:	4618      	mov	r0, r3
 8003920:	3708      	adds	r7, #8
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}
	...

08003928 <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 8003928:	b480      	push	{r7}
 800392a:	af00      	add	r7, sp, #0
    return bitmap_database;
 800392c:	4b02      	ldr	r3, [pc, #8]	; (8003938 <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 800392e:	4618      	mov	r0, r3
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr
 8003938:	080244e4 	.word	0x080244e4

0800393c <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 800393c:	b480      	push	{r7}
 800393e:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 8003940:	2309      	movs	r3, #9
}
 8003942:	4618      	mov	r0, r3
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr

0800394c <_ZN8touchgfx4FontD1Ev>:
 *        It provides utility functions such as obtaining string width and font height.
 */
class Font
{
public:
    virtual ~Font() { }
 800394c:	b480      	push	{r7}
 800394e:	b083      	sub	sp, #12
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	4a04      	ldr	r2, [pc, #16]	; (8003968 <_ZN8touchgfx4FontD1Ev+0x1c>)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	601a      	str	r2, [r3, #0]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	4618      	mov	r0, r3
 800395e:	370c      	adds	r7, #12
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr
 8003968:	08026920 	.word	0x08026920

0800396c <_ZN8touchgfx4FontD0Ev>:
 800396c:	b580      	push	{r7, lr}
 800396e:	b082      	sub	sp, #8
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	f7ff ffe9 	bl	800394c <_ZN8touchgfx4FontD1Ev>
 800397a:	2110      	movs	r1, #16
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	f01e ff0c 	bl	802279a <_ZdlPvj>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	4618      	mov	r0, r3
 8003986:	3708      	adds	r7, #8
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}

0800398c <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getGlyph
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 800398c:	b590      	push	{r4, r7, lr}
 800398e:	b087      	sub	sp, #28
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
 8003994:	460b      	mov	r3, r1
 8003996:	807b      	strh	r3, [r7, #2]
    {
        const uint8_t* dummyPixelDataPointer = 0;
 8003998:	2300      	movs	r3, #0
 800399a:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 800399c:	2300      	movs	r3, #0
 800399e:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	3308      	adds	r3, #8
 80039a6:	681c      	ldr	r4, [r3, #0]
 80039a8:	f107 030f 	add.w	r3, r7, #15
 80039ac:	f107 0210 	add.w	r2, r7, #16
 80039b0:	8879      	ldrh	r1, [r7, #2]
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	47a0      	blx	r4
 80039b6:	6178      	str	r0, [r7, #20]
        return glyph;
 80039b8:	697b      	ldr	r3, [r7, #20]
    }
 80039ba:	4618      	mov	r0, r3
 80039bc:	371c      	adds	r7, #28
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd90      	pop	{r4, r7, pc}

080039c2 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     *        character, use the glyph for the character returned by this function. If 0 (zero)
     *        is returned, there is no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 80039c2:	b480      	push	{r7}
 80039c4:	b083      	sub	sp, #12
 80039c6:	af00      	add	r7, sp, #0
 80039c8:	6078      	str	r0, [r7, #4]
    {
        return falllbackCharacter;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	895b      	ldrh	r3, [r3, #10]
    }
 80039ce:	4618      	mov	r0, r3
 80039d0:	370c      	adds	r7, #12
 80039d2:	46bd      	mov	sp, r7
 80039d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d8:	4770      	bx	lr

080039da <_ZNK8touchgfx4Font15getEllipsisCharEv>:
    *        Gets ellipsis character for the given font. This is the character which is used
    *        when truncating long lines.
    *
    * @return The ellipsis character for the typography.
    */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 80039da:	b480      	push	{r7}
 80039dc:	b083      	sub	sp, #12
 80039de:	af00      	add	r7, sp, #0
 80039e0:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	899b      	ldrh	r3, [r3, #12]
    }
 80039e6:	4618      	mov	r0, r3
 80039e8:	370c      	adds	r7, #12
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr

080039f2 <_ZNK8touchgfx4Font13getFontHeightEv>:
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     *
     * @return The height in pixels of this font.
     */
    virtual uint16_t getFontHeight() const
 80039f2:	b480      	push	{r7}
 80039f4:	b083      	sub	sp, #12
 80039f6:	af00      	add	r7, sp, #0
 80039f8:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	889b      	ldrh	r3, [r3, #4]
    }
 80039fe:	4618      	mov	r0, r3
 8003a00:	370c      	adds	r7, #12
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr

08003a0a <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     *        into account that certain characters (eg 'g') have pixels below the baseline,
     *        thus making the text height larger than the font height.
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    virtual uint16_t getMinimumTextHeight() const
 8003a0a:	b480      	push	{r7}
 8003a0c:	b083      	sub	sp, #12
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	6078      	str	r0, [r7, #4]
    {
        return fontHeight + pixelsBelowBaseline;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	889a      	ldrh	r2, [r3, #4]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	799b      	ldrb	r3, [r3, #6]
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	4413      	add	r3, r2
 8003a1e:	b29b      	uxth	r3, r3
    }
 8003a20:	4618      	mov	r0, r3
 8003a22:	370c      	adds	r7, #12
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr

08003a2c <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     *        Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    virtual uint8_t getBitsPerPixel() const
 8003a2c:	b480      	push	{r7}
 8003a2e:	b083      	sub	sp, #12
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	79db      	ldrb	r3, [r3, #7]
 8003a38:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8003a3c:	b2db      	uxtb	r3, r3
    }
 8003a3e:	4618      	mov	r0, r3
 8003a40:	370c      	adds	r7, #12
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr

08003a4a <_ZNK8touchgfx4Font15getDataFormatA4Ev>:
     *
     *        Are the glyphs saved using ST A4 format.
     *
     * @return True if the font is stored using A4 format, false otherwise.
     */
    virtual uint8_t getDataFormatA4() const
 8003a4a:	b480      	push	{r7}
 8003a4c:	b083      	sub	sp, #12
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	6078      	str	r0, [r7, #4]
    {
        return a4;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	79db      	ldrb	r3, [r3, #7]
 8003a56:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003a5a:	b2db      	uxtb	r3, r3
    }
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	370c      	adds	r7, #12
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr

08003a68 <_ZN8touchgfx9ConstFontD1Ev>:
 * @note Pure virtual class. Create an application-
 *          specific implementation of getPixelData.
 *
 * @see Font
 */
class ConstFont : public Font
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b082      	sub	sp, #8
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
 8003a70:	4a05      	ldr	r2, [pc, #20]	; (8003a88 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	601a      	str	r2, [r3, #0]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f7ff ff67 	bl	800394c <_ZN8touchgfx4FontD1Ev>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4618      	mov	r0, r3
 8003a82:	3708      	adds	r7, #8
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}
 8003a88:	080269d8 	.word	0x080269d8

08003a8c <_ZN8touchgfx9ConstFontD0Ev>:
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b082      	sub	sp, #8
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	f7ff ffe7 	bl	8003a68 <_ZN8touchgfx9ConstFontD1Ev>
 8003a9a:	2118      	movs	r1, #24
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f01e fe7c 	bl	802279a <_ZdlPvj>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	3708      	adds	r7, #8
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}

08003aac <_ZN8touchgfx13GeneratedFontD1Ev>:
 *        An GeneratedFont has both glyph table and glyph data placed in a flash which
 *        supports random access read (i.e. not a NAND flash)
 *
 * @see ConstFont
 */
class GeneratedFont : public ConstFont
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b082      	sub	sp, #8
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
 8003ab4:	4a05      	ldr	r2, [pc, #20]	; (8003acc <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	601a      	str	r2, [r3, #0]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	4618      	mov	r0, r3
 8003abe:	f7ff ffd3 	bl	8003a68 <_ZN8touchgfx9ConstFontD1Ev>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	3708      	adds	r7, #8
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}
 8003acc:	08024714 	.word	0x08024714

08003ad0 <_ZN8touchgfx13GeneratedFontD0Ev>:
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b082      	sub	sp, #8
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	f7ff ffe7 	bl	8003aac <_ZN8touchgfx13GeneratedFontD1Ev>
 8003ade:	2124      	movs	r1, #36	; 0x24
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f01e fe5a 	bl	802279a <_ZdlPvj>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4618      	mov	r0, r3
 8003aea:	3708      	adds	r7, #8
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}

08003af0 <_ZNK8touchgfx9TypedText7getFontEv>:
    const Font* getFont() const
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b082      	sub	sp, #8
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
        assertValid();
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f000 f82d 	bl	8003b58 <_ZNK8touchgfx9TypedText11assertValidEv>
        return fonts[typedTexts[typedTextId].fontIdx];
 8003afe:	4b08      	ldr	r3, [pc, #32]	; (8003b20 <_ZNK8touchgfx9TypedText7getFontEv+0x30>)
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	4b08      	ldr	r3, [pc, #32]	; (8003b24 <_ZNK8touchgfx9TypedText7getFontEv+0x34>)
 8003b04:	6819      	ldr	r1, [r3, #0]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	881b      	ldrh	r3, [r3, #0]
 8003b0a:	005b      	lsls	r3, r3, #1
 8003b0c:	440b      	add	r3, r1
 8003b0e:	781b      	ldrb	r3, [r3, #0]
 8003b10:	009b      	lsls	r3, r3, #2
 8003b12:	4413      	add	r3, r2
 8003b14:	681b      	ldr	r3, [r3, #0]
    }
 8003b16:	4618      	mov	r0, r3
 8003b18:	3708      	adds	r7, #8
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
 8003b1e:	bf00      	nop
 8003b20:	2000d23c 	.word	0x2000d23c
 8003b24:	2000d234 	.word	0x2000d234

08003b28 <_ZNK8touchgfx9TypedText16getTextDirectionEv>:
    TextDirection getTextDirection() const
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b082      	sub	sp, #8
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
        assertValid();
 8003b30:	6878      	ldr	r0, [r7, #4]
 8003b32:	f000 f811 	bl	8003b58 <_ZNK8touchgfx9TypedText11assertValidEv>
        return typedTexts[typedTextId].direction;
 8003b36:	4b07      	ldr	r3, [pc, #28]	; (8003b54 <_ZNK8touchgfx9TypedText16getTextDirectionEv+0x2c>)
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	881b      	ldrh	r3, [r3, #0]
 8003b3e:	005b      	lsls	r3, r3, #1
 8003b40:	4413      	add	r3, r2
 8003b42:	785b      	ldrb	r3, [r3, #1]
 8003b44:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8003b48:	b2db      	uxtb	r3, r3
    }
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3708      	adds	r7, #8
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}
 8003b52:	bf00      	nop
 8003b54:	2000d234 	.word	0x2000d234

08003b58 <_ZNK8touchgfx9TypedText11assertValidEv>:

private:
    void assertValid() const
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b082      	sub	sp, #8
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
    {
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8003b60:	4b0c      	ldr	r3, [pc, #48]	; (8003b94 <_ZNK8touchgfx9TypedText11assertValidEv+0x3c>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d105      	bne.n	8003b74 <_ZNK8touchgfx9TypedText11assertValidEv+0x1c>
 8003b68:	4b0b      	ldr	r3, [pc, #44]	; (8003b98 <_ZNK8touchgfx9TypedText11assertValidEv+0x40>)
 8003b6a:	4a0c      	ldr	r2, [pc, #48]	; (8003b9c <_ZNK8touchgfx9TypedText11assertValidEv+0x44>)
 8003b6c:	21de      	movs	r1, #222	; 0xde
 8003b6e:	480c      	ldr	r0, [pc, #48]	; (8003ba0 <_ZNK8touchgfx9TypedText11assertValidEv+0x48>)
 8003b70:	f01e fe3e 	bl	80227f0 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	881a      	ldrh	r2, [r3, #0]
 8003b78:	4b0a      	ldr	r3, [pc, #40]	; (8003ba4 <_ZNK8touchgfx9TypedText11assertValidEv+0x4c>)
 8003b7a:	881b      	ldrh	r3, [r3, #0]
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d305      	bcc.n	8003b8c <_ZNK8touchgfx9TypedText11assertValidEv+0x34>
 8003b80:	4b09      	ldr	r3, [pc, #36]	; (8003ba8 <_ZNK8touchgfx9TypedText11assertValidEv+0x50>)
 8003b82:	4a06      	ldr	r2, [pc, #24]	; (8003b9c <_ZNK8touchgfx9TypedText11assertValidEv+0x44>)
 8003b84:	21df      	movs	r1, #223	; 0xdf
 8003b86:	4806      	ldr	r0, [pc, #24]	; (8003ba0 <_ZNK8touchgfx9TypedText11assertValidEv+0x48>)
 8003b88:	f01e fe32 	bl	80227f0 <__assert_func>
    }
 8003b8c:	bf00      	nop
 8003b8e:	3708      	adds	r7, #8
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}
 8003b94:	2000d234 	.word	0x2000d234
 8003b98:	08023928 	.word	0x08023928
 8003b9c:	08024598 	.word	0x08024598
 8003ba0:	0802396c 	.word	0x0802396c
 8003ba4:	2000d238 	.word	0x2000d238
 8003ba8:	080239b4 	.word	0x080239b4

08003bac <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8003bac:	b480      	push	{r7}
 8003bae:	b083      	sub	sp, #12
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
 8003bb4:	6039      	str	r1, [r7, #0]
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	4618      	mov	r0, r3
 8003bba:	370c      	adds	r7, #12
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr

08003bc4 <_ZN8touchgfx10TransitionC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Constructs the Transition.
     */
    Transition() :
 8003bc4:	b480      	push	{r7}
 8003bc6:	b083      	sub	sp, #12
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
        screenContainer(0), done(false)
 8003bcc:	4a07      	ldr	r2, [pc, #28]	; (8003bec <_ZN8touchgfx10TransitionC1Ev+0x28>)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	601a      	str	r2, [r3, #0]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	605a      	str	r2, [r3, #4]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	721a      	strb	r2, [r3, #8]
    {
    }
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	4618      	mov	r0, r3
 8003be2:	370c      	adds	r7, #12
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr
 8003bec:	080245f0 	.word	0x080245f0

08003bf0 <_ZN8touchgfx10TransitionD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Transition()
 8003bf0:	b480      	push	{r7}
 8003bf2:	b083      	sub	sp, #12
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
    {
 8003bf8:	4a04      	ldr	r2, [pc, #16]	; (8003c0c <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	601a      	str	r2, [r3, #0]
    }
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	4618      	mov	r0, r3
 8003c02:	370c      	adds	r7, #12
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr
 8003c0c:	080245f0 	.word	0x080245f0

08003c10 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b082      	sub	sp, #8
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
    }
 8003c18:	6878      	ldr	r0, [r7, #4]
 8003c1a:	f7ff ffe9 	bl	8003bf0 <_ZN8touchgfx10TransitionD1Ev>
 8003c1e:	210c      	movs	r1, #12
 8003c20:	6878      	ldr	r0, [r7, #4]
 8003c22:	f01e fdba 	bl	802279a <_ZdlPvj>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3708      	adds	r7, #8
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}

08003c30 <_ZN8touchgfx10Transition15handleTickEventEv>:
     *
     * @brief Called for every tick when transitioning.
     *
     *        Called for every tick when transitioning. Base does nothing.
     */
    virtual void handleTickEvent() { }
 8003c30:	b480      	push	{r7}
 8003c32:	b083      	sub	sp, #12
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
 8003c38:	bf00      	nop
 8003c3a:	370c      	adds	r7, #12
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c42:	4770      	bx	lr

08003c44 <_ZN8touchgfx10Transition8tearDownEv>:
     * @brief Tears down the Animation.
     *
     *        Tears down the Animation. Called before the d.tor. when the application changes
     *        the transition. Base version does nothing.
     */
    virtual void tearDown() { }
 8003c44:	b480      	push	{r7}
 8003c46:	b083      	sub	sp, #12
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	bf00      	nop
 8003c4e:	370c      	adds	r7, #12
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr

08003c58 <_ZN8touchgfx10Transition4initEv>:
     * @brief Initializes the transition.
     *
     *        Initializes the transition. Called after the c.tor. when the application changes
     *        the transition. Base version does nothing.
     */
    virtual void init() { }
 8003c58:	b480      	push	{r7}
 8003c5a:	b083      	sub	sp, #12
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
 8003c60:	bf00      	nop
 8003c62:	370c      	adds	r7, #12
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr

08003c6c <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *        Sets the screen container. Is used by Screen to enable the transition to access
     *        the container.
     *
     * @param [in] cont The container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 8003c6c:	b480      	push	{r7}
 8003c6e:	b083      	sub	sp, #12
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
 8003c74:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	683a      	ldr	r2, [r7, #0]
 8003c7a:	605a      	str	r2, [r3, #4]
    }
 8003c7c:	bf00      	nop
 8003c7e:	370c      	adds	r7, #12
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr

08003c88 <_ZN8touchgfx14MVPApplicationC1Ev>:
    MVPApplication() :
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b082      	sub	sp, #8
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
        pendingScreenTransitionCallback(0)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	4618      	mov	r0, r3
 8003c94:	f012 fed6 	bl	8016a44 <_ZN8touchgfx11ApplicationC1Ev>
 8003c98:	4a09      	ldr	r2, [pc, #36]	; (8003cc0 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	601a      	str	r2, [r3, #0]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
        instance = this;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	4a04      	ldr	r2, [pc, #16]	; (8003cc4 <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 8003cb2:	6013      	str	r3, [r2, #0]
    }
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3708      	adds	r7, #8
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}
 8003cbe:	bf00      	nop
 8003cc0:	08024384 	.word	0x08024384
 8003cc4:	2000d230 	.word	0x2000d230

08003cc8 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>:
 * @param [in] currentScreen    If non-null, the current screen.
 * @param [in] currentPresenter If non-null, the current presenter.
 * @param [in] currentTrans     If non-null, the current transaction.
 */
static inline void prepareTransition(Screen** currentScreen, Presenter** currentPresenter, Transition** currentTrans)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b084      	sub	sp, #16
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	60f8      	str	r0, [r7, #12]
 8003cd0:	60b9      	str	r1, [r7, #8]
 8003cd2:	607a      	str	r2, [r7, #4]
    Application::getInstance()->clearAllTimerWidgets();
 8003cd4:	f012 fe4e 	bl	8016974 <_ZN8touchgfx11Application11getInstanceEv>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f012 fe98 	bl	8016a10 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>

    if (*currentTrans)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d008      	beq.n	8003cfa <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x32>
    {
        (*currentTrans)->tearDown();
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	330c      	adds	r3, #12
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4610      	mov	r0, r2
 8003cf8:	4798      	blx	r3
    }
    if (*currentTrans)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d007      	beq.n	8003d12 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x4a>
    {
        (*currentTrans)->~Transition();
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4610      	mov	r0, r2
 8003d10:	4798      	blx	r3
    }
    if (*currentScreen)
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d008      	beq.n	8003d2c <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x64>
    {
        (*currentScreen)->tearDownScreen();
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	3314      	adds	r3, #20
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4610      	mov	r0, r2
 8003d2a:	4798      	blx	r3
    }
    if (*currentPresenter)
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d008      	beq.n	8003d46 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x7e>
    {
        (*currentPresenter)->deactivate();
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	3304      	adds	r3, #4
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4610      	mov	r0, r2
 8003d44:	4798      	blx	r3
    }
    if (*currentScreen)
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d007      	beq.n	8003d5e <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x96>
    {
        (*currentScreen)->~Screen();
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4610      	mov	r0, r2
 8003d5c:	4798      	blx	r3
    }
    if (*currentPresenter)
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d008      	beq.n	8003d78 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0xb0>
    {
        (*currentPresenter)->~Presenter();
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	3308      	adds	r3, #8
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4610      	mov	r0, r2
 8003d76:	4798      	blx	r3
    }
}
 8003d78:	bf00      	nop
 8003d7a:	3710      	adds	r7, #16
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}

08003d80 <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>:
 * @param [in] newScreen     If non-null, the new screen.
 * @param [in] newPresenter  If non-null, the new presenter.
 * @param [in] newTransition If non-null, the new transition.
 */
static inline void finalizeTransition(Screen* newScreen, Presenter* newPresenter, Transition* newTransition)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b084      	sub	sp, #16
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	60f8      	str	r0, [r7, #12]
 8003d88:	60b9      	str	r1, [r7, #8]
 8003d8a:	607a      	str	r2, [r7, #4]
    newScreen->setupScreen();
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	330c      	adds	r3, #12
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	68f8      	ldr	r0, [r7, #12]
 8003d96:	4798      	blx	r3
    newPresenter->activate();
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	68b8      	ldr	r0, [r7, #8]
 8003da0:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8003da2:	6879      	ldr	r1, [r7, #4]
 8003da4:	68f8      	ldr	r0, [r7, #12]
 8003da6:	f013 ff35 	bl	8017c14 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	3310      	adds	r3, #16
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	4798      	blx	r3

    Application::getInstance()->draw();
 8003db6:	f012 fddd 	bl	8016974 <_ZN8touchgfx11Application11getInstanceEv>
 8003dba:	4602      	mov	r2, r0
 8003dbc:	6813      	ldr	r3, [r2, #0]
 8003dbe:	3328      	adds	r3, #40	; 0x28
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4610      	mov	r0, r2
 8003dc4:	4798      	blx	r3
}
 8003dc6:	bf00      	nop
 8003dc8:	3710      	adds	r7, #16
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}

08003dce <_ZN5Model4bindEP13ModelListener>:
class Model
{
public:
    Model();

    void bind(ModelListener* listener)
 8003dce:	b480      	push	{r7}
 8003dd0:	b083      	sub	sp, #12
 8003dd2:	af00      	add	r7, sp, #0
 8003dd4:	6078      	str	r0, [r7, #4]
 8003dd6:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	683a      	ldr	r2, [r7, #0]
 8003ddc:	601a      	str	r2, [r3, #0]
    }
 8003dde:	bf00      	nop
 8003de0:	370c      	adds	r7, #12
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr
	...

08003dec <_ZN8touchgfx12NoTransitionC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    NoTransition() : Transition() { }
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b082      	sub	sp, #8
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	4618      	mov	r0, r3
 8003df8:	f7ff fee4 	bl	8003bc4 <_ZN8touchgfx10TransitionC1Ev>
 8003dfc:	4a03      	ldr	r2, [pc, #12]	; (8003e0c <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	601a      	str	r2, [r3, #0]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	4618      	mov	r0, r3
 8003e06:	3708      	adds	r7, #8
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}
 8003e0c:	080245d0 	.word	0x080245d0

08003e10 <_ZN8touchgfx12NoTransitionD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~NoTransition() { }
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b082      	sub	sp, #8
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
 8003e18:	4a05      	ldr	r2, [pc, #20]	; (8003e30 <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	601a      	str	r2, [r3, #0]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	4618      	mov	r0, r3
 8003e22:	f7ff fee5 	bl	8003bf0 <_ZN8touchgfx10TransitionD1Ev>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	4618      	mov	r0, r3
 8003e2a:	3708      	adds	r7, #8
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}
 8003e30:	080245d0 	.word	0x080245d0

08003e34 <_ZN8touchgfx12NoTransitionD0Ev>:
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b082      	sub	sp, #8
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f7ff ffe7 	bl	8003e10 <_ZN8touchgfx12NoTransitionD1Ev>
 8003e42:	210c      	movs	r1, #12
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	f01e fca8 	bl	802279a <_ZdlPvj>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	3708      	adds	r7, #8
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}

08003e54 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
     *
     * @brief Indicates that the transition is done after the first tick.
     *
     *        Indicates that the transition is done after the first tick.
     */
    virtual void handleTickEvent()
 8003e54:	b480      	push	{r7}
 8003e56:	b083      	sub	sp, #12
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
    {
        done = true;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	721a      	strb	r2, [r3, #8]
    }
 8003e62:	bf00      	nop
 8003e64:	370c      	adds	r7, #12
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr

08003e6e <_ZN13ModelListener4bindEP5Model>:
public:
    ModelListener() : model(0) {}
    
    virtual ~ModelListener() {}

    void bind(Model* m)
 8003e6e:	b480      	push	{r7}
 8003e70:	b083      	sub	sp, #12
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	6078      	str	r0, [r7, #4]
 8003e76:	6039      	str	r1, [r7, #0]
    {
        model = m;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	683a      	ldr	r2, [r7, #0]
 8003e7c:	605a      	str	r2, [r3, #4]
    }
 8003e7e:	bf00      	nop
 8003e80:	370c      	adds	r7, #12
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr
	...

08003e8c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b084      	sub	sp, #16
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	60f8      	str	r0, [r7, #12]
 8003e94:	60b9      	str	r1, [r7, #8]
 8003e96:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f7ff fef4 	bl	8003c88 <_ZN8touchgfx14MVPApplicationC1Ev>
 8003ea0:	4a13      	ldr	r2, [pc, #76]	; (8003ef0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	601a      	str	r2, [r3, #0]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8003eac:	4618      	mov	r0, r3
 8003eae:	f000 f89f 	bl	8003ff0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	687a      	ldr	r2, [r7, #4]
 8003eb6:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	68ba      	ldr	r2, [r7, #8]
 8003ebe:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8003ec2:	f7fe f9d7 	bl	8002274 <_ZN8touchgfx3HAL11getInstanceEv>
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	6813      	ldr	r3, [r2, #0]
 8003eca:	3308      	adds	r3, #8
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	2100      	movs	r1, #0
 8003ed0:	4610      	mov	r0, r2
 8003ed2:	4798      	blx	r3
    touchgfx::Texts::setLanguage(GB);
 8003ed4:	2000      	movs	r0, #0
 8003ed6:	f004 f93f 	bl	8008158 <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 8003eda:	f7fd fe0b 	bl	8001af4 <_ZN8touchgfx3HAL3lcdEv>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f018 f95a 	bl	801c19a <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
}
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3710      	adds	r7, #16
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}
 8003ef0:	08024330 	.word	0x08024330

08003ef4 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 8003ef4:	b480      	push	{r7}
 8003ef6:	b083      	sub	sp, #12
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	6039      	str	r1, [r7, #0]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4618      	mov	r0, r3
 8003f02:	370c      	adds	r7, #12
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr

08003f0c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b082      	sub	sp, #8
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
 8003f14:	6039      	str	r1, [r7, #0]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	683a      	ldr	r2, [r7, #0]
 8003f1a:	4611      	mov	r1, r2
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f7ff ffe9 	bl	8003ef4 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	685a      	ldr	r2, [r3, #4]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	605a      	str	r2, [r3, #4]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	683a      	ldr	r2, [r7, #0]
 8003f2e:	3308      	adds	r3, #8
 8003f30:	3208      	adds	r2, #8
 8003f32:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003f36:	e883 0003 	stmia.w	r3, {r0, r1}
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3708      	adds	r7, #8
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}

08003f44 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
 */

// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
 8003f44:	b590      	push	{r4, r7, lr}
 8003f46:	b089      	sub	sp, #36	; 0x24
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen1ScreenNoTransitionImpl);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	f503 749c 	add.w	r4, r3, #312	; 0x138
 8003f52:	4b10      	ldr	r3, [pc, #64]	; (8003f94 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x50>)
 8003f54:	61bb      	str	r3, [r7, #24]
 8003f56:	2300      	movs	r3, #0
 8003f58:	61fb      	str	r3, [r7, #28]
 8003f5a:	f107 0008 	add.w	r0, r7, #8
 8003f5e:	f107 0318 	add.w	r3, r7, #24
 8003f62:	cb0c      	ldmia	r3, {r2, r3}
 8003f64:	6879      	ldr	r1, [r7, #4]
 8003f66:	f000 f85f 	bl	8004028 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 8003f6a:	f107 0308 	add.w	r3, r7, #8
 8003f6e:	4619      	mov	r1, r3
 8003f70:	4620      	mov	r0, r4
 8003f72:	f7ff ffcb 	bl	8003f0c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 8003f76:	f107 0308 	add.w	r3, r7, #8
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f7ff fa6c 	bl	8003458 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	f503 729c 	add.w	r2, r3, #312	; 0x138
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
}
 8003f8c:	bf00      	nop
 8003f8e:	3724      	adds	r7, #36	; 0x24
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd90      	pop	{r4, r7, pc}
 8003f94:	08003f99 	.word	0x08003f99

08003f98 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b084      	sub	sp, #16
 8003f9c:	af02      	add	r7, sp, #8
 8003f9e:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	f503 7198 	add.w	r1, r3, #304	; 0x130
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8003fac:	461a      	mov	r2, r3
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8003fb4:	9300      	str	r3, [sp, #0]
 8003fb6:	4b04      	ldr	r3, [pc, #16]	; (8003fc8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x30>)
 8003fb8:	4804      	ldr	r0, [pc, #16]	; (8003fcc <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x34>)
 8003fba:	f000 f855 	bl	8004068 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 8003fbe:	bf00      	nop
 8003fc0:	3708      	adds	r7, #8
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}
 8003fc6:	bf00      	nop
 8003fc8:	2000d224 	.word	0x2000d224
 8003fcc:	2000d220 	.word	0x2000d220

08003fd0 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 8003fd0:	b480      	push	{r7}
 8003fd2:	b083      	sub	sp, #12
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	4a04      	ldr	r2, [pc, #16]	; (8003fec <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	601a      	str	r2, [r3, #0]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	370c      	adds	r7, #12
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr
 8003fec:	080243c0 	.word	0x080243c0

08003ff0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
    Callback() : pobject(0), pmemfun_0(0) { }
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b082      	sub	sp, #8
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f7ff ffe8 	bl	8003fd0 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 8004000:	4a08      	ldr	r2, [pc, #32]	; (8004024 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	601a      	str	r2, [r3, #0]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2200      	movs	r2, #0
 800400a:	605a      	str	r2, [r3, #4]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2200      	movs	r2, #0
 8004010:	609a      	str	r2, [r3, #8]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2200      	movs	r2, #0
 8004016:	60da      	str	r2, [r3, #12]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	4618      	mov	r0, r3
 800401c:	3708      	adds	r7, #8
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}
 8004022:	bf00      	nop
 8004024:	0802436c 	.word	0x0802436c

08004028 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_0)())
 8004028:	b580      	push	{r7, lr}
 800402a:	b084      	sub	sp, #16
 800402c:	af00      	add	r7, sp, #0
 800402e:	60f8      	str	r0, [r7, #12]
 8004030:	60b9      	str	r1, [r7, #8]
 8004032:	4639      	mov	r1, r7
 8004034:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	4618      	mov	r0, r3
 800403c:	f7ff ffc8 	bl	8003fd0 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 8004040:	4a08      	ldr	r2, [pc, #32]	; (8004064 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	68ba      	ldr	r2, [r7, #8]
 800404a:	605a      	str	r2, [r3, #4]
        this->pmemfun_0 = pmemfun_0;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	3308      	adds	r3, #8
 8004050:	463a      	mov	r2, r7
 8004052:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004056:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	4618      	mov	r0, r3
 800405e:	3710      	adds	r7, #16
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}
 8004064:	0802436c 	.word	0x0802436c

08004068 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template< class ScreenType, class PresenterType, class TransType, class ModelType  >
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8004068:	b590      	push	{r4, r7, lr}
 800406a:	b089      	sub	sp, #36	; 0x24
 800406c:	af00      	add	r7, sp, #0
 800406e:	60f8      	str	r0, [r7, #12]
 8004070:	60b9      	str	r1, [r7, #8]
 8004072:	607a      	str	r2, [r7, #4]
 8004074:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	689a      	ldr	r2, [r3, #8]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	3320      	adds	r3, #32
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4610      	mov	r0, r2
 8004086:	4798      	blx	r3
 8004088:	4602      	mov	r2, r0
 800408a:	f643 53a3 	movw	r3, #15779	; 0x3da3
 800408e:	429a      	cmp	r2, r3
 8004090:	d805      	bhi.n	800409e <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x36>
 8004092:	4b4e      	ldr	r3, [pc, #312]	; (80041cc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 8004094:	4a4e      	ldr	r2, [pc, #312]	; (80041d0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 8004096:	21c2      	movs	r1, #194	; 0xc2
 8004098:	484e      	ldr	r0, [pc, #312]	; (80041d4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 800409a:	f01e fba9 	bl	80227f0 <__assert_func>
 800409e:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	685a      	ldr	r2, [r3, #4]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	3320      	adds	r3, #32
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4610      	mov	r0, r2
 80040b0:	4798      	blx	r3
 80040b2:	4603      	mov	r3, r0
 80040b4:	2b0f      	cmp	r3, #15
 80040b6:	d805      	bhi.n	80040c4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5c>
 80040b8:	4b47      	ldr	r3, [pc, #284]	; (80041d8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x170>)
 80040ba:	4a45      	ldr	r2, [pc, #276]	; (80041d0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 80040bc:	21c3      	movs	r1, #195	; 0xc3
 80040be:	4845      	ldr	r0, [pc, #276]	; (80041d4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 80040c0:	f01e fb96 	bl	80227f0 <__assert_func>
 80040c4:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	68da      	ldr	r2, [r3, #12]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	68db      	ldr	r3, [r3, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	3320      	adds	r3, #32
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4610      	mov	r0, r2
 80040d6:	4798      	blx	r3
 80040d8:	4603      	mov	r3, r0
 80040da:	2b0b      	cmp	r3, #11
 80040dc:	d805      	bhi.n	80040ea <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x82>
 80040de:	4b3f      	ldr	r3, [pc, #252]	; (80041dc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x174>)
 80040e0:	4a3b      	ldr	r2, [pc, #236]	; (80041d0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 80040e2:	21c4      	movs	r1, #196	; 0xc4
 80040e4:	483b      	ldr	r0, [pc, #236]	; (80041d4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 80040e6:	f01e fb83 	bl	80227f0 <__assert_func>
 80040ea:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);
 80040ec:	683a      	ldr	r2, [r7, #0]
 80040ee:	68b9      	ldr	r1, [r7, #8]
 80040f0:	68f8      	ldr	r0, [r7, #12]
 80040f2:	f7ff fde9 	bl	8003cc8 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>

    TransType* newTransition = new (&heap.transitionStorage.at< TransType >(0)) TransType;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	68db      	ldr	r3, [r3, #12]
 80040fa:	2100      	movs	r1, #0
 80040fc:	4618      	mov	r0, r3
 80040fe:	f000 f86f 	bl	80041e0 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 8004102:	4603      	mov	r3, r0
 8004104:	4619      	mov	r1, r3
 8004106:	200c      	movs	r0, #12
 8004108:	f7ff fd50 	bl	8003bac <_ZnwjPv>
 800410c:	4604      	mov	r4, r0
 800410e:	2c00      	cmp	r4, #0
 8004110:	d004      	beq.n	800411c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
 8004112:	4620      	mov	r0, r4
 8004114:	f7ff fe6a 	bl	8003dec <_ZN8touchgfx12NoTransitionC1Ev>
 8004118:	4623      	mov	r3, r4
 800411a:	e000      	b.n	800411e <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb6>
 800411c:	4623      	mov	r3, r4
 800411e:	61fb      	str	r3, [r7, #28]
    ScreenType* newScreen = new (&heap.screenStorage.at< ScreenType >(0)) ScreenType;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	2100      	movs	r1, #0
 8004126:	4618      	mov	r0, r3
 8004128:	f000 f86d 	bl	8004206 <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>
 800412c:	4603      	mov	r3, r0
 800412e:	4619      	mov	r1, r3
 8004130:	f643 50a4 	movw	r0, #15780	; 0x3da4
 8004134:	f7ff fd3a 	bl	8003bac <_ZnwjPv>
 8004138:	4604      	mov	r4, r0
 800413a:	2c00      	cmp	r4, #0
 800413c:	d004      	beq.n	8004148 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe0>
 800413e:	4620      	mov	r0, r4
 8004140:	f004 fac8 	bl	80086d4 <_ZN11Screen1ViewC1Ev>
 8004144:	4623      	mov	r3, r4
 8004146:	e000      	b.n	800414a <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe2>
 8004148:	4623      	mov	r3, r4
 800414a:	61bb      	str	r3, [r7, #24]
    PresenterType* newPresenter = new (&heap.presenterStorage.at< PresenterType >(0)) PresenterType(*newScreen);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	2100      	movs	r1, #0
 8004152:	4618      	mov	r0, r3
 8004154:	f000 f86a 	bl	800422c <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>
 8004158:	4603      	mov	r3, r0
 800415a:	4619      	mov	r1, r3
 800415c:	2010      	movs	r0, #16
 800415e:	f7ff fd25 	bl	8003bac <_ZnwjPv>
 8004162:	4604      	mov	r4, r0
 8004164:	2c00      	cmp	r4, #0
 8004166:	d005      	beq.n	8004174 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10c>
 8004168:	69b9      	ldr	r1, [r7, #24]
 800416a:	4620      	mov	r0, r4
 800416c:	f004 fa0e 	bl	800858c <_ZN16Screen1PresenterC1ER11Screen1View>
 8004170:	4623      	mov	r3, r4
 8004172:	e000      	b.n	8004176 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10e>
 8004174:	4623      	mov	r3, r4
 8004176:	617b      	str	r3, [r7, #20]
    *currentTrans = newTransition;
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	69fa      	ldr	r2, [r7, #28]
 800417c:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	697a      	ldr	r2, [r7, #20]
 8004182:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	69ba      	ldr	r2, [r7, #24]
 8004188:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d002      	beq.n	8004196 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12e>
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	3304      	adds	r3, #4
 8004194:	e000      	b.n	8004198 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x130>
 8004196:	2300      	movs	r3, #0
 8004198:	4619      	mov	r1, r3
 800419a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800419c:	f7ff fe17 	bl	8003dce <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	3304      	adds	r3, #4
 80041a4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80041a6:	4618      	mov	r0, r3
 80041a8:	f7ff fe61 	bl	8003e6e <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 80041ac:	69bb      	ldr	r3, [r7, #24]
 80041ae:	6979      	ldr	r1, [r7, #20]
 80041b0:	4618      	mov	r0, r3
 80041b2:	f000 f84e 	bl	8004252 <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);
 80041b6:	69fa      	ldr	r2, [r7, #28]
 80041b8:	6979      	ldr	r1, [r7, #20]
 80041ba:	69b8      	ldr	r0, [r7, #24]
 80041bc:	f7ff fde0 	bl	8003d80 <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>

    return newPresenter;
 80041c0:	697b      	ldr	r3, [r7, #20]
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	3724      	adds	r7, #36	; 0x24
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd90      	pop	{r4, r7, pc}
 80041ca:	bf00      	nop
 80041cc:	08023a08 	.word	0x08023a08
 80041d0:	08024608 	.word	0x08024608
 80041d4:	08023a98 	.word	0x08023a98
 80041d8:	08023ae0 	.word	0x08023ae0
 80041dc:	08023b84 	.word	0x08023b84

080041e0 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template< typename T >
    T& at(const uint16_t index)
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b082      	sub	sp, #8
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
 80041e8:	460b      	mov	r3, r1
 80041ea:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	3324      	adds	r3, #36	; 0x24
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	887a      	ldrh	r2, [r7, #2]
 80041f6:	4611      	mov	r1, r2
 80041f8:	6878      	ldr	r0, [r7, #4]
 80041fa:	4798      	blx	r3
 80041fc:	4603      	mov	r3, r0
    }
 80041fe:	4618      	mov	r0, r3
 8004200:	3708      	adds	r7, #8
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}

08004206 <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>:
    T& at(const uint16_t index)
 8004206:	b580      	push	{r7, lr}
 8004208:	b082      	sub	sp, #8
 800420a:	af00      	add	r7, sp, #0
 800420c:	6078      	str	r0, [r7, #4]
 800420e:	460b      	mov	r3, r1
 8004210:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	3324      	adds	r3, #36	; 0x24
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	887a      	ldrh	r2, [r7, #2]
 800421c:	4611      	mov	r1, r2
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	4798      	blx	r3
 8004222:	4603      	mov	r3, r0
    }
 8004224:	4618      	mov	r0, r3
 8004226:	3708      	adds	r7, #8
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}

0800422c <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>:
    T& at(const uint16_t index)
 800422c:	b580      	push	{r7, lr}
 800422e:	b082      	sub	sp, #8
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
 8004234:	460b      	mov	r3, r1
 8004236:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	3324      	adds	r3, #36	; 0x24
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	887a      	ldrh	r2, [r7, #2]
 8004242:	4611      	mov	r1, r2
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	4798      	blx	r3
 8004248:	4603      	mov	r3, r0
    }
 800424a:	4618      	mov	r0, r3
 800424c:	3708      	adds	r7, #8
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}

08004252 <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>:
     *        Binds an instance of a specific Presenter type (subclass) to the View instance.
     *        This function is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] presenter The specific Presenter to be associated with the View.
     */
    void bind(T& presenter)
 8004252:	b480      	push	{r7}
 8004254:	b083      	sub	sp, #12
 8004256:	af00      	add	r7, sp, #0
 8004258:	6078      	str	r0, [r7, #4]
 800425a:	6039      	str	r1, [r7, #0]
    {
        this->presenter = &presenter;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	683a      	ldr	r2, [r7, #0]
 8004260:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8004262:	bf00      	nop
 8004264:	370c      	adds	r7, #12
 8004266:	46bd      	mov	sp, r7
 8004268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426c:	4770      	bx	lr

0800426e <_ZNK8touchgfx9GlyphNode15kerningTablePosEv>:
    uint16_t kerningTablePos() const
 800426e:	b480      	push	{r7}
 8004270:	b083      	sub	sp, #12
 8004272:	af00      	add	r7, sp, #0
 8004274:	6078      	str	r0, [r7, #4]
        return (((uint16_t)(flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10)) << 8) | (uint16_t)_kerningTablePos;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	7b5b      	ldrb	r3, [r3, #13]
 800427a:	021b      	lsls	r3, r3, #8
 800427c:	b21b      	sxth	r3, r3
 800427e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004282:	b21a      	sxth	r2, r3
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	7adb      	ldrb	r3, [r3, #11]
 8004288:	b21b      	sxth	r3, r3
 800428a:	4313      	orrs	r3, r2
 800428c:	b21b      	sxth	r3, r3
 800428e:	b29b      	uxth	r3, r3
    }
 8004290:	4618      	mov	r0, r3
 8004292:	370c      	adds	r7, #12
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr

0800429c <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
     *
     *        Gets GSUB table.
     *
     * @return The GSUB table or null if font has GSUB no table
     */
    virtual const uint16_t* getGSUBTable() const
 800429c:	b480      	push	{r7}
 800429e:	b083      	sub	sp, #12
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6a1b      	ldr	r3, [r3, #32]
    }
 80042a8:	4618      	mov	r0, r3
 80042aa:	370c      	adds	r7, #12
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr

080042b4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t dataFormatA4, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData) :
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b08c      	sub	sp, #48	; 0x30
 80042b8:	af08      	add	r7, sp, #32
 80042ba:	60f8      	str	r0, [r7, #12]
 80042bc:	60b9      	str	r1, [r7, #8]
 80042be:	4611      	mov	r1, r2
 80042c0:	461a      	mov	r2, r3
 80042c2:	460b      	mov	r3, r1
 80042c4:	80fb      	strh	r3, [r7, #6]
 80042c6:	4613      	mov	r3, r2
 80042c8:	80bb      	strh	r3, [r7, #4]
    ConstFont(list, size, height, pixBelowBase, bitsPerPixel, dataFormatA4, maxLeft, maxRight, fallbackChar, ellipsisChar),
    glyphData(glyphDataInternalFlash),
    kerningData(kerningList),
    gsubTable(gsubData)
 80042ca:	68f8      	ldr	r0, [r7, #12]
 80042cc:	88b9      	ldrh	r1, [r7, #4]
 80042ce:	88fa      	ldrh	r2, [r7, #6]
 80042d0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80042d2:	9306      	str	r3, [sp, #24]
 80042d4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80042d6:	9305      	str	r3, [sp, #20]
 80042d8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80042dc:	9304      	str	r3, [sp, #16]
 80042de:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80042e2:	9303      	str	r3, [sp, #12]
 80042e4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80042e8:	9302      	str	r3, [sp, #8]
 80042ea:	7f3b      	ldrb	r3, [r7, #28]
 80042ec:	9301      	str	r3, [sp, #4]
 80042ee:	7e3b      	ldrb	r3, [r7, #24]
 80042f0:	9300      	str	r3, [sp, #0]
 80042f2:	460b      	mov	r3, r1
 80042f4:	68b9      	ldr	r1, [r7, #8]
 80042f6:	f013 f869 	bl	80173cc <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 80042fa:	4a08      	ldr	r2, [pc, #32]	; (800431c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt+0x68>)
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	601a      	str	r2, [r3, #0]
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004304:	619a      	str	r2, [r3, #24]
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800430a:	61da      	str	r2, [r3, #28]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004310:	621a      	str	r2, [r3, #32]
{
}
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	4618      	mov	r0, r3
 8004316:	3710      	adds	r7, #16
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}
 800431c:	08024714 	.word	0x08024714

08004320 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 8004320:	b480      	push	{r7}
 8004322:	b085      	sub	sp, #20
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	699b      	ldr	r3, [r3, #24]
 800432e:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	889b      	ldrh	r3, [r3, #4]
 8004334:	0adb      	lsrs	r3, r3, #11
 8004336:	b29b      	uxth	r3, r3
 8004338:	009b      	lsls	r3, r3, #2
 800433a:	68fa      	ldr	r2, [r7, #12]
 800433c:	4413      	add	r3, r2
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4413      	add	r3, r2
}
 8004346:	4618      	mov	r0, r3
 8004348:	3714      	adds	r7, #20
 800434a:	46bd      	mov	sp, r7
 800434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004350:	4770      	bx	lr

08004352 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 8004352:	b580      	push	{r7, lr}
 8004354:	b086      	sub	sp, #24
 8004356:	af00      	add	r7, sp, #0
 8004358:	60f8      	str	r0, [r7, #12]
 800435a:	460b      	mov	r3, r1
 800435c:	607a      	str	r2, [r7, #4]
 800435e:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d003      	beq.n	800436e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	7b1b      	ldrb	r3, [r3, #12]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d101      	bne.n	8004372 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 800436e:	2300      	movs	r3, #0
 8004370:	e023      	b.n	80043ba <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x68>
    }

    uint16_t kerningTablePos = glyph->kerningTablePos();
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f7ff ff7b 	bl	800426e <_ZNK8touchgfx9GlyphNode15kerningTablePosEv>
 8004378:	4603      	mov	r3, r0
 800437a:	82bb      	strh	r3, [r7, #20]
    for (uint16_t i = kerningTablePos; i < kerningTablePos + glyph->kerningTableSize; i++)
 800437c:	8abb      	ldrh	r3, [r7, #20]
 800437e:	82fb      	strh	r3, [r7, #22]
 8004380:	8afa      	ldrh	r2, [r7, #22]
 8004382:	8abb      	ldrh	r3, [r7, #20]
 8004384:	6879      	ldr	r1, [r7, #4]
 8004386:	7b09      	ldrb	r1, [r1, #12]
 8004388:	440b      	add	r3, r1
 800438a:	429a      	cmp	r2, r3
 800438c:	da14      	bge.n	80043b8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x66>
    {
        if (prevChar == kerningData[i].unicodePrevChar)
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	69da      	ldr	r2, [r3, #28]
 8004392:	8afb      	ldrh	r3, [r7, #22]
 8004394:	009b      	lsls	r3, r3, #2
 8004396:	4413      	add	r3, r2
 8004398:	881b      	ldrh	r3, [r3, #0]
 800439a:	897a      	ldrh	r2, [r7, #10]
 800439c:	429a      	cmp	r2, r3
 800439e:	d107      	bne.n	80043b0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x5e>
        {
            return kerningData[i].distance;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	69da      	ldr	r2, [r3, #28]
 80043a4:	8afb      	ldrh	r3, [r7, #22]
 80043a6:	009b      	lsls	r3, r3, #2
 80043a8:	4413      	add	r3, r2
 80043aa:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80043ae:	e004      	b.n	80043ba <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x68>
    for (uint16_t i = kerningTablePos; i < kerningTablePos + glyph->kerningTableSize; i++)
 80043b0:	8afb      	ldrh	r3, [r7, #22]
 80043b2:	3301      	adds	r3, #1
 80043b4:	82fb      	strh	r3, [r7, #22]
 80043b6:	e7e3      	b.n	8004380 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x2e>
        }
    }
    return 0;
 80043b8:	2300      	movs	r3, #0
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3718      	adds	r7, #24
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}

080043c2 <_ZN8touchgfx9colortypeC1Em>:
    colortype(uint32_t col)
 80043c2:	b480      	push	{r7}
 80043c4:	b083      	sub	sp, #12
 80043c6:	af00      	add	r7, sp, #0
 80043c8:	6078      	str	r0, [r7, #4]
 80043ca:	6039      	str	r1, [r7, #0]
        color = col;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	683a      	ldr	r2, [r7, #0]
 80043d0:	601a      	str	r2, [r3, #0]
    }
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	4618      	mov	r0, r3
 80043d6:	370c      	adds	r7, #12
 80043d8:	46bd      	mov	sp, r7
 80043da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043de:	4770      	bx	lr

080043e0 <_ZN8touchgfx4RectC1Essss>:
     * @param x      The x coordinate.
     * @param y      The y coordinate.
     * @param width  The width.
     * @param height The height.
     */
    Rect(int16_t x, int16_t y, int16_t width, int16_t height)
 80043e0:	b480      	push	{r7}
 80043e2:	b085      	sub	sp, #20
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	60f8      	str	r0, [r7, #12]
 80043e8:	4608      	mov	r0, r1
 80043ea:	4611      	mov	r1, r2
 80043ec:	461a      	mov	r2, r3
 80043ee:	4603      	mov	r3, r0
 80043f0:	817b      	strh	r3, [r7, #10]
 80043f2:	460b      	mov	r3, r1
 80043f4:	813b      	strh	r3, [r7, #8]
 80043f6:	4613      	mov	r3, r2
 80043f8:	80fb      	strh	r3, [r7, #6]
    {
        this->x = x;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	897a      	ldrh	r2, [r7, #10]
 80043fe:	801a      	strh	r2, [r3, #0]
        this->y = y;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	893a      	ldrh	r2, [r7, #8]
 8004404:	805a      	strh	r2, [r3, #2]
        this->width = width;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	88fa      	ldrh	r2, [r7, #6]
 800440a:	809a      	strh	r2, [r3, #4]
        this->height = height;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	8b3a      	ldrh	r2, [r7, #24]
 8004410:	80da      	strh	r2, [r3, #6]
    }
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	4618      	mov	r0, r3
 8004416:	3714      	adds	r7, #20
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr

08004420 <_ZN8touchgfx6BitmapC1Et>:
     *        Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     *        array.
     *
     * @param id The unique bitmap identifier.
     */
    explicit Bitmap(const BitmapId id = BITMAP_INVALID)
 8004420:	b480      	push	{r7}
 8004422:	b083      	sub	sp, #12
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
 8004428:	460b      	mov	r3, r1
 800442a:	807b      	strh	r3, [r7, #2]
        : bitmapId(id)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	887a      	ldrh	r2, [r7, #2]
 8004430:	801a      	strh	r2, [r3, #0]
    {
    }
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	4618      	mov	r0, r3
 8004436:	370c      	adds	r7, #12
 8004438:	46bd      	mov	sp, r7
 800443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443e:	4770      	bx	lr

08004440 <_ZN8touchgfx8DrawableC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Drawable() : rect(0, 0, 0, 0),
 8004440:	b580      	push	{r7, lr}
 8004442:	b084      	sub	sp, #16
 8004444:	af02      	add	r7, sp, #8
 8004446:	6078      	str	r0, [r7, #4]
        parent(0),
        nextSibling(0),
        nextDrawChainElement(0),
        touchable(false),
        visible(true)
 8004448:	4a13      	ldr	r2, [pc, #76]	; (8004498 <_ZN8touchgfx8DrawableC1Ev+0x58>)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	601a      	str	r2, [r3, #0]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	1d18      	adds	r0, r3, #4
 8004452:	2300      	movs	r3, #0
 8004454:	9300      	str	r3, [sp, #0]
 8004456:	2300      	movs	r3, #0
 8004458:	2200      	movs	r2, #0
 800445a:	2100      	movs	r1, #0
 800445c:	f7ff ffc0 	bl	80043e0 <_ZN8touchgfx4RectC1Essss>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	330c      	adds	r3, #12
 8004464:	4618      	mov	r0, r3
 8004466:	f7fe fa89 	bl	800297c <_ZN8touchgfx4RectC1Ev>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2200      	movs	r2, #0
 800446e:	615a      	str	r2, [r3, #20]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2200      	movs	r2, #0
 8004474:	619a      	str	r2, [r3, #24]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2200      	movs	r2, #0
 800447a:	61da      	str	r2, [r3, #28]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2200      	movs	r2, #0
 8004480:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2201      	movs	r2, #1
 8004488:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    {
    }
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	4618      	mov	r0, r3
 8004490:	3708      	adds	r7, #8
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}
 8004496:	bf00      	nop
 8004498:	08026970 	.word	0x08026970

0800449c <_ZN8touchgfx8DrawableD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Drawable() { }
 800449c:	b480      	push	{r7}
 800449e:	b083      	sub	sp, #12
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
 80044a4:	4a04      	ldr	r2, [pc, #16]	; (80044b8 <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	601a      	str	r2, [r3, #0]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	4618      	mov	r0, r3
 80044ae:	370c      	adds	r7, #12
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr
 80044b8:	08026970 	.word	0x08026970

080044bc <_ZN8touchgfx8DrawableD0Ev>:
 80044bc:	b580      	push	{r7, lr}
 80044be:	b082      	sub	sp, #8
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	f7ff ffe9 	bl	800449c <_ZN8touchgfx8DrawableD1Ev>
 80044ca:	2128      	movs	r1, #40	; 0x28
 80044cc:	6878      	ldr	r0, [r7, #4]
 80044ce:	f01e f964 	bl	802279a <_ZdlPvj>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	4618      	mov	r0, r3
 80044d6:	3708      	adds	r7, #8
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}

080044dc <_ZN8touchgfx8Drawable11setPositionEssss>:
     * @param x      The x coordinate of this Drawable.
     * @param y      The y coordinate of this Drawable.
     * @param width  The width of this Drawable.
     * @param height The height of this Drawable.
     */
    virtual void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 80044dc:	b580      	push	{r7, lr}
 80044de:	b084      	sub	sp, #16
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	60f8      	str	r0, [r7, #12]
 80044e4:	4608      	mov	r0, r1
 80044e6:	4611      	mov	r1, r2
 80044e8:	461a      	mov	r2, r3
 80044ea:	4603      	mov	r3, r0
 80044ec:	817b      	strh	r3, [r7, #10]
 80044ee:	460b      	mov	r3, r1
 80044f0:	813b      	strh	r3, [r7, #8]
 80044f2:	4613      	mov	r3, r2
 80044f4:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	3334      	adds	r3, #52	; 0x34
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8004502:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8004506:	68f8      	ldr	r0, [r7, #12]
 8004508:	4798      	blx	r3
        setWidth(width);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	3338      	adds	r3, #56	; 0x38
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004516:	4611      	mov	r1, r2
 8004518:	68f8      	ldr	r0, [r7, #12]
 800451a:	4798      	blx	r3
        setHeight(height);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	333c      	adds	r3, #60	; 0x3c
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8004528:	4611      	mov	r1, r2
 800452a:	68f8      	ldr	r0, [r7, #12]
 800452c:	4798      	blx	r3
    }
 800452e:	bf00      	nop
 8004530:	3710      	adds	r7, #16
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}

08004536 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param x The new x value, relative to the parent. A negative value is allowed.
     */
    virtual void setX(int16_t x)
 8004536:	b480      	push	{r7}
 8004538:	b083      	sub	sp, #12
 800453a:	af00      	add	r7, sp, #0
 800453c:	6078      	str	r0, [r7, #4]
 800453e:	460b      	mov	r3, r1
 8004540:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	887a      	ldrh	r2, [r7, #2]
 8004546:	809a      	strh	r2, [r3, #4]
    }
 8004548:	bf00      	nop
 800454a:	370c      	adds	r7, #12
 800454c:	46bd      	mov	sp, r7
 800454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004552:	4770      	bx	lr

08004554 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param y The new y value, relative to the parent. A negative value is allowed.
     */
    virtual void setY(int16_t y)
 8004554:	b480      	push	{r7}
 8004556:	b083      	sub	sp, #12
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
 800455c:	460b      	mov	r3, r1
 800455e:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	887a      	ldrh	r2, [r7, #2]
 8004564:	80da      	strh	r2, [r3, #6]
    }
 8004566:	bf00      	nop
 8004568:	370c      	adds	r7, #12
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr

08004572 <_ZN8touchgfx8Drawable5setXYEss>:
     * @note Changing this does not automatically yield a redraw.
     *
     * @param x The new x value, relative to the parent. A negative value is allowed.
     * @param y The new y value, relative to the parent. A negative value is allowed.
     */
    virtual void setXY(int16_t x, int16_t y)
 8004572:	b580      	push	{r7, lr}
 8004574:	b082      	sub	sp, #8
 8004576:	af00      	add	r7, sp, #0
 8004578:	6078      	str	r0, [r7, #4]
 800457a:	460b      	mov	r3, r1
 800457c:	807b      	strh	r3, [r7, #2]
 800457e:	4613      	mov	r3, r2
 8004580:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	332c      	adds	r3, #44	; 0x2c
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800458e:	4611      	mov	r1, r2
 8004590:	6878      	ldr	r0, [r7, #4]
 8004592:	4798      	blx	r3
        setY(y);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	3330      	adds	r3, #48	; 0x30
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f9b7 2000 	ldrsh.w	r2, [r7]
 80045a0:	4611      	mov	r1, r2
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	4798      	blx	r3
    }
 80045a6:	bf00      	nop
 80045a8:	3708      	adds	r7, #8
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}

080045ae <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param width The new width.
     */
    virtual void setWidth(int16_t width)
 80045ae:	b480      	push	{r7}
 80045b0:	b083      	sub	sp, #12
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	6078      	str	r0, [r7, #4]
 80045b6:	460b      	mov	r3, r1
 80045b8:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	887a      	ldrh	r2, [r7, #2]
 80045be:	811a      	strh	r2, [r3, #8]
    }
 80045c0:	bf00      	nop
 80045c2:	370c      	adds	r7, #12
 80045c4:	46bd      	mov	sp, r7
 80045c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ca:	4770      	bx	lr

080045cc <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param height The new height.
     */
    virtual void setHeight(int16_t height)
 80045cc:	b480      	push	{r7}
 80045ce:	b083      	sub	sp, #12
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
 80045d4:	460b      	mov	r3, r1
 80045d6:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	887a      	ldrh	r2, [r7, #2]
 80045dc:	815a      	strh	r2, [r3, #10]
    }
 80045de:	bf00      	nop
 80045e0:	370c      	adds	r7, #12
 80045e2:	46bd      	mov	sp, r7
 80045e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e8:	4770      	bx	lr

080045ea <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     *
     *        This function can be called on parent nodes to signal that the size of one or
     *        more of its children has changed. Currently only used in ScrollableContainer to
     *        redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged() { }
 80045ea:	b480      	push	{r7}
 80045ec:	b083      	sub	sp, #12
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	6078      	str	r0, [r7, #4]
 80045f2:	bf00      	nop
 80045f4:	370c      	adds	r7, #12
 80045f6:	46bd      	mov	sp, r7
 80045f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fc:	4770      	bx	lr

080045fe <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     *        Defines the event handler interface for ClickEvents. The default implementation
     *        ignores the event. The event is only received if the drawable is touchable.
     *
     * @param evt The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& evt) { }
 80045fe:	b480      	push	{r7}
 8004600:	b083      	sub	sp, #12
 8004602:	af00      	add	r7, sp, #0
 8004604:	6078      	str	r0, [r7, #4]
 8004606:	6039      	str	r1, [r7, #0]
 8004608:	bf00      	nop
 800460a:	370c      	adds	r7, #12
 800460c:	46bd      	mov	sp, r7
 800460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004612:	4770      	bx	lr

08004614 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     *        Defines the event handler interface for GestureEvents. The default implementation
     *        ignores the event. The event is only received if the drawable is touchable.
     *
     * @param evt The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& evt) { }
 8004614:	b480      	push	{r7}
 8004616:	b083      	sub	sp, #12
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
 800461c:	6039      	str	r1, [r7, #0]
 800461e:	bf00      	nop
 8004620:	370c      	adds	r7, #12
 8004622:	46bd      	mov	sp, r7
 8004624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004628:	4770      	bx	lr

0800462a <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     *        Defines the event handler interface for DragEvents. The event is only received if
     *        the drawable is touchable.
     *
     * @param evt The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& evt) { }
 800462a:	b480      	push	{r7}
 800462c:	b083      	sub	sp, #12
 800462e:	af00      	add	r7, sp, #0
 8004630:	6078      	str	r0, [r7, #4]
 8004632:	6039      	str	r1, [r7, #0]
 8004634:	bf00      	nop
 8004636:	370c      	adds	r7, #12
 8004638:	46bd      	mov	sp, r7
 800463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463e:	4770      	bx	lr

08004640 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *        Called periodically by the framework if the Drawable instance has subscribed to
     *        timer ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent() { }
 8004640:	b480      	push	{r7}
 8004642:	b083      	sub	sp, #12
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
 8004648:	bf00      	nop
 800464a:	370c      	adds	r7, #12
 800464c:	46bd      	mov	sp, r7
 800464e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004652:	4770      	bx	lr

08004654 <_ZN8touchgfx8Drawable10setVisibleEb>:
     * @note Changing this does not automatically yield a redraw.
     *
     * @param vis true if this Drawable should be visible. By default, drawables are visible unless
     *            this function has been called with false as argument.
     */
    void setVisible(bool vis)
 8004654:	b480      	push	{r7}
 8004656:	b083      	sub	sp, #12
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
 800465c:	460b      	mov	r3, r1
 800465e:	70fb      	strb	r3, [r7, #3]
    {
        visible = vis;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	78fa      	ldrb	r2, [r7, #3]
 8004664:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
 8004668:	bf00      	nop
 800466a:	370c      	adds	r7, #12
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr

08004674 <_ZN8touchgfx8Drawable12setTouchableEb>:
     *
     *        Controls whether this Drawable receives touch events or not.
     *
     * @param touch If true  it will receive touch events, if false it will not.
     */
    void setTouchable(bool touch)
 8004674:	b480      	push	{r7}
 8004676:	b083      	sub	sp, #12
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
 800467c:	460b      	mov	r3, r1
 800467e:	70fb      	strb	r3, [r7, #3]
    {
        touchable = touch;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	78fa      	ldrb	r2, [r7, #3]
 8004684:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
 8004688:	bf00      	nop
 800468a:	370c      	adds	r7, #12
 800468c:	46bd      	mov	sp, r7
 800468e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004692:	4770      	bx	lr

08004694 <_ZNK8touchgfx8Drawable9isVisibleEv>:
     * @return true if the Drawable is visible.
     * @return True if visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 8004694:	b480      	push	{r7}
 8004696:	b083      	sub	sp, #12
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
    {
        return visible;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 80046a2:	4618      	mov	r0, r3
 80046a4:	370c      	adds	r7, #12
 80046a6:	46bd      	mov	sp, r7
 80046a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ac:	4770      	bx	lr

080046ae <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 80046ae:	b480      	push	{r7}
 80046b0:	b083      	sub	sp, #12
 80046b2:	af00      	add	r7, sp, #0
 80046b4:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 80046bc:	4618      	mov	r0, r3
 80046be:	370c      	adds	r7, #12
 80046c0:	46bd      	mov	sp, r7
 80046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c6:	4770      	bx	lr

080046c8 <_ZN8touchgfx8Drawable6moveToEss>:
     * @note Will redraw the appropriate areas of the screen.
     *
     * @param x The absolute position to move to.
     * @param y The absolute position to move to.
     */
    virtual void moveTo(int16_t x, int16_t y)
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b082      	sub	sp, #8
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
 80046d0:	460b      	mov	r3, r1
 80046d2:	807b      	strh	r3, [r7, #2]
 80046d4:	4613      	mov	r3, r2
 80046d6:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	3354      	adds	r3, #84	; 0x54
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	8879      	ldrh	r1, [r7, #2]
 80046e2:	687a      	ldr	r2, [r7, #4]
 80046e4:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80046e8:	b292      	uxth	r2, r2
 80046ea:	1a8a      	subs	r2, r1, r2
 80046ec:	b292      	uxth	r2, r2
 80046ee:	b210      	sxth	r0, r2
 80046f0:	8839      	ldrh	r1, [r7, #0]
 80046f2:	687a      	ldr	r2, [r7, #4]
 80046f4:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 80046f8:	b292      	uxth	r2, r2
 80046fa:	1a8a      	subs	r2, r1, r2
 80046fc:	b292      	uxth	r2, r2
 80046fe:	b212      	sxth	r2, r2
 8004700:	4601      	mov	r1, r0
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	4798      	blx	r3
    }
 8004706:	bf00      	nop
 8004708:	3708      	adds	r7, #8
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}

0800470e <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     *        Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 800470e:	b480      	push	{r7}
 8004710:	b083      	sub	sp, #12
 8004712:	af00      	add	r7, sp, #0
 8004714:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800471c:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004724:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800472c:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 800472e:	bf00      	nop
 8004730:	370c      	adds	r7, #12
 8004732:	46bd      	mov	sp, r7
 8004734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004738:	4770      	bx	lr

0800473a <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     *
     * @param invalidatedArea              Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 800473a:	b580      	push	{r7, lr}
 800473c:	b084      	sub	sp, #16
 800473e:	af00      	add	r7, sp, #0
 8004740:	60f8      	str	r0, [r7, #12]
 8004742:	60b9      	str	r1, [r7, #8]
 8004744:	607a      	str	r2, [r7, #4]
    {
        resetDrawChainCache();
 8004746:	68f8      	ldr	r0, [r7, #12]
 8004748:	f7ff ffe1 	bl	800470e <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681a      	ldr	r2, [r3, #0]
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	68fa      	ldr	r2, [r7, #12]
 8004758:	601a      	str	r2, [r3, #0]
    }
 800475a:	bf00      	nop
 800475c:	3710      	adds	r7, #16
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}
	...

08004764 <_ZN8touchgfx9ContainerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Container() { }
 8004764:	b580      	push	{r7, lr}
 8004766:	b082      	sub	sp, #8
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	4a05      	ldr	r2, [pc, #20]	; (8004784 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	601a      	str	r2, [r3, #0]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	4618      	mov	r0, r3
 8004776:	f7ff fe91 	bl	800449c <_ZN8touchgfx8DrawableD1Ev>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	4618      	mov	r0, r3
 800477e:	3708      	adds	r7, #8
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}
 8004784:	08025570 	.word	0x08025570

08004788 <_ZN8touchgfx9ContainerD0Ev>:
 8004788:	b580      	push	{r7, lr}
 800478a:	b082      	sub	sp, #8
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	f7ff ffe7 	bl	8004764 <_ZN8touchgfx9ContainerD1Ev>
 8004796:	212c      	movs	r1, #44	; 0x2c
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f01d fffe 	bl	802279a <_ZdlPvj>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	4618      	mov	r0, r3
 80047a2:	3708      	adds	r7, #8
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}

080047a8 <_ZN8touchgfx6ScreenD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Screen() { }
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b082      	sub	sp, #8
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
 80047b0:	4a06      	ldr	r2, [pc, #24]	; (80047cc <_ZN8touchgfx6ScreenD1Ev+0x24>)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	601a      	str	r2, [r3, #0]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	3304      	adds	r3, #4
 80047ba:	4618      	mov	r0, r3
 80047bc:	f7ff ffd2 	bl	8004764 <_ZN8touchgfx9ContainerD1Ev>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	4618      	mov	r0, r3
 80047c4:	3708      	adds	r7, #8
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}
 80047ca:	bf00      	nop
 80047cc:	08026a68 	.word	0x08026a68

080047d0 <_ZN8touchgfx6ScreenD0Ev>:
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b082      	sub	sp, #8
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
 80047d8:	6878      	ldr	r0, [r7, #4]
 80047da:	f7ff ffe5 	bl	80047a8 <_ZN8touchgfx6ScreenD1Ev>
 80047de:	213c      	movs	r1, #60	; 0x3c
 80047e0:	6878      	ldr	r0, [r7, #4]
 80047e2:	f01d ffda 	bl	802279a <_ZdlPvj>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	4618      	mov	r0, r3
 80047ea:	3708      	adds	r7, #8
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}

080047f0 <_ZN8touchgfx6Screen11setupScreenEv>:
     *        Base version does nothing, but place any screen specific initialization code in
     *        an overridden version.
     *
     * @see touchgfx::Application::switchScreen()
     */
    virtual void setupScreen() { }
 80047f0:	b480      	push	{r7}
 80047f2:	b083      	sub	sp, #12
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
 80047f8:	bf00      	nop
 80047fa:	370c      	adds	r7, #12
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr

08004804 <_ZN8touchgfx6Screen15afterTransitionEv>:
     *        Base version does nothing, but override to do screen specific initialization code
     *        that has to be done after the transition to the screen.
     *
     * @see touchgfx::Application::handleTick()
     */
    virtual void afterTransition() { }
 8004804:	b480      	push	{r7}
 8004806:	b083      	sub	sp, #12
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	bf00      	nop
 800480e:	370c      	adds	r7, #12
 8004810:	46bd      	mov	sp, r7
 8004812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004816:	4770      	bx	lr

08004818 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *        displayed. Base version does nothing, but place any screen specific cleanup code
     *        in an overridden version.
     *
     * @see touchgfx::Application::switchScreen()
     */
    virtual void tearDownScreen() { }
 8004818:	b480      	push	{r7}
 800481a:	b083      	sub	sp, #12
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
 8004820:	bf00      	nop
 8004822:	370c      	adds	r7, #12
 8004824:	46bd      	mov	sp, r7
 8004826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482a:	4770      	bx	lr

0800482c <_ZN8touchgfx6Screen15handleTickEventEv>:
     *        Application::TICK_INTERVAL_MS.
     *
     *        Called by the Application on the current screen with a frequency of
     *        Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 800482c:	b480      	push	{r7}
 800482e:	b083      	sub	sp, #12
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
    {
    }
 8004834:	bf00      	nop
 8004836:	370c      	adds	r7, #12
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr

08004840 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     *        Called by the Application on the reception of a "key", the meaning of which is
     *        platform/application specific. Default implementation does nothing.
     *
     * @param key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 8004840:	b480      	push	{r7}
 8004842:	b083      	sub	sp, #12
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
 8004848:	460b      	mov	r3, r1
 800484a:	70fb      	strb	r3, [r7, #3]
    {
    }
 800484c:	bf00      	nop
 800484e:	370c      	adds	r7, #12
 8004850:	46bd      	mov	sp, r7
 8004852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004856:	4770      	bx	lr

08004858 <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     *
     * @param [in] d The Drawable to add.
     */
    void add(Drawable& d)
 8004858:	b580      	push	{r7, lr}
 800485a:	b082      	sub	sp, #8
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	3304      	adds	r3, #4
 8004866:	6839      	ldr	r1, [r7, #0]
 8004868:	4618      	mov	r0, r3
 800486a:	f00e fef1 	bl	8013650 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 800486e:	bf00      	nop
 8004870:	3708      	adds	r7, #8
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}
	...

08004878 <_ZN8touchgfx6WidgetC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Widget() : Drawable() { }
 8004878:	b580      	push	{r7, lr}
 800487a:	b082      	sub	sp, #8
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	4618      	mov	r0, r3
 8004884:	f7ff fddc 	bl	8004440 <_ZN8touchgfx8DrawableC1Ev>
 8004888:	4a03      	ldr	r2, [pc, #12]	; (8004898 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	601a      	str	r2, [r3, #0]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	4618      	mov	r0, r3
 8004892:	3708      	adds	r7, #8
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}
 8004898:	08024930 	.word	0x08024930

0800489c <_ZN8touchgfx6WidgetD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Widget() { }
 800489c:	b580      	push	{r7, lr}
 800489e:	b082      	sub	sp, #8
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
 80048a4:	4a05      	ldr	r2, [pc, #20]	; (80048bc <_ZN8touchgfx6WidgetD1Ev+0x20>)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	601a      	str	r2, [r3, #0]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	4618      	mov	r0, r3
 80048ae:	f7ff fdf5 	bl	800449c <_ZN8touchgfx8DrawableD1Ev>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	4618      	mov	r0, r3
 80048b6:	3708      	adds	r7, #8
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}
 80048bc:	08024930 	.word	0x08024930

080048c0 <_ZN8touchgfx6WidgetD0Ev>:
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b082      	sub	sp, #8
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	f7ff ffe7 	bl	800489c <_ZN8touchgfx6WidgetD1Ev>
 80048ce:	2128      	movs	r1, #40	; 0x28
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	f01d ff62 	bl	802279a <_ZdlPvj>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	4618      	mov	r0, r3
 80048da:	3708      	adds	r7, #8
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}

080048e0 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param x          The point of intersection expressed in coordinates relative to the parent.
     * @param y          The y coordinate.
     * @param [out] last Result will be placed here.
     */
    virtual void getLastChild(int16_t x, int16_t y, Drawable** last)
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b084      	sub	sp, #16
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	60f8      	str	r0, [r7, #12]
 80048e8:	607b      	str	r3, [r7, #4]
 80048ea:	460b      	mov	r3, r1
 80048ec:	817b      	strh	r3, [r7, #10]
 80048ee:	4613      	mov	r3, r2
 80048f0:	813b      	strh	r3, [r7, #8]
    {
        if (isVisible() && isTouchable())
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	4618      	mov	r0, r3
 80048f6:	f7ff fecd 	bl	8004694 <_ZNK8touchgfx8Drawable9isVisibleEv>
 80048fa:	4603      	mov	r3, r0
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d008      	beq.n	8004912 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	4618      	mov	r0, r3
 8004904:	f7ff fed3 	bl	80046ae <_ZNK8touchgfx8Drawable11isTouchableEv>
 8004908:	4603      	mov	r3, r0
 800490a:	2b00      	cmp	r3, #0
 800490c:	d001      	beq.n	8004912 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800490e:	2301      	movs	r3, #1
 8004910:	e000      	b.n	8004914 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 8004912:	2300      	movs	r3, #0
 8004914:	2b00      	cmp	r3, #0
 8004916:	d002      	beq.n	800491e <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 8004918:	68fa      	ldr	r2, [r7, #12]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	601a      	str	r2, [r3, #0]
        }
    }
 800491e:	bf00      	nop
 8004920:	3710      	adds	r7, #16
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}
	...

08004928 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
     *        Constructs a new Image with a default alpha value of 255 (solid) and a default
     *        Bitmap if none is specified.
     *
     * @param bmp The bitmap to display.
     */
    Image(const Bitmap& bmp = Bitmap()) : Widget(), alpha(255)
 8004928:	b580      	push	{r7, lr}
 800492a:	b082      	sub	sp, #8
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
 8004930:	6039      	str	r1, [r7, #0]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	4618      	mov	r0, r3
 8004936:	f7ff ff9f 	bl	8004878 <_ZN8touchgfx6WidgetC1Ev>
 800493a:	4a0b      	ldr	r2, [pc, #44]	; (8004968 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x40>)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	601a      	str	r2, [r3, #0]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	3326      	adds	r3, #38	; 0x26
 8004944:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004948:	4618      	mov	r0, r3
 800494a:	f7ff fd69 	bl	8004420 <_ZN8touchgfx6BitmapC1Et>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	22ff      	movs	r2, #255	; 0xff
 8004952:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    {
        setBitmap(bmp);
 8004956:	6839      	ldr	r1, [r7, #0]
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	f010 fe6b 	bl	8015634 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	4618      	mov	r0, r3
 8004962:	3708      	adds	r7, #8
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}
 8004968:	08026500 	.word	0x08026500

0800496c <_ZN8touchgfx14AbstractButtonC1Ev>:
     * @brief Constructor.
     *
     *        Constructs an AbstractButton instance in released state without an associated
     *        action.
     */
    AbstractButton() : Widget(), action(), pressed(false)
 800496c:	b580      	push	{r7, lr}
 800496e:	b082      	sub	sp, #8
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	4618      	mov	r0, r3
 8004978:	f7ff ff7e 	bl	8004878 <_ZN8touchgfx6WidgetC1Ev>
 800497c:	4a09      	ldr	r2, [pc, #36]	; (80049a4 <_ZN8touchgfx14AbstractButtonC1Ev+0x38>)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	601a      	str	r2, [r3, #0]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2200      	movs	r2, #0
 8004986:	629a      	str	r2, [r3, #40]	; 0x28
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2200      	movs	r2, #0
 800498c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    {
        setTouchable(true);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2101      	movs	r1, #1
 8004994:	4618      	mov	r0, r3
 8004996:	f7ff fe6d 	bl	8004674 <_ZN8touchgfx8Drawable12setTouchableEb>
    }
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	4618      	mov	r0, r3
 800499e:	3708      	adds	r7, #8
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}
 80049a4:	0802622c 	.word	0x0802622c

080049a8 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>:
     * @param callback The callback to be executed. The callback will be given a reference to
     *                 the AbstractButton.
     *
     * @see GenericCallback
     */
    void setAction(GenericCallback< const AbstractButton& >& callback)
 80049a8:	b480      	push	{r7}
 80049aa:	b083      	sub	sp, #12
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
 80049b0:	6039      	str	r1, [r7, #0]
    {
        action = &callback;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	683a      	ldr	r2, [r7, #0]
 80049b6:	629a      	str	r2, [r3, #40]	; 0x28
    }
 80049b8:	bf00      	nop
 80049ba:	370c      	adds	r7, #12
 80049bc:	46bd      	mov	sp, r7
 80049be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c2:	4770      	bx	lr

080049c4 <_ZN8touchgfx14AbstractButtonD1Ev>:
class AbstractButton : public Widget
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b082      	sub	sp, #8
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
 80049cc:	4a05      	ldr	r2, [pc, #20]	; (80049e4 <_ZN8touchgfx14AbstractButtonD1Ev+0x20>)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	601a      	str	r2, [r3, #0]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	4618      	mov	r0, r3
 80049d6:	f7ff ff61 	bl	800489c <_ZN8touchgfx6WidgetD1Ev>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4618      	mov	r0, r3
 80049de:	3708      	adds	r7, #8
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bd80      	pop	{r7, pc}
 80049e4:	0802622c 	.word	0x0802622c

080049e8 <_ZN8touchgfx14AbstractButtonD0Ev>:
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b082      	sub	sp, #8
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	f7ff ffe7 	bl	80049c4 <_ZN8touchgfx14AbstractButtonD1Ev>
 80049f6:	2130      	movs	r1, #48	; 0x30
 80049f8:	6878      	ldr	r0, [r7, #4]
 80049fa:	f01d fece 	bl	802279a <_ZdlPvj>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	4618      	mov	r0, r3
 8004a02:	3708      	adds	r7, #8
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}

08004a08 <_ZN8touchgfx6ButtonC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Button() : AbstractButton(), up(), down(), alpha(255) { }
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b082      	sub	sp, #8
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	4618      	mov	r0, r3
 8004a14:	f7ff ffaa 	bl	800496c <_ZN8touchgfx14AbstractButtonC1Ev>
 8004a18:	4a0c      	ldr	r2, [pc, #48]	; (8004a4c <_ZN8touchgfx6ButtonC1Ev+0x44>)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	601a      	str	r2, [r3, #0]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	332e      	adds	r3, #46	; 0x2e
 8004a22:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004a26:	4618      	mov	r0, r3
 8004a28:	f7ff fcfa 	bl	8004420 <_ZN8touchgfx6BitmapC1Et>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	3330      	adds	r3, #48	; 0x30
 8004a30:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004a34:	4618      	mov	r0, r3
 8004a36:	f7ff fcf3 	bl	8004420 <_ZN8touchgfx6BitmapC1Et>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	22ff      	movs	r2, #255	; 0xff
 8004a3e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	4618      	mov	r0, r3
 8004a46:	3708      	adds	r7, #8
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd80      	pop	{r7, pc}
 8004a4c:	080263e0 	.word	0x080263e0

08004a50 <_ZN8touchgfx6ButtonD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Button() { }
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b082      	sub	sp, #8
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
 8004a58:	4a05      	ldr	r2, [pc, #20]	; (8004a70 <_ZN8touchgfx6ButtonD1Ev+0x20>)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	601a      	str	r2, [r3, #0]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	4618      	mov	r0, r3
 8004a62:	f7ff ffaf 	bl	80049c4 <_ZN8touchgfx14AbstractButtonD1Ev>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	4618      	mov	r0, r3
 8004a6a:	3708      	adds	r7, #8
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}
 8004a70:	080263e0 	.word	0x080263e0

08004a74 <_ZN8touchgfx6ButtonD0Ev>:
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b082      	sub	sp, #8
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	f7ff ffe7 	bl	8004a50 <_ZN8touchgfx6ButtonD1Ev>
 8004a82:	2134      	movs	r1, #52	; 0x34
 8004a84:	6878      	ldr	r0, [r7, #4]
 8004a86:	f01d fe88 	bl	802279a <_ZdlPvj>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3708      	adds	r7, #8
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}

08004a94 <_ZN8touchgfx6Button8setAlphaEh>:
     *
     *        Sets the alpha value for the image.
     *
     * @param alpha The alpha value. 255 = completely solid.
     */
    void setAlpha(uint8_t alpha)
 8004a94:	b480      	push	{r7}
 8004a96:	b083      	sub	sp, #12
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
 8004a9c:	460b      	mov	r3, r1
 8004a9e:	70fb      	strb	r3, [r7, #3]
    {
        this->alpha = alpha;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	78fa      	ldrb	r2, [r7, #3]
 8004aa4:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    }
 8004aa8:	bf00      	nop
 8004aaa:	370c      	adds	r7, #12
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr

08004ab4 <_ZN8touchgfx9TypedTextC1Et>:
    explicit TypedText(const TypedTextId id = TYPED_TEXT_INVALID) : typedTextId(id)
 8004ab4:	b480      	push	{r7}
 8004ab6:	b083      	sub	sp, #12
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	460b      	mov	r3, r1
 8004abe:	807b      	strh	r3, [r7, #2]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	887a      	ldrh	r2, [r7, #2]
 8004ac4:	801a      	strh	r2, [r3, #0]
    }
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	4618      	mov	r0, r3
 8004aca:	370c      	adds	r7, #12
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr

08004ad4 <_ZNK8touchgfx9TypedText10hasValidIdEv>:
    bool hasValidId() const
 8004ad4:	b480      	push	{r7}
 8004ad6:	b083      	sub	sp, #12
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
        return typedTextId != TYPED_TEXT_INVALID;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	881b      	ldrh	r3, [r3, #0]
 8004ae0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	bf14      	ite	ne
 8004ae8:	2301      	movne	r3, #1
 8004aea:	2300      	moveq	r3, #0
 8004aec:	b2db      	uxtb	r3, r3
    }
 8004aee:	4618      	mov	r0, r3
 8004af0:	370c      	adds	r7, #12
 8004af2:	46bd      	mov	sp, r7
 8004af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af8:	4770      	bx	lr
	...

08004afc <_ZNK8touchgfx9TypedText7getTextEv>:
    const Unicode::UnicodeChar* getText() const
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b082      	sub	sp, #8
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
        assertValid();
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	f7ff f827 	bl	8003b58 <_ZNK8touchgfx9TypedText11assertValidEv>
        return texts->getText(typedTextId);
 8004b0a:	4b06      	ldr	r3, [pc, #24]	; (8004b24 <_ZNK8touchgfx9TypedText7getTextEv+0x28>)
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	881b      	ldrh	r3, [r3, #0]
 8004b12:	4619      	mov	r1, r3
 8004b14:	4610      	mov	r0, r2
 8004b16:	f003 fb75 	bl	8008204 <_ZNK8touchgfx5Texts7getTextEt>
 8004b1a:	4603      	mov	r3, r0
    }
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	3708      	adds	r7, #8
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}
 8004b24:	2000d240 	.word	0x2000d240

08004b28 <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>:
     *
     *        Sets the text to display on the button. Texts with wildcards are not supported.
     *
     * @param t The text to display.
     */
    void setLabelText(TypedText t)
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b082      	sub	sp, #8
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
 8004b30:	8039      	strh	r1, [r7, #0]
    {
        typedText = t;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	883a      	ldrh	r2, [r7, #0]
 8004b36:	869a      	strh	r2, [r3, #52]	; 0x34
        updateTextPosition();
 8004b38:	6878      	ldr	r0, [r7, #4]
 8004b3a:	f000 f834 	bl	8004ba6 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    }
 8004b3e:	bf00      	nop
 8004b40:	3708      	adds	r7, #8
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}

08004b46 <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeEb>:
     *
     * @param col               The color with which the text label should be drawn.
     * @param performInvalidate Optional parameter. If true, performs an instant invalidation of
     *                          the button.
     */
    void setLabelColor(colortype col, bool performInvalidate = false)
 8004b46:	b580      	push	{r7, lr}
 8004b48:	b084      	sub	sp, #16
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	60f8      	str	r0, [r7, #12]
 8004b4e:	60b9      	str	r1, [r7, #8]
 8004b50:	4613      	mov	r3, r2
 8004b52:	71fb      	strb	r3, [r7, #7]
    {
        color = col;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	68ba      	ldr	r2, [r7, #8]
 8004b58:	639a      	str	r2, [r3, #56]	; 0x38
        if (performInvalidate)
 8004b5a:	79fb      	ldrb	r3, [r7, #7]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d006      	beq.n	8004b6e <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeEb+0x28>
        {
            invalidate();
 8004b60:	68fa      	ldr	r2, [r7, #12]
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	3314      	adds	r3, #20
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4610      	mov	r0, r2
 8004b6c:	4798      	blx	r3
        }
    }
 8004b6e:	bf00      	nop
 8004b70:	3710      	adds	r7, #16
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}

08004b76 <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeEb>:
     * @param col               The color with which the text label should be drawn when the
     *                          button is pressed.
     * @param performInvalidate Optional parameter. If true, performs an instant invalidation of
     *                          the button.
     */
    void setLabelColorPressed(colortype col, bool performInvalidate = false)
 8004b76:	b580      	push	{r7, lr}
 8004b78:	b084      	sub	sp, #16
 8004b7a:	af00      	add	r7, sp, #0
 8004b7c:	60f8      	str	r0, [r7, #12]
 8004b7e:	60b9      	str	r1, [r7, #8]
 8004b80:	4613      	mov	r3, r2
 8004b82:	71fb      	strb	r3, [r7, #7]
    {
        colorPressed = col;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	68ba      	ldr	r2, [r7, #8]
 8004b88:	63da      	str	r2, [r3, #60]	; 0x3c
        if (performInvalidate)
 8004b8a:	79fb      	ldrb	r3, [r7, #7]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d006      	beq.n	8004b9e <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeEb+0x28>
        {
            invalidate();
 8004b90:	68fa      	ldr	r2, [r7, #12]
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	3314      	adds	r3, #20
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4610      	mov	r0, r2
 8004b9c:	4798      	blx	r3
        }
    }
 8004b9e:	bf00      	nop
 8004ba0:	3710      	adds	r7, #16
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}

08004ba6 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>:
     *        If the text changes due to a language change you may need to reposition the label
     *        text to stay horizontally centered.
     *
     * @note The method does not invalidate the button. This must be done manually.
     */
    void updateTextPosition()
 8004ba6:	b590      	push	{r4, r7, lr}
 8004ba8:	b085      	sub	sp, #20
 8004baa:	af00      	add	r7, sp, #0
 8004bac:	6078      	str	r0, [r7, #4]
    {
        if (typedText.hasValidId())
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	3334      	adds	r3, #52	; 0x34
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f7ff ff8e 	bl	8004ad4 <_ZNK8touchgfx9TypedText10hasValidIdEv>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d02e      	beq.n	8004c1c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x76>
        {
            const Font* f = typedText.getFont();
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	3334      	adds	r3, #52	; 0x34
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f7fe ff94 	bl	8003af0 <_ZNK8touchgfx9TypedText7getFontEv>
 8004bc8:	60f8      	str	r0, [r7, #12]
            const Unicode::UnicodeChar* s = typedText.getText();
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	3334      	adds	r3, #52	; 0x34
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f7ff ff94 	bl	8004afc <_ZNK8touchgfx9TypedText7getTextEv>
 8004bd4:	60b8      	str	r0, [r7, #8]
            textHeightIncludingSpacing = f->getMaxTextHeight(s) * f->getNumberOfLines(s) + f->getSpacingAbove(s);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	3328      	adds	r3, #40	; 0x28
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	68b9      	ldr	r1, [r7, #8]
 8004be0:	68f8      	ldr	r0, [r7, #12]
 8004be2:	4798      	blx	r3
 8004be4:	4603      	mov	r3, r0
 8004be6:	b2dc      	uxtb	r4, r3
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	3340      	adds	r3, #64	; 0x40
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	68b9      	ldr	r1, [r7, #8]
 8004bf2:	68f8      	ldr	r0, [r7, #12]
 8004bf4:	4798      	blx	r3
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	b2db      	uxtb	r3, r3
 8004bfa:	fb14 f303 	smulbb	r3, r4, r3
 8004bfe:	b2dc      	uxtb	r4, r3
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	3324      	adds	r3, #36	; 0x24
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	68b9      	ldr	r1, [r7, #8]
 8004c0a:	68f8      	ldr	r0, [r7, #12]
 8004c0c:	4798      	blx	r3
 8004c0e:	4603      	mov	r3, r0
 8004c10:	4423      	add	r3, r4
 8004c12:	b2da      	uxtb	r2, r3
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        }
        else
        {
            textHeightIncludingSpacing = 0;
        }
    }
 8004c1a:	e003      	b.n	8004c24 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x7e>
            textHeightIncludingSpacing = 0;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
 8004c24:	bf00      	nop
 8004c26:	3714      	adds	r7, #20
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd90      	pop	{r4, r7, pc}

08004c2c <_ZN8touchgfx26DrawableListItemsInterfaceD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destuctor.
     */
    virtual ~DrawableListItemsInterface()
 8004c2c:	b480      	push	{r7}
 8004c2e:	b083      	sub	sp, #12
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
    {
 8004c34:	4a04      	ldr	r2, [pc, #16]	; (8004c48 <_ZN8touchgfx26DrawableListItemsInterfaceD1Ev+0x1c>)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	601a      	str	r2, [r3, #0]
    }
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	370c      	adds	r7, #12
 8004c40:	46bd      	mov	sp, r7
 8004c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c46:	4770      	bx	lr
 8004c48:	08024900 	.word	0x08024900

08004c4c <_ZN8touchgfx26DrawableListItemsInterfaceD0Ev>:
    virtual ~DrawableListItemsInterface()
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b082      	sub	sp, #8
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
    }
 8004c54:	6878      	ldr	r0, [r7, #4]
 8004c56:	f7ff ffe9 	bl	8004c2c <_ZN8touchgfx26DrawableListItemsInterfaceD1Ev>
 8004c5a:	2104      	movs	r1, #4
 8004c5c:	6878      	ldr	r0, [r7, #4]
 8004c5e:	f01d fd9c 	bl	802279a <_ZdlPvj>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	4618      	mov	r0, r3
 8004c66:	3708      	adds	r7, #8
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}

08004c6c <_ZN8touchgfx12DrawableListD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~DrawableList()
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b082      	sub	sp, #8
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
    {
 8004c74:	4a05      	ldr	r2, [pc, #20]	; (8004c8c <_ZN8touchgfx12DrawableListD1Ev+0x20>)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	601a      	str	r2, [r3, #0]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	f7ff fd71 	bl	8004764 <_ZN8touchgfx9ContainerD1Ev>
    }
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	4618      	mov	r0, r3
 8004c86:	3708      	adds	r7, #8
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}
 8004c8c:	08025258 	.word	0x08025258

08004c90 <_ZN8touchgfx12DrawableListD0Ev>:
    virtual ~DrawableList()
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b082      	sub	sp, #8
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
    }
 8004c98:	6878      	ldr	r0, [r7, #4]
 8004c9a:	f7ff ffe7 	bl	8004c6c <_ZN8touchgfx12DrawableListD1Ev>
 8004c9e:	214c      	movs	r1, #76	; 0x4c
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	f01d fd7a 	bl	802279a <_ZdlPvj>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	4618      	mov	r0, r3
 8004caa:	3708      	adds	r7, #8
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}

08004cb0 <_ZN8touchgfx10ScrollBaseD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~ScrollBase()
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b082      	sub	sp, #8
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
    {
 8004cb8:	4a08      	ldr	r2, [pc, #32]	; (8004cdc <_ZN8touchgfx10ScrollBaseD1Ev+0x2c>)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	601a      	str	r2, [r3, #0]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	332c      	adds	r3, #44	; 0x2c
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f7ff ffd2 	bl	8004c6c <_ZN8touchgfx12DrawableListD1Ev>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f7ff fd4a 	bl	8004764 <_ZN8touchgfx9ContainerD1Ev>
    }
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3708      	adds	r7, #8
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}
 8004cda:	bf00      	nop
 8004cdc:	080253d8 	.word	0x080253d8

08004ce0 <_ZN8touchgfx10ScrollBaseD0Ev>:
    virtual ~ScrollBase()
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b082      	sub	sp, #8
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
    }
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f7ff ffe1 	bl	8004cb0 <_ZN8touchgfx10ScrollBaseD1Ev>
 8004cee:	21bc      	movs	r1, #188	; 0xbc
 8004cf0:	6878      	ldr	r0, [r7, #4]
 8004cf2:	f01d fd52 	bl	802279a <_ZdlPvj>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	3708      	adds	r7, #8
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}

08004d00 <_ZN8touchgfx10ScrollBase10initializeEv>:
     *
     * @brief Initializes the contents of all drawables.
     *
     *        Initializes the contents of all drawables.
     */
    virtual void initialize()
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b082      	sub	sp, #8
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
    {
        list.refreshDrawables();
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	332c      	adds	r3, #44	; 0x2c
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	f00d ff3f 	bl	8012b90 <_ZN8touchgfx12DrawableList16refreshDrawablesEv>
    }
 8004d12:	bf00      	nop
 8004d14:	3708      	adds	r7, #8
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}
	...

08004d1c <_ZN8touchgfx10ScrollListD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~ScrollList()
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b082      	sub	sp, #8
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
    {
 8004d24:	4a05      	ldr	r2, [pc, #20]	; (8004d3c <_ZN8touchgfx10ScrollListD1Ev+0x20>)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	601a      	str	r2, [r3, #0]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f7ff ffbf 	bl	8004cb0 <_ZN8touchgfx10ScrollBaseD1Ev>
    }
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	4618      	mov	r0, r3
 8004d36:	3708      	adds	r7, #8
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}
 8004d3c:	08025304 	.word	0x08025304

08004d40 <_ZN8touchgfx10ScrollListD0Ev>:
    virtual ~ScrollList()
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b082      	sub	sp, #8
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
    }
 8004d48:	6878      	ldr	r0, [r7, #4]
 8004d4a:	f7ff ffe7 	bl	8004d1c <_ZN8touchgfx10ScrollListD1Ev>
 8004d4e:	21c4      	movs	r1, #196	; 0xc4
 8004d50:	6878      	ldr	r0, [r7, #4]
 8004d52:	f01d fd22 	bl	802279a <_ZdlPvj>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	4618      	mov	r0, r3
 8004d5a:	3708      	adds	r7, #8
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}

08004d60 <_ZN8touchgfx8TextAreaC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Create an empty TextArea. Default color is black.
     */
    TextArea()
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b082      	sub	sp, #8
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f7ff fd84 	bl	8004878 <_ZN8touchgfx6WidgetC1Ev>
 8004d70:	4a13      	ldr	r2, [pc, #76]	; (8004dc0 <_ZN8touchgfx8TextAreaC1Ev+0x60>)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	601a      	str	r2, [r3, #0]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	3326      	adds	r3, #38	; 0x26
 8004d7a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f7ff fe98 	bl	8004ab4 <_ZN8touchgfx9TypedTextC1Et>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	3328      	adds	r3, #40	; 0x28
 8004d88:	2100      	movs	r1, #0
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f7ff fb19 	bl	80043c2 <_ZN8touchgfx9colortypeC1Em>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2200      	movs	r2, #0
 8004d94:	859a      	strh	r2, [r3, #44]	; 0x2c
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	22ff      	movs	r2, #255	; 0xff
 8004d9a:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2200      	movs	r2, #0
 8004da2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2200      	movs	r2, #0
 8004daa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2200      	movs	r2, #0
 8004db2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    {
    }
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	4618      	mov	r0, r3
 8004dba:	3708      	adds	r7, #8
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}
 8004dc0:	08026298 	.word	0x08026298

08004dc4 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
     *
     *        Gets solid rectangle.
     *
     * @return the largest solid rectangle for this widget. For a TextArea, this is an empty area.
     */
    virtual Rect getSolidRect() const
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b084      	sub	sp, #16
 8004dc8:	af02      	add	r7, sp, #8
 8004dca:	6078      	str	r0, [r7, #4]
 8004dcc:	6039      	str	r1, [r7, #0]
    {
        return Rect(0, 0, 0, 0);
 8004dce:	2300      	movs	r3, #0
 8004dd0:	9300      	str	r3, [sp, #0]
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	2100      	movs	r1, #0
 8004dd8:	6878      	ldr	r0, [r7, #4]
 8004dda:	f7ff fb01 	bl	80043e0 <_ZN8touchgfx4RectC1Essss>
    }
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	3708      	adds	r7, #8
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}

08004de6 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>:
     *
     *        Sets the color of the text.
     *
     * @param color The color to use.
     */
    inline void setColor(colortype color)
 8004de6:	b480      	push	{r7}
 8004de8:	b083      	sub	sp, #12
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	6078      	str	r0, [r7, #4]
 8004dee:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	683a      	ldr	r2, [r7, #0]
 8004df4:	629a      	str	r2, [r3, #40]	; 0x28
    }
 8004df6:	bf00      	nop
 8004df8:	370c      	adds	r7, #12
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e00:	4770      	bx	lr

08004e02 <_ZN8touchgfx8TextArea12setBaselineYEs>:
     *        changes you have to set the baseline again. Note that setTypedText must be called
     *        prior to setting the baseline.
     *
     * @param baselineY The y coordinate of the baseline.
     */
    virtual void setBaselineY(int16_t baselineY)
 8004e02:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e04:	b085      	sub	sp, #20
 8004e06:	af00      	add	r7, sp, #0
 8004e08:	6078      	str	r0, [r7, #4]
 8004e0a:	460b      	mov	r3, r1
 8004e0c:	807b      	strh	r3, [r7, #2]
    {
        setY(baselineY - getTypedText().getFont()->getFontHeight());
 8004e0e:	687e      	ldr	r6, [r7, #4]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	3330      	adds	r3, #48	; 0x30
 8004e16:	681c      	ldr	r4, [r3, #0]
 8004e18:	887d      	ldrh	r5, [r7, #2]
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f000 f845 	bl	8004eaa <_ZNK8touchgfx8TextArea12getTypedTextEv>
 8004e20:	4603      	mov	r3, r0
 8004e22:	81bb      	strh	r3, [r7, #12]
 8004e24:	f107 030c 	add.w	r3, r7, #12
 8004e28:	4618      	mov	r0, r3
 8004e2a:	f7fe fe61 	bl	8003af0 <_ZNK8touchgfx9TypedText7getFontEv>
 8004e2e:	4602      	mov	r2, r0
 8004e30:	6813      	ldr	r3, [r2, #0]
 8004e32:	332c      	adds	r3, #44	; 0x2c
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4610      	mov	r0, r2
 8004e38:	4798      	blx	r3
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	1aeb      	subs	r3, r5, r3
 8004e3e:	b29b      	uxth	r3, r3
 8004e40:	b21b      	sxth	r3, r3
 8004e42:	4619      	mov	r1, r3
 8004e44:	4630      	mov	r0, r6
 8004e46:	47a0      	blx	r4
    }
 8004e48:	bf00      	nop
 8004e4a:	3714      	adds	r7, #20
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004e50 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
     *        coordinate of the TextArea.
     *
     * @param x         The x coordinate of the TextArea.
     * @param baselineY The y coordinate of the baseline.
     */
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b082      	sub	sp, #8
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
 8004e58:	460b      	mov	r3, r1
 8004e5a:	807b      	strh	r3, [r7, #2]
 8004e5c:	4613      	mov	r3, r2
 8004e5e:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 8004e60:	687a      	ldr	r2, [r7, #4]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	332c      	adds	r3, #44	; 0x2c
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8004e6e:	4610      	mov	r0, r2
 8004e70:	4798      	blx	r3
        setBaselineY(baselineY);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	3360      	adds	r3, #96	; 0x60
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f9b7 2000 	ldrsh.w	r2, [r7]
 8004e7e:	4611      	mov	r1, r2
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	4798      	blx	r3
    }
 8004e84:	bf00      	nop
 8004e86:	3708      	adds	r7, #8
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}

08004e8c <_ZN8touchgfx8TextArea14setLinespacingEs>:
     *
     *        Sets the line spacing of the TextArea.
     *
     * @param space The line spacing of use in the TextArea.
     */
    inline void setLinespacing(int16_t space)
 8004e8c:	b480      	push	{r7}
 8004e8e:	b083      	sub	sp, #12
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
 8004e94:	460b      	mov	r3, r1
 8004e96:	807b      	strh	r3, [r7, #2]
    {
        linespace = space;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	887a      	ldrh	r2, [r7, #2]
 8004e9c:	859a      	strh	r2, [r3, #44]	; 0x2c
    }
 8004e9e:	bf00      	nop
 8004ea0:	370c      	adds	r7, #12
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea8:	4770      	bx	lr

08004eaa <_ZNK8touchgfx8TextArea12getTypedTextEv>:
     *
     *        Gets the TypedText of the text area.
     *
     * @return The currently used TypedText.
     */
    TypedText getTypedText() const
 8004eaa:	b480      	push	{r7}
 8004eac:	b083      	sub	sp, #12
 8004eae:	af00      	add	r7, sp, #0
 8004eb0:	6078      	str	r0, [r7, #4]
    {
        return typedText;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    }
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	370c      	adds	r7, #12
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec0:	4770      	bx	lr

08004ec2 <_ZN8touchgfx7CWRUtil2Q5C1Ei>:
         *        Constructor from integer. No conversion is done - the integer is assumed to
         *        already be in Q5 format.
         *
         * @param i Integer pre-formattet in Q5 format.
         */
        explicit Q5(int i) : v(i) { }
 8004ec2:	b480      	push	{r7}
 8004ec4:	b083      	sub	sp, #12
 8004ec6:	af00      	add	r7, sp, #0
 8004ec8:	6078      	str	r0, [r7, #4]
 8004eca:	6039      	str	r1, [r7, #0]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	683a      	ldr	r2, [r7, #0]
 8004ed0:	601a      	str	r2, [r3, #0]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	370c      	adds	r7, #12
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ede:	4770      	bx	lr

08004ee0 <_ZNK8touchgfx7CWRUtil2Q5cviEv>:
         *
         *        Gets the Q5 as an integer without conversion.
         *
         * @return The unconverted Q5 value.
         */
        operator int() const
 8004ee0:	b480      	push	{r7}
 8004ee2:	b083      	sub	sp, #12
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
        {
            return v;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
        }
 8004eec:	4618      	mov	r0, r3
 8004eee:	370c      	adds	r7, #12
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef6:	4770      	bx	lr

08004ef8 <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E>:
     *
     * @note The area containing the Line is not invalidated.
     *
     * @see updateLineWidth
     */
    void setLineWidth(CWRUtil::Q5 widthQ5)
 8004ef8:	b590      	push	{r4, r7, lr}
 8004efa:	b083      	sub	sp, #12
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
 8004f00:	6039      	str	r1, [r7, #0]
    {
        if (lineWidth == widthQ5)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	3340      	adds	r3, #64	; 0x40
 8004f06:	4618      	mov	r0, r3
 8004f08:	f7ff ffea 	bl	8004ee0 <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 8004f0c:	4604      	mov	r4, r0
 8004f0e:	463b      	mov	r3, r7
 8004f10:	4618      	mov	r0, r3
 8004f12:	f7ff ffe5 	bl	8004ee0 <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 8004f16:	4603      	mov	r3, r0
 8004f18:	429c      	cmp	r4, r3
 8004f1a:	bf0c      	ite	eq
 8004f1c:	2301      	moveq	r3, #1
 8004f1e:	2300      	movne	r3, #0
 8004f20:	b2db      	uxtb	r3, r3
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d106      	bne.n	8004f34 <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E+0x3c>
        {
            return;
        }

        lineWidth = widthQ5;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	683a      	ldr	r2, [r7, #0]
 8004f2a:	641a      	str	r2, [r3, #64]	; 0x40

        updateCachedShape();
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	f00f feef 	bl	8014d10 <_ZN8touchgfx4Line17updateCachedShapeEv>
 8004f32:	e000      	b.n	8004f36 <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E+0x3e>
            return;
 8004f34:	bf00      	nop
    }
 8004f36:	370c      	adds	r7, #12
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd90      	pop	{r4, r7, pc}

08004f3c <_ZN8touchgfx21AbstractPainterRGB888D1Ev>:
    AbstractPainterRGB888()
    {
        assert(compatibleFramebuffer(Bitmap::RGB888) && "The chosen painter only works with RGB888 displays");
    }

    virtual ~AbstractPainterRGB888() {}
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b082      	sub	sp, #8
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
 8004f44:	4a05      	ldr	r2, [pc, #20]	; (8004f5c <_ZN8touchgfx21AbstractPainterRGB888D1Ev+0x20>)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	601a      	str	r2, [r3, #0]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	f00f fcf3 	bl	8014938 <_ZN8touchgfx15AbstractPainterD1Ev>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	4618      	mov	r0, r3
 8004f56:	3708      	adds	r7, #8
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bd80      	pop	{r7, pc}
 8004f5c:	08025d80 	.word	0x08025d80

08004f60 <_ZN8touchgfx21AbstractPainterRGB888D0Ev>:
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b082      	sub	sp, #8
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
 8004f68:	6878      	ldr	r0, [r7, #4]
 8004f6a:	f7ff ffe7 	bl	8004f3c <_ZN8touchgfx21AbstractPainterRGB888D1Ev>
 8004f6e:	2114      	movs	r1, #20
 8004f70:	6878      	ldr	r0, [r7, #4]
 8004f72:	f01d fc12 	bl	802279a <_ZdlPvj>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	4618      	mov	r0, r3
 8004f7a:	3708      	adds	r7, #8
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd80      	pop	{r7, pc}

08004f80 <_ZN8touchgfx8TextAreaD1Ev>:
class TextArea : public Widget
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b082      	sub	sp, #8
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
 8004f88:	4a05      	ldr	r2, [pc, #20]	; (8004fa0 <_ZN8touchgfx8TextAreaD1Ev+0x20>)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	601a      	str	r2, [r3, #0]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	4618      	mov	r0, r3
 8004f92:	f7ff fc83 	bl	800489c <_ZN8touchgfx6WidgetD1Ev>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3708      	adds	r7, #8
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}
 8004fa0:	08026298 	.word	0x08026298

08004fa4 <_ZN8touchgfx8TextAreaD0Ev>:
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b082      	sub	sp, #8
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
 8004fac:	6878      	ldr	r0, [r7, #4]
 8004fae:	f7ff ffe7 	bl	8004f80 <_ZN8touchgfx8TextAreaD1Ev>
 8004fb2:	2134      	movs	r1, #52	; 0x34
 8004fb4:	6878      	ldr	r0, [r7, #4]
 8004fb6:	f01d fbf0 	bl	802279a <_ZdlPvj>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	3708      	adds	r7, #8
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}

08004fc4 <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev>:
     *
     *        Create an empty text area.
     *
     * @note No text can be displayed until a font is set. Default color is black.
     */
    TextAreaWithWildcardBase()
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b082      	sub	sp, #8
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
        : TextArea()
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f7ff fec6 	bl	8004d60 <_ZN8touchgfx8TextAreaC1Ev>
 8004fd4:	4a03      	ldr	r2, [pc, #12]	; (8004fe4 <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev+0x20>)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	601a      	str	r2, [r3, #0]
    {
    }
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	4618      	mov	r0, r3
 8004fde:	3708      	adds	r7, #8
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}
 8004fe4:	08024884 	.word	0x08024884

08004fe8 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>:
class TextAreaWithWildcardBase : public TextArea
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b082      	sub	sp, #8
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
 8004ff0:	4a05      	ldr	r2, [pc, #20]	; (8005008 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev+0x20>)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	601a      	str	r2, [r3, #0]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	f7ff ffc1 	bl	8004f80 <_ZN8touchgfx8TextAreaD1Ev>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	4618      	mov	r0, r3
 8005002:	3708      	adds	r7, #8
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}
 8005008:	08024884 	.word	0x08024884

0800500c <_ZN8touchgfx24TextAreaWithWildcardBaseD0Ev>:
 800500c:	b580      	push	{r7, lr}
 800500e:	b082      	sub	sp, #8
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	f7ff ffe7 	bl	8004fe8 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>
 800501a:	2134      	movs	r1, #52	; 0x34
 800501c:	6878      	ldr	r0, [r7, #4]
 800501e:	f01d fbbc 	bl	802279a <_ZdlPvj>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	4618      	mov	r0, r3
 8005026:	3708      	adds	r7, #8
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}

0800502c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>:
     *
     *        Create an empty text area.
     *
     * @note No text can be displayed until a font is set. Default color is black.
     */
    TextAreaWithOneWildcard()
 800502c:	b580      	push	{r7, lr}
 800502e:	b082      	sub	sp, #8
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
        : TextAreaWithWildcardBase(), wildcard(0)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	4618      	mov	r0, r3
 8005038:	f7ff ffc4 	bl	8004fc4 <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev>
 800503c:	4a05      	ldr	r2, [pc, #20]	; (8005054 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev+0x28>)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	601a      	str	r2, [r3, #0]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2200      	movs	r2, #0
 8005046:	635a      	str	r2, [r3, #52]	; 0x34
    {
    }
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	4618      	mov	r0, r3
 800504c:	3708      	adds	r7, #8
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}
 8005052:	bf00      	nop
 8005054:	08026484 	.word	0x08026484

08005058 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>:
     *
     *        Sets the wildcard in the text.Must be a zero-terminated UnicodeChar array.
     *
     * @param value A pointer to the UnicodeChar to set the wildcard to.
     */
    void setWildcard(const Unicode::UnicodeChar* value)
 8005058:	b480      	push	{r7}
 800505a:	b083      	sub	sp, #12
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
 8005060:	6039      	str	r1, [r7, #0]
    {
        wildcard = value;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	683a      	ldr	r2, [r7, #0]
 8005066:	635a      	str	r2, [r3, #52]	; 0x34
    }
 8005068:	bf00      	nop
 800506a:	370c      	adds	r7, #12
 800506c:	46bd      	mov	sp, r7
 800506e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005072:	4770      	bx	lr

08005074 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>:
class View : public Screen
 8005074:	b580      	push	{r7, lr}
 8005076:	b082      	sub	sp, #8
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
 800507c:	4a05      	ldr	r2, [pc, #20]	; (8005094 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev+0x20>)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	601a      	str	r2, [r3, #0]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	4618      	mov	r0, r3
 8005086:	f7ff fb8f 	bl	80047a8 <_ZN8touchgfx6ScreenD1Ev>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	4618      	mov	r0, r3
 800508e:	3708      	adds	r7, #8
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}
 8005094:	08024850 	.word	0x08024850

08005098 <_ZN8touchgfx4ViewI16Screen1PresenterED0Ev>:
 8005098:	b580      	push	{r7, lr}
 800509a:	b082      	sub	sp, #8
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	f7ff ffe7 	bl	8005074 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 80050a6:	2140      	movs	r1, #64	; 0x40
 80050a8:	6878      	ldr	r0, [r7, #4]
 80050aa:	f01d fb76 	bl	802279a <_ZdlPvj>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	4618      	mov	r0, r3
 80050b2:	3708      	adds	r7, #8
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}

080050b8 <_ZN15Screen1ViewBaseD1Ev>:

class Screen1ViewBase : public touchgfx::View<Screen1Presenter>
{
public:
    Screen1ViewBase();
    virtual ~Screen1ViewBase() {}
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b082      	sub	sp, #8
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
 80050c0:	4a99      	ldr	r2, [pc, #612]	; (8005328 <_ZN15Screen1ViewBaseD1Ev+0x270>)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	601a      	str	r2, [r3, #0]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	f503 636b 	add.w	r3, r3, #3760	; 0xeb0
 80050cc:	4618      	mov	r0, r3
 80050ce:	f002 fdb9 	bl	8007c44 <_ZN8touchgfx8CallbackI15Screen1ViewBasePNS_26DrawableListItemsInterfaceEssED1Ev>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	f503 636a 	add.w	r3, r3, #3744	; 0xea0
 80050d8:	4618      	mov	r0, r3
 80050da:	f002 fdd5 	bl	8007c88 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	f603 631c 	addw	r3, r3, #3612	; 0xe1c
 80050e4:	4618      	mov	r0, r3
 80050e6:	f002 fe13 	bl	8007d10 <_ZN8touchgfx15ButtonWithLabelD1Ev>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	f603 53d8 	addw	r3, r3, #3544	; 0xdd8
 80050f0:	4618      	mov	r0, r3
 80050f2:	f002 fe0d 	bl	8007d10 <_ZN8touchgfx15ButtonWithLabelD1Ev>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	f603 5394 	addw	r3, r3, #3476	; 0xd94
 80050fc:	4618      	mov	r0, r3
 80050fe:	f002 fe07 	bl	8007d10 <_ZN8touchgfx15ButtonWithLabelD1Ev>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	f503 6355 	add.w	r3, r3, #3408	; 0xd50
 8005108:	4618      	mov	r0, r3
 800510a:	f002 fe01 	bl	8007d10 <_ZN8touchgfx15ButtonWithLabelD1Ev>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	f603 530c 	addw	r3, r3, #3340	; 0xd0c
 8005114:	4618      	mov	r0, r3
 8005116:	f002 fdfb 	bl	8007d10 <_ZN8touchgfx15ButtonWithLabelD1Ev>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	f603 43c8 	addw	r3, r3, #3272	; 0xcc8
 8005120:	4618      	mov	r0, r3
 8005122:	f002 fdf5 	bl	8007d10 <_ZN8touchgfx15ButtonWithLabelD1Ev>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	f603 4384 	addw	r3, r3, #3204	; 0xc84
 800512c:	4618      	mov	r0, r3
 800512e:	f002 fdef 	bl	8007d10 <_ZN8touchgfx15ButtonWithLabelD1Ev>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	f503 6344 	add.w	r3, r3, #3136	; 0xc40
 8005138:	4618      	mov	r0, r3
 800513a:	f002 fde9 	bl	8007d10 <_ZN8touchgfx15ButtonWithLabelD1Ev>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	f603 33fc 	addw	r3, r3, #3068	; 0xbfc
 8005144:	4618      	mov	r0, r3
 8005146:	f002 fde3 	bl	8007d10 <_ZN8touchgfx15ButtonWithLabelD1Ev>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	f603 33c8 	addw	r3, r3, #3016	; 0xbc8
 8005150:	4618      	mov	r0, r3
 8005152:	f7ff ff15 	bl	8004f80 <_ZN8touchgfx8TextAreaD1Ev>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	f503 6339 	add.w	r3, r3, #2960	; 0xb90
 800515c:	4618      	mov	r0, r3
 800515e:	f002 fe3d 	bl	8007ddc <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	f603 3358 	addw	r3, r3, #2904	; 0xb58
 8005168:	4618      	mov	r0, r3
 800516a:	f002 fe37 	bl	8007ddc <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	f503 6332 	add.w	r3, r3, #2848	; 0xb20
 8005174:	4618      	mov	r0, r3
 8005176:	f002 fe31 	bl	8007ddc <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	f603 23e8 	addw	r3, r3, #2792	; 0xae8
 8005180:	4618      	mov	r0, r3
 8005182:	f002 fe2b 	bl	8007ddc <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	f503 632d 	add.w	r3, r3, #2768	; 0xad0
 800518c:	4618      	mov	r0, r3
 800518e:	f002 fe03 	bl	8007d98 <_ZN8touchgfx13PainterRGB888D1Ev>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	f603 235c 	addw	r3, r3, #2652	; 0xa5c
 8005198:	4618      	mov	r0, r3
 800519a:	f002 fddb 	bl	8007d54 <_ZN8touchgfx4LineD1Ev>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	f603 2318 	addw	r3, r3, #2584	; 0xa18
 80051a4:	4618      	mov	r0, r3
 80051a6:	f002 fdb3 	bl	8007d10 <_ZN8touchgfx15ButtonWithLabelD1Ev>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	f603 13d4 	addw	r3, r3, #2516	; 0x9d4
 80051b0:	4618      	mov	r0, r3
 80051b2:	f002 fdad 	bl	8007d10 <_ZN8touchgfx15ButtonWithLabelD1Ev>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	f503 6319 	add.w	r3, r3, #2448	; 0x990
 80051bc:	4618      	mov	r0, r3
 80051be:	f002 fda7 	bl	8007d10 <_ZN8touchgfx15ButtonWithLabelD1Ev>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	f603 134c 	addw	r3, r3, #2380	; 0x94c
 80051c8:	4618      	mov	r0, r3
 80051ca:	f002 fda1 	bl	8007d10 <_ZN8touchgfx15ButtonWithLabelD1Ev>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	f603 1334 	addw	r3, r3, #2356	; 0x934
 80051d4:	4618      	mov	r0, r3
 80051d6:	f002 fddf 	bl	8007d98 <_ZN8touchgfx13PainterRGB888D1Ev>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	f503 630c 	add.w	r3, r3, #2240	; 0x8c0
 80051e0:	4618      	mov	r0, r3
 80051e2:	f002 fdb7 	bl	8007d54 <_ZN8touchgfx4LineD1Ev>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	f603 03a8 	addw	r3, r3, #2216	; 0x8a8
 80051ec:	4618      	mov	r0, r3
 80051ee:	f002 fdd3 	bl	8007d98 <_ZN8touchgfx13PainterRGB888D1Ev>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	f603 0334 	addw	r3, r3, #2100	; 0x834
 80051f8:	4618      	mov	r0, r3
 80051fa:	f002 fdab 	bl	8007d54 <_ZN8touchgfx4LineD1Ev>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 8005204:	4618      	mov	r0, r3
 8005206:	f002 fdc7 	bl	8007d98 <_ZN8touchgfx13PainterRGB888D1Ev>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	f503 63f5 	add.w	r3, r3, #1960	; 0x7a8
 8005210:	4618      	mov	r0, r3
 8005212:	f002 fd9f 	bl	8007d54 <_ZN8touchgfx4LineD1Ev>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	f203 7374 	addw	r3, r3, #1908	; 0x774
 800521c:	4618      	mov	r0, r3
 800521e:	f7ff feaf 	bl	8004f80 <_ZN8touchgfx8TextAreaD1Ev>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	f503 63e8 	add.w	r3, r3, #1856	; 0x740
 8005228:	4618      	mov	r0, r3
 800522a:	f7ff fea9 	bl	8004f80 <_ZN8touchgfx8TextAreaD1Ev>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f203 730c 	addw	r3, r3, #1804	; 0x70c
 8005234:	4618      	mov	r0, r3
 8005236:	f7ff fea3 	bl	8004f80 <_ZN8touchgfx8TextAreaD1Ev>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	f503 63db 	add.w	r3, r3, #1752	; 0x6d8
 8005240:	4618      	mov	r0, r3
 8005242:	f7ff fe9d 	bl	8004f80 <_ZN8touchgfx8TextAreaD1Ev>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	f503 63d8 	add.w	r3, r3, #1728	; 0x6c0
 800524c:	4618      	mov	r0, r3
 800524e:	f002 fda3 	bl	8007d98 <_ZN8touchgfx13PainterRGB888D1Ev>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	f203 634c 	addw	r3, r3, #1612	; 0x64c
 8005258:	4618      	mov	r0, r3
 800525a:	f002 fd7b 	bl	8007d54 <_ZN8touchgfx4LineD1Ev>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	f203 6334 	addw	r3, r3, #1588	; 0x634
 8005264:	4618      	mov	r0, r3
 8005266:	f002 fd97 	bl	8007d98 <_ZN8touchgfx13PainterRGB888D1Ev>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	f503 63b8 	add.w	r3, r3, #1472	; 0x5c0
 8005270:	4618      	mov	r0, r3
 8005272:	f002 fd6f 	bl	8007d54 <_ZN8touchgfx4LineD1Ev>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	f503 63b5 	add.w	r3, r3, #1448	; 0x5a8
 800527c:	4618      	mov	r0, r3
 800527e:	f002 fd8b 	bl	8007d98 <_ZN8touchgfx13PainterRGB888D1Ev>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f203 5334 	addw	r3, r3, #1332	; 0x534
 8005288:	4618      	mov	r0, r3
 800528a:	f002 fd63 	bl	8007d54 <_ZN8touchgfx4LineD1Ev>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005294:	4618      	mov	r0, r3
 8005296:	f7ff fe73 	bl	8004f80 <_ZN8touchgfx8TextAreaD1Ev>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f203 43cc 	addw	r3, r3, #1228	; 0x4cc
 80052a0:	4618      	mov	r0, r3
 80052a2:	f7ff fe6d 	bl	8004f80 <_ZN8touchgfx8TextAreaD1Ev>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	f503 6391 	add.w	r3, r3, #1160	; 0x488
 80052ac:	4618      	mov	r0, r3
 80052ae:	f002 fd2f 	bl	8007d10 <_ZN8touchgfx15ButtonWithLabelD1Ev>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	f203 4344 	addw	r3, r3, #1092	; 0x444
 80052b8:	4618      	mov	r0, r3
 80052ba:	f002 fd29 	bl	8007d10 <_ZN8touchgfx15ButtonWithLabelD1Ev>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052c4:	4618      	mov	r0, r3
 80052c6:	f002 fd23 	bl	8007d10 <_ZN8touchgfx15ButtonWithLabelD1Ev>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	f503 7350 	add.w	r3, r3, #832	; 0x340
 80052d0:	4618      	mov	r0, r3
 80052d2:	f00d f8db 	bl	801248c <_ZN8touchgfx11BoxProgressD1Ev>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	f503 7343 	add.w	r3, r3, #780	; 0x30c
 80052dc:	4618      	mov	r0, r3
 80052de:	f7ff fbb7 	bl	8004a50 <_ZN8touchgfx6ButtonD1Ev>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80052e8:	4618      	mov	r0, r3
 80052ea:	f002 faff 	bl	80078ec <_ZN8touchgfx17DrawableListItemsI14imageContainerLi4EED1Ev>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	33e4      	adds	r3, #228	; 0xe4
 80052f2:	4618      	mov	r0, r3
 80052f4:	f7ff fd12 	bl	8004d1c <_ZN8touchgfx10ScrollListD1Ev>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	33a0      	adds	r3, #160	; 0xa0
 80052fc:	4618      	mov	r0, r3
 80052fe:	f002 fd07 	bl	8007d10 <_ZN8touchgfx15ButtonWithLabelD1Ev>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	336c      	adds	r3, #108	; 0x6c
 8005306:	4618      	mov	r0, r3
 8005308:	f7ff fba2 	bl	8004a50 <_ZN8touchgfx6ButtonD1Ev>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	3340      	adds	r3, #64	; 0x40
 8005310:	4618      	mov	r0, r3
 8005312:	f002 fcdb 	bl	8007ccc <_ZN8touchgfx5ImageD1Ev>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	4618      	mov	r0, r3
 800531a:	f7ff feab 	bl	8005074 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	4618      	mov	r0, r3
 8005322:	3708      	adds	r7, #8
 8005324:	46bd      	mov	sp, r7
 8005326:	bd80      	pop	{r7, pc}
 8005328:	08024768 	.word	0x08024768

0800532c <_ZN15Screen1ViewBaseD0Ev>:
 800532c:	b580      	push	{r7, lr}
 800532e:	b082      	sub	sp, #8
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	f7ff febf 	bl	80050b8 <_ZN15Screen1ViewBaseD1Ev>
 800533a:	f643 51a0 	movw	r1, #15776	; 0x3da0
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f01d fa2b 	bl	802279a <_ZdlPvj>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	4618      	mov	r0, r3
 8005348:	3708      	adds	r7, #8
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}

0800534e <_ZN15Screen1ViewBase20ScrollListUpdateItemER14imageContainers>:
    virtual void setupScreen();
    virtual void handleKeyEvent(uint8_t key);

    virtual void ScrollListUpdateItem(imageContainer& item, int16_t itemIndex)
 800534e:	b480      	push	{r7}
 8005350:	b085      	sub	sp, #20
 8005352:	af00      	add	r7, sp, #0
 8005354:	60f8      	str	r0, [r7, #12]
 8005356:	60b9      	str	r1, [r7, #8]
 8005358:	4613      	mov	r3, r2
 800535a:	80fb      	strh	r3, [r7, #6]
    {
        // Override and implement this function in Screen1
    }
 800535c:	bf00      	nop
 800535e:	3714      	adds	r7, #20
 8005360:	46bd      	mov	sp, r7
 8005362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005366:	4770      	bx	lr

08005368 <_ZN15Screen1ViewBase9PourDrinkEv>:

    /*
     * Virtual Action Handlers
     */
    virtual void PourDrink()
 8005368:	b480      	push	{r7}
 800536a:	b083      	sub	sp, #12
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Screen1
    }
 8005370:	bf00      	nop
 8005372:	370c      	adds	r7, #12
 8005374:	46bd      	mov	sp, r7
 8005376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537a:	4770      	bx	lr

0800537c <_ZN15Screen1ViewBase14SettingsScreenEv>:

    virtual void SettingsScreen()
 800537c:	b480      	push	{r7}
 800537e:	b083      	sub	sp, #12
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Screen1
    }
 8005384:	bf00      	nop
 8005386:	370c      	adds	r7, #12
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr

08005390 <_ZN15Screen1ViewBase12ExitSettingsEv>:

    virtual void ExitSettings()
 8005390:	b480      	push	{r7}
 8005392:	b083      	sub	sp, #12
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Screen1
    }
 8005398:	bf00      	nop
 800539a:	370c      	adds	r7, #12
 800539c:	46bd      	mov	sp, r7
 800539e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a2:	4770      	bx	lr

080053a4 <_ZN15Screen1ViewBase10Click250mLEv>:

    virtual void Click250mL()
 80053a4:	b480      	push	{r7}
 80053a6:	b083      	sub	sp, #12
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Screen1
    }
 80053ac:	bf00      	nop
 80053ae:	370c      	adds	r7, #12
 80053b0:	46bd      	mov	sp, r7
 80053b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b6:	4770      	bx	lr

080053b8 <_ZN15Screen1ViewBase10Click500mLEv>:

    virtual void Click500mL()
 80053b8:	b480      	push	{r7}
 80053ba:	b083      	sub	sp, #12
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Screen1
    }
 80053c0:	bf00      	nop
 80053c2:	370c      	adds	r7, #12
 80053c4:	46bd      	mov	sp, r7
 80053c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ca:	4770      	bx	lr

080053cc <_ZN15Screen1ViewBase10Click750mLEv>:

    virtual void Click750mL()
 80053cc:	b480      	push	{r7}
 80053ce:	b083      	sub	sp, #12
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Screen1
    }
 80053d4:	bf00      	nop
 80053d6:	370c      	adds	r7, #12
 80053d8:	46bd      	mov	sp, r7
 80053da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053de:	4770      	bx	lr

080053e0 <_ZN15Screen1ViewBase7FlowSimEv>:

    virtual void FlowSim()
 80053e0:	b480      	push	{r7}
 80053e2:	b083      	sub	sp, #12
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Screen1
    }
 80053e8:	bf00      	nop
 80053ea:	370c      	adds	r7, #12
 80053ec:	46bd      	mov	sp, r7
 80053ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f2:	4770      	bx	lr

080053f4 <_ZN15Screen1ViewBase11ChangePump1Ev>:

    virtual void ChangePump1()
 80053f4:	b480      	push	{r7}
 80053f6:	b083      	sub	sp, #12
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Screen1
    }
 80053fc:	bf00      	nop
 80053fe:	370c      	adds	r7, #12
 8005400:	46bd      	mov	sp, r7
 8005402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005406:	4770      	bx	lr

08005408 <_ZN15Screen1ViewBase11ChangePump2Ev>:

    virtual void ChangePump2()
 8005408:	b480      	push	{r7}
 800540a:	b083      	sub	sp, #12
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Screen1
    }
 8005410:	bf00      	nop
 8005412:	370c      	adds	r7, #12
 8005414:	46bd      	mov	sp, r7
 8005416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541a:	4770      	bx	lr

0800541c <_ZN15Screen1ViewBase11ChangePump3Ev>:

    virtual void ChangePump3()
 800541c:	b480      	push	{r7}
 800541e:	b083      	sub	sp, #12
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Screen1
    }
 8005424:	bf00      	nop
 8005426:	370c      	adds	r7, #12
 8005428:	46bd      	mov	sp, r7
 800542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542e:	4770      	bx	lr

08005430 <_ZN15Screen1ViewBase11ChangePump4Ev>:

    virtual void ChangePump4()
 8005430:	b480      	push	{r7}
 8005432:	b083      	sub	sp, #12
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Screen1
    }
 8005438:	bf00      	nop
 800543a:	370c      	adds	r7, #12
 800543c:	46bd      	mov	sp, r7
 800543e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005442:	4770      	bx	lr

08005444 <_ZN15Screen1ViewBase7ToJuiceEv>:

    virtual void ToJuice()
 8005444:	b480      	push	{r7}
 8005446:	b083      	sub	sp, #12
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Screen1
    }
 800544c:	bf00      	nop
 800544e:	370c      	adds	r7, #12
 8005450:	46bd      	mov	sp, r7
 8005452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005456:	4770      	bx	lr

08005458 <_ZN15Screen1ViewBase7ToWaterEv>:

    virtual void ToWater()
 8005458:	b480      	push	{r7}
 800545a:	b083      	sub	sp, #12
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Screen1
    }
 8005460:	bf00      	nop
 8005462:	370c      	adds	r7, #12
 8005464:	46bd      	mov	sp, r7
 8005466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546a:	4770      	bx	lr

0800546c <_ZN15Screen1ViewBase6ToNoneEv>:

    virtual void ToNone()
 800546c:	b480      	push	{r7}
 800546e:	b083      	sub	sp, #12
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Screen1
    }
 8005474:	bf00      	nop
 8005476:	370c      	adds	r7, #12
 8005478:	46bd      	mov	sp, r7
 800547a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547e:	4770      	bx	lr

08005480 <_ZN15Screen1ViewBase5ToGinEv>:

    virtual void ToGin()
 8005480:	b480      	push	{r7}
 8005482:	b083      	sub	sp, #12
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Screen1
    }
 8005488:	bf00      	nop
 800548a:	370c      	adds	r7, #12
 800548c:	46bd      	mov	sp, r7
 800548e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005492:	4770      	bx	lr

08005494 <_ZN15Screen1ViewBase5ToRumEv>:

    virtual void ToRum()
 8005494:	b480      	push	{r7}
 8005496:	b083      	sub	sp, #12
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Screen1
    }
 800549c:	bf00      	nop
 800549e:	370c      	adds	r7, #12
 80054a0:	46bd      	mov	sp, r7
 80054a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a6:	4770      	bx	lr

080054a8 <_ZN15Screen1ViewBase9ToTequilaEv>:

    virtual void ToTequila()
 80054a8:	b480      	push	{r7}
 80054aa:	b083      	sub	sp, #12
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Screen1
    }
 80054b0:	bf00      	nop
 80054b2:	370c      	adds	r7, #12
 80054b4:	46bd      	mov	sp, r7
 80054b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ba:	4770      	bx	lr

080054bc <_ZN15Screen1ViewBase7ToVodkaEv>:

    virtual void ToVodka()
 80054bc:	b480      	push	{r7}
 80054be:	b083      	sub	sp, #12
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Screen1
    }
 80054c4:	bf00      	nop
 80054c6:	370c      	adds	r7, #12
 80054c8:	46bd      	mov	sp, r7
 80054ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ce:	4770      	bx	lr

080054d0 <_ZN15Screen1ViewBase7ToTodo1Ev>:

    virtual void ToTodo1()
 80054d0:	b480      	push	{r7}
 80054d2:	b083      	sub	sp, #12
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Screen1
    }
 80054d8:	bf00      	nop
 80054da:	370c      	adds	r7, #12
 80054dc:	46bd      	mov	sp, r7
 80054de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e2:	4770      	bx	lr

080054e4 <_ZN15Screen1ViewBase7ToTodo2Ev>:

    virtual void ToTodo2()
 80054e4:	b480      	push	{r7}
 80054e6:	b083      	sub	sp, #12
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Screen1
    }
 80054ec:	bf00      	nop
 80054ee:	370c      	adds	r7, #12
 80054f0:	46bd      	mov	sp, r7
 80054f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f6:	4770      	bx	lr

080054f8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>:
     * @param green Value of the green part (0-255).
     * @param blue  Value of the blue part (0-255).
     *
     * @return The color representation depending on LCD color format.
     */
    static colortype getColorFrom24BitRGB(uint8_t red, uint8_t green, uint8_t blue)
 80054f8:	b590      	push	{r4, r7, lr}
 80054fa:	b083      	sub	sp, #12
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	4603      	mov	r3, r0
 8005500:	71fb      	strb	r3, [r7, #7]
 8005502:	460b      	mov	r3, r1
 8005504:	71bb      	strb	r3, [r7, #6]
 8005506:	4613      	mov	r3, r2
 8005508:	717b      	strb	r3, [r7, #5]
    {
        assert(HAL::getInstance() && "Cannot set color before HAL is initialized");
 800550a:	f7fc feb3 	bl	8002274 <_ZN8touchgfx3HAL11getInstanceEv>
 800550e:	4603      	mov	r3, r0
 8005510:	2b00      	cmp	r3, #0
 8005512:	d105      	bne.n	8005520 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x28>
 8005514:	4b0a      	ldr	r3, [pc, #40]	; (8005540 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x48>)
 8005516:	4a0b      	ldr	r2, [pc, #44]	; (8005544 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x4c>)
 8005518:	2138      	movs	r1, #56	; 0x38
 800551a:	480b      	ldr	r0, [pc, #44]	; (8005548 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x50>)
 800551c:	f01d f968 	bl	80227f0 <__assert_func>
 8005520:	bf00      	nop
        return HAL::lcd().getColorFrom24BitRGB(red, green, blue);
 8005522:	f7fc fae7 	bl	8001af4 <_ZN8touchgfx3HAL3lcdEv>
 8005526:	6803      	ldr	r3, [r0, #0]
 8005528:	332c      	adds	r3, #44	; 0x2c
 800552a:	681c      	ldr	r4, [r3, #0]
 800552c:	797b      	ldrb	r3, [r7, #5]
 800552e:	79ba      	ldrb	r2, [r7, #6]
 8005530:	79f9      	ldrb	r1, [r7, #7]
 8005532:	47a0      	blx	r4
 8005534:	4603      	mov	r3, r0
    }
 8005536:	4618      	mov	r0, r3
 8005538:	370c      	adds	r7, #12
 800553a:	46bd      	mov	sp, r7
 800553c:	bd90      	pop	{r4, r7, pc}
 800553e:	bf00      	nop
 8005540:	08023d08 	.word	0x08023d08
 8005544:	08024a24 	.word	0x08024a24
 8005548:	08023d4c 	.word	0x08023d4c

0800554c <_ZN15Screen1ViewBaseC1Ev>:
#include <gui_generated/screen1_screen/Screen1ViewBase.hpp>
#include "BitmapDatabase.hpp"
#include <texts/TextKeysAndLanguages.hpp>
#include <touchgfx/Color.hpp>

Screen1ViewBase::Screen1ViewBase() :
 800554c:	b590      	push	{r4, r7, lr}
 800554e:	b0d5      	sub	sp, #340	; 0x154
 8005550:	af02      	add	r7, sp, #8
 8005552:	1d3b      	adds	r3, r7, #4
 8005554:	6018      	str	r0, [r3, #0]
    buttonCallback(this, &Screen1ViewBase::buttonCallbackHandler),
    updateItemCallback(this, &Screen1ViewBase::updateItemCallbackHandler)
 8005556:	1d3b      	adds	r3, r7, #4
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4618      	mov	r0, r3
 800555c:	f002 f9fc 	bl	8007958 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>
 8005560:	4add      	ldr	r2, [pc, #884]	; (80058d8 <_ZN15Screen1ViewBaseC1Ev+0x38c>)
 8005562:	1d3b      	adds	r3, r7, #4
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	601a      	str	r2, [r3, #0]
 8005568:	1d3b      	adds	r3, r7, #4
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8005570:	f107 0308 	add.w	r3, r7, #8
 8005574:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005578:	4618      	mov	r0, r3
 800557a:	f7fe ff51 	bl	8004420 <_ZN8touchgfx6BitmapC1Et>
 800557e:	f107 0308 	add.w	r3, r7, #8
 8005582:	4619      	mov	r1, r3
 8005584:	4620      	mov	r0, r4
 8005586:	f7ff f9cf 	bl	8004928 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800558a:	1d3b      	adds	r3, r7, #4
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	336c      	adds	r3, #108	; 0x6c
 8005590:	4618      	mov	r0, r3
 8005592:	f7ff fa39 	bl	8004a08 <_ZN8touchgfx6ButtonC1Ev>
 8005596:	1d3b      	adds	r3, r7, #4
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	33a0      	adds	r3, #160	; 0xa0
 800559c:	4618      	mov	r0, r3
 800559e:	f010 f97d 	bl	801589c <_ZN8touchgfx15ButtonWithLabelC1Ev>
 80055a2:	1d3b      	adds	r3, r7, #4
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	33e4      	adds	r3, #228	; 0xe4
 80055a8:	4618      	mov	r0, r3
 80055aa:	f00d fd53 	bl	8013054 <_ZN8touchgfx10ScrollListC1Ev>
 80055ae:	1d3b      	adds	r3, r7, #4
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80055b6:	4618      	mov	r0, r3
 80055b8:	f002 f9f4 	bl	80079a4 <_ZN8touchgfx17DrawableListItemsI14imageContainerLi4EEC1Ev>
 80055bc:	1d3b      	adds	r3, r7, #4
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f503 7343 	add.w	r3, r3, #780	; 0x30c
 80055c4:	4618      	mov	r0, r3
 80055c6:	f7ff fa1f 	bl	8004a08 <_ZN8touchgfx6ButtonC1Ev>
 80055ca:	1d3b      	adds	r3, r7, #4
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f503 7350 	add.w	r3, r3, #832	; 0x340
 80055d2:	4618      	mov	r0, r3
 80055d4:	f00c ff6e 	bl	80124b4 <_ZN8touchgfx11BoxProgressC1Ev>
 80055d8:	1d3b      	adds	r3, r7, #4
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055e0:	4618      	mov	r0, r3
 80055e2:	f010 f95b 	bl	801589c <_ZN8touchgfx15ButtonWithLabelC1Ev>
 80055e6:	1d3b      	adds	r3, r7, #4
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f203 4344 	addw	r3, r3, #1092	; 0x444
 80055ee:	4618      	mov	r0, r3
 80055f0:	f010 f954 	bl	801589c <_ZN8touchgfx15ButtonWithLabelC1Ev>
 80055f4:	1d3b      	adds	r3, r7, #4
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f503 6391 	add.w	r3, r3, #1160	; 0x488
 80055fc:	4618      	mov	r0, r3
 80055fe:	f010 f94d 	bl	801589c <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8005602:	1d3b      	adds	r3, r7, #4
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f203 43cc 	addw	r3, r3, #1228	; 0x4cc
 800560a:	4618      	mov	r0, r3
 800560c:	f7ff fba8 	bl	8004d60 <_ZN8touchgfx8TextAreaC1Ev>
 8005610:	1d3b      	adds	r3, r7, #4
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005618:	4618      	mov	r0, r3
 800561a:	f7ff fba1 	bl	8004d60 <_ZN8touchgfx8TextAreaC1Ev>
 800561e:	1d3b      	adds	r3, r7, #4
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f203 5334 	addw	r3, r3, #1332	; 0x534
 8005626:	4618      	mov	r0, r3
 8005628:	f00f fb52 	bl	8014cd0 <_ZN8touchgfx4LineC1Ev>
 800562c:	1d3b      	adds	r3, r7, #4
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f503 64b5 	add.w	r4, r3, #1448	; 0x5a8
 8005634:	f107 030c 	add.w	r3, r7, #12
 8005638:	2100      	movs	r1, #0
 800563a:	4618      	mov	r0, r3
 800563c:	f7fe fec1 	bl	80043c2 <_ZN8touchgfx9colortypeC1Em>
 8005640:	f107 030c 	add.w	r3, r7, #12
 8005644:	22ff      	movs	r2, #255	; 0xff
 8005646:	6819      	ldr	r1, [r3, #0]
 8005648:	4620      	mov	r0, r4
 800564a:	f00f f933 	bl	80148b4 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>
 800564e:	1d3b      	adds	r3, r7, #4
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f503 63b8 	add.w	r3, r3, #1472	; 0x5c0
 8005656:	4618      	mov	r0, r3
 8005658:	f00f fb3a 	bl	8014cd0 <_ZN8touchgfx4LineC1Ev>
 800565c:	1d3b      	adds	r3, r7, #4
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f203 6434 	addw	r4, r3, #1588	; 0x634
 8005664:	f107 0310 	add.w	r3, r7, #16
 8005668:	2100      	movs	r1, #0
 800566a:	4618      	mov	r0, r3
 800566c:	f7fe fea9 	bl	80043c2 <_ZN8touchgfx9colortypeC1Em>
 8005670:	f107 0310 	add.w	r3, r7, #16
 8005674:	22ff      	movs	r2, #255	; 0xff
 8005676:	6819      	ldr	r1, [r3, #0]
 8005678:	4620      	mov	r0, r4
 800567a:	f00f f91b 	bl	80148b4 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>
 800567e:	1d3b      	adds	r3, r7, #4
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f203 634c 	addw	r3, r3, #1612	; 0x64c
 8005686:	4618      	mov	r0, r3
 8005688:	f00f fb22 	bl	8014cd0 <_ZN8touchgfx4LineC1Ev>
 800568c:	1d3b      	adds	r3, r7, #4
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f503 64d8 	add.w	r4, r3, #1728	; 0x6c0
 8005694:	f107 0314 	add.w	r3, r7, #20
 8005698:	2100      	movs	r1, #0
 800569a:	4618      	mov	r0, r3
 800569c:	f7fe fe91 	bl	80043c2 <_ZN8touchgfx9colortypeC1Em>
 80056a0:	f107 0314 	add.w	r3, r7, #20
 80056a4:	22ff      	movs	r2, #255	; 0xff
 80056a6:	6819      	ldr	r1, [r3, #0]
 80056a8:	4620      	mov	r0, r4
 80056aa:	f00f f903 	bl	80148b4 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>
 80056ae:	1d3b      	adds	r3, r7, #4
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f503 63db 	add.w	r3, r3, #1752	; 0x6d8
 80056b6:	4618      	mov	r0, r3
 80056b8:	f7ff fb52 	bl	8004d60 <_ZN8touchgfx8TextAreaC1Ev>
 80056bc:	1d3b      	adds	r3, r7, #4
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f203 730c 	addw	r3, r3, #1804	; 0x70c
 80056c4:	4618      	mov	r0, r3
 80056c6:	f7ff fb4b 	bl	8004d60 <_ZN8touchgfx8TextAreaC1Ev>
 80056ca:	1d3b      	adds	r3, r7, #4
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f503 63e8 	add.w	r3, r3, #1856	; 0x740
 80056d2:	4618      	mov	r0, r3
 80056d4:	f7ff fb44 	bl	8004d60 <_ZN8touchgfx8TextAreaC1Ev>
 80056d8:	1d3b      	adds	r3, r7, #4
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f203 7374 	addw	r3, r3, #1908	; 0x774
 80056e0:	4618      	mov	r0, r3
 80056e2:	f7ff fb3d 	bl	8004d60 <_ZN8touchgfx8TextAreaC1Ev>
 80056e6:	1d3b      	adds	r3, r7, #4
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f503 63f5 	add.w	r3, r3, #1960	; 0x7a8
 80056ee:	4618      	mov	r0, r3
 80056f0:	f00f faee 	bl	8014cd0 <_ZN8touchgfx4LineC1Ev>
 80056f4:	1d3b      	adds	r3, r7, #4
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f603 041c 	addw	r4, r3, #2076	; 0x81c
 80056fc:	f107 0318 	add.w	r3, r7, #24
 8005700:	2100      	movs	r1, #0
 8005702:	4618      	mov	r0, r3
 8005704:	f7fe fe5d 	bl	80043c2 <_ZN8touchgfx9colortypeC1Em>
 8005708:	f107 0318 	add.w	r3, r7, #24
 800570c:	22ff      	movs	r2, #255	; 0xff
 800570e:	6819      	ldr	r1, [r3, #0]
 8005710:	4620      	mov	r0, r4
 8005712:	f00f f8cf 	bl	80148b4 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>
 8005716:	1d3b      	adds	r3, r7, #4
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f603 0334 	addw	r3, r3, #2100	; 0x834
 800571e:	4618      	mov	r0, r3
 8005720:	f00f fad6 	bl	8014cd0 <_ZN8touchgfx4LineC1Ev>
 8005724:	1d3b      	adds	r3, r7, #4
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f603 04a8 	addw	r4, r3, #2216	; 0x8a8
 800572c:	f107 031c 	add.w	r3, r7, #28
 8005730:	2100      	movs	r1, #0
 8005732:	4618      	mov	r0, r3
 8005734:	f7fe fe45 	bl	80043c2 <_ZN8touchgfx9colortypeC1Em>
 8005738:	f107 031c 	add.w	r3, r7, #28
 800573c:	22ff      	movs	r2, #255	; 0xff
 800573e:	6819      	ldr	r1, [r3, #0]
 8005740:	4620      	mov	r0, r4
 8005742:	f00f f8b7 	bl	80148b4 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>
 8005746:	1d3b      	adds	r3, r7, #4
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f503 630c 	add.w	r3, r3, #2240	; 0x8c0
 800574e:	4618      	mov	r0, r3
 8005750:	f00f fabe 	bl	8014cd0 <_ZN8touchgfx4LineC1Ev>
 8005754:	1d3b      	adds	r3, r7, #4
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f603 1434 	addw	r4, r3, #2356	; 0x934
 800575c:	f107 0320 	add.w	r3, r7, #32
 8005760:	2100      	movs	r1, #0
 8005762:	4618      	mov	r0, r3
 8005764:	f7fe fe2d 	bl	80043c2 <_ZN8touchgfx9colortypeC1Em>
 8005768:	f107 0320 	add.w	r3, r7, #32
 800576c:	22ff      	movs	r2, #255	; 0xff
 800576e:	6819      	ldr	r1, [r3, #0]
 8005770:	4620      	mov	r0, r4
 8005772:	f00f f89f 	bl	80148b4 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>
 8005776:	1d3b      	adds	r3, r7, #4
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f603 134c 	addw	r3, r3, #2380	; 0x94c
 800577e:	4618      	mov	r0, r3
 8005780:	f010 f88c 	bl	801589c <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8005784:	1d3b      	adds	r3, r7, #4
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f503 6319 	add.w	r3, r3, #2448	; 0x990
 800578c:	4618      	mov	r0, r3
 800578e:	f010 f885 	bl	801589c <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8005792:	1d3b      	adds	r3, r7, #4
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f603 13d4 	addw	r3, r3, #2516	; 0x9d4
 800579a:	4618      	mov	r0, r3
 800579c:	f010 f87e 	bl	801589c <_ZN8touchgfx15ButtonWithLabelC1Ev>
 80057a0:	1d3b      	adds	r3, r7, #4
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f603 2318 	addw	r3, r3, #2584	; 0xa18
 80057a8:	4618      	mov	r0, r3
 80057aa:	f010 f877 	bl	801589c <_ZN8touchgfx15ButtonWithLabelC1Ev>
 80057ae:	1d3b      	adds	r3, r7, #4
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f603 235c 	addw	r3, r3, #2652	; 0xa5c
 80057b6:	4618      	mov	r0, r3
 80057b8:	f00f fa8a 	bl	8014cd0 <_ZN8touchgfx4LineC1Ev>
 80057bc:	1d3b      	adds	r3, r7, #4
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f503 642d 	add.w	r4, r3, #2768	; 0xad0
 80057c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80057c8:	2100      	movs	r1, #0
 80057ca:	4618      	mov	r0, r3
 80057cc:	f7fe fdf9 	bl	80043c2 <_ZN8touchgfx9colortypeC1Em>
 80057d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80057d4:	22ff      	movs	r2, #255	; 0xff
 80057d6:	6819      	ldr	r1, [r3, #0]
 80057d8:	4620      	mov	r0, r4
 80057da:	f00f f86b 	bl	80148b4 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>
 80057de:	1d3b      	adds	r3, r7, #4
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f603 23e8 	addw	r3, r3, #2792	; 0xae8
 80057e6:	4618      	mov	r0, r3
 80057e8:	f7ff fc20 	bl	800502c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80057ec:	1d3b      	adds	r3, r7, #4
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f503 6332 	add.w	r3, r3, #2848	; 0xb20
 80057f4:	4618      	mov	r0, r3
 80057f6:	f7ff fc19 	bl	800502c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80057fa:	1d3b      	adds	r3, r7, #4
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f603 3358 	addw	r3, r3, #2904	; 0xb58
 8005802:	4618      	mov	r0, r3
 8005804:	f7ff fc12 	bl	800502c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8005808:	1d3b      	adds	r3, r7, #4
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f503 6339 	add.w	r3, r3, #2960	; 0xb90
 8005810:	4618      	mov	r0, r3
 8005812:	f7ff fc0b 	bl	800502c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8005816:	1d3b      	adds	r3, r7, #4
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f603 33c8 	addw	r3, r3, #3016	; 0xbc8
 800581e:	4618      	mov	r0, r3
 8005820:	f7ff fa9e 	bl	8004d60 <_ZN8touchgfx8TextAreaC1Ev>
 8005824:	1d3b      	adds	r3, r7, #4
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f603 33fc 	addw	r3, r3, #3068	; 0xbfc
 800582c:	4618      	mov	r0, r3
 800582e:	f010 f835 	bl	801589c <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8005832:	1d3b      	adds	r3, r7, #4
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f503 6344 	add.w	r3, r3, #3136	; 0xc40
 800583a:	4618      	mov	r0, r3
 800583c:	f010 f82e 	bl	801589c <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8005840:	1d3b      	adds	r3, r7, #4
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f603 4384 	addw	r3, r3, #3204	; 0xc84
 8005848:	4618      	mov	r0, r3
 800584a:	f010 f827 	bl	801589c <_ZN8touchgfx15ButtonWithLabelC1Ev>
 800584e:	1d3b      	adds	r3, r7, #4
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f603 43c8 	addw	r3, r3, #3272	; 0xcc8
 8005856:	4618      	mov	r0, r3
 8005858:	f010 f820 	bl	801589c <_ZN8touchgfx15ButtonWithLabelC1Ev>
 800585c:	1d3b      	adds	r3, r7, #4
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f603 530c 	addw	r3, r3, #3340	; 0xd0c
 8005864:	4618      	mov	r0, r3
 8005866:	f010 f819 	bl	801589c <_ZN8touchgfx15ButtonWithLabelC1Ev>
 800586a:	1d3b      	adds	r3, r7, #4
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f503 6355 	add.w	r3, r3, #3408	; 0xd50
 8005872:	4618      	mov	r0, r3
 8005874:	f010 f812 	bl	801589c <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8005878:	1d3b      	adds	r3, r7, #4
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f603 5394 	addw	r3, r3, #3476	; 0xd94
 8005880:	4618      	mov	r0, r3
 8005882:	f010 f80b 	bl	801589c <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8005886:	1d3b      	adds	r3, r7, #4
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f603 53d8 	addw	r3, r3, #3544	; 0xdd8
 800588e:	4618      	mov	r0, r3
 8005890:	f010 f804 	bl	801589c <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8005894:	1d3b      	adds	r3, r7, #4
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f603 631c 	addw	r3, r3, #3612	; 0xe1c
 800589c:	4618      	mov	r0, r3
 800589e:	f00f fffd 	bl	801589c <_ZN8touchgfx15ButtonWithLabelC1Ev>
 80058a2:	1d3b      	adds	r3, r7, #4
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f503 606a 	add.w	r0, r3, #3744	; 0xea0
 80058aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80058ae:	4a0b      	ldr	r2, [pc, #44]	; (80058dc <_ZN15Screen1ViewBaseC1Ev+0x390>)
 80058b0:	601a      	str	r2, [r3, #0]
 80058b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80058b6:	2200      	movs	r2, #0
 80058b8:	605a      	str	r2, [r3, #4]
 80058ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80058be:	1d39      	adds	r1, r7, #4
 80058c0:	cb0c      	ldmia	r3, {r2, r3}
 80058c2:	6809      	ldr	r1, [r1, #0]
 80058c4:	f002 f89c 	bl	8007a00 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
 80058c8:	1d3b      	adds	r3, r7, #4
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f503 606b 	add.w	r0, r3, #3760	; 0xeb0
 80058d0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80058d4:	e004      	b.n	80058e0 <_ZN15Screen1ViewBaseC1Ev+0x394>
 80058d6:	bf00      	nop
 80058d8:	08024768 	.word	0x08024768
 80058dc:	0800769f 	.word	0x0800769f
 80058e0:	4ae4      	ldr	r2, [pc, #912]	; (8005c74 <_ZN15Screen1ViewBaseC1Ev+0x728>)
 80058e2:	601a      	str	r2, [r3, #0]
 80058e4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80058e8:	2200      	movs	r2, #0
 80058ea:	605a      	str	r2, [r3, #4]
 80058ec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80058f0:	1d39      	adds	r1, r7, #4
 80058f2:	cb0c      	ldmia	r3, {r2, r3}
 80058f4:	6809      	ldr	r1, [r1, #0]
 80058f6:	f002 f8b3 	bl	8007a60 <_ZN8touchgfx8CallbackI15Screen1ViewBasePNS_26DrawableListItemsInterfaceEssEC1EPS1_MS1_FvS3_ssE>
{

    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
 80058fa:	1d3b      	adds	r3, r7, #4
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f503 636c 	add.w	r3, r3, #3776	; 0xec0
 8005902:	f642 61e0 	movw	r1, #12000	; 0x2ee0
 8005906:	4618      	mov	r0, r3
 8005908:	f00f fff0 	bl	80158ec <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>

    Background.setXY(0, 0);
 800590c:	1d3b      	adds	r3, r7, #4
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	3340      	adds	r3, #64	; 0x40
 8005912:	2200      	movs	r2, #0
 8005914:	2100      	movs	r1, #0
 8005916:	4618      	mov	r0, r3
 8005918:	f7fe fe2b 	bl	8004572 <_ZN8touchgfx8Drawable5setXYEss>
    Background.setBitmap(touchgfx::Bitmap(BITMAP_DARK_BACKGROUNDS_MAIN_BG_TEXTURE_800X480PX_ID));
 800591c:	1d3b      	adds	r3, r7, #4
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8005924:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005928:	2103      	movs	r1, #3
 800592a:	4618      	mov	r0, r3
 800592c:	f7fe fd78 	bl	8004420 <_ZN8touchgfx6BitmapC1Et>
 8005930:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005934:	4619      	mov	r1, r3
 8005936:	4620      	mov	r0, r4
 8005938:	f00f fe7c 	bl	8015634 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    ExitButton.setXY(731, 18);
 800593c:	1d3b      	adds	r3, r7, #4
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	336c      	adds	r3, #108	; 0x6c
 8005942:	2212      	movs	r2, #18
 8005944:	f240 21db 	movw	r1, #731	; 0x2db
 8005948:	4618      	mov	r0, r3
 800594a:	f7fe fe12 	bl	8004572 <_ZN8touchgfx8Drawable5setXYEss>
    ExitButton.setVisible(false);
 800594e:	1d3b      	adds	r3, r7, #4
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	336c      	adds	r3, #108	; 0x6c
 8005954:	2100      	movs	r1, #0
 8005956:	4618      	mov	r0, r3
 8005958:	f7fe fe7c 	bl	8004654 <_ZN8touchgfx8Drawable10setVisibleEb>
    ExitButton.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_ICONS_REMOVE_48_ID), touchgfx::Bitmap(BITMAP_DARK_ICONS_REMOVE_48_ID));
 800595c:	1d3b      	adds	r3, r7, #4
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 8005964:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005968:	2104      	movs	r1, #4
 800596a:	4618      	mov	r0, r3
 800596c:	f7fe fd58 	bl	8004420 <_ZN8touchgfx6BitmapC1Et>
 8005970:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005974:	2104      	movs	r1, #4
 8005976:	4618      	mov	r0, r3
 8005978:	f7fe fd52 	bl	8004420 <_ZN8touchgfx6BitmapC1Et>
 800597c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8005980:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005984:	4619      	mov	r1, r3
 8005986:	4620      	mov	r0, r4
 8005988:	f00f fd11 	bl	80153ae <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    ExitButton.setAction(buttonCallback);
 800598c:	1d3b      	adds	r3, r7, #4
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 8005994:	1d3b      	adds	r3, r7, #4
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f503 636a 	add.w	r3, r3, #3744	; 0xea0
 800599c:	4619      	mov	r1, r3
 800599e:	4610      	mov	r0, r2
 80059a0:	f7ff f802 	bl	80049a8 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    PourButton.setXY(315, 353);
 80059a4:	1d3b      	adds	r3, r7, #4
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	33a0      	adds	r3, #160	; 0xa0
 80059aa:	f240 1261 	movw	r2, #353	; 0x161
 80059ae:	f240 113b 	movw	r1, #315	; 0x13b
 80059b2:	4618      	mov	r0, r3
 80059b4:	f7fe fddd 	bl	8004572 <_ZN8touchgfx8Drawable5setXYEss>
    PourButton.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
 80059b8:	1d3b      	adds	r3, r7, #4
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 80059c0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80059c4:	2100      	movs	r1, #0
 80059c6:	4618      	mov	r0, r3
 80059c8:	f7fe fd2a 	bl	8004420 <_ZN8touchgfx6BitmapC1Et>
 80059cc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80059d0:	2101      	movs	r1, #1
 80059d2:	4618      	mov	r0, r3
 80059d4:	f7fe fd24 	bl	8004420 <_ZN8touchgfx6BitmapC1Et>
 80059d8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80059dc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80059e0:	4619      	mov	r1, r3
 80059e2:	4620      	mov	r0, r4
 80059e4:	f00f fce3 	bl	80153ae <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    PourButton.setLabelText(touchgfx::TypedText(T_SINGLEUSEID2));
 80059e8:	1d3b      	adds	r3, r7, #4
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 80059f0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80059f4:	2100      	movs	r1, #0
 80059f6:	4618      	mov	r0, r3
 80059f8:	f7ff f85c 	bl	8004ab4 <_ZN8touchgfx9TypedTextC1Et>
 80059fc:	f8b7 104c 	ldrh.w	r1, [r7, #76]	; 0x4c
 8005a00:	4620      	mov	r0, r4
 8005a02:	f7ff f891 	bl	8004b28 <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>
    PourButton.setLabelColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8005a06:	1d3b      	adds	r3, r7, #4
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 8005a0e:	22ff      	movs	r2, #255	; 0xff
 8005a10:	21ff      	movs	r1, #255	; 0xff
 8005a12:	20ff      	movs	r0, #255	; 0xff
 8005a14:	f7ff fd70 	bl	80054f8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	4619      	mov	r1, r3
 8005a1e:	4620      	mov	r0, r4
 8005a20:	f7ff f891 	bl	8004b46 <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeEb>
    PourButton.setLabelColorPressed(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8005a24:	1d3b      	adds	r3, r7, #4
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 8005a2c:	22ff      	movs	r2, #255	; 0xff
 8005a2e:	21ff      	movs	r1, #255	; 0xff
 8005a30:	20ff      	movs	r0, #255	; 0xff
 8005a32:	f7ff fd61 	bl	80054f8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8005a36:	4603      	mov	r3, r0
 8005a38:	2200      	movs	r2, #0
 8005a3a:	4619      	mov	r1, r3
 8005a3c:	4620      	mov	r0, r4
 8005a3e:	f7ff f89a 	bl	8004b76 <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeEb>
    PourButton.setAction(buttonCallback);
 8005a42:	1d3b      	adds	r3, r7, #4
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f103 02a0 	add.w	r2, r3, #160	; 0xa0
 8005a4a:	1d3b      	adds	r3, r7, #4
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f503 636a 	add.w	r3, r3, #3744	; 0xea0
 8005a52:	4619      	mov	r1, r3
 8005a54:	4610      	mov	r0, r2
 8005a56:	f7fe ffa7 	bl	80049a8 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    ScrollList.setPosition(7, 53, 787, 257);
 8005a5a:	1d3b      	adds	r3, r7, #4
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f103 00e4 	add.w	r0, r3, #228	; 0xe4
 8005a62:	f240 1301 	movw	r3, #257	; 0x101
 8005a66:	9300      	str	r3, [sp, #0]
 8005a68:	f240 3313 	movw	r3, #787	; 0x313
 8005a6c:	2235      	movs	r2, #53	; 0x35
 8005a6e:	2107      	movs	r1, #7
 8005a70:	f7fe fd34 	bl	80044dc <_ZN8touchgfx8Drawable11setPositionEssss>
    ScrollList.setHorizontal(true);
 8005a74:	1d3b      	adds	r3, r7, #4
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	33e4      	adds	r3, #228	; 0xe4
 8005a7a:	2101      	movs	r1, #1
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	f00d fcdf 	bl	8013440 <_ZN8touchgfx10ScrollBase13setHorizontalEb>
    ScrollList.setCircular(true);
 8005a82:	1d3b      	adds	r3, r7, #4
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	33e4      	adds	r3, #228	; 0xe4
 8005a88:	2101      	movs	r1, #1
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	f00d fd32 	bl	80134f4 <_ZN8touchgfx10ScrollBase11setCircularEb>
    ScrollList.setEasingEquation(touchgfx::EasingEquations::cubicEaseOut);
 8005a90:	1d3b      	adds	r3, r7, #4
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	33e4      	adds	r3, #228	; 0xe4
 8005a96:	4978      	ldr	r1, [pc, #480]	; (8005c78 <_ZN15Screen1ViewBaseC1Ev+0x72c>)
 8005a98:	4618      	mov	r0, r3
 8005a9a:	f00d fc21 	bl	80132e0 <_ZN8touchgfx10ScrollBase17setEasingEquationEPFstsstE>
    ScrollList.setSwipeAcceleration(10);
 8005a9e:	1d3b      	adds	r3, r7, #4
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	33e4      	adds	r3, #228	; 0xe4
 8005aa4:	210a      	movs	r1, #10
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	f00d fc1d 	bl	80132e6 <_ZN8touchgfx10ScrollBase20setSwipeAccelerationEt>
    ScrollList.setDragAcceleration(10);
 8005aac:	1d3b      	adds	r3, r7, #4
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	33e4      	adds	r3, #228	; 0xe4
 8005ab2:	210a      	movs	r1, #10
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f00d fc19 	bl	80132ec <_ZN8touchgfx10ScrollBase19setDragAccelerationEt>
    ScrollList.setNumberOfItems(3);
 8005aba:	1d3b      	adds	r3, r7, #4
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	33e4      	adds	r3, #228	; 0xe4
 8005ac0:	2103      	movs	r1, #3
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	f00d fb5c 	bl	8013180 <_ZN8touchgfx10ScrollBase16setNumberOfItemsEs>
    ScrollList.setPadding(0, 0);
 8005ac8:	1d3b      	adds	r3, r7, #4
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	33e4      	adds	r3, #228	; 0xe4
 8005ace:	2200      	movs	r2, #0
 8005ad0:	2100      	movs	r1, #0
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	f00d fad0 	bl	8013078 <_ZN8touchgfx10ScrollList10setPaddingEss>
    ScrollList.setSnapping(true);
 8005ad8:	1d3b      	adds	r3, r7, #4
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	33e4      	adds	r3, #228	; 0xe4
 8005ade:	2101      	movs	r1, #1
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	f00d fae1 	bl	80130a8 <_ZN8touchgfx10ScrollList11setSnappingEb>
    ScrollList.setDrawableSize(262, 0);
 8005ae6:	1d3b      	adds	r3, r7, #4
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	33e4      	adds	r3, #228	; 0xe4
 8005aec:	2200      	movs	r2, #0
 8005aee:	f44f 7183 	mov.w	r1, #262	; 0x106
 8005af2:	4618      	mov	r0, r3
 8005af4:	f00d fbed 	bl	80132d2 <_ZN8touchgfx10ScrollBase15setDrawableSizeEss>
    ScrollList.setDrawables(ScrollListListItems, updateItemCallback);
 8005af8:	1d3b      	adds	r3, r7, #4
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f103 00e4 	add.w	r0, r3, #228	; 0xe4
 8005b00:	1d3b      	adds	r3, r7, #4
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f503 71d4 	add.w	r1, r3, #424	; 0x1a8
 8005b08:	1d3b      	adds	r3, r7, #4
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f503 636b 	add.w	r3, r3, #3760	; 0xeb0
 8005b10:	461a      	mov	r2, r3
 8005b12:	f00d f9c9 	bl	8012ea8 <_ZN8touchgfx10ScrollList12setDrawablesERNS_26DrawableListItemsInterfaceERNS_15GenericCallbackIPS1_ssEE>

    SettingsButton.setXY(731, 413);
 8005b16:	1d3b      	adds	r3, r7, #4
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f503 7343 	add.w	r3, r3, #780	; 0x30c
 8005b1e:	f240 129d 	movw	r2, #413	; 0x19d
 8005b22:	f240 21db 	movw	r1, #731	; 0x2db
 8005b26:	4618      	mov	r0, r3
 8005b28:	f7fe fd23 	bl	8004572 <_ZN8touchgfx8Drawable5setXYEss>
    SettingsButton.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_ICONS_SETTINGS_48_ID), touchgfx::Bitmap(BITMAP_DARK_ICONS_SETTINGS_48_ID));
 8005b2c:	1d3b      	adds	r3, r7, #4
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f503 7443 	add.w	r4, r3, #780	; 0x30c
 8005b34:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005b38:	2105      	movs	r1, #5
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f7fe fc70 	bl	8004420 <_ZN8touchgfx6BitmapC1Et>
 8005b40:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005b44:	2105      	movs	r1, #5
 8005b46:	4618      	mov	r0, r3
 8005b48:	f7fe fc6a 	bl	8004420 <_ZN8touchgfx6BitmapC1Et>
 8005b4c:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8005b50:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005b54:	4619      	mov	r1, r3
 8005b56:	4620      	mov	r0, r4
 8005b58:	f00f fc29 	bl	80153ae <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    SettingsButton.setAction(buttonCallback);
 8005b5c:	1d3b      	adds	r3, r7, #4
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f503 7243 	add.w	r2, r3, #780	; 0x30c
 8005b64:	1d3b      	adds	r3, r7, #4
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f503 636a 	add.w	r3, r3, #3744	; 0xea0
 8005b6c:	4619      	mov	r1, r3
 8005b6e:	4610      	mov	r0, r2
 8005b70:	f7fe ff1a 	bl	80049a8 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    ProgressBar.setXY(198, 366);
 8005b74:	1d3b      	adds	r3, r7, #4
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f503 7350 	add.w	r3, r3, #832	; 0x340
 8005b7c:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8005b80:	21c6      	movs	r1, #198	; 0xc6
 8005b82:	4618      	mov	r0, r3
 8005b84:	f7fe fcf5 	bl	8004572 <_ZN8touchgfx8Drawable5setXYEss>
    ProgressBar.setProgressIndicatorPosition(2, 2, 400, 30);
 8005b88:	1d3b      	adds	r3, r7, #4
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f503 7050 	add.w	r0, r3, #832	; 0x340
 8005b90:	231e      	movs	r3, #30
 8005b92:	9300      	str	r3, [sp, #0]
 8005b94:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8005b98:	2202      	movs	r2, #2
 8005b9a:	2102      	movs	r1, #2
 8005b9c:	f00c fcc0 	bl	8012520 <_ZN8touchgfx11BoxProgress28setProgressIndicatorPositionEssss>
    ProgressBar.setRange(0, 100, 100, 0);
 8005ba0:	1d3b      	adds	r3, r7, #4
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f503 7050 	add.w	r0, r3, #832	; 0x340
 8005ba8:	2300      	movs	r3, #0
 8005baa:	9300      	str	r3, [sp, #0]
 8005bac:	2364      	movs	r3, #100	; 0x64
 8005bae:	2264      	movs	r2, #100	; 0x64
 8005bb0:	2100      	movs	r1, #0
 8005bb2:	f00c fdb5 	bl	8012720 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt>
    ProgressBar.setDirection(touchgfx::AbstractDirectionProgress::RIGHT);
 8005bb6:	1d3b      	adds	r3, r7, #4
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f503 7350 	add.w	r3, r3, #832	; 0x340
 8005bbe:	2100      	movs	r1, #0
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	f00c fd0d 	bl	80125e0 <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>
    ProgressBar.setBackground(touchgfx::Bitmap(BITMAP_BLUE_PROGRESSINDICATORS_BG_LARGE_PROGRESS_INDICATOR_BG_SQUARE_0_DEGREES_ID));
 8005bc6:	1d3b      	adds	r3, r7, #4
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f503 7450 	add.w	r4, r3, #832	; 0x340
 8005bce:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005bd2:	2102      	movs	r1, #2
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	f7fe fc23 	bl	8004420 <_ZN8touchgfx6BitmapC1Et>
 8005bda:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005bde:	4619      	mov	r1, r3
 8005be0:	4620      	mov	r0, r4
 8005be2:	f00c fd92 	bl	801270a <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>
    ProgressBar.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 151, 255));
 8005be6:	1d3b      	adds	r3, r7, #4
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f503 7450 	add.w	r4, r3, #832	; 0x340
 8005bee:	22ff      	movs	r2, #255	; 0xff
 8005bf0:	2197      	movs	r1, #151	; 0x97
 8005bf2:	2000      	movs	r0, #0
 8005bf4:	f7ff fc80 	bl	80054f8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	4619      	mov	r1, r3
 8005bfc:	4620      	mov	r0, r4
 8005bfe:	f00c fc39 	bl	8012474 <_ZN8touchgfx11BoxProgress8setColorENS_9colortypeE>
    ProgressBar.setValue(0);
 8005c02:	1d3b      	adds	r3, r7, #4
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f503 7350 	add.w	r3, r3, #832	; 0x340
 8005c0a:	2100      	movs	r1, #0
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	f00c fc9f 	bl	8012550 <_ZN8touchgfx11BoxProgress8setValueEi>
    ProgressBar.setVisible(false);
 8005c12:	1d3b      	adds	r3, r7, #4
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f503 7350 	add.w	r3, r3, #832	; 0x340
 8005c1a:	2100      	movs	r1, #0
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	f7fe fd19 	bl	8004654 <_ZN8touchgfx8Drawable10setVisibleEb>

    Button250mL.setXY(75, 353);
 8005c22:	1d3b      	adds	r3, r7, #4
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c2a:	f240 1261 	movw	r2, #353	; 0x161
 8005c2e:	214b      	movs	r1, #75	; 0x4b
 8005c30:	4618      	mov	r0, r3
 8005c32:	f7fe fc9e 	bl	8004572 <_ZN8touchgfx8Drawable5setXYEss>
    Button250mL.setVisible(false);
 8005c36:	1d3b      	adds	r3, r7, #4
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c3e:	2100      	movs	r1, #0
 8005c40:	4618      	mov	r0, r3
 8005c42:	f7fe fd07 	bl	8004654 <_ZN8touchgfx8Drawable10setVisibleEb>
    Button250mL.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
 8005c46:	1d3b      	adds	r3, r7, #4
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f503 6480 	add.w	r4, r3, #1024	; 0x400
 8005c4e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005c52:	2100      	movs	r1, #0
 8005c54:	4618      	mov	r0, r3
 8005c56:	f7fe fbe3 	bl	8004420 <_ZN8touchgfx6BitmapC1Et>
 8005c5a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8005c5e:	2101      	movs	r1, #1
 8005c60:	4618      	mov	r0, r3
 8005c62:	f7fe fbdd 	bl	8004420 <_ZN8touchgfx6BitmapC1Et>
 8005c66:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005c6a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005c6e:	4619      	mov	r1, r3
 8005c70:	e004      	b.n	8005c7c <_ZN15Screen1ViewBaseC1Ev+0x730>
 8005c72:	bf00      	nop
 8005c74:	08007899 	.word	0x08007899
 8005c78:	08017ca9 	.word	0x08017ca9
 8005c7c:	4620      	mov	r0, r4
 8005c7e:	f00f fb96 	bl	80153ae <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    Button250mL.setLabelText(touchgfx::TypedText(T_SINGLEUSEID3));
 8005c82:	1d3b      	adds	r3, r7, #4
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f503 6480 	add.w	r4, r3, #1024	; 0x400
 8005c8a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8005c8e:	2101      	movs	r1, #1
 8005c90:	4618      	mov	r0, r3
 8005c92:	f7fe ff0f 	bl	8004ab4 <_ZN8touchgfx9TypedTextC1Et>
 8005c96:	f8b7 1064 	ldrh.w	r1, [r7, #100]	; 0x64
 8005c9a:	4620      	mov	r0, r4
 8005c9c:	f7fe ff44 	bl	8004b28 <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>
    Button250mL.setLabelColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8005ca0:	1d3b      	adds	r3, r7, #4
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f503 6480 	add.w	r4, r3, #1024	; 0x400
 8005ca8:	22ff      	movs	r2, #255	; 0xff
 8005caa:	21ff      	movs	r1, #255	; 0xff
 8005cac:	20ff      	movs	r0, #255	; 0xff
 8005cae:	f7ff fc23 	bl	80054f8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	4619      	mov	r1, r3
 8005cb8:	4620      	mov	r0, r4
 8005cba:	f7fe ff44 	bl	8004b46 <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeEb>
    Button250mL.setLabelColorPressed(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8005cbe:	1d3b      	adds	r3, r7, #4
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f503 6480 	add.w	r4, r3, #1024	; 0x400
 8005cc6:	22ff      	movs	r2, #255	; 0xff
 8005cc8:	21ff      	movs	r1, #255	; 0xff
 8005cca:	20ff      	movs	r0, #255	; 0xff
 8005ccc:	f7ff fc14 	bl	80054f8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	4619      	mov	r1, r3
 8005cd6:	4620      	mov	r0, r4
 8005cd8:	f7fe ff4d 	bl	8004b76 <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeEb>
    Button250mL.setAction(buttonCallback);
 8005cdc:	1d3b      	adds	r3, r7, #4
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f503 6280 	add.w	r2, r3, #1024	; 0x400
 8005ce4:	1d3b      	adds	r3, r7, #4
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f503 636a 	add.w	r3, r3, #3744	; 0xea0
 8005cec:	4619      	mov	r1, r3
 8005cee:	4610      	mov	r0, r2
 8005cf0:	f7fe fe5a 	bl	80049a8 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    Button500mL.setXY(315, 353);
 8005cf4:	1d3b      	adds	r3, r7, #4
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f203 4344 	addw	r3, r3, #1092	; 0x444
 8005cfc:	f240 1261 	movw	r2, #353	; 0x161
 8005d00:	f240 113b 	movw	r1, #315	; 0x13b
 8005d04:	4618      	mov	r0, r3
 8005d06:	f7fe fc34 	bl	8004572 <_ZN8touchgfx8Drawable5setXYEss>
    Button500mL.setVisible(false);
 8005d0a:	1d3b      	adds	r3, r7, #4
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f203 4344 	addw	r3, r3, #1092	; 0x444
 8005d12:	2100      	movs	r1, #0
 8005d14:	4618      	mov	r0, r3
 8005d16:	f7fe fc9d 	bl	8004654 <_ZN8touchgfx8Drawable10setVisibleEb>
    Button500mL.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
 8005d1a:	1d3b      	adds	r3, r7, #4
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f203 4444 	addw	r4, r3, #1092	; 0x444
 8005d22:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005d26:	2100      	movs	r1, #0
 8005d28:	4618      	mov	r0, r3
 8005d2a:	f7fe fb79 	bl	8004420 <_ZN8touchgfx6BitmapC1Et>
 8005d2e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005d32:	2101      	movs	r1, #1
 8005d34:	4618      	mov	r0, r3
 8005d36:	f7fe fb73 	bl	8004420 <_ZN8touchgfx6BitmapC1Et>
 8005d3a:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8005d3e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005d42:	4619      	mov	r1, r3
 8005d44:	4620      	mov	r0, r4
 8005d46:	f00f fb32 	bl	80153ae <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    Button500mL.setLabelText(touchgfx::TypedText(T_SINGLEUSEID4));
 8005d4a:	1d3b      	adds	r3, r7, #4
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f203 4444 	addw	r4, r3, #1092	; 0x444
 8005d52:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005d56:	2102      	movs	r1, #2
 8005d58:	4618      	mov	r0, r3
 8005d5a:	f7fe feab 	bl	8004ab4 <_ZN8touchgfx9TypedTextC1Et>
 8005d5e:	f8b7 1070 	ldrh.w	r1, [r7, #112]	; 0x70
 8005d62:	4620      	mov	r0, r4
 8005d64:	f7fe fee0 	bl	8004b28 <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>
    Button500mL.setLabelColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8005d68:	1d3b      	adds	r3, r7, #4
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f203 4444 	addw	r4, r3, #1092	; 0x444
 8005d70:	22ff      	movs	r2, #255	; 0xff
 8005d72:	21ff      	movs	r1, #255	; 0xff
 8005d74:	20ff      	movs	r0, #255	; 0xff
 8005d76:	f7ff fbbf 	bl	80054f8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	4619      	mov	r1, r3
 8005d80:	4620      	mov	r0, r4
 8005d82:	f7fe fee0 	bl	8004b46 <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeEb>
    Button500mL.setLabelColorPressed(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8005d86:	1d3b      	adds	r3, r7, #4
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f203 4444 	addw	r4, r3, #1092	; 0x444
 8005d8e:	22ff      	movs	r2, #255	; 0xff
 8005d90:	21ff      	movs	r1, #255	; 0xff
 8005d92:	20ff      	movs	r0, #255	; 0xff
 8005d94:	f7ff fbb0 	bl	80054f8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	4619      	mov	r1, r3
 8005d9e:	4620      	mov	r0, r4
 8005da0:	f7fe fee9 	bl	8004b76 <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeEb>
    Button500mL.setAlpha(135);
 8005da4:	1d3b      	adds	r3, r7, #4
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f203 4344 	addw	r3, r3, #1092	; 0x444
 8005dac:	2187      	movs	r1, #135	; 0x87
 8005dae:	4618      	mov	r0, r3
 8005db0:	f7fe fe70 	bl	8004a94 <_ZN8touchgfx6Button8setAlphaEh>
    Button500mL.setAction(buttonCallback);
 8005db4:	1d3b      	adds	r3, r7, #4
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f203 4244 	addw	r2, r3, #1092	; 0x444
 8005dbc:	1d3b      	adds	r3, r7, #4
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f503 636a 	add.w	r3, r3, #3744	; 0xea0
 8005dc4:	4619      	mov	r1, r3
 8005dc6:	4610      	mov	r0, r2
 8005dc8:	f7fe fdee 	bl	80049a8 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    Button750mL.setXY(555, 353);
 8005dcc:	1d3b      	adds	r3, r7, #4
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f503 6391 	add.w	r3, r3, #1160	; 0x488
 8005dd4:	f240 1261 	movw	r2, #353	; 0x161
 8005dd8:	f240 212b 	movw	r1, #555	; 0x22b
 8005ddc:	4618      	mov	r0, r3
 8005dde:	f7fe fbc8 	bl	8004572 <_ZN8touchgfx8Drawable5setXYEss>
    Button750mL.setVisible(false);
 8005de2:	1d3b      	adds	r3, r7, #4
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f503 6391 	add.w	r3, r3, #1160	; 0x488
 8005dea:	2100      	movs	r1, #0
 8005dec:	4618      	mov	r0, r3
 8005dee:	f7fe fc31 	bl	8004654 <_ZN8touchgfx8Drawable10setVisibleEb>
    Button750mL.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
 8005df2:	1d3b      	adds	r3, r7, #4
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f503 6491 	add.w	r4, r3, #1160	; 0x488
 8005dfa:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005dfe:	2100      	movs	r1, #0
 8005e00:	4618      	mov	r0, r3
 8005e02:	f7fe fb0d 	bl	8004420 <_ZN8touchgfx6BitmapC1Et>
 8005e06:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8005e0a:	2101      	movs	r1, #1
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	f7fe fb07 	bl	8004420 <_ZN8touchgfx6BitmapC1Et>
 8005e12:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8005e16:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005e1a:	4619      	mov	r1, r3
 8005e1c:	4620      	mov	r0, r4
 8005e1e:	f00f fac6 	bl	80153ae <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    Button750mL.setLabelText(touchgfx::TypedText(T_SINGLEUSEID5));
 8005e22:	1d3b      	adds	r3, r7, #4
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f503 6491 	add.w	r4, r3, #1160	; 0x488
 8005e2a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8005e2e:	2103      	movs	r1, #3
 8005e30:	4618      	mov	r0, r3
 8005e32:	f7fe fe3f 	bl	8004ab4 <_ZN8touchgfx9TypedTextC1Et>
 8005e36:	f8b7 107c 	ldrh.w	r1, [r7, #124]	; 0x7c
 8005e3a:	4620      	mov	r0, r4
 8005e3c:	f7fe fe74 	bl	8004b28 <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>
    Button750mL.setLabelColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8005e40:	1d3b      	adds	r3, r7, #4
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f503 6491 	add.w	r4, r3, #1160	; 0x488
 8005e48:	22ff      	movs	r2, #255	; 0xff
 8005e4a:	21ff      	movs	r1, #255	; 0xff
 8005e4c:	20ff      	movs	r0, #255	; 0xff
 8005e4e:	f7ff fb53 	bl	80054f8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8005e52:	4603      	mov	r3, r0
 8005e54:	2200      	movs	r2, #0
 8005e56:	4619      	mov	r1, r3
 8005e58:	4620      	mov	r0, r4
 8005e5a:	f7fe fe74 	bl	8004b46 <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeEb>
    Button750mL.setLabelColorPressed(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8005e5e:	1d3b      	adds	r3, r7, #4
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f503 6491 	add.w	r4, r3, #1160	; 0x488
 8005e66:	22ff      	movs	r2, #255	; 0xff
 8005e68:	21ff      	movs	r1, #255	; 0xff
 8005e6a:	20ff      	movs	r0, #255	; 0xff
 8005e6c:	f7ff fb44 	bl	80054f8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8005e70:	4603      	mov	r3, r0
 8005e72:	2200      	movs	r2, #0
 8005e74:	4619      	mov	r1, r3
 8005e76:	4620      	mov	r0, r4
 8005e78:	f7fe fe7d 	bl	8004b76 <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeEb>
    Button750mL.setAlpha(135);
 8005e7c:	1d3b      	adds	r3, r7, #4
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f503 6391 	add.w	r3, r3, #1160	; 0x488
 8005e84:	2187      	movs	r1, #135	; 0x87
 8005e86:	4618      	mov	r0, r3
 8005e88:	f7fe fe04 	bl	8004a94 <_ZN8touchgfx6Button8setAlphaEh>
    Button750mL.setAction(buttonCallback);
 8005e8c:	1d3b      	adds	r3, r7, #4
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f503 6291 	add.w	r2, r3, #1160	; 0x488
 8005e94:	1d3b      	adds	r3, r7, #4
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f503 636a 	add.w	r3, r3, #3744	; 0xea0
 8005e9c:	4619      	mov	r1, r3
 8005e9e:	4610      	mov	r0, r2
 8005ea0:	f7fe fd82 	bl	80049a8 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    QuantityText.setXY(75, 322);
 8005ea4:	1d3b      	adds	r3, r7, #4
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f203 43cc 	addw	r3, r3, #1228	; 0x4cc
 8005eac:	f44f 72a1 	mov.w	r2, #322	; 0x142
 8005eb0:	214b      	movs	r1, #75	; 0x4b
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	f7fe fb5d 	bl	8004572 <_ZN8touchgfx8Drawable5setXYEss>
    QuantityText.setVisible(false);
 8005eb8:	1d3b      	adds	r3, r7, #4
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f203 43cc 	addw	r3, r3, #1228	; 0x4cc
 8005ec0:	2100      	movs	r1, #0
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	f7fe fbc6 	bl	8004654 <_ZN8touchgfx8Drawable10setVisibleEb>
    QuantityText.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8005ec8:	1d3b      	adds	r3, r7, #4
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f203 44cc 	addw	r4, r3, #1228	; 0x4cc
 8005ed0:	22ff      	movs	r2, #255	; 0xff
 8005ed2:	21ff      	movs	r1, #255	; 0xff
 8005ed4:	20ff      	movs	r0, #255	; 0xff
 8005ed6:	f7ff fb0f 	bl	80054f8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8005eda:	4603      	mov	r3, r0
 8005edc:	4619      	mov	r1, r3
 8005ede:	4620      	mov	r0, r4
 8005ee0:	f7fe ff81 	bl	8004de6 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    QuantityText.setLinespacing(0);
 8005ee4:	1d3b      	adds	r3, r7, #4
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f203 43cc 	addw	r3, r3, #1228	; 0x4cc
 8005eec:	2100      	movs	r1, #0
 8005eee:	4618      	mov	r0, r3
 8005ef0:	f7fe ffcc 	bl	8004e8c <_ZN8touchgfx8TextArea14setLinespacingEs>
    QuantityText.setTypedText(touchgfx::TypedText(T_SINGLEUSEID6));
 8005ef4:	1d3b      	adds	r3, r7, #4
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f203 44cc 	addw	r4, r3, #1228	; 0x4cc
 8005efc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005f00:	2104      	movs	r1, #4
 8005f02:	4618      	mov	r0, r3
 8005f04:	f7fe fdd6 	bl	8004ab4 <_ZN8touchgfx9TypedTextC1Et>
 8005f08:	f8b7 1080 	ldrh.w	r1, [r7, #128]	; 0x80
 8005f0c:	4620      	mov	r0, r4
 8005f0e:	f00f fa0d 	bl	801532c <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    SettingsText.setXY(74, 24);
 8005f12:	1d3b      	adds	r3, r7, #4
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f1a:	2218      	movs	r2, #24
 8005f1c:	214a      	movs	r1, #74	; 0x4a
 8005f1e:	4618      	mov	r0, r3
 8005f20:	f7fe fb27 	bl	8004572 <_ZN8touchgfx8Drawable5setXYEss>
    SettingsText.setVisible(false);
 8005f24:	1d3b      	adds	r3, r7, #4
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f2c:	2100      	movs	r1, #0
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f7fe fb90 	bl	8004654 <_ZN8touchgfx8Drawable10setVisibleEb>
    SettingsText.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8005f34:	1d3b      	adds	r3, r7, #4
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f503 64a0 	add.w	r4, r3, #1280	; 0x500
 8005f3c:	22ff      	movs	r2, #255	; 0xff
 8005f3e:	21ff      	movs	r1, #255	; 0xff
 8005f40:	20ff      	movs	r0, #255	; 0xff
 8005f42:	f7ff fad9 	bl	80054f8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8005f46:	4603      	mov	r3, r0
 8005f48:	4619      	mov	r1, r3
 8005f4a:	4620      	mov	r0, r4
 8005f4c:	f7fe ff4b 	bl	8004de6 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    SettingsText.setLinespacing(0);
 8005f50:	1d3b      	adds	r3, r7, #4
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f58:	2100      	movs	r1, #0
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f7fe ff96 	bl	8004e8c <_ZN8touchgfx8TextArea14setLinespacingEs>
    SettingsText.setTypedText(touchgfx::TypedText(T_SINGLEUSEID7));
 8005f60:	1d3b      	adds	r3, r7, #4
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f503 64a0 	add.w	r4, r3, #1280	; 0x500
 8005f68:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8005f6c:	2105      	movs	r1, #5
 8005f6e:	4618      	mov	r0, r3
 8005f70:	f7fe fda0 	bl	8004ab4 <_ZN8touchgfx9TypedTextC1Et>
 8005f74:	f8b7 1084 	ldrh.w	r1, [r7, #132]	; 0x84
 8005f78:	4620      	mov	r0, r4
 8005f7a:	f00f f9d7 	bl	801532c <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    Line3.setPosition(0, 413, 800, 18);
 8005f7e:	1d3b      	adds	r3, r7, #4
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f203 5034 	addw	r0, r3, #1332	; 0x534
 8005f86:	2312      	movs	r3, #18
 8005f88:	9300      	str	r3, [sp, #0]
 8005f8a:	f44f 7348 	mov.w	r3, #800	; 0x320
 8005f8e:	f240 129d 	movw	r2, #413	; 0x19d
 8005f92:	2100      	movs	r1, #0
 8005f94:	f7fe faa2 	bl	80044dc <_ZN8touchgfx8Drawable11setPositionEssss>
    Line3Painter.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8005f98:	1d3b      	adds	r3, r7, #4
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f503 64b5 	add.w	r4, r3, #1448	; 0x5a8
 8005fa0:	22ff      	movs	r2, #255	; 0xff
 8005fa2:	21ff      	movs	r1, #255	; 0xff
 8005fa4:	20ff      	movs	r0, #255	; 0xff
 8005fa6:	f7ff faa7 	bl	80054f8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8005faa:	4603      	mov	r3, r0
 8005fac:	22ff      	movs	r2, #255	; 0xff
 8005fae:	4619      	mov	r1, r3
 8005fb0:	4620      	mov	r0, r4
 8005fb2:	f00e fc63 	bl	801487c <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>
    Line3.setPainter(Line3Painter);
 8005fb6:	1d3b      	adds	r3, r7, #4
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f203 5234 	addw	r2, r3, #1332	; 0x534
 8005fbe:	1d3b      	adds	r3, r7, #4
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f503 63b5 	add.w	r3, r3, #1448	; 0x5a8
 8005fc6:	4619      	mov	r1, r3
 8005fc8:	4610      	mov	r0, r2
 8005fca:	f00e fcc1 	bl	8014950 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>
    Line3.setStart(75, 5);
 8005fce:	1d3b      	adds	r3, r7, #4
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f203 5334 	addw	r3, r3, #1332	; 0x534
 8005fd6:	2205      	movs	r2, #5
 8005fd8:	214b      	movs	r1, #75	; 0x4b
 8005fda:	4618      	mov	r0, r3
 8005fdc:	f001 fd60 	bl	8007aa0 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    Line3.setEnd(725, 5);
 8005fe0:	1d3b      	adds	r3, r7, #4
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f203 5334 	addw	r3, r3, #1332	; 0x534
 8005fe8:	2205      	movs	r2, #5
 8005fea:	f240 21d5 	movw	r1, #725	; 0x2d5
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f001 fd7c 	bl	8007aec <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    Line3.setLineWidth(2);
 8005ff4:	1d3b      	adds	r3, r7, #4
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f203 5334 	addw	r3, r3, #1332	; 0x534
 8005ffc:	2102      	movs	r1, #2
 8005ffe:	4618      	mov	r0, r3
 8006000:	f001 fd9a 	bl	8007b38 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    Line3.setLineEndingStyle(touchgfx::Line::BUTT_CAP_ENDING);
 8006004:	1d3b      	adds	r3, r7, #4
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f203 5334 	addw	r3, r3, #1332	; 0x534
 800600c:	2100      	movs	r1, #0
 800600e:	4618      	mov	r0, r3
 8006010:	f00e ffb6 	bl	8014f80 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>
    Line3.setVisible(false);
 8006014:	1d3b      	adds	r3, r7, #4
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f203 5334 	addw	r3, r3, #1332	; 0x534
 800601c:	2100      	movs	r1, #0
 800601e:	4618      	mov	r0, r3
 8006020:	f7fe fb18 	bl	8004654 <_ZN8touchgfx8Drawable10setVisibleEb>

    Line2.setPosition(0, 316, 800, 18);
 8006024:	1d3b      	adds	r3, r7, #4
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f503 60b8 	add.w	r0, r3, #1472	; 0x5c0
 800602c:	2312      	movs	r3, #18
 800602e:	9300      	str	r3, [sp, #0]
 8006030:	f44f 7348 	mov.w	r3, #800	; 0x320
 8006034:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8006038:	2100      	movs	r1, #0
 800603a:	f7fe fa4f 	bl	80044dc <_ZN8touchgfx8Drawable11setPositionEssss>
    Line2Painter.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 800603e:	1d3b      	adds	r3, r7, #4
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f203 6434 	addw	r4, r3, #1588	; 0x634
 8006046:	22ff      	movs	r2, #255	; 0xff
 8006048:	21ff      	movs	r1, #255	; 0xff
 800604a:	20ff      	movs	r0, #255	; 0xff
 800604c:	f7ff fa54 	bl	80054f8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8006050:	4603      	mov	r3, r0
 8006052:	22ff      	movs	r2, #255	; 0xff
 8006054:	4619      	mov	r1, r3
 8006056:	4620      	mov	r0, r4
 8006058:	f00e fc10 	bl	801487c <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>
    Line2.setPainter(Line2Painter);
 800605c:	1d3b      	adds	r3, r7, #4
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f503 62b8 	add.w	r2, r3, #1472	; 0x5c0
 8006064:	1d3b      	adds	r3, r7, #4
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f203 6334 	addw	r3, r3, #1588	; 0x634
 800606c:	4619      	mov	r1, r3
 800606e:	4610      	mov	r0, r2
 8006070:	f00e fc6e 	bl	8014950 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>
    Line2.setStart(75, 5);
 8006074:	1d3b      	adds	r3, r7, #4
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f503 63b8 	add.w	r3, r3, #1472	; 0x5c0
 800607c:	2205      	movs	r2, #5
 800607e:	214b      	movs	r1, #75	; 0x4b
 8006080:	4618      	mov	r0, r3
 8006082:	f001 fd0d 	bl	8007aa0 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    Line2.setEnd(725, 5);
 8006086:	1d3b      	adds	r3, r7, #4
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f503 63b8 	add.w	r3, r3, #1472	; 0x5c0
 800608e:	2205      	movs	r2, #5
 8006090:	f240 21d5 	movw	r1, #725	; 0x2d5
 8006094:	4618      	mov	r0, r3
 8006096:	f001 fd29 	bl	8007aec <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    Line2.setLineWidth(2);
 800609a:	1d3b      	adds	r3, r7, #4
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f503 63b8 	add.w	r3, r3, #1472	; 0x5c0
 80060a2:	2102      	movs	r1, #2
 80060a4:	4618      	mov	r0, r3
 80060a6:	f001 fd47 	bl	8007b38 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    Line2.setLineEndingStyle(touchgfx::Line::BUTT_CAP_ENDING);
 80060aa:	1d3b      	adds	r3, r7, #4
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f503 63b8 	add.w	r3, r3, #1472	; 0x5c0
 80060b2:	2100      	movs	r1, #0
 80060b4:	4618      	mov	r0, r3
 80060b6:	f00e ff63 	bl	8014f80 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>
    Line2.setVisible(false);
 80060ba:	1d3b      	adds	r3, r7, #4
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f503 63b8 	add.w	r3, r3, #1472	; 0x5c0
 80060c2:	2100      	movs	r1, #0
 80060c4:	4618      	mov	r0, r3
 80060c6:	f7fe fac5 	bl	8004654 <_ZN8touchgfx8Drawable10setVisibleEb>

    Line1.setPosition(0, 60, 800, 18);
 80060ca:	1d3b      	adds	r3, r7, #4
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f203 604c 	addw	r0, r3, #1612	; 0x64c
 80060d2:	2312      	movs	r3, #18
 80060d4:	9300      	str	r3, [sp, #0]
 80060d6:	f44f 7348 	mov.w	r3, #800	; 0x320
 80060da:	223c      	movs	r2, #60	; 0x3c
 80060dc:	2100      	movs	r1, #0
 80060de:	f7fe f9fd 	bl	80044dc <_ZN8touchgfx8Drawable11setPositionEssss>
    Line1Painter.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80060e2:	1d3b      	adds	r3, r7, #4
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f503 64d8 	add.w	r4, r3, #1728	; 0x6c0
 80060ea:	22ff      	movs	r2, #255	; 0xff
 80060ec:	21ff      	movs	r1, #255	; 0xff
 80060ee:	20ff      	movs	r0, #255	; 0xff
 80060f0:	f7ff fa02 	bl	80054f8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80060f4:	4603      	mov	r3, r0
 80060f6:	22ff      	movs	r2, #255	; 0xff
 80060f8:	4619      	mov	r1, r3
 80060fa:	4620      	mov	r0, r4
 80060fc:	f00e fbbe 	bl	801487c <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>
    Line1.setPainter(Line1Painter);
 8006100:	1d3b      	adds	r3, r7, #4
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f203 624c 	addw	r2, r3, #1612	; 0x64c
 8006108:	1d3b      	adds	r3, r7, #4
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f503 63d8 	add.w	r3, r3, #1728	; 0x6c0
 8006110:	4619      	mov	r1, r3
 8006112:	4610      	mov	r0, r2
 8006114:	f00e fc1c 	bl	8014950 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>
    Line1.setStart(75, 5);
 8006118:	1d3b      	adds	r3, r7, #4
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f203 634c 	addw	r3, r3, #1612	; 0x64c
 8006120:	2205      	movs	r2, #5
 8006122:	214b      	movs	r1, #75	; 0x4b
 8006124:	4618      	mov	r0, r3
 8006126:	f001 fcbb 	bl	8007aa0 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    Line1.setEnd(725, 5);
 800612a:	1d3b      	adds	r3, r7, #4
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f203 634c 	addw	r3, r3, #1612	; 0x64c
 8006132:	2205      	movs	r2, #5
 8006134:	f240 21d5 	movw	r1, #725	; 0x2d5
 8006138:	4618      	mov	r0, r3
 800613a:	f001 fcd7 	bl	8007aec <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    Line1.setLineWidth(2);
 800613e:	1d3b      	adds	r3, r7, #4
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f203 634c 	addw	r3, r3, #1612	; 0x64c
 8006146:	2102      	movs	r1, #2
 8006148:	4618      	mov	r0, r3
 800614a:	f001 fcf5 	bl	8007b38 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    Line1.setLineEndingStyle(touchgfx::Line::BUTT_CAP_ENDING);
 800614e:	1d3b      	adds	r3, r7, #4
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f203 634c 	addw	r3, r3, #1612	; 0x64c
 8006156:	2100      	movs	r1, #0
 8006158:	4618      	mov	r0, r3
 800615a:	f00e ff11 	bl	8014f80 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>
    Line1.setVisible(false);
 800615e:	1d3b      	adds	r3, r7, #4
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f203 634c 	addw	r3, r3, #1612	; 0x64c
 8006166:	2100      	movs	r1, #0
 8006168:	4618      	mov	r0, r3
 800616a:	f7fe fa73 	bl	8004654 <_ZN8touchgfx8Drawable10setVisibleEb>

    Pump1Text.setXY(100, 92);
 800616e:	1d3b      	adds	r3, r7, #4
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f503 63db 	add.w	r3, r3, #1752	; 0x6d8
 8006176:	225c      	movs	r2, #92	; 0x5c
 8006178:	2164      	movs	r1, #100	; 0x64
 800617a:	4618      	mov	r0, r3
 800617c:	f7fe f9f9 	bl	8004572 <_ZN8touchgfx8Drawable5setXYEss>
    Pump1Text.setVisible(false);
 8006180:	1d3b      	adds	r3, r7, #4
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f503 63db 	add.w	r3, r3, #1752	; 0x6d8
 8006188:	2100      	movs	r1, #0
 800618a:	4618      	mov	r0, r3
 800618c:	f7fe fa62 	bl	8004654 <_ZN8touchgfx8Drawable10setVisibleEb>
    Pump1Text.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8006190:	1d3b      	adds	r3, r7, #4
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f503 64db 	add.w	r4, r3, #1752	; 0x6d8
 8006198:	22ff      	movs	r2, #255	; 0xff
 800619a:	21ff      	movs	r1, #255	; 0xff
 800619c:	20ff      	movs	r0, #255	; 0xff
 800619e:	f7ff f9ab 	bl	80054f8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80061a2:	4603      	mov	r3, r0
 80061a4:	4619      	mov	r1, r3
 80061a6:	4620      	mov	r0, r4
 80061a8:	f7fe fe1d 	bl	8004de6 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    Pump1Text.setLinespacing(0);
 80061ac:	1d3b      	adds	r3, r7, #4
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f503 63db 	add.w	r3, r3, #1752	; 0x6d8
 80061b4:	2100      	movs	r1, #0
 80061b6:	4618      	mov	r0, r3
 80061b8:	f7fe fe68 	bl	8004e8c <_ZN8touchgfx8TextArea14setLinespacingEs>
    Pump1Text.setTypedText(touchgfx::TypedText(T_SINGLEUSEID8));
 80061bc:	1d3b      	adds	r3, r7, #4
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f503 64db 	add.w	r4, r3, #1752	; 0x6d8
 80061c4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80061c8:	2106      	movs	r1, #6
 80061ca:	4618      	mov	r0, r3
 80061cc:	f7fe fc72 	bl	8004ab4 <_ZN8touchgfx9TypedTextC1Et>
 80061d0:	f8b7 1088 	ldrh.w	r1, [r7, #136]	; 0x88
 80061d4:	4620      	mov	r0, r4
 80061d6:	f00f f8a9 	bl	801532c <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    Pump2Text.setXY(277, 92);
 80061da:	1d3b      	adds	r3, r7, #4
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f203 730c 	addw	r3, r3, #1804	; 0x70c
 80061e2:	225c      	movs	r2, #92	; 0x5c
 80061e4:	f240 1115 	movw	r1, #277	; 0x115
 80061e8:	4618      	mov	r0, r3
 80061ea:	f7fe f9c2 	bl	8004572 <_ZN8touchgfx8Drawable5setXYEss>
    Pump2Text.setVisible(false);
 80061ee:	1d3b      	adds	r3, r7, #4
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f203 730c 	addw	r3, r3, #1804	; 0x70c
 80061f6:	2100      	movs	r1, #0
 80061f8:	4618      	mov	r0, r3
 80061fa:	f7fe fa2b 	bl	8004654 <_ZN8touchgfx8Drawable10setVisibleEb>
    Pump2Text.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80061fe:	1d3b      	adds	r3, r7, #4
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f203 740c 	addw	r4, r3, #1804	; 0x70c
 8006206:	22ff      	movs	r2, #255	; 0xff
 8006208:	21ff      	movs	r1, #255	; 0xff
 800620a:	20ff      	movs	r0, #255	; 0xff
 800620c:	f7ff f974 	bl	80054f8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8006210:	4603      	mov	r3, r0
 8006212:	4619      	mov	r1, r3
 8006214:	4620      	mov	r0, r4
 8006216:	f7fe fde6 	bl	8004de6 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    Pump2Text.setLinespacing(0);
 800621a:	1d3b      	adds	r3, r7, #4
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f203 730c 	addw	r3, r3, #1804	; 0x70c
 8006222:	2100      	movs	r1, #0
 8006224:	4618      	mov	r0, r3
 8006226:	f7fe fe31 	bl	8004e8c <_ZN8touchgfx8TextArea14setLinespacingEs>
    Pump2Text.setTypedText(touchgfx::TypedText(T_SINGLEUSEID9));
 800622a:	1d3b      	adds	r3, r7, #4
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f203 740c 	addw	r4, r3, #1804	; 0x70c
 8006232:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8006236:	2107      	movs	r1, #7
 8006238:	4618      	mov	r0, r3
 800623a:	f7fe fc3b 	bl	8004ab4 <_ZN8touchgfx9TypedTextC1Et>
 800623e:	f8b7 108c 	ldrh.w	r1, [r7, #140]	; 0x8c
 8006242:	4620      	mov	r0, r4
 8006244:	f00f f872 	bl	801532c <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    Pump3Text.setXY(447, 92);
 8006248:	1d3b      	adds	r3, r7, #4
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f503 63e8 	add.w	r3, r3, #1856	; 0x740
 8006250:	225c      	movs	r2, #92	; 0x5c
 8006252:	f240 11bf 	movw	r1, #447	; 0x1bf
 8006256:	4618      	mov	r0, r3
 8006258:	f7fe f98b 	bl	8004572 <_ZN8touchgfx8Drawable5setXYEss>
    Pump3Text.setVisible(false);
 800625c:	1d3b      	adds	r3, r7, #4
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f503 63e8 	add.w	r3, r3, #1856	; 0x740
 8006264:	2100      	movs	r1, #0
 8006266:	4618      	mov	r0, r3
 8006268:	f7fe f9f4 	bl	8004654 <_ZN8touchgfx8Drawable10setVisibleEb>
    Pump3Text.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 800626c:	1d3b      	adds	r3, r7, #4
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f503 64e8 	add.w	r4, r3, #1856	; 0x740
 8006274:	22ff      	movs	r2, #255	; 0xff
 8006276:	21ff      	movs	r1, #255	; 0xff
 8006278:	20ff      	movs	r0, #255	; 0xff
 800627a:	f7ff f93d 	bl	80054f8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800627e:	4603      	mov	r3, r0
 8006280:	4619      	mov	r1, r3
 8006282:	4620      	mov	r0, r4
 8006284:	f7fe fdaf 	bl	8004de6 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    Pump3Text.setLinespacing(0);
 8006288:	1d3b      	adds	r3, r7, #4
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f503 63e8 	add.w	r3, r3, #1856	; 0x740
 8006290:	2100      	movs	r1, #0
 8006292:	4618      	mov	r0, r3
 8006294:	f7fe fdfa 	bl	8004e8c <_ZN8touchgfx8TextArea14setLinespacingEs>
    Pump3Text.setTypedText(touchgfx::TypedText(T_SINGLEUSEID10));
 8006298:	1d3b      	adds	r3, r7, #4
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f503 64e8 	add.w	r4, r3, #1856	; 0x740
 80062a0:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80062a4:	2108      	movs	r1, #8
 80062a6:	4618      	mov	r0, r3
 80062a8:	f7fe fc04 	bl	8004ab4 <_ZN8touchgfx9TypedTextC1Et>
 80062ac:	f8b7 1090 	ldrh.w	r1, [r7, #144]	; 0x90
 80062b0:	4620      	mov	r0, r4
 80062b2:	f00f f83b 	bl	801532c <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    Pump4Text.setXY(615, 92);
 80062b6:	1d3b      	adds	r3, r7, #4
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f203 7374 	addw	r3, r3, #1908	; 0x774
 80062be:	225c      	movs	r2, #92	; 0x5c
 80062c0:	f240 2167 	movw	r1, #615	; 0x267
 80062c4:	4618      	mov	r0, r3
 80062c6:	f7fe f954 	bl	8004572 <_ZN8touchgfx8Drawable5setXYEss>
    Pump4Text.setVisible(false);
 80062ca:	1d3b      	adds	r3, r7, #4
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f203 7374 	addw	r3, r3, #1908	; 0x774
 80062d2:	2100      	movs	r1, #0
 80062d4:	4618      	mov	r0, r3
 80062d6:	f7fe f9bd 	bl	8004654 <_ZN8touchgfx8Drawable10setVisibleEb>
    Pump4Text.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80062da:	1d3b      	adds	r3, r7, #4
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f203 7474 	addw	r4, r3, #1908	; 0x774
 80062e2:	22ff      	movs	r2, #255	; 0xff
 80062e4:	21ff      	movs	r1, #255	; 0xff
 80062e6:	20ff      	movs	r0, #255	; 0xff
 80062e8:	f7ff f906 	bl	80054f8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80062ec:	4603      	mov	r3, r0
 80062ee:	4619      	mov	r1, r3
 80062f0:	4620      	mov	r0, r4
 80062f2:	f7fe fd78 	bl	8004de6 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    Pump4Text.setLinespacing(0);
 80062f6:	1d3b      	adds	r3, r7, #4
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f203 7374 	addw	r3, r3, #1908	; 0x774
 80062fe:	2100      	movs	r1, #0
 8006300:	4618      	mov	r0, r3
 8006302:	f7fe fdc3 	bl	8004e8c <_ZN8touchgfx8TextArea14setLinespacingEs>
    Pump4Text.setTypedText(touchgfx::TypedText(T_SINGLEUSEID11));
 8006306:	1d3b      	adds	r3, r7, #4
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f203 7474 	addw	r4, r3, #1908	; 0x774
 800630e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8006312:	2109      	movs	r1, #9
 8006314:	4618      	mov	r0, r3
 8006316:	f7fe fbcd 	bl	8004ab4 <_ZN8touchgfx9TypedTextC1Et>
 800631a:	f8b7 1094 	ldrh.w	r1, [r7, #148]	; 0x94
 800631e:	4620      	mov	r0, r4
 8006320:	f00f f804 	bl	801532c <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    PumpDiv1.setPosition(177, 66, 98, 174);
 8006324:	1d3b      	adds	r3, r7, #4
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f503 60f5 	add.w	r0, r3, #1960	; 0x7a8
 800632c:	23ae      	movs	r3, #174	; 0xae
 800632e:	9300      	str	r3, [sp, #0]
 8006330:	2362      	movs	r3, #98	; 0x62
 8006332:	2242      	movs	r2, #66	; 0x42
 8006334:	21b1      	movs	r1, #177	; 0xb1
 8006336:	f7fe f8d1 	bl	80044dc <_ZN8touchgfx8Drawable11setPositionEssss>
    PumpDiv1Painter.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 800633a:	1d3b      	adds	r3, r7, #4
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f603 041c 	addw	r4, r3, #2076	; 0x81c
 8006342:	22ff      	movs	r2, #255	; 0xff
 8006344:	21ff      	movs	r1, #255	; 0xff
 8006346:	20ff      	movs	r0, #255	; 0xff
 8006348:	f7ff f8d6 	bl	80054f8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800634c:	4603      	mov	r3, r0
 800634e:	22ff      	movs	r2, #255	; 0xff
 8006350:	4619      	mov	r1, r3
 8006352:	4620      	mov	r0, r4
 8006354:	f00e fa92 	bl	801487c <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>
    PumpDiv1.setPainter(PumpDiv1Painter);
 8006358:	1d3b      	adds	r3, r7, #4
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f503 62f5 	add.w	r2, r3, #1960	; 0x7a8
 8006360:	1d3b      	adds	r3, r7, #4
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 8006368:	4619      	mov	r1, r3
 800636a:	4610      	mov	r0, r2
 800636c:	f00e faf0 	bl	8014950 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>
    PumpDiv1.setStart(50, 5);
 8006370:	1d3b      	adds	r3, r7, #4
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f503 63f5 	add.w	r3, r3, #1960	; 0x7a8
 8006378:	2205      	movs	r2, #5
 800637a:	2132      	movs	r1, #50	; 0x32
 800637c:	4618      	mov	r0, r3
 800637e:	f001 fb8f 	bl	8007aa0 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    PumpDiv1.setEnd(50, 250);
 8006382:	1d3b      	adds	r3, r7, #4
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f503 63f5 	add.w	r3, r3, #1960	; 0x7a8
 800638a:	22fa      	movs	r2, #250	; 0xfa
 800638c:	2132      	movs	r1, #50	; 0x32
 800638e:	4618      	mov	r0, r3
 8006390:	f001 fbac 	bl	8007aec <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    PumpDiv1.setLineWidth(2);
 8006394:	1d3b      	adds	r3, r7, #4
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f503 63f5 	add.w	r3, r3, #1960	; 0x7a8
 800639c:	2102      	movs	r1, #2
 800639e:	4618      	mov	r0, r3
 80063a0:	f001 fbca 	bl	8007b38 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    PumpDiv1.setLineEndingStyle(touchgfx::Line::ROUND_CAP_ENDING);
 80063a4:	1d3b      	adds	r3, r7, #4
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f503 63f5 	add.w	r3, r3, #1960	; 0x7a8
 80063ac:	2101      	movs	r1, #1
 80063ae:	4618      	mov	r0, r3
 80063b0:	f00e fde6 	bl	8014f80 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>
    PumpDiv1.setVisible(false);
 80063b4:	1d3b      	adds	r3, r7, #4
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f503 63f5 	add.w	r3, r3, #1960	; 0x7a8
 80063bc:	2100      	movs	r1, #0
 80063be:	4618      	mov	r0, r3
 80063c0:	f7fe f948 	bl	8004654 <_ZN8touchgfx8Drawable10setVisibleEb>

    PumpDiv2.setPosition(350, 66, 97, 174);
 80063c4:	1d3b      	adds	r3, r7, #4
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f603 0034 	addw	r0, r3, #2100	; 0x834
 80063cc:	23ae      	movs	r3, #174	; 0xae
 80063ce:	9300      	str	r3, [sp, #0]
 80063d0:	2361      	movs	r3, #97	; 0x61
 80063d2:	2242      	movs	r2, #66	; 0x42
 80063d4:	f44f 71af 	mov.w	r1, #350	; 0x15e
 80063d8:	f7fe f880 	bl	80044dc <_ZN8touchgfx8Drawable11setPositionEssss>
    PumpDiv2Painter.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80063dc:	1d3b      	adds	r3, r7, #4
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f603 04a8 	addw	r4, r3, #2216	; 0x8a8
 80063e4:	22ff      	movs	r2, #255	; 0xff
 80063e6:	21ff      	movs	r1, #255	; 0xff
 80063e8:	20ff      	movs	r0, #255	; 0xff
 80063ea:	f7ff f885 	bl	80054f8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80063ee:	4603      	mov	r3, r0
 80063f0:	22ff      	movs	r2, #255	; 0xff
 80063f2:	4619      	mov	r1, r3
 80063f4:	4620      	mov	r0, r4
 80063f6:	f00e fa41 	bl	801487c <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>
    PumpDiv2.setPainter(PumpDiv2Painter);
 80063fa:	1d3b      	adds	r3, r7, #4
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f603 0234 	addw	r2, r3, #2100	; 0x834
 8006402:	1d3b      	adds	r3, r7, #4
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f603 03a8 	addw	r3, r3, #2216	; 0x8a8
 800640a:	4619      	mov	r1, r3
 800640c:	4610      	mov	r0, r2
 800640e:	f00e fa9f 	bl	8014950 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>
    PumpDiv2.setStart(50, 5);
 8006412:	1d3b      	adds	r3, r7, #4
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f603 0334 	addw	r3, r3, #2100	; 0x834
 800641a:	2205      	movs	r2, #5
 800641c:	2132      	movs	r1, #50	; 0x32
 800641e:	4618      	mov	r0, r3
 8006420:	f001 fb3e 	bl	8007aa0 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    PumpDiv2.setEnd(50, 250);
 8006424:	1d3b      	adds	r3, r7, #4
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f603 0334 	addw	r3, r3, #2100	; 0x834
 800642c:	22fa      	movs	r2, #250	; 0xfa
 800642e:	2132      	movs	r1, #50	; 0x32
 8006430:	4618      	mov	r0, r3
 8006432:	f001 fb5b 	bl	8007aec <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    PumpDiv2.setLineWidth(2);
 8006436:	1d3b      	adds	r3, r7, #4
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f603 0334 	addw	r3, r3, #2100	; 0x834
 800643e:	2102      	movs	r1, #2
 8006440:	4618      	mov	r0, r3
 8006442:	f001 fb79 	bl	8007b38 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    PumpDiv2.setLineEndingStyle(touchgfx::Line::ROUND_CAP_ENDING);
 8006446:	1d3b      	adds	r3, r7, #4
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f603 0334 	addw	r3, r3, #2100	; 0x834
 800644e:	2101      	movs	r1, #1
 8006450:	4618      	mov	r0, r3
 8006452:	f00e fd95 	bl	8014f80 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>
    PumpDiv2.setVisible(false);
 8006456:	1d3b      	adds	r3, r7, #4
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f603 0334 	addw	r3, r3, #2100	; 0x834
 800645e:	2100      	movs	r1, #0
 8006460:	4618      	mov	r0, r3
 8006462:	f7fe f8f7 	bl	8004654 <_ZN8touchgfx8Drawable10setVisibleEb>

    PumpDiv3.setPosition(520, 66, 95, 174);
 8006466:	1d3b      	adds	r3, r7, #4
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f503 600c 	add.w	r0, r3, #2240	; 0x8c0
 800646e:	23ae      	movs	r3, #174	; 0xae
 8006470:	9300      	str	r3, [sp, #0]
 8006472:	235f      	movs	r3, #95	; 0x5f
 8006474:	2242      	movs	r2, #66	; 0x42
 8006476:	f44f 7102 	mov.w	r1, #520	; 0x208
 800647a:	f7fe f82f 	bl	80044dc <_ZN8touchgfx8Drawable11setPositionEssss>
    PumpDiv3Painter.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 800647e:	1d3b      	adds	r3, r7, #4
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f603 1434 	addw	r4, r3, #2356	; 0x934
 8006486:	22ff      	movs	r2, #255	; 0xff
 8006488:	21ff      	movs	r1, #255	; 0xff
 800648a:	20ff      	movs	r0, #255	; 0xff
 800648c:	f7ff f834 	bl	80054f8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8006490:	4603      	mov	r3, r0
 8006492:	22ff      	movs	r2, #255	; 0xff
 8006494:	4619      	mov	r1, r3
 8006496:	4620      	mov	r0, r4
 8006498:	f00e f9f0 	bl	801487c <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>
    PumpDiv3.setPainter(PumpDiv3Painter);
 800649c:	1d3b      	adds	r3, r7, #4
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f503 620c 	add.w	r2, r3, #2240	; 0x8c0
 80064a4:	1d3b      	adds	r3, r7, #4
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f603 1334 	addw	r3, r3, #2356	; 0x934
 80064ac:	4619      	mov	r1, r3
 80064ae:	4610      	mov	r0, r2
 80064b0:	f00e fa4e 	bl	8014950 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>
    PumpDiv3.setStart(50, 5);
 80064b4:	1d3b      	adds	r3, r7, #4
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f503 630c 	add.w	r3, r3, #2240	; 0x8c0
 80064bc:	2205      	movs	r2, #5
 80064be:	2132      	movs	r1, #50	; 0x32
 80064c0:	4618      	mov	r0, r3
 80064c2:	f001 faed 	bl	8007aa0 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    PumpDiv3.setEnd(50, 250);
 80064c6:	1d3b      	adds	r3, r7, #4
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f503 630c 	add.w	r3, r3, #2240	; 0x8c0
 80064ce:	22fa      	movs	r2, #250	; 0xfa
 80064d0:	2132      	movs	r1, #50	; 0x32
 80064d2:	4618      	mov	r0, r3
 80064d4:	f001 fb0a 	bl	8007aec <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    PumpDiv3.setLineWidth(2);
 80064d8:	1d3b      	adds	r3, r7, #4
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f503 630c 	add.w	r3, r3, #2240	; 0x8c0
 80064e0:	2102      	movs	r1, #2
 80064e2:	4618      	mov	r0, r3
 80064e4:	f001 fb28 	bl	8007b38 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    PumpDiv3.setLineEndingStyle(touchgfx::Line::ROUND_CAP_ENDING);
 80064e8:	1d3b      	adds	r3, r7, #4
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f503 630c 	add.w	r3, r3, #2240	; 0x8c0
 80064f0:	2101      	movs	r1, #1
 80064f2:	4618      	mov	r0, r3
 80064f4:	f00e fd44 	bl	8014f80 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>
    PumpDiv3.setVisible(false);
 80064f8:	1d3b      	adds	r3, r7, #4
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f503 630c 	add.w	r3, r3, #2240	; 0x8c0
 8006500:	2100      	movs	r1, #0
 8006502:	4618      	mov	r0, r3
 8006504:	f7fe f8a6 	bl	8004654 <_ZN8touchgfx8Drawable10setVisibleEb>

    Pump1Change.setXY(56, 171);
 8006508:	1d3b      	adds	r3, r7, #4
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f603 134c 	addw	r3, r3, #2380	; 0x94c
 8006510:	22ab      	movs	r2, #171	; 0xab
 8006512:	2138      	movs	r1, #56	; 0x38
 8006514:	4618      	mov	r0, r3
 8006516:	f7fe f82c 	bl	8004572 <_ZN8touchgfx8Drawable5setXYEss>
    Pump1Change.setVisible(false);
 800651a:	1d3b      	adds	r3, r7, #4
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f603 134c 	addw	r3, r3, #2380	; 0x94c
 8006522:	2100      	movs	r1, #0
 8006524:	4618      	mov	r0, r3
 8006526:	f7fe f895 	bl	8004654 <_ZN8touchgfx8Drawable10setVisibleEb>
    Pump1Change.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
 800652a:	1d3b      	adds	r3, r7, #4
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f603 144c 	addw	r4, r3, #2380	; 0x94c
 8006532:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006536:	2100      	movs	r1, #0
 8006538:	4618      	mov	r0, r3
 800653a:	f7fd ff71 	bl	8004420 <_ZN8touchgfx6BitmapC1Et>
 800653e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8006542:	2101      	movs	r1, #1
 8006544:	4618      	mov	r0, r3
 8006546:	f7fd ff6b 	bl	8004420 <_ZN8touchgfx6BitmapC1Et>
 800654a:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 800654e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006552:	4619      	mov	r1, r3
 8006554:	4620      	mov	r0, r4
 8006556:	f00e ff2a 	bl	80153ae <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    Pump1Change.setLabelText(touchgfx::TypedText(T_SINGLEUSEID19));
 800655a:	1d3b      	adds	r3, r7, #4
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f603 144c 	addw	r4, r3, #2380	; 0x94c
 8006562:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8006566:	210d      	movs	r1, #13
 8006568:	4618      	mov	r0, r3
 800656a:	f7fe faa3 	bl	8004ab4 <_ZN8touchgfx9TypedTextC1Et>
 800656e:	f8b7 10a0 	ldrh.w	r1, [r7, #160]	; 0xa0
 8006572:	4620      	mov	r0, r4
 8006574:	f7fe fad8 	bl	8004b28 <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>
    Pump1Change.setLabelColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8006578:	1d3b      	adds	r3, r7, #4
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f603 144c 	addw	r4, r3, #2380	; 0x94c
 8006580:	22ff      	movs	r2, #255	; 0xff
 8006582:	21ff      	movs	r1, #255	; 0xff
 8006584:	20ff      	movs	r0, #255	; 0xff
 8006586:	f7fe ffb7 	bl	80054f8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800658a:	4603      	mov	r3, r0
 800658c:	2200      	movs	r2, #0
 800658e:	4619      	mov	r1, r3
 8006590:	4620      	mov	r0, r4
 8006592:	f7fe fad8 	bl	8004b46 <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeEb>
    Pump1Change.setLabelColorPressed(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8006596:	1d3b      	adds	r3, r7, #4
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f603 144c 	addw	r4, r3, #2380	; 0x94c
 800659e:	22ff      	movs	r2, #255	; 0xff
 80065a0:	21ff      	movs	r1, #255	; 0xff
 80065a2:	20ff      	movs	r0, #255	; 0xff
 80065a4:	f7fe ffa8 	bl	80054f8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80065a8:	4603      	mov	r3, r0
 80065aa:	2200      	movs	r2, #0
 80065ac:	4619      	mov	r1, r3
 80065ae:	4620      	mov	r0, r4
 80065b0:	f7fe fae1 	bl	8004b76 <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeEb>
    Pump1Change.setAction(buttonCallback);
 80065b4:	1d3b      	adds	r3, r7, #4
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f603 124c 	addw	r2, r3, #2380	; 0x94c
 80065bc:	1d3b      	adds	r3, r7, #4
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f503 636a 	add.w	r3, r3, #3744	; 0xea0
 80065c4:	4619      	mov	r1, r3
 80065c6:	4610      	mov	r0, r2
 80065c8:	f7fe f9ee 	bl	80049a8 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    Pump2Change.setXY(230, 171);
 80065cc:	1d3b      	adds	r3, r7, #4
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f503 6319 	add.w	r3, r3, #2448	; 0x990
 80065d4:	22ab      	movs	r2, #171	; 0xab
 80065d6:	21e6      	movs	r1, #230	; 0xe6
 80065d8:	4618      	mov	r0, r3
 80065da:	f7fd ffca 	bl	8004572 <_ZN8touchgfx8Drawable5setXYEss>
    Pump2Change.setVisible(false);
 80065de:	1d3b      	adds	r3, r7, #4
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f503 6319 	add.w	r3, r3, #2448	; 0x990
 80065e6:	2100      	movs	r1, #0
 80065e8:	4618      	mov	r0, r3
 80065ea:	f7fe f833 	bl	8004654 <_ZN8touchgfx8Drawable10setVisibleEb>
    Pump2Change.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
 80065ee:	1d3b      	adds	r3, r7, #4
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f503 6419 	add.w	r4, r3, #2448	; 0x990
 80065f6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80065fa:	2100      	movs	r1, #0
 80065fc:	4618      	mov	r0, r3
 80065fe:	f7fd ff0f 	bl	8004420 <_ZN8touchgfx6BitmapC1Et>
 8006602:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8006606:	2101      	movs	r1, #1
 8006608:	4618      	mov	r0, r3
 800660a:	f7fd ff09 	bl	8004420 <_ZN8touchgfx6BitmapC1Et>
 800660e:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8006612:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8006616:	4619      	mov	r1, r3
 8006618:	4620      	mov	r0, r4
 800661a:	f00e fec8 	bl	80153ae <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    Pump2Change.setLabelText(touchgfx::TypedText(T_SINGLEUSEID16));
 800661e:	1d3b      	adds	r3, r7, #4
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f503 6419 	add.w	r4, r3, #2448	; 0x990
 8006626:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800662a:	210a      	movs	r1, #10
 800662c:	4618      	mov	r0, r3
 800662e:	f7fe fa41 	bl	8004ab4 <_ZN8touchgfx9TypedTextC1Et>
 8006632:	f8b7 10ac 	ldrh.w	r1, [r7, #172]	; 0xac
 8006636:	4620      	mov	r0, r4
 8006638:	f7fe fa76 	bl	8004b28 <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>
    Pump2Change.setLabelColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 800663c:	1d3b      	adds	r3, r7, #4
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f503 6419 	add.w	r4, r3, #2448	; 0x990
 8006644:	22ff      	movs	r2, #255	; 0xff
 8006646:	21ff      	movs	r1, #255	; 0xff
 8006648:	20ff      	movs	r0, #255	; 0xff
 800664a:	f7fe ff55 	bl	80054f8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800664e:	4603      	mov	r3, r0
 8006650:	2200      	movs	r2, #0
 8006652:	4619      	mov	r1, r3
 8006654:	4620      	mov	r0, r4
 8006656:	f7fe fa76 	bl	8004b46 <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeEb>
    Pump2Change.setLabelColorPressed(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 800665a:	1d3b      	adds	r3, r7, #4
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f503 6419 	add.w	r4, r3, #2448	; 0x990
 8006662:	22ff      	movs	r2, #255	; 0xff
 8006664:	21ff      	movs	r1, #255	; 0xff
 8006666:	20ff      	movs	r0, #255	; 0xff
 8006668:	f7fe ff46 	bl	80054f8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800666c:	4603      	mov	r3, r0
 800666e:	2200      	movs	r2, #0
 8006670:	4619      	mov	r1, r3
 8006672:	4620      	mov	r0, r4
 8006674:	f7fe fa7f 	bl	8004b76 <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeEb>
    Pump2Change.setAction(buttonCallback);
 8006678:	1d3b      	adds	r3, r7, #4
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f503 6219 	add.w	r2, r3, #2448	; 0x990
 8006680:	1d3b      	adds	r3, r7, #4
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f503 636a 	add.w	r3, r3, #3744	; 0xea0
 8006688:	4619      	mov	r1, r3
 800668a:	4610      	mov	r0, r2
 800668c:	f7fe f98c 	bl	80049a8 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    Pump3Change.setXY(400, 171);
 8006690:	1d3b      	adds	r3, r7, #4
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f603 13d4 	addw	r3, r3, #2516	; 0x9d4
 8006698:	22ab      	movs	r2, #171	; 0xab
 800669a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800669e:	4618      	mov	r0, r3
 80066a0:	f7fd ff67 	bl	8004572 <_ZN8touchgfx8Drawable5setXYEss>
    Pump3Change.setVisible(false);
 80066a4:	1d3b      	adds	r3, r7, #4
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f603 13d4 	addw	r3, r3, #2516	; 0x9d4
 80066ac:	2100      	movs	r1, #0
 80066ae:	4618      	mov	r0, r3
 80066b0:	f7fd ffd0 	bl	8004654 <_ZN8touchgfx8Drawable10setVisibleEb>
    Pump3Change.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
 80066b4:	1d3b      	adds	r3, r7, #4
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f603 14d4 	addw	r4, r3, #2516	; 0x9d4
 80066bc:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80066c0:	2100      	movs	r1, #0
 80066c2:	4618      	mov	r0, r3
 80066c4:	f7fd feac 	bl	8004420 <_ZN8touchgfx6BitmapC1Et>
 80066c8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80066cc:	2101      	movs	r1, #1
 80066ce:	4618      	mov	r0, r3
 80066d0:	f7fd fea6 	bl	8004420 <_ZN8touchgfx6BitmapC1Et>
 80066d4:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 80066d8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80066dc:	4619      	mov	r1, r3
 80066de:	4620      	mov	r0, r4
 80066e0:	f00e fe65 	bl	80153ae <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    Pump3Change.setLabelText(touchgfx::TypedText(T_SINGLEUSEID17));
 80066e4:	1d3b      	adds	r3, r7, #4
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f603 14d4 	addw	r4, r3, #2516	; 0x9d4
 80066ec:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80066f0:	210b      	movs	r1, #11
 80066f2:	4618      	mov	r0, r3
 80066f4:	f7fe f9de 	bl	8004ab4 <_ZN8touchgfx9TypedTextC1Et>
 80066f8:	f8b7 10b8 	ldrh.w	r1, [r7, #184]	; 0xb8
 80066fc:	4620      	mov	r0, r4
 80066fe:	f7fe fa13 	bl	8004b28 <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>
    Pump3Change.setLabelColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8006702:	1d3b      	adds	r3, r7, #4
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f603 14d4 	addw	r4, r3, #2516	; 0x9d4
 800670a:	22ff      	movs	r2, #255	; 0xff
 800670c:	21ff      	movs	r1, #255	; 0xff
 800670e:	20ff      	movs	r0, #255	; 0xff
 8006710:	f7fe fef2 	bl	80054f8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8006714:	4603      	mov	r3, r0
 8006716:	2200      	movs	r2, #0
 8006718:	4619      	mov	r1, r3
 800671a:	4620      	mov	r0, r4
 800671c:	f7fe fa13 	bl	8004b46 <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeEb>
    Pump3Change.setLabelColorPressed(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8006720:	1d3b      	adds	r3, r7, #4
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f603 14d4 	addw	r4, r3, #2516	; 0x9d4
 8006728:	22ff      	movs	r2, #255	; 0xff
 800672a:	21ff      	movs	r1, #255	; 0xff
 800672c:	20ff      	movs	r0, #255	; 0xff
 800672e:	f7fe fee3 	bl	80054f8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8006732:	4603      	mov	r3, r0
 8006734:	2200      	movs	r2, #0
 8006736:	4619      	mov	r1, r3
 8006738:	4620      	mov	r0, r4
 800673a:	f7fe fa1c 	bl	8004b76 <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeEb>
    Pump3Change.setAction(buttonCallback);
 800673e:	1d3b      	adds	r3, r7, #4
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f603 12d4 	addw	r2, r3, #2516	; 0x9d4
 8006746:	1d3b      	adds	r3, r7, #4
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f503 636a 	add.w	r3, r3, #3744	; 0xea0
 800674e:	4619      	mov	r1, r3
 8006750:	4610      	mov	r0, r2
 8006752:	f7fe f929 	bl	80049a8 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    Pump4Change.setXY(570, 171);
 8006756:	1d3b      	adds	r3, r7, #4
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f603 2318 	addw	r3, r3, #2584	; 0xa18
 800675e:	22ab      	movs	r2, #171	; 0xab
 8006760:	f240 213a 	movw	r1, #570	; 0x23a
 8006764:	4618      	mov	r0, r3
 8006766:	f7fd ff04 	bl	8004572 <_ZN8touchgfx8Drawable5setXYEss>
    Pump4Change.setVisible(false);
 800676a:	1d3b      	adds	r3, r7, #4
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f603 2318 	addw	r3, r3, #2584	; 0xa18
 8006772:	2100      	movs	r1, #0
 8006774:	4618      	mov	r0, r3
 8006776:	f7fd ff6d 	bl	8004654 <_ZN8touchgfx8Drawable10setVisibleEb>
    Pump4Change.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
 800677a:	1d3b      	adds	r3, r7, #4
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f603 2418 	addw	r4, r3, #2584	; 0xa18
 8006782:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8006786:	2100      	movs	r1, #0
 8006788:	4618      	mov	r0, r3
 800678a:	f7fd fe49 	bl	8004420 <_ZN8touchgfx6BitmapC1Et>
 800678e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8006792:	2101      	movs	r1, #1
 8006794:	4618      	mov	r0, r3
 8006796:	f7fd fe43 	bl	8004420 <_ZN8touchgfx6BitmapC1Et>
 800679a:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 800679e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80067a2:	4619      	mov	r1, r3
 80067a4:	4620      	mov	r0, r4
 80067a6:	f00e fe02 	bl	80153ae <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    Pump4Change.setLabelText(touchgfx::TypedText(T_SINGLEUSEID18));
 80067aa:	1d3b      	adds	r3, r7, #4
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f603 2418 	addw	r4, r3, #2584	; 0xa18
 80067b2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80067b6:	210c      	movs	r1, #12
 80067b8:	4618      	mov	r0, r3
 80067ba:	f7fe f97b 	bl	8004ab4 <_ZN8touchgfx9TypedTextC1Et>
 80067be:	f8b7 10c4 	ldrh.w	r1, [r7, #196]	; 0xc4
 80067c2:	4620      	mov	r0, r4
 80067c4:	f7fe f9b0 	bl	8004b28 <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>
    Pump4Change.setLabelColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80067c8:	1d3b      	adds	r3, r7, #4
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f603 2418 	addw	r4, r3, #2584	; 0xa18
 80067d0:	22ff      	movs	r2, #255	; 0xff
 80067d2:	21ff      	movs	r1, #255	; 0xff
 80067d4:	20ff      	movs	r0, #255	; 0xff
 80067d6:	f7fe fe8f 	bl	80054f8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80067da:	4603      	mov	r3, r0
 80067dc:	2200      	movs	r2, #0
 80067de:	4619      	mov	r1, r3
 80067e0:	4620      	mov	r0, r4
 80067e2:	f7fe f9b0 	bl	8004b46 <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeEb>
    Pump4Change.setLabelColorPressed(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80067e6:	1d3b      	adds	r3, r7, #4
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f603 2418 	addw	r4, r3, #2584	; 0xa18
 80067ee:	22ff      	movs	r2, #255	; 0xff
 80067f0:	21ff      	movs	r1, #255	; 0xff
 80067f2:	20ff      	movs	r0, #255	; 0xff
 80067f4:	f7fe fe80 	bl	80054f8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80067f8:	4603      	mov	r3, r0
 80067fa:	2200      	movs	r2, #0
 80067fc:	4619      	mov	r1, r3
 80067fe:	4620      	mov	r0, r4
 8006800:	f7fe f9b9 	bl	8004b76 <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeEb>
    Pump4Change.setAction(buttonCallback);
 8006804:	1d3b      	adds	r3, r7, #4
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f603 2218 	addw	r2, r3, #2584	; 0xa18
 800680c:	1d3b      	adds	r3, r7, #4
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f503 636a 	add.w	r3, r3, #3744	; 0xea0
 8006814:	4619      	mov	r1, r3
 8006816:	4610      	mov	r0, r2
 8006818:	f7fe f8c6 	bl	80049a8 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    Line1_2.setPosition(0, 240, 800, 18);
 800681c:	1d3b      	adds	r3, r7, #4
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f603 205c 	addw	r0, r3, #2652	; 0xa5c
 8006824:	2312      	movs	r3, #18
 8006826:	9300      	str	r3, [sp, #0]
 8006828:	f44f 7348 	mov.w	r3, #800	; 0x320
 800682c:	22f0      	movs	r2, #240	; 0xf0
 800682e:	2100      	movs	r1, #0
 8006830:	f7fd fe54 	bl	80044dc <_ZN8touchgfx8Drawable11setPositionEssss>
    Line1_2Painter.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8006834:	1d3b      	adds	r3, r7, #4
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f503 642d 	add.w	r4, r3, #2768	; 0xad0
 800683c:	22ff      	movs	r2, #255	; 0xff
 800683e:	21ff      	movs	r1, #255	; 0xff
 8006840:	20ff      	movs	r0, #255	; 0xff
 8006842:	f7fe fe59 	bl	80054f8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8006846:	4603      	mov	r3, r0
 8006848:	22ff      	movs	r2, #255	; 0xff
 800684a:	4619      	mov	r1, r3
 800684c:	4620      	mov	r0, r4
 800684e:	f00e f815 	bl	801487c <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>
    Line1_2.setPainter(Line1_2Painter);
 8006852:	1d3b      	adds	r3, r7, #4
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f603 225c 	addw	r2, r3, #2652	; 0xa5c
 800685a:	1d3b      	adds	r3, r7, #4
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f503 632d 	add.w	r3, r3, #2768	; 0xad0
 8006862:	4619      	mov	r1, r3
 8006864:	4610      	mov	r0, r2
 8006866:	f00e f873 	bl	8014950 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>
    Line1_2.setStart(75, 5);
 800686a:	1d3b      	adds	r3, r7, #4
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f603 235c 	addw	r3, r3, #2652	; 0xa5c
 8006872:	2205      	movs	r2, #5
 8006874:	214b      	movs	r1, #75	; 0x4b
 8006876:	4618      	mov	r0, r3
 8006878:	f001 f912 	bl	8007aa0 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    Line1_2.setEnd(725, 5);
 800687c:	1d3b      	adds	r3, r7, #4
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f603 235c 	addw	r3, r3, #2652	; 0xa5c
 8006884:	2205      	movs	r2, #5
 8006886:	f240 21d5 	movw	r1, #725	; 0x2d5
 800688a:	4618      	mov	r0, r3
 800688c:	f001 f92e 	bl	8007aec <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    Line1_2.setLineWidth(2);
 8006890:	1d3b      	adds	r3, r7, #4
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f603 235c 	addw	r3, r3, #2652	; 0xa5c
 8006898:	2102      	movs	r1, #2
 800689a:	4618      	mov	r0, r3
 800689c:	f001 f94c 	bl	8007b38 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    Line1_2.setLineEndingStyle(touchgfx::Line::BUTT_CAP_ENDING);
 80068a0:	1d3b      	adds	r3, r7, #4
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f603 235c 	addw	r3, r3, #2652	; 0xa5c
 80068a8:	2100      	movs	r1, #0
 80068aa:	4618      	mov	r0, r3
 80068ac:	f00e fb68 	bl	8014f80 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>
    Line1_2.setVisible(false);
 80068b0:	1d3b      	adds	r3, r7, #4
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f603 235c 	addw	r3, r3, #2652	; 0xa5c
 80068b8:	2100      	movs	r1, #0
 80068ba:	4618      	mov	r0, r3
 80068bc:	f7fd feca 	bl	8004654 <_ZN8touchgfx8Drawable10setVisibleEb>

    Pump1Content.setPosition(112, 138, 70, 25);
 80068c0:	1d3b      	adds	r3, r7, #4
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f603 20e8 	addw	r0, r3, #2792	; 0xae8
 80068c8:	2319      	movs	r3, #25
 80068ca:	9300      	str	r3, [sp, #0]
 80068cc:	2346      	movs	r3, #70	; 0x46
 80068ce:	228a      	movs	r2, #138	; 0x8a
 80068d0:	2170      	movs	r1, #112	; 0x70
 80068d2:	f7fd fe03 	bl	80044dc <_ZN8touchgfx8Drawable11setPositionEssss>
    Pump1Content.setVisible(false);
 80068d6:	1d3b      	adds	r3, r7, #4
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f603 23e8 	addw	r3, r3, #2792	; 0xae8
 80068de:	2100      	movs	r1, #0
 80068e0:	4618      	mov	r0, r3
 80068e2:	f7fd feb7 	bl	8004654 <_ZN8touchgfx8Drawable10setVisibleEb>
    Pump1Content.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80068e6:	1d3b      	adds	r3, r7, #4
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f603 24e8 	addw	r4, r3, #2792	; 0xae8
 80068ee:	22ff      	movs	r2, #255	; 0xff
 80068f0:	21ff      	movs	r1, #255	; 0xff
 80068f2:	20ff      	movs	r0, #255	; 0xff
 80068f4:	f7fe fe00 	bl	80054f8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80068f8:	4603      	mov	r3, r0
 80068fa:	4619      	mov	r1, r3
 80068fc:	4620      	mov	r0, r4
 80068fe:	f7fe fa72 	bl	8004de6 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    Pump1Content.setLinespacing(0);
 8006902:	1d3b      	adds	r3, r7, #4
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f603 23e8 	addw	r3, r3, #2792	; 0xae8
 800690a:	2100      	movs	r1, #0
 800690c:	4618      	mov	r0, r3
 800690e:	f7fe fabd 	bl	8004e8c <_ZN8touchgfx8TextArea14setLinespacingEs>
    Pump1ContentBuffer[0] = 0;
 8006912:	1d3b      	adds	r3, r7, #4
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	2200      	movs	r2, #0
 8006918:	f8a3 2e60 	strh.w	r2, [r3, #3680]	; 0xe60
    Pump1Content.setWildcard(Pump1ContentBuffer);
 800691c:	1d3b      	adds	r3, r7, #4
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f603 22e8 	addw	r2, r3, #2792	; 0xae8
 8006924:	1d3b      	adds	r3, r7, #4
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f503 6366 	add.w	r3, r3, #3680	; 0xe60
 800692c:	4619      	mov	r1, r3
 800692e:	4610      	mov	r0, r2
 8006930:	f7fe fb92 	bl	8005058 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    Pump1Content.setTypedText(touchgfx::TypedText(T_SINGLEUSEID20));
 8006934:	1d3b      	adds	r3, r7, #4
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f603 24e8 	addw	r4, r3, #2792	; 0xae8
 800693c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8006940:	210e      	movs	r1, #14
 8006942:	4618      	mov	r0, r3
 8006944:	f7fe f8b6 	bl	8004ab4 <_ZN8touchgfx9TypedTextC1Et>
 8006948:	f8b7 10c8 	ldrh.w	r1, [r7, #200]	; 0xc8
 800694c:	4620      	mov	r0, r4
 800694e:	f00e fced 	bl	801532c <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    Pump2Content.setPosition(289, 138, 70, 25);
 8006952:	1d3b      	adds	r3, r7, #4
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f503 6032 	add.w	r0, r3, #2848	; 0xb20
 800695a:	2319      	movs	r3, #25
 800695c:	9300      	str	r3, [sp, #0]
 800695e:	2346      	movs	r3, #70	; 0x46
 8006960:	228a      	movs	r2, #138	; 0x8a
 8006962:	f240 1121 	movw	r1, #289	; 0x121
 8006966:	f7fd fdb9 	bl	80044dc <_ZN8touchgfx8Drawable11setPositionEssss>
    Pump2Content.setVisible(false);
 800696a:	1d3b      	adds	r3, r7, #4
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f503 6332 	add.w	r3, r3, #2848	; 0xb20
 8006972:	2100      	movs	r1, #0
 8006974:	4618      	mov	r0, r3
 8006976:	f7fd fe6d 	bl	8004654 <_ZN8touchgfx8Drawable10setVisibleEb>
    Pump2Content.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 800697a:	1d3b      	adds	r3, r7, #4
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f503 6432 	add.w	r4, r3, #2848	; 0xb20
 8006982:	22ff      	movs	r2, #255	; 0xff
 8006984:	21ff      	movs	r1, #255	; 0xff
 8006986:	20ff      	movs	r0, #255	; 0xff
 8006988:	f7fe fdb6 	bl	80054f8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800698c:	4603      	mov	r3, r0
 800698e:	4619      	mov	r1, r3
 8006990:	4620      	mov	r0, r4
 8006992:	f7fe fa28 	bl	8004de6 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    Pump2Content.setLinespacing(0);
 8006996:	1d3b      	adds	r3, r7, #4
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f503 6332 	add.w	r3, r3, #2848	; 0xb20
 800699e:	2100      	movs	r1, #0
 80069a0:	4618      	mov	r0, r3
 80069a2:	f7fe fa73 	bl	8004e8c <_ZN8touchgfx8TextArea14setLinespacingEs>
    Pump2ContentBuffer[0] = 0;
 80069a6:	1d3b      	adds	r3, r7, #4
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	2200      	movs	r2, #0
 80069ac:	f8a3 2e70 	strh.w	r2, [r3, #3696]	; 0xe70
    Pump2Content.setWildcard(Pump2ContentBuffer);
 80069b0:	1d3b      	adds	r3, r7, #4
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f503 6232 	add.w	r2, r3, #2848	; 0xb20
 80069b8:	1d3b      	adds	r3, r7, #4
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f503 6367 	add.w	r3, r3, #3696	; 0xe70
 80069c0:	4619      	mov	r1, r3
 80069c2:	4610      	mov	r0, r2
 80069c4:	f7fe fb48 	bl	8005058 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    Pump2Content.setTypedText(touchgfx::TypedText(T_SINGLEUSEID22));
 80069c8:	1d3b      	adds	r3, r7, #4
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f503 6432 	add.w	r4, r3, #2848	; 0xb20
 80069d0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80069d4:	210f      	movs	r1, #15
 80069d6:	4618      	mov	r0, r3
 80069d8:	f7fe f86c 	bl	8004ab4 <_ZN8touchgfx9TypedTextC1Et>
 80069dc:	f8b7 10cc 	ldrh.w	r1, [r7, #204]	; 0xcc
 80069e0:	4620      	mov	r0, r4
 80069e2:	f00e fca3 	bl	801532c <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    Pump3Content.setPosition(459, 138, 70, 25);
 80069e6:	1d3b      	adds	r3, r7, #4
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f603 3058 	addw	r0, r3, #2904	; 0xb58
 80069ee:	2319      	movs	r3, #25
 80069f0:	9300      	str	r3, [sp, #0]
 80069f2:	2346      	movs	r3, #70	; 0x46
 80069f4:	228a      	movs	r2, #138	; 0x8a
 80069f6:	f240 11cb 	movw	r1, #459	; 0x1cb
 80069fa:	f7fd fd6f 	bl	80044dc <_ZN8touchgfx8Drawable11setPositionEssss>
    Pump3Content.setVisible(false);
 80069fe:	1d3b      	adds	r3, r7, #4
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f603 3358 	addw	r3, r3, #2904	; 0xb58
 8006a06:	2100      	movs	r1, #0
 8006a08:	4618      	mov	r0, r3
 8006a0a:	f7fd fe23 	bl	8004654 <_ZN8touchgfx8Drawable10setVisibleEb>
    Pump3Content.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8006a0e:	1d3b      	adds	r3, r7, #4
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f603 3458 	addw	r4, r3, #2904	; 0xb58
 8006a16:	22ff      	movs	r2, #255	; 0xff
 8006a18:	21ff      	movs	r1, #255	; 0xff
 8006a1a:	20ff      	movs	r0, #255	; 0xff
 8006a1c:	f7fe fd6c 	bl	80054f8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8006a20:	4603      	mov	r3, r0
 8006a22:	4619      	mov	r1, r3
 8006a24:	4620      	mov	r0, r4
 8006a26:	f7fe f9de 	bl	8004de6 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    Pump3Content.setLinespacing(0);
 8006a2a:	1d3b      	adds	r3, r7, #4
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f603 3358 	addw	r3, r3, #2904	; 0xb58
 8006a32:	2100      	movs	r1, #0
 8006a34:	4618      	mov	r0, r3
 8006a36:	f7fe fa29 	bl	8004e8c <_ZN8touchgfx8TextArea14setLinespacingEs>
    Pump3ContentBuffer[0] = 0;
 8006a3a:	1d3b      	adds	r3, r7, #4
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	f8a3 2e80 	strh.w	r2, [r3, #3712]	; 0xe80
    Pump3Content.setWildcard(Pump3ContentBuffer);
 8006a44:	1d3b      	adds	r3, r7, #4
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f603 3258 	addw	r2, r3, #2904	; 0xb58
 8006a4c:	1d3b      	adds	r3, r7, #4
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f503 6368 	add.w	r3, r3, #3712	; 0xe80
 8006a54:	4619      	mov	r1, r3
 8006a56:	4610      	mov	r0, r2
 8006a58:	f7fe fafe 	bl	8005058 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    Pump3Content.setTypedText(touchgfx::TypedText(T_SINGLEUSEID24));
 8006a5c:	1d3b      	adds	r3, r7, #4
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f603 3458 	addw	r4, r3, #2904	; 0xb58
 8006a64:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8006a68:	2110      	movs	r1, #16
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	f7fe f822 	bl	8004ab4 <_ZN8touchgfx9TypedTextC1Et>
 8006a70:	f8b7 10d0 	ldrh.w	r1, [r7, #208]	; 0xd0
 8006a74:	4620      	mov	r0, r4
 8006a76:	f00e fc59 	bl	801532c <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    Pump4Content.setPosition(627, 138, 70, 25);
 8006a7a:	1d3b      	adds	r3, r7, #4
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f503 6039 	add.w	r0, r3, #2960	; 0xb90
 8006a82:	2319      	movs	r3, #25
 8006a84:	9300      	str	r3, [sp, #0]
 8006a86:	2346      	movs	r3, #70	; 0x46
 8006a88:	228a      	movs	r2, #138	; 0x8a
 8006a8a:	f240 2173 	movw	r1, #627	; 0x273
 8006a8e:	f7fd fd25 	bl	80044dc <_ZN8touchgfx8Drawable11setPositionEssss>
    Pump4Content.setVisible(false);
 8006a92:	1d3b      	adds	r3, r7, #4
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f503 6339 	add.w	r3, r3, #2960	; 0xb90
 8006a9a:	2100      	movs	r1, #0
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	f7fd fdd9 	bl	8004654 <_ZN8touchgfx8Drawable10setVisibleEb>
    Pump4Content.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8006aa2:	1d3b      	adds	r3, r7, #4
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f503 6439 	add.w	r4, r3, #2960	; 0xb90
 8006aaa:	22ff      	movs	r2, #255	; 0xff
 8006aac:	21ff      	movs	r1, #255	; 0xff
 8006aae:	20ff      	movs	r0, #255	; 0xff
 8006ab0:	f7fe fd22 	bl	80054f8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	4619      	mov	r1, r3
 8006ab8:	4620      	mov	r0, r4
 8006aba:	f7fe f994 	bl	8004de6 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    Pump4Content.setLinespacing(0);
 8006abe:	1d3b      	adds	r3, r7, #4
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f503 6339 	add.w	r3, r3, #2960	; 0xb90
 8006ac6:	2100      	movs	r1, #0
 8006ac8:	4618      	mov	r0, r3
 8006aca:	f7fe f9df 	bl	8004e8c <_ZN8touchgfx8TextArea14setLinespacingEs>
    Pump4ContentBuffer[0] = 0;
 8006ace:	1d3b      	adds	r3, r7, #4
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	f8a3 2e90 	strh.w	r2, [r3, #3728]	; 0xe90
    Pump4Content.setWildcard(Pump4ContentBuffer);
 8006ad8:	1d3b      	adds	r3, r7, #4
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f503 6239 	add.w	r2, r3, #2960	; 0xb90
 8006ae0:	1d3b      	adds	r3, r7, #4
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f503 6369 	add.w	r3, r3, #3728	; 0xe90
 8006ae8:	4619      	mov	r1, r3
 8006aea:	4610      	mov	r0, r2
 8006aec:	f7fe fab4 	bl	8005058 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    Pump4Content.setTypedText(touchgfx::TypedText(T_SINGLEUSEID26));
 8006af0:	1d3b      	adds	r3, r7, #4
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f503 6439 	add.w	r4, r3, #2960	; 0xb90
 8006af8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8006afc:	2111      	movs	r1, #17
 8006afe:	4618      	mov	r0, r3
 8006b00:	f7fd ffd8 	bl	8004ab4 <_ZN8touchgfx9TypedTextC1Et>
 8006b04:	f8b7 10d4 	ldrh.w	r1, [r7, #212]	; 0xd4
 8006b08:	4620      	mov	r0, r4
 8006b0a:	f00e fc0f 	bl	801532c <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    SelectText.setXY(74, 24);
 8006b0e:	1d3b      	adds	r3, r7, #4
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f603 33c8 	addw	r3, r3, #3016	; 0xbc8
 8006b16:	2218      	movs	r2, #24
 8006b18:	214a      	movs	r1, #74	; 0x4a
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f7fd fd29 	bl	8004572 <_ZN8touchgfx8Drawable5setXYEss>
    SelectText.setVisible(false);
 8006b20:	1d3b      	adds	r3, r7, #4
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f603 33c8 	addw	r3, r3, #3016	; 0xbc8
 8006b28:	2100      	movs	r1, #0
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	f7fd fd92 	bl	8004654 <_ZN8touchgfx8Drawable10setVisibleEb>
    SelectText.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8006b30:	1d3b      	adds	r3, r7, #4
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f603 34c8 	addw	r4, r3, #3016	; 0xbc8
 8006b38:	22ff      	movs	r2, #255	; 0xff
 8006b3a:	21ff      	movs	r1, #255	; 0xff
 8006b3c:	20ff      	movs	r0, #255	; 0xff
 8006b3e:	f7fe fcdb 	bl	80054f8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8006b42:	4603      	mov	r3, r0
 8006b44:	4619      	mov	r1, r3
 8006b46:	4620      	mov	r0, r4
 8006b48:	f7fe f94d 	bl	8004de6 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    SelectText.setLinespacing(0);
 8006b4c:	1d3b      	adds	r3, r7, #4
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f603 33c8 	addw	r3, r3, #3016	; 0xbc8
 8006b54:	2100      	movs	r1, #0
 8006b56:	4618      	mov	r0, r3
 8006b58:	f7fe f998 	bl	8004e8c <_ZN8touchgfx8TextArea14setLinespacingEs>
    SelectText.setTypedText(touchgfx::TypedText(T_SINGLEUSEID27));
 8006b5c:	1d3b      	adds	r3, r7, #4
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f603 34c8 	addw	r4, r3, #3016	; 0xbc8
 8006b64:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8006b68:	2112      	movs	r1, #18
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	f7fd ffa2 	bl	8004ab4 <_ZN8touchgfx9TypedTextC1Et>
 8006b70:	f8b7 10d8 	ldrh.w	r1, [r7, #216]	; 0xd8
 8006b74:	4620      	mov	r0, r4
 8006b76:	f00e fbd9 	bl	801532c <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    SelectTodo1_1.setXY(315, 263);
 8006b7a:	1d3b      	adds	r3, r7, #4
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f603 33fc 	addw	r3, r3, #3068	; 0xbfc
 8006b82:	f240 1207 	movw	r2, #263	; 0x107
 8006b86:	f240 113b 	movw	r1, #315	; 0x13b
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	f7fd fcf1 	bl	8004572 <_ZN8touchgfx8Drawable5setXYEss>
    SelectTodo1_1.setVisible(false);
 8006b90:	1d3b      	adds	r3, r7, #4
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f603 33fc 	addw	r3, r3, #3068	; 0xbfc
 8006b98:	2100      	movs	r1, #0
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	f7fd fd5a 	bl	8004654 <_ZN8touchgfx8Drawable10setVisibleEb>
    SelectTodo1_1.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
 8006ba0:	1d3b      	adds	r3, r7, #4
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f603 34fc 	addw	r4, r3, #3068	; 0xbfc
 8006ba8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8006bac:	2100      	movs	r1, #0
 8006bae:	4618      	mov	r0, r3
 8006bb0:	f7fd fc36 	bl	8004420 <_ZN8touchgfx6BitmapC1Et>
 8006bb4:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8006bb8:	2101      	movs	r1, #1
 8006bba:	4618      	mov	r0, r3
 8006bbc:	f7fd fc30 	bl	8004420 <_ZN8touchgfx6BitmapC1Et>
 8006bc0:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8006bc4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8006bc8:	4619      	mov	r1, r3
 8006bca:	4620      	mov	r0, r4
 8006bcc:	f00e fbef 	bl	80153ae <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    SelectTodo1_1.setLabelText(touchgfx::TypedText(T_SINGLEUSEID35));
 8006bd0:	1d3b      	adds	r3, r7, #4
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f603 34fc 	addw	r4, r3, #3068	; 0xbfc
 8006bd8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8006bdc:	211a      	movs	r1, #26
 8006bde:	4618      	mov	r0, r3
 8006be0:	f7fd ff68 	bl	8004ab4 <_ZN8touchgfx9TypedTextC1Et>
 8006be4:	f8b7 10e4 	ldrh.w	r1, [r7, #228]	; 0xe4
 8006be8:	4620      	mov	r0, r4
 8006bea:	f7fd ff9d 	bl	8004b28 <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>
    SelectTodo1_1.setLabelColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8006bee:	1d3b      	adds	r3, r7, #4
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f603 34fc 	addw	r4, r3, #3068	; 0xbfc
 8006bf6:	22ff      	movs	r2, #255	; 0xff
 8006bf8:	21ff      	movs	r1, #255	; 0xff
 8006bfa:	20ff      	movs	r0, #255	; 0xff
 8006bfc:	f7fe fc7c 	bl	80054f8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8006c00:	4603      	mov	r3, r0
 8006c02:	2200      	movs	r2, #0
 8006c04:	4619      	mov	r1, r3
 8006c06:	4620      	mov	r0, r4
 8006c08:	f7fd ff9d 	bl	8004b46 <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeEb>
    SelectTodo1_1.setLabelColorPressed(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8006c0c:	1d3b      	adds	r3, r7, #4
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f603 34fc 	addw	r4, r3, #3068	; 0xbfc
 8006c14:	22ff      	movs	r2, #255	; 0xff
 8006c16:	21ff      	movs	r1, #255	; 0xff
 8006c18:	20ff      	movs	r0, #255	; 0xff
 8006c1a:	f7fe fc6d 	bl	80054f8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8006c1e:	4603      	mov	r3, r0
 8006c20:	2200      	movs	r2, #0
 8006c22:	4619      	mov	r1, r3
 8006c24:	4620      	mov	r0, r4
 8006c26:	f7fd ffa6 	bl	8004b76 <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeEb>
    SelectTodo1_1.setAlpha(135);
 8006c2a:	1d3b      	adds	r3, r7, #4
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f603 33fc 	addw	r3, r3, #3068	; 0xbfc
 8006c32:	2187      	movs	r1, #135	; 0x87
 8006c34:	4618      	mov	r0, r3
 8006c36:	f7fd ff2d 	bl	8004a94 <_ZN8touchgfx6Button8setAlphaEh>
    SelectTodo1_1.setAction(buttonCallback);
 8006c3a:	1d3b      	adds	r3, r7, #4
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f603 32fc 	addw	r2, r3, #3068	; 0xbfc
 8006c42:	1d3b      	adds	r3, r7, #4
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f503 636a 	add.w	r3, r3, #3744	; 0xea0
 8006c4a:	4619      	mov	r1, r3
 8006c4c:	4610      	mov	r0, r2
 8006c4e:	f7fd feab 	bl	80049a8 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    SelectTodo1.setXY(74, 263);
 8006c52:	1d3b      	adds	r3, r7, #4
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f503 6344 	add.w	r3, r3, #3136	; 0xc40
 8006c5a:	f240 1207 	movw	r2, #263	; 0x107
 8006c5e:	214a      	movs	r1, #74	; 0x4a
 8006c60:	4618      	mov	r0, r3
 8006c62:	f7fd fc86 	bl	8004572 <_ZN8touchgfx8Drawable5setXYEss>
    SelectTodo1.setVisible(false);
 8006c66:	1d3b      	adds	r3, r7, #4
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f503 6344 	add.w	r3, r3, #3136	; 0xc40
 8006c6e:	2100      	movs	r1, #0
 8006c70:	4618      	mov	r0, r3
 8006c72:	f7fd fcef 	bl	8004654 <_ZN8touchgfx8Drawable10setVisibleEb>
    SelectTodo1.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
 8006c76:	1d3b      	adds	r3, r7, #4
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f503 6444 	add.w	r4, r3, #3136	; 0xc40
 8006c7e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8006c82:	2100      	movs	r1, #0
 8006c84:	4618      	mov	r0, r3
 8006c86:	f7fd fbcb 	bl	8004420 <_ZN8touchgfx6BitmapC1Et>
 8006c8a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8006c8e:	2101      	movs	r1, #1
 8006c90:	4618      	mov	r0, r3
 8006c92:	f7fd fbc5 	bl	8004420 <_ZN8touchgfx6BitmapC1Et>
 8006c96:	f107 02ec 	add.w	r2, r7, #236	; 0xec
 8006c9a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8006c9e:	4619      	mov	r1, r3
 8006ca0:	4620      	mov	r0, r4
 8006ca2:	f00e fb84 	bl	80153ae <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    SelectTodo1.setLabelText(touchgfx::TypedText(T_SINGLEUSEID34));
 8006ca6:	1d3b      	adds	r3, r7, #4
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f503 6444 	add.w	r4, r3, #3136	; 0xc40
 8006cae:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8006cb2:	2119      	movs	r1, #25
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	f7fd fefd 	bl	8004ab4 <_ZN8touchgfx9TypedTextC1Et>
 8006cba:	f8b7 10f0 	ldrh.w	r1, [r7, #240]	; 0xf0
 8006cbe:	4620      	mov	r0, r4
 8006cc0:	f7fd ff32 	bl	8004b28 <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>
    SelectTodo1.setLabelColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8006cc4:	1d3b      	adds	r3, r7, #4
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f503 6444 	add.w	r4, r3, #3136	; 0xc40
 8006ccc:	22ff      	movs	r2, #255	; 0xff
 8006cce:	21ff      	movs	r1, #255	; 0xff
 8006cd0:	20ff      	movs	r0, #255	; 0xff
 8006cd2:	f7fe fc11 	bl	80054f8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	2200      	movs	r2, #0
 8006cda:	4619      	mov	r1, r3
 8006cdc:	4620      	mov	r0, r4
 8006cde:	f7fd ff32 	bl	8004b46 <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeEb>
    SelectTodo1.setLabelColorPressed(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8006ce2:	1d3b      	adds	r3, r7, #4
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f503 6444 	add.w	r4, r3, #3136	; 0xc40
 8006cea:	22ff      	movs	r2, #255	; 0xff
 8006cec:	21ff      	movs	r1, #255	; 0xff
 8006cee:	20ff      	movs	r0, #255	; 0xff
 8006cf0:	f7fe fc02 	bl	80054f8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	4619      	mov	r1, r3
 8006cfa:	4620      	mov	r0, r4
 8006cfc:	f7fd ff3b 	bl	8004b76 <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeEb>
    SelectTodo1.setAlpha(135);
 8006d00:	1d3b      	adds	r3, r7, #4
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f503 6344 	add.w	r3, r3, #3136	; 0xc40
 8006d08:	2187      	movs	r1, #135	; 0x87
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	f7fd fec2 	bl	8004a94 <_ZN8touchgfx6Button8setAlphaEh>
    SelectTodo1.setAction(buttonCallback);
 8006d10:	1d3b      	adds	r3, r7, #4
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f503 6244 	add.w	r2, r3, #3136	; 0xc40
 8006d18:	1d3b      	adds	r3, r7, #4
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f503 636a 	add.w	r3, r3, #3744	; 0xea0
 8006d20:	4619      	mov	r1, r3
 8006d22:	4610      	mov	r0, r2
 8006d24:	f7fd fe40 	bl	80049a8 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    SelectVodka.setXY(74, 99);
 8006d28:	1d3b      	adds	r3, r7, #4
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f603 4384 	addw	r3, r3, #3204	; 0xc84
 8006d30:	2263      	movs	r2, #99	; 0x63
 8006d32:	214a      	movs	r1, #74	; 0x4a
 8006d34:	4618      	mov	r0, r3
 8006d36:	f7fd fc1c 	bl	8004572 <_ZN8touchgfx8Drawable5setXYEss>
    SelectVodka.setVisible(false);
 8006d3a:	1d3b      	adds	r3, r7, #4
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f603 4384 	addw	r3, r3, #3204	; 0xc84
 8006d42:	2100      	movs	r1, #0
 8006d44:	4618      	mov	r0, r3
 8006d46:	f7fd fc85 	bl	8004654 <_ZN8touchgfx8Drawable10setVisibleEb>
    SelectVodka.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
 8006d4a:	1d3b      	adds	r3, r7, #4
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f603 4484 	addw	r4, r3, #3204	; 0xc84
 8006d52:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8006d56:	2100      	movs	r1, #0
 8006d58:	4618      	mov	r0, r3
 8006d5a:	f7fd fb61 	bl	8004420 <_ZN8touchgfx6BitmapC1Et>
 8006d5e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8006d62:	2101      	movs	r1, #1
 8006d64:	4618      	mov	r0, r3
 8006d66:	f7fd fb5b 	bl	8004420 <_ZN8touchgfx6BitmapC1Et>
 8006d6a:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8006d6e:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8006d72:	4619      	mov	r1, r3
 8006d74:	4620      	mov	r0, r4
 8006d76:	f00e fb1a 	bl	80153ae <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    SelectVodka.setLabelText(touchgfx::TypedText(T_SINGLEUSEID28));
 8006d7a:	1d3b      	adds	r3, r7, #4
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f603 4484 	addw	r4, r3, #3204	; 0xc84
 8006d82:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8006d86:	2113      	movs	r1, #19
 8006d88:	4618      	mov	r0, r3
 8006d8a:	f7fd fe93 	bl	8004ab4 <_ZN8touchgfx9TypedTextC1Et>
 8006d8e:	f8b7 10fc 	ldrh.w	r1, [r7, #252]	; 0xfc
 8006d92:	4620      	mov	r0, r4
 8006d94:	f7fd fec8 	bl	8004b28 <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>
    SelectVodka.setLabelColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8006d98:	1d3b      	adds	r3, r7, #4
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f603 4484 	addw	r4, r3, #3204	; 0xc84
 8006da0:	22ff      	movs	r2, #255	; 0xff
 8006da2:	21ff      	movs	r1, #255	; 0xff
 8006da4:	20ff      	movs	r0, #255	; 0xff
 8006da6:	f7fe fba7 	bl	80054f8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8006daa:	4603      	mov	r3, r0
 8006dac:	2200      	movs	r2, #0
 8006dae:	4619      	mov	r1, r3
 8006db0:	4620      	mov	r0, r4
 8006db2:	f7fd fec8 	bl	8004b46 <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeEb>
    SelectVodka.setLabelColorPressed(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8006db6:	1d3b      	adds	r3, r7, #4
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f603 4484 	addw	r4, r3, #3204	; 0xc84
 8006dbe:	22ff      	movs	r2, #255	; 0xff
 8006dc0:	21ff      	movs	r1, #255	; 0xff
 8006dc2:	20ff      	movs	r0, #255	; 0xff
 8006dc4:	f7fe fb98 	bl	80054f8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8006dc8:	4603      	mov	r3, r0
 8006dca:	2200      	movs	r2, #0
 8006dcc:	4619      	mov	r1, r3
 8006dce:	4620      	mov	r0, r4
 8006dd0:	f7fd fed1 	bl	8004b76 <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeEb>
    SelectVodka.setAlpha(135);
 8006dd4:	1d3b      	adds	r3, r7, #4
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f603 4384 	addw	r3, r3, #3204	; 0xc84
 8006ddc:	2187      	movs	r1, #135	; 0x87
 8006dde:	4618      	mov	r0, r3
 8006de0:	f7fd fe58 	bl	8004a94 <_ZN8touchgfx6Button8setAlphaEh>
    SelectVodka.setAction(buttonCallback);
 8006de4:	1d3b      	adds	r3, r7, #4
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f603 4284 	addw	r2, r3, #3204	; 0xc84
 8006dec:	1d3b      	adds	r3, r7, #4
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f503 636a 	add.w	r3, r3, #3744	; 0xea0
 8006df4:	4619      	mov	r1, r3
 8006df6:	4610      	mov	r0, r2
 8006df8:	f7fd fdd6 	bl	80049a8 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    SelectTequila.setXY(74, 181);
 8006dfc:	1d3b      	adds	r3, r7, #4
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f603 43c8 	addw	r3, r3, #3272	; 0xcc8
 8006e04:	22b5      	movs	r2, #181	; 0xb5
 8006e06:	214a      	movs	r1, #74	; 0x4a
 8006e08:	4618      	mov	r0, r3
 8006e0a:	f7fd fbb2 	bl	8004572 <_ZN8touchgfx8Drawable5setXYEss>
    SelectTequila.setVisible(false);
 8006e0e:	1d3b      	adds	r3, r7, #4
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f603 43c8 	addw	r3, r3, #3272	; 0xcc8
 8006e16:	2100      	movs	r1, #0
 8006e18:	4618      	mov	r0, r3
 8006e1a:	f7fd fc1b 	bl	8004654 <_ZN8touchgfx8Drawable10setVisibleEb>
    SelectTequila.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
 8006e1e:	1d3b      	adds	r3, r7, #4
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f603 44c8 	addw	r4, r3, #3272	; 0xcc8
 8006e26:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8006e2a:	2100      	movs	r1, #0
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	f7fd faf7 	bl	8004420 <_ZN8touchgfx6BitmapC1Et>
 8006e32:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8006e36:	2101      	movs	r1, #1
 8006e38:	4618      	mov	r0, r3
 8006e3a:	f7fd faf1 	bl	8004420 <_ZN8touchgfx6BitmapC1Et>
 8006e3e:	f507 7282 	add.w	r2, r7, #260	; 0x104
 8006e42:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8006e46:	4619      	mov	r1, r3
 8006e48:	4620      	mov	r0, r4
 8006e4a:	f00e fab0 	bl	80153ae <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    SelectTequila.setLabelText(touchgfx::TypedText(T_SINGLEUSEID29));
 8006e4e:	1d3b      	adds	r3, r7, #4
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f603 44c8 	addw	r4, r3, #3272	; 0xcc8
 8006e56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e5a:	2114      	movs	r1, #20
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	f7fd fe29 	bl	8004ab4 <_ZN8touchgfx9TypedTextC1Et>
 8006e62:	f8b7 1108 	ldrh.w	r1, [r7, #264]	; 0x108
 8006e66:	4620      	mov	r0, r4
 8006e68:	f7fd fe5e 	bl	8004b28 <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>
    SelectTequila.setLabelColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8006e6c:	1d3b      	adds	r3, r7, #4
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f603 44c8 	addw	r4, r3, #3272	; 0xcc8
 8006e74:	22ff      	movs	r2, #255	; 0xff
 8006e76:	21ff      	movs	r1, #255	; 0xff
 8006e78:	20ff      	movs	r0, #255	; 0xff
 8006e7a:	f7fe fb3d 	bl	80054f8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8006e7e:	4603      	mov	r3, r0
 8006e80:	2200      	movs	r2, #0
 8006e82:	4619      	mov	r1, r3
 8006e84:	4620      	mov	r0, r4
 8006e86:	f7fd fe5e 	bl	8004b46 <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeEb>
    SelectTequila.setLabelColorPressed(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8006e8a:	1d3b      	adds	r3, r7, #4
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f603 44c8 	addw	r4, r3, #3272	; 0xcc8
 8006e92:	22ff      	movs	r2, #255	; 0xff
 8006e94:	21ff      	movs	r1, #255	; 0xff
 8006e96:	20ff      	movs	r0, #255	; 0xff
 8006e98:	f7fe fb2e 	bl	80054f8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	4619      	mov	r1, r3
 8006ea2:	4620      	mov	r0, r4
 8006ea4:	f7fd fe67 	bl	8004b76 <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeEb>
    SelectTequila.setAlpha(135);
 8006ea8:	1d3b      	adds	r3, r7, #4
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f603 43c8 	addw	r3, r3, #3272	; 0xcc8
 8006eb0:	2187      	movs	r1, #135	; 0x87
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	f7fd fdee 	bl	8004a94 <_ZN8touchgfx6Button8setAlphaEh>
    SelectTequila.setAction(buttonCallback);
 8006eb8:	1d3b      	adds	r3, r7, #4
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f603 42c8 	addw	r2, r3, #3272	; 0xcc8
 8006ec0:	1d3b      	adds	r3, r7, #4
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f503 636a 	add.w	r3, r3, #3744	; 0xea0
 8006ec8:	4619      	mov	r1, r3
 8006eca:	4610      	mov	r0, r2
 8006ecc:	f7fd fd6c 	bl	80049a8 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    SelectRum.setXY(315, 99);
 8006ed0:	1d3b      	adds	r3, r7, #4
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f603 530c 	addw	r3, r3, #3340	; 0xd0c
 8006ed8:	2263      	movs	r2, #99	; 0x63
 8006eda:	f240 113b 	movw	r1, #315	; 0x13b
 8006ede:	4618      	mov	r0, r3
 8006ee0:	f7fd fb47 	bl	8004572 <_ZN8touchgfx8Drawable5setXYEss>
    SelectRum.setVisible(false);
 8006ee4:	1d3b      	adds	r3, r7, #4
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f603 530c 	addw	r3, r3, #3340	; 0xd0c
 8006eec:	2100      	movs	r1, #0
 8006eee:	4618      	mov	r0, r3
 8006ef0:	f7fd fbb0 	bl	8004654 <_ZN8touchgfx8Drawable10setVisibleEb>
    SelectRum.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
 8006ef4:	1d3b      	adds	r3, r7, #4
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f603 540c 	addw	r4, r3, #3340	; 0xd0c
 8006efc:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8006f00:	2100      	movs	r1, #0
 8006f02:	4618      	mov	r0, r3
 8006f04:	f7fd fa8c 	bl	8004420 <_ZN8touchgfx6BitmapC1Et>
 8006f08:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006f0c:	2101      	movs	r1, #1
 8006f0e:	4618      	mov	r0, r3
 8006f10:	f7fd fa86 	bl	8004420 <_ZN8touchgfx6BitmapC1Et>
 8006f14:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8006f18:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8006f1c:	4619      	mov	r1, r3
 8006f1e:	4620      	mov	r0, r4
 8006f20:	f00e fa45 	bl	80153ae <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    SelectRum.setLabelText(touchgfx::TypedText(T_SINGLEUSEID30));
 8006f24:	1d3b      	adds	r3, r7, #4
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f603 540c 	addw	r4, r3, #3340	; 0xd0c
 8006f2c:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8006f30:	2115      	movs	r1, #21
 8006f32:	4618      	mov	r0, r3
 8006f34:	f7fd fdbe 	bl	8004ab4 <_ZN8touchgfx9TypedTextC1Et>
 8006f38:	f8b7 1114 	ldrh.w	r1, [r7, #276]	; 0x114
 8006f3c:	4620      	mov	r0, r4
 8006f3e:	f7fd fdf3 	bl	8004b28 <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>
    SelectRum.setLabelColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8006f42:	1d3b      	adds	r3, r7, #4
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f603 540c 	addw	r4, r3, #3340	; 0xd0c
 8006f4a:	22ff      	movs	r2, #255	; 0xff
 8006f4c:	21ff      	movs	r1, #255	; 0xff
 8006f4e:	20ff      	movs	r0, #255	; 0xff
 8006f50:	f7fe fad2 	bl	80054f8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8006f54:	4603      	mov	r3, r0
 8006f56:	2200      	movs	r2, #0
 8006f58:	4619      	mov	r1, r3
 8006f5a:	4620      	mov	r0, r4
 8006f5c:	f7fd fdf3 	bl	8004b46 <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeEb>
    SelectRum.setLabelColorPressed(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8006f60:	1d3b      	adds	r3, r7, #4
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f603 540c 	addw	r4, r3, #3340	; 0xd0c
 8006f68:	22ff      	movs	r2, #255	; 0xff
 8006f6a:	21ff      	movs	r1, #255	; 0xff
 8006f6c:	20ff      	movs	r0, #255	; 0xff
 8006f6e:	f7fe fac3 	bl	80054f8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8006f72:	4603      	mov	r3, r0
 8006f74:	2200      	movs	r2, #0
 8006f76:	4619      	mov	r1, r3
 8006f78:	4620      	mov	r0, r4
 8006f7a:	f7fd fdfc 	bl	8004b76 <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeEb>
    SelectRum.setAlpha(135);
 8006f7e:	1d3b      	adds	r3, r7, #4
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f603 530c 	addw	r3, r3, #3340	; 0xd0c
 8006f86:	2187      	movs	r1, #135	; 0x87
 8006f88:	4618      	mov	r0, r3
 8006f8a:	f7fd fd83 	bl	8004a94 <_ZN8touchgfx6Button8setAlphaEh>
    SelectRum.setAction(buttonCallback);
 8006f8e:	1d3b      	adds	r3, r7, #4
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f603 520c 	addw	r2, r3, #3340	; 0xd0c
 8006f96:	1d3b      	adds	r3, r7, #4
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f503 636a 	add.w	r3, r3, #3744	; 0xea0
 8006f9e:	4619      	mov	r1, r3
 8006fa0:	4610      	mov	r0, r2
 8006fa2:	f7fd fd01 	bl	80049a8 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    SelectGin.setXY(315, 181);
 8006fa6:	1d3b      	adds	r3, r7, #4
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f503 6355 	add.w	r3, r3, #3408	; 0xd50
 8006fae:	22b5      	movs	r2, #181	; 0xb5
 8006fb0:	f240 113b 	movw	r1, #315	; 0x13b
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	f7fd fadc 	bl	8004572 <_ZN8touchgfx8Drawable5setXYEss>
    SelectGin.setVisible(false);
 8006fba:	1d3b      	adds	r3, r7, #4
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f503 6355 	add.w	r3, r3, #3408	; 0xd50
 8006fc2:	2100      	movs	r1, #0
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	f7fd fb45 	bl	8004654 <_ZN8touchgfx8Drawable10setVisibleEb>
    SelectGin.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
 8006fca:	1d3b      	adds	r3, r7, #4
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f503 6455 	add.w	r4, r3, #3408	; 0xd50
 8006fd2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006fd6:	2100      	movs	r1, #0
 8006fd8:	4618      	mov	r0, r3
 8006fda:	f7fd fa21 	bl	8004420 <_ZN8touchgfx6BitmapC1Et>
 8006fde:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8006fe2:	2101      	movs	r1, #1
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	f7fd fa1b 	bl	8004420 <_ZN8touchgfx6BitmapC1Et>
 8006fea:	f507 728e 	add.w	r2, r7, #284	; 0x11c
 8006fee:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006ff2:	4619      	mov	r1, r3
 8006ff4:	4620      	mov	r0, r4
 8006ff6:	f00e f9da 	bl	80153ae <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    SelectGin.setLabelText(touchgfx::TypedText(T_SINGLEUSEID32));
 8006ffa:	1d3b      	adds	r3, r7, #4
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f503 6455 	add.w	r4, r3, #3408	; 0xd50
 8007002:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8007006:	2117      	movs	r1, #23
 8007008:	4618      	mov	r0, r3
 800700a:	f7fd fd53 	bl	8004ab4 <_ZN8touchgfx9TypedTextC1Et>
 800700e:	f8b7 1120 	ldrh.w	r1, [r7, #288]	; 0x120
 8007012:	4620      	mov	r0, r4
 8007014:	f7fd fd88 	bl	8004b28 <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>
    SelectGin.setLabelColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8007018:	1d3b      	adds	r3, r7, #4
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f503 6455 	add.w	r4, r3, #3408	; 0xd50
 8007020:	22ff      	movs	r2, #255	; 0xff
 8007022:	21ff      	movs	r1, #255	; 0xff
 8007024:	20ff      	movs	r0, #255	; 0xff
 8007026:	f7fe fa67 	bl	80054f8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800702a:	4603      	mov	r3, r0
 800702c:	2200      	movs	r2, #0
 800702e:	4619      	mov	r1, r3
 8007030:	4620      	mov	r0, r4
 8007032:	f7fd fd88 	bl	8004b46 <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeEb>
    SelectGin.setLabelColorPressed(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8007036:	1d3b      	adds	r3, r7, #4
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f503 6455 	add.w	r4, r3, #3408	; 0xd50
 800703e:	22ff      	movs	r2, #255	; 0xff
 8007040:	21ff      	movs	r1, #255	; 0xff
 8007042:	20ff      	movs	r0, #255	; 0xff
 8007044:	f7fe fa58 	bl	80054f8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8007048:	4603      	mov	r3, r0
 800704a:	2200      	movs	r2, #0
 800704c:	4619      	mov	r1, r3
 800704e:	4620      	mov	r0, r4
 8007050:	f7fd fd91 	bl	8004b76 <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeEb>
    SelectGin.setAlpha(135);
 8007054:	1d3b      	adds	r3, r7, #4
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f503 6355 	add.w	r3, r3, #3408	; 0xd50
 800705c:	2187      	movs	r1, #135	; 0x87
 800705e:	4618      	mov	r0, r3
 8007060:	f7fd fd18 	bl	8004a94 <_ZN8touchgfx6Button8setAlphaEh>
    SelectGin.setAction(buttonCallback);
 8007064:	1d3b      	adds	r3, r7, #4
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f503 6255 	add.w	r2, r3, #3408	; 0xd50
 800706c:	1d3b      	adds	r3, r7, #4
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f503 636a 	add.w	r3, r3, #3744	; 0xea0
 8007074:	4619      	mov	r1, r3
 8007076:	4610      	mov	r0, r2
 8007078:	f7fd fc96 	bl	80049a8 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    SelectNone.setXY(561, 180);
 800707c:	1d3b      	adds	r3, r7, #4
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f603 5394 	addw	r3, r3, #3476	; 0xd94
 8007084:	22b4      	movs	r2, #180	; 0xb4
 8007086:	f240 2131 	movw	r1, #561	; 0x231
 800708a:	4618      	mov	r0, r3
 800708c:	f7fd fa71 	bl	8004572 <_ZN8touchgfx8Drawable5setXYEss>
    SelectNone.setVisible(false);
 8007090:	1d3b      	adds	r3, r7, #4
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f603 5394 	addw	r3, r3, #3476	; 0xd94
 8007098:	2100      	movs	r1, #0
 800709a:	4618      	mov	r0, r3
 800709c:	f7fd fada 	bl	8004654 <_ZN8touchgfx8Drawable10setVisibleEb>
    SelectNone.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
 80070a0:	1d3b      	adds	r3, r7, #4
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f603 5494 	addw	r4, r3, #3476	; 0xd94
 80070a8:	f507 7392 	add.w	r3, r7, #292	; 0x124
 80070ac:	2100      	movs	r1, #0
 80070ae:	4618      	mov	r0, r3
 80070b0:	f7fd f9b6 	bl	8004420 <_ZN8touchgfx6BitmapC1Et>
 80070b4:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80070b8:	2101      	movs	r1, #1
 80070ba:	4618      	mov	r0, r3
 80070bc:	f7fd f9b0 	bl	8004420 <_ZN8touchgfx6BitmapC1Et>
 80070c0:	f507 7294 	add.w	r2, r7, #296	; 0x128
 80070c4:	f507 7392 	add.w	r3, r7, #292	; 0x124
 80070c8:	4619      	mov	r1, r3
 80070ca:	4620      	mov	r0, r4
 80070cc:	f00e f96f 	bl	80153ae <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    SelectNone.setLabelText(touchgfx::TypedText(T_SINGLEUSEID33));
 80070d0:	1d3b      	adds	r3, r7, #4
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f603 5494 	addw	r4, r3, #3476	; 0xd94
 80070d8:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 80070dc:	2118      	movs	r1, #24
 80070de:	4618      	mov	r0, r3
 80070e0:	f7fd fce8 	bl	8004ab4 <_ZN8touchgfx9TypedTextC1Et>
 80070e4:	f8b7 112c 	ldrh.w	r1, [r7, #300]	; 0x12c
 80070e8:	4620      	mov	r0, r4
 80070ea:	f7fd fd1d 	bl	8004b28 <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>
    SelectNone.setLabelColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80070ee:	1d3b      	adds	r3, r7, #4
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f603 5494 	addw	r4, r3, #3476	; 0xd94
 80070f6:	22ff      	movs	r2, #255	; 0xff
 80070f8:	21ff      	movs	r1, #255	; 0xff
 80070fa:	20ff      	movs	r0, #255	; 0xff
 80070fc:	f7fe f9fc 	bl	80054f8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8007100:	4603      	mov	r3, r0
 8007102:	2200      	movs	r2, #0
 8007104:	4619      	mov	r1, r3
 8007106:	4620      	mov	r0, r4
 8007108:	f7fd fd1d 	bl	8004b46 <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeEb>
    SelectNone.setLabelColorPressed(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 800710c:	1d3b      	adds	r3, r7, #4
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f603 5494 	addw	r4, r3, #3476	; 0xd94
 8007114:	22ff      	movs	r2, #255	; 0xff
 8007116:	21ff      	movs	r1, #255	; 0xff
 8007118:	20ff      	movs	r0, #255	; 0xff
 800711a:	f7fe f9ed 	bl	80054f8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800711e:	4603      	mov	r3, r0
 8007120:	2200      	movs	r2, #0
 8007122:	4619      	mov	r1, r3
 8007124:	4620      	mov	r0, r4
 8007126:	f7fd fd26 	bl	8004b76 <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeEb>
    SelectNone.setAction(buttonCallback);
 800712a:	1d3b      	adds	r3, r7, #4
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f603 5294 	addw	r2, r3, #3476	; 0xd94
 8007132:	1d3b      	adds	r3, r7, #4
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f503 636a 	add.w	r3, r3, #3744	; 0xea0
 800713a:	4619      	mov	r1, r3
 800713c:	4610      	mov	r0, r2
 800713e:	f7fd fc33 	bl	80049a8 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    SelectWater.setXY(561, 99);
 8007142:	1d3b      	adds	r3, r7, #4
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f603 53d8 	addw	r3, r3, #3544	; 0xdd8
 800714a:	2263      	movs	r2, #99	; 0x63
 800714c:	f240 2131 	movw	r1, #561	; 0x231
 8007150:	4618      	mov	r0, r3
 8007152:	f7fd fa0e 	bl	8004572 <_ZN8touchgfx8Drawable5setXYEss>
    SelectWater.setVisible(false);
 8007156:	1d3b      	adds	r3, r7, #4
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f603 53d8 	addw	r3, r3, #3544	; 0xdd8
 800715e:	2100      	movs	r1, #0
 8007160:	4618      	mov	r0, r3
 8007162:	f7fd fa77 	bl	8004654 <_ZN8touchgfx8Drawable10setVisibleEb>
    SelectWater.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
 8007166:	1d3b      	adds	r3, r7, #4
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f603 54d8 	addw	r4, r3, #3544	; 0xdd8
 800716e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007172:	2100      	movs	r1, #0
 8007174:	4618      	mov	r0, r3
 8007176:	f7fd f953 	bl	8004420 <_ZN8touchgfx6BitmapC1Et>
 800717a:	f507 739a 	add.w	r3, r7, #308	; 0x134
 800717e:	2101      	movs	r1, #1
 8007180:	4618      	mov	r0, r3
 8007182:	f7fd f94d 	bl	8004420 <_ZN8touchgfx6BitmapC1Et>
 8007186:	f507 729a 	add.w	r2, r7, #308	; 0x134
 800718a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800718e:	4619      	mov	r1, r3
 8007190:	4620      	mov	r0, r4
 8007192:	f00e f90c 	bl	80153ae <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    SelectWater.setLabelText(touchgfx::TypedText(T_SINGLEUSEID31));
 8007196:	1d3b      	adds	r3, r7, #4
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f603 54d8 	addw	r4, r3, #3544	; 0xdd8
 800719e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80071a2:	2116      	movs	r1, #22
 80071a4:	4618      	mov	r0, r3
 80071a6:	f7fd fc85 	bl	8004ab4 <_ZN8touchgfx9TypedTextC1Et>
 80071aa:	f8b7 1138 	ldrh.w	r1, [r7, #312]	; 0x138
 80071ae:	4620      	mov	r0, r4
 80071b0:	f7fd fcba 	bl	8004b28 <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>
    SelectWater.setLabelColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80071b4:	1d3b      	adds	r3, r7, #4
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f603 54d8 	addw	r4, r3, #3544	; 0xdd8
 80071bc:	22ff      	movs	r2, #255	; 0xff
 80071be:	21ff      	movs	r1, #255	; 0xff
 80071c0:	20ff      	movs	r0, #255	; 0xff
 80071c2:	f7fe f999 	bl	80054f8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80071c6:	4603      	mov	r3, r0
 80071c8:	2200      	movs	r2, #0
 80071ca:	4619      	mov	r1, r3
 80071cc:	4620      	mov	r0, r4
 80071ce:	f7fd fcba 	bl	8004b46 <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeEb>
    SelectWater.setLabelColorPressed(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80071d2:	1d3b      	adds	r3, r7, #4
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f603 54d8 	addw	r4, r3, #3544	; 0xdd8
 80071da:	22ff      	movs	r2, #255	; 0xff
 80071dc:	21ff      	movs	r1, #255	; 0xff
 80071de:	20ff      	movs	r0, #255	; 0xff
 80071e0:	f7fe f98a 	bl	80054f8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80071e4:	4603      	mov	r3, r0
 80071e6:	2200      	movs	r2, #0
 80071e8:	4619      	mov	r1, r3
 80071ea:	4620      	mov	r0, r4
 80071ec:	f7fd fcc3 	bl	8004b76 <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeEb>
    SelectWater.setAlpha(135);
 80071f0:	1d3b      	adds	r3, r7, #4
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f603 53d8 	addw	r3, r3, #3544	; 0xdd8
 80071f8:	2187      	movs	r1, #135	; 0x87
 80071fa:	4618      	mov	r0, r3
 80071fc:	f7fd fc4a 	bl	8004a94 <_ZN8touchgfx6Button8setAlphaEh>
    SelectWater.setAction(buttonCallback);
 8007200:	1d3b      	adds	r3, r7, #4
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f603 52d8 	addw	r2, r3, #3544	; 0xdd8
 8007208:	1d3b      	adds	r3, r7, #4
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f503 636a 	add.w	r3, r3, #3744	; 0xea0
 8007210:	4619      	mov	r1, r3
 8007212:	4610      	mov	r0, r2
 8007214:	f7fd fbc8 	bl	80049a8 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    SelectJuice.setXY(561, 263);
 8007218:	1d3b      	adds	r3, r7, #4
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f603 631c 	addw	r3, r3, #3612	; 0xe1c
 8007220:	f240 1207 	movw	r2, #263	; 0x107
 8007224:	f240 2131 	movw	r1, #561	; 0x231
 8007228:	4618      	mov	r0, r3
 800722a:	f7fd f9a2 	bl	8004572 <_ZN8touchgfx8Drawable5setXYEss>
    SelectJuice.setVisible(false);
 800722e:	1d3b      	adds	r3, r7, #4
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f603 631c 	addw	r3, r3, #3612	; 0xe1c
 8007236:	2100      	movs	r1, #0
 8007238:	4618      	mov	r0, r3
 800723a:	f7fd fa0b 	bl	8004654 <_ZN8touchgfx8Drawable10setVisibleEb>
    SelectJuice.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
 800723e:	1d3b      	adds	r3, r7, #4
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f603 641c 	addw	r4, r3, #3612	; 0xe1c
 8007246:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 800724a:	2100      	movs	r1, #0
 800724c:	4618      	mov	r0, r3
 800724e:	f7fd f8e7 	bl	8004420 <_ZN8touchgfx6BitmapC1Et>
 8007252:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8007256:	2101      	movs	r1, #1
 8007258:	4618      	mov	r0, r3
 800725a:	f7fd f8e1 	bl	8004420 <_ZN8touchgfx6BitmapC1Et>
 800725e:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8007262:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8007266:	4619      	mov	r1, r3
 8007268:	4620      	mov	r0, r4
 800726a:	f00e f8a0 	bl	80153ae <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    SelectJuice.setLabelText(touchgfx::TypedText(T_SINGLEUSEID36));
 800726e:	1d3b      	adds	r3, r7, #4
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f603 641c 	addw	r4, r3, #3612	; 0xe1c
 8007276:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 800727a:	211b      	movs	r1, #27
 800727c:	4618      	mov	r0, r3
 800727e:	f7fd fc19 	bl	8004ab4 <_ZN8touchgfx9TypedTextC1Et>
 8007282:	f8b7 1144 	ldrh.w	r1, [r7, #324]	; 0x144
 8007286:	4620      	mov	r0, r4
 8007288:	f7fd fc4e 	bl	8004b28 <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>
    SelectJuice.setLabelColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 800728c:	1d3b      	adds	r3, r7, #4
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f603 641c 	addw	r4, r3, #3612	; 0xe1c
 8007294:	22ff      	movs	r2, #255	; 0xff
 8007296:	21ff      	movs	r1, #255	; 0xff
 8007298:	20ff      	movs	r0, #255	; 0xff
 800729a:	f7fe f92d 	bl	80054f8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800729e:	4603      	mov	r3, r0
 80072a0:	2200      	movs	r2, #0
 80072a2:	4619      	mov	r1, r3
 80072a4:	4620      	mov	r0, r4
 80072a6:	f7fd fc4e 	bl	8004b46 <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeEb>
    SelectJuice.setLabelColorPressed(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80072aa:	1d3b      	adds	r3, r7, #4
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f603 641c 	addw	r4, r3, #3612	; 0xe1c
 80072b2:	22ff      	movs	r2, #255	; 0xff
 80072b4:	21ff      	movs	r1, #255	; 0xff
 80072b6:	20ff      	movs	r0, #255	; 0xff
 80072b8:	f7fe f91e 	bl	80054f8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80072bc:	4603      	mov	r3, r0
 80072be:	2200      	movs	r2, #0
 80072c0:	4619      	mov	r1, r3
 80072c2:	4620      	mov	r0, r4
 80072c4:	f7fd fc57 	bl	8004b76 <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeEb>
    SelectJuice.setAlpha(135);
 80072c8:	1d3b      	adds	r3, r7, #4
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f603 631c 	addw	r3, r3, #3612	; 0xe1c
 80072d0:	2187      	movs	r1, #135	; 0x87
 80072d2:	4618      	mov	r0, r3
 80072d4:	f7fd fbde 	bl	8004a94 <_ZN8touchgfx6Button8setAlphaEh>
    SelectJuice.setAction(buttonCallback);
 80072d8:	1d3b      	adds	r3, r7, #4
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f603 621c 	addw	r2, r3, #3612	; 0xe1c
 80072e0:	1d3b      	adds	r3, r7, #4
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f503 636a 	add.w	r3, r3, #3744	; 0xea0
 80072e8:	4619      	mov	r1, r3
 80072ea:	4610      	mov	r0, r2
 80072ec:	f7fd fb5c 	bl	80049a8 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    add(Background);
 80072f0:	1d3b      	adds	r3, r7, #4
 80072f2:	681a      	ldr	r2, [r3, #0]
 80072f4:	1d3b      	adds	r3, r7, #4
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	3340      	adds	r3, #64	; 0x40
 80072fa:	4619      	mov	r1, r3
 80072fc:	4610      	mov	r0, r2
 80072fe:	f7fd faab 	bl	8004858 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(ExitButton);
 8007302:	1d3b      	adds	r3, r7, #4
 8007304:	681a      	ldr	r2, [r3, #0]
 8007306:	1d3b      	adds	r3, r7, #4
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	336c      	adds	r3, #108	; 0x6c
 800730c:	4619      	mov	r1, r3
 800730e:	4610      	mov	r0, r2
 8007310:	f7fd faa2 	bl	8004858 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(PourButton);
 8007314:	1d3b      	adds	r3, r7, #4
 8007316:	681a      	ldr	r2, [r3, #0]
 8007318:	1d3b      	adds	r3, r7, #4
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	33a0      	adds	r3, #160	; 0xa0
 800731e:	4619      	mov	r1, r3
 8007320:	4610      	mov	r0, r2
 8007322:	f7fd fa99 	bl	8004858 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(ScrollList);
 8007326:	1d3b      	adds	r3, r7, #4
 8007328:	681a      	ldr	r2, [r3, #0]
 800732a:	1d3b      	adds	r3, r7, #4
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	33e4      	adds	r3, #228	; 0xe4
 8007330:	4619      	mov	r1, r3
 8007332:	4610      	mov	r0, r2
 8007334:	f7fd fa90 	bl	8004858 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(SettingsButton);
 8007338:	1d3b      	adds	r3, r7, #4
 800733a:	681a      	ldr	r2, [r3, #0]
 800733c:	1d3b      	adds	r3, r7, #4
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f503 7343 	add.w	r3, r3, #780	; 0x30c
 8007344:	4619      	mov	r1, r3
 8007346:	4610      	mov	r0, r2
 8007348:	f7fd fa86 	bl	8004858 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(ProgressBar);
 800734c:	1d3b      	adds	r3, r7, #4
 800734e:	681a      	ldr	r2, [r3, #0]
 8007350:	1d3b      	adds	r3, r7, #4
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f503 7350 	add.w	r3, r3, #832	; 0x340
 8007358:	4619      	mov	r1, r3
 800735a:	4610      	mov	r0, r2
 800735c:	f7fd fa7c 	bl	8004858 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Button250mL);
 8007360:	1d3b      	adds	r3, r7, #4
 8007362:	681a      	ldr	r2, [r3, #0]
 8007364:	1d3b      	adds	r3, r7, #4
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800736c:	4619      	mov	r1, r3
 800736e:	4610      	mov	r0, r2
 8007370:	f7fd fa72 	bl	8004858 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Button500mL);
 8007374:	1d3b      	adds	r3, r7, #4
 8007376:	681a      	ldr	r2, [r3, #0]
 8007378:	1d3b      	adds	r3, r7, #4
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f203 4344 	addw	r3, r3, #1092	; 0x444
 8007380:	4619      	mov	r1, r3
 8007382:	4610      	mov	r0, r2
 8007384:	f7fd fa68 	bl	8004858 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Button750mL);
 8007388:	1d3b      	adds	r3, r7, #4
 800738a:	681a      	ldr	r2, [r3, #0]
 800738c:	1d3b      	adds	r3, r7, #4
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f503 6391 	add.w	r3, r3, #1160	; 0x488
 8007394:	4619      	mov	r1, r3
 8007396:	4610      	mov	r0, r2
 8007398:	f7fd fa5e 	bl	8004858 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(QuantityText);
 800739c:	1d3b      	adds	r3, r7, #4
 800739e:	681a      	ldr	r2, [r3, #0]
 80073a0:	1d3b      	adds	r3, r7, #4
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f203 43cc 	addw	r3, r3, #1228	; 0x4cc
 80073a8:	4619      	mov	r1, r3
 80073aa:	4610      	mov	r0, r2
 80073ac:	f7fd fa54 	bl	8004858 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(SettingsText);
 80073b0:	1d3b      	adds	r3, r7, #4
 80073b2:	681a      	ldr	r2, [r3, #0]
 80073b4:	1d3b      	adds	r3, r7, #4
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073bc:	4619      	mov	r1, r3
 80073be:	4610      	mov	r0, r2
 80073c0:	f7fd fa4a 	bl	8004858 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Line3);
 80073c4:	1d3b      	adds	r3, r7, #4
 80073c6:	681a      	ldr	r2, [r3, #0]
 80073c8:	1d3b      	adds	r3, r7, #4
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f203 5334 	addw	r3, r3, #1332	; 0x534
 80073d0:	4619      	mov	r1, r3
 80073d2:	4610      	mov	r0, r2
 80073d4:	f7fd fa40 	bl	8004858 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Line2);
 80073d8:	1d3b      	adds	r3, r7, #4
 80073da:	681a      	ldr	r2, [r3, #0]
 80073dc:	1d3b      	adds	r3, r7, #4
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f503 63b8 	add.w	r3, r3, #1472	; 0x5c0
 80073e4:	4619      	mov	r1, r3
 80073e6:	4610      	mov	r0, r2
 80073e8:	f7fd fa36 	bl	8004858 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Line1);
 80073ec:	1d3b      	adds	r3, r7, #4
 80073ee:	681a      	ldr	r2, [r3, #0]
 80073f0:	1d3b      	adds	r3, r7, #4
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f203 634c 	addw	r3, r3, #1612	; 0x64c
 80073f8:	4619      	mov	r1, r3
 80073fa:	4610      	mov	r0, r2
 80073fc:	f7fd fa2c 	bl	8004858 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Pump1Text);
 8007400:	1d3b      	adds	r3, r7, #4
 8007402:	681a      	ldr	r2, [r3, #0]
 8007404:	1d3b      	adds	r3, r7, #4
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f503 63db 	add.w	r3, r3, #1752	; 0x6d8
 800740c:	4619      	mov	r1, r3
 800740e:	4610      	mov	r0, r2
 8007410:	f7fd fa22 	bl	8004858 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Pump2Text);
 8007414:	1d3b      	adds	r3, r7, #4
 8007416:	681a      	ldr	r2, [r3, #0]
 8007418:	1d3b      	adds	r3, r7, #4
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f203 730c 	addw	r3, r3, #1804	; 0x70c
 8007420:	4619      	mov	r1, r3
 8007422:	4610      	mov	r0, r2
 8007424:	f7fd fa18 	bl	8004858 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Pump3Text);
 8007428:	1d3b      	adds	r3, r7, #4
 800742a:	681a      	ldr	r2, [r3, #0]
 800742c:	1d3b      	adds	r3, r7, #4
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f503 63e8 	add.w	r3, r3, #1856	; 0x740
 8007434:	4619      	mov	r1, r3
 8007436:	4610      	mov	r0, r2
 8007438:	f7fd fa0e 	bl	8004858 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Pump4Text);
 800743c:	1d3b      	adds	r3, r7, #4
 800743e:	681a      	ldr	r2, [r3, #0]
 8007440:	1d3b      	adds	r3, r7, #4
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f203 7374 	addw	r3, r3, #1908	; 0x774
 8007448:	4619      	mov	r1, r3
 800744a:	4610      	mov	r0, r2
 800744c:	f7fd fa04 	bl	8004858 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(PumpDiv1);
 8007450:	1d3b      	adds	r3, r7, #4
 8007452:	681a      	ldr	r2, [r3, #0]
 8007454:	1d3b      	adds	r3, r7, #4
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f503 63f5 	add.w	r3, r3, #1960	; 0x7a8
 800745c:	4619      	mov	r1, r3
 800745e:	4610      	mov	r0, r2
 8007460:	f7fd f9fa 	bl	8004858 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(PumpDiv2);
 8007464:	1d3b      	adds	r3, r7, #4
 8007466:	681a      	ldr	r2, [r3, #0]
 8007468:	1d3b      	adds	r3, r7, #4
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f603 0334 	addw	r3, r3, #2100	; 0x834
 8007470:	4619      	mov	r1, r3
 8007472:	4610      	mov	r0, r2
 8007474:	f7fd f9f0 	bl	8004858 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(PumpDiv3);
 8007478:	1d3b      	adds	r3, r7, #4
 800747a:	681a      	ldr	r2, [r3, #0]
 800747c:	1d3b      	adds	r3, r7, #4
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f503 630c 	add.w	r3, r3, #2240	; 0x8c0
 8007484:	4619      	mov	r1, r3
 8007486:	4610      	mov	r0, r2
 8007488:	f7fd f9e6 	bl	8004858 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Pump1Change);
 800748c:	1d3b      	adds	r3, r7, #4
 800748e:	681a      	ldr	r2, [r3, #0]
 8007490:	1d3b      	adds	r3, r7, #4
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f603 134c 	addw	r3, r3, #2380	; 0x94c
 8007498:	4619      	mov	r1, r3
 800749a:	4610      	mov	r0, r2
 800749c:	f7fd f9dc 	bl	8004858 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Pump2Change);
 80074a0:	1d3b      	adds	r3, r7, #4
 80074a2:	681a      	ldr	r2, [r3, #0]
 80074a4:	1d3b      	adds	r3, r7, #4
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f503 6319 	add.w	r3, r3, #2448	; 0x990
 80074ac:	4619      	mov	r1, r3
 80074ae:	4610      	mov	r0, r2
 80074b0:	f7fd f9d2 	bl	8004858 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Pump3Change);
 80074b4:	1d3b      	adds	r3, r7, #4
 80074b6:	681a      	ldr	r2, [r3, #0]
 80074b8:	1d3b      	adds	r3, r7, #4
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f603 13d4 	addw	r3, r3, #2516	; 0x9d4
 80074c0:	4619      	mov	r1, r3
 80074c2:	4610      	mov	r0, r2
 80074c4:	f7fd f9c8 	bl	8004858 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Pump4Change);
 80074c8:	1d3b      	adds	r3, r7, #4
 80074ca:	681a      	ldr	r2, [r3, #0]
 80074cc:	1d3b      	adds	r3, r7, #4
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f603 2318 	addw	r3, r3, #2584	; 0xa18
 80074d4:	4619      	mov	r1, r3
 80074d6:	4610      	mov	r0, r2
 80074d8:	f7fd f9be 	bl	8004858 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Line1_2);
 80074dc:	1d3b      	adds	r3, r7, #4
 80074de:	681a      	ldr	r2, [r3, #0]
 80074e0:	1d3b      	adds	r3, r7, #4
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f603 235c 	addw	r3, r3, #2652	; 0xa5c
 80074e8:	4619      	mov	r1, r3
 80074ea:	4610      	mov	r0, r2
 80074ec:	f7fd f9b4 	bl	8004858 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Pump1Content);
 80074f0:	1d3b      	adds	r3, r7, #4
 80074f2:	681a      	ldr	r2, [r3, #0]
 80074f4:	1d3b      	adds	r3, r7, #4
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f603 23e8 	addw	r3, r3, #2792	; 0xae8
 80074fc:	4619      	mov	r1, r3
 80074fe:	4610      	mov	r0, r2
 8007500:	f7fd f9aa 	bl	8004858 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Pump2Content);
 8007504:	1d3b      	adds	r3, r7, #4
 8007506:	681a      	ldr	r2, [r3, #0]
 8007508:	1d3b      	adds	r3, r7, #4
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f503 6332 	add.w	r3, r3, #2848	; 0xb20
 8007510:	4619      	mov	r1, r3
 8007512:	4610      	mov	r0, r2
 8007514:	f7fd f9a0 	bl	8004858 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Pump3Content);
 8007518:	1d3b      	adds	r3, r7, #4
 800751a:	681a      	ldr	r2, [r3, #0]
 800751c:	1d3b      	adds	r3, r7, #4
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f603 3358 	addw	r3, r3, #2904	; 0xb58
 8007524:	4619      	mov	r1, r3
 8007526:	4610      	mov	r0, r2
 8007528:	f7fd f996 	bl	8004858 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Pump4Content);
 800752c:	1d3b      	adds	r3, r7, #4
 800752e:	681a      	ldr	r2, [r3, #0]
 8007530:	1d3b      	adds	r3, r7, #4
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f503 6339 	add.w	r3, r3, #2960	; 0xb90
 8007538:	4619      	mov	r1, r3
 800753a:	4610      	mov	r0, r2
 800753c:	f7fd f98c 	bl	8004858 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(SelectText);
 8007540:	1d3b      	adds	r3, r7, #4
 8007542:	681a      	ldr	r2, [r3, #0]
 8007544:	1d3b      	adds	r3, r7, #4
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f603 33c8 	addw	r3, r3, #3016	; 0xbc8
 800754c:	4619      	mov	r1, r3
 800754e:	4610      	mov	r0, r2
 8007550:	f7fd f982 	bl	8004858 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(SelectTodo1_1);
 8007554:	1d3b      	adds	r3, r7, #4
 8007556:	681a      	ldr	r2, [r3, #0]
 8007558:	1d3b      	adds	r3, r7, #4
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f603 33fc 	addw	r3, r3, #3068	; 0xbfc
 8007560:	4619      	mov	r1, r3
 8007562:	4610      	mov	r0, r2
 8007564:	f7fd f978 	bl	8004858 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(SelectTodo1);
 8007568:	1d3b      	adds	r3, r7, #4
 800756a:	681a      	ldr	r2, [r3, #0]
 800756c:	1d3b      	adds	r3, r7, #4
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f503 6344 	add.w	r3, r3, #3136	; 0xc40
 8007574:	4619      	mov	r1, r3
 8007576:	4610      	mov	r0, r2
 8007578:	f7fd f96e 	bl	8004858 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(SelectVodka);
 800757c:	1d3b      	adds	r3, r7, #4
 800757e:	681a      	ldr	r2, [r3, #0]
 8007580:	1d3b      	adds	r3, r7, #4
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f603 4384 	addw	r3, r3, #3204	; 0xc84
 8007588:	4619      	mov	r1, r3
 800758a:	4610      	mov	r0, r2
 800758c:	f7fd f964 	bl	8004858 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(SelectTequila);
 8007590:	1d3b      	adds	r3, r7, #4
 8007592:	681a      	ldr	r2, [r3, #0]
 8007594:	1d3b      	adds	r3, r7, #4
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f603 43c8 	addw	r3, r3, #3272	; 0xcc8
 800759c:	4619      	mov	r1, r3
 800759e:	4610      	mov	r0, r2
 80075a0:	f7fd f95a 	bl	8004858 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(SelectRum);
 80075a4:	1d3b      	adds	r3, r7, #4
 80075a6:	681a      	ldr	r2, [r3, #0]
 80075a8:	1d3b      	adds	r3, r7, #4
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f603 530c 	addw	r3, r3, #3340	; 0xd0c
 80075b0:	4619      	mov	r1, r3
 80075b2:	4610      	mov	r0, r2
 80075b4:	f7fd f950 	bl	8004858 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(SelectGin);
 80075b8:	1d3b      	adds	r3, r7, #4
 80075ba:	681a      	ldr	r2, [r3, #0]
 80075bc:	1d3b      	adds	r3, r7, #4
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f503 6355 	add.w	r3, r3, #3408	; 0xd50
 80075c4:	4619      	mov	r1, r3
 80075c6:	4610      	mov	r0, r2
 80075c8:	f7fd f946 	bl	8004858 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(SelectNone);
 80075cc:	1d3b      	adds	r3, r7, #4
 80075ce:	681a      	ldr	r2, [r3, #0]
 80075d0:	1d3b      	adds	r3, r7, #4
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f603 5394 	addw	r3, r3, #3476	; 0xd94
 80075d8:	4619      	mov	r1, r3
 80075da:	4610      	mov	r0, r2
 80075dc:	f7fd f93c 	bl	8004858 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(SelectWater);
 80075e0:	1d3b      	adds	r3, r7, #4
 80075e2:	681a      	ldr	r2, [r3, #0]
 80075e4:	1d3b      	adds	r3, r7, #4
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f603 53d8 	addw	r3, r3, #3544	; 0xdd8
 80075ec:	4619      	mov	r1, r3
 80075ee:	4610      	mov	r0, r2
 80075f0:	f7fd f932 	bl	8004858 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(SelectJuice);
 80075f4:	1d3b      	adds	r3, r7, #4
 80075f6:	681a      	ldr	r2, [r3, #0]
 80075f8:	1d3b      	adds	r3, r7, #4
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f603 631c 	addw	r3, r3, #3612	; 0xe1c
 8007600:	4619      	mov	r1, r3
 8007602:	4610      	mov	r0, r2
 8007604:	f7fd f928 	bl	8004858 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 8007608:	1d3b      	adds	r3, r7, #4
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	4618      	mov	r0, r3
 800760e:	f507 77a6 	add.w	r7, r7, #332	; 0x14c
 8007612:	46bd      	mov	sp, r7
 8007614:	bd90      	pop	{r4, r7, pc}
 8007616:	bf00      	nop

08007618 <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b084      	sub	sp, #16
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
    ScrollList.initialize();
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	33e4      	adds	r3, #228	; 0xe4
 8007624:	4618      	mov	r0, r3
 8007626:	f7fd fb6b 	bl	8004d00 <_ZN8touchgfx10ScrollBase10initializeEv>
    for (int i = 0; i < ScrollListListItems.getNumberOfDrawables(); i++)
 800762a:	2300      	movs	r3, #0
 800762c:	60fb      	str	r3, [r7, #12]
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8007634:	4618      	mov	r0, r3
 8007636:	f000 fa97 	bl	8007b68 <_ZN8touchgfx17DrawableListItemsI14imageContainerLi4EE20getNumberOfDrawablesEv>
 800763a:	4603      	mov	r3, r0
 800763c:	461a      	mov	r2, r3
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	4293      	cmp	r3, r2
 8007642:	bfb4      	ite	lt
 8007644:	2301      	movlt	r3, #1
 8007646:	2300      	movge	r3, #0
 8007648:	b2db      	uxtb	r3, r3
 800764a:	2b00      	cmp	r3, #0
 800764c:	d010      	beq.n	8007670 <_ZN15Screen1ViewBase11setupScreenEv+0x58>
    {
        ScrollListListItems[i].initialize();
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8007654:	68f9      	ldr	r1, [r7, #12]
 8007656:	4618      	mov	r0, r3
 8007658:	f000 fa92 	bl	8007b80 <_ZN8touchgfx17DrawableListItemsI14imageContainerLi4EEixEi>
 800765c:	4602      	mov	r2, r0
 800765e:	6813      	ldr	r3, [r2, #0]
 8007660:	3384      	adds	r3, #132	; 0x84
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	4610      	mov	r0, r2
 8007666:	4798      	blx	r3
    for (int i = 0; i < ScrollListListItems.getNumberOfDrawables(); i++)
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	3301      	adds	r3, #1
 800766c:	60fb      	str	r3, [r7, #12]
 800766e:	e7de      	b.n	800762e <_ZN15Screen1ViewBase11setupScreenEv+0x16>
    }
}
 8007670:	bf00      	nop
 8007672:	3710      	adds	r7, #16
 8007674:	46bd      	mov	sp, r7
 8007676:	bd80      	pop	{r7, pc}

08007678 <_ZN15Screen1ViewBase14handleKeyEventEh>:

//Handles when a key is pressed
void Screen1ViewBase::handleKeyEvent(uint8_t key)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b082      	sub	sp, #8
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
 8007680:	460b      	mov	r3, r1
 8007682:	70fb      	strb	r3, [r7, #3]
    if(0 == key)
 8007684:	78fb      	ldrb	r3, [r7, #3]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d105      	bne.n	8007696 <_ZN15Screen1ViewBase14handleKeyEventEh+0x1e>
    {
        //FlowSimInteraction
        //When hardware button 0 clicked call virtual function
        //Call FlowSim
        FlowSim();
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	3348      	adds	r3, #72	; 0x48
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	4798      	blx	r3
    }
}
 8007696:	bf00      	nop
 8007698:	3708      	adds	r7, #8
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}

0800769e <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void Screen1ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 800769e:	b580      	push	{r7, lr}
 80076a0:	b082      	sub	sp, #8
 80076a2:	af00      	add	r7, sp, #0
 80076a4:	6078      	str	r0, [r7, #4]
 80076a6:	6039      	str	r1, [r7, #0]
    if (&src == &ExitButton)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	336c      	adds	r3, #108	; 0x6c
 80076ac:	683a      	ldr	r2, [r7, #0]
 80076ae:	429a      	cmp	r2, r3
 80076b0:	d106      	bne.n	80076c0 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x22>
    {
        //ExitSettingsInteraction
        //When ExitButton clicked call virtual function
        //Call ExitSettings
        ExitSettings();
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	3338      	adds	r3, #56	; 0x38
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	4798      	blx	r3
        //JuiceInteraction
        //When SelectJuice clicked call virtual function
        //Call ToJuice
        ToJuice();
    }
}
 80076be:	e0e7      	b.n	8007890 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x1f2>
    else if (&src == &PourButton)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	33a0      	adds	r3, #160	; 0xa0
 80076c4:	683a      	ldr	r2, [r7, #0]
 80076c6:	429a      	cmp	r2, r3
 80076c8:	d106      	bne.n	80076d8 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x3a>
        PourDrink();
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	3330      	adds	r3, #48	; 0x30
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	6878      	ldr	r0, [r7, #4]
 80076d4:	4798      	blx	r3
}
 80076d6:	e0db      	b.n	8007890 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x1f2>
    else if (&src == &SettingsButton)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f503 7343 	add.w	r3, r3, #780	; 0x30c
 80076de:	683a      	ldr	r2, [r7, #0]
 80076e0:	429a      	cmp	r2, r3
 80076e2:	d106      	bne.n	80076f2 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x54>
        SettingsScreen();
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	3334      	adds	r3, #52	; 0x34
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	6878      	ldr	r0, [r7, #4]
 80076ee:	4798      	blx	r3
}
 80076f0:	e0ce      	b.n	8007890 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x1f2>
    else if (&src == &Button250mL)
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80076f8:	683a      	ldr	r2, [r7, #0]
 80076fa:	429a      	cmp	r2, r3
 80076fc:	d106      	bne.n	800770c <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x6e>
        Click250mL();
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	333c      	adds	r3, #60	; 0x3c
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	4798      	blx	r3
}
 800770a:	e0c1      	b.n	8007890 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x1f2>
    else if (&src == &Button500mL)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	f203 4344 	addw	r3, r3, #1092	; 0x444
 8007712:	683a      	ldr	r2, [r7, #0]
 8007714:	429a      	cmp	r2, r3
 8007716:	d106      	bne.n	8007726 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x88>
        Click500mL();
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	3340      	adds	r3, #64	; 0x40
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	4798      	blx	r3
}
 8007724:	e0b4      	b.n	8007890 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x1f2>
    else if (&src == &Button750mL)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	f503 6391 	add.w	r3, r3, #1160	; 0x488
 800772c:	683a      	ldr	r2, [r7, #0]
 800772e:	429a      	cmp	r2, r3
 8007730:	d106      	bne.n	8007740 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xa2>
        Click750mL();
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	3344      	adds	r3, #68	; 0x44
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	4798      	blx	r3
}
 800773e:	e0a7      	b.n	8007890 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x1f2>
    else if (&src == &Pump1Change)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	f603 134c 	addw	r3, r3, #2380	; 0x94c
 8007746:	683a      	ldr	r2, [r7, #0]
 8007748:	429a      	cmp	r2, r3
 800774a:	d106      	bne.n	800775a <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xbc>
        ChangePump1();
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	334c      	adds	r3, #76	; 0x4c
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	6878      	ldr	r0, [r7, #4]
 8007756:	4798      	blx	r3
}
 8007758:	e09a      	b.n	8007890 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x1f2>
    else if (&src == &Pump2Change)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	f503 6319 	add.w	r3, r3, #2448	; 0x990
 8007760:	683a      	ldr	r2, [r7, #0]
 8007762:	429a      	cmp	r2, r3
 8007764:	d106      	bne.n	8007774 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xd6>
        ChangePump2();
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	3350      	adds	r3, #80	; 0x50
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	4798      	blx	r3
}
 8007772:	e08d      	b.n	8007890 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x1f2>
    else if (&src == &Pump3Change)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f603 13d4 	addw	r3, r3, #2516	; 0x9d4
 800777a:	683a      	ldr	r2, [r7, #0]
 800777c:	429a      	cmp	r2, r3
 800777e:	d106      	bne.n	800778e <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xf0>
        ChangePump3();
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	3354      	adds	r3, #84	; 0x54
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	4798      	blx	r3
}
 800778c:	e080      	b.n	8007890 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x1f2>
    else if (&src == &Pump4Change)
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	f603 2318 	addw	r3, r3, #2584	; 0xa18
 8007794:	683a      	ldr	r2, [r7, #0]
 8007796:	429a      	cmp	r2, r3
 8007798:	d106      	bne.n	80077a8 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x10a>
        ChangePump4();
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	3358      	adds	r3, #88	; 0x58
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	4798      	blx	r3
}
 80077a6:	e073      	b.n	8007890 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x1f2>
    else if (&src == &SelectTodo1_1)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	f603 33fc 	addw	r3, r3, #3068	; 0xbfc
 80077ae:	683a      	ldr	r2, [r7, #0]
 80077b0:	429a      	cmp	r2, r3
 80077b2:	d106      	bne.n	80077c2 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x124>
        ToTodo2();
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	337c      	adds	r3, #124	; 0x7c
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	6878      	ldr	r0, [r7, #4]
 80077be:	4798      	blx	r3
}
 80077c0:	e066      	b.n	8007890 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x1f2>
    else if (&src == &SelectTodo1)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	f503 6344 	add.w	r3, r3, #3136	; 0xc40
 80077c8:	683a      	ldr	r2, [r7, #0]
 80077ca:	429a      	cmp	r2, r3
 80077cc:	d106      	bne.n	80077dc <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x13e>
        ToTodo1();
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	3378      	adds	r3, #120	; 0x78
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	4798      	blx	r3
}
 80077da:	e059      	b.n	8007890 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x1f2>
    else if (&src == &SelectVodka)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	f603 4384 	addw	r3, r3, #3204	; 0xc84
 80077e2:	683a      	ldr	r2, [r7, #0]
 80077e4:	429a      	cmp	r2, r3
 80077e6:	d106      	bne.n	80077f6 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x158>
        ToVodka();
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	3374      	adds	r3, #116	; 0x74
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	4798      	blx	r3
}
 80077f4:	e04c      	b.n	8007890 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x1f2>
    else if (&src == &SelectTequila)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	f603 43c8 	addw	r3, r3, #3272	; 0xcc8
 80077fc:	683a      	ldr	r2, [r7, #0]
 80077fe:	429a      	cmp	r2, r3
 8007800:	d106      	bne.n	8007810 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x172>
        ToTequila();
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	3370      	adds	r3, #112	; 0x70
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	4798      	blx	r3
}
 800780e:	e03f      	b.n	8007890 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x1f2>
    else if (&src == &SelectRum)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f603 530c 	addw	r3, r3, #3340	; 0xd0c
 8007816:	683a      	ldr	r2, [r7, #0]
 8007818:	429a      	cmp	r2, r3
 800781a:	d106      	bne.n	800782a <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x18c>
        ToRum();
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	336c      	adds	r3, #108	; 0x6c
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	4798      	blx	r3
}
 8007828:	e032      	b.n	8007890 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x1f2>
    else if (&src == &SelectGin)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	f503 6355 	add.w	r3, r3, #3408	; 0xd50
 8007830:	683a      	ldr	r2, [r7, #0]
 8007832:	429a      	cmp	r2, r3
 8007834:	d106      	bne.n	8007844 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x1a6>
        ToGin();
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	3368      	adds	r3, #104	; 0x68
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	4798      	blx	r3
}
 8007842:	e025      	b.n	8007890 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x1f2>
    else if (&src == &SelectNone)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	f603 5394 	addw	r3, r3, #3476	; 0xd94
 800784a:	683a      	ldr	r2, [r7, #0]
 800784c:	429a      	cmp	r2, r3
 800784e:	d106      	bne.n	800785e <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x1c0>
        ToNone();
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	3364      	adds	r3, #100	; 0x64
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	6878      	ldr	r0, [r7, #4]
 800785a:	4798      	blx	r3
}
 800785c:	e018      	b.n	8007890 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x1f2>
    else if (&src == &SelectWater)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	f603 53d8 	addw	r3, r3, #3544	; 0xdd8
 8007864:	683a      	ldr	r2, [r7, #0]
 8007866:	429a      	cmp	r2, r3
 8007868:	d106      	bne.n	8007878 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x1da>
        ToWater();
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	3360      	adds	r3, #96	; 0x60
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	4798      	blx	r3
}
 8007876:	e00b      	b.n	8007890 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x1f2>
    else if (&src == &SelectJuice)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f603 631c 	addw	r3, r3, #3612	; 0xe1c
 800787e:	683a      	ldr	r2, [r7, #0]
 8007880:	429a      	cmp	r2, r3
 8007882:	d105      	bne.n	8007890 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x1f2>
        ToJuice();
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	335c      	adds	r3, #92	; 0x5c
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	4798      	blx	r3
}
 8007890:	bf00      	nop
 8007892:	3708      	adds	r7, #8
 8007894:	46bd      	mov	sp, r7
 8007896:	bd80      	pop	{r7, pc}

08007898 <_ZN15Screen1ViewBase25updateItemCallbackHandlerEPN8touchgfx26DrawableListItemsInterfaceEss>:

void Screen1ViewBase::updateItemCallbackHandler(touchgfx::DrawableListItemsInterface* items, int16_t containerIndex, int16_t itemIndex)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b086      	sub	sp, #24
 800789c:	af00      	add	r7, sp, #0
 800789e:	60f8      	str	r0, [r7, #12]
 80078a0:	60b9      	str	r1, [r7, #8]
 80078a2:	4611      	mov	r1, r2
 80078a4:	461a      	mov	r2, r3
 80078a6:	460b      	mov	r3, r1
 80078a8:	80fb      	strh	r3, [r7, #6]
 80078aa:	4613      	mov	r3, r2
 80078ac:	80bb      	strh	r3, [r7, #4]
    if (items == &ScrollListListItems)
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80078b4:	68ba      	ldr	r2, [r7, #8]
 80078b6:	429a      	cmp	r2, r3
 80078b8:	d114      	bne.n	80078e4 <_ZN15Screen1ViewBase25updateItemCallbackHandlerEPN8touchgfx26DrawableListItemsInterfaceEss+0x4c>
    {
        touchgfx::Drawable* d = items->getDrawable(containerIndex);
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	3308      	adds	r3, #8
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80078c6:	4611      	mov	r1, r2
 80078c8:	68b8      	ldr	r0, [r7, #8]
 80078ca:	4798      	blx	r3
 80078cc:	6178      	str	r0, [r7, #20]
        imageContainer* cc = (imageContainer*)d;
 80078ce:	697b      	ldr	r3, [r7, #20]
 80078d0:	613b      	str	r3, [r7, #16]
        ScrollListUpdateItem(*cc, itemIndex);
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	332c      	adds	r3, #44	; 0x2c
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80078de:	6939      	ldr	r1, [r7, #16]
 80078e0:	68f8      	ldr	r0, [r7, #12]
 80078e2:	4798      	blx	r3
    }
}
 80078e4:	bf00      	nop
 80078e6:	3718      	adds	r7, #24
 80078e8:	46bd      	mov	sp, r7
 80078ea:	bd80      	pop	{r7, pc}

080078ec <_ZN8touchgfx17DrawableListItemsI14imageContainerLi4EED1Ev>:
    virtual ~DrawableListItems()
 80078ec:	b590      	push	{r4, r7, lr}
 80078ee:	b083      	sub	sp, #12
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
    }
 80078f4:	4a0e      	ldr	r2, [pc, #56]	; (8007930 <_ZN8touchgfx17DrawableListItemsI14imageContainerLi4EED1Ev+0x44>)
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	601a      	str	r2, [r3, #0]
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	3304      	adds	r3, #4
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d00d      	beq.n	800791e <_ZN8touchgfx17DrawableListItemsI14imageContainerLi4EED1Ev+0x32>
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	3304      	adds	r3, #4
 8007906:	f503 74b0 	add.w	r4, r3, #352	; 0x160
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	3304      	adds	r3, #4
 800790e:	429c      	cmp	r4, r3
 8007910:	d005      	beq.n	800791e <_ZN8touchgfx17DrawableListItemsI14imageContainerLi4EED1Ev+0x32>
 8007912:	3c58      	subs	r4, #88	; 0x58
 8007914:	6823      	ldr	r3, [r4, #0]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	4620      	mov	r0, r4
 800791a:	4798      	blx	r3
 800791c:	e7f5      	b.n	800790a <_ZN8touchgfx17DrawableListItemsI14imageContainerLi4EED1Ev+0x1e>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	4618      	mov	r0, r3
 8007922:	f7fd f983 	bl	8004c2c <_ZN8touchgfx26DrawableListItemsInterfaceD1Ev>
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	4618      	mov	r0, r3
 800792a:	370c      	adds	r7, #12
 800792c:	46bd      	mov	sp, r7
 800792e:	bd90      	pop	{r4, r7, pc}
 8007930:	08024838 	.word	0x08024838

08007934 <_ZN8touchgfx17DrawableListItemsI14imageContainerLi4EED0Ev>:
    virtual ~DrawableListItems()
 8007934:	b580      	push	{r7, lr}
 8007936:	b082      	sub	sp, #8
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
    }
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	f7ff ffd5 	bl	80078ec <_ZN8touchgfx17DrawableListItemsI14imageContainerLi4EED1Ev>
 8007942:	f44f 71b2 	mov.w	r1, #356	; 0x164
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f01a ff27 	bl	802279a <_ZdlPvj>
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	4618      	mov	r0, r3
 8007950:	3708      	adds	r7, #8
 8007952:	46bd      	mov	sp, r7
 8007954:	bd80      	pop	{r7, pc}
	...

08007958 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>:
    View() : presenter(0)
 8007958:	b580      	push	{r7, lr}
 800795a:	b082      	sub	sp, #8
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	4618      	mov	r0, r3
 8007964:	f00f ffdc 	bl	8017920 <_ZN8touchgfx6ScreenC1Ev>
 8007968:	4a05      	ldr	r2, [pc, #20]	; (8007980 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev+0x28>)
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	601a      	str	r2, [r3, #0]
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2200      	movs	r2, #0
 8007972:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	4618      	mov	r0, r3
 8007978:	3708      	adds	r7, #8
 800797a:	46bd      	mov	sp, r7
 800797c:	bd80      	pop	{r7, pc}
 800797e:	bf00      	nop
 8007980:	08024850 	.word	0x08024850

08007984 <_ZN8touchgfx26DrawableListItemsInterfaceC1Ev>:
class DrawableListItemsInterface
 8007984:	b480      	push	{r7}
 8007986:	b083      	sub	sp, #12
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
 800798c:	4a04      	ldr	r2, [pc, #16]	; (80079a0 <_ZN8touchgfx26DrawableListItemsInterfaceC1Ev+0x1c>)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	601a      	str	r2, [r3, #0]
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	4618      	mov	r0, r3
 8007996:	370c      	adds	r7, #12
 8007998:	46bd      	mov	sp, r7
 800799a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799e:	4770      	bx	lr
 80079a0:	08024900 	.word	0x08024900

080079a4 <_ZN8touchgfx17DrawableListItemsI14imageContainerLi4EEC1Ev>:
    DrawableListItems()
 80079a4:	b5b0      	push	{r4, r5, r7, lr}
 80079a6:	b082      	sub	sp, #8
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
        : DrawableListItemsInterface()
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	4618      	mov	r0, r3
 80079b0:	f7ff ffe8 	bl	8007984 <_ZN8touchgfx26DrawableListItemsInterfaceC1Ev>
 80079b4:	4a09      	ldr	r2, [pc, #36]	; (80079dc <_ZN8touchgfx17DrawableListItemsI14imageContainerLi4EEC1Ev+0x38>)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	601a      	str	r2, [r3, #0]
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	3304      	adds	r3, #4
 80079be:	2403      	movs	r4, #3
 80079c0:	461d      	mov	r5, r3
 80079c2:	2c00      	cmp	r4, #0
 80079c4:	db05      	blt.n	80079d2 <_ZN8touchgfx17DrawableListItemsI14imageContainerLi4EEC1Ev+0x2e>
 80079c6:	4628      	mov	r0, r5
 80079c8:	f002 fb62 	bl	800a090 <_ZN14imageContainerC1Ev>
 80079cc:	3558      	adds	r5, #88	; 0x58
 80079ce:	3c01      	subs	r4, #1
 80079d0:	e7f7      	b.n	80079c2 <_ZN8touchgfx17DrawableListItemsI14imageContainerLi4EEC1Ev+0x1e>
    }
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	4618      	mov	r0, r3
 80079d6:	3708      	adds	r7, #8
 80079d8:	46bd      	mov	sp, r7
 80079da:	bdb0      	pop	{r4, r5, r7, pc}
 80079dc:	08024838 	.word	0x08024838

080079e0 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>:
class GenericCallback<T1, void, void>
 80079e0:	b480      	push	{r7}
 80079e2:	b083      	sub	sp, #12
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
 80079e8:	4a04      	ldr	r2, [pc, #16]	; (80079fc <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev+0x1c>)
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	601a      	str	r2, [r3, #0]
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	4618      	mov	r0, r3
 80079f2:	370c      	adds	r7, #12
 80079f4:	46bd      	mov	sp, r7
 80079f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fa:	4770      	bx	lr
 80079fc:	08024918 	.word	0x08024918

08007a00 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b084      	sub	sp, #16
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	60f8      	str	r0, [r7, #12]
 8007a08:	60b9      	str	r1, [r7, #8]
 8007a0a:	4639      	mov	r1, r7
 8007a0c:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	4618      	mov	r0, r3
 8007a14:	f7ff ffe4 	bl	80079e0 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 8007a18:	4a08      	ldr	r2, [pc, #32]	; (8007a3c <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	68ba      	ldr	r2, [r7, #8]
 8007a22:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	3308      	adds	r3, #8
 8007a28:	463a      	mov	r2, r7
 8007a2a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007a2e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	4618      	mov	r0, r3
 8007a36:	3710      	adds	r7, #16
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	bd80      	pop	{r7, pc}
 8007a3c:	08024820 	.word	0x08024820

08007a40 <_ZN8touchgfx15GenericCallbackIPNS_26DrawableListItemsInterfaceEssEC1Ev>:
class GenericCallback
 8007a40:	b480      	push	{r7}
 8007a42:	b083      	sub	sp, #12
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
 8007a48:	4a04      	ldr	r2, [pc, #16]	; (8007a5c <_ZN8touchgfx15GenericCallbackIPNS_26DrawableListItemsInterfaceEssEC1Ev+0x1c>)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	601a      	str	r2, [r3, #0]
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	4618      	mov	r0, r3
 8007a52:	370c      	adds	r7, #12
 8007a54:	46bd      	mov	sp, r7
 8007a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5a:	4770      	bx	lr
 8007a5c:	08024808 	.word	0x08024808

08007a60 <_ZN8touchgfx8CallbackI15Screen1ViewBasePNS_26DrawableListItemsInterfaceEssEC1EPS1_MS1_FvS3_ssE>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_3)(T1, T2, T3))
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b084      	sub	sp, #16
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	60f8      	str	r0, [r7, #12]
 8007a68:	60b9      	str	r1, [r7, #8]
 8007a6a:	4639      	mov	r1, r7
 8007a6c:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	4618      	mov	r0, r3
 8007a74:	f7ff ffe4 	bl	8007a40 <_ZN8touchgfx15GenericCallbackIPNS_26DrawableListItemsInterfaceEssEC1Ev>
 8007a78:	4a08      	ldr	r2, [pc, #32]	; (8007a9c <_ZN8touchgfx8CallbackI15Screen1ViewBasePNS_26DrawableListItemsInterfaceEssEC1EPS1_MS1_FvS3_ssE+0x3c>)
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	68ba      	ldr	r2, [r7, #8]
 8007a82:	605a      	str	r2, [r3, #4]
        this->pmemfun_3 = pmemfun_3;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	3308      	adds	r3, #8
 8007a88:	463a      	mov	r2, r7
 8007a8a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007a8e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	4618      	mov	r0, r3
 8007a96:	3710      	adds	r7, #16
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	bd80      	pop	{r7, pc}
 8007a9c:	080247f0 	.word	0x080247f0

08007aa0 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>:
    void setStart(T x, T y)
 8007aa0:	b590      	push	{r4, r7, lr}
 8007aa2:	b089      	sub	sp, #36	; 0x24
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	60f8      	str	r0, [r7, #12]
 8007aa8:	60b9      	str	r1, [r7, #8]
 8007aaa:	607a      	str	r2, [r7, #4]
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	61bb      	str	r3, [r7, #24]
#ifndef  __ICCARM__
    FORCE_INLINE_FUNCTION
#endif
    static Q5 toQ5(T value)
    {
        return Q5(int(value * Rasterizer::POLY_BASE_SIZE));
 8007ab0:	69bb      	ldr	r3, [r7, #24]
 8007ab2:	015a      	lsls	r2, r3, #5
 8007ab4:	f107 0314 	add.w	r3, r7, #20
 8007ab8:	4611      	mov	r1, r2
 8007aba:	4618      	mov	r0, r3
 8007abc:	f7fd fa01 	bl	8004ec2 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8007ac0:	697b      	ldr	r3, [r7, #20]
 8007ac2:	461c      	mov	r4, r3
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	61fb      	str	r3, [r7, #28]
 8007ac8:	69fb      	ldr	r3, [r7, #28]
 8007aca:	015a      	lsls	r2, r3, #5
 8007acc:	f107 0310 	add.w	r3, r7, #16
 8007ad0:	4611      	mov	r1, r2
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	f7fd f9f5 	bl	8004ec2 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8007ad8:	693b      	ldr	r3, [r7, #16]
        setStart(CWRUtil::toQ5<T>(x), CWRUtil::toQ5<T>(y));
 8007ada:	461a      	mov	r2, r3
 8007adc:	4621      	mov	r1, r4
 8007ade:	68f8      	ldr	r0, [r7, #12]
 8007ae0:	f00d fa38 	bl	8014f54 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_>
    }
 8007ae4:	bf00      	nop
 8007ae6:	3724      	adds	r7, #36	; 0x24
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	bd90      	pop	{r4, r7, pc}

08007aec <_ZN8touchgfx4Line6setEndIiEEvT_S2_>:
    void setEnd(T x, T y)
 8007aec:	b590      	push	{r4, r7, lr}
 8007aee:	b089      	sub	sp, #36	; 0x24
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	60f8      	str	r0, [r7, #12]
 8007af4:	60b9      	str	r1, [r7, #8]
 8007af6:	607a      	str	r2, [r7, #4]
 8007af8:	68bb      	ldr	r3, [r7, #8]
 8007afa:	61bb      	str	r3, [r7, #24]
 8007afc:	69bb      	ldr	r3, [r7, #24]
 8007afe:	015a      	lsls	r2, r3, #5
 8007b00:	f107 0314 	add.w	r3, r7, #20
 8007b04:	4611      	mov	r1, r2
 8007b06:	4618      	mov	r0, r3
 8007b08:	f7fd f9db 	bl	8004ec2 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8007b0c:	697b      	ldr	r3, [r7, #20]
 8007b0e:	461c      	mov	r4, r3
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	61fb      	str	r3, [r7, #28]
 8007b14:	69fb      	ldr	r3, [r7, #28]
 8007b16:	015a      	lsls	r2, r3, #5
 8007b18:	f107 0310 	add.w	r3, r7, #16
 8007b1c:	4611      	mov	r1, r2
 8007b1e:	4618      	mov	r0, r3
 8007b20:	f7fd f9cf 	bl	8004ec2 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8007b24:	693b      	ldr	r3, [r7, #16]
        setEnd(CWRUtil::toQ5<T>(x), CWRUtil::toQ5<T>(y));
 8007b26:	461a      	mov	r2, r3
 8007b28:	4621      	mov	r1, r4
 8007b2a:	68f8      	ldr	r0, [r7, #12]
 8007b2c:	f00d fa1d 	bl	8014f6a <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_>
    }
 8007b30:	bf00      	nop
 8007b32:	3724      	adds	r7, #36	; 0x24
 8007b34:	46bd      	mov	sp, r7
 8007b36:	bd90      	pop	{r4, r7, pc}

08007b38 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>:
    void setLineWidth(T width)
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b084      	sub	sp, #16
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
 8007b40:	6039      	str	r1, [r7, #0]
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	60fb      	str	r3, [r7, #12]
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	015a      	lsls	r2, r3, #5
 8007b4a:	f107 0308 	add.w	r3, r7, #8
 8007b4e:	4611      	mov	r1, r2
 8007b50:	4618      	mov	r0, r3
 8007b52:	f7fd f9b6 	bl	8004ec2 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8007b56:	68bb      	ldr	r3, [r7, #8]
        setLineWidth(CWRUtil::toQ5<T>(width));
 8007b58:	4619      	mov	r1, r3
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	f7fd f9cc 	bl	8004ef8 <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E>
    }
 8007b60:	bf00      	nop
 8007b62:	3710      	adds	r7, #16
 8007b64:	46bd      	mov	sp, r7
 8007b66:	bd80      	pop	{r7, pc}

08007b68 <_ZN8touchgfx17DrawableListItemsI14imageContainerLi4EE20getNumberOfDrawablesEv>:
    virtual int16_t getNumberOfDrawables()
 8007b68:	b480      	push	{r7}
 8007b6a:	b083      	sub	sp, #12
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
        return SIZE;
 8007b70:	2304      	movs	r3, #4
    }
 8007b72:	4618      	mov	r0, r3
 8007b74:	370c      	adds	r7, #12
 8007b76:	46bd      	mov	sp, r7
 8007b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7c:	4770      	bx	lr
	...

08007b80 <_ZN8touchgfx17DrawableListItemsI14imageContainerLi4EEixEi>:
    TYPE& operator[](int index)
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b082      	sub	sp, #8
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
 8007b88:	6039      	str	r1, [r7, #0]
        assert(index >= 0 && index < SIZE);
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	db02      	blt.n	8007b96 <_ZN8touchgfx17DrawableListItemsI14imageContainerLi4EEixEi+0x16>
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	2b03      	cmp	r3, #3
 8007b94:	dd05      	ble.n	8007ba2 <_ZN8touchgfx17DrawableListItemsI14imageContainerLi4EEixEi+0x22>
 8007b96:	4b08      	ldr	r3, [pc, #32]	; (8007bb8 <_ZN8touchgfx17DrawableListItemsI14imageContainerLi4EEixEi+0x38>)
 8007b98:	4a08      	ldr	r2, [pc, #32]	; (8007bbc <_ZN8touchgfx17DrawableListItemsI14imageContainerLi4EEixEi+0x3c>)
 8007b9a:	2198      	movs	r1, #152	; 0x98
 8007b9c:	4808      	ldr	r0, [pc, #32]	; (8007bc0 <_ZN8touchgfx17DrawableListItemsI14imageContainerLi4EEixEi+0x40>)
 8007b9e:	f01a fe27 	bl	80227f0 <__assert_func>
        return element[index];
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	2258      	movs	r2, #88	; 0x58
 8007ba6:	fb02 f303 	mul.w	r3, r2, r3
 8007baa:	687a      	ldr	r2, [r7, #4]
 8007bac:	4413      	add	r3, r2
 8007bae:	3304      	adds	r3, #4
    }
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	3708      	adds	r7, #8
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	bd80      	pop	{r7, pc}
 8007bb8:	08023d90 	.word	0x08023d90
 8007bbc:	08024a80 	.word	0x08024a80
 8007bc0:	08023dac 	.word	0x08023dac

08007bc4 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>:
    virtual ~GenericCallback()
 8007bc4:	b480      	push	{r7}
 8007bc6:	b083      	sub	sp, #12
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
    }
 8007bcc:	4a04      	ldr	r2, [pc, #16]	; (8007be0 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev+0x1c>)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	601a      	str	r2, [r3, #0]
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	370c      	adds	r7, #12
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bde:	4770      	bx	lr
 8007be0:	08024918 	.word	0x08024918

08007be4 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED0Ev>:
    virtual ~GenericCallback()
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b082      	sub	sp, #8
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
    }
 8007bec:	6878      	ldr	r0, [r7, #4]
 8007bee:	f7ff ffe9 	bl	8007bc4 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 8007bf2:	2104      	movs	r1, #4
 8007bf4:	6878      	ldr	r0, [r7, #4]
 8007bf6:	f01a fdd0 	bl	802279a <_ZdlPvj>
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	3708      	adds	r7, #8
 8007c00:	46bd      	mov	sp, r7
 8007c02:	bd80      	pop	{r7, pc}

08007c04 <_ZN8touchgfx15GenericCallbackIPNS_26DrawableListItemsInterfaceEssED1Ev>:
    virtual ~GenericCallback()
 8007c04:	b480      	push	{r7}
 8007c06:	b083      	sub	sp, #12
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
    }
 8007c0c:	4a04      	ldr	r2, [pc, #16]	; (8007c20 <_ZN8touchgfx15GenericCallbackIPNS_26DrawableListItemsInterfaceEssED1Ev+0x1c>)
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	601a      	str	r2, [r3, #0]
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	4618      	mov	r0, r3
 8007c16:	370c      	adds	r7, #12
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1e:	4770      	bx	lr
 8007c20:	08024808 	.word	0x08024808

08007c24 <_ZN8touchgfx15GenericCallbackIPNS_26DrawableListItemsInterfaceEssED0Ev>:
    virtual ~GenericCallback()
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b082      	sub	sp, #8
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
    }
 8007c2c:	6878      	ldr	r0, [r7, #4]
 8007c2e:	f7ff ffe9 	bl	8007c04 <_ZN8touchgfx15GenericCallbackIPNS_26DrawableListItemsInterfaceEssED1Ev>
 8007c32:	2104      	movs	r1, #4
 8007c34:	6878      	ldr	r0, [r7, #4]
 8007c36:	f01a fdb0 	bl	802279a <_ZdlPvj>
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	3708      	adds	r7, #8
 8007c40:	46bd      	mov	sp, r7
 8007c42:	bd80      	pop	{r7, pc}

08007c44 <_ZN8touchgfx8CallbackI15Screen1ViewBasePNS_26DrawableListItemsInterfaceEssED1Ev>:
struct Callback : public GenericCallback<T1, T2, T3>
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b082      	sub	sp, #8
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
 8007c4c:	4a05      	ldr	r2, [pc, #20]	; (8007c64 <_ZN8touchgfx8CallbackI15Screen1ViewBasePNS_26DrawableListItemsInterfaceEssED1Ev+0x20>)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	601a      	str	r2, [r3, #0]
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	4618      	mov	r0, r3
 8007c56:	f7ff ffd5 	bl	8007c04 <_ZN8touchgfx15GenericCallbackIPNS_26DrawableListItemsInterfaceEssED1Ev>
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	3708      	adds	r7, #8
 8007c60:	46bd      	mov	sp, r7
 8007c62:	bd80      	pop	{r7, pc}
 8007c64:	080247f0 	.word	0x080247f0

08007c68 <_ZN8touchgfx8CallbackI15Screen1ViewBasePNS_26DrawableListItemsInterfaceEssED0Ev>:
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b082      	sub	sp, #8
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	f7ff ffe7 	bl	8007c44 <_ZN8touchgfx8CallbackI15Screen1ViewBasePNS_26DrawableListItemsInterfaceEssED1Ev>
 8007c76:	2110      	movs	r1, #16
 8007c78:	6878      	ldr	r0, [r7, #4]
 8007c7a:	f01a fd8e 	bl	802279a <_ZdlPvj>
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	4618      	mov	r0, r3
 8007c82:	3708      	adds	r7, #8
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bd80      	pop	{r7, pc}

08007c88 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b082      	sub	sp, #8
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
 8007c90:	4a05      	ldr	r2, [pc, #20]	; (8007ca8 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	601a      	str	r2, [r3, #0]
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	4618      	mov	r0, r3
 8007c9a:	f7ff ff93 	bl	8007bc4 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	3708      	adds	r7, #8
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	bd80      	pop	{r7, pc}
 8007ca8:	08024820 	.word	0x08024820

08007cac <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b082      	sub	sp, #8
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
 8007cb4:	6878      	ldr	r0, [r7, #4]
 8007cb6:	f7ff ffe7 	bl	8007c88 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>
 8007cba:	2110      	movs	r1, #16
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	f01a fd6c 	bl	802279a <_ZdlPvj>
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	3708      	adds	r7, #8
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bd80      	pop	{r7, pc}

08007ccc <_ZN8touchgfx5ImageD1Ev>:
class Image : public Widget
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b082      	sub	sp, #8
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
 8007cd4:	4a05      	ldr	r2, [pc, #20]	; (8007cec <_ZN8touchgfx5ImageD1Ev+0x20>)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	601a      	str	r2, [r3, #0]
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	4618      	mov	r0, r3
 8007cde:	f7fc fddd 	bl	800489c <_ZN8touchgfx6WidgetD1Ev>
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	3708      	adds	r7, #8
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	bd80      	pop	{r7, pc}
 8007cec:	08026500 	.word	0x08026500

08007cf0 <_ZN8touchgfx5ImageD0Ev>:
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b082      	sub	sp, #8
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
 8007cf8:	6878      	ldr	r0, [r7, #4]
 8007cfa:	f7ff ffe7 	bl	8007ccc <_ZN8touchgfx5ImageD1Ev>
 8007cfe:	212c      	movs	r1, #44	; 0x2c
 8007d00:	6878      	ldr	r0, [r7, #4]
 8007d02:	f01a fd4a 	bl	802279a <_ZdlPvj>
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	4618      	mov	r0, r3
 8007d0a:	3708      	adds	r7, #8
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	bd80      	pop	{r7, pc}

08007d10 <_ZN8touchgfx15ButtonWithLabelD1Ev>:
class ButtonWithLabel : public Button
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b082      	sub	sp, #8
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
 8007d18:	4a05      	ldr	r2, [pc, #20]	; (8007d30 <_ZN8touchgfx15ButtonWithLabelD1Ev+0x20>)
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	601a      	str	r2, [r3, #0]
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	4618      	mov	r0, r3
 8007d22:	f7fc fe95 	bl	8004a50 <_ZN8touchgfx6ButtonD1Ev>
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	4618      	mov	r0, r3
 8007d2a:	3708      	adds	r7, #8
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	bd80      	pop	{r7, pc}
 8007d30:	0802656c 	.word	0x0802656c

08007d34 <_ZN8touchgfx15ButtonWithLabelD0Ev>:
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b082      	sub	sp, #8
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
 8007d3c:	6878      	ldr	r0, [r7, #4]
 8007d3e:	f7ff ffe7 	bl	8007d10 <_ZN8touchgfx15ButtonWithLabelD1Ev>
 8007d42:	2144      	movs	r1, #68	; 0x44
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	f01a fd28 	bl	802279a <_ZdlPvj>
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	3708      	adds	r7, #8
 8007d50:	46bd      	mov	sp, r7
 8007d52:	bd80      	pop	{r7, pc}

08007d54 <_ZN8touchgfx4LineD1Ev>:
class Line : public CanvasWidget
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b082      	sub	sp, #8
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
 8007d5c:	4a05      	ldr	r2, [pc, #20]	; (8007d74 <_ZN8touchgfx4LineD1Ev+0x20>)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	601a      	str	r2, [r3, #0]
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	4618      	mov	r0, r3
 8007d66:	f00c fed1 	bl	8014b0c <_ZN8touchgfx12CanvasWidgetD1Ev>
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	3708      	adds	r7, #8
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bd80      	pop	{r7, pc}
 8007d74:	08026140 	.word	0x08026140

08007d78 <_ZN8touchgfx4LineD0Ev>:
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b082      	sub	sp, #8
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
 8007d80:	6878      	ldr	r0, [r7, #4]
 8007d82:	f7ff ffe7 	bl	8007d54 <_ZN8touchgfx4LineD1Ev>
 8007d86:	2174      	movs	r1, #116	; 0x74
 8007d88:	6878      	ldr	r0, [r7, #4]
 8007d8a:	f01a fd06 	bl	802279a <_ZdlPvj>
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	4618      	mov	r0, r3
 8007d92:	3708      	adds	r7, #8
 8007d94:	46bd      	mov	sp, r7
 8007d96:	bd80      	pop	{r7, pc}

08007d98 <_ZN8touchgfx13PainterRGB888D1Ev>:
 *        The PainterRGB888 class allows a shape to be filled with a given color and alpha
 *        value. This allows transparent, anti-aliased elements to be drawn.
 *
 * @see AbstractPainter
 */
class PainterRGB888 : public AbstractPainterRGB888
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b082      	sub	sp, #8
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
 8007da0:	4a05      	ldr	r2, [pc, #20]	; (8007db8 <_ZN8touchgfx13PainterRGB888D1Ev+0x20>)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	601a      	str	r2, [r3, #0]
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	4618      	mov	r0, r3
 8007daa:	f7fd f8c7 	bl	8004f3c <_ZN8touchgfx21AbstractPainterRGB888D1Ev>
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	4618      	mov	r0, r3
 8007db2:	3708      	adds	r7, #8
 8007db4:	46bd      	mov	sp, r7
 8007db6:	bd80      	pop	{r7, pc}
 8007db8:	08025e44 	.word	0x08025e44

08007dbc <_ZN8touchgfx13PainterRGB888D0Ev>:
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b082      	sub	sp, #8
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
 8007dc4:	6878      	ldr	r0, [r7, #4]
 8007dc6:	f7ff ffe7 	bl	8007d98 <_ZN8touchgfx13PainterRGB888D1Ev>
 8007dca:	2118      	movs	r1, #24
 8007dcc:	6878      	ldr	r0, [r7, #4]
 8007dce:	f01a fce4 	bl	802279a <_ZdlPvj>
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	3708      	adds	r7, #8
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	bd80      	pop	{r7, pc}

08007ddc <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b082      	sub	sp, #8
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
 8007de4:	4a05      	ldr	r2, [pc, #20]	; (8007dfc <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x20>)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	601a      	str	r2, [r3, #0]
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	4618      	mov	r0, r3
 8007dee:	f7fd f8fb 	bl	8004fe8 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	4618      	mov	r0, r3
 8007df6:	3708      	adds	r7, #8
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bd80      	pop	{r7, pc}
 8007dfc:	08026484 	.word	0x08026484

08007e00 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b082      	sub	sp, #8
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
 8007e08:	6878      	ldr	r0, [r7, #4]
 8007e0a:	f7ff ffe7 	bl	8007ddc <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8007e0e:	2138      	movs	r1, #56	; 0x38
 8007e10:	6878      	ldr	r0, [r7, #4]
 8007e12:	f01a fcc2 	bl	802279a <_ZdlPvj>
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	4618      	mov	r0, r3
 8007e1a:	3708      	adds	r7, #8
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	bd80      	pop	{r7, pc}

08007e20 <_ZN8touchgfx8CallbackI15Screen1ViewBasePNS_26DrawableListItemsInterfaceEssE7executeES3_ss>:
    virtual void execute(T1 t1, T2 t2, T3 t3)
 8007e20:	b590      	push	{r4, r7, lr}
 8007e22:	b085      	sub	sp, #20
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	60f8      	str	r0, [r7, #12]
 8007e28:	60b9      	str	r1, [r7, #8]
 8007e2a:	4611      	mov	r1, r2
 8007e2c:	461a      	mov	r2, r3
 8007e2e:	460b      	mov	r3, r1
 8007e30:	80fb      	strh	r3, [r7, #6]
 8007e32:	4613      	mov	r3, r2
 8007e34:	80bb      	strh	r3, [r7, #4]
        (pobject->*pmemfun_3)(t1, t2, t3);
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	685b      	ldr	r3, [r3, #4]
 8007e3a:	68fa      	ldr	r2, [r7, #12]
 8007e3c:	68d2      	ldr	r2, [r2, #12]
 8007e3e:	1052      	asrs	r2, r2, #1
 8007e40:	1898      	adds	r0, r3, r2
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	68db      	ldr	r3, [r3, #12]
 8007e46:	f003 0301 	and.w	r3, r3, #1
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d102      	bne.n	8007e54 <_ZN8touchgfx8CallbackI15Screen1ViewBasePNS_26DrawableListItemsInterfaceEssE7executeES3_ss+0x34>
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	689c      	ldr	r4, [r3, #8]
 8007e52:	e00a      	b.n	8007e6a <_ZN8touchgfx8CallbackI15Screen1ViewBasePNS_26DrawableListItemsInterfaceEssE7executeES3_ss+0x4a>
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	685b      	ldr	r3, [r3, #4]
 8007e58:	68fa      	ldr	r2, [r7, #12]
 8007e5a:	68d2      	ldr	r2, [r2, #12]
 8007e5c:	1052      	asrs	r2, r2, #1
 8007e5e:	4413      	add	r3, r2
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	68fa      	ldr	r2, [r7, #12]
 8007e64:	6892      	ldr	r2, [r2, #8]
 8007e66:	4413      	add	r3, r2
 8007e68:	681c      	ldr	r4, [r3, #0]
 8007e6a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8007e6e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007e72:	68b9      	ldr	r1, [r7, #8]
 8007e74:	47a0      	blx	r4
    }
 8007e76:	bf00      	nop
 8007e78:	3714      	adds	r7, #20
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bd90      	pop	{r4, r7, pc}

08007e7e <_ZNK8touchgfx8CallbackI15Screen1ViewBasePNS_26DrawableListItemsInterfaceEssE7isValidEv>:
    virtual bool isValid() const
 8007e7e:	b480      	push	{r7}
 8007e80:	b083      	sub	sp, #12
 8007e82:	af00      	add	r7, sp, #0
 8007e84:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_3 != 0);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	685b      	ldr	r3, [r3, #4]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d010      	beq.n	8007eb0 <_ZNK8touchgfx8CallbackI15Screen1ViewBasePNS_26DrawableListItemsInterfaceEssE7isValidEv+0x32>
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	689b      	ldr	r3, [r3, #8]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d107      	bne.n	8007ea6 <_ZNK8touchgfx8CallbackI15Screen1ViewBasePNS_26DrawableListItemsInterfaceEssE7isValidEv+0x28>
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	68db      	ldr	r3, [r3, #12]
 8007e9a:	f003 0301 	and.w	r3, r3, #1
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d101      	bne.n	8007ea6 <_ZNK8touchgfx8CallbackI15Screen1ViewBasePNS_26DrawableListItemsInterfaceEssE7isValidEv+0x28>
 8007ea2:	2301      	movs	r3, #1
 8007ea4:	e000      	b.n	8007ea8 <_ZNK8touchgfx8CallbackI15Screen1ViewBasePNS_26DrawableListItemsInterfaceEssE7isValidEv+0x2a>
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	2b01      	cmp	r3, #1
 8007eaa:	d001      	beq.n	8007eb0 <_ZNK8touchgfx8CallbackI15Screen1ViewBasePNS_26DrawableListItemsInterfaceEssE7isValidEv+0x32>
 8007eac:	2301      	movs	r3, #1
 8007eae:	e000      	b.n	8007eb2 <_ZNK8touchgfx8CallbackI15Screen1ViewBasePNS_26DrawableListItemsInterfaceEssE7isValidEv+0x34>
 8007eb0:	2300      	movs	r3, #0
    }
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	370c      	adds	r7, #12
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebc:	4770      	bx	lr

08007ebe <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8007ebe:	b580      	push	{r7, lr}
 8007ec0:	b082      	sub	sp, #8
 8007ec2:	af00      	add	r7, sp, #0
 8007ec4:	6078      	str	r0, [r7, #4]
 8007ec6:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	685b      	ldr	r3, [r3, #4]
 8007ecc:	687a      	ldr	r2, [r7, #4]
 8007ece:	68d2      	ldr	r2, [r2, #12]
 8007ed0:	1052      	asrs	r2, r2, #1
 8007ed2:	1898      	adds	r0, r3, r2
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	68db      	ldr	r3, [r3, #12]
 8007ed8:	f003 0301 	and.w	r3, r3, #1
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d102      	bne.n	8007ee6 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	689b      	ldr	r3, [r3, #8]
 8007ee4:	e00a      	b.n	8007efc <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	685b      	ldr	r3, [r3, #4]
 8007eea:	687a      	ldr	r2, [r7, #4]
 8007eec:	68d2      	ldr	r2, [r2, #12]
 8007eee:	1052      	asrs	r2, r2, #1
 8007ef0:	4413      	add	r3, r2
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	687a      	ldr	r2, [r7, #4]
 8007ef6:	6892      	ldr	r2, [r2, #8]
 8007ef8:	4413      	add	r3, r2
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	6839      	ldr	r1, [r7, #0]
 8007efe:	4798      	blx	r3
    }
 8007f00:	bf00      	nop
 8007f02:	3708      	adds	r7, #8
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bd80      	pop	{r7, pc}

08007f08 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 8007f08:	b480      	push	{r7}
 8007f0a:	b083      	sub	sp, #12
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	685b      	ldr	r3, [r3, #4]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d010      	beq.n	8007f3a <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	689b      	ldr	r3, [r3, #8]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d107      	bne.n	8007f30 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	68db      	ldr	r3, [r3, #12]
 8007f24:	f003 0301 	and.w	r3, r3, #1
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d101      	bne.n	8007f30 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8007f2c:	2301      	movs	r3, #1
 8007f2e:	e000      	b.n	8007f32 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 8007f30:	2300      	movs	r3, #0
 8007f32:	2b01      	cmp	r3, #1
 8007f34:	d001      	beq.n	8007f3a <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8007f36:	2301      	movs	r3, #1
 8007f38:	e000      	b.n	8007f3c <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 8007f3a:	2300      	movs	r3, #0
    }
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	370c      	adds	r7, #12
 8007f40:	46bd      	mov	sp, r7
 8007f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f46:	4770      	bx	lr

08007f48 <_ZN8touchgfx17DrawableListItemsI14imageContainerLi4EE11getDrawableEs>:
    virtual Drawable* getDrawable(int16_t index)
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b082      	sub	sp, #8
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
 8007f50:	460b      	mov	r3, r1
 8007f52:	807b      	strh	r3, [r7, #2]
        assert(index >= 0 && index < SIZE);
 8007f54:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	db03      	blt.n	8007f64 <_ZN8touchgfx17DrawableListItemsI14imageContainerLi4EE11getDrawableEs+0x1c>
 8007f5c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007f60:	2b03      	cmp	r3, #3
 8007f62:	dd05      	ble.n	8007f70 <_ZN8touchgfx17DrawableListItemsI14imageContainerLi4EE11getDrawableEs+0x28>
 8007f64:	4b08      	ldr	r3, [pc, #32]	; (8007f88 <_ZN8touchgfx17DrawableListItemsI14imageContainerLi4EE11getDrawableEs+0x40>)
 8007f66:	4a09      	ldr	r2, [pc, #36]	; (8007f8c <_ZN8touchgfx17DrawableListItemsI14imageContainerLi4EE11getDrawableEs+0x44>)
 8007f68:	2187      	movs	r1, #135	; 0x87
 8007f6a:	4809      	ldr	r0, [pc, #36]	; (8007f90 <_ZN8touchgfx17DrawableListItemsI14imageContainerLi4EE11getDrawableEs+0x48>)
 8007f6c:	f01a fc40 	bl	80227f0 <__assert_func>
        return &element[index];
 8007f70:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007f74:	2258      	movs	r2, #88	; 0x58
 8007f76:	fb02 f303 	mul.w	r3, r2, r3
 8007f7a:	687a      	ldr	r2, [r7, #4]
 8007f7c:	4413      	add	r3, r2
 8007f7e:	3304      	adds	r3, #4
    }
 8007f80:	4618      	mov	r0, r3
 8007f82:	3708      	adds	r7, #8
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bd80      	pop	{r7, pc}
 8007f88:	08023d90 	.word	0x08023d90
 8007f8c:	08024990 	.word	0x08024990
 8007f90:	08023dac 	.word	0x08023dac

08007f94 <__tcf_0>:
extern const touchgfx::KerningNode kerning_verdana_10_4bpp[];
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0);
 8007f94:	b580      	push	{r7, lr}
 8007f96:	af00      	add	r7, sp, #0
 8007f98:	4801      	ldr	r0, [pc, #4]	; (8007fa0 <__tcf_0+0xc>)
 8007f9a:	f7fb fd87 	bl	8003aac <_ZN8touchgfx13GeneratedFontD1Ev>
 8007f9e:	bd80      	pop	{r7, pc}
 8007fa0:	20004fa8 	.word	0x20004fa8

08007fa4 <_Z23getFont_verdana_10_4bppv>:
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b08a      	sub	sp, #40	; 0x28
 8007fa8:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0);
 8007faa:	4b15      	ldr	r3, [pc, #84]	; (8008000 <_Z23getFont_verdana_10_4bppv+0x5c>)
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f003 0301 	and.w	r3, r3, #1
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d11f      	bne.n	8007ff6 <_Z23getFont_verdana_10_4bppv+0x52>
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	9309      	str	r3, [sp, #36]	; 0x24
 8007fba:	2300      	movs	r3, #0
 8007fbc:	9308      	str	r3, [sp, #32]
 8007fbe:	233f      	movs	r3, #63	; 0x3f
 8007fc0:	9307      	str	r3, [sp, #28]
 8007fc2:	4b10      	ldr	r3, [pc, #64]	; (8008004 <_Z23getFont_verdana_10_4bppv+0x60>)
 8007fc4:	9306      	str	r3, [sp, #24]
 8007fc6:	4b10      	ldr	r3, [pc, #64]	; (8008008 <_Z23getFont_verdana_10_4bppv+0x64>)
 8007fc8:	9305      	str	r3, [sp, #20]
 8007fca:	2300      	movs	r3, #0
 8007fcc:	9304      	str	r3, [sp, #16]
 8007fce:	2300      	movs	r3, #0
 8007fd0:	9303      	str	r3, [sp, #12]
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	9302      	str	r3, [sp, #8]
 8007fd6:	2304      	movs	r3, #4
 8007fd8:	9301      	str	r3, [sp, #4]
 8007fda:	2300      	movs	r3, #0
 8007fdc:	9300      	str	r3, [sp, #0]
 8007fde:	230a      	movs	r3, #10
 8007fe0:	2201      	movs	r2, #1
 8007fe2:	490a      	ldr	r1, [pc, #40]	; (800800c <_Z23getFont_verdana_10_4bppv+0x68>)
 8007fe4:	480a      	ldr	r0, [pc, #40]	; (8008010 <_Z23getFont_verdana_10_4bppv+0x6c>)
 8007fe6:	f7fc f965 	bl	80042b4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 8007fea:	4b05      	ldr	r3, [pc, #20]	; (8008000 <_Z23getFont_verdana_10_4bppv+0x5c>)
 8007fec:	2201      	movs	r2, #1
 8007fee:	601a      	str	r2, [r3, #0]
 8007ff0:	4808      	ldr	r0, [pc, #32]	; (8008014 <_Z23getFont_verdana_10_4bppv+0x70>)
 8007ff2:	f01a fc1b 	bl	802282c <atexit>
    return verdana_10_4bpp;
 8007ff6:	4b06      	ldr	r3, [pc, #24]	; (8008010 <_Z23getFont_verdana_10_4bppv+0x6c>)
}
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	bd80      	pop	{r7, pc}
 8007ffe:	bf00      	nop
 8008000:	20004fcc 	.word	0x20004fcc
 8008004:	081f7fe4 	.word	0x081f7fe4
 8008008:	08024aec 	.word	0x08024aec
 800800c:	081f8060 	.word	0x081f8060
 8008010:	20004fa8 	.word	0x20004fa8
 8008014:	08007f95 	.word	0x08007f95

08008018 <__tcf_0>:
extern const touchgfx::KerningNode kerning_verdana_20_4bpp[];
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 40, 20, 4, 4, 1, 0, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0);
 8008018:	b580      	push	{r7, lr}
 800801a:	af00      	add	r7, sp, #0
 800801c:	4801      	ldr	r0, [pc, #4]	; (8008024 <__tcf_0+0xc>)
 800801e:	f7fb fd45 	bl	8003aac <_ZN8touchgfx13GeneratedFontD1Ev>
 8008022:	bd80      	pop	{r7, pc}
 8008024:	20004fd0 	.word	0x20004fd0

08008028 <_Z23getFont_verdana_20_4bppv>:
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b08a      	sub	sp, #40	; 0x28
 800802c:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 40, 20, 4, 4, 1, 0, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0);
 800802e:	4b15      	ldr	r3, [pc, #84]	; (8008084 <_Z23getFont_verdana_20_4bppv+0x5c>)
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f003 0301 	and.w	r3, r3, #1
 8008036:	2b00      	cmp	r3, #0
 8008038:	d11f      	bne.n	800807a <_Z23getFont_verdana_20_4bppv+0x52>
 800803a:	2300      	movs	r3, #0
 800803c:	9309      	str	r3, [sp, #36]	; 0x24
 800803e:	2300      	movs	r3, #0
 8008040:	9308      	str	r3, [sp, #32]
 8008042:	233f      	movs	r3, #63	; 0x3f
 8008044:	9307      	str	r3, [sp, #28]
 8008046:	4b10      	ldr	r3, [pc, #64]	; (8008088 <_Z23getFont_verdana_20_4bppv+0x60>)
 8008048:	9306      	str	r3, [sp, #24]
 800804a:	4b10      	ldr	r3, [pc, #64]	; (800808c <_Z23getFont_verdana_20_4bppv+0x64>)
 800804c:	9305      	str	r3, [sp, #20]
 800804e:	2301      	movs	r3, #1
 8008050:	9304      	str	r3, [sp, #16]
 8008052:	2300      	movs	r3, #0
 8008054:	9303      	str	r3, [sp, #12]
 8008056:	2301      	movs	r3, #1
 8008058:	9302      	str	r3, [sp, #8]
 800805a:	2304      	movs	r3, #4
 800805c:	9301      	str	r3, [sp, #4]
 800805e:	2304      	movs	r3, #4
 8008060:	9300      	str	r3, [sp, #0]
 8008062:	2314      	movs	r3, #20
 8008064:	2228      	movs	r2, #40	; 0x28
 8008066:	490a      	ldr	r1, [pc, #40]	; (8008090 <_Z23getFont_verdana_20_4bppv+0x68>)
 8008068:	480a      	ldr	r0, [pc, #40]	; (8008094 <_Z23getFont_verdana_20_4bppv+0x6c>)
 800806a:	f7fc f923 	bl	80042b4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800806e:	4b05      	ldr	r3, [pc, #20]	; (8008084 <_Z23getFont_verdana_20_4bppv+0x5c>)
 8008070:	2201      	movs	r2, #1
 8008072:	601a      	str	r2, [r3, #0]
 8008074:	4808      	ldr	r0, [pc, #32]	; (8008098 <_Z23getFont_verdana_20_4bppv+0x70>)
 8008076:	f01a fbd9 	bl	802282c <atexit>
    return verdana_20_4bpp;
 800807a:	4b06      	ldr	r3, [pc, #24]	; (8008094 <_Z23getFont_verdana_20_4bppv+0x6c>)
}
 800807c:	4618      	mov	r0, r3
 800807e:	46bd      	mov	sp, r7
 8008080:	bd80      	pop	{r7, pc}
 8008082:	bf00      	nop
 8008084:	20004ff4 	.word	0x20004ff4
 8008088:	081f7fe8 	.word	0x081f7fe8
 800808c:	08024af0 	.word	0x08024af0
 8008090:	081f8070 	.word	0x081f8070
 8008094:	20004fd0 	.word	0x20004fd0
 8008098:	08008019 	.word	0x08008019

0800809c <__tcf_0>:
extern const touchgfx::KerningNode kerning_verdana_30_4bpp[];
touchgfx::GeneratedFont& getFont_verdana_30_4bpp();

touchgfx::GeneratedFont& getFont_verdana_30_4bpp()
{
    static touchgfx::GeneratedFont verdana_30_4bpp(glyphs_verdana_30_4bpp, 14, 30, 6, 4, 1, 0, 0, unicodes_verdana_30_4bpp, kerning_verdana_30_4bpp, 63, 0, 0);
 800809c:	b580      	push	{r7, lr}
 800809e:	af00      	add	r7, sp, #0
 80080a0:	4801      	ldr	r0, [pc, #4]	; (80080a8 <__tcf_0+0xc>)
 80080a2:	f7fb fd03 	bl	8003aac <_ZN8touchgfx13GeneratedFontD1Ev>
 80080a6:	bd80      	pop	{r7, pc}
 80080a8:	20004ff8 	.word	0x20004ff8

080080ac <_Z23getFont_verdana_30_4bppv>:
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b08a      	sub	sp, #40	; 0x28
 80080b0:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_30_4bpp(glyphs_verdana_30_4bpp, 14, 30, 6, 4, 1, 0, 0, unicodes_verdana_30_4bpp, kerning_verdana_30_4bpp, 63, 0, 0);
 80080b2:	4b15      	ldr	r3, [pc, #84]	; (8008108 <_Z23getFont_verdana_30_4bppv+0x5c>)
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f003 0301 	and.w	r3, r3, #1
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d11f      	bne.n	80080fe <_Z23getFont_verdana_30_4bppv+0x52>
 80080be:	2300      	movs	r3, #0
 80080c0:	9309      	str	r3, [sp, #36]	; 0x24
 80080c2:	2300      	movs	r3, #0
 80080c4:	9308      	str	r3, [sp, #32]
 80080c6:	233f      	movs	r3, #63	; 0x3f
 80080c8:	9307      	str	r3, [sp, #28]
 80080ca:	4b10      	ldr	r3, [pc, #64]	; (800810c <_Z23getFont_verdana_30_4bppv+0x60>)
 80080cc:	9306      	str	r3, [sp, #24]
 80080ce:	4b10      	ldr	r3, [pc, #64]	; (8008110 <_Z23getFont_verdana_30_4bppv+0x64>)
 80080d0:	9305      	str	r3, [sp, #20]
 80080d2:	2300      	movs	r3, #0
 80080d4:	9304      	str	r3, [sp, #16]
 80080d6:	2300      	movs	r3, #0
 80080d8:	9303      	str	r3, [sp, #12]
 80080da:	2301      	movs	r3, #1
 80080dc:	9302      	str	r3, [sp, #8]
 80080de:	2304      	movs	r3, #4
 80080e0:	9301      	str	r3, [sp, #4]
 80080e2:	2306      	movs	r3, #6
 80080e4:	9300      	str	r3, [sp, #0]
 80080e6:	231e      	movs	r3, #30
 80080e8:	220e      	movs	r2, #14
 80080ea:	490a      	ldr	r1, [pc, #40]	; (8008114 <_Z23getFont_verdana_30_4bppv+0x68>)
 80080ec:	480a      	ldr	r0, [pc, #40]	; (8008118 <_Z23getFont_verdana_30_4bppv+0x6c>)
 80080ee:	f7fc f8e1 	bl	80042b4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 80080f2:	4b05      	ldr	r3, [pc, #20]	; (8008108 <_Z23getFont_verdana_30_4bppv+0x5c>)
 80080f4:	2201      	movs	r2, #1
 80080f6:	601a      	str	r2, [r3, #0]
 80080f8:	4808      	ldr	r0, [pc, #32]	; (800811c <_Z23getFont_verdana_30_4bppv+0x70>)
 80080fa:	f01a fb97 	bl	802282c <atexit>
    return verdana_30_4bpp;
 80080fe:	4b06      	ldr	r3, [pc, #24]	; (8008118 <_Z23getFont_verdana_30_4bppv+0x6c>)
}
 8008100:	4618      	mov	r0, r3
 8008102:	46bd      	mov	sp, r7
 8008104:	bd80      	pop	{r7, pc}
 8008106:	bf00      	nop
 8008108:	2000501c 	.word	0x2000501c
 800810c:	081f805c 	.word	0x081f805c
 8008110:	08024af4 	.word	0x08024af4
 8008114:	081f82a0 	.word	0x081f82a0
 8008118:	20004ff8 	.word	0x20004ff8
 800811c:	0800809d 	.word	0x0800809d

08008120 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 8008120:	b480      	push	{r7}
 8008122:	b085      	sub	sp, #20
 8008124:	af00      	add	r7, sp, #0
 8008126:	60f8      	str	r0, [r7, #12]
 8008128:	60b9      	str	r1, [r7, #8]
 800812a:	4613      	mov	r3, r2
 800812c:	80fb      	strh	r3, [r7, #6]
        typedTexts = data;
 800812e:	4a07      	ldr	r2, [pc, #28]	; (800814c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	6013      	str	r3, [r2, #0]
        fonts = f;
 8008134:	4a06      	ldr	r2, [pc, #24]	; (8008150 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 8008136:	68bb      	ldr	r3, [r7, #8]
 8008138:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 800813a:	4a06      	ldr	r2, [pc, #24]	; (8008154 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 800813c:	88fb      	ldrh	r3, [r7, #6]
 800813e:	8013      	strh	r3, [r2, #0]
    }
 8008140:	bf00      	nop
 8008142:	3714      	adds	r7, #20
 8008144:	46bd      	mov	sp, r7
 8008146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814a:	4770      	bx	lr
 800814c:	2000d234 	.word	0x2000d234
 8008150:	2000d23c 	.word	0x2000d23c
 8008154:	2000d238 	.word	0x2000d238

08008158 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8008158:	b590      	push	{r4, r7, lr}
 800815a:	b085      	sub	sp, #20
 800815c:	af00      	add	r7, sp, #0
 800815e:	4603      	mov	r3, r0
 8008160:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 8008162:	2300      	movs	r3, #0
 8008164:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 8008166:	88fb      	ldrh	r3, [r7, #6]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d127      	bne.n	80081bc <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 800816c:	88fb      	ldrh	r3, [r7, #6]
 800816e:	4a1e      	ldr	r2, [pc, #120]	; (80081e8 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8008170:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d016      	beq.n	80081a6 <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            //dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 8008178:	88fb      	ldrh	r3, [r7, #6]
 800817a:	4a1b      	ldr	r2, [pc, #108]	; (80081e8 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 800817c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008180:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8008182:	68bb      	ldr	r3, [r7, #8]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	68ba      	ldr	r2, [r7, #8]
 8008188:	4413      	add	r3, r2
 800818a:	4a18      	ldr	r2, [pc, #96]	; (80081ec <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 800818c:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 800818e:	68bb      	ldr	r3, [r7, #8]
 8008190:	685b      	ldr	r3, [r3, #4]
 8008192:	68ba      	ldr	r2, [r7, #8]
 8008194:	4413      	add	r3, r2
 8008196:	4a16      	ldr	r2, [pc, #88]	; (80081f0 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8008198:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	689b      	ldr	r3, [r3, #8]
 800819e:	68ba      	ldr	r2, [r7, #8]
 80081a0:	4413      	add	r3, r2
 80081a2:	60fb      	str	r3, [r7, #12]
 80081a4:	e00a      	b.n	80081bc <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            //compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 80081a6:	4b11      	ldr	r3, [pc, #68]	; (80081ec <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 80081a8:	4a12      	ldr	r2, [pc, #72]	; (80081f4 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 80081aa:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 80081ac:	4a12      	ldr	r2, [pc, #72]	; (80081f8 <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 80081ae:	4b10      	ldr	r3, [pc, #64]	; (80081f0 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 80081b0:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 80081b2:	88fb      	ldrh	r3, [r7, #6]
 80081b4:	4a11      	ldr	r2, [pc, #68]	; (80081fc <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 80081b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80081ba:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d00d      	beq.n	80081de <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 80081c2:	4a0f      	ldr	r2, [pc, #60]	; (8008200 <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 80081c4:	88fb      	ldrh	r3, [r7, #6]
 80081c6:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 80081c8:	f000 f83e 	bl	8008248 <_ZN17TypedTextDatabase8getFontsEv>
 80081cc:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 80081ce:	f000 f833 	bl	8008238 <_ZN17TypedTextDatabase15getInstanceSizeEv>
 80081d2:	4603      	mov	r3, r0
 80081d4:	461a      	mov	r2, r3
 80081d6:	4621      	mov	r1, r4
 80081d8:	68f8      	ldr	r0, [r7, #12]
 80081da:	f7ff ffa1 	bl	8008120 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 80081de:	bf00      	nop
 80081e0:	3714      	adds	r7, #20
 80081e2:	46bd      	mov	sp, r7
 80081e4:	bd90      	pop	{r4, r7, pc}
 80081e6:	bf00      	nop
 80081e8:	20005030 	.word	0x20005030
 80081ec:	20005038 	.word	0x20005038
 80081f0:	2000503c 	.word	0x2000503c
 80081f4:	081f83d4 	.word	0x081f83d4
 80081f8:	081f8364 	.word	0x081f8364
 80081fc:	081f8524 	.word	0x081f8524
 8008200:	20005034 	.word	0x20005034

08008204 <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 8008204:	b480      	push	{r7}
 8008206:	b083      	sub	sp, #12
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
 800820c:	460b      	mov	r3, r1
 800820e:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 8008210:	4b07      	ldr	r3, [pc, #28]	; (8008230 <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 8008212:	681a      	ldr	r2, [r3, #0]
 8008214:	4b07      	ldr	r3, [pc, #28]	; (8008234 <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 8008216:	6819      	ldr	r1, [r3, #0]
 8008218:	887b      	ldrh	r3, [r7, #2]
 800821a:	009b      	lsls	r3, r3, #2
 800821c:	440b      	add	r3, r1
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	005b      	lsls	r3, r3, #1
 8008222:	4413      	add	r3, r2
}
 8008224:	4618      	mov	r0, r3
 8008226:	370c      	adds	r7, #12
 8008228:	46bd      	mov	sp, r7
 800822a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822e:	4770      	bx	lr
 8008230:	20005038 	.word	0x20005038
 8008234:	2000503c 	.word	0x2000503c

08008238 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 8008238:	b480      	push	{r7}
 800823a:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 800823c:	231c      	movs	r3, #28
}
 800823e:	4618      	mov	r0, r3
 8008240:	46bd      	mov	sp, r7
 8008242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008246:	4770      	bx	lr

08008248 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 8008248:	b480      	push	{r7}
 800824a:	af00      	add	r7, sp, #0
    return _fonts;
 800824c:	4b02      	ldr	r3, [pc, #8]	; (8008258 <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 800824e:	4618      	mov	r0, r3
 8008250:	46bd      	mov	sp, r7
 8008252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008256:	4770      	bx	lr
 8008258:	20005040 	.word	0x20005040

0800825c <_Z41__static_initialization_and_destruction_0ii>:
    case 2:
        _fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
}  // namespace TypedTextDatabase
 800825c:	b580      	push	{r7, lr}
 800825e:	b082      	sub	sp, #8
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
 8008264:	6039      	str	r1, [r7, #0]
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	2b01      	cmp	r3, #1
 800826a:	d113      	bne.n	8008294 <_Z41__static_initialization_and_destruction_0ii+0x38>
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008272:	4293      	cmp	r3, r2
 8008274:	d10e      	bne.n	8008294 <_Z41__static_initialization_and_destruction_0ii+0x38>
    &(getFont_verdana_20_4bpp()),
 8008276:	f7ff fed7 	bl	8008028 <_Z23getFont_verdana_20_4bppv>
 800827a:	4602      	mov	r2, r0
};
 800827c:	4b07      	ldr	r3, [pc, #28]	; (800829c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800827e:	601a      	str	r2, [r3, #0]
    &(getFont_verdana_30_4bpp()),
 8008280:	f7ff ff14 	bl	80080ac <_Z23getFont_verdana_30_4bppv>
 8008284:	4602      	mov	r2, r0
};
 8008286:	4b05      	ldr	r3, [pc, #20]	; (800829c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8008288:	605a      	str	r2, [r3, #4]
    &(getFont_verdana_10_4bpp())
 800828a:	f7ff fe8b 	bl	8007fa4 <_Z23getFont_verdana_10_4bppv>
 800828e:	4602      	mov	r2, r0
};
 8008290:	4b02      	ldr	r3, [pc, #8]	; (800829c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8008292:	609a      	str	r2, [r3, #8]
}  // namespace TypedTextDatabase
 8008294:	bf00      	nop
 8008296:	3708      	adds	r7, #8
 8008298:	46bd      	mov	sp, r7
 800829a:	bd80      	pop	{r7, pc}
 800829c:	20005040 	.word	0x20005040

080082a0 <_GLOBAL__sub_I__fonts>:
 80082a0:	b580      	push	{r7, lr}
 80082a2:	af00      	add	r7, sp, #0
 80082a4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80082a8:	2001      	movs	r0, #1
 80082aa:	f7ff ffd7 	bl	800825c <_Z41__static_initialization_and_destruction_0ii>
 80082ae:	bd80      	pop	{r7, pc}

080082b0 <_ZN8touchgfx9ContainerC1Ev>:
    Container() : Drawable(),
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b082      	sub	sp, #8
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
        firstChild(0)
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	4618      	mov	r0, r3
 80082bc:	f7fc f8c0 	bl	8004440 <_ZN8touchgfx8DrawableC1Ev>
 80082c0:	4a05      	ldr	r2, [pc, #20]	; (80082d8 <_ZN8touchgfx9ContainerC1Ev+0x28>)
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	601a      	str	r2, [r3, #0]
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2200      	movs	r2, #0
 80082ca:	629a      	str	r2, [r3, #40]	; 0x28
    }
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	4618      	mov	r0, r3
 80082d0:	3708      	adds	r7, #8
 80082d2:	46bd      	mov	sp, r7
 80082d4:	bd80      	pop	{r7, pc}
 80082d6:	bf00      	nop
 80082d8:	08025570 	.word	0x08025570

080082dc <_ZN18imageContainerBaseD1Ev>:

class imageContainerBase : public touchgfx::Container
{
public:
    imageContainerBase();
    virtual ~imageContainerBase() {}
 80082dc:	b580      	push	{r7, lr}
 80082de:	b082      	sub	sp, #8
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
 80082e4:	4a08      	ldr	r2, [pc, #32]	; (8008308 <_ZN18imageContainerBaseD1Ev+0x2c>)
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	601a      	str	r2, [r3, #0]
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	332c      	adds	r3, #44	; 0x2c
 80082ee:	4618      	mov	r0, r3
 80082f0:	f7ff fcec 	bl	8007ccc <_ZN8touchgfx5ImageD1Ev>
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	4618      	mov	r0, r3
 80082f8:	f7fc fa34 	bl	8004764 <_ZN8touchgfx9ContainerD1Ev>
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	4618      	mov	r0, r3
 8008300:	3708      	adds	r7, #8
 8008302:	46bd      	mov	sp, r7
 8008304:	bd80      	pop	{r7, pc}
 8008306:	bf00      	nop
 8008308:	08024b00 	.word	0x08024b00

0800830c <_ZN18imageContainerBaseD0Ev>:
 800830c:	b580      	push	{r7, lr}
 800830e:	b082      	sub	sp, #8
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	f7ff ffe1 	bl	80082dc <_ZN18imageContainerBaseD1Ev>
 800831a:	2158      	movs	r1, #88	; 0x58
 800831c:	6878      	ldr	r0, [r7, #4]
 800831e:	f01a fa3c 	bl	802279a <_ZdlPvj>
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	4618      	mov	r0, r3
 8008326:	3708      	adds	r7, #8
 8008328:	46bd      	mov	sp, r7
 800832a:	bd80      	pop	{r7, pc}

0800832c <_ZN18imageContainerBaseC1Ev>:
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/containers/imageContainerBase.hpp>
#include "BitmapDatabase.hpp"

imageContainerBase::imageContainerBase()
 800832c:	b590      	push	{r4, r7, lr}
 800832e:	b085      	sub	sp, #20
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	4618      	mov	r0, r3
 8008338:	f7ff ffba 	bl	80082b0 <_ZN8touchgfx9ContainerC1Ev>
 800833c:	4a20      	ldr	r2, [pc, #128]	; (80083c0 <_ZN18imageContainerBaseC1Ev+0x94>)
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	601a      	str	r2, [r3, #0]
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8008348:	f107 0308 	add.w	r3, r7, #8
 800834c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008350:	4618      	mov	r0, r3
 8008352:	f7fc f865 	bl	8004420 <_ZN8touchgfx6BitmapC1Et>
 8008356:	f107 0308 	add.w	r3, r7, #8
 800835a:	4619      	mov	r1, r3
 800835c:	4620      	mov	r0, r4
 800835e:	f7fc fae3 	bl	8004928 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
{
    setWidth(262);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	f44f 7183 	mov.w	r1, #262	; 0x106
 8008368:	4618      	mov	r0, r3
 800836a:	f7fc f920 	bl	80045ae <_ZN8touchgfx8Drawable8setWidthEs>
    setHeight(257);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	f240 1101 	movw	r1, #257	; 0x101
 8008374:	4618      	mov	r0, r3
 8008376:	f7fc f929 	bl	80045cc <_ZN8touchgfx8Drawable9setHeightEs>
    image1.setXY(19, 16);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	332c      	adds	r3, #44	; 0x2c
 800837e:	2210      	movs	r2, #16
 8008380:	2113      	movs	r1, #19
 8008382:	4618      	mov	r0, r3
 8008384:	f7fc f8f5 	bl	8004572 <_ZN8touchgfx8Drawable5setXYEss>
    image1.setBitmap(touchgfx::Bitmap(BITMAP_DOWNLOAD_REMOVEBG_PREVIEW_ID));
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800838e:	f107 030c 	add.w	r3, r7, #12
 8008392:	2107      	movs	r1, #7
 8008394:	4618      	mov	r0, r3
 8008396:	f7fc f843 	bl	8004420 <_ZN8touchgfx6BitmapC1Et>
 800839a:	f107 030c 	add.w	r3, r7, #12
 800839e:	4619      	mov	r1, r3
 80083a0:	4620      	mov	r0, r4
 80083a2:	f00d f947 	bl	8015634 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    add(image1);
 80083a6:	687a      	ldr	r2, [r7, #4]
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	332c      	adds	r3, #44	; 0x2c
 80083ac:	4619      	mov	r1, r3
 80083ae:	4610      	mov	r0, r2
 80083b0:	f00b f94e 	bl	8013650 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	4618      	mov	r0, r3
 80083b8:	3714      	adds	r7, #20
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bd90      	pop	{r4, r7, pc}
 80083be:	bf00      	nop
 80083c0:	08024b00 	.word	0x08024b00

080083c4 <_ZN18imageContainerBase10initializeEv>:

void imageContainerBase::initialize()
{
 80083c4:	b480      	push	{r7}
 80083c6:	b083      	sub	sp, #12
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]

}
 80083cc:	bf00      	nop
 80083ce:	370c      	adds	r7, #12
 80083d0:	46bd      	mov	sp, r7
 80083d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d6:	4770      	bx	lr

080083d8 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 80083d8:	b580      	push	{r7, lr}
 80083da:	b084      	sub	sp, #16
 80083dc:	af00      	add	r7, sp, #0
 80083de:	60f8      	str	r0, [r7, #12]
 80083e0:	60b9      	str	r1, [r7, #8]
 80083e2:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	687a      	ldr	r2, [r7, #4]
 80083e8:	68b9      	ldr	r1, [r7, #8]
 80083ea:	4618      	mov	r0, r3
 80083ec:	f7fb fd4e 	bl	8003e8c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 80083f0:	4a03      	ldr	r2, [pc, #12]	; (8008400 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	601a      	str	r2, [r3, #0]
{

}
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	4618      	mov	r0, r3
 80083fa:	3710      	adds	r7, #16
 80083fc:	46bd      	mov	sp, r7
 80083fe:	bd80      	pop	{r7, pc}
 8008400:	080242f4 	.word	0x080242f4

08008404 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 8008404:	b480      	push	{r7}
 8008406:	b083      	sub	sp, #12
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2200      	movs	r2, #0
 8008410:	601a      	str	r2, [r3, #0]
{

}
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	4618      	mov	r0, r3
 8008416:	370c      	adds	r7, #12
 8008418:	46bd      	mov	sp, r7
 800841a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841e:	4770      	bx	lr

08008420 <_ZN5Model4tickEv>:

void Model::tick()
{
 8008420:	b480      	push	{r7}
 8008422:	b083      	sub	sp, #12
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]

 8008428:	bf00      	nop
 800842a:	370c      	adds	r7, #12
 800842c:	46bd      	mov	sp, r7
 800842e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008432:	4770      	bx	lr

08008434 <_ZN8touchgfx9Presenter8activateEv>:
     * @brief Place initialization code for the Presenter here.
     *
     *        The activate function is called automatically when a screen transition causes
     *        this Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 8008434:	b480      	push	{r7}
 8008436:	b083      	sub	sp, #12
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
    {
    }
 800843c:	bf00      	nop
 800843e:	370c      	adds	r7, #12
 8008440:	46bd      	mov	sp, r7
 8008442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008446:	4770      	bx	lr

08008448 <_ZN8touchgfx9Presenter10deactivateEv>:
     * @brief Place cleanup code for the Presenter here.
     *
     *        The deactivate function is called automatically when a screen transition causes
     *        this Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 8008448:	b480      	push	{r7}
 800844a:	b083      	sub	sp, #12
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
    {
    }
 8008450:	bf00      	nop
 8008452:	370c      	adds	r7, #12
 8008454:	46bd      	mov	sp, r7
 8008456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845a:	4770      	bx	lr

0800845c <_ZN8touchgfx9PresenterD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Presenter()
 800845c:	b480      	push	{r7}
 800845e:	b083      	sub	sp, #12
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
    {
 8008464:	4a04      	ldr	r2, [pc, #16]	; (8008478 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	601a      	str	r2, [r3, #0]
    }
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	4618      	mov	r0, r3
 800846e:	370c      	adds	r7, #12
 8008470:	46bd      	mov	sp, r7
 8008472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008476:	4770      	bx	lr
 8008478:	08024bc8 	.word	0x08024bc8

0800847c <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 800847c:	b580      	push	{r7, lr}
 800847e:	b082      	sub	sp, #8
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
    }
 8008484:	6878      	ldr	r0, [r7, #4]
 8008486:	f7ff ffe9 	bl	800845c <_ZN8touchgfx9PresenterD1Ev>
 800848a:	2104      	movs	r1, #4
 800848c:	6878      	ldr	r0, [r7, #4]
 800848e:	f01a f984 	bl	802279a <_ZdlPvj>
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	4618      	mov	r0, r3
 8008496:	3708      	adds	r7, #8
 8008498:	46bd      	mov	sp, r7
 800849a:	bd80      	pop	{r7, pc}

0800849c <_ZN8touchgfx9PresenterC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Presenter()
 800849c:	b480      	push	{r7}
 800849e:	b083      	sub	sp, #12
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
    {
 80084a4:	4a04      	ldr	r2, [pc, #16]	; (80084b8 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	601a      	str	r2, [r3, #0]
    }
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	4618      	mov	r0, r3
 80084ae:	370c      	adds	r7, #12
 80084b0:	46bd      	mov	sp, r7
 80084b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b6:	4770      	bx	lr
 80084b8:	08024bc8 	.word	0x08024bc8

080084bc <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 80084bc:	b480      	push	{r7}
 80084be:	b083      	sub	sp, #12
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
 80084c4:	4a06      	ldr	r2, [pc, #24]	; (80084e0 <_ZN13ModelListenerC1Ev+0x24>)
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	601a      	str	r2, [r3, #0]
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2200      	movs	r2, #0
 80084ce:	605a      	str	r2, [r3, #4]
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	4618      	mov	r0, r3
 80084d4:	370c      	adds	r7, #12
 80084d6:	46bd      	mov	sp, r7
 80084d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084dc:	4770      	bx	lr
 80084de:	bf00      	nop
 80084e0:	08024bb8 	.word	0x08024bb8

080084e4 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 80084e4:	b480      	push	{r7}
 80084e6:	b083      	sub	sp, #12
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
 80084ec:	4a04      	ldr	r2, [pc, #16]	; (8008500 <_ZN13ModelListenerD1Ev+0x1c>)
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	601a      	str	r2, [r3, #0]
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	4618      	mov	r0, r3
 80084f6:	370c      	adds	r7, #12
 80084f8:	46bd      	mov	sp, r7
 80084fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fe:	4770      	bx	lr
 8008500:	08024bb8 	.word	0x08024bb8

08008504 <_ZN13ModelListenerD0Ev>:
 8008504:	b580      	push	{r7, lr}
 8008506:	b082      	sub	sp, #8
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
 800850c:	6878      	ldr	r0, [r7, #4]
 800850e:	f7ff ffe9 	bl	80084e4 <_ZN13ModelListenerD1Ev>
 8008512:	2108      	movs	r1, #8
 8008514:	6878      	ldr	r0, [r7, #4]
 8008516:	f01a f940 	bl	802279a <_ZdlPvj>
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	4618      	mov	r0, r3
 800851e:	3708      	adds	r7, #8
 8008520:	46bd      	mov	sp, r7
 8008522:	bd80      	pop	{r7, pc}

08008524 <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {};
 8008524:	b580      	push	{r7, lr}
 8008526:	b082      	sub	sp, #8
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
 800852c:	4a09      	ldr	r2, [pc, #36]	; (8008554 <_ZN16Screen1PresenterD1Ev+0x30>)
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	601a      	str	r2, [r3, #0]
 8008532:	4a09      	ldr	r2, [pc, #36]	; (8008558 <_ZN16Screen1PresenterD1Ev+0x34>)
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	605a      	str	r2, [r3, #4]
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	3304      	adds	r3, #4
 800853c:	4618      	mov	r0, r3
 800853e:	f7ff ffd1 	bl	80084e4 <_ZN13ModelListenerD1Ev>
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	4618      	mov	r0, r3
 8008546:	f7ff ff89 	bl	800845c <_ZN8touchgfx9PresenterD1Ev>
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	4618      	mov	r0, r3
 800854e:	3708      	adds	r7, #8
 8008550:	46bd      	mov	sp, r7
 8008552:	bd80      	pop	{r7, pc}
 8008554:	08024b90 	.word	0x08024b90
 8008558:	08024ba8 	.word	0x08024ba8

0800855c <_ZThn4_N16Screen1PresenterD1Ev>:
 800855c:	f1a0 0004 	sub.w	r0, r0, #4
 8008560:	e7e0      	b.n	8008524 <_ZN16Screen1PresenterD1Ev>
 8008562:	bf00      	nop

08008564 <_ZN16Screen1PresenterD0Ev>:
 8008564:	b580      	push	{r7, lr}
 8008566:	b082      	sub	sp, #8
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
 800856c:	6878      	ldr	r0, [r7, #4]
 800856e:	f7ff ffd9 	bl	8008524 <_ZN16Screen1PresenterD1Ev>
 8008572:	2110      	movs	r1, #16
 8008574:	6878      	ldr	r0, [r7, #4]
 8008576:	f01a f910 	bl	802279a <_ZdlPvj>
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	4618      	mov	r0, r3
 800857e:	3708      	adds	r7, #8
 8008580:	46bd      	mov	sp, r7
 8008582:	bd80      	pop	{r7, pc}

08008584 <_ZThn4_N16Screen1PresenterD0Ev>:
 8008584:	f1a0 0004 	sub.w	r0, r0, #4
 8008588:	e7ec      	b.n	8008564 <_ZN16Screen1PresenterD0Ev>
	...

0800858c <_ZN16Screen1PresenterC1ER11Screen1View>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

Screen1Presenter::Screen1Presenter(Screen1View& v)
 800858c:	b580      	push	{r7, lr}
 800858e:	b082      	sub	sp, #8
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
 8008594:	6039      	str	r1, [r7, #0]
    : view(v)
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	4618      	mov	r0, r3
 800859a:	f7ff ff7f 	bl	800849c <_ZN8touchgfx9PresenterC1Ev>
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	3304      	adds	r3, #4
 80085a2:	4618      	mov	r0, r3
 80085a4:	f7ff ff8a 	bl	80084bc <_ZN13ModelListenerC1Ev>
 80085a8:	4a06      	ldr	r2, [pc, #24]	; (80085c4 <_ZN16Screen1PresenterC1ER11Screen1View+0x38>)
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	601a      	str	r2, [r3, #0]
 80085ae:	4a06      	ldr	r2, [pc, #24]	; (80085c8 <_ZN16Screen1PresenterC1ER11Screen1View+0x3c>)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	605a      	str	r2, [r3, #4]
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	683a      	ldr	r2, [r7, #0]
 80085b8:	60da      	str	r2, [r3, #12]
{

}
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	4618      	mov	r0, r3
 80085be:	3708      	adds	r7, #8
 80085c0:	46bd      	mov	sp, r7
 80085c2:	bd80      	pop	{r7, pc}
 80085c4:	08024b90 	.word	0x08024b90
 80085c8:	08024ba8 	.word	0x08024ba8

080085cc <_ZN16Screen1Presenter8activateEv>:

void Screen1Presenter::activate()
{
 80085cc:	b480      	push	{r7}
 80085ce:	b083      	sub	sp, #12
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]

}
 80085d4:	bf00      	nop
 80085d6:	370c      	adds	r7, #12
 80085d8:	46bd      	mov	sp, r7
 80085da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085de:	4770      	bx	lr

080085e0 <_ZN16Screen1Presenter10deactivateEv>:

void Screen1Presenter::deactivate()
{
 80085e0:	b480      	push	{r7}
 80085e2:	b083      	sub	sp, #12
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]

}
 80085e8:	bf00      	nop
 80085ea:	370c      	adds	r7, #12
 80085ec:	46bd      	mov	sp, r7
 80085ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f2:	4770      	bx	lr

080085f4 <_ZN14imageContainer9setNumberEi>:
    imageContainer();
    virtual ~imageContainer() {}

    virtual void initialize();
	
	void setNumber(int no)
 80085f4:	b590      	push	{r4, r7, lr}
 80085f6:	b087      	sub	sp, #28
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
 80085fc:	6039      	str	r1, [r7, #0]
    {
        switch (no % 3)
 80085fe:	6839      	ldr	r1, [r7, #0]
 8008600:	4b21      	ldr	r3, [pc, #132]	; (8008688 <_ZN14imageContainer9setNumberEi+0x94>)
 8008602:	fb83 3201 	smull	r3, r2, r3, r1
 8008606:	17cb      	asrs	r3, r1, #31
 8008608:	1ad3      	subs	r3, r2, r3
 800860a:	461a      	mov	r2, r3
 800860c:	0052      	lsls	r2, r2, #1
 800860e:	441a      	add	r2, r3
 8008610:	1a8b      	subs	r3, r1, r2
 8008612:	2b01      	cmp	r3, #1
 8008614:	d014      	beq.n	8008640 <_ZN14imageContainer9setNumberEi+0x4c>
 8008616:	2b02      	cmp	r3, #2
 8008618:	d022      	beq.n	8008660 <_ZN14imageContainer9setNumberEi+0x6c>
 800861a:	2b00      	cmp	r3, #0
 800861c:	d000      	beq.n	8008620 <_ZN14imageContainer9setNumberEi+0x2c>
            break;
        case 2:
        image1.setBitmap(Bitmap(BITMAP_SNAPSHOTIMAGEHANDLER_214572791_2_REMOVEBG_PREVIEW_ID));
            break;
        }
    }
 800861e:	e02f      	b.n	8008680 <_ZN14imageContainer9setNumberEi+0x8c>
        image1.setBitmap(Bitmap(BITMAP_DOWNLOAD_REMOVEBG_PREVIEW_ID));
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8008626:	f107 030c 	add.w	r3, r7, #12
 800862a:	2107      	movs	r1, #7
 800862c:	4618      	mov	r0, r3
 800862e:	f7fb fef7 	bl	8004420 <_ZN8touchgfx6BitmapC1Et>
 8008632:	f107 030c 	add.w	r3, r7, #12
 8008636:	4619      	mov	r1, r3
 8008638:	4620      	mov	r0, r4
 800863a:	f00c fffb 	bl	8015634 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
            break;
 800863e:	e01f      	b.n	8008680 <_ZN14imageContainer9setNumberEi+0x8c>
        image1.setBitmap(Bitmap(BITMAP_DOWNLOAD1_REMOVEBG_PREVIEW_ID));
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8008646:	f107 0310 	add.w	r3, r7, #16
 800864a:	2106      	movs	r1, #6
 800864c:	4618      	mov	r0, r3
 800864e:	f7fb fee7 	bl	8004420 <_ZN8touchgfx6BitmapC1Et>
 8008652:	f107 0310 	add.w	r3, r7, #16
 8008656:	4619      	mov	r1, r3
 8008658:	4620      	mov	r0, r4
 800865a:	f00c ffeb 	bl	8015634 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
            break;
 800865e:	e00f      	b.n	8008680 <_ZN14imageContainer9setNumberEi+0x8c>
        image1.setBitmap(Bitmap(BITMAP_SNAPSHOTIMAGEHANDLER_214572791_2_REMOVEBG_PREVIEW_ID));
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8008666:	f107 0314 	add.w	r3, r7, #20
 800866a:	2108      	movs	r1, #8
 800866c:	4618      	mov	r0, r3
 800866e:	f7fb fed7 	bl	8004420 <_ZN8touchgfx6BitmapC1Et>
 8008672:	f107 0314 	add.w	r3, r7, #20
 8008676:	4619      	mov	r1, r3
 8008678:	4620      	mov	r0, r4
 800867a:	f00c ffdb 	bl	8015634 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
            break;
 800867e:	bf00      	nop
    }
 8008680:	bf00      	nop
 8008682:	371c      	adds	r7, #28
 8008684:	46bd      	mov	sp, r7
 8008686:	bd90      	pop	{r4, r7, pc}
 8008688:	55555556 	.word	0x55555556

0800868c <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 800868c:	b580      	push	{r7, lr}
 800868e:	b082      	sub	sp, #8
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
 8008694:	4a05      	ldr	r2, [pc, #20]	; (80086ac <_ZN11Screen1ViewD1Ev+0x20>)
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	601a      	str	r2, [r3, #0]
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	4618      	mov	r0, r3
 800869e:	f7fc fd0b 	bl	80050b8 <_ZN15Screen1ViewBaseD1Ev>
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	4618      	mov	r0, r3
 80086a6:	3708      	adds	r7, #8
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bd80      	pop	{r7, pc}
 80086ac:	08024be0 	.word	0x08024be0

080086b0 <_ZN11Screen1ViewD0Ev>:
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b082      	sub	sp, #8
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
 80086b8:	6878      	ldr	r0, [r7, #4]
 80086ba:	f7ff ffe7 	bl	800868c <_ZN11Screen1ViewD1Ev>
 80086be:	f643 51a4 	movw	r1, #15780	; 0x3da4
 80086c2:	6878      	ldr	r0, [r7, #4]
 80086c4:	f01a f869 	bl	802279a <_ZdlPvj>
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	4618      	mov	r0, r3
 80086cc:	3708      	adds	r7, #8
 80086ce:	46bd      	mov	sp, r7
 80086d0:	bd80      	pop	{r7, pc}
	...

080086d4 <_ZN11Screen1ViewC1Ev>:
#include <gui/screen1_screen/Screen1View.hpp>

Screen1View::Screen1View()
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b082      	sub	sp, #8
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	4618      	mov	r0, r3
 80086e0:	f7fc ff34 	bl	800554c <_ZN15Screen1ViewBaseC1Ev>
 80086e4:	4a03      	ldr	r2, [pc, #12]	; (80086f4 <_ZN11Screen1ViewC1Ev+0x20>)
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	601a      	str	r2, [r3, #0]
{

}
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	4618      	mov	r0, r3
 80086ee:	3708      	adds	r7, #8
 80086f0:	46bd      	mov	sp, r7
 80086f2:	bd80      	pop	{r7, pc}
 80086f4:	08024be0 	.word	0x08024be0

080086f8 <_ZN11Screen1View11setupScreenEv>:

void Screen1View::setupScreen()
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b082      	sub	sp, #8
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::setupScreen();
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	4618      	mov	r0, r3
 8008704:	f7fe ff88 	bl	8007618 <_ZN15Screen1ViewBase11setupScreenEv>
	Unicode::snprintf(Pump1ContentBuffer, PUMP1CONTENT_SIZE, "None");
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	f503 6366 	add.w	r3, r3, #3680	; 0xe60
 800870e:	4a10      	ldr	r2, [pc, #64]	; (8008750 <_ZN11Screen1View11setupScreenEv+0x58>)
 8008710:	2108      	movs	r1, #8
 8008712:	4618      	mov	r0, r3
 8008714:	f010 fa38 	bl	8018b88 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	Unicode::snprintf(Pump2ContentBuffer, PUMP2CONTENT_SIZE, "None");
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	f503 6367 	add.w	r3, r3, #3696	; 0xe70
 800871e:	4a0c      	ldr	r2, [pc, #48]	; (8008750 <_ZN11Screen1View11setupScreenEv+0x58>)
 8008720:	2108      	movs	r1, #8
 8008722:	4618      	mov	r0, r3
 8008724:	f010 fa30 	bl	8018b88 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	Unicode::snprintf(Pump3ContentBuffer, PUMP3CONTENT_SIZE, "None");
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	f503 6368 	add.w	r3, r3, #3712	; 0xe80
 800872e:	4a08      	ldr	r2, [pc, #32]	; (8008750 <_ZN11Screen1View11setupScreenEv+0x58>)
 8008730:	2108      	movs	r1, #8
 8008732:	4618      	mov	r0, r3
 8008734:	f010 fa28 	bl	8018b88 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	Unicode::snprintf(Pump4ContentBuffer, PUMP4CONTENT_SIZE, "None");
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	f503 6369 	add.w	r3, r3, #3728	; 0xe90
 800873e:	4a04      	ldr	r2, [pc, #16]	; (8008750 <_ZN11Screen1View11setupScreenEv+0x58>)
 8008740:	2108      	movs	r1, #8
 8008742:	4618      	mov	r0, r3
 8008744:	f010 fa20 	bl	8018b88 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
}
 8008748:	bf00      	nop
 800874a:	3708      	adds	r7, #8
 800874c:	46bd      	mov	sp, r7
 800874e:	bd80      	pop	{r7, pc}
 8008750:	08023eec 	.word	0x08023eec

08008754 <_ZN11Screen1View14tearDownScreenEv>:

void Screen1View::tearDownScreen()
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b082      	sub	sp, #8
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::tearDownScreen();
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	4618      	mov	r0, r3
 8008760:	f7fc f85a 	bl	8004818 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8008764:	bf00      	nop
 8008766:	3708      	adds	r7, #8
 8008768:	46bd      	mov	sp, r7
 800876a:	bd80      	pop	{r7, pc}

0800876c <_ZN11Screen1View20ScrollListUpdateItemER14imageContainers>:

void Screen1View::ScrollListUpdateItem(imageContainer& item, int16_t itemIndex)
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b084      	sub	sp, #16
 8008770:	af00      	add	r7, sp, #0
 8008772:	60f8      	str	r0, [r7, #12]
 8008774:	60b9      	str	r1, [r7, #8]
 8008776:	4613      	mov	r3, r2
 8008778:	80fb      	strh	r3, [r7, #6]
    item.setNumber(itemIndex);
 800877a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800877e:	4619      	mov	r1, r3
 8008780:	68b8      	ldr	r0, [r7, #8]
 8008782:	f7ff ff37 	bl	80085f4 <_ZN14imageContainer9setNumberEi>
}
 8008786:	bf00      	nop
 8008788:	3710      	adds	r7, #16
 800878a:	46bd      	mov	sp, r7
 800878c:	bd80      	pop	{r7, pc}

0800878e <_ZN11Screen1View9PourDrinkEv>:

void Screen1View::PourDrink()
{
 800878e:	b580      	push	{r7, lr}
 8008790:	b082      	sub	sp, #8
 8008792:	af00      	add	r7, sp, #0
 8008794:	6078      	str	r0, [r7, #4]
	//Hide "Pour" button
	PourButton.setVisible(false);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	33a0      	adds	r3, #160	; 0xa0
 800879a:	2100      	movs	r1, #0
 800879c:	4618      	mov	r0, r3
 800879e:	f7fb ff59 	bl	8004654 <_ZN8touchgfx8Drawable10setVisibleEb>
	PourButton.invalidate();
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	33a0      	adds	r3, #160	; 0xa0
 80087a6:	4618      	mov	r0, r3
 80087a8:	f00e fd56 	bl	8017258 <_ZNK8touchgfx8Drawable10invalidateEv>
	
	//Hide Settings button
	SettingsButton.setVisible(false);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	f503 7343 	add.w	r3, r3, #780	; 0x30c
 80087b2:	2100      	movs	r1, #0
 80087b4:	4618      	mov	r0, r3
 80087b6:	f7fb ff4d 	bl	8004654 <_ZN8touchgfx8Drawable10setVisibleEb>
	SettingsButton.invalidate();
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	f503 7343 	add.w	r3, r3, #780	; 0x30c
 80087c0:	4618      	mov	r0, r3
 80087c2:	f00e fd49 	bl	8017258 <_ZNK8touchgfx8Drawable10invalidateEv>
	
	//Show progress bar
	ProgressBar.setVisible(true);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	f503 7350 	add.w	r3, r3, #832	; 0x340
 80087cc:	2101      	movs	r1, #1
 80087ce:	4618      	mov	r0, r3
 80087d0:	f7fb ff40 	bl	8004654 <_ZN8touchgfx8Drawable10setVisibleEb>
	ProgressBar.invalidate();
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	f503 7350 	add.w	r3, r3, #832	; 0x340
 80087da:	4618      	mov	r0, r3
 80087dc:	f00e fd3c 	bl	8017258 <_ZNK8touchgfx8Drawable10invalidateEv>
	
	PourState = true;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	f503 5376 	add.w	r3, r3, #15744	; 0x3d80
 80087e6:	3320      	adds	r3, #32
 80087e8:	2201      	movs	r2, #1
 80087ea:	701a      	strb	r2, [r3, #0]
}
 80087ec:	bf00      	nop
 80087ee:	3708      	adds	r7, #8
 80087f0:	46bd      	mov	sp, r7
 80087f2:	bd80      	pop	{r7, pc}

080087f4 <_ZN11Screen1View7FlowSimEv>:

void Screen1View::FlowSim()
{
 80087f4:	b590      	push	{r4, r7, lr}
 80087f6:	b083      	sub	sp, #12
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
	if (PourState)
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	f503 5376 	add.w	r3, r3, #15744	; 0x3d80
 8008802:	3320      	adds	r3, #32
 8008804:	781b      	ldrb	r3, [r3, #0]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d050      	beq.n	80088ac <_ZN11Screen1View7FlowSimEv+0xb8>
	{
		ProgressBar.setValue(ProgressBar.getProgress() + 5);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	f503 7450 	add.w	r4, r3, #832	; 0x340
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	f503 7350 	add.w	r3, r3, #832	; 0x340
 8008816:	2164      	movs	r1, #100	; 0x64
 8008818:	4618      	mov	r0, r3
 800881a:	f009 ffb9 	bl	8012790 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>
 800881e:	4603      	mov	r3, r0
 8008820:	3305      	adds	r3, #5
 8008822:	4619      	mov	r1, r3
 8008824:	4620      	mov	r0, r4
 8008826:	f009 fe93 	bl	8012550 <_ZN8touchgfx11BoxProgress8setValueEi>
		if (ProgressBar.getProgress() >= 100)
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	f503 7350 	add.w	r3, r3, #832	; 0x340
 8008830:	2164      	movs	r1, #100	; 0x64
 8008832:	4618      	mov	r0, r3
 8008834:	f009 ffac 	bl	8012790 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>
 8008838:	4603      	mov	r3, r0
 800883a:	2b63      	cmp	r3, #99	; 0x63
 800883c:	bf8c      	ite	hi
 800883e:	2301      	movhi	r3, #1
 8008840:	2300      	movls	r3, #0
 8008842:	b2db      	uxtb	r3, r3
 8008844:	2b00      	cmp	r3, #0
 8008846:	d031      	beq.n	80088ac <_ZN11Screen1View7FlowSimEv+0xb8>
		{
			//Show "Pour" button
			PourButton.setVisible(true);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	33a0      	adds	r3, #160	; 0xa0
 800884c:	2101      	movs	r1, #1
 800884e:	4618      	mov	r0, r3
 8008850:	f7fb ff00 	bl	8004654 <_ZN8touchgfx8Drawable10setVisibleEb>
			PourButton.invalidate();
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	33a0      	adds	r3, #160	; 0xa0
 8008858:	4618      	mov	r0, r3
 800885a:	f00e fcfd 	bl	8017258 <_ZNK8touchgfx8Drawable10invalidateEv>
			
			//Show settings button
			SettingsButton.setVisible(true);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	f503 7343 	add.w	r3, r3, #780	; 0x30c
 8008864:	2101      	movs	r1, #1
 8008866:	4618      	mov	r0, r3
 8008868:	f7fb fef4 	bl	8004654 <_ZN8touchgfx8Drawable10setVisibleEb>
			SettingsButton.invalidate();
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	f503 7343 	add.w	r3, r3, #780	; 0x30c
 8008872:	4618      	mov	r0, r3
 8008874:	f00e fcf0 	bl	8017258 <_ZNK8touchgfx8Drawable10invalidateEv>
			
			//Hide progress bar
			ProgressBar.setValue(0);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	f503 7350 	add.w	r3, r3, #832	; 0x340
 800887e:	2100      	movs	r1, #0
 8008880:	4618      	mov	r0, r3
 8008882:	f009 fe65 	bl	8012550 <_ZN8touchgfx11BoxProgress8setValueEi>
			ProgressBar.setVisible(false);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	f503 7350 	add.w	r3, r3, #832	; 0x340
 800888c:	2100      	movs	r1, #0
 800888e:	4618      	mov	r0, r3
 8008890:	f7fb fee0 	bl	8004654 <_ZN8touchgfx8Drawable10setVisibleEb>
			ProgressBar.invalidate();
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	f503 7350 	add.w	r3, r3, #832	; 0x340
 800889a:	4618      	mov	r0, r3
 800889c:	f00e fcdc 	bl	8017258 <_ZNK8touchgfx8Drawable10invalidateEv>
			
			PourState = false;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	f503 5376 	add.w	r3, r3, #15744	; 0x3d80
 80088a6:	3320      	adds	r3, #32
 80088a8:	2200      	movs	r2, #0
 80088aa:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80088ac:	bf00      	nop
 80088ae:	370c      	adds	r7, #12
 80088b0:	46bd      	mov	sp, r7
 80088b2:	bd90      	pop	{r4, r7, pc}

080088b4 <_ZN11Screen1View14SettingsScreenEv>:

void Screen1View::SettingsScreen()
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b082      	sub	sp, #8
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
	HideMainMenu();
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	3380      	adds	r3, #128	; 0x80
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	6878      	ldr	r0, [r7, #4]
 80088c6:	4798      	blx	r3
	
	ShowSettings();
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	338c      	adds	r3, #140	; 0x8c
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	6878      	ldr	r0, [r7, #4]
 80088d2:	4798      	blx	r3
}
 80088d4:	bf00      	nop
 80088d6:	3708      	adds	r7, #8
 80088d8:	46bd      	mov	sp, r7
 80088da:	bd80      	pop	{r7, pc}

080088dc <_ZN11Screen1View12ExitSettingsEv>:

void Screen1View::ExitSettings()
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b082      	sub	sp, #8
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
	ShowMainMenu();
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	3384      	adds	r3, #132	; 0x84
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	6878      	ldr	r0, [r7, #4]
 80088ee:	4798      	blx	r3
	
	HideSettings();
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	3388      	adds	r3, #136	; 0x88
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	6878      	ldr	r0, [r7, #4]
 80088fa:	4798      	blx	r3
}
 80088fc:	bf00      	nop
 80088fe:	3708      	adds	r7, #8
 8008900:	46bd      	mov	sp, r7
 8008902:	bd80      	pop	{r7, pc}

08008904 <_ZN11Screen1View10Click250mLEv>:

void Screen1View::Click250mL()
{
 8008904:	b580      	push	{r7, lr}
 8008906:	b082      	sub	sp, #8
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
	Button250mL.setAlpha(255);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008912:	21ff      	movs	r1, #255	; 0xff
 8008914:	4618      	mov	r0, r3
 8008916:	f7fc f8bd 	bl	8004a94 <_ZN8touchgfx6Button8setAlphaEh>
	Button500mL.setAlpha(135);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	f203 4344 	addw	r3, r3, #1092	; 0x444
 8008920:	2187      	movs	r1, #135	; 0x87
 8008922:	4618      	mov	r0, r3
 8008924:	f7fc f8b6 	bl	8004a94 <_ZN8touchgfx6Button8setAlphaEh>
	Button750mL.setAlpha(135);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	f503 6391 	add.w	r3, r3, #1160	; 0x488
 800892e:	2187      	movs	r1, #135	; 0x87
 8008930:	4618      	mov	r0, r3
 8008932:	f7fc f8af 	bl	8004a94 <_ZN8touchgfx6Button8setAlphaEh>
	Button250mL.invalidate();
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800893c:	4618      	mov	r0, r3
 800893e:	f00e fc8b 	bl	8017258 <_ZNK8touchgfx8Drawable10invalidateEv>
	Button500mL.invalidate();
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	f203 4344 	addw	r3, r3, #1092	; 0x444
 8008948:	4618      	mov	r0, r3
 800894a:	f00e fc85 	bl	8017258 <_ZNK8touchgfx8Drawable10invalidateEv>
	Button750mL.invalidate();
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	f503 6391 	add.w	r3, r3, #1160	; 0x488
 8008954:	4618      	mov	r0, r3
 8008956:	f00e fc7f 	bl	8017258 <_ZNK8touchgfx8Drawable10invalidateEv>
	
	//ChangeSize(_250ML);
}
 800895a:	bf00      	nop
 800895c:	3708      	adds	r7, #8
 800895e:	46bd      	mov	sp, r7
 8008960:	bd80      	pop	{r7, pc}

08008962 <_ZN11Screen1View10Click500mLEv>:

void Screen1View::Click500mL()
{
 8008962:	b580      	push	{r7, lr}
 8008964:	b082      	sub	sp, #8
 8008966:	af00      	add	r7, sp, #0
 8008968:	6078      	str	r0, [r7, #4]
	Button250mL.setAlpha(135);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008970:	2187      	movs	r1, #135	; 0x87
 8008972:	4618      	mov	r0, r3
 8008974:	f7fc f88e 	bl	8004a94 <_ZN8touchgfx6Button8setAlphaEh>
	Button500mL.setAlpha(255);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	f203 4344 	addw	r3, r3, #1092	; 0x444
 800897e:	21ff      	movs	r1, #255	; 0xff
 8008980:	4618      	mov	r0, r3
 8008982:	f7fc f887 	bl	8004a94 <_ZN8touchgfx6Button8setAlphaEh>
	Button750mL.setAlpha(135);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	f503 6391 	add.w	r3, r3, #1160	; 0x488
 800898c:	2187      	movs	r1, #135	; 0x87
 800898e:	4618      	mov	r0, r3
 8008990:	f7fc f880 	bl	8004a94 <_ZN8touchgfx6Button8setAlphaEh>
	Button250mL.invalidate();
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800899a:	4618      	mov	r0, r3
 800899c:	f00e fc5c 	bl	8017258 <_ZNK8touchgfx8Drawable10invalidateEv>
	Button500mL.invalidate();
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	f203 4344 	addw	r3, r3, #1092	; 0x444
 80089a6:	4618      	mov	r0, r3
 80089a8:	f00e fc56 	bl	8017258 <_ZNK8touchgfx8Drawable10invalidateEv>
	Button750mL.invalidate();
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	f503 6391 	add.w	r3, r3, #1160	; 0x488
 80089b2:	4618      	mov	r0, r3
 80089b4:	f00e fc50 	bl	8017258 <_ZNK8touchgfx8Drawable10invalidateEv>
	
	//ChangeSize(_500ML);
}
 80089b8:	bf00      	nop
 80089ba:	3708      	adds	r7, #8
 80089bc:	46bd      	mov	sp, r7
 80089be:	bd80      	pop	{r7, pc}

080089c0 <_ZN11Screen1View10Click750mLEv>:

void Screen1View::Click750mL()
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b082      	sub	sp, #8
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
	Button250mL.setAlpha(135);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80089ce:	2187      	movs	r1, #135	; 0x87
 80089d0:	4618      	mov	r0, r3
 80089d2:	f7fc f85f 	bl	8004a94 <_ZN8touchgfx6Button8setAlphaEh>
	Button500mL.setAlpha(135);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	f203 4344 	addw	r3, r3, #1092	; 0x444
 80089dc:	2187      	movs	r1, #135	; 0x87
 80089de:	4618      	mov	r0, r3
 80089e0:	f7fc f858 	bl	8004a94 <_ZN8touchgfx6Button8setAlphaEh>
	Button750mL.setAlpha(255);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	f503 6391 	add.w	r3, r3, #1160	; 0x488
 80089ea:	21ff      	movs	r1, #255	; 0xff
 80089ec:	4618      	mov	r0, r3
 80089ee:	f7fc f851 	bl	8004a94 <_ZN8touchgfx6Button8setAlphaEh>
	Button250mL.invalidate();
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80089f8:	4618      	mov	r0, r3
 80089fa:	f00e fc2d 	bl	8017258 <_ZNK8touchgfx8Drawable10invalidateEv>
	Button500mL.invalidate();
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	f203 4344 	addw	r3, r3, #1092	; 0x444
 8008a04:	4618      	mov	r0, r3
 8008a06:	f00e fc27 	bl	8017258 <_ZNK8touchgfx8Drawable10invalidateEv>
	Button750mL.invalidate();
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	f503 6391 	add.w	r3, r3, #1160	; 0x488
 8008a10:	4618      	mov	r0, r3
 8008a12:	f00e fc21 	bl	8017258 <_ZNK8touchgfx8Drawable10invalidateEv>
	
	//ChangeSize(_750ML);
}
 8008a16:	bf00      	nop
 8008a18:	3708      	adds	r7, #8
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	bd80      	pop	{r7, pc}
	...

08008a20 <_ZN11Screen1View11ChangePump1Ev>:

void Screen1View::ChangePump1()
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b082      	sub	sp, #8
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
	switch (Pump1ContentBuffer[0])
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	f8b3 3e60 	ldrh.w	r3, [r3, #3680]	; 0xe60
 8008a2e:	3b47      	subs	r3, #71	; 0x47
 8008a30:	2b10      	cmp	r3, #16
 8008a32:	d862      	bhi.n	8008afa <_ZN11Screen1View11ChangePump1Ev+0xda>
 8008a34:	a201      	add	r2, pc, #4	; (adr r2, 8008a3c <_ZN11Screen1View11ChangePump1Ev+0x1c>)
 8008a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a3a:	bf00      	nop
 8008a3c:	08008ab1 	.word	0x08008ab1
 8008a40:	08008afb 	.word	0x08008afb
 8008a44:	08008afb 	.word	0x08008afb
 8008a48:	08008a91 	.word	0x08008a91
 8008a4c:	08008afb 	.word	0x08008afb
 8008a50:	08008afb 	.word	0x08008afb
 8008a54:	08008afb 	.word	0x08008afb
 8008a58:	08008a81 	.word	0x08008a81
 8008a5c:	08008afb 	.word	0x08008afb
 8008a60:	08008afb 	.word	0x08008afb
 8008a64:	08008afb 	.word	0x08008afb
 8008a68:	08008aeb 	.word	0x08008aeb
 8008a6c:	08008afb 	.word	0x08008afb
 8008a70:	08008ac1 	.word	0x08008ac1
 8008a74:	08008afb 	.word	0x08008afb
 8008a78:	08008adb 	.word	0x08008adb
 8008a7c:	08008aa1 	.word	0x08008aa1
	{
		case 'N':
			SelectNone.setAlpha(255);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	f603 5394 	addw	r3, r3, #3476	; 0xd94
 8008a86:	21ff      	movs	r1, #255	; 0xff
 8008a88:	4618      	mov	r0, r3
 8008a8a:	f7fc f803 	bl	8004a94 <_ZN8touchgfx6Button8setAlphaEh>
			break;
 8008a8e:	e037      	b.n	8008b00 <_ZN11Screen1View11ChangePump1Ev+0xe0>
			
		case 'J':
			SelectJuice.setAlpha(255);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	f603 631c 	addw	r3, r3, #3612	; 0xe1c
 8008a96:	21ff      	movs	r1, #255	; 0xff
 8008a98:	4618      	mov	r0, r3
 8008a9a:	f7fb fffb 	bl	8004a94 <_ZN8touchgfx6Button8setAlphaEh>
			break;
 8008a9e:	e02f      	b.n	8008b00 <_ZN11Screen1View11ChangePump1Ev+0xe0>
			
		case 'W':
			SelectWater.setAlpha(255);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	f603 53d8 	addw	r3, r3, #3544	; 0xdd8
 8008aa6:	21ff      	movs	r1, #255	; 0xff
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	f7fb fff3 	bl	8004a94 <_ZN8touchgfx6Button8setAlphaEh>
			break;
 8008aae:	e027      	b.n	8008b00 <_ZN11Screen1View11ChangePump1Ev+0xe0>
			
		case 'G':
			SelectGin.setAlpha(255);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	f503 6355 	add.w	r3, r3, #3408	; 0xd50
 8008ab6:	21ff      	movs	r1, #255	; 0xff
 8008ab8:	4618      	mov	r0, r3
 8008aba:	f7fb ffeb 	bl	8004a94 <_ZN8touchgfx6Button8setAlphaEh>
			break;
 8008abe:	e01f      	b.n	8008b00 <_ZN11Screen1View11ChangePump1Ev+0xe0>
			
		case 'T':
			if (Pump1ContentBuffer[1] == 'e')
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	f8b3 3e62 	ldrh.w	r3, [r3, #3682]	; 0xe62
 8008ac6:	2b65      	cmp	r3, #101	; 0x65
 8008ac8:	d119      	bne.n	8008afe <_ZN11Screen1View11ChangePump1Ev+0xde>
			{
				SelectTequila.setAlpha(255);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	f603 43c8 	addw	r3, r3, #3272	; 0xcc8
 8008ad0:	21ff      	movs	r1, #255	; 0xff
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	f7fb ffde 	bl	8004a94 <_ZN8touchgfx6Button8setAlphaEh>
			}
			break;
 8008ad8:	e011      	b.n	8008afe <_ZN11Screen1View11ChangePump1Ev+0xde>
			
		case 'V':
			SelectVodka.setAlpha(255);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	f603 4384 	addw	r3, r3, #3204	; 0xc84
 8008ae0:	21ff      	movs	r1, #255	; 0xff
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	f7fb ffd6 	bl	8004a94 <_ZN8touchgfx6Button8setAlphaEh>
			break;
 8008ae8:	e00a      	b.n	8008b00 <_ZN11Screen1View11ChangePump1Ev+0xe0>
			
		case 'R':
			SelectRum.setAlpha(255);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	f603 530c 	addw	r3, r3, #3340	; 0xd0c
 8008af0:	21ff      	movs	r1, #255	; 0xff
 8008af2:	4618      	mov	r0, r3
 8008af4:	f7fb ffce 	bl	8004a94 <_ZN8touchgfx6Button8setAlphaEh>
			break;
 8008af8:	e002      	b.n	8008b00 <_ZN11Screen1View11ChangePump1Ev+0xe0>
			
		default:
			break;
 8008afa:	bf00      	nop
 8008afc:	e000      	b.n	8008b00 <_ZN11Screen1View11ChangePump1Ev+0xe0>
			break;
 8008afe:	bf00      	nop
	}
	
	HideSettings();
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	3388      	adds	r3, #136	; 0x88
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	6878      	ldr	r0, [r7, #4]
 8008b0a:	4798      	blx	r3
	ShowPumpSetup();
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	3390      	adds	r3, #144	; 0x90
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	6878      	ldr	r0, [r7, #4]
 8008b16:	4798      	blx	r3
		
	PumpID = 1;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	f503 5376 	add.w	r3, r3, #15744	; 0x3d80
 8008b1e:	3321      	adds	r3, #33	; 0x21
 8008b20:	2201      	movs	r2, #1
 8008b22:	701a      	strb	r2, [r3, #0]
}
 8008b24:	bf00      	nop
 8008b26:	3708      	adds	r7, #8
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bd80      	pop	{r7, pc}

08008b2c <_ZN11Screen1View11ChangePump2Ev>:

void Screen1View::ChangePump2()
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b082      	sub	sp, #8
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
	switch (Pump2ContentBuffer[0])
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	f8b3 3e70 	ldrh.w	r3, [r3, #3696]	; 0xe70
 8008b3a:	3b47      	subs	r3, #71	; 0x47
 8008b3c:	2b10      	cmp	r3, #16
 8008b3e:	d862      	bhi.n	8008c06 <_ZN11Screen1View11ChangePump2Ev+0xda>
 8008b40:	a201      	add	r2, pc, #4	; (adr r2, 8008b48 <_ZN11Screen1View11ChangePump2Ev+0x1c>)
 8008b42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b46:	bf00      	nop
 8008b48:	08008bbd 	.word	0x08008bbd
 8008b4c:	08008c07 	.word	0x08008c07
 8008b50:	08008c07 	.word	0x08008c07
 8008b54:	08008b9d 	.word	0x08008b9d
 8008b58:	08008c07 	.word	0x08008c07
 8008b5c:	08008c07 	.word	0x08008c07
 8008b60:	08008c07 	.word	0x08008c07
 8008b64:	08008b8d 	.word	0x08008b8d
 8008b68:	08008c07 	.word	0x08008c07
 8008b6c:	08008c07 	.word	0x08008c07
 8008b70:	08008c07 	.word	0x08008c07
 8008b74:	08008bf7 	.word	0x08008bf7
 8008b78:	08008c07 	.word	0x08008c07
 8008b7c:	08008bcd 	.word	0x08008bcd
 8008b80:	08008c07 	.word	0x08008c07
 8008b84:	08008be7 	.word	0x08008be7
 8008b88:	08008bad 	.word	0x08008bad
	{
		case 'N':
			SelectNone.setAlpha(255);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	f603 5394 	addw	r3, r3, #3476	; 0xd94
 8008b92:	21ff      	movs	r1, #255	; 0xff
 8008b94:	4618      	mov	r0, r3
 8008b96:	f7fb ff7d 	bl	8004a94 <_ZN8touchgfx6Button8setAlphaEh>
			break;
 8008b9a:	e037      	b.n	8008c0c <_ZN11Screen1View11ChangePump2Ev+0xe0>
			
		case 'J':
			SelectJuice.setAlpha(255);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	f603 631c 	addw	r3, r3, #3612	; 0xe1c
 8008ba2:	21ff      	movs	r1, #255	; 0xff
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	f7fb ff75 	bl	8004a94 <_ZN8touchgfx6Button8setAlphaEh>
			break;
 8008baa:	e02f      	b.n	8008c0c <_ZN11Screen1View11ChangePump2Ev+0xe0>
			
		case 'W':
			SelectWater.setAlpha(255);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	f603 53d8 	addw	r3, r3, #3544	; 0xdd8
 8008bb2:	21ff      	movs	r1, #255	; 0xff
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	f7fb ff6d 	bl	8004a94 <_ZN8touchgfx6Button8setAlphaEh>
			break;
 8008bba:	e027      	b.n	8008c0c <_ZN11Screen1View11ChangePump2Ev+0xe0>
			
		case 'G':
			SelectGin.setAlpha(255);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	f503 6355 	add.w	r3, r3, #3408	; 0xd50
 8008bc2:	21ff      	movs	r1, #255	; 0xff
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	f7fb ff65 	bl	8004a94 <_ZN8touchgfx6Button8setAlphaEh>
			break;
 8008bca:	e01f      	b.n	8008c0c <_ZN11Screen1View11ChangePump2Ev+0xe0>
			
		case 'T':
			if (Pump2ContentBuffer[1] == 'e')
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	f8b3 3e72 	ldrh.w	r3, [r3, #3698]	; 0xe72
 8008bd2:	2b65      	cmp	r3, #101	; 0x65
 8008bd4:	d119      	bne.n	8008c0a <_ZN11Screen1View11ChangePump2Ev+0xde>
			{
				SelectTequila.setAlpha(255);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	f603 43c8 	addw	r3, r3, #3272	; 0xcc8
 8008bdc:	21ff      	movs	r1, #255	; 0xff
 8008bde:	4618      	mov	r0, r3
 8008be0:	f7fb ff58 	bl	8004a94 <_ZN8touchgfx6Button8setAlphaEh>
			}
			break;
 8008be4:	e011      	b.n	8008c0a <_ZN11Screen1View11ChangePump2Ev+0xde>
			
		case 'V':
			SelectVodka.setAlpha(255);
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	f603 4384 	addw	r3, r3, #3204	; 0xc84
 8008bec:	21ff      	movs	r1, #255	; 0xff
 8008bee:	4618      	mov	r0, r3
 8008bf0:	f7fb ff50 	bl	8004a94 <_ZN8touchgfx6Button8setAlphaEh>
			break;
 8008bf4:	e00a      	b.n	8008c0c <_ZN11Screen1View11ChangePump2Ev+0xe0>
			
		case 'R':
			SelectRum.setAlpha(255);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	f603 530c 	addw	r3, r3, #3340	; 0xd0c
 8008bfc:	21ff      	movs	r1, #255	; 0xff
 8008bfe:	4618      	mov	r0, r3
 8008c00:	f7fb ff48 	bl	8004a94 <_ZN8touchgfx6Button8setAlphaEh>
			break;
 8008c04:	e002      	b.n	8008c0c <_ZN11Screen1View11ChangePump2Ev+0xe0>
			
		default:
			break;
 8008c06:	bf00      	nop
 8008c08:	e000      	b.n	8008c0c <_ZN11Screen1View11ChangePump2Ev+0xe0>
			break;
 8008c0a:	bf00      	nop
	}
	
	HideSettings();
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	3388      	adds	r3, #136	; 0x88
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	6878      	ldr	r0, [r7, #4]
 8008c16:	4798      	blx	r3
	ShowPumpSetup();
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	3390      	adds	r3, #144	; 0x90
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	6878      	ldr	r0, [r7, #4]
 8008c22:	4798      	blx	r3
	
	PumpID = 2;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	f503 5376 	add.w	r3, r3, #15744	; 0x3d80
 8008c2a:	3321      	adds	r3, #33	; 0x21
 8008c2c:	2202      	movs	r2, #2
 8008c2e:	701a      	strb	r2, [r3, #0]
}
 8008c30:	bf00      	nop
 8008c32:	3708      	adds	r7, #8
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bd80      	pop	{r7, pc}

08008c38 <_ZN11Screen1View11ChangePump3Ev>:

void Screen1View::ChangePump3()
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b082      	sub	sp, #8
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
	switch (Pump3ContentBuffer[0])
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	f8b3 3e80 	ldrh.w	r3, [r3, #3712]	; 0xe80
 8008c46:	3b47      	subs	r3, #71	; 0x47
 8008c48:	2b10      	cmp	r3, #16
 8008c4a:	d862      	bhi.n	8008d12 <_ZN11Screen1View11ChangePump3Ev+0xda>
 8008c4c:	a201      	add	r2, pc, #4	; (adr r2, 8008c54 <_ZN11Screen1View11ChangePump3Ev+0x1c>)
 8008c4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c52:	bf00      	nop
 8008c54:	08008cc9 	.word	0x08008cc9
 8008c58:	08008d13 	.word	0x08008d13
 8008c5c:	08008d13 	.word	0x08008d13
 8008c60:	08008ca9 	.word	0x08008ca9
 8008c64:	08008d13 	.word	0x08008d13
 8008c68:	08008d13 	.word	0x08008d13
 8008c6c:	08008d13 	.word	0x08008d13
 8008c70:	08008c99 	.word	0x08008c99
 8008c74:	08008d13 	.word	0x08008d13
 8008c78:	08008d13 	.word	0x08008d13
 8008c7c:	08008d13 	.word	0x08008d13
 8008c80:	08008d03 	.word	0x08008d03
 8008c84:	08008d13 	.word	0x08008d13
 8008c88:	08008cd9 	.word	0x08008cd9
 8008c8c:	08008d13 	.word	0x08008d13
 8008c90:	08008cf3 	.word	0x08008cf3
 8008c94:	08008cb9 	.word	0x08008cb9
	{
		case 'N':
			SelectNone.setAlpha(255);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	f603 5394 	addw	r3, r3, #3476	; 0xd94
 8008c9e:	21ff      	movs	r1, #255	; 0xff
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	f7fb fef7 	bl	8004a94 <_ZN8touchgfx6Button8setAlphaEh>
			break;
 8008ca6:	e037      	b.n	8008d18 <_ZN11Screen1View11ChangePump3Ev+0xe0>
			
		case 'J':
			SelectJuice.setAlpha(255);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	f603 631c 	addw	r3, r3, #3612	; 0xe1c
 8008cae:	21ff      	movs	r1, #255	; 0xff
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	f7fb feef 	bl	8004a94 <_ZN8touchgfx6Button8setAlphaEh>
			break;
 8008cb6:	e02f      	b.n	8008d18 <_ZN11Screen1View11ChangePump3Ev+0xe0>
			
		case 'W':
			SelectWater.setAlpha(255);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	f603 53d8 	addw	r3, r3, #3544	; 0xdd8
 8008cbe:	21ff      	movs	r1, #255	; 0xff
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	f7fb fee7 	bl	8004a94 <_ZN8touchgfx6Button8setAlphaEh>
			break;
 8008cc6:	e027      	b.n	8008d18 <_ZN11Screen1View11ChangePump3Ev+0xe0>
			
		case 'G':
			SelectGin.setAlpha(255);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	f503 6355 	add.w	r3, r3, #3408	; 0xd50
 8008cce:	21ff      	movs	r1, #255	; 0xff
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	f7fb fedf 	bl	8004a94 <_ZN8touchgfx6Button8setAlphaEh>
			break;
 8008cd6:	e01f      	b.n	8008d18 <_ZN11Screen1View11ChangePump3Ev+0xe0>
			
		case 'T':
			if (Pump3ContentBuffer[1] == 'e')
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	f8b3 3e82 	ldrh.w	r3, [r3, #3714]	; 0xe82
 8008cde:	2b65      	cmp	r3, #101	; 0x65
 8008ce0:	d119      	bne.n	8008d16 <_ZN11Screen1View11ChangePump3Ev+0xde>
			{
				SelectTequila.setAlpha(255);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	f603 43c8 	addw	r3, r3, #3272	; 0xcc8
 8008ce8:	21ff      	movs	r1, #255	; 0xff
 8008cea:	4618      	mov	r0, r3
 8008cec:	f7fb fed2 	bl	8004a94 <_ZN8touchgfx6Button8setAlphaEh>
			}
			break;
 8008cf0:	e011      	b.n	8008d16 <_ZN11Screen1View11ChangePump3Ev+0xde>
			
		case 'V':
			SelectVodka.setAlpha(255);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	f603 4384 	addw	r3, r3, #3204	; 0xc84
 8008cf8:	21ff      	movs	r1, #255	; 0xff
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	f7fb feca 	bl	8004a94 <_ZN8touchgfx6Button8setAlphaEh>
			break;
 8008d00:	e00a      	b.n	8008d18 <_ZN11Screen1View11ChangePump3Ev+0xe0>
			
		case 'R':
			SelectRum.setAlpha(255);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	f603 530c 	addw	r3, r3, #3340	; 0xd0c
 8008d08:	21ff      	movs	r1, #255	; 0xff
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	f7fb fec2 	bl	8004a94 <_ZN8touchgfx6Button8setAlphaEh>
			break;
 8008d10:	e002      	b.n	8008d18 <_ZN11Screen1View11ChangePump3Ev+0xe0>
			
		default:
			break;
 8008d12:	bf00      	nop
 8008d14:	e000      	b.n	8008d18 <_ZN11Screen1View11ChangePump3Ev+0xe0>
			break;
 8008d16:	bf00      	nop
	}
	
	HideSettings();
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	3388      	adds	r3, #136	; 0x88
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	6878      	ldr	r0, [r7, #4]
 8008d22:	4798      	blx	r3
	ShowPumpSetup();
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	3390      	adds	r3, #144	; 0x90
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	6878      	ldr	r0, [r7, #4]
 8008d2e:	4798      	blx	r3
	
	PumpID = 3;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	f503 5376 	add.w	r3, r3, #15744	; 0x3d80
 8008d36:	3321      	adds	r3, #33	; 0x21
 8008d38:	2203      	movs	r2, #3
 8008d3a:	701a      	strb	r2, [r3, #0]
}
 8008d3c:	bf00      	nop
 8008d3e:	3708      	adds	r7, #8
 8008d40:	46bd      	mov	sp, r7
 8008d42:	bd80      	pop	{r7, pc}

08008d44 <_ZN11Screen1View11ChangePump4Ev>:

void Screen1View::ChangePump4()
{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b082      	sub	sp, #8
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
	switch (Pump4ContentBuffer[0])
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	f8b3 3e90 	ldrh.w	r3, [r3, #3728]	; 0xe90
 8008d52:	3b47      	subs	r3, #71	; 0x47
 8008d54:	2b10      	cmp	r3, #16
 8008d56:	d862      	bhi.n	8008e1e <_ZN11Screen1View11ChangePump4Ev+0xda>
 8008d58:	a201      	add	r2, pc, #4	; (adr r2, 8008d60 <_ZN11Screen1View11ChangePump4Ev+0x1c>)
 8008d5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d5e:	bf00      	nop
 8008d60:	08008dd5 	.word	0x08008dd5
 8008d64:	08008e1f 	.word	0x08008e1f
 8008d68:	08008e1f 	.word	0x08008e1f
 8008d6c:	08008db5 	.word	0x08008db5
 8008d70:	08008e1f 	.word	0x08008e1f
 8008d74:	08008e1f 	.word	0x08008e1f
 8008d78:	08008e1f 	.word	0x08008e1f
 8008d7c:	08008da5 	.word	0x08008da5
 8008d80:	08008e1f 	.word	0x08008e1f
 8008d84:	08008e1f 	.word	0x08008e1f
 8008d88:	08008e1f 	.word	0x08008e1f
 8008d8c:	08008e0f 	.word	0x08008e0f
 8008d90:	08008e1f 	.word	0x08008e1f
 8008d94:	08008de5 	.word	0x08008de5
 8008d98:	08008e1f 	.word	0x08008e1f
 8008d9c:	08008dff 	.word	0x08008dff
 8008da0:	08008dc5 	.word	0x08008dc5
	{
		case 'N':
			SelectNone.setAlpha(255);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	f603 5394 	addw	r3, r3, #3476	; 0xd94
 8008daa:	21ff      	movs	r1, #255	; 0xff
 8008dac:	4618      	mov	r0, r3
 8008dae:	f7fb fe71 	bl	8004a94 <_ZN8touchgfx6Button8setAlphaEh>
			break;
 8008db2:	e037      	b.n	8008e24 <_ZN11Screen1View11ChangePump4Ev+0xe0>
			
		case 'J':
			SelectJuice.setAlpha(255);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	f603 631c 	addw	r3, r3, #3612	; 0xe1c
 8008dba:	21ff      	movs	r1, #255	; 0xff
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	f7fb fe69 	bl	8004a94 <_ZN8touchgfx6Button8setAlphaEh>
			break;
 8008dc2:	e02f      	b.n	8008e24 <_ZN11Screen1View11ChangePump4Ev+0xe0>
			
		case 'W':
			SelectWater.setAlpha(255);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	f603 53d8 	addw	r3, r3, #3544	; 0xdd8
 8008dca:	21ff      	movs	r1, #255	; 0xff
 8008dcc:	4618      	mov	r0, r3
 8008dce:	f7fb fe61 	bl	8004a94 <_ZN8touchgfx6Button8setAlphaEh>
			break;
 8008dd2:	e027      	b.n	8008e24 <_ZN11Screen1View11ChangePump4Ev+0xe0>
			
		case 'G':
			SelectGin.setAlpha(255);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	f503 6355 	add.w	r3, r3, #3408	; 0xd50
 8008dda:	21ff      	movs	r1, #255	; 0xff
 8008ddc:	4618      	mov	r0, r3
 8008dde:	f7fb fe59 	bl	8004a94 <_ZN8touchgfx6Button8setAlphaEh>
			break;
 8008de2:	e01f      	b.n	8008e24 <_ZN11Screen1View11ChangePump4Ev+0xe0>
			
		case 'T':
			if (Pump4ContentBuffer[1] == 'e')
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	f8b3 3e92 	ldrh.w	r3, [r3, #3730]	; 0xe92
 8008dea:	2b65      	cmp	r3, #101	; 0x65
 8008dec:	d119      	bne.n	8008e22 <_ZN11Screen1View11ChangePump4Ev+0xde>
			{
				SelectTequila.setAlpha(255);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	f603 43c8 	addw	r3, r3, #3272	; 0xcc8
 8008df4:	21ff      	movs	r1, #255	; 0xff
 8008df6:	4618      	mov	r0, r3
 8008df8:	f7fb fe4c 	bl	8004a94 <_ZN8touchgfx6Button8setAlphaEh>
			}
			break;
 8008dfc:	e011      	b.n	8008e22 <_ZN11Screen1View11ChangePump4Ev+0xde>
			
		case 'V':
			SelectVodka.setAlpha(255);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	f603 4384 	addw	r3, r3, #3204	; 0xc84
 8008e04:	21ff      	movs	r1, #255	; 0xff
 8008e06:	4618      	mov	r0, r3
 8008e08:	f7fb fe44 	bl	8004a94 <_ZN8touchgfx6Button8setAlphaEh>
			break;
 8008e0c:	e00a      	b.n	8008e24 <_ZN11Screen1View11ChangePump4Ev+0xe0>
			
		case 'R':
			SelectRum.setAlpha(255);
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	f603 530c 	addw	r3, r3, #3340	; 0xd0c
 8008e14:	21ff      	movs	r1, #255	; 0xff
 8008e16:	4618      	mov	r0, r3
 8008e18:	f7fb fe3c 	bl	8004a94 <_ZN8touchgfx6Button8setAlphaEh>
			break;
 8008e1c:	e002      	b.n	8008e24 <_ZN11Screen1View11ChangePump4Ev+0xe0>
			
		default:
			break;
 8008e1e:	bf00      	nop
 8008e20:	e000      	b.n	8008e24 <_ZN11Screen1View11ChangePump4Ev+0xe0>
			break;
 8008e22:	bf00      	nop
	}
	
	HideSettings();
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	3388      	adds	r3, #136	; 0x88
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	6878      	ldr	r0, [r7, #4]
 8008e2e:	4798      	blx	r3
	ShowPumpSetup();
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	3390      	adds	r3, #144	; 0x90
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	6878      	ldr	r0, [r7, #4]
 8008e3a:	4798      	blx	r3
	
	PumpID = 4;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	f503 5376 	add.w	r3, r3, #15744	; 0x3d80
 8008e42:	3321      	adds	r3, #33	; 0x21
 8008e44:	2204      	movs	r2, #4
 8008e46:	701a      	strb	r2, [r3, #0]
}
 8008e48:	bf00      	nop
 8008e4a:	3708      	adds	r7, #8
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	bd80      	pop	{r7, pc}

08008e50 <_ZN11Screen1View7ToJuiceEv>:

void Screen1View::ToJuice()
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b082      	sub	sp, #8
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
	if (PumpID == 1)
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	f503 5376 	add.w	r3, r3, #15744	; 0x3d80
 8008e5e:	3321      	adds	r3, #33	; 0x21
 8008e60:	781b      	ldrb	r3, [r3, #0]
 8008e62:	2b01      	cmp	r3, #1
 8008e64:	d108      	bne.n	8008e78 <_ZN11Screen1View7ToJuiceEv+0x28>
	{
		Unicode::snprintf(Pump1ContentBuffer, PUMP1CONTENT_SIZE, "Juice");
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	f503 6366 	add.w	r3, r3, #3680	; 0xe60
 8008e6c:	4a3e      	ldr	r2, [pc, #248]	; (8008f68 <_ZN11Screen1View7ToJuiceEv+0x118>)
 8008e6e:	2108      	movs	r1, #8
 8008e70:	4618      	mov	r0, r3
 8008e72:	f00f fe89 	bl	8018b88 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8008e76:	e027      	b.n	8008ec8 <_ZN11Screen1View7ToJuiceEv+0x78>
	}
	else if (PumpID == 2)
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	f503 5376 	add.w	r3, r3, #15744	; 0x3d80
 8008e7e:	3321      	adds	r3, #33	; 0x21
 8008e80:	781b      	ldrb	r3, [r3, #0]
 8008e82:	2b02      	cmp	r3, #2
 8008e84:	d108      	bne.n	8008e98 <_ZN11Screen1View7ToJuiceEv+0x48>
	{
		Unicode::snprintf(Pump2ContentBuffer, PUMP2CONTENT_SIZE, "Juice");
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	f503 6367 	add.w	r3, r3, #3696	; 0xe70
 8008e8c:	4a36      	ldr	r2, [pc, #216]	; (8008f68 <_ZN11Screen1View7ToJuiceEv+0x118>)
 8008e8e:	2108      	movs	r1, #8
 8008e90:	4618      	mov	r0, r3
 8008e92:	f00f fe79 	bl	8018b88 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8008e96:	e017      	b.n	8008ec8 <_ZN11Screen1View7ToJuiceEv+0x78>
	}
	else if (PumpID == 3)
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	f503 5376 	add.w	r3, r3, #15744	; 0x3d80
 8008e9e:	3321      	adds	r3, #33	; 0x21
 8008ea0:	781b      	ldrb	r3, [r3, #0]
 8008ea2:	2b03      	cmp	r3, #3
 8008ea4:	d108      	bne.n	8008eb8 <_ZN11Screen1View7ToJuiceEv+0x68>
	{
		Unicode::snprintf(Pump3ContentBuffer, PUMP3CONTENT_SIZE, "Juice");
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	f503 6368 	add.w	r3, r3, #3712	; 0xe80
 8008eac:	4a2e      	ldr	r2, [pc, #184]	; (8008f68 <_ZN11Screen1View7ToJuiceEv+0x118>)
 8008eae:	2108      	movs	r1, #8
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	f00f fe69 	bl	8018b88 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8008eb6:	e007      	b.n	8008ec8 <_ZN11Screen1View7ToJuiceEv+0x78>
	}
	else
	{
		Unicode::snprintf(Pump4ContentBuffer, PUMP4CONTENT_SIZE, "Juice");
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	f503 6369 	add.w	r3, r3, #3728	; 0xe90
 8008ebe:	4a2a      	ldr	r2, [pc, #168]	; (8008f68 <_ZN11Screen1View7ToJuiceEv+0x118>)
 8008ec0:	2108      	movs	r1, #8
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	f00f fe60 	bl	8018b88 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	}
	
	SelectJuice.setAlpha(135);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	f603 631c 	addw	r3, r3, #3612	; 0xe1c
 8008ece:	2187      	movs	r1, #135	; 0x87
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	f7fb fddf 	bl	8004a94 <_ZN8touchgfx6Button8setAlphaEh>
	SelectGin.setAlpha(135);
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	f503 6355 	add.w	r3, r3, #3408	; 0xd50
 8008edc:	2187      	movs	r1, #135	; 0x87
 8008ede:	4618      	mov	r0, r3
 8008ee0:	f7fb fdd8 	bl	8004a94 <_ZN8touchgfx6Button8setAlphaEh>
	SelectNone.setAlpha(135);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	f603 5394 	addw	r3, r3, #3476	; 0xd94
 8008eea:	2187      	movs	r1, #135	; 0x87
 8008eec:	4618      	mov	r0, r3
 8008eee:	f7fb fdd1 	bl	8004a94 <_ZN8touchgfx6Button8setAlphaEh>
	SelectRum.setAlpha(135);
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	f603 530c 	addw	r3, r3, #3340	; 0xd0c
 8008ef8:	2187      	movs	r1, #135	; 0x87
 8008efa:	4618      	mov	r0, r3
 8008efc:	f7fb fdca 	bl	8004a94 <_ZN8touchgfx6Button8setAlphaEh>
	SelectTequila.setAlpha(135);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	f603 43c8 	addw	r3, r3, #3272	; 0xcc8
 8008f06:	2187      	movs	r1, #135	; 0x87
 8008f08:	4618      	mov	r0, r3
 8008f0a:	f7fb fdc3 	bl	8004a94 <_ZN8touchgfx6Button8setAlphaEh>
	SelectVodka.setAlpha(135);
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	f603 4384 	addw	r3, r3, #3204	; 0xc84
 8008f14:	2187      	movs	r1, #135	; 0x87
 8008f16:	4618      	mov	r0, r3
 8008f18:	f7fb fdbc 	bl	8004a94 <_ZN8touchgfx6Button8setAlphaEh>
	SelectWater.setAlpha(135);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	f603 53d8 	addw	r3, r3, #3544	; 0xdd8
 8008f22:	2187      	movs	r1, #135	; 0x87
 8008f24:	4618      	mov	r0, r3
 8008f26:	f7fb fdb5 	bl	8004a94 <_ZN8touchgfx6Button8setAlphaEh>
	SelectTodo1.setAlpha(135);
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	f503 6344 	add.w	r3, r3, #3136	; 0xc40
 8008f30:	2187      	movs	r1, #135	; 0x87
 8008f32:	4618      	mov	r0, r3
 8008f34:	f7fb fdae 	bl	8004a94 <_ZN8touchgfx6Button8setAlphaEh>
	SelectTodo1_1.setAlpha(135);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	f603 33fc 	addw	r3, r3, #3068	; 0xbfc
 8008f3e:	2187      	movs	r1, #135	; 0x87
 8008f40:	4618      	mov	r0, r3
 8008f42:	f7fb fda7 	bl	8004a94 <_ZN8touchgfx6Button8setAlphaEh>
	
    HidePumpSetup();
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	3394      	adds	r3, #148	; 0x94
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	6878      	ldr	r0, [r7, #4]
 8008f50:	4798      	blx	r3
	ShowSettings();
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	338c      	adds	r3, #140	; 0x8c
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	6878      	ldr	r0, [r7, #4]
 8008f5c:	4798      	blx	r3
}
 8008f5e:	bf00      	nop
 8008f60:	3708      	adds	r7, #8
 8008f62:	46bd      	mov	sp, r7
 8008f64:	bd80      	pop	{r7, pc}
 8008f66:	bf00      	nop
 8008f68:	08023ef4 	.word	0x08023ef4

08008f6c <_ZN11Screen1View7ToWaterEv>:

void Screen1View::ToWater()
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b082      	sub	sp, #8
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
	if (PumpID == 1)
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	f503 5376 	add.w	r3, r3, #15744	; 0x3d80
 8008f7a:	3321      	adds	r3, #33	; 0x21
 8008f7c:	781b      	ldrb	r3, [r3, #0]
 8008f7e:	2b01      	cmp	r3, #1
 8008f80:	d108      	bne.n	8008f94 <_ZN11Screen1View7ToWaterEv+0x28>
	{
		Unicode::snprintf(Pump1ContentBuffer, PUMP1CONTENT_SIZE, "Water");
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	f503 6366 	add.w	r3, r3, #3680	; 0xe60
 8008f88:	4a3e      	ldr	r2, [pc, #248]	; (8009084 <_ZN11Screen1View7ToWaterEv+0x118>)
 8008f8a:	2108      	movs	r1, #8
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	f00f fdfb 	bl	8018b88 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8008f92:	e027      	b.n	8008fe4 <_ZN11Screen1View7ToWaterEv+0x78>
	}
	else if (PumpID == 2)
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	f503 5376 	add.w	r3, r3, #15744	; 0x3d80
 8008f9a:	3321      	adds	r3, #33	; 0x21
 8008f9c:	781b      	ldrb	r3, [r3, #0]
 8008f9e:	2b02      	cmp	r3, #2
 8008fa0:	d108      	bne.n	8008fb4 <_ZN11Screen1View7ToWaterEv+0x48>
	{
		Unicode::snprintf(Pump2ContentBuffer, PUMP2CONTENT_SIZE, "Water");
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	f503 6367 	add.w	r3, r3, #3696	; 0xe70
 8008fa8:	4a36      	ldr	r2, [pc, #216]	; (8009084 <_ZN11Screen1View7ToWaterEv+0x118>)
 8008faa:	2108      	movs	r1, #8
 8008fac:	4618      	mov	r0, r3
 8008fae:	f00f fdeb 	bl	8018b88 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8008fb2:	e017      	b.n	8008fe4 <_ZN11Screen1View7ToWaterEv+0x78>
	}
	else if (PumpID == 3)
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	f503 5376 	add.w	r3, r3, #15744	; 0x3d80
 8008fba:	3321      	adds	r3, #33	; 0x21
 8008fbc:	781b      	ldrb	r3, [r3, #0]
 8008fbe:	2b03      	cmp	r3, #3
 8008fc0:	d108      	bne.n	8008fd4 <_ZN11Screen1View7ToWaterEv+0x68>
	{
		Unicode::snprintf(Pump3ContentBuffer, PUMP3CONTENT_SIZE, "Water");
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	f503 6368 	add.w	r3, r3, #3712	; 0xe80
 8008fc8:	4a2e      	ldr	r2, [pc, #184]	; (8009084 <_ZN11Screen1View7ToWaterEv+0x118>)
 8008fca:	2108      	movs	r1, #8
 8008fcc:	4618      	mov	r0, r3
 8008fce:	f00f fddb 	bl	8018b88 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8008fd2:	e007      	b.n	8008fe4 <_ZN11Screen1View7ToWaterEv+0x78>
	}
	else
	{
		Unicode::snprintf(Pump4ContentBuffer, PUMP4CONTENT_SIZE, "Water");
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	f503 6369 	add.w	r3, r3, #3728	; 0xe90
 8008fda:	4a2a      	ldr	r2, [pc, #168]	; (8009084 <_ZN11Screen1View7ToWaterEv+0x118>)
 8008fdc:	2108      	movs	r1, #8
 8008fde:	4618      	mov	r0, r3
 8008fe0:	f00f fdd2 	bl	8018b88 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	}
	
	SelectJuice.setAlpha(135);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	f603 631c 	addw	r3, r3, #3612	; 0xe1c
 8008fea:	2187      	movs	r1, #135	; 0x87
 8008fec:	4618      	mov	r0, r3
 8008fee:	f7fb fd51 	bl	8004a94 <_ZN8touchgfx6Button8setAlphaEh>
	SelectGin.setAlpha(135);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	f503 6355 	add.w	r3, r3, #3408	; 0xd50
 8008ff8:	2187      	movs	r1, #135	; 0x87
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	f7fb fd4a 	bl	8004a94 <_ZN8touchgfx6Button8setAlphaEh>
	SelectNone.setAlpha(135);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	f603 5394 	addw	r3, r3, #3476	; 0xd94
 8009006:	2187      	movs	r1, #135	; 0x87
 8009008:	4618      	mov	r0, r3
 800900a:	f7fb fd43 	bl	8004a94 <_ZN8touchgfx6Button8setAlphaEh>
	SelectRum.setAlpha(135);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	f603 530c 	addw	r3, r3, #3340	; 0xd0c
 8009014:	2187      	movs	r1, #135	; 0x87
 8009016:	4618      	mov	r0, r3
 8009018:	f7fb fd3c 	bl	8004a94 <_ZN8touchgfx6Button8setAlphaEh>
	SelectTequila.setAlpha(135);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	f603 43c8 	addw	r3, r3, #3272	; 0xcc8
 8009022:	2187      	movs	r1, #135	; 0x87
 8009024:	4618      	mov	r0, r3
 8009026:	f7fb fd35 	bl	8004a94 <_ZN8touchgfx6Button8setAlphaEh>
	SelectVodka.setAlpha(135);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	f603 4384 	addw	r3, r3, #3204	; 0xc84
 8009030:	2187      	movs	r1, #135	; 0x87
 8009032:	4618      	mov	r0, r3
 8009034:	f7fb fd2e 	bl	8004a94 <_ZN8touchgfx6Button8setAlphaEh>
	SelectWater.setAlpha(135);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	f603 53d8 	addw	r3, r3, #3544	; 0xdd8
 800903e:	2187      	movs	r1, #135	; 0x87
 8009040:	4618      	mov	r0, r3
 8009042:	f7fb fd27 	bl	8004a94 <_ZN8touchgfx6Button8setAlphaEh>
	SelectTodo1.setAlpha(135);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	f503 6344 	add.w	r3, r3, #3136	; 0xc40
 800904c:	2187      	movs	r1, #135	; 0x87
 800904e:	4618      	mov	r0, r3
 8009050:	f7fb fd20 	bl	8004a94 <_ZN8touchgfx6Button8setAlphaEh>
	SelectTodo1_1.setAlpha(135);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	f603 33fc 	addw	r3, r3, #3068	; 0xbfc
 800905a:	2187      	movs	r1, #135	; 0x87
 800905c:	4618      	mov	r0, r3
 800905e:	f7fb fd19 	bl	8004a94 <_ZN8touchgfx6Button8setAlphaEh>
	
    HidePumpSetup();
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	3394      	adds	r3, #148	; 0x94
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	6878      	ldr	r0, [r7, #4]
 800906c:	4798      	blx	r3
	ShowSettings();
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	338c      	adds	r3, #140	; 0x8c
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	6878      	ldr	r0, [r7, #4]
 8009078:	4798      	blx	r3
}
 800907a:	bf00      	nop
 800907c:	3708      	adds	r7, #8
 800907e:	46bd      	mov	sp, r7
 8009080:	bd80      	pop	{r7, pc}
 8009082:	bf00      	nop
 8009084:	08023efc 	.word	0x08023efc

08009088 <_ZN11Screen1View6ToNoneEv>:

void Screen1View::ToNone()
{
 8009088:	b580      	push	{r7, lr}
 800908a:	b082      	sub	sp, #8
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
	if (PumpID == 1)
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	f503 5376 	add.w	r3, r3, #15744	; 0x3d80
 8009096:	3321      	adds	r3, #33	; 0x21
 8009098:	781b      	ldrb	r3, [r3, #0]
 800909a:	2b01      	cmp	r3, #1
 800909c:	d108      	bne.n	80090b0 <_ZN11Screen1View6ToNoneEv+0x28>
	{
		Unicode::snprintf(Pump1ContentBuffer, PUMP1CONTENT_SIZE, "None");
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	f503 6366 	add.w	r3, r3, #3680	; 0xe60
 80090a4:	4a3e      	ldr	r2, [pc, #248]	; (80091a0 <_ZN11Screen1View6ToNoneEv+0x118>)
 80090a6:	2108      	movs	r1, #8
 80090a8:	4618      	mov	r0, r3
 80090aa:	f00f fd6d 	bl	8018b88 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 80090ae:	e027      	b.n	8009100 <_ZN11Screen1View6ToNoneEv+0x78>
	}
	else if (PumpID == 2)
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	f503 5376 	add.w	r3, r3, #15744	; 0x3d80
 80090b6:	3321      	adds	r3, #33	; 0x21
 80090b8:	781b      	ldrb	r3, [r3, #0]
 80090ba:	2b02      	cmp	r3, #2
 80090bc:	d108      	bne.n	80090d0 <_ZN11Screen1View6ToNoneEv+0x48>
	{
		Unicode::snprintf(Pump2ContentBuffer, PUMP2CONTENT_SIZE, "None");
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	f503 6367 	add.w	r3, r3, #3696	; 0xe70
 80090c4:	4a36      	ldr	r2, [pc, #216]	; (80091a0 <_ZN11Screen1View6ToNoneEv+0x118>)
 80090c6:	2108      	movs	r1, #8
 80090c8:	4618      	mov	r0, r3
 80090ca:	f00f fd5d 	bl	8018b88 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 80090ce:	e017      	b.n	8009100 <_ZN11Screen1View6ToNoneEv+0x78>
	}
	else if (PumpID == 3)
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	f503 5376 	add.w	r3, r3, #15744	; 0x3d80
 80090d6:	3321      	adds	r3, #33	; 0x21
 80090d8:	781b      	ldrb	r3, [r3, #0]
 80090da:	2b03      	cmp	r3, #3
 80090dc:	d108      	bne.n	80090f0 <_ZN11Screen1View6ToNoneEv+0x68>
	{
		Unicode::snprintf(Pump3ContentBuffer, PUMP3CONTENT_SIZE, "None");
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	f503 6368 	add.w	r3, r3, #3712	; 0xe80
 80090e4:	4a2e      	ldr	r2, [pc, #184]	; (80091a0 <_ZN11Screen1View6ToNoneEv+0x118>)
 80090e6:	2108      	movs	r1, #8
 80090e8:	4618      	mov	r0, r3
 80090ea:	f00f fd4d 	bl	8018b88 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 80090ee:	e007      	b.n	8009100 <_ZN11Screen1View6ToNoneEv+0x78>
	}
	else
	{
		Unicode::snprintf(Pump4ContentBuffer, PUMP4CONTENT_SIZE, "None");
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	f503 6369 	add.w	r3, r3, #3728	; 0xe90
 80090f6:	4a2a      	ldr	r2, [pc, #168]	; (80091a0 <_ZN11Screen1View6ToNoneEv+0x118>)
 80090f8:	2108      	movs	r1, #8
 80090fa:	4618      	mov	r0, r3
 80090fc:	f00f fd44 	bl	8018b88 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	}
	
	SelectJuice.setAlpha(135);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	f603 631c 	addw	r3, r3, #3612	; 0xe1c
 8009106:	2187      	movs	r1, #135	; 0x87
 8009108:	4618      	mov	r0, r3
 800910a:	f7fb fcc3 	bl	8004a94 <_ZN8touchgfx6Button8setAlphaEh>
	SelectGin.setAlpha(135);
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	f503 6355 	add.w	r3, r3, #3408	; 0xd50
 8009114:	2187      	movs	r1, #135	; 0x87
 8009116:	4618      	mov	r0, r3
 8009118:	f7fb fcbc 	bl	8004a94 <_ZN8touchgfx6Button8setAlphaEh>
	SelectNone.setAlpha(135);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	f603 5394 	addw	r3, r3, #3476	; 0xd94
 8009122:	2187      	movs	r1, #135	; 0x87
 8009124:	4618      	mov	r0, r3
 8009126:	f7fb fcb5 	bl	8004a94 <_ZN8touchgfx6Button8setAlphaEh>
	SelectRum.setAlpha(135);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	f603 530c 	addw	r3, r3, #3340	; 0xd0c
 8009130:	2187      	movs	r1, #135	; 0x87
 8009132:	4618      	mov	r0, r3
 8009134:	f7fb fcae 	bl	8004a94 <_ZN8touchgfx6Button8setAlphaEh>
	SelectTequila.setAlpha(135);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	f603 43c8 	addw	r3, r3, #3272	; 0xcc8
 800913e:	2187      	movs	r1, #135	; 0x87
 8009140:	4618      	mov	r0, r3
 8009142:	f7fb fca7 	bl	8004a94 <_ZN8touchgfx6Button8setAlphaEh>
	SelectVodka.setAlpha(135);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	f603 4384 	addw	r3, r3, #3204	; 0xc84
 800914c:	2187      	movs	r1, #135	; 0x87
 800914e:	4618      	mov	r0, r3
 8009150:	f7fb fca0 	bl	8004a94 <_ZN8touchgfx6Button8setAlphaEh>
	SelectWater.setAlpha(135);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	f603 53d8 	addw	r3, r3, #3544	; 0xdd8
 800915a:	2187      	movs	r1, #135	; 0x87
 800915c:	4618      	mov	r0, r3
 800915e:	f7fb fc99 	bl	8004a94 <_ZN8touchgfx6Button8setAlphaEh>
	SelectTodo1.setAlpha(135);
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	f503 6344 	add.w	r3, r3, #3136	; 0xc40
 8009168:	2187      	movs	r1, #135	; 0x87
 800916a:	4618      	mov	r0, r3
 800916c:	f7fb fc92 	bl	8004a94 <_ZN8touchgfx6Button8setAlphaEh>
	SelectTodo1_1.setAlpha(135);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	f603 33fc 	addw	r3, r3, #3068	; 0xbfc
 8009176:	2187      	movs	r1, #135	; 0x87
 8009178:	4618      	mov	r0, r3
 800917a:	f7fb fc8b 	bl	8004a94 <_ZN8touchgfx6Button8setAlphaEh>
	
    HidePumpSetup();
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	3394      	adds	r3, #148	; 0x94
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	6878      	ldr	r0, [r7, #4]
 8009188:	4798      	blx	r3
	ShowSettings();
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	338c      	adds	r3, #140	; 0x8c
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	6878      	ldr	r0, [r7, #4]
 8009194:	4798      	blx	r3
}
 8009196:	bf00      	nop
 8009198:	3708      	adds	r7, #8
 800919a:	46bd      	mov	sp, r7
 800919c:	bd80      	pop	{r7, pc}
 800919e:	bf00      	nop
 80091a0:	08023eec 	.word	0x08023eec

080091a4 <_ZN11Screen1View5ToGinEv>:

void Screen1View::ToGin()
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b082      	sub	sp, #8
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
	if (PumpID == 1)
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	f503 5376 	add.w	r3, r3, #15744	; 0x3d80
 80091b2:	3321      	adds	r3, #33	; 0x21
 80091b4:	781b      	ldrb	r3, [r3, #0]
 80091b6:	2b01      	cmp	r3, #1
 80091b8:	d108      	bne.n	80091cc <_ZN11Screen1View5ToGinEv+0x28>
	{
		Unicode::snprintf(Pump1ContentBuffer, PUMP1CONTENT_SIZE, "Gin");
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	f503 6366 	add.w	r3, r3, #3680	; 0xe60
 80091c0:	4a3e      	ldr	r2, [pc, #248]	; (80092bc <_ZN11Screen1View5ToGinEv+0x118>)
 80091c2:	2108      	movs	r1, #8
 80091c4:	4618      	mov	r0, r3
 80091c6:	f00f fcdf 	bl	8018b88 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 80091ca:	e027      	b.n	800921c <_ZN11Screen1View5ToGinEv+0x78>
	}
	else if (PumpID == 2)
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	f503 5376 	add.w	r3, r3, #15744	; 0x3d80
 80091d2:	3321      	adds	r3, #33	; 0x21
 80091d4:	781b      	ldrb	r3, [r3, #0]
 80091d6:	2b02      	cmp	r3, #2
 80091d8:	d108      	bne.n	80091ec <_ZN11Screen1View5ToGinEv+0x48>
	{
		Unicode::snprintf(Pump2ContentBuffer, PUMP2CONTENT_SIZE, "Gin");
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	f503 6367 	add.w	r3, r3, #3696	; 0xe70
 80091e0:	4a36      	ldr	r2, [pc, #216]	; (80092bc <_ZN11Screen1View5ToGinEv+0x118>)
 80091e2:	2108      	movs	r1, #8
 80091e4:	4618      	mov	r0, r3
 80091e6:	f00f fccf 	bl	8018b88 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 80091ea:	e017      	b.n	800921c <_ZN11Screen1View5ToGinEv+0x78>
	}
	else if (PumpID == 3)
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	f503 5376 	add.w	r3, r3, #15744	; 0x3d80
 80091f2:	3321      	adds	r3, #33	; 0x21
 80091f4:	781b      	ldrb	r3, [r3, #0]
 80091f6:	2b03      	cmp	r3, #3
 80091f8:	d108      	bne.n	800920c <_ZN11Screen1View5ToGinEv+0x68>
	{
		Unicode::snprintf(Pump3ContentBuffer, PUMP3CONTENT_SIZE, "Gin");
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	f503 6368 	add.w	r3, r3, #3712	; 0xe80
 8009200:	4a2e      	ldr	r2, [pc, #184]	; (80092bc <_ZN11Screen1View5ToGinEv+0x118>)
 8009202:	2108      	movs	r1, #8
 8009204:	4618      	mov	r0, r3
 8009206:	f00f fcbf 	bl	8018b88 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 800920a:	e007      	b.n	800921c <_ZN11Screen1View5ToGinEv+0x78>
	}
	else
	{
		Unicode::snprintf(Pump4ContentBuffer, PUMP4CONTENT_SIZE, "Gin");
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	f503 6369 	add.w	r3, r3, #3728	; 0xe90
 8009212:	4a2a      	ldr	r2, [pc, #168]	; (80092bc <_ZN11Screen1View5ToGinEv+0x118>)
 8009214:	2108      	movs	r1, #8
 8009216:	4618      	mov	r0, r3
 8009218:	f00f fcb6 	bl	8018b88 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	}
	
	SelectJuice.setAlpha(135);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	f603 631c 	addw	r3, r3, #3612	; 0xe1c
 8009222:	2187      	movs	r1, #135	; 0x87
 8009224:	4618      	mov	r0, r3
 8009226:	f7fb fc35 	bl	8004a94 <_ZN8touchgfx6Button8setAlphaEh>
	SelectGin.setAlpha(135);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	f503 6355 	add.w	r3, r3, #3408	; 0xd50
 8009230:	2187      	movs	r1, #135	; 0x87
 8009232:	4618      	mov	r0, r3
 8009234:	f7fb fc2e 	bl	8004a94 <_ZN8touchgfx6Button8setAlphaEh>
	SelectNone.setAlpha(135);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	f603 5394 	addw	r3, r3, #3476	; 0xd94
 800923e:	2187      	movs	r1, #135	; 0x87
 8009240:	4618      	mov	r0, r3
 8009242:	f7fb fc27 	bl	8004a94 <_ZN8touchgfx6Button8setAlphaEh>
	SelectRum.setAlpha(135);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	f603 530c 	addw	r3, r3, #3340	; 0xd0c
 800924c:	2187      	movs	r1, #135	; 0x87
 800924e:	4618      	mov	r0, r3
 8009250:	f7fb fc20 	bl	8004a94 <_ZN8touchgfx6Button8setAlphaEh>
	SelectTequila.setAlpha(135);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	f603 43c8 	addw	r3, r3, #3272	; 0xcc8
 800925a:	2187      	movs	r1, #135	; 0x87
 800925c:	4618      	mov	r0, r3
 800925e:	f7fb fc19 	bl	8004a94 <_ZN8touchgfx6Button8setAlphaEh>
	SelectVodka.setAlpha(135);
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	f603 4384 	addw	r3, r3, #3204	; 0xc84
 8009268:	2187      	movs	r1, #135	; 0x87
 800926a:	4618      	mov	r0, r3
 800926c:	f7fb fc12 	bl	8004a94 <_ZN8touchgfx6Button8setAlphaEh>
	SelectWater.setAlpha(135);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	f603 53d8 	addw	r3, r3, #3544	; 0xdd8
 8009276:	2187      	movs	r1, #135	; 0x87
 8009278:	4618      	mov	r0, r3
 800927a:	f7fb fc0b 	bl	8004a94 <_ZN8touchgfx6Button8setAlphaEh>
	SelectTodo1.setAlpha(135);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	f503 6344 	add.w	r3, r3, #3136	; 0xc40
 8009284:	2187      	movs	r1, #135	; 0x87
 8009286:	4618      	mov	r0, r3
 8009288:	f7fb fc04 	bl	8004a94 <_ZN8touchgfx6Button8setAlphaEh>
	SelectTodo1_1.setAlpha(135);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	f603 33fc 	addw	r3, r3, #3068	; 0xbfc
 8009292:	2187      	movs	r1, #135	; 0x87
 8009294:	4618      	mov	r0, r3
 8009296:	f7fb fbfd 	bl	8004a94 <_ZN8touchgfx6Button8setAlphaEh>
	
    HidePumpSetup();
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	3394      	adds	r3, #148	; 0x94
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	6878      	ldr	r0, [r7, #4]
 80092a4:	4798      	blx	r3
	ShowSettings();
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	338c      	adds	r3, #140	; 0x8c
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	6878      	ldr	r0, [r7, #4]
 80092b0:	4798      	blx	r3
}
 80092b2:	bf00      	nop
 80092b4:	3708      	adds	r7, #8
 80092b6:	46bd      	mov	sp, r7
 80092b8:	bd80      	pop	{r7, pc}
 80092ba:	bf00      	nop
 80092bc:	08023f04 	.word	0x08023f04

080092c0 <_ZN11Screen1View5ToRumEv>:

void Screen1View::ToRum()
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b082      	sub	sp, #8
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
	if (PumpID == 1)
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	f503 5376 	add.w	r3, r3, #15744	; 0x3d80
 80092ce:	3321      	adds	r3, #33	; 0x21
 80092d0:	781b      	ldrb	r3, [r3, #0]
 80092d2:	2b01      	cmp	r3, #1
 80092d4:	d108      	bne.n	80092e8 <_ZN11Screen1View5ToRumEv+0x28>
	{
		Unicode::snprintf(Pump1ContentBuffer, PUMP1CONTENT_SIZE, "Rum");
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	f503 6366 	add.w	r3, r3, #3680	; 0xe60
 80092dc:	4a3e      	ldr	r2, [pc, #248]	; (80093d8 <_ZN11Screen1View5ToRumEv+0x118>)
 80092de:	2108      	movs	r1, #8
 80092e0:	4618      	mov	r0, r3
 80092e2:	f00f fc51 	bl	8018b88 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 80092e6:	e027      	b.n	8009338 <_ZN11Screen1View5ToRumEv+0x78>
	}
	else if (PumpID == 2)
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	f503 5376 	add.w	r3, r3, #15744	; 0x3d80
 80092ee:	3321      	adds	r3, #33	; 0x21
 80092f0:	781b      	ldrb	r3, [r3, #0]
 80092f2:	2b02      	cmp	r3, #2
 80092f4:	d108      	bne.n	8009308 <_ZN11Screen1View5ToRumEv+0x48>
	{
		Unicode::snprintf(Pump2ContentBuffer, PUMP2CONTENT_SIZE, "Rum");
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	f503 6367 	add.w	r3, r3, #3696	; 0xe70
 80092fc:	4a36      	ldr	r2, [pc, #216]	; (80093d8 <_ZN11Screen1View5ToRumEv+0x118>)
 80092fe:	2108      	movs	r1, #8
 8009300:	4618      	mov	r0, r3
 8009302:	f00f fc41 	bl	8018b88 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8009306:	e017      	b.n	8009338 <_ZN11Screen1View5ToRumEv+0x78>
	}
	else if (PumpID == 3)
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	f503 5376 	add.w	r3, r3, #15744	; 0x3d80
 800930e:	3321      	adds	r3, #33	; 0x21
 8009310:	781b      	ldrb	r3, [r3, #0]
 8009312:	2b03      	cmp	r3, #3
 8009314:	d108      	bne.n	8009328 <_ZN11Screen1View5ToRumEv+0x68>
	{
		Unicode::snprintf(Pump3ContentBuffer, PUMP3CONTENT_SIZE, "Rum");
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	f503 6368 	add.w	r3, r3, #3712	; 0xe80
 800931c:	4a2e      	ldr	r2, [pc, #184]	; (80093d8 <_ZN11Screen1View5ToRumEv+0x118>)
 800931e:	2108      	movs	r1, #8
 8009320:	4618      	mov	r0, r3
 8009322:	f00f fc31 	bl	8018b88 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8009326:	e007      	b.n	8009338 <_ZN11Screen1View5ToRumEv+0x78>
	}
	else
	{
		Unicode::snprintf(Pump4ContentBuffer, PUMP4CONTENT_SIZE, "Rum");
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	f503 6369 	add.w	r3, r3, #3728	; 0xe90
 800932e:	4a2a      	ldr	r2, [pc, #168]	; (80093d8 <_ZN11Screen1View5ToRumEv+0x118>)
 8009330:	2108      	movs	r1, #8
 8009332:	4618      	mov	r0, r3
 8009334:	f00f fc28 	bl	8018b88 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	}
	
	SelectJuice.setAlpha(135);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	f603 631c 	addw	r3, r3, #3612	; 0xe1c
 800933e:	2187      	movs	r1, #135	; 0x87
 8009340:	4618      	mov	r0, r3
 8009342:	f7fb fba7 	bl	8004a94 <_ZN8touchgfx6Button8setAlphaEh>
	SelectGin.setAlpha(135);
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	f503 6355 	add.w	r3, r3, #3408	; 0xd50
 800934c:	2187      	movs	r1, #135	; 0x87
 800934e:	4618      	mov	r0, r3
 8009350:	f7fb fba0 	bl	8004a94 <_ZN8touchgfx6Button8setAlphaEh>
	SelectNone.setAlpha(135);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	f603 5394 	addw	r3, r3, #3476	; 0xd94
 800935a:	2187      	movs	r1, #135	; 0x87
 800935c:	4618      	mov	r0, r3
 800935e:	f7fb fb99 	bl	8004a94 <_ZN8touchgfx6Button8setAlphaEh>
	SelectRum.setAlpha(135);
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	f603 530c 	addw	r3, r3, #3340	; 0xd0c
 8009368:	2187      	movs	r1, #135	; 0x87
 800936a:	4618      	mov	r0, r3
 800936c:	f7fb fb92 	bl	8004a94 <_ZN8touchgfx6Button8setAlphaEh>
	SelectTequila.setAlpha(135);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	f603 43c8 	addw	r3, r3, #3272	; 0xcc8
 8009376:	2187      	movs	r1, #135	; 0x87
 8009378:	4618      	mov	r0, r3
 800937a:	f7fb fb8b 	bl	8004a94 <_ZN8touchgfx6Button8setAlphaEh>
	SelectVodka.setAlpha(135);
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	f603 4384 	addw	r3, r3, #3204	; 0xc84
 8009384:	2187      	movs	r1, #135	; 0x87
 8009386:	4618      	mov	r0, r3
 8009388:	f7fb fb84 	bl	8004a94 <_ZN8touchgfx6Button8setAlphaEh>
	SelectWater.setAlpha(135);
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	f603 53d8 	addw	r3, r3, #3544	; 0xdd8
 8009392:	2187      	movs	r1, #135	; 0x87
 8009394:	4618      	mov	r0, r3
 8009396:	f7fb fb7d 	bl	8004a94 <_ZN8touchgfx6Button8setAlphaEh>
	SelectTodo1.setAlpha(135);
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	f503 6344 	add.w	r3, r3, #3136	; 0xc40
 80093a0:	2187      	movs	r1, #135	; 0x87
 80093a2:	4618      	mov	r0, r3
 80093a4:	f7fb fb76 	bl	8004a94 <_ZN8touchgfx6Button8setAlphaEh>
	SelectTodo1_1.setAlpha(135);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	f603 33fc 	addw	r3, r3, #3068	; 0xbfc
 80093ae:	2187      	movs	r1, #135	; 0x87
 80093b0:	4618      	mov	r0, r3
 80093b2:	f7fb fb6f 	bl	8004a94 <_ZN8touchgfx6Button8setAlphaEh>
	
    HidePumpSetup();
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	3394      	adds	r3, #148	; 0x94
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	6878      	ldr	r0, [r7, #4]
 80093c0:	4798      	blx	r3
	ShowSettings();
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	338c      	adds	r3, #140	; 0x8c
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	6878      	ldr	r0, [r7, #4]
 80093cc:	4798      	blx	r3
}
 80093ce:	bf00      	nop
 80093d0:	3708      	adds	r7, #8
 80093d2:	46bd      	mov	sp, r7
 80093d4:	bd80      	pop	{r7, pc}
 80093d6:	bf00      	nop
 80093d8:	08023f08 	.word	0x08023f08

080093dc <_ZN11Screen1View9ToTequilaEv>:

void Screen1View::ToTequila()
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b082      	sub	sp, #8
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
	if (PumpID == 1)
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	f503 5376 	add.w	r3, r3, #15744	; 0x3d80
 80093ea:	3321      	adds	r3, #33	; 0x21
 80093ec:	781b      	ldrb	r3, [r3, #0]
 80093ee:	2b01      	cmp	r3, #1
 80093f0:	d108      	bne.n	8009404 <_ZN11Screen1View9ToTequilaEv+0x28>
	{
		Unicode::snprintf(Pump1ContentBuffer, PUMP1CONTENT_SIZE, "Tequila");
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	f503 6366 	add.w	r3, r3, #3680	; 0xe60
 80093f8:	4a3e      	ldr	r2, [pc, #248]	; (80094f4 <_ZN11Screen1View9ToTequilaEv+0x118>)
 80093fa:	2108      	movs	r1, #8
 80093fc:	4618      	mov	r0, r3
 80093fe:	f00f fbc3 	bl	8018b88 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8009402:	e027      	b.n	8009454 <_ZN11Screen1View9ToTequilaEv+0x78>
	}
	else if (PumpID == 2)
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	f503 5376 	add.w	r3, r3, #15744	; 0x3d80
 800940a:	3321      	adds	r3, #33	; 0x21
 800940c:	781b      	ldrb	r3, [r3, #0]
 800940e:	2b02      	cmp	r3, #2
 8009410:	d108      	bne.n	8009424 <_ZN11Screen1View9ToTequilaEv+0x48>
	{
		Unicode::snprintf(Pump2ContentBuffer, PUMP2CONTENT_SIZE, "Tequila");
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	f503 6367 	add.w	r3, r3, #3696	; 0xe70
 8009418:	4a36      	ldr	r2, [pc, #216]	; (80094f4 <_ZN11Screen1View9ToTequilaEv+0x118>)
 800941a:	2108      	movs	r1, #8
 800941c:	4618      	mov	r0, r3
 800941e:	f00f fbb3 	bl	8018b88 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8009422:	e017      	b.n	8009454 <_ZN11Screen1View9ToTequilaEv+0x78>
	}
	else if (PumpID == 3)
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	f503 5376 	add.w	r3, r3, #15744	; 0x3d80
 800942a:	3321      	adds	r3, #33	; 0x21
 800942c:	781b      	ldrb	r3, [r3, #0]
 800942e:	2b03      	cmp	r3, #3
 8009430:	d108      	bne.n	8009444 <_ZN11Screen1View9ToTequilaEv+0x68>
	{
		Unicode::snprintf(Pump3ContentBuffer, PUMP3CONTENT_SIZE, "Tequila");
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	f503 6368 	add.w	r3, r3, #3712	; 0xe80
 8009438:	4a2e      	ldr	r2, [pc, #184]	; (80094f4 <_ZN11Screen1View9ToTequilaEv+0x118>)
 800943a:	2108      	movs	r1, #8
 800943c:	4618      	mov	r0, r3
 800943e:	f00f fba3 	bl	8018b88 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8009442:	e007      	b.n	8009454 <_ZN11Screen1View9ToTequilaEv+0x78>
	}
	else
	{
		Unicode::snprintf(Pump4ContentBuffer, PUMP4CONTENT_SIZE, "Tequila");
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	f503 6369 	add.w	r3, r3, #3728	; 0xe90
 800944a:	4a2a      	ldr	r2, [pc, #168]	; (80094f4 <_ZN11Screen1View9ToTequilaEv+0x118>)
 800944c:	2108      	movs	r1, #8
 800944e:	4618      	mov	r0, r3
 8009450:	f00f fb9a 	bl	8018b88 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	}
	
	SelectJuice.setAlpha(135);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	f603 631c 	addw	r3, r3, #3612	; 0xe1c
 800945a:	2187      	movs	r1, #135	; 0x87
 800945c:	4618      	mov	r0, r3
 800945e:	f7fb fb19 	bl	8004a94 <_ZN8touchgfx6Button8setAlphaEh>
	SelectGin.setAlpha(135);
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	f503 6355 	add.w	r3, r3, #3408	; 0xd50
 8009468:	2187      	movs	r1, #135	; 0x87
 800946a:	4618      	mov	r0, r3
 800946c:	f7fb fb12 	bl	8004a94 <_ZN8touchgfx6Button8setAlphaEh>
	SelectNone.setAlpha(135);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	f603 5394 	addw	r3, r3, #3476	; 0xd94
 8009476:	2187      	movs	r1, #135	; 0x87
 8009478:	4618      	mov	r0, r3
 800947a:	f7fb fb0b 	bl	8004a94 <_ZN8touchgfx6Button8setAlphaEh>
	SelectRum.setAlpha(135);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	f603 530c 	addw	r3, r3, #3340	; 0xd0c
 8009484:	2187      	movs	r1, #135	; 0x87
 8009486:	4618      	mov	r0, r3
 8009488:	f7fb fb04 	bl	8004a94 <_ZN8touchgfx6Button8setAlphaEh>
	SelectTequila.setAlpha(135);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	f603 43c8 	addw	r3, r3, #3272	; 0xcc8
 8009492:	2187      	movs	r1, #135	; 0x87
 8009494:	4618      	mov	r0, r3
 8009496:	f7fb fafd 	bl	8004a94 <_ZN8touchgfx6Button8setAlphaEh>
	SelectVodka.setAlpha(135);
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	f603 4384 	addw	r3, r3, #3204	; 0xc84
 80094a0:	2187      	movs	r1, #135	; 0x87
 80094a2:	4618      	mov	r0, r3
 80094a4:	f7fb faf6 	bl	8004a94 <_ZN8touchgfx6Button8setAlphaEh>
	SelectWater.setAlpha(135);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	f603 53d8 	addw	r3, r3, #3544	; 0xdd8
 80094ae:	2187      	movs	r1, #135	; 0x87
 80094b0:	4618      	mov	r0, r3
 80094b2:	f7fb faef 	bl	8004a94 <_ZN8touchgfx6Button8setAlphaEh>
	SelectTodo1.setAlpha(135);
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	f503 6344 	add.w	r3, r3, #3136	; 0xc40
 80094bc:	2187      	movs	r1, #135	; 0x87
 80094be:	4618      	mov	r0, r3
 80094c0:	f7fb fae8 	bl	8004a94 <_ZN8touchgfx6Button8setAlphaEh>
	SelectTodo1_1.setAlpha(135);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	f603 33fc 	addw	r3, r3, #3068	; 0xbfc
 80094ca:	2187      	movs	r1, #135	; 0x87
 80094cc:	4618      	mov	r0, r3
 80094ce:	f7fb fae1 	bl	8004a94 <_ZN8touchgfx6Button8setAlphaEh>
	
    HidePumpSetup();
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	3394      	adds	r3, #148	; 0x94
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	6878      	ldr	r0, [r7, #4]
 80094dc:	4798      	blx	r3
	ShowSettings();
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	338c      	adds	r3, #140	; 0x8c
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	6878      	ldr	r0, [r7, #4]
 80094e8:	4798      	blx	r3
}
 80094ea:	bf00      	nop
 80094ec:	3708      	adds	r7, #8
 80094ee:	46bd      	mov	sp, r7
 80094f0:	bd80      	pop	{r7, pc}
 80094f2:	bf00      	nop
 80094f4:	08023f0c 	.word	0x08023f0c

080094f8 <_ZN11Screen1View7ToVodkaEv>:

void Screen1View::ToVodka()
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b082      	sub	sp, #8
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
	if (PumpID == 1)
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	f503 5376 	add.w	r3, r3, #15744	; 0x3d80
 8009506:	3321      	adds	r3, #33	; 0x21
 8009508:	781b      	ldrb	r3, [r3, #0]
 800950a:	2b01      	cmp	r3, #1
 800950c:	d108      	bne.n	8009520 <_ZN11Screen1View7ToVodkaEv+0x28>
	{
		Unicode::snprintf(Pump1ContentBuffer, PUMP1CONTENT_SIZE, "Vodka");
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	f503 6366 	add.w	r3, r3, #3680	; 0xe60
 8009514:	4a3e      	ldr	r2, [pc, #248]	; (8009610 <_ZN11Screen1View7ToVodkaEv+0x118>)
 8009516:	2108      	movs	r1, #8
 8009518:	4618      	mov	r0, r3
 800951a:	f00f fb35 	bl	8018b88 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 800951e:	e027      	b.n	8009570 <_ZN11Screen1View7ToVodkaEv+0x78>
	}
	else if (PumpID == 2)
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	f503 5376 	add.w	r3, r3, #15744	; 0x3d80
 8009526:	3321      	adds	r3, #33	; 0x21
 8009528:	781b      	ldrb	r3, [r3, #0]
 800952a:	2b02      	cmp	r3, #2
 800952c:	d108      	bne.n	8009540 <_ZN11Screen1View7ToVodkaEv+0x48>
	{
		Unicode::snprintf(Pump2ContentBuffer, PUMP2CONTENT_SIZE, "Vodka");
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	f503 6367 	add.w	r3, r3, #3696	; 0xe70
 8009534:	4a36      	ldr	r2, [pc, #216]	; (8009610 <_ZN11Screen1View7ToVodkaEv+0x118>)
 8009536:	2108      	movs	r1, #8
 8009538:	4618      	mov	r0, r3
 800953a:	f00f fb25 	bl	8018b88 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 800953e:	e017      	b.n	8009570 <_ZN11Screen1View7ToVodkaEv+0x78>
	}
	else if (PumpID == 3)
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	f503 5376 	add.w	r3, r3, #15744	; 0x3d80
 8009546:	3321      	adds	r3, #33	; 0x21
 8009548:	781b      	ldrb	r3, [r3, #0]
 800954a:	2b03      	cmp	r3, #3
 800954c:	d108      	bne.n	8009560 <_ZN11Screen1View7ToVodkaEv+0x68>
	{
		Unicode::snprintf(Pump3ContentBuffer, PUMP3CONTENT_SIZE, "Vodka");
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	f503 6368 	add.w	r3, r3, #3712	; 0xe80
 8009554:	4a2e      	ldr	r2, [pc, #184]	; (8009610 <_ZN11Screen1View7ToVodkaEv+0x118>)
 8009556:	2108      	movs	r1, #8
 8009558:	4618      	mov	r0, r3
 800955a:	f00f fb15 	bl	8018b88 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 800955e:	e007      	b.n	8009570 <_ZN11Screen1View7ToVodkaEv+0x78>
	}
	else
	{
		Unicode::snprintf(Pump4ContentBuffer, PUMP4CONTENT_SIZE, "Vodka");
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	f503 6369 	add.w	r3, r3, #3728	; 0xe90
 8009566:	4a2a      	ldr	r2, [pc, #168]	; (8009610 <_ZN11Screen1View7ToVodkaEv+0x118>)
 8009568:	2108      	movs	r1, #8
 800956a:	4618      	mov	r0, r3
 800956c:	f00f fb0c 	bl	8018b88 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	}
	
	SelectJuice.setAlpha(135);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	f603 631c 	addw	r3, r3, #3612	; 0xe1c
 8009576:	2187      	movs	r1, #135	; 0x87
 8009578:	4618      	mov	r0, r3
 800957a:	f7fb fa8b 	bl	8004a94 <_ZN8touchgfx6Button8setAlphaEh>
	SelectGin.setAlpha(135);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	f503 6355 	add.w	r3, r3, #3408	; 0xd50
 8009584:	2187      	movs	r1, #135	; 0x87
 8009586:	4618      	mov	r0, r3
 8009588:	f7fb fa84 	bl	8004a94 <_ZN8touchgfx6Button8setAlphaEh>
	SelectNone.setAlpha(135);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	f603 5394 	addw	r3, r3, #3476	; 0xd94
 8009592:	2187      	movs	r1, #135	; 0x87
 8009594:	4618      	mov	r0, r3
 8009596:	f7fb fa7d 	bl	8004a94 <_ZN8touchgfx6Button8setAlphaEh>
	SelectRum.setAlpha(135);
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	f603 530c 	addw	r3, r3, #3340	; 0xd0c
 80095a0:	2187      	movs	r1, #135	; 0x87
 80095a2:	4618      	mov	r0, r3
 80095a4:	f7fb fa76 	bl	8004a94 <_ZN8touchgfx6Button8setAlphaEh>
	SelectTequila.setAlpha(135);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	f603 43c8 	addw	r3, r3, #3272	; 0xcc8
 80095ae:	2187      	movs	r1, #135	; 0x87
 80095b0:	4618      	mov	r0, r3
 80095b2:	f7fb fa6f 	bl	8004a94 <_ZN8touchgfx6Button8setAlphaEh>
	SelectVodka.setAlpha(135);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	f603 4384 	addw	r3, r3, #3204	; 0xc84
 80095bc:	2187      	movs	r1, #135	; 0x87
 80095be:	4618      	mov	r0, r3
 80095c0:	f7fb fa68 	bl	8004a94 <_ZN8touchgfx6Button8setAlphaEh>
	SelectWater.setAlpha(135);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	f603 53d8 	addw	r3, r3, #3544	; 0xdd8
 80095ca:	2187      	movs	r1, #135	; 0x87
 80095cc:	4618      	mov	r0, r3
 80095ce:	f7fb fa61 	bl	8004a94 <_ZN8touchgfx6Button8setAlphaEh>
	SelectTodo1.setAlpha(135);
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	f503 6344 	add.w	r3, r3, #3136	; 0xc40
 80095d8:	2187      	movs	r1, #135	; 0x87
 80095da:	4618      	mov	r0, r3
 80095dc:	f7fb fa5a 	bl	8004a94 <_ZN8touchgfx6Button8setAlphaEh>
	SelectTodo1_1.setAlpha(135);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	f603 33fc 	addw	r3, r3, #3068	; 0xbfc
 80095e6:	2187      	movs	r1, #135	; 0x87
 80095e8:	4618      	mov	r0, r3
 80095ea:	f7fb fa53 	bl	8004a94 <_ZN8touchgfx6Button8setAlphaEh>
	
    HidePumpSetup();
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	3394      	adds	r3, #148	; 0x94
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	6878      	ldr	r0, [r7, #4]
 80095f8:	4798      	blx	r3
	ShowSettings();
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	338c      	adds	r3, #140	; 0x8c
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	6878      	ldr	r0, [r7, #4]
 8009604:	4798      	blx	r3
}
 8009606:	bf00      	nop
 8009608:	3708      	adds	r7, #8
 800960a:	46bd      	mov	sp, r7
 800960c:	bd80      	pop	{r7, pc}
 800960e:	bf00      	nop
 8009610:	08023f14 	.word	0x08023f14

08009614 <_ZN11Screen1View7ToTodo1Ev>:

void Screen1View::ToTodo1()
{
 8009614:	b580      	push	{r7, lr}
 8009616:	b082      	sub	sp, #8
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
	if (PumpID == 1)
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	f503 5376 	add.w	r3, r3, #15744	; 0x3d80
 8009622:	3321      	adds	r3, #33	; 0x21
 8009624:	781b      	ldrb	r3, [r3, #0]
 8009626:	2b01      	cmp	r3, #1
 8009628:	d108      	bne.n	800963c <_ZN11Screen1View7ToTodo1Ev+0x28>
	{
		Unicode::snprintf(Pump1ContentBuffer, PUMP1CONTENT_SIZE, "Todo1");
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	f503 6366 	add.w	r3, r3, #3680	; 0xe60
 8009630:	4a3e      	ldr	r2, [pc, #248]	; (800972c <_ZN11Screen1View7ToTodo1Ev+0x118>)
 8009632:	2108      	movs	r1, #8
 8009634:	4618      	mov	r0, r3
 8009636:	f00f faa7 	bl	8018b88 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 800963a:	e027      	b.n	800968c <_ZN11Screen1View7ToTodo1Ev+0x78>
	}
	else if (PumpID == 2)
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	f503 5376 	add.w	r3, r3, #15744	; 0x3d80
 8009642:	3321      	adds	r3, #33	; 0x21
 8009644:	781b      	ldrb	r3, [r3, #0]
 8009646:	2b02      	cmp	r3, #2
 8009648:	d108      	bne.n	800965c <_ZN11Screen1View7ToTodo1Ev+0x48>
	{
		Unicode::snprintf(Pump2ContentBuffer, PUMP2CONTENT_SIZE, "Todo1");
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	f503 6367 	add.w	r3, r3, #3696	; 0xe70
 8009650:	4a36      	ldr	r2, [pc, #216]	; (800972c <_ZN11Screen1View7ToTodo1Ev+0x118>)
 8009652:	2108      	movs	r1, #8
 8009654:	4618      	mov	r0, r3
 8009656:	f00f fa97 	bl	8018b88 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 800965a:	e017      	b.n	800968c <_ZN11Screen1View7ToTodo1Ev+0x78>
	}
	else if (PumpID == 3)
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	f503 5376 	add.w	r3, r3, #15744	; 0x3d80
 8009662:	3321      	adds	r3, #33	; 0x21
 8009664:	781b      	ldrb	r3, [r3, #0]
 8009666:	2b03      	cmp	r3, #3
 8009668:	d108      	bne.n	800967c <_ZN11Screen1View7ToTodo1Ev+0x68>
	{
		Unicode::snprintf(Pump3ContentBuffer, PUMP3CONTENT_SIZE, "Todo1");
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	f503 6368 	add.w	r3, r3, #3712	; 0xe80
 8009670:	4a2e      	ldr	r2, [pc, #184]	; (800972c <_ZN11Screen1View7ToTodo1Ev+0x118>)
 8009672:	2108      	movs	r1, #8
 8009674:	4618      	mov	r0, r3
 8009676:	f00f fa87 	bl	8018b88 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 800967a:	e007      	b.n	800968c <_ZN11Screen1View7ToTodo1Ev+0x78>
	}
	else
	{
		Unicode::snprintf(Pump4ContentBuffer, PUMP4CONTENT_SIZE, "Todo1");
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	f503 6369 	add.w	r3, r3, #3728	; 0xe90
 8009682:	4a2a      	ldr	r2, [pc, #168]	; (800972c <_ZN11Screen1View7ToTodo1Ev+0x118>)
 8009684:	2108      	movs	r1, #8
 8009686:	4618      	mov	r0, r3
 8009688:	f00f fa7e 	bl	8018b88 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	}
	
	SelectJuice.setAlpha(135);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	f603 631c 	addw	r3, r3, #3612	; 0xe1c
 8009692:	2187      	movs	r1, #135	; 0x87
 8009694:	4618      	mov	r0, r3
 8009696:	f7fb f9fd 	bl	8004a94 <_ZN8touchgfx6Button8setAlphaEh>
	SelectGin.setAlpha(135);
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	f503 6355 	add.w	r3, r3, #3408	; 0xd50
 80096a0:	2187      	movs	r1, #135	; 0x87
 80096a2:	4618      	mov	r0, r3
 80096a4:	f7fb f9f6 	bl	8004a94 <_ZN8touchgfx6Button8setAlphaEh>
	SelectNone.setAlpha(135);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	f603 5394 	addw	r3, r3, #3476	; 0xd94
 80096ae:	2187      	movs	r1, #135	; 0x87
 80096b0:	4618      	mov	r0, r3
 80096b2:	f7fb f9ef 	bl	8004a94 <_ZN8touchgfx6Button8setAlphaEh>
	SelectRum.setAlpha(135);
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	f603 530c 	addw	r3, r3, #3340	; 0xd0c
 80096bc:	2187      	movs	r1, #135	; 0x87
 80096be:	4618      	mov	r0, r3
 80096c0:	f7fb f9e8 	bl	8004a94 <_ZN8touchgfx6Button8setAlphaEh>
	SelectTequila.setAlpha(135);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	f603 43c8 	addw	r3, r3, #3272	; 0xcc8
 80096ca:	2187      	movs	r1, #135	; 0x87
 80096cc:	4618      	mov	r0, r3
 80096ce:	f7fb f9e1 	bl	8004a94 <_ZN8touchgfx6Button8setAlphaEh>
	SelectVodka.setAlpha(135);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	f603 4384 	addw	r3, r3, #3204	; 0xc84
 80096d8:	2187      	movs	r1, #135	; 0x87
 80096da:	4618      	mov	r0, r3
 80096dc:	f7fb f9da 	bl	8004a94 <_ZN8touchgfx6Button8setAlphaEh>
	SelectWater.setAlpha(135);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	f603 53d8 	addw	r3, r3, #3544	; 0xdd8
 80096e6:	2187      	movs	r1, #135	; 0x87
 80096e8:	4618      	mov	r0, r3
 80096ea:	f7fb f9d3 	bl	8004a94 <_ZN8touchgfx6Button8setAlphaEh>
	SelectTodo1.setAlpha(135);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	f503 6344 	add.w	r3, r3, #3136	; 0xc40
 80096f4:	2187      	movs	r1, #135	; 0x87
 80096f6:	4618      	mov	r0, r3
 80096f8:	f7fb f9cc 	bl	8004a94 <_ZN8touchgfx6Button8setAlphaEh>
	SelectTodo1_1.setAlpha(135);
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	f603 33fc 	addw	r3, r3, #3068	; 0xbfc
 8009702:	2187      	movs	r1, #135	; 0x87
 8009704:	4618      	mov	r0, r3
 8009706:	f7fb f9c5 	bl	8004a94 <_ZN8touchgfx6Button8setAlphaEh>
	
    HidePumpSetup();
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	3394      	adds	r3, #148	; 0x94
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	6878      	ldr	r0, [r7, #4]
 8009714:	4798      	blx	r3
	ShowSettings();
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	338c      	adds	r3, #140	; 0x8c
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	6878      	ldr	r0, [r7, #4]
 8009720:	4798      	blx	r3
}
 8009722:	bf00      	nop
 8009724:	3708      	adds	r7, #8
 8009726:	46bd      	mov	sp, r7
 8009728:	bd80      	pop	{r7, pc}
 800972a:	bf00      	nop
 800972c:	08023f1c 	.word	0x08023f1c

08009730 <_ZN11Screen1View7ToTodo2Ev>:

void Screen1View::ToTodo2()
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b082      	sub	sp, #8
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
	if (PumpID == 1)
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	f503 5376 	add.w	r3, r3, #15744	; 0x3d80
 800973e:	3321      	adds	r3, #33	; 0x21
 8009740:	781b      	ldrb	r3, [r3, #0]
 8009742:	2b01      	cmp	r3, #1
 8009744:	d108      	bne.n	8009758 <_ZN11Screen1View7ToTodo2Ev+0x28>
	{
		Unicode::snprintf(Pump1ContentBuffer, PUMP1CONTENT_SIZE, "Todo2");
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	f503 6366 	add.w	r3, r3, #3680	; 0xe60
 800974c:	4a3e      	ldr	r2, [pc, #248]	; (8009848 <_ZN11Screen1View7ToTodo2Ev+0x118>)
 800974e:	2108      	movs	r1, #8
 8009750:	4618      	mov	r0, r3
 8009752:	f00f fa19 	bl	8018b88 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8009756:	e027      	b.n	80097a8 <_ZN11Screen1View7ToTodo2Ev+0x78>
	}
	else if (PumpID == 2)
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	f503 5376 	add.w	r3, r3, #15744	; 0x3d80
 800975e:	3321      	adds	r3, #33	; 0x21
 8009760:	781b      	ldrb	r3, [r3, #0]
 8009762:	2b02      	cmp	r3, #2
 8009764:	d108      	bne.n	8009778 <_ZN11Screen1View7ToTodo2Ev+0x48>
	{
		Unicode::snprintf(Pump2ContentBuffer, PUMP2CONTENT_SIZE, "Todo2");
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	f503 6367 	add.w	r3, r3, #3696	; 0xe70
 800976c:	4a36      	ldr	r2, [pc, #216]	; (8009848 <_ZN11Screen1View7ToTodo2Ev+0x118>)
 800976e:	2108      	movs	r1, #8
 8009770:	4618      	mov	r0, r3
 8009772:	f00f fa09 	bl	8018b88 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8009776:	e017      	b.n	80097a8 <_ZN11Screen1View7ToTodo2Ev+0x78>
	}
	else if (PumpID == 3)
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	f503 5376 	add.w	r3, r3, #15744	; 0x3d80
 800977e:	3321      	adds	r3, #33	; 0x21
 8009780:	781b      	ldrb	r3, [r3, #0]
 8009782:	2b03      	cmp	r3, #3
 8009784:	d108      	bne.n	8009798 <_ZN11Screen1View7ToTodo2Ev+0x68>
	{
		Unicode::snprintf(Pump3ContentBuffer, PUMP3CONTENT_SIZE, "Todo2");
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	f503 6368 	add.w	r3, r3, #3712	; 0xe80
 800978c:	4a2e      	ldr	r2, [pc, #184]	; (8009848 <_ZN11Screen1View7ToTodo2Ev+0x118>)
 800978e:	2108      	movs	r1, #8
 8009790:	4618      	mov	r0, r3
 8009792:	f00f f9f9 	bl	8018b88 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8009796:	e007      	b.n	80097a8 <_ZN11Screen1View7ToTodo2Ev+0x78>
	}
	else
	{
		Unicode::snprintf(Pump4ContentBuffer, PUMP4CONTENT_SIZE, "Todo2");
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	f503 6369 	add.w	r3, r3, #3728	; 0xe90
 800979e:	4a2a      	ldr	r2, [pc, #168]	; (8009848 <_ZN11Screen1View7ToTodo2Ev+0x118>)
 80097a0:	2108      	movs	r1, #8
 80097a2:	4618      	mov	r0, r3
 80097a4:	f00f f9f0 	bl	8018b88 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	}
	
	SelectJuice.setAlpha(135);
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	f603 631c 	addw	r3, r3, #3612	; 0xe1c
 80097ae:	2187      	movs	r1, #135	; 0x87
 80097b0:	4618      	mov	r0, r3
 80097b2:	f7fb f96f 	bl	8004a94 <_ZN8touchgfx6Button8setAlphaEh>
	SelectGin.setAlpha(135);
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	f503 6355 	add.w	r3, r3, #3408	; 0xd50
 80097bc:	2187      	movs	r1, #135	; 0x87
 80097be:	4618      	mov	r0, r3
 80097c0:	f7fb f968 	bl	8004a94 <_ZN8touchgfx6Button8setAlphaEh>
	SelectNone.setAlpha(135);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	f603 5394 	addw	r3, r3, #3476	; 0xd94
 80097ca:	2187      	movs	r1, #135	; 0x87
 80097cc:	4618      	mov	r0, r3
 80097ce:	f7fb f961 	bl	8004a94 <_ZN8touchgfx6Button8setAlphaEh>
	SelectRum.setAlpha(135);
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	f603 530c 	addw	r3, r3, #3340	; 0xd0c
 80097d8:	2187      	movs	r1, #135	; 0x87
 80097da:	4618      	mov	r0, r3
 80097dc:	f7fb f95a 	bl	8004a94 <_ZN8touchgfx6Button8setAlphaEh>
	SelectTequila.setAlpha(135);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	f603 43c8 	addw	r3, r3, #3272	; 0xcc8
 80097e6:	2187      	movs	r1, #135	; 0x87
 80097e8:	4618      	mov	r0, r3
 80097ea:	f7fb f953 	bl	8004a94 <_ZN8touchgfx6Button8setAlphaEh>
	SelectVodka.setAlpha(135);
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	f603 4384 	addw	r3, r3, #3204	; 0xc84
 80097f4:	2187      	movs	r1, #135	; 0x87
 80097f6:	4618      	mov	r0, r3
 80097f8:	f7fb f94c 	bl	8004a94 <_ZN8touchgfx6Button8setAlphaEh>
	SelectWater.setAlpha(135);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	f603 53d8 	addw	r3, r3, #3544	; 0xdd8
 8009802:	2187      	movs	r1, #135	; 0x87
 8009804:	4618      	mov	r0, r3
 8009806:	f7fb f945 	bl	8004a94 <_ZN8touchgfx6Button8setAlphaEh>
	SelectTodo1.setAlpha(135);
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	f503 6344 	add.w	r3, r3, #3136	; 0xc40
 8009810:	2187      	movs	r1, #135	; 0x87
 8009812:	4618      	mov	r0, r3
 8009814:	f7fb f93e 	bl	8004a94 <_ZN8touchgfx6Button8setAlphaEh>
	SelectTodo1_1.setAlpha(135);
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	f603 33fc 	addw	r3, r3, #3068	; 0xbfc
 800981e:	2187      	movs	r1, #135	; 0x87
 8009820:	4618      	mov	r0, r3
 8009822:	f7fb f937 	bl	8004a94 <_ZN8touchgfx6Button8setAlphaEh>
	
    HidePumpSetup();
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	3394      	adds	r3, #148	; 0x94
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	6878      	ldr	r0, [r7, #4]
 8009830:	4798      	blx	r3
	ShowSettings();
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	338c      	adds	r3, #140	; 0x8c
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	6878      	ldr	r0, [r7, #4]
 800983c:	4798      	blx	r3
}
 800983e:	bf00      	nop
 8009840:	3708      	adds	r7, #8
 8009842:	46bd      	mov	sp, r7
 8009844:	bd80      	pop	{r7, pc}
 8009846:	bf00      	nop
 8009848:	08023f24 	.word	0x08023f24

0800984c <_ZN11Screen1View12HideMainMenuEv>:
*										*
*	FUNCTIONS FOR COMMON INTERACTIONS	*
*										*
****************************************/
void Screen1View::HideMainMenu()
{
 800984c:	b580      	push	{r7, lr}
 800984e:	b082      	sub	sp, #8
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
	//Hide "Pour" button
	PourButton.setVisible(false);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	33a0      	adds	r3, #160	; 0xa0
 8009858:	2100      	movs	r1, #0
 800985a:	4618      	mov	r0, r3
 800985c:	f7fa fefa 	bl	8004654 <_ZN8touchgfx8Drawable10setVisibleEb>
	PourButton.invalidate();
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	33a0      	adds	r3, #160	; 0xa0
 8009864:	4618      	mov	r0, r3
 8009866:	f00d fcf7 	bl	8017258 <_ZNK8touchgfx8Drawable10invalidateEv>
	
	//Hide Scroll List
	ScrollList.setVisible(false);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	33e4      	adds	r3, #228	; 0xe4
 800986e:	2100      	movs	r1, #0
 8009870:	4618      	mov	r0, r3
 8009872:	f7fa feef 	bl	8004654 <_ZN8touchgfx8Drawable10setVisibleEb>
	ScrollList.invalidate();
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	33e4      	adds	r3, #228	; 0xe4
 800987a:	4618      	mov	r0, r3
 800987c:	f00d fcec 	bl	8017258 <_ZNK8touchgfx8Drawable10invalidateEv>
	
	//Hide Settings button
	SettingsButton.setVisible(false);
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	f503 7343 	add.w	r3, r3, #780	; 0x30c
 8009886:	2100      	movs	r1, #0
 8009888:	4618      	mov	r0, r3
 800988a:	f7fa fee3 	bl	8004654 <_ZN8touchgfx8Drawable10setVisibleEb>
	SettingsButton.invalidate();
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	f503 7343 	add.w	r3, r3, #780	; 0x30c
 8009894:	4618      	mov	r0, r3
 8009896:	f00d fcdf 	bl	8017258 <_ZNK8touchgfx8Drawable10invalidateEv>
}
 800989a:	bf00      	nop
 800989c:	3708      	adds	r7, #8
 800989e:	46bd      	mov	sp, r7
 80098a0:	bd80      	pop	{r7, pc}

080098a2 <_ZN11Screen1View12ShowMainMenuEv>:

void Screen1View::ShowMainMenu()
{
 80098a2:	b580      	push	{r7, lr}
 80098a4:	b082      	sub	sp, #8
 80098a6:	af00      	add	r7, sp, #0
 80098a8:	6078      	str	r0, [r7, #4]
	//Show "Pour" button
	PourButton.setVisible(true);
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	33a0      	adds	r3, #160	; 0xa0
 80098ae:	2101      	movs	r1, #1
 80098b0:	4618      	mov	r0, r3
 80098b2:	f7fa fecf 	bl	8004654 <_ZN8touchgfx8Drawable10setVisibleEb>
	PourButton.invalidate();
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	33a0      	adds	r3, #160	; 0xa0
 80098ba:	4618      	mov	r0, r3
 80098bc:	f00d fccc 	bl	8017258 <_ZNK8touchgfx8Drawable10invalidateEv>
	
	//Show Scroll List
	ScrollList.setVisible(true);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	33e4      	adds	r3, #228	; 0xe4
 80098c4:	2101      	movs	r1, #1
 80098c6:	4618      	mov	r0, r3
 80098c8:	f7fa fec4 	bl	8004654 <_ZN8touchgfx8Drawable10setVisibleEb>
	ScrollList.invalidate();
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	33e4      	adds	r3, #228	; 0xe4
 80098d0:	4618      	mov	r0, r3
 80098d2:	f00d fcc1 	bl	8017258 <_ZNK8touchgfx8Drawable10invalidateEv>
	
	//Show Settings button
	SettingsButton.setVisible(true);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	f503 7343 	add.w	r3, r3, #780	; 0x30c
 80098dc:	2101      	movs	r1, #1
 80098de:	4618      	mov	r0, r3
 80098e0:	f7fa feb8 	bl	8004654 <_ZN8touchgfx8Drawable10setVisibleEb>
	SettingsButton.invalidate();
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	f503 7343 	add.w	r3, r3, #780	; 0x30c
 80098ea:	4618      	mov	r0, r3
 80098ec:	f00d fcb4 	bl	8017258 <_ZNK8touchgfx8Drawable10invalidateEv>
}
 80098f0:	bf00      	nop
 80098f2:	3708      	adds	r7, #8
 80098f4:	46bd      	mov	sp, r7
 80098f6:	bd80      	pop	{r7, pc}

080098f8 <_ZN11Screen1View12HideSettingsEv>:

void Screen1View::HideSettings()
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b082      	sub	sp, #8
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
	//Hide exit settings button
	ExitButton.setVisible(false);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	336c      	adds	r3, #108	; 0x6c
 8009904:	2100      	movs	r1, #0
 8009906:	4618      	mov	r0, r3
 8009908:	f7fa fea4 	bl	8004654 <_ZN8touchgfx8Drawable10setVisibleEb>
	ExitButton.invalidate();
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	336c      	adds	r3, #108	; 0x6c
 8009910:	4618      	mov	r0, r3
 8009912:	f00d fca1 	bl	8017258 <_ZNK8touchgfx8Drawable10invalidateEv>
	
	//Hide size options buttons
	Button250mL.setVisible(false);
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800991c:	2100      	movs	r1, #0
 800991e:	4618      	mov	r0, r3
 8009920:	f7fa fe98 	bl	8004654 <_ZN8touchgfx8Drawable10setVisibleEb>
	Button500mL.setVisible(false);
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	f203 4344 	addw	r3, r3, #1092	; 0x444
 800992a:	2100      	movs	r1, #0
 800992c:	4618      	mov	r0, r3
 800992e:	f7fa fe91 	bl	8004654 <_ZN8touchgfx8Drawable10setVisibleEb>
	Button750mL.setVisible(false);
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	f503 6391 	add.w	r3, r3, #1160	; 0x488
 8009938:	2100      	movs	r1, #0
 800993a:	4618      	mov	r0, r3
 800993c:	f7fa fe8a 	bl	8004654 <_ZN8touchgfx8Drawable10setVisibleEb>
	Button250mL.invalidate();
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009946:	4618      	mov	r0, r3
 8009948:	f00d fc86 	bl	8017258 <_ZNK8touchgfx8Drawable10invalidateEv>
	Button500mL.invalidate();
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	f203 4344 	addw	r3, r3, #1092	; 0x444
 8009952:	4618      	mov	r0, r3
 8009954:	f00d fc80 	bl	8017258 <_ZNK8touchgfx8Drawable10invalidateEv>
	Button750mL.invalidate();
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	f503 6391 	add.w	r3, r3, #1160	; 0x488
 800995e:	4618      	mov	r0, r3
 8009960:	f00d fc7a 	bl	8017258 <_ZNK8touchgfx8Drawable10invalidateEv>
	
	//Hide pump setting text and buttons
	Pump1Text.setVisible(false);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	f503 63db 	add.w	r3, r3, #1752	; 0x6d8
 800996a:	2100      	movs	r1, #0
 800996c:	4618      	mov	r0, r3
 800996e:	f7fa fe71 	bl	8004654 <_ZN8touchgfx8Drawable10setVisibleEb>
	Pump2Text.setVisible(false);
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	f203 730c 	addw	r3, r3, #1804	; 0x70c
 8009978:	2100      	movs	r1, #0
 800997a:	4618      	mov	r0, r3
 800997c:	f7fa fe6a 	bl	8004654 <_ZN8touchgfx8Drawable10setVisibleEb>
	Pump3Text.setVisible(false);
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	f503 63e8 	add.w	r3, r3, #1856	; 0x740
 8009986:	2100      	movs	r1, #0
 8009988:	4618      	mov	r0, r3
 800998a:	f7fa fe63 	bl	8004654 <_ZN8touchgfx8Drawable10setVisibleEb>
	Pump4Text.setVisible(false);
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	f203 7374 	addw	r3, r3, #1908	; 0x774
 8009994:	2100      	movs	r1, #0
 8009996:	4618      	mov	r0, r3
 8009998:	f7fa fe5c 	bl	8004654 <_ZN8touchgfx8Drawable10setVisibleEb>
	Pump1Content.setVisible(false);
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	f603 23e8 	addw	r3, r3, #2792	; 0xae8
 80099a2:	2100      	movs	r1, #0
 80099a4:	4618      	mov	r0, r3
 80099a6:	f7fa fe55 	bl	8004654 <_ZN8touchgfx8Drawable10setVisibleEb>
	Pump2Content.setVisible(false);
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	f503 6332 	add.w	r3, r3, #2848	; 0xb20
 80099b0:	2100      	movs	r1, #0
 80099b2:	4618      	mov	r0, r3
 80099b4:	f7fa fe4e 	bl	8004654 <_ZN8touchgfx8Drawable10setVisibleEb>
	Pump3Content.setVisible(false);
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	f603 3358 	addw	r3, r3, #2904	; 0xb58
 80099be:	2100      	movs	r1, #0
 80099c0:	4618      	mov	r0, r3
 80099c2:	f7fa fe47 	bl	8004654 <_ZN8touchgfx8Drawable10setVisibleEb>
	Pump4Content.setVisible(false);
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	f503 6339 	add.w	r3, r3, #2960	; 0xb90
 80099cc:	2100      	movs	r1, #0
 80099ce:	4618      	mov	r0, r3
 80099d0:	f7fa fe40 	bl	8004654 <_ZN8touchgfx8Drawable10setVisibleEb>
	Pump1Change.setVisible(false);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	f603 134c 	addw	r3, r3, #2380	; 0x94c
 80099da:	2100      	movs	r1, #0
 80099dc:	4618      	mov	r0, r3
 80099de:	f7fa fe39 	bl	8004654 <_ZN8touchgfx8Drawable10setVisibleEb>
	Pump2Change.setVisible(false);
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	f503 6319 	add.w	r3, r3, #2448	; 0x990
 80099e8:	2100      	movs	r1, #0
 80099ea:	4618      	mov	r0, r3
 80099ec:	f7fa fe32 	bl	8004654 <_ZN8touchgfx8Drawable10setVisibleEb>
	Pump3Change.setVisible(false);
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	f603 13d4 	addw	r3, r3, #2516	; 0x9d4
 80099f6:	2100      	movs	r1, #0
 80099f8:	4618      	mov	r0, r3
 80099fa:	f7fa fe2b 	bl	8004654 <_ZN8touchgfx8Drawable10setVisibleEb>
	Pump4Change.setVisible(false);
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	f603 2318 	addw	r3, r3, #2584	; 0xa18
 8009a04:	2100      	movs	r1, #0
 8009a06:	4618      	mov	r0, r3
 8009a08:	f7fa fe24 	bl	8004654 <_ZN8touchgfx8Drawable10setVisibleEb>
	Pump1Text.invalidate();
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	f503 63db 	add.w	r3, r3, #1752	; 0x6d8
 8009a12:	4618      	mov	r0, r3
 8009a14:	f00d fc20 	bl	8017258 <_ZNK8touchgfx8Drawable10invalidateEv>
	Pump2Text.invalidate();
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	f203 730c 	addw	r3, r3, #1804	; 0x70c
 8009a1e:	4618      	mov	r0, r3
 8009a20:	f00d fc1a 	bl	8017258 <_ZNK8touchgfx8Drawable10invalidateEv>
	Pump3Text.invalidate();
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	f503 63e8 	add.w	r3, r3, #1856	; 0x740
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	f00d fc14 	bl	8017258 <_ZNK8touchgfx8Drawable10invalidateEv>
	Pump4Text.invalidate();
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	f203 7374 	addw	r3, r3, #1908	; 0x774
 8009a36:	4618      	mov	r0, r3
 8009a38:	f00d fc0e 	bl	8017258 <_ZNK8touchgfx8Drawable10invalidateEv>
	Pump1Content.invalidate();
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	f603 23e8 	addw	r3, r3, #2792	; 0xae8
 8009a42:	4618      	mov	r0, r3
 8009a44:	f00d fc08 	bl	8017258 <_ZNK8touchgfx8Drawable10invalidateEv>
	Pump2Content.invalidate();
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	f503 6332 	add.w	r3, r3, #2848	; 0xb20
 8009a4e:	4618      	mov	r0, r3
 8009a50:	f00d fc02 	bl	8017258 <_ZNK8touchgfx8Drawable10invalidateEv>
	Pump3Content.invalidate();
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	f603 3358 	addw	r3, r3, #2904	; 0xb58
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	f00d fbfc 	bl	8017258 <_ZNK8touchgfx8Drawable10invalidateEv>
	Pump4Content.invalidate();
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	f503 6339 	add.w	r3, r3, #2960	; 0xb90
 8009a66:	4618      	mov	r0, r3
 8009a68:	f00d fbf6 	bl	8017258 <_ZNK8touchgfx8Drawable10invalidateEv>
	Pump1Change.invalidate();
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	f603 134c 	addw	r3, r3, #2380	; 0x94c
 8009a72:	4618      	mov	r0, r3
 8009a74:	f00d fbf0 	bl	8017258 <_ZNK8touchgfx8Drawable10invalidateEv>
	Pump2Change.invalidate();
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	f503 6319 	add.w	r3, r3, #2448	; 0x990
 8009a7e:	4618      	mov	r0, r3
 8009a80:	f00d fbea 	bl	8017258 <_ZNK8touchgfx8Drawable10invalidateEv>
	Pump3Change.invalidate();
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	f603 13d4 	addw	r3, r3, #2516	; 0x9d4
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	f00d fbe4 	bl	8017258 <_ZNK8touchgfx8Drawable10invalidateEv>
	Pump4Change.invalidate();
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	f603 2318 	addw	r3, r3, #2584	; 0xa18
 8009a96:	4618      	mov	r0, r3
 8009a98:	f00d fbde 	bl	8017258 <_ZNK8touchgfx8Drawable10invalidateEv>
	
	//Hide text and lines
	QuantityText.setVisible(false);
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	f203 43cc 	addw	r3, r3, #1228	; 0x4cc
 8009aa2:	2100      	movs	r1, #0
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	f7fa fdd5 	bl	8004654 <_ZN8touchgfx8Drawable10setVisibleEb>
	SettingsText.setVisible(false);
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ab0:	2100      	movs	r1, #0
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	f7fa fdce 	bl	8004654 <_ZN8touchgfx8Drawable10setVisibleEb>
	Line1.setVisible(false);
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	f203 634c 	addw	r3, r3, #1612	; 0x64c
 8009abe:	2100      	movs	r1, #0
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	f7fa fdc7 	bl	8004654 <_ZN8touchgfx8Drawable10setVisibleEb>
	Line1_2.setVisible(false);
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	f603 235c 	addw	r3, r3, #2652	; 0xa5c
 8009acc:	2100      	movs	r1, #0
 8009ace:	4618      	mov	r0, r3
 8009ad0:	f7fa fdc0 	bl	8004654 <_ZN8touchgfx8Drawable10setVisibleEb>
	Line2.setVisible(false);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	f503 63b8 	add.w	r3, r3, #1472	; 0x5c0
 8009ada:	2100      	movs	r1, #0
 8009adc:	4618      	mov	r0, r3
 8009ade:	f7fa fdb9 	bl	8004654 <_ZN8touchgfx8Drawable10setVisibleEb>
	Line3.setVisible(false);
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	f203 5334 	addw	r3, r3, #1332	; 0x534
 8009ae8:	2100      	movs	r1, #0
 8009aea:	4618      	mov	r0, r3
 8009aec:	f7fa fdb2 	bl	8004654 <_ZN8touchgfx8Drawable10setVisibleEb>
	PumpDiv1.setVisible(false);
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	f503 63f5 	add.w	r3, r3, #1960	; 0x7a8
 8009af6:	2100      	movs	r1, #0
 8009af8:	4618      	mov	r0, r3
 8009afa:	f7fa fdab 	bl	8004654 <_ZN8touchgfx8Drawable10setVisibleEb>
	PumpDiv2.setVisible(false);
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	f603 0334 	addw	r3, r3, #2100	; 0x834
 8009b04:	2100      	movs	r1, #0
 8009b06:	4618      	mov	r0, r3
 8009b08:	f7fa fda4 	bl	8004654 <_ZN8touchgfx8Drawable10setVisibleEb>
	PumpDiv3.setVisible(false);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	f503 630c 	add.w	r3, r3, #2240	; 0x8c0
 8009b12:	2100      	movs	r1, #0
 8009b14:	4618      	mov	r0, r3
 8009b16:	f7fa fd9d 	bl	8004654 <_ZN8touchgfx8Drawable10setVisibleEb>
	QuantityText.invalidate();
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	f203 43cc 	addw	r3, r3, #1228	; 0x4cc
 8009b20:	4618      	mov	r0, r3
 8009b22:	f00d fb99 	bl	8017258 <_ZNK8touchgfx8Drawable10invalidateEv>
	SettingsText.invalidate();
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	f00d fb93 	bl	8017258 <_ZNK8touchgfx8Drawable10invalidateEv>
	Line1.invalidate();
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	f203 634c 	addw	r3, r3, #1612	; 0x64c
 8009b38:	4618      	mov	r0, r3
 8009b3a:	f00a ff0b 	bl	8014954 <_ZNK8touchgfx12CanvasWidget10invalidateEv>
	Line1_2.invalidate();
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	f603 235c 	addw	r3, r3, #2652	; 0xa5c
 8009b44:	4618      	mov	r0, r3
 8009b46:	f00a ff05 	bl	8014954 <_ZNK8touchgfx12CanvasWidget10invalidateEv>
	Line2.invalidate();
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	f503 63b8 	add.w	r3, r3, #1472	; 0x5c0
 8009b50:	4618      	mov	r0, r3
 8009b52:	f00a feff 	bl	8014954 <_ZNK8touchgfx12CanvasWidget10invalidateEv>
	Line3.invalidate();
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	f203 5334 	addw	r3, r3, #1332	; 0x534
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	f00a fef9 	bl	8014954 <_ZNK8touchgfx12CanvasWidget10invalidateEv>
	PumpDiv1.invalidate();
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	f503 63f5 	add.w	r3, r3, #1960	; 0x7a8
 8009b68:	4618      	mov	r0, r3
 8009b6a:	f00a fef3 	bl	8014954 <_ZNK8touchgfx12CanvasWidget10invalidateEv>
	PumpDiv2.invalidate();
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	f603 0334 	addw	r3, r3, #2100	; 0x834
 8009b74:	4618      	mov	r0, r3
 8009b76:	f00a feed 	bl	8014954 <_ZNK8touchgfx12CanvasWidget10invalidateEv>
	PumpDiv3.invalidate();
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	f503 630c 	add.w	r3, r3, #2240	; 0x8c0
 8009b80:	4618      	mov	r0, r3
 8009b82:	f00a fee7 	bl	8014954 <_ZNK8touchgfx12CanvasWidget10invalidateEv>
}
 8009b86:	bf00      	nop
 8009b88:	3708      	adds	r7, #8
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	bd80      	pop	{r7, pc}

08009b8e <_ZN11Screen1View12ShowSettingsEv>:

void Screen1View::ShowSettings()
{
 8009b8e:	b580      	push	{r7, lr}
 8009b90:	b082      	sub	sp, #8
 8009b92:	af00      	add	r7, sp, #0
 8009b94:	6078      	str	r0, [r7, #4]
	//Show exit settings button
	ExitButton.setVisible(true);
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	336c      	adds	r3, #108	; 0x6c
 8009b9a:	2101      	movs	r1, #1
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	f7fa fd59 	bl	8004654 <_ZN8touchgfx8Drawable10setVisibleEb>
	ExitButton.invalidate();
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	336c      	adds	r3, #108	; 0x6c
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	f00d fb56 	bl	8017258 <_ZNK8touchgfx8Drawable10invalidateEv>
	
	//Show size options buttons
	Button250mL.setVisible(true);
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009bb2:	2101      	movs	r1, #1
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	f7fa fd4d 	bl	8004654 <_ZN8touchgfx8Drawable10setVisibleEb>
	Button500mL.setVisible(true);
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	f203 4344 	addw	r3, r3, #1092	; 0x444
 8009bc0:	2101      	movs	r1, #1
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	f7fa fd46 	bl	8004654 <_ZN8touchgfx8Drawable10setVisibleEb>
	Button750mL.setVisible(true);
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	f503 6391 	add.w	r3, r3, #1160	; 0x488
 8009bce:	2101      	movs	r1, #1
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	f7fa fd3f 	bl	8004654 <_ZN8touchgfx8Drawable10setVisibleEb>
	Button250mL.invalidate();
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009bdc:	4618      	mov	r0, r3
 8009bde:	f00d fb3b 	bl	8017258 <_ZNK8touchgfx8Drawable10invalidateEv>
	Button500mL.invalidate();
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	f203 4344 	addw	r3, r3, #1092	; 0x444
 8009be8:	4618      	mov	r0, r3
 8009bea:	f00d fb35 	bl	8017258 <_ZNK8touchgfx8Drawable10invalidateEv>
	Button750mL.invalidate();
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	f503 6391 	add.w	r3, r3, #1160	; 0x488
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	f00d fb2f 	bl	8017258 <_ZNK8touchgfx8Drawable10invalidateEv>
	
	//Show pump setting text and buttons
	Pump1Text.setVisible(true);
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	f503 63db 	add.w	r3, r3, #1752	; 0x6d8
 8009c00:	2101      	movs	r1, #1
 8009c02:	4618      	mov	r0, r3
 8009c04:	f7fa fd26 	bl	8004654 <_ZN8touchgfx8Drawable10setVisibleEb>
	Pump2Text.setVisible(true);
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	f203 730c 	addw	r3, r3, #1804	; 0x70c
 8009c0e:	2101      	movs	r1, #1
 8009c10:	4618      	mov	r0, r3
 8009c12:	f7fa fd1f 	bl	8004654 <_ZN8touchgfx8Drawable10setVisibleEb>
	Pump3Text.setVisible(true);
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	f503 63e8 	add.w	r3, r3, #1856	; 0x740
 8009c1c:	2101      	movs	r1, #1
 8009c1e:	4618      	mov	r0, r3
 8009c20:	f7fa fd18 	bl	8004654 <_ZN8touchgfx8Drawable10setVisibleEb>
	Pump4Text.setVisible(true);
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	f203 7374 	addw	r3, r3, #1908	; 0x774
 8009c2a:	2101      	movs	r1, #1
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	f7fa fd11 	bl	8004654 <_ZN8touchgfx8Drawable10setVisibleEb>
	Pump1Content.setVisible(true);
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	f603 23e8 	addw	r3, r3, #2792	; 0xae8
 8009c38:	2101      	movs	r1, #1
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	f7fa fd0a 	bl	8004654 <_ZN8touchgfx8Drawable10setVisibleEb>
	Pump2Content.setVisible(true);
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	f503 6332 	add.w	r3, r3, #2848	; 0xb20
 8009c46:	2101      	movs	r1, #1
 8009c48:	4618      	mov	r0, r3
 8009c4a:	f7fa fd03 	bl	8004654 <_ZN8touchgfx8Drawable10setVisibleEb>
	Pump3Content.setVisible(true);
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	f603 3358 	addw	r3, r3, #2904	; 0xb58
 8009c54:	2101      	movs	r1, #1
 8009c56:	4618      	mov	r0, r3
 8009c58:	f7fa fcfc 	bl	8004654 <_ZN8touchgfx8Drawable10setVisibleEb>
	Pump4Content.setVisible(true);
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	f503 6339 	add.w	r3, r3, #2960	; 0xb90
 8009c62:	2101      	movs	r1, #1
 8009c64:	4618      	mov	r0, r3
 8009c66:	f7fa fcf5 	bl	8004654 <_ZN8touchgfx8Drawable10setVisibleEb>
	Pump1Change.setVisible(true);
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	f603 134c 	addw	r3, r3, #2380	; 0x94c
 8009c70:	2101      	movs	r1, #1
 8009c72:	4618      	mov	r0, r3
 8009c74:	f7fa fcee 	bl	8004654 <_ZN8touchgfx8Drawable10setVisibleEb>
	Pump2Change.setVisible(true);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	f503 6319 	add.w	r3, r3, #2448	; 0x990
 8009c7e:	2101      	movs	r1, #1
 8009c80:	4618      	mov	r0, r3
 8009c82:	f7fa fce7 	bl	8004654 <_ZN8touchgfx8Drawable10setVisibleEb>
	Pump3Change.setVisible(true);
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	f603 13d4 	addw	r3, r3, #2516	; 0x9d4
 8009c8c:	2101      	movs	r1, #1
 8009c8e:	4618      	mov	r0, r3
 8009c90:	f7fa fce0 	bl	8004654 <_ZN8touchgfx8Drawable10setVisibleEb>
	Pump4Change.setVisible(true);
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	f603 2318 	addw	r3, r3, #2584	; 0xa18
 8009c9a:	2101      	movs	r1, #1
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	f7fa fcd9 	bl	8004654 <_ZN8touchgfx8Drawable10setVisibleEb>
	Pump1Text.invalidate();
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	f503 63db 	add.w	r3, r3, #1752	; 0x6d8
 8009ca8:	4618      	mov	r0, r3
 8009caa:	f00d fad5 	bl	8017258 <_ZNK8touchgfx8Drawable10invalidateEv>
	Pump2Text.invalidate();
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	f203 730c 	addw	r3, r3, #1804	; 0x70c
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	f00d facf 	bl	8017258 <_ZNK8touchgfx8Drawable10invalidateEv>
	Pump3Text.invalidate();
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	f503 63e8 	add.w	r3, r3, #1856	; 0x740
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	f00d fac9 	bl	8017258 <_ZNK8touchgfx8Drawable10invalidateEv>
	Pump4Text.invalidate();
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	f203 7374 	addw	r3, r3, #1908	; 0x774
 8009ccc:	4618      	mov	r0, r3
 8009cce:	f00d fac3 	bl	8017258 <_ZNK8touchgfx8Drawable10invalidateEv>
	Pump1Content.invalidate();
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	f603 23e8 	addw	r3, r3, #2792	; 0xae8
 8009cd8:	4618      	mov	r0, r3
 8009cda:	f00d fabd 	bl	8017258 <_ZNK8touchgfx8Drawable10invalidateEv>
	Pump2Content.invalidate();
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	f503 6332 	add.w	r3, r3, #2848	; 0xb20
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	f00d fab7 	bl	8017258 <_ZNK8touchgfx8Drawable10invalidateEv>
	Pump3Content.invalidate();
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	f603 3358 	addw	r3, r3, #2904	; 0xb58
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	f00d fab1 	bl	8017258 <_ZNK8touchgfx8Drawable10invalidateEv>
	Pump4Content.invalidate();
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	f503 6339 	add.w	r3, r3, #2960	; 0xb90
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	f00d faab 	bl	8017258 <_ZNK8touchgfx8Drawable10invalidateEv>
	Pump1Change.invalidate();
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	f603 134c 	addw	r3, r3, #2380	; 0x94c
 8009d08:	4618      	mov	r0, r3
 8009d0a:	f00d faa5 	bl	8017258 <_ZNK8touchgfx8Drawable10invalidateEv>
	Pump2Change.invalidate();
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	f503 6319 	add.w	r3, r3, #2448	; 0x990
 8009d14:	4618      	mov	r0, r3
 8009d16:	f00d fa9f 	bl	8017258 <_ZNK8touchgfx8Drawable10invalidateEv>
	Pump3Change.invalidate();
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	f603 13d4 	addw	r3, r3, #2516	; 0x9d4
 8009d20:	4618      	mov	r0, r3
 8009d22:	f00d fa99 	bl	8017258 <_ZNK8touchgfx8Drawable10invalidateEv>
	Pump4Change.invalidate();
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	f603 2318 	addw	r3, r3, #2584	; 0xa18
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	f00d fa93 	bl	8017258 <_ZNK8touchgfx8Drawable10invalidateEv>
	
	//Show text and lines
	QuantityText.setVisible(true);
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	f203 43cc 	addw	r3, r3, #1228	; 0x4cc
 8009d38:	2101      	movs	r1, #1
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	f7fa fc8a 	bl	8004654 <_ZN8touchgfx8Drawable10setVisibleEb>
	SettingsText.setVisible(true);
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d46:	2101      	movs	r1, #1
 8009d48:	4618      	mov	r0, r3
 8009d4a:	f7fa fc83 	bl	8004654 <_ZN8touchgfx8Drawable10setVisibleEb>
	Line1.setVisible(true);
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	f203 634c 	addw	r3, r3, #1612	; 0x64c
 8009d54:	2101      	movs	r1, #1
 8009d56:	4618      	mov	r0, r3
 8009d58:	f7fa fc7c 	bl	8004654 <_ZN8touchgfx8Drawable10setVisibleEb>
	Line1_2.setVisible(true);
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	f603 235c 	addw	r3, r3, #2652	; 0xa5c
 8009d62:	2101      	movs	r1, #1
 8009d64:	4618      	mov	r0, r3
 8009d66:	f7fa fc75 	bl	8004654 <_ZN8touchgfx8Drawable10setVisibleEb>
	Line2.setVisible(true);
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	f503 63b8 	add.w	r3, r3, #1472	; 0x5c0
 8009d70:	2101      	movs	r1, #1
 8009d72:	4618      	mov	r0, r3
 8009d74:	f7fa fc6e 	bl	8004654 <_ZN8touchgfx8Drawable10setVisibleEb>
	Line3.setVisible(true);
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	f203 5334 	addw	r3, r3, #1332	; 0x534
 8009d7e:	2101      	movs	r1, #1
 8009d80:	4618      	mov	r0, r3
 8009d82:	f7fa fc67 	bl	8004654 <_ZN8touchgfx8Drawable10setVisibleEb>
	PumpDiv1.setVisible(true);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	f503 63f5 	add.w	r3, r3, #1960	; 0x7a8
 8009d8c:	2101      	movs	r1, #1
 8009d8e:	4618      	mov	r0, r3
 8009d90:	f7fa fc60 	bl	8004654 <_ZN8touchgfx8Drawable10setVisibleEb>
	PumpDiv2.setVisible(true);
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	f603 0334 	addw	r3, r3, #2100	; 0x834
 8009d9a:	2101      	movs	r1, #1
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	f7fa fc59 	bl	8004654 <_ZN8touchgfx8Drawable10setVisibleEb>
	PumpDiv3.setVisible(true);
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	f503 630c 	add.w	r3, r3, #2240	; 0x8c0
 8009da8:	2101      	movs	r1, #1
 8009daa:	4618      	mov	r0, r3
 8009dac:	f7fa fc52 	bl	8004654 <_ZN8touchgfx8Drawable10setVisibleEb>
	QuantityText.invalidate();
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	f203 43cc 	addw	r3, r3, #1228	; 0x4cc
 8009db6:	4618      	mov	r0, r3
 8009db8:	f00d fa4e 	bl	8017258 <_ZNK8touchgfx8Drawable10invalidateEv>
	SettingsText.invalidate();
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	f00d fa48 	bl	8017258 <_ZNK8touchgfx8Drawable10invalidateEv>
	Line1.invalidate();
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	f203 634c 	addw	r3, r3, #1612	; 0x64c
 8009dce:	4618      	mov	r0, r3
 8009dd0:	f00a fdc0 	bl	8014954 <_ZNK8touchgfx12CanvasWidget10invalidateEv>
	Line1_2.invalidate();
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	f603 235c 	addw	r3, r3, #2652	; 0xa5c
 8009dda:	4618      	mov	r0, r3
 8009ddc:	f00a fdba 	bl	8014954 <_ZNK8touchgfx12CanvasWidget10invalidateEv>
	Line2.invalidate();
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	f503 63b8 	add.w	r3, r3, #1472	; 0x5c0
 8009de6:	4618      	mov	r0, r3
 8009de8:	f00a fdb4 	bl	8014954 <_ZNK8touchgfx12CanvasWidget10invalidateEv>
	Line3.invalidate();
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	f203 5334 	addw	r3, r3, #1332	; 0x534
 8009df2:	4618      	mov	r0, r3
 8009df4:	f00a fdae 	bl	8014954 <_ZNK8touchgfx12CanvasWidget10invalidateEv>
	PumpDiv1.invalidate();
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	f503 63f5 	add.w	r3, r3, #1960	; 0x7a8
 8009dfe:	4618      	mov	r0, r3
 8009e00:	f00a fda8 	bl	8014954 <_ZNK8touchgfx12CanvasWidget10invalidateEv>
	PumpDiv2.invalidate();
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	f603 0334 	addw	r3, r3, #2100	; 0x834
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	f00a fda2 	bl	8014954 <_ZNK8touchgfx12CanvasWidget10invalidateEv>
	PumpDiv3.invalidate();
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	f503 630c 	add.w	r3, r3, #2240	; 0x8c0
 8009e16:	4618      	mov	r0, r3
 8009e18:	f00a fd9c 	bl	8014954 <_ZNK8touchgfx12CanvasWidget10invalidateEv>
}
 8009e1c:	bf00      	nop
 8009e1e:	3708      	adds	r7, #8
 8009e20:	46bd      	mov	sp, r7
 8009e22:	bd80      	pop	{r7, pc}

08009e24 <_ZN11Screen1View13ShowPumpSetupEv>:

void Screen1View::ShowPumpSetup()
{
 8009e24:	b580      	push	{r7, lr}
 8009e26:	b082      	sub	sp, #8
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	6078      	str	r0, [r7, #4]
	//Show liquid option buttons
	SelectText.setVisible(true);
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	f603 33c8 	addw	r3, r3, #3016	; 0xbc8
 8009e32:	2101      	movs	r1, #1
 8009e34:	4618      	mov	r0, r3
 8009e36:	f7fa fc0d 	bl	8004654 <_ZN8touchgfx8Drawable10setVisibleEb>
	SelectWater.setVisible(true);
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	f603 53d8 	addw	r3, r3, #3544	; 0xdd8
 8009e40:	2101      	movs	r1, #1
 8009e42:	4618      	mov	r0, r3
 8009e44:	f7fa fc06 	bl	8004654 <_ZN8touchgfx8Drawable10setVisibleEb>
	SelectNone.setVisible(true);
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	f603 5394 	addw	r3, r3, #3476	; 0xd94
 8009e4e:	2101      	movs	r1, #1
 8009e50:	4618      	mov	r0, r3
 8009e52:	f7fa fbff 	bl	8004654 <_ZN8touchgfx8Drawable10setVisibleEb>
	SelectJuice.setVisible(true);
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	f603 631c 	addw	r3, r3, #3612	; 0xe1c
 8009e5c:	2101      	movs	r1, #1
 8009e5e:	4618      	mov	r0, r3
 8009e60:	f7fa fbf8 	bl	8004654 <_ZN8touchgfx8Drawable10setVisibleEb>
	SelectVodka.setVisible(true);
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	f603 4384 	addw	r3, r3, #3204	; 0xc84
 8009e6a:	2101      	movs	r1, #1
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	f7fa fbf1 	bl	8004654 <_ZN8touchgfx8Drawable10setVisibleEb>
	SelectTequila.setVisible(true);
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	f603 43c8 	addw	r3, r3, #3272	; 0xcc8
 8009e78:	2101      	movs	r1, #1
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	f7fa fbea 	bl	8004654 <_ZN8touchgfx8Drawable10setVisibleEb>
	SelectRum.setVisible(true);
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	f603 530c 	addw	r3, r3, #3340	; 0xd0c
 8009e86:	2101      	movs	r1, #1
 8009e88:	4618      	mov	r0, r3
 8009e8a:	f7fa fbe3 	bl	8004654 <_ZN8touchgfx8Drawable10setVisibleEb>
	SelectGin.setVisible(true);
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	f503 6355 	add.w	r3, r3, #3408	; 0xd50
 8009e94:	2101      	movs	r1, #1
 8009e96:	4618      	mov	r0, r3
 8009e98:	f7fa fbdc 	bl	8004654 <_ZN8touchgfx8Drawable10setVisibleEb>
	SelectTodo1_1.setVisible(true);
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	f603 33fc 	addw	r3, r3, #3068	; 0xbfc
 8009ea2:	2101      	movs	r1, #1
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	f7fa fbd5 	bl	8004654 <_ZN8touchgfx8Drawable10setVisibleEb>
	SelectTodo1.setVisible(true);
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	f503 6344 	add.w	r3, r3, #3136	; 0xc40
 8009eb0:	2101      	movs	r1, #1
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	f7fa fbce 	bl	8004654 <_ZN8touchgfx8Drawable10setVisibleEb>
	SelectText.invalidate();
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	f603 33c8 	addw	r3, r3, #3016	; 0xbc8
 8009ebe:	4618      	mov	r0, r3
 8009ec0:	f00d f9ca 	bl	8017258 <_ZNK8touchgfx8Drawable10invalidateEv>
	SelectVodka.invalidate();
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	f603 4384 	addw	r3, r3, #3204	; 0xc84
 8009eca:	4618      	mov	r0, r3
 8009ecc:	f00d f9c4 	bl	8017258 <_ZNK8touchgfx8Drawable10invalidateEv>
	SelectTequila.invalidate();
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	f603 43c8 	addw	r3, r3, #3272	; 0xcc8
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	f00d f9be 	bl	8017258 <_ZNK8touchgfx8Drawable10invalidateEv>
	SelectRum.invalidate();
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	f603 530c 	addw	r3, r3, #3340	; 0xd0c
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	f00d f9b8 	bl	8017258 <_ZNK8touchgfx8Drawable10invalidateEv>
	SelectWater.invalidate();
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	f603 53d8 	addw	r3, r3, #3544	; 0xdd8
 8009eee:	4618      	mov	r0, r3
 8009ef0:	f00d f9b2 	bl	8017258 <_ZNK8touchgfx8Drawable10invalidateEv>
	SelectGin.invalidate();
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	f503 6355 	add.w	r3, r3, #3408	; 0xd50
 8009efa:	4618      	mov	r0, r3
 8009efc:	f00d f9ac 	bl	8017258 <_ZNK8touchgfx8Drawable10invalidateEv>
	SelectNone.invalidate();
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	f603 5394 	addw	r3, r3, #3476	; 0xd94
 8009f06:	4618      	mov	r0, r3
 8009f08:	f00d f9a6 	bl	8017258 <_ZNK8touchgfx8Drawable10invalidateEv>
	SelectJuice.invalidate();
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	f603 631c 	addw	r3, r3, #3612	; 0xe1c
 8009f12:	4618      	mov	r0, r3
 8009f14:	f00d f9a0 	bl	8017258 <_ZNK8touchgfx8Drawable10invalidateEv>
	SelectTodo1_1.invalidate();
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	f603 33fc 	addw	r3, r3, #3068	; 0xbfc
 8009f1e:	4618      	mov	r0, r3
 8009f20:	f00d f99a 	bl	8017258 <_ZNK8touchgfx8Drawable10invalidateEv>
	SelectTodo1.invalidate();
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	f503 6344 	add.w	r3, r3, #3136	; 0xc40
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	f00d f994 	bl	8017258 <_ZNK8touchgfx8Drawable10invalidateEv>
}
 8009f30:	bf00      	nop
 8009f32:	3708      	adds	r7, #8
 8009f34:	46bd      	mov	sp, r7
 8009f36:	bd80      	pop	{r7, pc}

08009f38 <_ZN11Screen1View13HidePumpSetupEv>:

void Screen1View::HidePumpSetup()
{
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	b082      	sub	sp, #8
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]
	//Hide liquid option buttons
	SelectText.setVisible(false);
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	f603 33c8 	addw	r3, r3, #3016	; 0xbc8
 8009f46:	2100      	movs	r1, #0
 8009f48:	4618      	mov	r0, r3
 8009f4a:	f7fa fb83 	bl	8004654 <_ZN8touchgfx8Drawable10setVisibleEb>
	SelectWater.setVisible(false);
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	f603 53d8 	addw	r3, r3, #3544	; 0xdd8
 8009f54:	2100      	movs	r1, #0
 8009f56:	4618      	mov	r0, r3
 8009f58:	f7fa fb7c 	bl	8004654 <_ZN8touchgfx8Drawable10setVisibleEb>
	SelectNone.setVisible(false);
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	f603 5394 	addw	r3, r3, #3476	; 0xd94
 8009f62:	2100      	movs	r1, #0
 8009f64:	4618      	mov	r0, r3
 8009f66:	f7fa fb75 	bl	8004654 <_ZN8touchgfx8Drawable10setVisibleEb>
	SelectJuice.setVisible(false);
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	f603 631c 	addw	r3, r3, #3612	; 0xe1c
 8009f70:	2100      	movs	r1, #0
 8009f72:	4618      	mov	r0, r3
 8009f74:	f7fa fb6e 	bl	8004654 <_ZN8touchgfx8Drawable10setVisibleEb>
	SelectVodka.setVisible(false);
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	f603 4384 	addw	r3, r3, #3204	; 0xc84
 8009f7e:	2100      	movs	r1, #0
 8009f80:	4618      	mov	r0, r3
 8009f82:	f7fa fb67 	bl	8004654 <_ZN8touchgfx8Drawable10setVisibleEb>
	SelectTequila.setVisible(false);
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	f603 43c8 	addw	r3, r3, #3272	; 0xcc8
 8009f8c:	2100      	movs	r1, #0
 8009f8e:	4618      	mov	r0, r3
 8009f90:	f7fa fb60 	bl	8004654 <_ZN8touchgfx8Drawable10setVisibleEb>
	SelectRum.setVisible(false);
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	f603 530c 	addw	r3, r3, #3340	; 0xd0c
 8009f9a:	2100      	movs	r1, #0
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	f7fa fb59 	bl	8004654 <_ZN8touchgfx8Drawable10setVisibleEb>
	SelectGin.setVisible(false);
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	f503 6355 	add.w	r3, r3, #3408	; 0xd50
 8009fa8:	2100      	movs	r1, #0
 8009faa:	4618      	mov	r0, r3
 8009fac:	f7fa fb52 	bl	8004654 <_ZN8touchgfx8Drawable10setVisibleEb>
	SelectTodo1_1.setVisible(false);
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	f603 33fc 	addw	r3, r3, #3068	; 0xbfc
 8009fb6:	2100      	movs	r1, #0
 8009fb8:	4618      	mov	r0, r3
 8009fba:	f7fa fb4b 	bl	8004654 <_ZN8touchgfx8Drawable10setVisibleEb>
	SelectTodo1.setVisible(false);
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	f503 6344 	add.w	r3, r3, #3136	; 0xc40
 8009fc4:	2100      	movs	r1, #0
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	f7fa fb44 	bl	8004654 <_ZN8touchgfx8Drawable10setVisibleEb>
	SelectText.invalidate();
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	f603 33c8 	addw	r3, r3, #3016	; 0xbc8
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	f00d f940 	bl	8017258 <_ZNK8touchgfx8Drawable10invalidateEv>
	SelectVodka.invalidate();
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	f603 4384 	addw	r3, r3, #3204	; 0xc84
 8009fde:	4618      	mov	r0, r3
 8009fe0:	f00d f93a 	bl	8017258 <_ZNK8touchgfx8Drawable10invalidateEv>
	SelectTequila.invalidate();
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	f603 43c8 	addw	r3, r3, #3272	; 0xcc8
 8009fea:	4618      	mov	r0, r3
 8009fec:	f00d f934 	bl	8017258 <_ZNK8touchgfx8Drawable10invalidateEv>
	SelectRum.invalidate();
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	f603 530c 	addw	r3, r3, #3340	; 0xd0c
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	f00d f92e 	bl	8017258 <_ZNK8touchgfx8Drawable10invalidateEv>
	SelectWater.invalidate();
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	f603 53d8 	addw	r3, r3, #3544	; 0xdd8
 800a002:	4618      	mov	r0, r3
 800a004:	f00d f928 	bl	8017258 <_ZNK8touchgfx8Drawable10invalidateEv>
	SelectGin.invalidate();
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	f503 6355 	add.w	r3, r3, #3408	; 0xd50
 800a00e:	4618      	mov	r0, r3
 800a010:	f00d f922 	bl	8017258 <_ZNK8touchgfx8Drawable10invalidateEv>
	SelectNone.invalidate();
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	f603 5394 	addw	r3, r3, #3476	; 0xd94
 800a01a:	4618      	mov	r0, r3
 800a01c:	f00d f91c 	bl	8017258 <_ZNK8touchgfx8Drawable10invalidateEv>
	SelectJuice.invalidate();
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	f603 631c 	addw	r3, r3, #3612	; 0xe1c
 800a026:	4618      	mov	r0, r3
 800a028:	f00d f916 	bl	8017258 <_ZNK8touchgfx8Drawable10invalidateEv>
	SelectTodo1_1.invalidate();
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	f603 33fc 	addw	r3, r3, #3068	; 0xbfc
 800a032:	4618      	mov	r0, r3
 800a034:	f00d f910 	bl	8017258 <_ZNK8touchgfx8Drawable10invalidateEv>
	SelectTodo1.invalidate();
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	f503 6344 	add.w	r3, r3, #3136	; 0xc40
 800a03e:	4618      	mov	r0, r3
 800a040:	f00d f90a 	bl	8017258 <_ZNK8touchgfx8Drawable10invalidateEv>
 800a044:	bf00      	nop
 800a046:	3708      	adds	r7, #8
 800a048:	46bd      	mov	sp, r7
 800a04a:	bd80      	pop	{r7, pc}

0800a04c <_ZN14imageContainerD1Ev>:
    virtual ~imageContainer() {}
 800a04c:	b580      	push	{r7, lr}
 800a04e:	b082      	sub	sp, #8
 800a050:	af00      	add	r7, sp, #0
 800a052:	6078      	str	r0, [r7, #4]
 800a054:	4a05      	ldr	r2, [pc, #20]	; (800a06c <_ZN14imageContainerD1Ev+0x20>)
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	601a      	str	r2, [r3, #0]
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	4618      	mov	r0, r3
 800a05e:	f7fe f93d 	bl	80082dc <_ZN18imageContainerBaseD1Ev>
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	4618      	mov	r0, r3
 800a066:	3708      	adds	r7, #8
 800a068:	46bd      	mov	sp, r7
 800a06a:	bd80      	pop	{r7, pc}
 800a06c:	08024c80 	.word	0x08024c80

0800a070 <_ZN14imageContainerD0Ev>:
 800a070:	b580      	push	{r7, lr}
 800a072:	b082      	sub	sp, #8
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
 800a078:	6878      	ldr	r0, [r7, #4]
 800a07a:	f7ff ffe7 	bl	800a04c <_ZN14imageContainerD1Ev>
 800a07e:	2158      	movs	r1, #88	; 0x58
 800a080:	6878      	ldr	r0, [r7, #4]
 800a082:	f018 fb8a 	bl	802279a <_ZdlPvj>
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	4618      	mov	r0, r3
 800a08a:	3708      	adds	r7, #8
 800a08c:	46bd      	mov	sp, r7
 800a08e:	bd80      	pop	{r7, pc}

0800a090 <_ZN14imageContainerC1Ev>:
#include <gui/containers/imageContainer.hpp>

imageContainer::imageContainer()
 800a090:	b580      	push	{r7, lr}
 800a092:	b082      	sub	sp, #8
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	4618      	mov	r0, r3
 800a09c:	f7fe f946 	bl	800832c <_ZN18imageContainerBaseC1Ev>
 800a0a0:	4a03      	ldr	r2, [pc, #12]	; (800a0b0 <_ZN14imageContainerC1Ev+0x20>)
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	601a      	str	r2, [r3, #0]
{

}
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	3708      	adds	r7, #8
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	bd80      	pop	{r7, pc}
 800a0b0:	08024c80 	.word	0x08024c80

0800a0b4 <_ZN14imageContainer10initializeEv>:

void imageContainer::initialize()
{
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b082      	sub	sp, #8
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
    imageContainerBase::initialize();
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	4618      	mov	r0, r3
 800a0c0:	f7fe f980 	bl	80083c4 <_ZN18imageContainerBase10initializeEv>
 800a0c4:	bf00      	nop
 800a0c6:	3708      	adds	r7, #8
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	bd80      	pop	{r7, pc}

0800a0cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800a0cc:	b480      	push	{r7}
 800a0ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800a0d0:	4b08      	ldr	r3, [pc, #32]	; (800a0f4 <SystemInit+0x28>)
 800a0d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0d6:	4a07      	ldr	r2, [pc, #28]	; (800a0f4 <SystemInit+0x28>)
 800a0d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a0dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800a0e0:	4b04      	ldr	r3, [pc, #16]	; (800a0f4 <SystemInit+0x28>)
 800a0e2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a0e6:	609a      	str	r2, [r3, #8]
#endif
}
 800a0e8:	bf00      	nop
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f0:	4770      	bx	lr
 800a0f2:	bf00      	nop
 800a0f4:	e000ed00 	.word	0xe000ed00

0800a0f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800a0fc:	4b0e      	ldr	r3, [pc, #56]	; (800a138 <HAL_Init+0x40>)
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	4a0d      	ldr	r2, [pc, #52]	; (800a138 <HAL_Init+0x40>)
 800a102:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a106:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800a108:	4b0b      	ldr	r3, [pc, #44]	; (800a138 <HAL_Init+0x40>)
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	4a0a      	ldr	r2, [pc, #40]	; (800a138 <HAL_Init+0x40>)
 800a10e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a112:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800a114:	4b08      	ldr	r3, [pc, #32]	; (800a138 <HAL_Init+0x40>)
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	4a07      	ldr	r2, [pc, #28]	; (800a138 <HAL_Init+0x40>)
 800a11a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a11e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800a120:	2003      	movs	r0, #3
 800a122:	f000 fb6c 	bl	800a7fe <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800a126:	2000      	movs	r0, #0
 800a128:	f7f7 fa8e 	bl	8001648 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800a12c:	f7f6 ff7a 	bl	8001024 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800a130:	2300      	movs	r3, #0
}
 800a132:	4618      	mov	r0, r3
 800a134:	bd80      	pop	{r7, pc}
 800a136:	bf00      	nop
 800a138:	40023c00 	.word	0x40023c00

0800a13c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800a13c:	b480      	push	{r7}
 800a13e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800a140:	4b06      	ldr	r3, [pc, #24]	; (800a15c <HAL_IncTick+0x20>)
 800a142:	781b      	ldrb	r3, [r3, #0]
 800a144:	461a      	mov	r2, r3
 800a146:	4b06      	ldr	r3, [pc, #24]	; (800a160 <HAL_IncTick+0x24>)
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	4413      	add	r3, r2
 800a14c:	4a04      	ldr	r2, [pc, #16]	; (800a160 <HAL_IncTick+0x24>)
 800a14e:	6013      	str	r3, [r2, #0]
}
 800a150:	bf00      	nop
 800a152:	46bd      	mov	sp, r7
 800a154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a158:	4770      	bx	lr
 800a15a:	bf00      	nop
 800a15c:	20000024 	.word	0x20000024
 800a160:	2000d70c 	.word	0x2000d70c

0800a164 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800a164:	b480      	push	{r7}
 800a166:	af00      	add	r7, sp, #0
  return uwTick;
 800a168:	4b03      	ldr	r3, [pc, #12]	; (800a178 <HAL_GetTick+0x14>)
 800a16a:	681b      	ldr	r3, [r3, #0]
}
 800a16c:	4618      	mov	r0, r3
 800a16e:	46bd      	mov	sp, r7
 800a170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a174:	4770      	bx	lr
 800a176:	bf00      	nop
 800a178:	2000d70c 	.word	0x2000d70c

0800a17c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b084      	sub	sp, #16
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800a184:	2300      	movs	r3, #0
 800a186:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d101      	bne.n	800a192 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800a18e:	2301      	movs	r3, #1
 800a190:	e033      	b.n	800a1fa <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a196:	2b00      	cmp	r3, #0
 800a198:	d109      	bne.n	800a1ae <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800a19a:	6878      	ldr	r0, [r7, #4]
 800a19c:	f7f6 ff6e 	bl	800107c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	2200      	movs	r2, #0
 800a1aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1b2:	f003 0310 	and.w	r3, r3, #16
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d118      	bne.n	800a1ec <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1be:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800a1c2:	f023 0302 	bic.w	r3, r3, #2
 800a1c6:	f043 0202 	orr.w	r2, r3, #2
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800a1ce:	6878      	ldr	r0, [r7, #4]
 800a1d0:	f000 f94a 	bl	800a468 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	2200      	movs	r2, #0
 800a1d8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1de:	f023 0303 	bic.w	r3, r3, #3
 800a1e2:	f043 0201 	orr.w	r2, r3, #1
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	641a      	str	r2, [r3, #64]	; 0x40
 800a1ea:	e001      	b.n	800a1f0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800a1ec:	2301      	movs	r3, #1
 800a1ee:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800a1f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	3710      	adds	r7, #16
 800a1fe:	46bd      	mov	sp, r7
 800a200:	bd80      	pop	{r7, pc}
	...

0800a204 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800a204:	b480      	push	{r7}
 800a206:	b085      	sub	sp, #20
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
 800a20c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800a20e:	2300      	movs	r3, #0
 800a210:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a218:	2b01      	cmp	r3, #1
 800a21a:	d101      	bne.n	800a220 <HAL_ADC_ConfigChannel+0x1c>
 800a21c:	2302      	movs	r3, #2
 800a21e:	e113      	b.n	800a448 <HAL_ADC_ConfigChannel+0x244>
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	2201      	movs	r2, #1
 800a224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800a228:	683b      	ldr	r3, [r7, #0]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	2b09      	cmp	r3, #9
 800a22e:	d925      	bls.n	800a27c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	68d9      	ldr	r1, [r3, #12]
 800a236:	683b      	ldr	r3, [r7, #0]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	b29b      	uxth	r3, r3
 800a23c:	461a      	mov	r2, r3
 800a23e:	4613      	mov	r3, r2
 800a240:	005b      	lsls	r3, r3, #1
 800a242:	4413      	add	r3, r2
 800a244:	3b1e      	subs	r3, #30
 800a246:	2207      	movs	r2, #7
 800a248:	fa02 f303 	lsl.w	r3, r2, r3
 800a24c:	43da      	mvns	r2, r3
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	400a      	ands	r2, r1
 800a254:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	68d9      	ldr	r1, [r3, #12]
 800a25c:	683b      	ldr	r3, [r7, #0]
 800a25e:	689a      	ldr	r2, [r3, #8]
 800a260:	683b      	ldr	r3, [r7, #0]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	b29b      	uxth	r3, r3
 800a266:	4618      	mov	r0, r3
 800a268:	4603      	mov	r3, r0
 800a26a:	005b      	lsls	r3, r3, #1
 800a26c:	4403      	add	r3, r0
 800a26e:	3b1e      	subs	r3, #30
 800a270:	409a      	lsls	r2, r3
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	430a      	orrs	r2, r1
 800a278:	60da      	str	r2, [r3, #12]
 800a27a:	e022      	b.n	800a2c2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	6919      	ldr	r1, [r3, #16]
 800a282:	683b      	ldr	r3, [r7, #0]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	b29b      	uxth	r3, r3
 800a288:	461a      	mov	r2, r3
 800a28a:	4613      	mov	r3, r2
 800a28c:	005b      	lsls	r3, r3, #1
 800a28e:	4413      	add	r3, r2
 800a290:	2207      	movs	r2, #7
 800a292:	fa02 f303 	lsl.w	r3, r2, r3
 800a296:	43da      	mvns	r2, r3
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	400a      	ands	r2, r1
 800a29e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	6919      	ldr	r1, [r3, #16]
 800a2a6:	683b      	ldr	r3, [r7, #0]
 800a2a8:	689a      	ldr	r2, [r3, #8]
 800a2aa:	683b      	ldr	r3, [r7, #0]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	b29b      	uxth	r3, r3
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	4603      	mov	r3, r0
 800a2b4:	005b      	lsls	r3, r3, #1
 800a2b6:	4403      	add	r3, r0
 800a2b8:	409a      	lsls	r2, r3
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	430a      	orrs	r2, r1
 800a2c0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800a2c2:	683b      	ldr	r3, [r7, #0]
 800a2c4:	685b      	ldr	r3, [r3, #4]
 800a2c6:	2b06      	cmp	r3, #6
 800a2c8:	d824      	bhi.n	800a314 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800a2d0:	683b      	ldr	r3, [r7, #0]
 800a2d2:	685a      	ldr	r2, [r3, #4]
 800a2d4:	4613      	mov	r3, r2
 800a2d6:	009b      	lsls	r3, r3, #2
 800a2d8:	4413      	add	r3, r2
 800a2da:	3b05      	subs	r3, #5
 800a2dc:	221f      	movs	r2, #31
 800a2de:	fa02 f303 	lsl.w	r3, r2, r3
 800a2e2:	43da      	mvns	r2, r3
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	400a      	ands	r2, r1
 800a2ea:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800a2f2:	683b      	ldr	r3, [r7, #0]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	b29b      	uxth	r3, r3
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	683b      	ldr	r3, [r7, #0]
 800a2fc:	685a      	ldr	r2, [r3, #4]
 800a2fe:	4613      	mov	r3, r2
 800a300:	009b      	lsls	r3, r3, #2
 800a302:	4413      	add	r3, r2
 800a304:	3b05      	subs	r3, #5
 800a306:	fa00 f203 	lsl.w	r2, r0, r3
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	430a      	orrs	r2, r1
 800a310:	635a      	str	r2, [r3, #52]	; 0x34
 800a312:	e04c      	b.n	800a3ae <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800a314:	683b      	ldr	r3, [r7, #0]
 800a316:	685b      	ldr	r3, [r3, #4]
 800a318:	2b0c      	cmp	r3, #12
 800a31a:	d824      	bhi.n	800a366 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800a322:	683b      	ldr	r3, [r7, #0]
 800a324:	685a      	ldr	r2, [r3, #4]
 800a326:	4613      	mov	r3, r2
 800a328:	009b      	lsls	r3, r3, #2
 800a32a:	4413      	add	r3, r2
 800a32c:	3b23      	subs	r3, #35	; 0x23
 800a32e:	221f      	movs	r2, #31
 800a330:	fa02 f303 	lsl.w	r3, r2, r3
 800a334:	43da      	mvns	r2, r3
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	400a      	ands	r2, r1
 800a33c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800a344:	683b      	ldr	r3, [r7, #0]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	b29b      	uxth	r3, r3
 800a34a:	4618      	mov	r0, r3
 800a34c:	683b      	ldr	r3, [r7, #0]
 800a34e:	685a      	ldr	r2, [r3, #4]
 800a350:	4613      	mov	r3, r2
 800a352:	009b      	lsls	r3, r3, #2
 800a354:	4413      	add	r3, r2
 800a356:	3b23      	subs	r3, #35	; 0x23
 800a358:	fa00 f203 	lsl.w	r2, r0, r3
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	430a      	orrs	r2, r1
 800a362:	631a      	str	r2, [r3, #48]	; 0x30
 800a364:	e023      	b.n	800a3ae <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a36c:	683b      	ldr	r3, [r7, #0]
 800a36e:	685a      	ldr	r2, [r3, #4]
 800a370:	4613      	mov	r3, r2
 800a372:	009b      	lsls	r3, r3, #2
 800a374:	4413      	add	r3, r2
 800a376:	3b41      	subs	r3, #65	; 0x41
 800a378:	221f      	movs	r2, #31
 800a37a:	fa02 f303 	lsl.w	r3, r2, r3
 800a37e:	43da      	mvns	r2, r3
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	400a      	ands	r2, r1
 800a386:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a38e:	683b      	ldr	r3, [r7, #0]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	b29b      	uxth	r3, r3
 800a394:	4618      	mov	r0, r3
 800a396:	683b      	ldr	r3, [r7, #0]
 800a398:	685a      	ldr	r2, [r3, #4]
 800a39a:	4613      	mov	r3, r2
 800a39c:	009b      	lsls	r3, r3, #2
 800a39e:	4413      	add	r3, r2
 800a3a0:	3b41      	subs	r3, #65	; 0x41
 800a3a2:	fa00 f203 	lsl.w	r2, r0, r3
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	430a      	orrs	r2, r1
 800a3ac:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800a3ae:	4b29      	ldr	r3, [pc, #164]	; (800a454 <HAL_ADC_ConfigChannel+0x250>)
 800a3b0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	4a28      	ldr	r2, [pc, #160]	; (800a458 <HAL_ADC_ConfigChannel+0x254>)
 800a3b8:	4293      	cmp	r3, r2
 800a3ba:	d10f      	bne.n	800a3dc <HAL_ADC_ConfigChannel+0x1d8>
 800a3bc:	683b      	ldr	r3, [r7, #0]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	2b12      	cmp	r3, #18
 800a3c2:	d10b      	bne.n	800a3dc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	685b      	ldr	r3, [r3, #4]
 800a3c8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	685b      	ldr	r3, [r3, #4]
 800a3d4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	4a1d      	ldr	r2, [pc, #116]	; (800a458 <HAL_ADC_ConfigChannel+0x254>)
 800a3e2:	4293      	cmp	r3, r2
 800a3e4:	d12b      	bne.n	800a43e <HAL_ADC_ConfigChannel+0x23a>
 800a3e6:	683b      	ldr	r3, [r7, #0]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	4a1c      	ldr	r2, [pc, #112]	; (800a45c <HAL_ADC_ConfigChannel+0x258>)
 800a3ec:	4293      	cmp	r3, r2
 800a3ee:	d003      	beq.n	800a3f8 <HAL_ADC_ConfigChannel+0x1f4>
 800a3f0:	683b      	ldr	r3, [r7, #0]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	2b11      	cmp	r3, #17
 800a3f6:	d122      	bne.n	800a43e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	685b      	ldr	r3, [r3, #4]
 800a3fc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	685b      	ldr	r3, [r3, #4]
 800a408:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800a410:	683b      	ldr	r3, [r7, #0]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	4a11      	ldr	r2, [pc, #68]	; (800a45c <HAL_ADC_ConfigChannel+0x258>)
 800a416:	4293      	cmp	r3, r2
 800a418:	d111      	bne.n	800a43e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800a41a:	4b11      	ldr	r3, [pc, #68]	; (800a460 <HAL_ADC_ConfigChannel+0x25c>)
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	4a11      	ldr	r2, [pc, #68]	; (800a464 <HAL_ADC_ConfigChannel+0x260>)
 800a420:	fba2 2303 	umull	r2, r3, r2, r3
 800a424:	0c9a      	lsrs	r2, r3, #18
 800a426:	4613      	mov	r3, r2
 800a428:	009b      	lsls	r3, r3, #2
 800a42a:	4413      	add	r3, r2
 800a42c:	005b      	lsls	r3, r3, #1
 800a42e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800a430:	e002      	b.n	800a438 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800a432:	68bb      	ldr	r3, [r7, #8]
 800a434:	3b01      	subs	r3, #1
 800a436:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800a438:	68bb      	ldr	r3, [r7, #8]
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d1f9      	bne.n	800a432 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	2200      	movs	r2, #0
 800a442:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800a446:	2300      	movs	r3, #0
}
 800a448:	4618      	mov	r0, r3
 800a44a:	3714      	adds	r7, #20
 800a44c:	46bd      	mov	sp, r7
 800a44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a452:	4770      	bx	lr
 800a454:	40012300 	.word	0x40012300
 800a458:	40012000 	.word	0x40012000
 800a45c:	10000012 	.word	0x10000012
 800a460:	2000001c 	.word	0x2000001c
 800a464:	431bde83 	.word	0x431bde83

0800a468 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800a468:	b480      	push	{r7}
 800a46a:	b085      	sub	sp, #20
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800a470:	4b79      	ldr	r3, [pc, #484]	; (800a658 <ADC_Init+0x1f0>)
 800a472:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	685b      	ldr	r3, [r3, #4]
 800a478:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	685a      	ldr	r2, [r3, #4]
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	685b      	ldr	r3, [r3, #4]
 800a488:	431a      	orrs	r2, r3
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	685a      	ldr	r2, [r3, #4]
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a49c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	6859      	ldr	r1, [r3, #4]
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	691b      	ldr	r3, [r3, #16]
 800a4a8:	021a      	lsls	r2, r3, #8
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	430a      	orrs	r2, r1
 800a4b0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	685a      	ldr	r2, [r3, #4]
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800a4c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	6859      	ldr	r1, [r3, #4]
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	689a      	ldr	r2, [r3, #8]
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	430a      	orrs	r2, r1
 800a4d2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	689a      	ldr	r2, [r3, #8]
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a4e2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	6899      	ldr	r1, [r3, #8]
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	68da      	ldr	r2, [r3, #12]
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	430a      	orrs	r2, r1
 800a4f4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4fa:	4a58      	ldr	r2, [pc, #352]	; (800a65c <ADC_Init+0x1f4>)
 800a4fc:	4293      	cmp	r3, r2
 800a4fe:	d022      	beq.n	800a546 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	689a      	ldr	r2, [r3, #8]
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a50e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	6899      	ldr	r1, [r3, #8]
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	430a      	orrs	r2, r1
 800a520:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	689a      	ldr	r2, [r3, #8]
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800a530:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	6899      	ldr	r1, [r3, #8]
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	430a      	orrs	r2, r1
 800a542:	609a      	str	r2, [r3, #8]
 800a544:	e00f      	b.n	800a566 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	689a      	ldr	r2, [r3, #8]
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a554:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	689a      	ldr	r2, [r3, #8]
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800a564:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	689a      	ldr	r2, [r3, #8]
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	f022 0202 	bic.w	r2, r2, #2
 800a574:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	6899      	ldr	r1, [r3, #8]
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	7e1b      	ldrb	r3, [r3, #24]
 800a580:	005a      	lsls	r2, r3, #1
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	430a      	orrs	r2, r1
 800a588:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a590:	2b00      	cmp	r3, #0
 800a592:	d01b      	beq.n	800a5cc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	685a      	ldr	r2, [r3, #4]
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a5a2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	685a      	ldr	r2, [r3, #4]
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800a5b2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	6859      	ldr	r1, [r3, #4]
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5be:	3b01      	subs	r3, #1
 800a5c0:	035a      	lsls	r2, r3, #13
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	430a      	orrs	r2, r1
 800a5c8:	605a      	str	r2, [r3, #4]
 800a5ca:	e007      	b.n	800a5dc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	685a      	ldr	r2, [r3, #4]
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a5da:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800a5ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	69db      	ldr	r3, [r3, #28]
 800a5f6:	3b01      	subs	r3, #1
 800a5f8:	051a      	lsls	r2, r3, #20
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	430a      	orrs	r2, r1
 800a600:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	689a      	ldr	r2, [r3, #8]
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800a610:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	6899      	ldr	r1, [r3, #8]
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a61e:	025a      	lsls	r2, r3, #9
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	430a      	orrs	r2, r1
 800a626:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	689a      	ldr	r2, [r3, #8]
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a636:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	6899      	ldr	r1, [r3, #8]
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	695b      	ldr	r3, [r3, #20]
 800a642:	029a      	lsls	r2, r3, #10
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	430a      	orrs	r2, r1
 800a64a:	609a      	str	r2, [r3, #8]
}
 800a64c:	bf00      	nop
 800a64e:	3714      	adds	r7, #20
 800a650:	46bd      	mov	sp, r7
 800a652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a656:	4770      	bx	lr
 800a658:	40012300 	.word	0x40012300
 800a65c:	0f000001 	.word	0x0f000001

0800a660 <__NVIC_SetPriorityGrouping>:
{
 800a660:	b480      	push	{r7}
 800a662:	b085      	sub	sp, #20
 800a664:	af00      	add	r7, sp, #0
 800a666:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	f003 0307 	and.w	r3, r3, #7
 800a66e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a670:	4b0c      	ldr	r3, [pc, #48]	; (800a6a4 <__NVIC_SetPriorityGrouping+0x44>)
 800a672:	68db      	ldr	r3, [r3, #12]
 800a674:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a676:	68ba      	ldr	r2, [r7, #8]
 800a678:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800a67c:	4013      	ands	r3, r2
 800a67e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a684:	68bb      	ldr	r3, [r7, #8]
 800a686:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800a688:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800a68c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a690:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a692:	4a04      	ldr	r2, [pc, #16]	; (800a6a4 <__NVIC_SetPriorityGrouping+0x44>)
 800a694:	68bb      	ldr	r3, [r7, #8]
 800a696:	60d3      	str	r3, [r2, #12]
}
 800a698:	bf00      	nop
 800a69a:	3714      	adds	r7, #20
 800a69c:	46bd      	mov	sp, r7
 800a69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a2:	4770      	bx	lr
 800a6a4:	e000ed00 	.word	0xe000ed00

0800a6a8 <__NVIC_GetPriorityGrouping>:
{
 800a6a8:	b480      	push	{r7}
 800a6aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a6ac:	4b04      	ldr	r3, [pc, #16]	; (800a6c0 <__NVIC_GetPriorityGrouping+0x18>)
 800a6ae:	68db      	ldr	r3, [r3, #12]
 800a6b0:	0a1b      	lsrs	r3, r3, #8
 800a6b2:	f003 0307 	and.w	r3, r3, #7
}
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	46bd      	mov	sp, r7
 800a6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6be:	4770      	bx	lr
 800a6c0:	e000ed00 	.word	0xe000ed00

0800a6c4 <__NVIC_EnableIRQ>:
{
 800a6c4:	b480      	push	{r7}
 800a6c6:	b083      	sub	sp, #12
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	4603      	mov	r3, r0
 800a6cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a6ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	db0b      	blt.n	800a6ee <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a6d6:	79fb      	ldrb	r3, [r7, #7]
 800a6d8:	f003 021f 	and.w	r2, r3, #31
 800a6dc:	4907      	ldr	r1, [pc, #28]	; (800a6fc <__NVIC_EnableIRQ+0x38>)
 800a6de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a6e2:	095b      	lsrs	r3, r3, #5
 800a6e4:	2001      	movs	r0, #1
 800a6e6:	fa00 f202 	lsl.w	r2, r0, r2
 800a6ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800a6ee:	bf00      	nop
 800a6f0:	370c      	adds	r7, #12
 800a6f2:	46bd      	mov	sp, r7
 800a6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f8:	4770      	bx	lr
 800a6fa:	bf00      	nop
 800a6fc:	e000e100 	.word	0xe000e100

0800a700 <__NVIC_DisableIRQ>:
{
 800a700:	b480      	push	{r7}
 800a702:	b083      	sub	sp, #12
 800a704:	af00      	add	r7, sp, #0
 800a706:	4603      	mov	r3, r0
 800a708:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a70a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a70e:	2b00      	cmp	r3, #0
 800a710:	db10      	blt.n	800a734 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a712:	79fb      	ldrb	r3, [r7, #7]
 800a714:	f003 021f 	and.w	r2, r3, #31
 800a718:	4909      	ldr	r1, [pc, #36]	; (800a740 <__NVIC_DisableIRQ+0x40>)
 800a71a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a71e:	095b      	lsrs	r3, r3, #5
 800a720:	2001      	movs	r0, #1
 800a722:	fa00 f202 	lsl.w	r2, r0, r2
 800a726:	3320      	adds	r3, #32
 800a728:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800a72c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800a730:	f3bf 8f6f 	isb	sy
}
 800a734:	bf00      	nop
 800a736:	370c      	adds	r7, #12
 800a738:	46bd      	mov	sp, r7
 800a73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73e:	4770      	bx	lr
 800a740:	e000e100 	.word	0xe000e100

0800a744 <__NVIC_SetPriority>:
{
 800a744:	b480      	push	{r7}
 800a746:	b083      	sub	sp, #12
 800a748:	af00      	add	r7, sp, #0
 800a74a:	4603      	mov	r3, r0
 800a74c:	6039      	str	r1, [r7, #0]
 800a74e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a750:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a754:	2b00      	cmp	r3, #0
 800a756:	db0a      	blt.n	800a76e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a758:	683b      	ldr	r3, [r7, #0]
 800a75a:	b2da      	uxtb	r2, r3
 800a75c:	490c      	ldr	r1, [pc, #48]	; (800a790 <__NVIC_SetPriority+0x4c>)
 800a75e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a762:	0112      	lsls	r2, r2, #4
 800a764:	b2d2      	uxtb	r2, r2
 800a766:	440b      	add	r3, r1
 800a768:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800a76c:	e00a      	b.n	800a784 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a76e:	683b      	ldr	r3, [r7, #0]
 800a770:	b2da      	uxtb	r2, r3
 800a772:	4908      	ldr	r1, [pc, #32]	; (800a794 <__NVIC_SetPriority+0x50>)
 800a774:	79fb      	ldrb	r3, [r7, #7]
 800a776:	f003 030f 	and.w	r3, r3, #15
 800a77a:	3b04      	subs	r3, #4
 800a77c:	0112      	lsls	r2, r2, #4
 800a77e:	b2d2      	uxtb	r2, r2
 800a780:	440b      	add	r3, r1
 800a782:	761a      	strb	r2, [r3, #24]
}
 800a784:	bf00      	nop
 800a786:	370c      	adds	r7, #12
 800a788:	46bd      	mov	sp, r7
 800a78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78e:	4770      	bx	lr
 800a790:	e000e100 	.word	0xe000e100
 800a794:	e000ed00 	.word	0xe000ed00

0800a798 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a798:	b480      	push	{r7}
 800a79a:	b089      	sub	sp, #36	; 0x24
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	60f8      	str	r0, [r7, #12]
 800a7a0:	60b9      	str	r1, [r7, #8]
 800a7a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	f003 0307 	and.w	r3, r3, #7
 800a7aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a7ac:	69fb      	ldr	r3, [r7, #28]
 800a7ae:	f1c3 0307 	rsb	r3, r3, #7
 800a7b2:	2b04      	cmp	r3, #4
 800a7b4:	bf28      	it	cs
 800a7b6:	2304      	movcs	r3, #4
 800a7b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a7ba:	69fb      	ldr	r3, [r7, #28]
 800a7bc:	3304      	adds	r3, #4
 800a7be:	2b06      	cmp	r3, #6
 800a7c0:	d902      	bls.n	800a7c8 <NVIC_EncodePriority+0x30>
 800a7c2:	69fb      	ldr	r3, [r7, #28]
 800a7c4:	3b03      	subs	r3, #3
 800a7c6:	e000      	b.n	800a7ca <NVIC_EncodePriority+0x32>
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a7cc:	f04f 32ff 	mov.w	r2, #4294967295
 800a7d0:	69bb      	ldr	r3, [r7, #24]
 800a7d2:	fa02 f303 	lsl.w	r3, r2, r3
 800a7d6:	43da      	mvns	r2, r3
 800a7d8:	68bb      	ldr	r3, [r7, #8]
 800a7da:	401a      	ands	r2, r3
 800a7dc:	697b      	ldr	r3, [r7, #20]
 800a7de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a7e0:	f04f 31ff 	mov.w	r1, #4294967295
 800a7e4:	697b      	ldr	r3, [r7, #20]
 800a7e6:	fa01 f303 	lsl.w	r3, r1, r3
 800a7ea:	43d9      	mvns	r1, r3
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a7f0:	4313      	orrs	r3, r2
         );
}
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	3724      	adds	r7, #36	; 0x24
 800a7f6:	46bd      	mov	sp, r7
 800a7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fc:	4770      	bx	lr

0800a7fe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a7fe:	b580      	push	{r7, lr}
 800a800:	b082      	sub	sp, #8
 800a802:	af00      	add	r7, sp, #0
 800a804:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a806:	6878      	ldr	r0, [r7, #4]
 800a808:	f7ff ff2a 	bl	800a660 <__NVIC_SetPriorityGrouping>
}
 800a80c:	bf00      	nop
 800a80e:	3708      	adds	r7, #8
 800a810:	46bd      	mov	sp, r7
 800a812:	bd80      	pop	{r7, pc}

0800a814 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800a814:	b580      	push	{r7, lr}
 800a816:	b086      	sub	sp, #24
 800a818:	af00      	add	r7, sp, #0
 800a81a:	4603      	mov	r3, r0
 800a81c:	60b9      	str	r1, [r7, #8]
 800a81e:	607a      	str	r2, [r7, #4]
 800a820:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800a822:	2300      	movs	r3, #0
 800a824:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800a826:	f7ff ff3f 	bl	800a6a8 <__NVIC_GetPriorityGrouping>
 800a82a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a82c:	687a      	ldr	r2, [r7, #4]
 800a82e:	68b9      	ldr	r1, [r7, #8]
 800a830:	6978      	ldr	r0, [r7, #20]
 800a832:	f7ff ffb1 	bl	800a798 <NVIC_EncodePriority>
 800a836:	4602      	mov	r2, r0
 800a838:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a83c:	4611      	mov	r1, r2
 800a83e:	4618      	mov	r0, r3
 800a840:	f7ff ff80 	bl	800a744 <__NVIC_SetPriority>
}
 800a844:	bf00      	nop
 800a846:	3718      	adds	r7, #24
 800a848:	46bd      	mov	sp, r7
 800a84a:	bd80      	pop	{r7, pc}

0800a84c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a84c:	b580      	push	{r7, lr}
 800a84e:	b082      	sub	sp, #8
 800a850:	af00      	add	r7, sp, #0
 800a852:	4603      	mov	r3, r0
 800a854:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a85a:	4618      	mov	r0, r3
 800a85c:	f7ff ff32 	bl	800a6c4 <__NVIC_EnableIRQ>
}
 800a860:	bf00      	nop
 800a862:	3708      	adds	r7, #8
 800a864:	46bd      	mov	sp, r7
 800a866:	bd80      	pop	{r7, pc}

0800a868 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800a868:	b580      	push	{r7, lr}
 800a86a:	b082      	sub	sp, #8
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	4603      	mov	r3, r0
 800a870:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800a872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a876:	4618      	mov	r0, r3
 800a878:	f7ff ff42 	bl	800a700 <__NVIC_DisableIRQ>
}
 800a87c:	bf00      	nop
 800a87e:	3708      	adds	r7, #8
 800a880:	46bd      	mov	sp, r7
 800a882:	bd80      	pop	{r7, pc}

0800a884 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800a884:	b580      	push	{r7, lr}
 800a886:	b082      	sub	sp, #8
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d101      	bne.n	800a896 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800a892:	2301      	movs	r3, #1
 800a894:	e00e      	b.n	800a8b4 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	795b      	ldrb	r3, [r3, #5]
 800a89a:	b2db      	uxtb	r3, r3
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d105      	bne.n	800a8ac <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	2200      	movs	r2, #0
 800a8a4:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800a8a6:	6878      	ldr	r0, [r7, #4]
 800a8a8:	f7f6 fc2c 	bl	8001104 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	2201      	movs	r2, #1
 800a8b0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800a8b2:	2300      	movs	r3, #0
}
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	3708      	adds	r7, #8
 800a8b8:	46bd      	mov	sp, r7
 800a8ba:	bd80      	pop	{r7, pc}

0800a8bc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800a8bc:	b480      	push	{r7}
 800a8be:	b083      	sub	sp, #12
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a8ca:	b2db      	uxtb	r3, r3
 800a8cc:	2b02      	cmp	r3, #2
 800a8ce:	d004      	beq.n	800a8da <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	2280      	movs	r2, #128	; 0x80
 800a8d4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800a8d6:	2301      	movs	r3, #1
 800a8d8:	e00c      	b.n	800a8f4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	2205      	movs	r2, #5
 800a8de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	681a      	ldr	r2, [r3, #0]
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	f022 0201 	bic.w	r2, r2, #1
 800a8f0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800a8f2:	2300      	movs	r3, #0
}
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	370c      	adds	r7, #12
 800a8f8:	46bd      	mov	sp, r7
 800a8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8fe:	4770      	bx	lr

0800a900 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800a900:	b480      	push	{r7}
 800a902:	b083      	sub	sp, #12
 800a904:	af00      	add	r7, sp, #0
 800a906:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a90e:	b2db      	uxtb	r3, r3
}
 800a910:	4618      	mov	r0, r3
 800a912:	370c      	adds	r7, #12
 800a914:	46bd      	mov	sp, r7
 800a916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91a:	4770      	bx	lr

0800a91c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800a91c:	b580      	push	{r7, lr}
 800a91e:	b082      	sub	sp, #8
 800a920:	af00      	add	r7, sp, #0
 800a922:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d101      	bne.n	800a92e <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 800a92a:	2301      	movs	r3, #1
 800a92c:	e03b      	b.n	800a9a6 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a934:	b2db      	uxtb	r3, r3
 800a936:	2b00      	cmp	r3, #0
 800a938:	d106      	bne.n	800a948 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	2200      	movs	r2, #0
 800a93e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800a942:	6878      	ldr	r0, [r7, #4]
 800a944:	f7f6 fc00 	bl	8001148 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	2202      	movs	r2, #2
 800a94c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	685a      	ldr	r2, [r3, #4]
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	430a      	orrs	r2, r1
 800a964:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a96c:	f023 0107 	bic.w	r1, r3, #7
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	689a      	ldr	r2, [r3, #8]
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	430a      	orrs	r2, r1
 800a97a:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a982:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800a986:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800a98a:	687a      	ldr	r2, [r7, #4]
 800a98c:	68d1      	ldr	r1, [r2, #12]
 800a98e:	687a      	ldr	r2, [r7, #4]
 800a990:	6812      	ldr	r2, [r2, #0]
 800a992:	430b      	orrs	r3, r1
 800a994:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	2200      	movs	r2, #0
 800a99a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	2201      	movs	r2, #1
 800a9a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800a9a4:	2300      	movs	r3, #0
}
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	3708      	adds	r7, #8
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	bd80      	pop	{r7, pc}
	...

0800a9b0 <HAL_DMA2D_DeInit>:
  *                 the configuration information for the DMA2D.
  * @retval None
  */

HAL_StatusTypeDef HAL_DMA2D_DeInit(DMA2D_HandleTypeDef *hdma2d)
{
 800a9b0:	b580      	push	{r7, lr}
 800a9b2:	b082      	sub	sp, #8
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	6078      	str	r0, [r7, #4]

  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d101      	bne.n	800a9c2 <HAL_DMA2D_DeInit+0x12>
  {
     return HAL_ERROR;
 800a9be:	2301      	movs	r3, #1
 800a9c0:	e05f      	b.n	800aa82 <HAL_DMA2D_DeInit+0xd2>
  }

  /* Before aborting any DMA2D transfer or CLUT loading, check
     first whether or not DMA2D clock is enabled */
  if (__HAL_RCC_DMA2D_IS_CLK_ENABLED())
 800a9c2:	4b32      	ldr	r3, [pc, #200]	; (800aa8c <HAL_DMA2D_DeInit+0xdc>)
 800a9c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d02e      	beq.n	800aa2c <HAL_DMA2D_DeInit+0x7c>
  {
    /* Abort DMA2D transfer if any */
    if ((hdma2d->Instance->CR & DMA2D_CR_START) == DMA2D_CR_START)
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	f003 0301 	and.w	r3, r3, #1
 800a9d8:	2b01      	cmp	r3, #1
 800a9da:	d107      	bne.n	800a9ec <HAL_DMA2D_DeInit+0x3c>
    {
      if (HAL_DMA2D_Abort(hdma2d) != HAL_OK)
 800a9dc:	6878      	ldr	r0, [r7, #4]
 800a9de:	f000 f8c1 	bl	800ab64 <HAL_DMA2D_Abort>
 800a9e2:	4603      	mov	r3, r0
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d021      	beq.n	800aa2c <HAL_DMA2D_DeInit+0x7c>
      {
        /* Issue when aborting DMA2D transfer */
        return HAL_ERROR;
 800a9e8:	2301      	movs	r3, #1
 800a9ea:	e04a      	b.n	800aa82 <HAL_DMA2D_DeInit+0xd2>
      }
    }
    else
    {
      /* Abort background CLUT loading if any */
      if ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) == DMA2D_BGPFCCR_START)
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9f2:	f003 0320 	and.w	r3, r3, #32
 800a9f6:	2b20      	cmp	r3, #32
 800a9f8:	d108      	bne.n	800aa0c <HAL_DMA2D_DeInit+0x5c>
      {
        if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 0U) != HAL_OK)
 800a9fa:	2100      	movs	r1, #0
 800a9fc:	6878      	ldr	r0, [r7, #4]
 800a9fe:	f000 f8f7 	bl	800abf0 <HAL_DMA2D_CLUTLoading_Abort>
 800aa02:	4603      	mov	r3, r0
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d011      	beq.n	800aa2c <HAL_DMA2D_DeInit+0x7c>
        {
          /* Issue when aborting background CLUT loading */
          return HAL_ERROR;
 800aa08:	2301      	movs	r3, #1
 800aa0a:	e03a      	b.n	800aa82 <HAL_DMA2D_DeInit+0xd2>
        }
      }
      else
      {
        /* Abort foreground CLUT loading if any */
        if ((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) == DMA2D_FGPFCCR_START)
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	69db      	ldr	r3, [r3, #28]
 800aa12:	f003 0320 	and.w	r3, r3, #32
 800aa16:	2b20      	cmp	r3, #32
 800aa18:	d108      	bne.n	800aa2c <HAL_DMA2D_DeInit+0x7c>
        {
          if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 1U) != HAL_OK)
 800aa1a:	2101      	movs	r1, #1
 800aa1c:	6878      	ldr	r0, [r7, #4]
 800aa1e:	f000 f8e7 	bl	800abf0 <HAL_DMA2D_CLUTLoading_Abort>
 800aa22:	4603      	mov	r3, r0
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d001      	beq.n	800aa2c <HAL_DMA2D_DeInit+0x7c>
          {
            /* Issue when aborting foreground CLUT loading */
            return HAL_ERROR;
 800aa28:	2301      	movs	r3, #1
 800aa2a:	e02a      	b.n	800aa82 <HAL_DMA2D_DeInit+0xd2>
      }
    }
  }

  /* Reset DMA2D control registers*/
  hdma2d->Instance->CR       =    0U;
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	2200      	movs	r2, #0
 800aa32:	601a      	str	r2, [r3, #0]
  hdma2d->Instance->IFCR     = 0x3FU;
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	223f      	movs	r2, #63	; 0x3f
 800aa3a:	609a      	str	r2, [r3, #8]
  hdma2d->Instance->FGOR     =    0U;
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	2200      	movs	r2, #0
 800aa42:	611a      	str	r2, [r3, #16]
  hdma2d->Instance->BGOR     =    0U;
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	2200      	movs	r2, #0
 800aa4a:	619a      	str	r2, [r3, #24]
  hdma2d->Instance->FGPFCCR  =    0U;
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	2200      	movs	r2, #0
 800aa52:	61da      	str	r2, [r3, #28]
  hdma2d->Instance->BGPFCCR  =    0U;
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	2200      	movs	r2, #0
 800aa5a:	625a      	str	r2, [r3, #36]	; 0x24
  hdma2d->Instance->OPFCCR   =    0U;
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	2200      	movs	r2, #0
 800aa62:	635a      	str	r2, [r3, #52]	; 0x34
    /* DeInit the low level hardware */
    hdma2d->MspDeInitCallback(hdma2d);

#else
  /* Carry on with de-initialization of low level hardware */
  HAL_DMA2D_MspDeInit(hdma2d);
 800aa64:	6878      	ldr	r0, [r7, #4]
 800aa66:	f7f6 fb97 	bl	8001198 <HAL_DMA2D_MspDeInit>
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	2200      	movs	r2, #0
 800aa6e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_RESET;
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	2200      	movs	r2, #0
 800aa74:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(hdma2d);
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800aa80:	2300      	movs	r3, #0
}
 800aa82:	4618      	mov	r0, r3
 800aa84:	3708      	adds	r7, #8
 800aa86:	46bd      	mov	sp, r7
 800aa88:	bd80      	pop	{r7, pc}
 800aa8a:	bf00      	nop
 800aa8c:	40023800 	.word	0x40023800

0800aa90 <HAL_DMA2D_Start_IT>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 800aa90:	b580      	push	{r7, lr}
 800aa92:	b086      	sub	sp, #24
 800aa94:	af02      	add	r7, sp, #8
 800aa96:	60f8      	str	r0, [r7, #12]
 800aa98:	60b9      	str	r1, [r7, #8]
 800aa9a:	607a      	str	r2, [r7, #4]
 800aa9c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800aaa4:	2b01      	cmp	r3, #1
 800aaa6:	d101      	bne.n	800aaac <HAL_DMA2D_Start_IT+0x1c>
 800aaa8:	2302      	movs	r3, #2
 800aaaa:	e020      	b.n	800aaee <HAL_DMA2D_Start_IT+0x5e>
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	2201      	movs	r2, #1
 800aab0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	2202      	movs	r2, #2
 800aab8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 800aabc:	69bb      	ldr	r3, [r7, #24]
 800aabe:	9300      	str	r3, [sp, #0]
 800aac0:	683b      	ldr	r3, [r7, #0]
 800aac2:	687a      	ldr	r2, [r7, #4]
 800aac4:	68b9      	ldr	r1, [r7, #8]
 800aac6:	68f8      	ldr	r0, [r7, #12]
 800aac8:	f000 fa84 	bl	800afd4 <DMA2D_SetConfig>

  /* Enable the transfer complete, transfer error and configuration error interrupts */
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	681a      	ldr	r2, [r3, #0]
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 800aada:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	681a      	ldr	r2, [r3, #0]
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	f042 0201 	orr.w	r2, r2, #1
 800aaea:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800aaec:	2300      	movs	r3, #0
}
 800aaee:	4618      	mov	r0, r3
 800aaf0:	3710      	adds	r7, #16
 800aaf2:	46bd      	mov	sp, r7
 800aaf4:	bd80      	pop	{r7, pc}

0800aaf6 <HAL_DMA2D_BlendingStart_IT>:
  * @param  Width       The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height      The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_BlendingStart_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t SrcAddress1, uint32_t  SrcAddress2, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 800aaf6:	b580      	push	{r7, lr}
 800aaf8:	b086      	sub	sp, #24
 800aafa:	af02      	add	r7, sp, #8
 800aafc:	60f8      	str	r0, [r7, #12]
 800aafe:	60b9      	str	r1, [r7, #8]
 800ab00:	607a      	str	r2, [r7, #4]
 800ab02:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800ab0a:	2b01      	cmp	r3, #1
 800ab0c:	d101      	bne.n	800ab12 <HAL_DMA2D_BlendingStart_IT+0x1c>
 800ab0e:	2302      	movs	r3, #2
 800ab10:	e024      	b.n	800ab5c <HAL_DMA2D_BlendingStart_IT+0x66>
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	2201      	movs	r2, #1
 800ab16:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	2202      	movs	r2, #2
 800ab1e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure DMA2D Stream source2 address */
  WRITE_REG(hdma2d->Instance->BGMAR, SrcAddress2);
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	687a      	ldr	r2, [r7, #4]
 800ab28:	615a      	str	r2, [r3, #20]

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, SrcAddress1, DstAddress, Width, Height);
 800ab2a:	69fb      	ldr	r3, [r7, #28]
 800ab2c:	9300      	str	r3, [sp, #0]
 800ab2e:	69bb      	ldr	r3, [r7, #24]
 800ab30:	683a      	ldr	r2, [r7, #0]
 800ab32:	68b9      	ldr	r1, [r7, #8]
 800ab34:	68f8      	ldr	r0, [r7, #12]
 800ab36:	f000 fa4d 	bl	800afd4 <DMA2D_SetConfig>

  /* Enable the transfer complete, transfer error and configuration error interrupts */
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	681a      	ldr	r2, [r3, #0]
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 800ab48:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	681a      	ldr	r2, [r3, #0]
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	f042 0201 	orr.w	r2, r2, #1
 800ab58:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800ab5a:	2300      	movs	r3, #0
}
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	3710      	adds	r7, #16
 800ab60:	46bd      	mov	sp, r7
 800ab62:	bd80      	pop	{r7, pc}

0800ab64 <HAL_DMA2D_Abort>:
  * @param  hdma2d  pointer to a DMA2D_HandleTypeDef structure that contains
  *                  the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Abort(DMA2D_HandleTypeDef *hdma2d)
{
 800ab64:	b580      	push	{r7, lr}
 800ab66:	b084      	sub	sp, #16
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	6078      	str	r0, [r7, #4]

  /* Abort the DMA2D transfer */
  /* START bit is reset to make sure not to set it again, in the event the HW clears it
     between the register read and the register write by the CPU (writing 0 has no
     effect on START bitvalue) */
   MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_ABORT|DMA2D_CR_START, DMA2D_CR_ABORT);
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	f023 0205 	bic.w	r2, r3, #5
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	f042 0204 	orr.w	r2, r2, #4
 800ab7e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800ab80:	f7ff faf0 	bl	800a164 <HAL_GetTick>
 800ab84:	60f8      	str	r0, [r7, #12]

  /* Check if the DMA2D is effectively disabled */
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800ab86:	e017      	b.n	800abb8 <HAL_DMA2D_Abort+0x54>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 800ab88:	f7ff faec 	bl	800a164 <HAL_GetTick>
 800ab8c:	4602      	mov	r2, r0
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	1ad3      	subs	r3, r2, r3
 800ab92:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ab96:	d90f      	bls.n	800abb8 <HAL_DMA2D_Abort+0x54>
    {
      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab9c:	f043 0220 	orr.w	r2, r3, #32
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	2203      	movs	r2, #3
 800aba8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	2200      	movs	r2, #0
 800abb0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      return HAL_TIMEOUT;
 800abb4:	2303      	movs	r3, #3
 800abb6:	e017      	b.n	800abe8 <HAL_DMA2D_Abort+0x84>
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	f003 0301 	and.w	r3, r3, #1
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d1e0      	bne.n	800ab88 <HAL_DMA2D_Abort+0x24>
    }
  }

  /* Disable the Transfer Complete, Transfer Error and Configuration Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	681a      	ldr	r2, [r3, #0]
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	f422 520c 	bic.w	r2, r2, #8960	; 0x2300
 800abd4:	601a      	str	r2, [r3, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	2201      	movs	r2, #1
 800abda:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	2200      	movs	r2, #0
 800abe2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800abe6:	2300      	movs	r3, #0
}
 800abe8:	4618      	mov	r0, r3
 800abea:	3710      	adds	r7, #16
 800abec:	46bd      	mov	sp, r7
 800abee:	bd80      	pop	{r7, pc}

0800abf0 <HAL_DMA2D_CLUTLoading_Abort>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_CLUTLoading_Abort(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 800abf0:	b580      	push	{r7, lr}
 800abf2:	b084      	sub	sp, #16
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	6078      	str	r0, [r7, #4]
 800abf8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  const __IO uint32_t * reg =  &(hdma2d->Instance->BGPFCCR); /* by default, point at background register */
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	3324      	adds	r3, #36	; 0x24
 800ac00:	60fb      	str	r3, [r7, #12]

  /* Abort the CLUT loading */
  SET_BIT(hdma2d->Instance->CR, DMA2D_CR_ABORT);
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	681a      	ldr	r2, [r3, #0]
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	f042 0204 	orr.w	r2, r2, #4
 800ac10:	601a      	str	r2, [r3, #0]

  /* If foreground CLUT loading is considered, update local variables */
  if(LayerIdx == DMA2D_FOREGROUND_LAYER)
 800ac12:	683b      	ldr	r3, [r7, #0]
 800ac14:	2b01      	cmp	r3, #1
 800ac16:	d103      	bne.n	800ac20 <HAL_DMA2D_CLUTLoading_Abort+0x30>
  {
    reg  = &(hdma2d->Instance->FGPFCCR);
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	331c      	adds	r3, #28
 800ac1e:	60fb      	str	r3, [r7, #12]
  }


  /* Get tick */
  tickstart = HAL_GetTick();
 800ac20:	f7ff faa0 	bl	800a164 <HAL_GetTick>
 800ac24:	60b8      	str	r0, [r7, #8]

  /* Check if the CLUT loading is aborted */
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 800ac26:	e017      	b.n	800ac58 <HAL_DMA2D_CLUTLoading_Abort+0x68>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 800ac28:	f7ff fa9c 	bl	800a164 <HAL_GetTick>
 800ac2c:	4602      	mov	r2, r0
 800ac2e:	68bb      	ldr	r3, [r7, #8]
 800ac30:	1ad3      	subs	r3, r2, r3
 800ac32:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ac36:	d90f      	bls.n	800ac58 <HAL_DMA2D_CLUTLoading_Abort+0x68>
    {
      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac3c:	f043 0220 	orr.w	r2, r3, #32
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	2203      	movs	r2, #3
 800ac48:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	2200      	movs	r2, #0
 800ac50:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      return HAL_TIMEOUT;
 800ac54:	2303      	movs	r3, #3
 800ac56:	e016      	b.n	800ac86 <HAL_DMA2D_CLUTLoading_Abort+0x96>
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	f003 0320 	and.w	r3, r3, #32
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d1e1      	bne.n	800ac28 <HAL_DMA2D_CLUTLoading_Abort+0x38>
    }
  }

  /* Disable the CLUT Transfer Complete, Transfer Error, Configuration Error and CLUT Access Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC | DMA2D_IT_TE | DMA2D_IT_CE |DMA2D_IT_CAE);
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	681a      	ldr	r2, [r3, #0]
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	f422 5264 	bic.w	r2, r2, #14592	; 0x3900
 800ac72:	601a      	str	r2, [r3, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	2201      	movs	r2, #1
 800ac78:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	2200      	movs	r2, #0
 800ac80:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800ac84:	2300      	movs	r3, #0
}
 800ac86:	4618      	mov	r0, r3
 800ac88:	3710      	adds	r7, #16
 800ac8a:	46bd      	mov	sp, r7
 800ac8c:	bd80      	pop	{r7, pc}

0800ac8e <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 800ac8e:	b580      	push	{r7, lr}
 800ac90:	b084      	sub	sp, #16
 800ac92:	af00      	add	r7, sp, #0
 800ac94:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	685b      	ldr	r3, [r3, #4]
 800ac9c:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	f003 0301 	and.w	r3, r3, #1
 800acac:	2b00      	cmp	r3, #0
 800acae:	d026      	beq.n	800acfe <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 800acb0:	68bb      	ldr	r3, [r7, #8]
 800acb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d021      	beq.n	800acfe <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	681a      	ldr	r2, [r3, #0]
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800acc8:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800acce:	f043 0201 	orr.w	r2, r3, #1
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	2201      	movs	r2, #1
 800acdc:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	2204      	movs	r2, #4
 800ace2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	2200      	movs	r2, #0
 800acea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	695b      	ldr	r3, [r3, #20]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d003      	beq.n	800acfe <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	695b      	ldr	r3, [r3, #20]
 800acfa:	6878      	ldr	r0, [r7, #4]
 800acfc:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	f003 0320 	and.w	r3, r3, #32
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d026      	beq.n	800ad56 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 800ad08:	68bb      	ldr	r3, [r7, #8]
 800ad0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d021      	beq.n	800ad56 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	681a      	ldr	r2, [r3, #0]
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ad20:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	2220      	movs	r2, #32
 800ad28:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad2e:	f043 0202 	orr.w	r2, r3, #2
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	2204      	movs	r2, #4
 800ad3a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	2200      	movs	r2, #0
 800ad42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	695b      	ldr	r3, [r3, #20]
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d003      	beq.n	800ad56 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	695b      	ldr	r3, [r3, #20]
 800ad52:	6878      	ldr	r0, [r7, #4]
 800ad54:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	f003 0308 	and.w	r3, r3, #8
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d026      	beq.n	800adae <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800ad60:	68bb      	ldr	r3, [r7, #8]
 800ad62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d021      	beq.n	800adae <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	681a      	ldr	r2, [r3, #0]
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ad78:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	2208      	movs	r2, #8
 800ad80:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad86:	f043 0204 	orr.w	r2, r3, #4
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	2204      	movs	r2, #4
 800ad92:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	2200      	movs	r2, #0
 800ad9a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	695b      	ldr	r3, [r3, #20]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d003      	beq.n	800adae <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	695b      	ldr	r3, [r3, #20]
 800adaa:	6878      	ldr	r0, [r7, #4]
 800adac:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	f003 0304 	and.w	r3, r3, #4
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d013      	beq.n	800ade0 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 800adb8:	68bb      	ldr	r3, [r7, #8]
 800adba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d00e      	beq.n	800ade0 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	681a      	ldr	r2, [r3, #0]
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800add0:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	2204      	movs	r2, #4
 800add8:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 800adda:	6878      	ldr	r0, [r7, #4]
 800addc:	f000 f853 	bl	800ae86 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	f003 0302 	and.w	r3, r3, #2
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d024      	beq.n	800ae34 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 800adea:	68bb      	ldr	r3, [r7, #8]
 800adec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d01f      	beq.n	800ae34 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	681a      	ldr	r2, [r3, #0]
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800ae02:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	2202      	movs	r2, #2
 800ae0a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	2201      	movs	r2, #1
 800ae18:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	2200      	movs	r2, #0
 800ae20:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	691b      	ldr	r3, [r3, #16]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d003      	beq.n	800ae34 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	691b      	ldr	r3, [r3, #16]
 800ae30:	6878      	ldr	r0, [r7, #4]
 800ae32:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	f003 0310 	and.w	r3, r3, #16
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d01f      	beq.n	800ae7e <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800ae3e:	68bb      	ldr	r3, [r7, #8]
 800ae40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d01a      	beq.n	800ae7e <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	681a      	ldr	r2, [r3, #0]
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800ae56:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	2210      	movs	r2, #16
 800ae5e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	2201      	movs	r2, #1
 800ae6c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	2200      	movs	r2, #0
 800ae74:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800ae78:	6878      	ldr	r0, [r7, #4]
 800ae7a:	f000 f80e 	bl	800ae9a <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 800ae7e:	bf00      	nop
 800ae80:	3710      	adds	r7, #16
 800ae82:	46bd      	mov	sp, r7
 800ae84:	bd80      	pop	{r7, pc}

0800ae86 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800ae86:	b480      	push	{r7}
 800ae88:	b083      	sub	sp, #12
 800ae8a:	af00      	add	r7, sp, #0
 800ae8c:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 800ae8e:	bf00      	nop
 800ae90:	370c      	adds	r7, #12
 800ae92:	46bd      	mov	sp, r7
 800ae94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae98:	4770      	bx	lr

0800ae9a <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800ae9a:	b480      	push	{r7}
 800ae9c:	b083      	sub	sp, #12
 800ae9e:	af00      	add	r7, sp, #0
 800aea0:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 800aea2:	bf00      	nop
 800aea4:	370c      	adds	r7, #12
 800aea6:	46bd      	mov	sp, r7
 800aea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeac:	4770      	bx	lr
	...

0800aeb0 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 800aeb0:	b480      	push	{r7}
 800aeb2:	b087      	sub	sp, #28
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	6078      	str	r0, [r7, #4]
 800aeb8:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	685b      	ldr	r3, [r3, #4]
 800aebe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800aec8:	2b01      	cmp	r3, #1
 800aeca:	d101      	bne.n	800aed0 <HAL_DMA2D_ConfigLayer+0x20>
 800aecc:	2302      	movs	r3, #2
 800aece:	e079      	b.n	800afc4 <HAL_DMA2D_ConfigLayer+0x114>
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	2201      	movs	r2, #1
 800aed4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	2202      	movs	r2, #2
 800aedc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800aee0:	683b      	ldr	r3, [r7, #0]
 800aee2:	011b      	lsls	r3, r3, #4
 800aee4:	3318      	adds	r3, #24
 800aee6:	687a      	ldr	r2, [r7, #4]
 800aee8:	4413      	add	r3, r2
 800aeea:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 800aeec:	693b      	ldr	r3, [r7, #16]
 800aeee:	685a      	ldr	r2, [r3, #4]
 800aef0:	693b      	ldr	r3, [r7, #16]
 800aef2:	689b      	ldr	r3, [r3, #8]
 800aef4:	041b      	lsls	r3, r3, #16
 800aef6:	4313      	orrs	r3, r2
 800aef8:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800aefa:	4b35      	ldr	r3, [pc, #212]	; (800afd0 <HAL_DMA2D_ConfigLayer+0x120>)
 800aefc:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800aefe:	693b      	ldr	r3, [r7, #16]
 800af00:	685b      	ldr	r3, [r3, #4]
 800af02:	2b0a      	cmp	r3, #10
 800af04:	d003      	beq.n	800af0e <HAL_DMA2D_ConfigLayer+0x5e>
 800af06:	693b      	ldr	r3, [r7, #16]
 800af08:	685b      	ldr	r3, [r3, #4]
 800af0a:	2b09      	cmp	r3, #9
 800af0c:	d107      	bne.n	800af1e <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800af0e:	693b      	ldr	r3, [r7, #16]
 800af10:	68db      	ldr	r3, [r3, #12]
 800af12:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800af16:	697a      	ldr	r2, [r7, #20]
 800af18:	4313      	orrs	r3, r2
 800af1a:	617b      	str	r3, [r7, #20]
 800af1c:	e005      	b.n	800af2a <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800af1e:	693b      	ldr	r3, [r7, #16]
 800af20:	68db      	ldr	r3, [r3, #12]
 800af22:	061b      	lsls	r3, r3, #24
 800af24:	697a      	ldr	r2, [r7, #20]
 800af26:	4313      	orrs	r3, r2
 800af28:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 800af2a:	683b      	ldr	r3, [r7, #0]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d120      	bne.n	800af72 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	43db      	mvns	r3, r3
 800af3a:	ea02 0103 	and.w	r1, r2, r3
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	697a      	ldr	r2, [r7, #20]
 800af44:	430a      	orrs	r2, r1
 800af46:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	693a      	ldr	r2, [r7, #16]
 800af4e:	6812      	ldr	r2, [r2, #0]
 800af50:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800af52:	693b      	ldr	r3, [r7, #16]
 800af54:	685b      	ldr	r3, [r3, #4]
 800af56:	2b0a      	cmp	r3, #10
 800af58:	d003      	beq.n	800af62 <HAL_DMA2D_ConfigLayer+0xb2>
 800af5a:	693b      	ldr	r3, [r7, #16]
 800af5c:	685b      	ldr	r3, [r3, #4]
 800af5e:	2b09      	cmp	r3, #9
 800af60:	d127      	bne.n	800afb2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 800af62:	693b      	ldr	r3, [r7, #16]
 800af64:	68da      	ldr	r2, [r3, #12]
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800af6e:	629a      	str	r2, [r3, #40]	; 0x28
 800af70:	e01f      	b.n	800afb2 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	69da      	ldr	r2, [r3, #28]
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	43db      	mvns	r3, r3
 800af7c:	ea02 0103 	and.w	r1, r2, r3
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	697a      	ldr	r2, [r7, #20]
 800af86:	430a      	orrs	r2, r1
 800af88:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	693a      	ldr	r2, [r7, #16]
 800af90:	6812      	ldr	r2, [r2, #0]
 800af92:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800af94:	693b      	ldr	r3, [r7, #16]
 800af96:	685b      	ldr	r3, [r3, #4]
 800af98:	2b0a      	cmp	r3, #10
 800af9a:	d003      	beq.n	800afa4 <HAL_DMA2D_ConfigLayer+0xf4>
 800af9c:	693b      	ldr	r3, [r7, #16]
 800af9e:	685b      	ldr	r3, [r3, #4]
 800afa0:	2b09      	cmp	r3, #9
 800afa2:	d106      	bne.n	800afb2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 800afa4:	693b      	ldr	r3, [r7, #16]
 800afa6:	68da      	ldr	r2, [r3, #12]
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800afb0:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	2201      	movs	r2, #1
 800afb6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	2200      	movs	r2, #0
 800afbe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800afc2:	2300      	movs	r3, #0
}
 800afc4:	4618      	mov	r0, r3
 800afc6:	371c      	adds	r7, #28
 800afc8:	46bd      	mov	sp, r7
 800afca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afce:	4770      	bx	lr
 800afd0:	ff03000f 	.word	0xff03000f

0800afd4 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 800afd4:	b480      	push	{r7}
 800afd6:	b08b      	sub	sp, #44	; 0x2c
 800afd8:	af00      	add	r7, sp, #0
 800afda:	60f8      	str	r0, [r7, #12]
 800afdc:	60b9      	str	r1, [r7, #8]
 800afde:	607a      	str	r2, [r7, #4]
 800afe0:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800afe8:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800afec:	683b      	ldr	r3, [r7, #0]
 800afee:	041a      	lsls	r2, r3, #16
 800aff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aff2:	431a      	orrs	r2, r3
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	430a      	orrs	r2, r1
 800affa:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	687a      	ldr	r2, [r7, #4]
 800b002:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	685b      	ldr	r3, [r3, #4]
 800b008:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b00c:	d174      	bne.n	800b0f8 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800b00e:	68bb      	ldr	r3, [r7, #8]
 800b010:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800b014:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800b016:	68bb      	ldr	r3, [r7, #8]
 800b018:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b01c:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800b01e:	68bb      	ldr	r3, [r7, #8]
 800b020:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b024:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800b026:	68bb      	ldr	r3, [r7, #8]
 800b028:	b2db      	uxtb	r3, r3
 800b02a:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	689b      	ldr	r3, [r3, #8]
 800b030:	2b00      	cmp	r3, #0
 800b032:	d108      	bne.n	800b046 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 800b034:	69ba      	ldr	r2, [r7, #24]
 800b036:	69fb      	ldr	r3, [r7, #28]
 800b038:	431a      	orrs	r2, r3
 800b03a:	6a3b      	ldr	r3, [r7, #32]
 800b03c:	4313      	orrs	r3, r2
 800b03e:	697a      	ldr	r2, [r7, #20]
 800b040:	4313      	orrs	r3, r2
 800b042:	627b      	str	r3, [r7, #36]	; 0x24
 800b044:	e053      	b.n	800b0ee <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	689b      	ldr	r3, [r3, #8]
 800b04a:	2b01      	cmp	r3, #1
 800b04c:	d106      	bne.n	800b05c <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 800b04e:	69ba      	ldr	r2, [r7, #24]
 800b050:	69fb      	ldr	r3, [r7, #28]
 800b052:	4313      	orrs	r3, r2
 800b054:	697a      	ldr	r2, [r7, #20]
 800b056:	4313      	orrs	r3, r2
 800b058:	627b      	str	r3, [r7, #36]	; 0x24
 800b05a:	e048      	b.n	800b0ee <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	689b      	ldr	r3, [r3, #8]
 800b060:	2b02      	cmp	r3, #2
 800b062:	d111      	bne.n	800b088 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 800b064:	69fb      	ldr	r3, [r7, #28]
 800b066:	0cdb      	lsrs	r3, r3, #19
 800b068:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 800b06a:	69bb      	ldr	r3, [r7, #24]
 800b06c:	0a9b      	lsrs	r3, r3, #10
 800b06e:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 800b070:	697b      	ldr	r3, [r7, #20]
 800b072:	08db      	lsrs	r3, r3, #3
 800b074:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800b076:	69bb      	ldr	r3, [r7, #24]
 800b078:	015a      	lsls	r2, r3, #5
 800b07a:	69fb      	ldr	r3, [r7, #28]
 800b07c:	02db      	lsls	r3, r3, #11
 800b07e:	4313      	orrs	r3, r2
 800b080:	697a      	ldr	r2, [r7, #20]
 800b082:	4313      	orrs	r3, r2
 800b084:	627b      	str	r3, [r7, #36]	; 0x24
 800b086:	e032      	b.n	800b0ee <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	689b      	ldr	r3, [r3, #8]
 800b08c:	2b03      	cmp	r3, #3
 800b08e:	d117      	bne.n	800b0c0 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 800b090:	6a3b      	ldr	r3, [r7, #32]
 800b092:	0fdb      	lsrs	r3, r3, #31
 800b094:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 800b096:	69fb      	ldr	r3, [r7, #28]
 800b098:	0cdb      	lsrs	r3, r3, #19
 800b09a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 800b09c:	69bb      	ldr	r3, [r7, #24]
 800b09e:	0adb      	lsrs	r3, r3, #11
 800b0a0:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 800b0a2:	697b      	ldr	r3, [r7, #20]
 800b0a4:	08db      	lsrs	r3, r3, #3
 800b0a6:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 800b0a8:	69bb      	ldr	r3, [r7, #24]
 800b0aa:	015a      	lsls	r2, r3, #5
 800b0ac:	69fb      	ldr	r3, [r7, #28]
 800b0ae:	029b      	lsls	r3, r3, #10
 800b0b0:	431a      	orrs	r2, r3
 800b0b2:	6a3b      	ldr	r3, [r7, #32]
 800b0b4:	03db      	lsls	r3, r3, #15
 800b0b6:	4313      	orrs	r3, r2
 800b0b8:	697a      	ldr	r2, [r7, #20]
 800b0ba:	4313      	orrs	r3, r2
 800b0bc:	627b      	str	r3, [r7, #36]	; 0x24
 800b0be:	e016      	b.n	800b0ee <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 800b0c0:	6a3b      	ldr	r3, [r7, #32]
 800b0c2:	0f1b      	lsrs	r3, r3, #28
 800b0c4:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800b0c6:	69fb      	ldr	r3, [r7, #28]
 800b0c8:	0d1b      	lsrs	r3, r3, #20
 800b0ca:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 800b0cc:	69bb      	ldr	r3, [r7, #24]
 800b0ce:	0b1b      	lsrs	r3, r3, #12
 800b0d0:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 800b0d2:	697b      	ldr	r3, [r7, #20]
 800b0d4:	091b      	lsrs	r3, r3, #4
 800b0d6:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 800b0d8:	69bb      	ldr	r3, [r7, #24]
 800b0da:	011a      	lsls	r2, r3, #4
 800b0dc:	69fb      	ldr	r3, [r7, #28]
 800b0de:	021b      	lsls	r3, r3, #8
 800b0e0:	431a      	orrs	r2, r3
 800b0e2:	6a3b      	ldr	r3, [r7, #32]
 800b0e4:	031b      	lsls	r3, r3, #12
 800b0e6:	4313      	orrs	r3, r2
 800b0e8:	697a      	ldr	r2, [r7, #20]
 800b0ea:	4313      	orrs	r3, r2
 800b0ec:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b0f4:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800b0f6:	e003      	b.n	800b100 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	68ba      	ldr	r2, [r7, #8]
 800b0fe:	60da      	str	r2, [r3, #12]
}
 800b100:	bf00      	nop
 800b102:	372c      	adds	r7, #44	; 0x2c
 800b104:	46bd      	mov	sp, r7
 800b106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b10a:	4770      	bx	lr

0800b10c <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 800b10c:	b580      	push	{r7, lr}
 800b10e:	b088      	sub	sp, #32
 800b110:	af00      	add	r7, sp, #0
 800b112:	6078      	str	r0, [r7, #4]
 800b114:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d101      	bne.n	800b120 <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 800b11c:	2301      	movs	r3, #1
 800b11e:	e108      	b.n	800b332 <HAL_DSI_Init+0x226>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	7c5b      	ldrb	r3, [r3, #17]
 800b124:	b2db      	uxtb	r3, r3
 800b126:	2b00      	cmp	r3, #0
 800b128:	d102      	bne.n	800b130 <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 800b12a:	6878      	ldr	r0, [r7, #4]
 800b12c:	f7f6 f84e 	bl	80011cc <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	2203      	movs	r2, #3
 800b134:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 800b136:	2300      	movs	r3, #0
 800b138:	613b      	str	r3, [r7, #16]
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800b14a:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 800b156:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b15a:	613b      	str	r3, [r7, #16]
 800b15c:	693b      	ldr	r3, [r7, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 800b15e:	f7ff f801 	bl	800a164 <HAL_GetTick>
 800b162:	61f8      	str	r0, [r7, #28]

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 800b164:	e009      	b.n	800b17a <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800b166:	f7fe fffd 	bl	800a164 <HAL_GetTick>
 800b16a:	4602      	mov	r2, r0
 800b16c:	69fb      	ldr	r3, [r7, #28]
 800b16e:	1ad3      	subs	r3, r2, r3
 800b170:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b174:	d901      	bls.n	800b17a <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 800b176:	2303      	movs	r3, #3
 800b178:	e0db      	b.n	800b332 <HAL_DSI_Init+0x226>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800b182:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b186:	2b00      	cmp	r3, #0
 800b188:	d0ed      	beq.n	800b166 <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 800b192:	687a      	ldr	r2, [r7, #4]
 800b194:	6812      	ldr	r2, [r2, #0]
 800b196:	f423 335e 	bic.w	r3, r3, #227328	; 0x37800
 800b19a:	f423 73fe 	bic.w	r3, r3, #508	; 0x1fc
 800b19e:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 800b1aa:	683b      	ldr	r3, [r7, #0]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	009a      	lsls	r2, r3, #2
 800b1b0:	683b      	ldr	r3, [r7, #0]
 800b1b2:	685b      	ldr	r3, [r3, #4]
 800b1b4:	02db      	lsls	r3, r3, #11
 800b1b6:	431a      	orrs	r2, r3
 800b1b8:	683b      	ldr	r3, [r7, #0]
 800b1ba:	689b      	ldr	r3, [r3, #8]
 800b1bc:	041b      	lsls	r3, r3, #16
 800b1be:	431a      	orrs	r2, r3
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	430a      	orrs	r2, r1
 800b1c6:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	60fb      	str	r3, [r7, #12]
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	f042 0201 	orr.w	r2, r2, #1
 800b1de:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 800b1ea:	f003 0301 	and.w	r3, r3, #1
 800b1ee:	60fb      	str	r3, [r7, #12]
 800b1f0:	68fb      	ldr	r3, [r7, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800b1f2:	f7fe ffb7 	bl	800a164 <HAL_GetTick>
 800b1f6:	61f8      	str	r0, [r7, #28]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 800b1f8:	e009      	b.n	800b20e <HAL_DSI_Init+0x102>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800b1fa:	f7fe ffb3 	bl	800a164 <HAL_GetTick>
 800b1fe:	4602      	mov	r2, r0
 800b200:	69fb      	ldr	r3, [r7, #28]
 800b202:	1ad3      	subs	r3, r2, r3
 800b204:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b208:	d901      	bls.n	800b20e <HAL_DSI_Init+0x102>
    {
      return HAL_TIMEOUT;
 800b20a:	2303      	movs	r3, #3
 800b20c:	e091      	b.n	800b332 <HAL_DSI_Init+0x226>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800b216:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d0ed      	beq.n	800b1fa <HAL_DSI_Init+0xee>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	f042 0206 	orr.w	r2, r2, #6
 800b22e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	f022 0203 	bic.w	r2, r2, #3
 800b242:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	685b      	ldr	r3, [r3, #4]
 800b252:	431a      	orrs	r2, r3
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	f042 0201 	orr.w	r2, r2, #1
 800b25c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	f022 0203 	bic.w	r2, r2, #3
 800b270:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	68da      	ldr	r2, [r3, #12]
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	430a      	orrs	r2, r1
 800b286:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /************************ Set the DSI clock parameters ************************/

  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	689a      	ldr	r2, [r3, #8]
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800b298:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	6899      	ldr	r1, [r3, #8]
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	689a      	ldr	r2, [r3, #8]
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	430a      	orrs	r2, r1
 800b2aa:	609a      	str	r2, [r3, #8]

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 800b2ac:	683b      	ldr	r3, [r7, #0]
 800b2ae:	685b      	ldr	r3, [r3, #4]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d002      	beq.n	800b2ba <HAL_DSI_Init+0x1ae>
 800b2b4:	683b      	ldr	r3, [r7, #0]
 800b2b6:	685b      	ldr	r3, [r3, #4]
 800b2b8:	e000      	b.n	800b2bc <HAL_DSI_Init+0x1b0>
 800b2ba:	2301      	movs	r3, #1
 800b2bc:	61bb      	str	r3, [r7, #24]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800b2be:	69bb      	ldr	r3, [r7, #24]
 800b2c0:	4a1e      	ldr	r2, [pc, #120]	; (800b33c <HAL_DSI_Init+0x230>)
 800b2c2:	fb02 f203 	mul.w	r2, r2, r3
 800b2c6:	683b      	ldr	r3, [r7, #0]
 800b2c8:	689b      	ldr	r3, [r3, #8]
 800b2ca:	f003 0303 	and.w	r3, r3, #3
 800b2ce:	409a      	lsls	r2, r3
 800b2d0:	683b      	ldr	r3, [r7, #0]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	f242 7110 	movw	r1, #10000	; 0x2710
 800b2d8:	fb01 f303 	mul.w	r3, r1, r3
 800b2dc:	fbb2 f3f3 	udiv	r3, r2, r3
 800b2e0:	617b      	str	r3, [r7, #20]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 800b2f2:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	697a      	ldr	r2, [r7, #20]
 800b304:	430a      	orrs	r2, r1
 800b306:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	2200      	movs	r2, #0
 800b310:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	2200      	movs	r2, #0
 800b31a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	2200      	movs	r2, #0
 800b322:	619a      	str	r2, [r3, #24]

  /* Initialise the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	2200      	movs	r2, #0
 800b328:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	2201      	movs	r2, #1
 800b32e:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 800b330:	2300      	movs	r3, #0
}
 800b332:	4618      	mov	r0, r3
 800b334:	3720      	adds	r7, #32
 800b336:	46bd      	mov	sp, r7
 800b338:	bd80      	pop	{r7, pc}
 800b33a:	bf00      	nop
 800b33c:	003d0900 	.word	0x003d0900

0800b340 <HAL_DSI_ConfigErrorMonitor>:
  * @param  ActiveErrors  indicates which error interrupts will be enabled.
  *                      This parameter can be any combination of @arg DSI_Error_Data_Type.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
 800b340:	b480      	push	{r7}
 800b342:	b083      	sub	sp, #12
 800b344:	af00      	add	r7, sp, #0
 800b346:	6078      	str	r0, [r7, #4]
 800b348:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	7c1b      	ldrb	r3, [r3, #16]
 800b34e:	2b01      	cmp	r3, #1
 800b350:	d101      	bne.n	800b356 <HAL_DSI_ConfigErrorMonitor+0x16>
 800b352:	2302      	movs	r3, #2
 800b354:	e0ab      	b.n	800b4ae <HAL_DSI_ConfigErrorMonitor+0x16e>
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	2201      	movs	r2, #1
 800b35a:	741a      	strb	r2, [r3, #16]

  hdsi->Instance->IER[0U] = 0U;
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	2200      	movs	r2, #0
 800b362:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	2200      	movs	r2, #0
 800b36c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	683a      	ldr	r2, [r7, #0]
 800b374:	619a      	str	r2, [r3, #24]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 800b376:	683b      	ldr	r3, [r7, #0]
 800b378:	f003 0301 	and.w	r3, r3, #1
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d00b      	beq.n	800b398 <HAL_DSI_ConfigErrorMonitor+0x58>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800b388:	687a      	ldr	r2, [r7, #4]
 800b38a:	6812      	ldr	r2, [r2, #0]
 800b38c:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 800b390:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 800b394:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 800b398:	683b      	ldr	r3, [r7, #0]
 800b39a:	f003 0302 	and.w	r3, r3, #2
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d009      	beq.n	800b3b6 <HAL_DSI_ConfigErrorMonitor+0x76>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	f442 12f8 	orr.w	r2, r2, #2031616	; 0x1f0000
 800b3b2:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 800b3b6:	683b      	ldr	r3, [r7, #0]
 800b3b8:	f003 0304 	and.w	r3, r3, #4
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d009      	beq.n	800b3d4 <HAL_DSI_ConfigErrorMonitor+0x94>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	f042 0201 	orr.w	r2, r2, #1
 800b3d0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 800b3d4:	683b      	ldr	r3, [r7, #0]
 800b3d6:	f003 0308 	and.w	r3, r3, #8
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d009      	beq.n	800b3f2 <HAL_DSI_ConfigErrorMonitor+0xb2>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	f042 0202 	orr.w	r2, r2, #2
 800b3ee:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 800b3f2:	683b      	ldr	r3, [r7, #0]
 800b3f4:	f003 0310 	and.w	r3, r3, #16
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d009      	beq.n	800b410 <HAL_DSI_ConfigErrorMonitor+0xd0>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	f042 020c 	orr.w	r2, r2, #12
 800b40c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 800b410:	683b      	ldr	r3, [r7, #0]
 800b412:	f003 0320 	and.w	r3, r3, #32
 800b416:	2b00      	cmp	r3, #0
 800b418:	d009      	beq.n	800b42e <HAL_DSI_ConfigErrorMonitor+0xee>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	f042 0210 	orr.w	r2, r2, #16
 800b42a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 800b42e:	683b      	ldr	r3, [r7, #0]
 800b430:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b434:	2b00      	cmp	r3, #0
 800b436:	d009      	beq.n	800b44c <HAL_DSI_ConfigErrorMonitor+0x10c>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	f042 0220 	orr.w	r2, r2, #32
 800b448:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 800b44c:	683b      	ldr	r3, [r7, #0]
 800b44e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b452:	2b00      	cmp	r3, #0
 800b454:	d009      	beq.n	800b46a <HAL_DSI_ConfigErrorMonitor+0x12a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b466:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 800b46a:	683b      	ldr	r3, [r7, #0]
 800b46c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b470:	2b00      	cmp	r3, #0
 800b472:	d009      	beq.n	800b488 <HAL_DSI_ConfigErrorMonitor+0x148>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b484:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 800b488:	683b      	ldr	r3, [r7, #0]
 800b48a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d009      	beq.n	800b4a6 <HAL_DSI_ConfigErrorMonitor+0x166>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	f442 52f8 	orr.w	r2, r2, #7936	; 0x1f00
 800b4a2:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	2200      	movs	r2, #0
 800b4aa:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800b4ac:	2300      	movs	r3, #0
}
 800b4ae:	4618      	mov	r0, r3
 800b4b0:	370c      	adds	r7, #12
 800b4b2:	46bd      	mov	sp, r7
 800b4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b8:	4770      	bx	lr

0800b4ba <HAL_DSI_IRQHandler>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
void HAL_DSI_IRQHandler(DSI_HandleTypeDef *hdsi)
{
 800b4ba:	b580      	push	{r7, lr}
 800b4bc:	b084      	sub	sp, #16
 800b4be:	af00      	add	r7, sp, #0
 800b4c0:	6078      	str	r0, [r7, #4]
  uint32_t ErrorStatus0, ErrorStatus1;

  /* Tearing Effect Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800b4ca:	f003 0301 	and.w	r3, r3, #1
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d00f      	beq.n	800b4f2 <HAL_DSI_IRQHandler+0x38>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800b4da:	f003 0301 	and.w	r3, r3, #1
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d007      	beq.n	800b4f2 <HAL_DSI_IRQHandler+0x38>
    {
      /* Clear the Tearing Effect Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	2201      	movs	r2, #1
 800b4e8:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Tearing Effect callback */
      hdsi->TearingEffectCallback(hdsi);
#else
      /*Call legacy Tearing Effect callback*/
      HAL_DSI_TearingEffectCallback(hdsi);
 800b4ec:	6878      	ldr	r0, [r7, #4]
 800b4ee:	f000 f8ad 	bl	800b64c <HAL_DSI_TearingEffectCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* End of Refresh Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800b4fa:	f003 0302 	and.w	r3, r3, #2
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d00f      	beq.n	800b522 <HAL_DSI_IRQHandler+0x68>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800b50a:	f003 0302 	and.w	r3, r3, #2
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d007      	beq.n	800b522 <HAL_DSI_IRQHandler+0x68>
    {
      /* Clear the End of Refresh Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	2202      	movs	r2, #2
 800b518:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered End of refresh callback */
      hdsi->EndOfRefreshCallback(hdsi);
#else
      /*Call Legacy End of refresh callback */
      HAL_DSI_EndOfRefreshCallback(hdsi);
 800b51c:	6878      	ldr	r0, [r7, #4]
 800b51e:	f000 f89f 	bl	800b660 <HAL_DSI_EndOfRefreshCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* Error Interrupts management ***********************************************/
  if (hdsi->ErrorMsk != 0U)
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	699b      	ldr	r3, [r3, #24]
 800b526:	2b00      	cmp	r3, #0
 800b528:	f000 808c 	beq.w	800b644 <HAL_DSI_IRQHandler+0x18a>
  {
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800b534:	60fb      	str	r3, [r7, #12]
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800b53e:	68fa      	ldr	r2, [r7, #12]
 800b540:	4013      	ands	r3, r2
 800b542:	60fb      	str	r3, [r7, #12]
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800b54c:	60bb      	str	r3, [r7, #8]
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800b556:	68ba      	ldr	r2, [r7, #8]
 800b558:	4013      	ands	r3, r2
 800b55a:	60bb      	str	r3, [r7, #8]

    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	b29b      	uxth	r3, r3
 800b560:	2b00      	cmp	r3, #0
 800b562:	d005      	beq.n	800b570 <HAL_DSI_IRQHandler+0xb6>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	695b      	ldr	r3, [r3, #20]
 800b568:	f043 0201 	orr.w	r2, r3, #1
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800b576:	2b00      	cmp	r3, #0
 800b578:	d005      	beq.n	800b586 <HAL_DSI_IRQHandler+0xcc>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	695b      	ldr	r3, [r3, #20]
 800b57e:	f043 0202 	orr.w	r2, r3, #2
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 800b586:	68bb      	ldr	r3, [r7, #8]
 800b588:	f003 0301 	and.w	r3, r3, #1
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d005      	beq.n	800b59c <HAL_DSI_IRQHandler+0xe2>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	695b      	ldr	r3, [r3, #20]
 800b594:	f043 0204 	orr.w	r2, r3, #4
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 800b59c:	68bb      	ldr	r3, [r7, #8]
 800b59e:	f003 0302 	and.w	r3, r3, #2
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d005      	beq.n	800b5b2 <HAL_DSI_IRQHandler+0xf8>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	695b      	ldr	r3, [r3, #20]
 800b5aa:	f043 0208 	orr.w	r2, r3, #8
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 800b5b2:	68bb      	ldr	r3, [r7, #8]
 800b5b4:	f003 030c 	and.w	r3, r3, #12
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d005      	beq.n	800b5c8 <HAL_DSI_IRQHandler+0x10e>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	695b      	ldr	r3, [r3, #20]
 800b5c0:	f043 0210 	orr.w	r2, r3, #16
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 800b5c8:	68bb      	ldr	r3, [r7, #8]
 800b5ca:	f003 0310 	and.w	r3, r3, #16
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d005      	beq.n	800b5de <HAL_DSI_IRQHandler+0x124>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	695b      	ldr	r3, [r3, #20]
 800b5d6:	f043 0220 	orr.w	r2, r3, #32
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 800b5de:	68bb      	ldr	r3, [r7, #8]
 800b5e0:	f003 0320 	and.w	r3, r3, #32
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d005      	beq.n	800b5f4 <HAL_DSI_IRQHandler+0x13a>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	695b      	ldr	r3, [r3, #20]
 800b5ec:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 800b5f4:	68bb      	ldr	r3, [r7, #8]
 800b5f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d005      	beq.n	800b60a <HAL_DSI_IRQHandler+0x150>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	695b      	ldr	r3, [r3, #20]
 800b602:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 800b60a:	68bb      	ldr	r3, [r7, #8]
 800b60c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b610:	2b00      	cmp	r3, #0
 800b612:	d005      	beq.n	800b620 <HAL_DSI_IRQHandler+0x166>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	695b      	ldr	r3, [r3, #20]
 800b618:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 800b620:	68bb      	ldr	r3, [r7, #8]
 800b622:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 800b626:	2b00      	cmp	r3, #0
 800b628:	d005      	beq.n	800b636 <HAL_DSI_IRQHandler+0x17c>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	695b      	ldr	r3, [r3, #20]
 800b62e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	615a      	str	r2, [r3, #20]
    }

    /* Check only selected errors */
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	695b      	ldr	r3, [r3, #20]
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d002      	beq.n	800b644 <HAL_DSI_IRQHandler+0x18a>
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Error callback */
      hdsi->ErrorCallback(hdsi);
#else
      /*Call Legacy Error callback */
      HAL_DSI_ErrorCallback(hdsi);
 800b63e:	6878      	ldr	r0, [r7, #4]
 800b640:	f000 f818 	bl	800b674 <HAL_DSI_ErrorCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }
}
 800b644:	bf00      	nop
 800b646:	3710      	adds	r7, #16
 800b648:	46bd      	mov	sp, r7
 800b64a:	bd80      	pop	{r7, pc}

0800b64c <HAL_DSI_TearingEffectCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef *hdsi)
{
 800b64c:	b480      	push	{r7}
 800b64e:	b083      	sub	sp, #12
 800b650:	af00      	add	r7, sp, #0
 800b652:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_TearingEffectCallback could be implemented in the user file
   */
}
 800b654:	bf00      	nop
 800b656:	370c      	adds	r7, #12
 800b658:	46bd      	mov	sp, r7
 800b65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b65e:	4770      	bx	lr

0800b660 <HAL_DSI_EndOfRefreshCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef *hdsi)
{
 800b660:	b480      	push	{r7}
 800b662:	b083      	sub	sp, #12
 800b664:	af00      	add	r7, sp, #0
 800b666:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_EndOfRefreshCallback could be implemented in the user file
   */
}
 800b668:	bf00      	nop
 800b66a:	370c      	adds	r7, #12
 800b66c:	46bd      	mov	sp, r7
 800b66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b672:	4770      	bx	lr

0800b674 <HAL_DSI_ErrorCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_ErrorCallback(DSI_HandleTypeDef *hdsi)
{
 800b674:	b480      	push	{r7}
 800b676:	b083      	sub	sp, #12
 800b678:	af00      	add	r7, sp, #0
 800b67a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_ErrorCallback could be implemented in the user file
   */
}
 800b67c:	bf00      	nop
 800b67e:	370c      	adds	r7, #12
 800b680:	46bd      	mov	sp, r7
 800b682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b686:	4770      	bx	lr

0800b688 <HAL_DSI_SetGenericVCID>:
  *               the configuration information for the DSI.
  * @param  VirtualChannelID  Virtual channel ID
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
 800b688:	b480      	push	{r7}
 800b68a:	b083      	sub	sp, #12
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	6078      	str	r0, [r7, #4]
 800b690:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	7c1b      	ldrb	r3, [r3, #16]
 800b696:	2b01      	cmp	r3, #1
 800b698:	d101      	bne.n	800b69e <HAL_DSI_SetGenericVCID+0x16>
 800b69a:	2302      	movs	r3, #2
 800b69c:	e016      	b.n	800b6cc <HAL_DSI_SetGenericVCID+0x44>
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	2201      	movs	r2, #1
 800b6a2:	741a      	strb	r2, [r3, #16]

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	f022 0203 	bic.w	r2, r2, #3
 800b6b2:	631a      	str	r2, [r3, #48]	; 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	683a      	ldr	r2, [r7, #0]
 800b6c0:	430a      	orrs	r2, r1
 800b6c2:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	2200      	movs	r2, #0
 800b6c8:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800b6ca:	2300      	movs	r3, #0
}
 800b6cc:	4618      	mov	r0, r3
 800b6ce:	370c      	adds	r7, #12
 800b6d0:	46bd      	mov	sp, r7
 800b6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d6:	4770      	bx	lr

0800b6d8 <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 800b6d8:	b480      	push	{r7}
 800b6da:	b083      	sub	sp, #12
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	6078      	str	r0, [r7, #4]
 800b6e0:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	7c1b      	ldrb	r3, [r3, #16]
 800b6e6:	2b01      	cmp	r3, #1
 800b6e8:	d101      	bne.n	800b6ee <HAL_DSI_ConfigAdaptedCommandMode+0x16>
 800b6ea:	2302      	movs	r3, #2
 800b6ec:	e0c5      	b.n	800b87a <HAL_DSI_ConfigAdaptedCommandMode+0x1a2>
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	2201      	movs	r2, #1
 800b6f2:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	f042 0201 	orr.w	r2, r2, #1
 800b702:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	f022 0201 	bic.w	r2, r2, #1
 800b714:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	f042 0201 	orr.w	r2, r2, #1
 800b728:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	68da      	ldr	r2, [r3, #12]
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	f022 0203 	bic.w	r2, r2, #3
 800b73a:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	68d9      	ldr	r1, [r3, #12]
 800b742:	683b      	ldr	r3, [r7, #0]
 800b744:	681a      	ldr	r2, [r3, #0]
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	430a      	orrs	r2, r1
 800b74c:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	695a      	ldr	r2, [r3, #20]
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	f022 0207 	bic.w	r2, r2, #7
 800b75c:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	6959      	ldr	r1, [r3, #20]
 800b764:	683b      	ldr	r3, [r7, #0]
 800b766:	69da      	ldr	r2, [r3, #28]
 800b768:	683b      	ldr	r3, [r7, #0]
 800b76a:	699b      	ldr	r3, [r3, #24]
 800b76c:	431a      	orrs	r2, r3
 800b76e:	683b      	ldr	r3, [r7, #0]
 800b770:	695b      	ldr	r3, [r3, #20]
 800b772:	431a      	orrs	r2, r3
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	430a      	orrs	r2, r1
 800b77a:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	691a      	ldr	r2, [r3, #16]
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	f022 020f 	bic.w	r2, r2, #15
 800b78a:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	6919      	ldr	r1, [r3, #16]
 800b792:	683b      	ldr	r3, [r7, #0]
 800b794:	685a      	ldr	r2, [r3, #4]
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	430a      	orrs	r2, r1
 800b79c:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	f022 020e 	bic.w	r2, r2, #14
 800b7ae:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 800b7ba:	683b      	ldr	r3, [r7, #0]
 800b7bc:	685b      	ldr	r3, [r3, #4]
 800b7be:	005a      	lsls	r2, r3, #1
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	430a      	orrs	r2, r1
 800b7c6:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b7d0:	687a      	ldr	r2, [r7, #4]
 800b7d2:	6812      	ldr	r2, [r2, #0]
 800b7d4:	0c1b      	lsrs	r3, r3, #16
 800b7d6:	041b      	lsls	r3, r3, #16
 800b7d8:	6653      	str	r3, [r2, #100]	; 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	6e59      	ldr	r1, [r3, #100]	; 0x64
 800b7e0:	683b      	ldr	r3, [r7, #0]
 800b7e2:	689a      	ldr	r2, [r3, #8]
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	430a      	orrs	r2, r1
 800b7ea:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800b7fc:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 800b808:	683b      	ldr	r3, [r7, #0]
 800b80a:	68da      	ldr	r2, [r3, #12]
 800b80c:	683b      	ldr	r3, [r7, #0]
 800b80e:	691b      	ldr	r3, [r3, #16]
 800b810:	431a      	orrs	r2, r3
 800b812:	683b      	ldr	r3, [r7, #0]
 800b814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b816:	431a      	orrs	r2, r3
                            CmdCfg->VSyncPol);
 800b818:	683b      	ldr	r3, [r7, #0]
 800b81a:	6a1b      	ldr	r3, [r3, #32]
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 800b81c:	431a      	orrs	r2, r3
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	430a      	orrs	r2, r1
 800b824:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	f022 0201 	bic.w	r2, r2, #1
 800b836:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	6e99      	ldr	r1, [r3, #104]	; 0x68
 800b83e:	683b      	ldr	r3, [r7, #0]
 800b840:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	430a      	orrs	r2, r1
 800b848:	669a      	str	r2, [r3, #104]	; 0x68

  /* Enable the Tearing Effect interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	f042 0201 	orr.w	r2, r2, #1
 800b85a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	f042 0202 	orr.w	r2, r2, #2
 800b86e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	2200      	movs	r2, #0
 800b876:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800b878:	2300      	movs	r3, #0
}
 800b87a:	4618      	mov	r0, r3
 800b87c:	370c      	adds	r7, #12
 800b87e:	46bd      	mov	sp, r7
 800b880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b884:	4770      	bx	lr
	...

0800b888 <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 800b888:	b480      	push	{r7}
 800b88a:	b083      	sub	sp, #12
 800b88c:	af00      	add	r7, sp, #0
 800b88e:	6078      	str	r0, [r7, #4]
 800b890:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	7c1b      	ldrb	r3, [r3, #16]
 800b896:	2b01      	cmp	r3, #1
 800b898:	d101      	bne.n	800b89e <HAL_DSI_ConfigCommand+0x16>
 800b89a:	2302      	movs	r3, #2
 800b89c:	e049      	b.n	800b932 <HAL_DSI_ConfigCommand+0xaa>
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	2201      	movs	r2, #1
 800b8a2:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	6e99      	ldr	r1, [r3, #104]	; 0x68
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	681a      	ldr	r2, [r3, #0]
 800b8ae:	4b24      	ldr	r3, [pc, #144]	; (800b940 <HAL_DSI_ConfigCommand+0xb8>)
 800b8b0:	400b      	ands	r3, r1
 800b8b2:	6693      	str	r3, [r2, #104]	; 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	6e99      	ldr	r1, [r3, #104]	; 0x68
 800b8ba:	683b      	ldr	r3, [r7, #0]
 800b8bc:	681a      	ldr	r2, [r3, #0]
                           LPCmd->LPGenShortWriteOneP | \
 800b8be:	683b      	ldr	r3, [r7, #0]
 800b8c0:	685b      	ldr	r3, [r3, #4]
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 800b8c2:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortWriteTwoP | \
 800b8c4:	683b      	ldr	r3, [r7, #0]
 800b8c6:	689b      	ldr	r3, [r3, #8]
                           LPCmd->LPGenShortWriteOneP | \
 800b8c8:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadNoP   | \
 800b8ca:	683b      	ldr	r3, [r7, #0]
 800b8cc:	68db      	ldr	r3, [r3, #12]
                           LPCmd->LPGenShortWriteTwoP | \
 800b8ce:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadOneP  | \
 800b8d0:	683b      	ldr	r3, [r7, #0]
 800b8d2:	691b      	ldr	r3, [r3, #16]
                           LPCmd->LPGenShortReadNoP   | \
 800b8d4:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadTwoP  | \
 800b8d6:	683b      	ldr	r3, [r7, #0]
 800b8d8:	695b      	ldr	r3, [r3, #20]
                           LPCmd->LPGenShortReadOneP  | \
 800b8da:	431a      	orrs	r2, r3
                           LPCmd->LPGenLongWrite      | \
 800b8dc:	683b      	ldr	r3, [r7, #0]
 800b8de:	699b      	ldr	r3, [r3, #24]
                           LPCmd->LPGenShortReadTwoP  | \
 800b8e0:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteNoP  | \
 800b8e2:	683b      	ldr	r3, [r7, #0]
 800b8e4:	69db      	ldr	r3, [r3, #28]
                           LPCmd->LPGenLongWrite      | \
 800b8e6:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteOneP | \
 800b8e8:	683b      	ldr	r3, [r7, #0]
 800b8ea:	6a1b      	ldr	r3, [r3, #32]
                           LPCmd->LPDcsShortWriteNoP  | \
 800b8ec:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortReadNoP   | \
 800b8ee:	683b      	ldr	r3, [r7, #0]
 800b8f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           LPCmd->LPDcsShortWriteOneP | \
 800b8f2:	431a      	orrs	r2, r3
                           LPCmd->LPDcsLongWrite      | \
 800b8f4:	683b      	ldr	r3, [r7, #0]
 800b8f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                           LPCmd->LPDcsShortReadNoP   | \
 800b8f8:	431a      	orrs	r2, r3
                           LPCmd->LPMaxReadPacket);
 800b8fa:	683b      	ldr	r3, [r7, #0]
 800b8fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                           LPCmd->LPDcsLongWrite      | \
 800b8fe:	431a      	orrs	r2, r3
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	430a      	orrs	r2, r1
 800b906:	669a      	str	r2, [r3, #104]	; 0x68

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	f022 0202 	bic.w	r2, r2, #2
 800b916:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	6e99      	ldr	r1, [r3, #104]	; 0x68
 800b91e:	683b      	ldr	r3, [r7, #0]
 800b920:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	430a      	orrs	r2, r1
 800b928:	669a      	str	r2, [r3, #104]	; 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	2200      	movs	r2, #0
 800b92e:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800b930:	2300      	movs	r3, #0
}
 800b932:	4618      	mov	r0, r3
 800b934:	370c      	adds	r7, #12
 800b936:	46bd      	mov	sp, r7
 800b938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b93c:	4770      	bx	lr
 800b93e:	bf00      	nop
 800b940:	fef080ff 	.word	0xfef080ff

0800b944 <HAL_DSI_ConfigFlowControl>:
  * @param  FlowControl  flow control feature(s) to be enabled.
  *                      This parameter can be any combination of @arg DSI_FlowControl.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
 800b944:	b480      	push	{r7}
 800b946:	b083      	sub	sp, #12
 800b948:	af00      	add	r7, sp, #0
 800b94a:	6078      	str	r0, [r7, #4]
 800b94c:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	7c1b      	ldrb	r3, [r3, #16]
 800b952:	2b01      	cmp	r3, #1
 800b954:	d101      	bne.n	800b95a <HAL_DSI_ConfigFlowControl+0x16>
 800b956:	2302      	movs	r3, #2
 800b958:	e016      	b.n	800b988 <HAL_DSI_ConfigFlowControl+0x44>
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	2201      	movs	r2, #1
 800b95e:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	f022 021f 	bic.w	r2, r2, #31
 800b96e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	683a      	ldr	r2, [r7, #0]
 800b97c:	430a      	orrs	r2, r1
 800b97e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	2200      	movs	r2, #0
 800b984:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800b986:	2300      	movs	r3, #0
}
 800b988:	4618      	mov	r0, r3
 800b98a:	370c      	adds	r7, #12
 800b98c:	46bd      	mov	sp, r7
 800b98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b992:	4770      	bx	lr

0800b994 <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 800b994:	b480      	push	{r7}
 800b996:	b085      	sub	sp, #20
 800b998:	af00      	add	r7, sp, #0
 800b99a:	6078      	str	r0, [r7, #4]
 800b99c:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	7c1b      	ldrb	r3, [r3, #16]
 800b9a2:	2b01      	cmp	r3, #1
 800b9a4:	d101      	bne.n	800b9aa <HAL_DSI_ConfigPhyTimer+0x16>
 800b9a6:	2302      	movs	r3, #2
 800b9a8:	e058      	b.n	800ba5c <HAL_DSI_ConfigPhyTimer+0xc8>
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	2201      	movs	r2, #1
 800b9ae:	741a      	strb	r2, [r3, #16]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 800b9b0:	683b      	ldr	r3, [r7, #0]
 800b9b2:	681a      	ldr	r2, [r3, #0]
 800b9b4:	683b      	ldr	r3, [r7, #0]
 800b9b6:	685b      	ldr	r3, [r3, #4]
 800b9b8:	4293      	cmp	r3, r2
 800b9ba:	bf38      	it	cc
 800b9bc:	4613      	movcc	r3, r2
 800b9be:	60fb      	str	r3, [r7, #12]
     This timings are configured by the HS2LP_TIME and LP2HS_TIME in the DSI Host Clock Lane Timer Configuration Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 800b9d0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	041a      	lsls	r2, r3, #16
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	431a      	orrs	r2, r3
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	430a      	orrs	r2, r1
 800b9ea:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 800b9fe:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 800ba0a:	683b      	ldr	r3, [r7, #0]
 800ba0c:	691a      	ldr	r2, [r3, #16]
 800ba0e:	683b      	ldr	r3, [r7, #0]
 800ba10:	68db      	ldr	r3, [r3, #12]
 800ba12:	041b      	lsls	r3, r3, #16
 800ba14:	431a      	orrs	r2, r3
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 800ba16:	683b      	ldr	r3, [r7, #0]
 800ba18:	689b      	ldr	r3, [r3, #8]
 800ba1a:	061b      	lsls	r3, r3, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 800ba1c:	431a      	orrs	r2, r3
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	430a      	orrs	r2, r1
 800ba24:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800ba38:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800ba44:	683b      	ldr	r3, [r7, #0]
 800ba46:	695b      	ldr	r3, [r3, #20]
 800ba48:	021a      	lsls	r2, r3, #8
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	430a      	orrs	r2, r1
 800ba50:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	2200      	movs	r2, #0
 800ba58:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800ba5a:	2300      	movs	r3, #0
}
 800ba5c:	4618      	mov	r0, r3
 800ba5e:	3714      	adds	r7, #20
 800ba60:	46bd      	mov	sp, r7
 800ba62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba66:	4770      	bx	lr

0800ba68 <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 800ba68:	b480      	push	{r7}
 800ba6a:	b083      	sub	sp, #12
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	6078      	str	r0, [r7, #4]
 800ba70:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	7c1b      	ldrb	r3, [r3, #16]
 800ba76:	2b01      	cmp	r3, #1
 800ba78:	d101      	bne.n	800ba7e <HAL_DSI_ConfigHostTimeouts+0x16>
 800ba7a:	2302      	movs	r3, #2
 800ba7c:	e0b4      	b.n	800bbe8 <HAL_DSI_ConfigHostTimeouts+0x180>
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	2201      	movs	r2, #1
 800ba82:	741a      	strb	r2, [r3, #16]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	689a      	ldr	r2, [r3, #8]
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800ba92:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	6899      	ldr	r1, [r3, #8]
 800ba9a:	683b      	ldr	r3, [r7, #0]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	021a      	lsls	r2, r3, #8
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	430a      	orrs	r2, r1
 800baa6:	609a      	str	r2, [r3, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	b292      	uxth	r2, r2
 800bab4:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	6f99      	ldr	r1, [r3, #120]	; 0x78
 800babc:	683b      	ldr	r3, [r7, #0]
 800babe:	685b      	ldr	r3, [r3, #4]
 800bac0:	041a      	lsls	r2, r3, #16
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	430a      	orrs	r2, r1
 800bac8:	679a      	str	r2, [r3, #120]	; 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bad0:	687a      	ldr	r2, [r7, #4]
 800bad2:	6812      	ldr	r2, [r2, #0]
 800bad4:	0c1b      	lsrs	r3, r3, #16
 800bad6:	041b      	lsls	r3, r3, #16
 800bad8:	6793      	str	r3, [r2, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	6f99      	ldr	r1, [r3, #120]	; 0x78
 800bae0:	683b      	ldr	r3, [r7, #0]
 800bae2:	689a      	ldr	r2, [r3, #8]
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	430a      	orrs	r2, r1
 800baea:	679a      	str	r2, [r3, #120]	; 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800baf2:	687a      	ldr	r2, [r7, #4]
 800baf4:	6812      	ldr	r2, [r2, #0]
 800baf6:	0c1b      	lsrs	r3, r3, #16
 800baf8:	041b      	lsls	r3, r3, #16
 800bafa:	67d3      	str	r3, [r2, #124]	; 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 800bb02:	683b      	ldr	r3, [r7, #0]
 800bb04:	68da      	ldr	r2, [r3, #12]
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	430a      	orrs	r2, r1
 800bb0c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bb16:	687a      	ldr	r2, [r7, #4]
 800bb18:	6812      	ldr	r2, [r2, #0]
 800bb1a:	0c1b      	lsrs	r3, r3, #16
 800bb1c:	041b      	lsls	r3, r3, #16
 800bb1e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 800bb2a:	683b      	ldr	r3, [r7, #0]
 800bb2c:	691a      	ldr	r2, [r3, #16]
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	430a      	orrs	r2, r1
 800bb34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bb40:	687a      	ldr	r2, [r7, #4]
 800bb42:	6812      	ldr	r2, [r2, #0]
 800bb44:	0c1b      	lsrs	r3, r3, #16
 800bb46:	041b      	lsls	r3, r3, #16
 800bb48:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 800bb54:	683b      	ldr	r3, [r7, #0]
 800bb56:	695a      	ldr	r2, [r3, #20]
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	430a      	orrs	r2, r1
 800bb5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800bb72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 800bb7e:	683b      	ldr	r3, [r7, #0]
 800bb80:	699a      	ldr	r2, [r3, #24]
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	430a      	orrs	r2, r1
 800bb88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bb94:	687a      	ldr	r2, [r7, #4]
 800bb96:	6812      	ldr	r2, [r2, #0]
 800bb98:	0c1b      	lsrs	r3, r3, #16
 800bb9a:	041b      	lsls	r3, r3, #16
 800bb9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 800bba8:	683b      	ldr	r3, [r7, #0]
 800bbaa:	69da      	ldr	r2, [r3, #28]
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	430a      	orrs	r2, r1
 800bbb2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bbbe:	687a      	ldr	r2, [r7, #4]
 800bbc0:	6812      	ldr	r2, [r2, #0]
 800bbc2:	0c1b      	lsrs	r3, r3, #16
 800bbc4:	041b      	lsls	r3, r3, #16
 800bbc6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800bbd2:	683b      	ldr	r3, [r7, #0]
 800bbd4:	6a1a      	ldr	r2, [r3, #32]
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	430a      	orrs	r2, r1
 800bbdc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	2200      	movs	r2, #0
 800bbe4:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800bbe6:	2300      	movs	r3, #0
}
 800bbe8:	4618      	mov	r0, r3
 800bbea:	370c      	adds	r7, #12
 800bbec:	46bd      	mov	sp, r7
 800bbee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf2:	4770      	bx	lr

0800bbf4 <HAL_DSI_SetLowPowerRXFilter>:
  *               the configuration information for the DSI.
  * @param  Frequency  cutoff frequency of low-pass filter at the input of LPRX
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
 800bbf4:	b480      	push	{r7}
 800bbf6:	b083      	sub	sp, #12
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	6078      	str	r0, [r7, #4]
 800bbfc:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	7c1b      	ldrb	r3, [r3, #16]
 800bc02:	2b01      	cmp	r3, #1
 800bc04:	d101      	bne.n	800bc0a <HAL_DSI_SetLowPowerRXFilter+0x16>
 800bc06:	2302      	movs	r3, #2
 800bc08:	e01b      	b.n	800bc42 <HAL_DSI_SetLowPowerRXFilter+0x4e>
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	2201      	movs	r2, #1
 800bc0e:	741a      	strb	r2, [r3, #16]

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 800bc20:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
 800bc2c:	683b      	ldr	r3, [r7, #0]
 800bc2e:	065a      	lsls	r2, r3, #25
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	430a      	orrs	r2, r1
 800bc36:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	2200      	movs	r2, #0
 800bc3e:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800bc40:	2300      	movs	r3, #0
}
 800bc42:	4618      	mov	r0, r3
 800bc44:	370c      	adds	r7, #12
 800bc46:	46bd      	mov	sp, r7
 800bc48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc4c:	4770      	bx	lr
	...

0800bc50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800bc50:	b480      	push	{r7}
 800bc52:	b089      	sub	sp, #36	; 0x24
 800bc54:	af00      	add	r7, sp, #0
 800bc56:	6078      	str	r0, [r7, #4]
 800bc58:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800bc5a:	2300      	movs	r3, #0
 800bc5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800bc5e:	2300      	movs	r3, #0
 800bc60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800bc62:	2300      	movs	r3, #0
 800bc64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800bc66:	2300      	movs	r3, #0
 800bc68:	61fb      	str	r3, [r7, #28]
 800bc6a:	e177      	b.n	800bf5c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800bc6c:	2201      	movs	r2, #1
 800bc6e:	69fb      	ldr	r3, [r7, #28]
 800bc70:	fa02 f303 	lsl.w	r3, r2, r3
 800bc74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800bc76:	683b      	ldr	r3, [r7, #0]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	697a      	ldr	r2, [r7, #20]
 800bc7c:	4013      	ands	r3, r2
 800bc7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800bc80:	693a      	ldr	r2, [r7, #16]
 800bc82:	697b      	ldr	r3, [r7, #20]
 800bc84:	429a      	cmp	r2, r3
 800bc86:	f040 8166 	bne.w	800bf56 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800bc8a:	683b      	ldr	r3, [r7, #0]
 800bc8c:	685b      	ldr	r3, [r3, #4]
 800bc8e:	2b01      	cmp	r3, #1
 800bc90:	d00b      	beq.n	800bcaa <HAL_GPIO_Init+0x5a>
 800bc92:	683b      	ldr	r3, [r7, #0]
 800bc94:	685b      	ldr	r3, [r3, #4]
 800bc96:	2b02      	cmp	r3, #2
 800bc98:	d007      	beq.n	800bcaa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800bc9a:	683b      	ldr	r3, [r7, #0]
 800bc9c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800bc9e:	2b11      	cmp	r3, #17
 800bca0:	d003      	beq.n	800bcaa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800bca2:	683b      	ldr	r3, [r7, #0]
 800bca4:	685b      	ldr	r3, [r3, #4]
 800bca6:	2b12      	cmp	r3, #18
 800bca8:	d130      	bne.n	800bd0c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	689b      	ldr	r3, [r3, #8]
 800bcae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800bcb0:	69fb      	ldr	r3, [r7, #28]
 800bcb2:	005b      	lsls	r3, r3, #1
 800bcb4:	2203      	movs	r2, #3
 800bcb6:	fa02 f303 	lsl.w	r3, r2, r3
 800bcba:	43db      	mvns	r3, r3
 800bcbc:	69ba      	ldr	r2, [r7, #24]
 800bcbe:	4013      	ands	r3, r2
 800bcc0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800bcc2:	683b      	ldr	r3, [r7, #0]
 800bcc4:	68da      	ldr	r2, [r3, #12]
 800bcc6:	69fb      	ldr	r3, [r7, #28]
 800bcc8:	005b      	lsls	r3, r3, #1
 800bcca:	fa02 f303 	lsl.w	r3, r2, r3
 800bcce:	69ba      	ldr	r2, [r7, #24]
 800bcd0:	4313      	orrs	r3, r2
 800bcd2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	69ba      	ldr	r2, [r7, #24]
 800bcd8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	685b      	ldr	r3, [r3, #4]
 800bcde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800bce0:	2201      	movs	r2, #1
 800bce2:	69fb      	ldr	r3, [r7, #28]
 800bce4:	fa02 f303 	lsl.w	r3, r2, r3
 800bce8:	43db      	mvns	r3, r3
 800bcea:	69ba      	ldr	r2, [r7, #24]
 800bcec:	4013      	ands	r3, r2
 800bcee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800bcf0:	683b      	ldr	r3, [r7, #0]
 800bcf2:	685b      	ldr	r3, [r3, #4]
 800bcf4:	091b      	lsrs	r3, r3, #4
 800bcf6:	f003 0201 	and.w	r2, r3, #1
 800bcfa:	69fb      	ldr	r3, [r7, #28]
 800bcfc:	fa02 f303 	lsl.w	r3, r2, r3
 800bd00:	69ba      	ldr	r2, [r7, #24]
 800bd02:	4313      	orrs	r3, r2
 800bd04:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	69ba      	ldr	r2, [r7, #24]
 800bd0a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	68db      	ldr	r3, [r3, #12]
 800bd10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800bd12:	69fb      	ldr	r3, [r7, #28]
 800bd14:	005b      	lsls	r3, r3, #1
 800bd16:	2203      	movs	r2, #3
 800bd18:	fa02 f303 	lsl.w	r3, r2, r3
 800bd1c:	43db      	mvns	r3, r3
 800bd1e:	69ba      	ldr	r2, [r7, #24]
 800bd20:	4013      	ands	r3, r2
 800bd22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800bd24:	683b      	ldr	r3, [r7, #0]
 800bd26:	689a      	ldr	r2, [r3, #8]
 800bd28:	69fb      	ldr	r3, [r7, #28]
 800bd2a:	005b      	lsls	r3, r3, #1
 800bd2c:	fa02 f303 	lsl.w	r3, r2, r3
 800bd30:	69ba      	ldr	r2, [r7, #24]
 800bd32:	4313      	orrs	r3, r2
 800bd34:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	69ba      	ldr	r2, [r7, #24]
 800bd3a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800bd3c:	683b      	ldr	r3, [r7, #0]
 800bd3e:	685b      	ldr	r3, [r3, #4]
 800bd40:	2b02      	cmp	r3, #2
 800bd42:	d003      	beq.n	800bd4c <HAL_GPIO_Init+0xfc>
 800bd44:	683b      	ldr	r3, [r7, #0]
 800bd46:	685b      	ldr	r3, [r3, #4]
 800bd48:	2b12      	cmp	r3, #18
 800bd4a:	d123      	bne.n	800bd94 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800bd4c:	69fb      	ldr	r3, [r7, #28]
 800bd4e:	08da      	lsrs	r2, r3, #3
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	3208      	adds	r2, #8
 800bd54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd58:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800bd5a:	69fb      	ldr	r3, [r7, #28]
 800bd5c:	f003 0307 	and.w	r3, r3, #7
 800bd60:	009b      	lsls	r3, r3, #2
 800bd62:	220f      	movs	r2, #15
 800bd64:	fa02 f303 	lsl.w	r3, r2, r3
 800bd68:	43db      	mvns	r3, r3
 800bd6a:	69ba      	ldr	r2, [r7, #24]
 800bd6c:	4013      	ands	r3, r2
 800bd6e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800bd70:	683b      	ldr	r3, [r7, #0]
 800bd72:	691a      	ldr	r2, [r3, #16]
 800bd74:	69fb      	ldr	r3, [r7, #28]
 800bd76:	f003 0307 	and.w	r3, r3, #7
 800bd7a:	009b      	lsls	r3, r3, #2
 800bd7c:	fa02 f303 	lsl.w	r3, r2, r3
 800bd80:	69ba      	ldr	r2, [r7, #24]
 800bd82:	4313      	orrs	r3, r2
 800bd84:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800bd86:	69fb      	ldr	r3, [r7, #28]
 800bd88:	08da      	lsrs	r2, r3, #3
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	3208      	adds	r2, #8
 800bd8e:	69b9      	ldr	r1, [r7, #24]
 800bd90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800bd9a:	69fb      	ldr	r3, [r7, #28]
 800bd9c:	005b      	lsls	r3, r3, #1
 800bd9e:	2203      	movs	r2, #3
 800bda0:	fa02 f303 	lsl.w	r3, r2, r3
 800bda4:	43db      	mvns	r3, r3
 800bda6:	69ba      	ldr	r2, [r7, #24]
 800bda8:	4013      	ands	r3, r2
 800bdaa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800bdac:	683b      	ldr	r3, [r7, #0]
 800bdae:	685b      	ldr	r3, [r3, #4]
 800bdb0:	f003 0203 	and.w	r2, r3, #3
 800bdb4:	69fb      	ldr	r3, [r7, #28]
 800bdb6:	005b      	lsls	r3, r3, #1
 800bdb8:	fa02 f303 	lsl.w	r3, r2, r3
 800bdbc:	69ba      	ldr	r2, [r7, #24]
 800bdbe:	4313      	orrs	r3, r2
 800bdc0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	69ba      	ldr	r2, [r7, #24]
 800bdc6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800bdc8:	683b      	ldr	r3, [r7, #0]
 800bdca:	685b      	ldr	r3, [r3, #4]
 800bdcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	f000 80c0 	beq.w	800bf56 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800bdd6:	2300      	movs	r3, #0
 800bdd8:	60fb      	str	r3, [r7, #12]
 800bdda:	4b65      	ldr	r3, [pc, #404]	; (800bf70 <HAL_GPIO_Init+0x320>)
 800bddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bdde:	4a64      	ldr	r2, [pc, #400]	; (800bf70 <HAL_GPIO_Init+0x320>)
 800bde0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800bde4:	6453      	str	r3, [r2, #68]	; 0x44
 800bde6:	4b62      	ldr	r3, [pc, #392]	; (800bf70 <HAL_GPIO_Init+0x320>)
 800bde8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bdea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bdee:	60fb      	str	r3, [r7, #12]
 800bdf0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800bdf2:	4a60      	ldr	r2, [pc, #384]	; (800bf74 <HAL_GPIO_Init+0x324>)
 800bdf4:	69fb      	ldr	r3, [r7, #28]
 800bdf6:	089b      	lsrs	r3, r3, #2
 800bdf8:	3302      	adds	r3, #2
 800bdfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bdfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800be00:	69fb      	ldr	r3, [r7, #28]
 800be02:	f003 0303 	and.w	r3, r3, #3
 800be06:	009b      	lsls	r3, r3, #2
 800be08:	220f      	movs	r2, #15
 800be0a:	fa02 f303 	lsl.w	r3, r2, r3
 800be0e:	43db      	mvns	r3, r3
 800be10:	69ba      	ldr	r2, [r7, #24]
 800be12:	4013      	ands	r3, r2
 800be14:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	4a57      	ldr	r2, [pc, #348]	; (800bf78 <HAL_GPIO_Init+0x328>)
 800be1a:	4293      	cmp	r3, r2
 800be1c:	d037      	beq.n	800be8e <HAL_GPIO_Init+0x23e>
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	4a56      	ldr	r2, [pc, #344]	; (800bf7c <HAL_GPIO_Init+0x32c>)
 800be22:	4293      	cmp	r3, r2
 800be24:	d031      	beq.n	800be8a <HAL_GPIO_Init+0x23a>
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	4a55      	ldr	r2, [pc, #340]	; (800bf80 <HAL_GPIO_Init+0x330>)
 800be2a:	4293      	cmp	r3, r2
 800be2c:	d02b      	beq.n	800be86 <HAL_GPIO_Init+0x236>
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	4a54      	ldr	r2, [pc, #336]	; (800bf84 <HAL_GPIO_Init+0x334>)
 800be32:	4293      	cmp	r3, r2
 800be34:	d025      	beq.n	800be82 <HAL_GPIO_Init+0x232>
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	4a53      	ldr	r2, [pc, #332]	; (800bf88 <HAL_GPIO_Init+0x338>)
 800be3a:	4293      	cmp	r3, r2
 800be3c:	d01f      	beq.n	800be7e <HAL_GPIO_Init+0x22e>
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	4a52      	ldr	r2, [pc, #328]	; (800bf8c <HAL_GPIO_Init+0x33c>)
 800be42:	4293      	cmp	r3, r2
 800be44:	d019      	beq.n	800be7a <HAL_GPIO_Init+0x22a>
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	4a51      	ldr	r2, [pc, #324]	; (800bf90 <HAL_GPIO_Init+0x340>)
 800be4a:	4293      	cmp	r3, r2
 800be4c:	d013      	beq.n	800be76 <HAL_GPIO_Init+0x226>
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	4a50      	ldr	r2, [pc, #320]	; (800bf94 <HAL_GPIO_Init+0x344>)
 800be52:	4293      	cmp	r3, r2
 800be54:	d00d      	beq.n	800be72 <HAL_GPIO_Init+0x222>
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	4a4f      	ldr	r2, [pc, #316]	; (800bf98 <HAL_GPIO_Init+0x348>)
 800be5a:	4293      	cmp	r3, r2
 800be5c:	d007      	beq.n	800be6e <HAL_GPIO_Init+0x21e>
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	4a4e      	ldr	r2, [pc, #312]	; (800bf9c <HAL_GPIO_Init+0x34c>)
 800be62:	4293      	cmp	r3, r2
 800be64:	d101      	bne.n	800be6a <HAL_GPIO_Init+0x21a>
 800be66:	2309      	movs	r3, #9
 800be68:	e012      	b.n	800be90 <HAL_GPIO_Init+0x240>
 800be6a:	230a      	movs	r3, #10
 800be6c:	e010      	b.n	800be90 <HAL_GPIO_Init+0x240>
 800be6e:	2308      	movs	r3, #8
 800be70:	e00e      	b.n	800be90 <HAL_GPIO_Init+0x240>
 800be72:	2307      	movs	r3, #7
 800be74:	e00c      	b.n	800be90 <HAL_GPIO_Init+0x240>
 800be76:	2306      	movs	r3, #6
 800be78:	e00a      	b.n	800be90 <HAL_GPIO_Init+0x240>
 800be7a:	2305      	movs	r3, #5
 800be7c:	e008      	b.n	800be90 <HAL_GPIO_Init+0x240>
 800be7e:	2304      	movs	r3, #4
 800be80:	e006      	b.n	800be90 <HAL_GPIO_Init+0x240>
 800be82:	2303      	movs	r3, #3
 800be84:	e004      	b.n	800be90 <HAL_GPIO_Init+0x240>
 800be86:	2302      	movs	r3, #2
 800be88:	e002      	b.n	800be90 <HAL_GPIO_Init+0x240>
 800be8a:	2301      	movs	r3, #1
 800be8c:	e000      	b.n	800be90 <HAL_GPIO_Init+0x240>
 800be8e:	2300      	movs	r3, #0
 800be90:	69fa      	ldr	r2, [r7, #28]
 800be92:	f002 0203 	and.w	r2, r2, #3
 800be96:	0092      	lsls	r2, r2, #2
 800be98:	4093      	lsls	r3, r2
 800be9a:	69ba      	ldr	r2, [r7, #24]
 800be9c:	4313      	orrs	r3, r2
 800be9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800bea0:	4934      	ldr	r1, [pc, #208]	; (800bf74 <HAL_GPIO_Init+0x324>)
 800bea2:	69fb      	ldr	r3, [r7, #28]
 800bea4:	089b      	lsrs	r3, r3, #2
 800bea6:	3302      	adds	r3, #2
 800bea8:	69ba      	ldr	r2, [r7, #24]
 800beaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800beae:	4b3c      	ldr	r3, [pc, #240]	; (800bfa0 <HAL_GPIO_Init+0x350>)
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800beb4:	693b      	ldr	r3, [r7, #16]
 800beb6:	43db      	mvns	r3, r3
 800beb8:	69ba      	ldr	r2, [r7, #24]
 800beba:	4013      	ands	r3, r2
 800bebc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800bebe:	683b      	ldr	r3, [r7, #0]
 800bec0:	685b      	ldr	r3, [r3, #4]
 800bec2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d003      	beq.n	800bed2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800beca:	69ba      	ldr	r2, [r7, #24]
 800becc:	693b      	ldr	r3, [r7, #16]
 800bece:	4313      	orrs	r3, r2
 800bed0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800bed2:	4a33      	ldr	r2, [pc, #204]	; (800bfa0 <HAL_GPIO_Init+0x350>)
 800bed4:	69bb      	ldr	r3, [r7, #24]
 800bed6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800bed8:	4b31      	ldr	r3, [pc, #196]	; (800bfa0 <HAL_GPIO_Init+0x350>)
 800beda:	685b      	ldr	r3, [r3, #4]
 800bedc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800bede:	693b      	ldr	r3, [r7, #16]
 800bee0:	43db      	mvns	r3, r3
 800bee2:	69ba      	ldr	r2, [r7, #24]
 800bee4:	4013      	ands	r3, r2
 800bee6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800bee8:	683b      	ldr	r3, [r7, #0]
 800beea:	685b      	ldr	r3, [r3, #4]
 800beec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d003      	beq.n	800befc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800bef4:	69ba      	ldr	r2, [r7, #24]
 800bef6:	693b      	ldr	r3, [r7, #16]
 800bef8:	4313      	orrs	r3, r2
 800befa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800befc:	4a28      	ldr	r2, [pc, #160]	; (800bfa0 <HAL_GPIO_Init+0x350>)
 800befe:	69bb      	ldr	r3, [r7, #24]
 800bf00:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800bf02:	4b27      	ldr	r3, [pc, #156]	; (800bfa0 <HAL_GPIO_Init+0x350>)
 800bf04:	689b      	ldr	r3, [r3, #8]
 800bf06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800bf08:	693b      	ldr	r3, [r7, #16]
 800bf0a:	43db      	mvns	r3, r3
 800bf0c:	69ba      	ldr	r2, [r7, #24]
 800bf0e:	4013      	ands	r3, r2
 800bf10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800bf12:	683b      	ldr	r3, [r7, #0]
 800bf14:	685b      	ldr	r3, [r3, #4]
 800bf16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d003      	beq.n	800bf26 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800bf1e:	69ba      	ldr	r2, [r7, #24]
 800bf20:	693b      	ldr	r3, [r7, #16]
 800bf22:	4313      	orrs	r3, r2
 800bf24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800bf26:	4a1e      	ldr	r2, [pc, #120]	; (800bfa0 <HAL_GPIO_Init+0x350>)
 800bf28:	69bb      	ldr	r3, [r7, #24]
 800bf2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800bf2c:	4b1c      	ldr	r3, [pc, #112]	; (800bfa0 <HAL_GPIO_Init+0x350>)
 800bf2e:	68db      	ldr	r3, [r3, #12]
 800bf30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800bf32:	693b      	ldr	r3, [r7, #16]
 800bf34:	43db      	mvns	r3, r3
 800bf36:	69ba      	ldr	r2, [r7, #24]
 800bf38:	4013      	ands	r3, r2
 800bf3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800bf3c:	683b      	ldr	r3, [r7, #0]
 800bf3e:	685b      	ldr	r3, [r3, #4]
 800bf40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d003      	beq.n	800bf50 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800bf48:	69ba      	ldr	r2, [r7, #24]
 800bf4a:	693b      	ldr	r3, [r7, #16]
 800bf4c:	4313      	orrs	r3, r2
 800bf4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800bf50:	4a13      	ldr	r2, [pc, #76]	; (800bfa0 <HAL_GPIO_Init+0x350>)
 800bf52:	69bb      	ldr	r3, [r7, #24]
 800bf54:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800bf56:	69fb      	ldr	r3, [r7, #28]
 800bf58:	3301      	adds	r3, #1
 800bf5a:	61fb      	str	r3, [r7, #28]
 800bf5c:	69fb      	ldr	r3, [r7, #28]
 800bf5e:	2b0f      	cmp	r3, #15
 800bf60:	f67f ae84 	bls.w	800bc6c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800bf64:	bf00      	nop
 800bf66:	3724      	adds	r7, #36	; 0x24
 800bf68:	46bd      	mov	sp, r7
 800bf6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf6e:	4770      	bx	lr
 800bf70:	40023800 	.word	0x40023800
 800bf74:	40013800 	.word	0x40013800
 800bf78:	40020000 	.word	0x40020000
 800bf7c:	40020400 	.word	0x40020400
 800bf80:	40020800 	.word	0x40020800
 800bf84:	40020c00 	.word	0x40020c00
 800bf88:	40021000 	.word	0x40021000
 800bf8c:	40021400 	.word	0x40021400
 800bf90:	40021800 	.word	0x40021800
 800bf94:	40021c00 	.word	0x40021c00
 800bf98:	40022000 	.word	0x40022000
 800bf9c:	40022400 	.word	0x40022400
 800bfa0:	40013c00 	.word	0x40013c00

0800bfa4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800bfa4:	b480      	push	{r7}
 800bfa6:	b083      	sub	sp, #12
 800bfa8:	af00      	add	r7, sp, #0
 800bfaa:	6078      	str	r0, [r7, #4]
 800bfac:	460b      	mov	r3, r1
 800bfae:	807b      	strh	r3, [r7, #2]
 800bfb0:	4613      	mov	r3, r2
 800bfb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800bfb4:	787b      	ldrb	r3, [r7, #1]
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d003      	beq.n	800bfc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800bfba:	887a      	ldrh	r2, [r7, #2]
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800bfc0:	e003      	b.n	800bfca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800bfc2:	887b      	ldrh	r3, [r7, #2]
 800bfc4:	041a      	lsls	r2, r3, #16
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	619a      	str	r2, [r3, #24]
}
 800bfca:	bf00      	nop
 800bfcc:	370c      	adds	r7, #12
 800bfce:	46bd      	mov	sp, r7
 800bfd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd4:	4770      	bx	lr
	...

0800bfd8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800bfd8:	b580      	push	{r7, lr}
 800bfda:	b084      	sub	sp, #16
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d101      	bne.n	800bfea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800bfe6:	2301      	movs	r3, #1
 800bfe8:	e11f      	b.n	800c22a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bff0:	b2db      	uxtb	r3, r3
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d106      	bne.n	800c004 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	2200      	movs	r2, #0
 800bffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800bffe:	6878      	ldr	r0, [r7, #4]
 800c000:	f7f5 f934 	bl	800126c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	2224      	movs	r2, #36	; 0x24
 800c008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	681a      	ldr	r2, [r3, #0]
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	f022 0201 	bic.w	r2, r2, #1
 800c01a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	681a      	ldr	r2, [r3, #0]
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c02a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	681a      	ldr	r2, [r3, #0]
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c03a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800c03c:	f002 fac0 	bl	800e5c0 <HAL_RCC_GetPCLK1Freq>
 800c040:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	685b      	ldr	r3, [r3, #4]
 800c046:	4a7b      	ldr	r2, [pc, #492]	; (800c234 <HAL_I2C_Init+0x25c>)
 800c048:	4293      	cmp	r3, r2
 800c04a:	d807      	bhi.n	800c05c <HAL_I2C_Init+0x84>
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	4a7a      	ldr	r2, [pc, #488]	; (800c238 <HAL_I2C_Init+0x260>)
 800c050:	4293      	cmp	r3, r2
 800c052:	bf94      	ite	ls
 800c054:	2301      	movls	r3, #1
 800c056:	2300      	movhi	r3, #0
 800c058:	b2db      	uxtb	r3, r3
 800c05a:	e006      	b.n	800c06a <HAL_I2C_Init+0x92>
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	4a77      	ldr	r2, [pc, #476]	; (800c23c <HAL_I2C_Init+0x264>)
 800c060:	4293      	cmp	r3, r2
 800c062:	bf94      	ite	ls
 800c064:	2301      	movls	r3, #1
 800c066:	2300      	movhi	r3, #0
 800c068:	b2db      	uxtb	r3, r3
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d001      	beq.n	800c072 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800c06e:	2301      	movs	r3, #1
 800c070:	e0db      	b.n	800c22a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	4a72      	ldr	r2, [pc, #456]	; (800c240 <HAL_I2C_Init+0x268>)
 800c076:	fba2 2303 	umull	r2, r3, r2, r3
 800c07a:	0c9b      	lsrs	r3, r3, #18
 800c07c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	685b      	ldr	r3, [r3, #4]
 800c084:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	68ba      	ldr	r2, [r7, #8]
 800c08e:	430a      	orrs	r2, r1
 800c090:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	6a1b      	ldr	r3, [r3, #32]
 800c098:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	685b      	ldr	r3, [r3, #4]
 800c0a0:	4a64      	ldr	r2, [pc, #400]	; (800c234 <HAL_I2C_Init+0x25c>)
 800c0a2:	4293      	cmp	r3, r2
 800c0a4:	d802      	bhi.n	800c0ac <HAL_I2C_Init+0xd4>
 800c0a6:	68bb      	ldr	r3, [r7, #8]
 800c0a8:	3301      	adds	r3, #1
 800c0aa:	e009      	b.n	800c0c0 <HAL_I2C_Init+0xe8>
 800c0ac:	68bb      	ldr	r3, [r7, #8]
 800c0ae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800c0b2:	fb02 f303 	mul.w	r3, r2, r3
 800c0b6:	4a63      	ldr	r2, [pc, #396]	; (800c244 <HAL_I2C_Init+0x26c>)
 800c0b8:	fba2 2303 	umull	r2, r3, r2, r3
 800c0bc:	099b      	lsrs	r3, r3, #6
 800c0be:	3301      	adds	r3, #1
 800c0c0:	687a      	ldr	r2, [r7, #4]
 800c0c2:	6812      	ldr	r2, [r2, #0]
 800c0c4:	430b      	orrs	r3, r1
 800c0c6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	69db      	ldr	r3, [r3, #28]
 800c0ce:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800c0d2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	685b      	ldr	r3, [r3, #4]
 800c0da:	4956      	ldr	r1, [pc, #344]	; (800c234 <HAL_I2C_Init+0x25c>)
 800c0dc:	428b      	cmp	r3, r1
 800c0de:	d80d      	bhi.n	800c0fc <HAL_I2C_Init+0x124>
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	1e59      	subs	r1, r3, #1
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	685b      	ldr	r3, [r3, #4]
 800c0e8:	005b      	lsls	r3, r3, #1
 800c0ea:	fbb1 f3f3 	udiv	r3, r1, r3
 800c0ee:	3301      	adds	r3, #1
 800c0f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c0f4:	2b04      	cmp	r3, #4
 800c0f6:	bf38      	it	cc
 800c0f8:	2304      	movcc	r3, #4
 800c0fa:	e04f      	b.n	800c19c <HAL_I2C_Init+0x1c4>
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	689b      	ldr	r3, [r3, #8]
 800c100:	2b00      	cmp	r3, #0
 800c102:	d111      	bne.n	800c128 <HAL_I2C_Init+0x150>
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	1e58      	subs	r0, r3, #1
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	6859      	ldr	r1, [r3, #4]
 800c10c:	460b      	mov	r3, r1
 800c10e:	005b      	lsls	r3, r3, #1
 800c110:	440b      	add	r3, r1
 800c112:	fbb0 f3f3 	udiv	r3, r0, r3
 800c116:	3301      	adds	r3, #1
 800c118:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	bf0c      	ite	eq
 800c120:	2301      	moveq	r3, #1
 800c122:	2300      	movne	r3, #0
 800c124:	b2db      	uxtb	r3, r3
 800c126:	e012      	b.n	800c14e <HAL_I2C_Init+0x176>
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	1e58      	subs	r0, r3, #1
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	6859      	ldr	r1, [r3, #4]
 800c130:	460b      	mov	r3, r1
 800c132:	009b      	lsls	r3, r3, #2
 800c134:	440b      	add	r3, r1
 800c136:	0099      	lsls	r1, r3, #2
 800c138:	440b      	add	r3, r1
 800c13a:	fbb0 f3f3 	udiv	r3, r0, r3
 800c13e:	3301      	adds	r3, #1
 800c140:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c144:	2b00      	cmp	r3, #0
 800c146:	bf0c      	ite	eq
 800c148:	2301      	moveq	r3, #1
 800c14a:	2300      	movne	r3, #0
 800c14c:	b2db      	uxtb	r3, r3
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d001      	beq.n	800c156 <HAL_I2C_Init+0x17e>
 800c152:	2301      	movs	r3, #1
 800c154:	e022      	b.n	800c19c <HAL_I2C_Init+0x1c4>
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	689b      	ldr	r3, [r3, #8]
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d10e      	bne.n	800c17c <HAL_I2C_Init+0x1a4>
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	1e58      	subs	r0, r3, #1
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	6859      	ldr	r1, [r3, #4]
 800c166:	460b      	mov	r3, r1
 800c168:	005b      	lsls	r3, r3, #1
 800c16a:	440b      	add	r3, r1
 800c16c:	fbb0 f3f3 	udiv	r3, r0, r3
 800c170:	3301      	adds	r3, #1
 800c172:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c176:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c17a:	e00f      	b.n	800c19c <HAL_I2C_Init+0x1c4>
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	1e58      	subs	r0, r3, #1
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	6859      	ldr	r1, [r3, #4]
 800c184:	460b      	mov	r3, r1
 800c186:	009b      	lsls	r3, r3, #2
 800c188:	440b      	add	r3, r1
 800c18a:	0099      	lsls	r1, r3, #2
 800c18c:	440b      	add	r3, r1
 800c18e:	fbb0 f3f3 	udiv	r3, r0, r3
 800c192:	3301      	adds	r3, #1
 800c194:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c198:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c19c:	6879      	ldr	r1, [r7, #4]
 800c19e:	6809      	ldr	r1, [r1, #0]
 800c1a0:	4313      	orrs	r3, r2
 800c1a2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	69da      	ldr	r2, [r3, #28]
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	6a1b      	ldr	r3, [r3, #32]
 800c1b6:	431a      	orrs	r2, r3
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	430a      	orrs	r2, r1
 800c1be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	689b      	ldr	r3, [r3, #8]
 800c1c6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800c1ca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c1ce:	687a      	ldr	r2, [r7, #4]
 800c1d0:	6911      	ldr	r1, [r2, #16]
 800c1d2:	687a      	ldr	r2, [r7, #4]
 800c1d4:	68d2      	ldr	r2, [r2, #12]
 800c1d6:	4311      	orrs	r1, r2
 800c1d8:	687a      	ldr	r2, [r7, #4]
 800c1da:	6812      	ldr	r2, [r2, #0]
 800c1dc:	430b      	orrs	r3, r1
 800c1de:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	68db      	ldr	r3, [r3, #12]
 800c1e6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	695a      	ldr	r2, [r3, #20]
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	699b      	ldr	r3, [r3, #24]
 800c1f2:	431a      	orrs	r2, r3
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	430a      	orrs	r2, r1
 800c1fa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	681a      	ldr	r2, [r3, #0]
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	f042 0201 	orr.w	r2, r2, #1
 800c20a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	2200      	movs	r2, #0
 800c210:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	2220      	movs	r2, #32
 800c216:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	2200      	movs	r2, #0
 800c21e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	2200      	movs	r2, #0
 800c224:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800c228:	2300      	movs	r3, #0
}
 800c22a:	4618      	mov	r0, r3
 800c22c:	3710      	adds	r7, #16
 800c22e:	46bd      	mov	sp, r7
 800c230:	bd80      	pop	{r7, pc}
 800c232:	bf00      	nop
 800c234:	000186a0 	.word	0x000186a0
 800c238:	001e847f 	.word	0x001e847f
 800c23c:	003d08ff 	.word	0x003d08ff
 800c240:	431bde83 	.word	0x431bde83
 800c244:	10624dd3 	.word	0x10624dd3

0800c248 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800c248:	b580      	push	{r7, lr}
 800c24a:	b088      	sub	sp, #32
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800c250:	2300      	movs	r3, #0
 800c252:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	685b      	ldr	r3, [r3, #4]
 800c25a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c260:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c268:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c270:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800c272:	7bfb      	ldrb	r3, [r7, #15]
 800c274:	2b10      	cmp	r3, #16
 800c276:	d003      	beq.n	800c280 <HAL_I2C_EV_IRQHandler+0x38>
 800c278:	7bfb      	ldrb	r3, [r7, #15]
 800c27a:	2b40      	cmp	r3, #64	; 0x40
 800c27c:	f040 80bd 	bne.w	800c3fa <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	699b      	ldr	r3, [r3, #24]
 800c286:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	695b      	ldr	r3, [r3, #20]
 800c28e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800c290:	69fb      	ldr	r3, [r7, #28]
 800c292:	f003 0301 	and.w	r3, r3, #1
 800c296:	2b00      	cmp	r3, #0
 800c298:	d10d      	bne.n	800c2b6 <HAL_I2C_EV_IRQHandler+0x6e>
 800c29a:	693b      	ldr	r3, [r7, #16]
 800c29c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800c2a0:	d003      	beq.n	800c2aa <HAL_I2C_EV_IRQHandler+0x62>
 800c2a2:	693b      	ldr	r3, [r7, #16]
 800c2a4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800c2a8:	d101      	bne.n	800c2ae <HAL_I2C_EV_IRQHandler+0x66>
 800c2aa:	2301      	movs	r3, #1
 800c2ac:	e000      	b.n	800c2b0 <HAL_I2C_EV_IRQHandler+0x68>
 800c2ae:	2300      	movs	r3, #0
 800c2b0:	2b01      	cmp	r3, #1
 800c2b2:	f000 812e 	beq.w	800c512 <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800c2b6:	69fb      	ldr	r3, [r7, #28]
 800c2b8:	f003 0301 	and.w	r3, r3, #1
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d00c      	beq.n	800c2da <HAL_I2C_EV_IRQHandler+0x92>
 800c2c0:	697b      	ldr	r3, [r7, #20]
 800c2c2:	0a5b      	lsrs	r3, r3, #9
 800c2c4:	f003 0301 	and.w	r3, r3, #1
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d006      	beq.n	800c2da <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800c2cc:	6878      	ldr	r0, [r7, #4]
 800c2ce:	f001 fb3d 	bl	800d94c <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800c2d2:	6878      	ldr	r0, [r7, #4]
 800c2d4:	f000 fcbb 	bl	800cc4e <I2C_Master_SB>
 800c2d8:	e08e      	b.n	800c3f8 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800c2da:	69fb      	ldr	r3, [r7, #28]
 800c2dc:	08db      	lsrs	r3, r3, #3
 800c2de:	f003 0301 	and.w	r3, r3, #1
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d009      	beq.n	800c2fa <HAL_I2C_EV_IRQHandler+0xb2>
 800c2e6:	697b      	ldr	r3, [r7, #20]
 800c2e8:	0a5b      	lsrs	r3, r3, #9
 800c2ea:	f003 0301 	and.w	r3, r3, #1
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d003      	beq.n	800c2fa <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800c2f2:	6878      	ldr	r0, [r7, #4]
 800c2f4:	f000 fd31 	bl	800cd5a <I2C_Master_ADD10>
 800c2f8:	e07e      	b.n	800c3f8 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800c2fa:	69fb      	ldr	r3, [r7, #28]
 800c2fc:	085b      	lsrs	r3, r3, #1
 800c2fe:	f003 0301 	and.w	r3, r3, #1
 800c302:	2b00      	cmp	r3, #0
 800c304:	d009      	beq.n	800c31a <HAL_I2C_EV_IRQHandler+0xd2>
 800c306:	697b      	ldr	r3, [r7, #20]
 800c308:	0a5b      	lsrs	r3, r3, #9
 800c30a:	f003 0301 	and.w	r3, r3, #1
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d003      	beq.n	800c31a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800c312:	6878      	ldr	r0, [r7, #4]
 800c314:	f000 fd4b 	bl	800cdae <I2C_Master_ADDR>
 800c318:	e06e      	b.n	800c3f8 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800c31a:	69bb      	ldr	r3, [r7, #24]
 800c31c:	089b      	lsrs	r3, r3, #2
 800c31e:	f003 0301 	and.w	r3, r3, #1
 800c322:	2b00      	cmp	r3, #0
 800c324:	d037      	beq.n	800c396 <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	685b      	ldr	r3, [r3, #4]
 800c32c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c330:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c334:	f000 80ef 	beq.w	800c516 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800c338:	69fb      	ldr	r3, [r7, #28]
 800c33a:	09db      	lsrs	r3, r3, #7
 800c33c:	f003 0301 	and.w	r3, r3, #1
 800c340:	2b00      	cmp	r3, #0
 800c342:	d00f      	beq.n	800c364 <HAL_I2C_EV_IRQHandler+0x11c>
 800c344:	697b      	ldr	r3, [r7, #20]
 800c346:	0a9b      	lsrs	r3, r3, #10
 800c348:	f003 0301 	and.w	r3, r3, #1
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d009      	beq.n	800c364 <HAL_I2C_EV_IRQHandler+0x11c>
 800c350:	69fb      	ldr	r3, [r7, #28]
 800c352:	089b      	lsrs	r3, r3, #2
 800c354:	f003 0301 	and.w	r3, r3, #1
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d103      	bne.n	800c364 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800c35c:	6878      	ldr	r0, [r7, #4]
 800c35e:	f000 f948 	bl	800c5f2 <I2C_MasterTransmit_TXE>
 800c362:	e049      	b.n	800c3f8 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800c364:	69fb      	ldr	r3, [r7, #28]
 800c366:	089b      	lsrs	r3, r3, #2
 800c368:	f003 0301 	and.w	r3, r3, #1
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	f000 80d2 	beq.w	800c516 <HAL_I2C_EV_IRQHandler+0x2ce>
 800c372:	697b      	ldr	r3, [r7, #20]
 800c374:	0a5b      	lsrs	r3, r3, #9
 800c376:	f003 0301 	and.w	r3, r3, #1
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	f000 80cb 	beq.w	800c516 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 800c380:	7bfb      	ldrb	r3, [r7, #15]
 800c382:	2b10      	cmp	r3, #16
 800c384:	d103      	bne.n	800c38e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800c386:	6878      	ldr	r0, [r7, #4]
 800c388:	f000 f9cf 	bl	800c72a <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800c38c:	e0c3      	b.n	800c516 <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 800c38e:	6878      	ldr	r0, [r7, #4]
 800c390:	f000 fa33 	bl	800c7fa <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800c394:	e0bf      	b.n	800c516 <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	685b      	ldr	r3, [r3, #4]
 800c39c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c3a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c3a4:	f000 80b7 	beq.w	800c516 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800c3a8:	69fb      	ldr	r3, [r7, #28]
 800c3aa:	099b      	lsrs	r3, r3, #6
 800c3ac:	f003 0301 	and.w	r3, r3, #1
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d00f      	beq.n	800c3d4 <HAL_I2C_EV_IRQHandler+0x18c>
 800c3b4:	697b      	ldr	r3, [r7, #20]
 800c3b6:	0a9b      	lsrs	r3, r3, #10
 800c3b8:	f003 0301 	and.w	r3, r3, #1
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d009      	beq.n	800c3d4 <HAL_I2C_EV_IRQHandler+0x18c>
 800c3c0:	69fb      	ldr	r3, [r7, #28]
 800c3c2:	089b      	lsrs	r3, r3, #2
 800c3c4:	f003 0301 	and.w	r3, r3, #1
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d103      	bne.n	800c3d4 <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800c3cc:	6878      	ldr	r0, [r7, #4]
 800c3ce:	f000 faa3 	bl	800c918 <I2C_MasterReceive_RXNE>
 800c3d2:	e011      	b.n	800c3f8 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800c3d4:	69fb      	ldr	r3, [r7, #28]
 800c3d6:	089b      	lsrs	r3, r3, #2
 800c3d8:	f003 0301 	and.w	r3, r3, #1
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	f000 809a 	beq.w	800c516 <HAL_I2C_EV_IRQHandler+0x2ce>
 800c3e2:	697b      	ldr	r3, [r7, #20]
 800c3e4:	0a5b      	lsrs	r3, r3, #9
 800c3e6:	f003 0301 	and.w	r3, r3, #1
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	f000 8093 	beq.w	800c516 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 800c3f0:	6878      	ldr	r0, [r7, #4]
 800c3f2:	f000 fb42 	bl	800ca7a <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800c3f6:	e08e      	b.n	800c516 <HAL_I2C_EV_IRQHandler+0x2ce>
 800c3f8:	e08d      	b.n	800c516 <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d004      	beq.n	800c40c <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	695b      	ldr	r3, [r3, #20]
 800c408:	61fb      	str	r3, [r7, #28]
 800c40a:	e007      	b.n	800c41c <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	699b      	ldr	r3, [r3, #24]
 800c412:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	695b      	ldr	r3, [r3, #20]
 800c41a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800c41c:	69fb      	ldr	r3, [r7, #28]
 800c41e:	085b      	lsrs	r3, r3, #1
 800c420:	f003 0301 	and.w	r3, r3, #1
 800c424:	2b00      	cmp	r3, #0
 800c426:	d012      	beq.n	800c44e <HAL_I2C_EV_IRQHandler+0x206>
 800c428:	697b      	ldr	r3, [r7, #20]
 800c42a:	0a5b      	lsrs	r3, r3, #9
 800c42c:	f003 0301 	and.w	r3, r3, #1
 800c430:	2b00      	cmp	r3, #0
 800c432:	d00c      	beq.n	800c44e <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d003      	beq.n	800c444 <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	699b      	ldr	r3, [r3, #24]
 800c442:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800c444:	69b9      	ldr	r1, [r7, #24]
 800c446:	6878      	ldr	r0, [r7, #4]
 800c448:	f000 ff00 	bl	800d24c <I2C_Slave_ADDR>
 800c44c:	e066      	b.n	800c51c <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800c44e:	69fb      	ldr	r3, [r7, #28]
 800c450:	091b      	lsrs	r3, r3, #4
 800c452:	f003 0301 	and.w	r3, r3, #1
 800c456:	2b00      	cmp	r3, #0
 800c458:	d009      	beq.n	800c46e <HAL_I2C_EV_IRQHandler+0x226>
 800c45a:	697b      	ldr	r3, [r7, #20]
 800c45c:	0a5b      	lsrs	r3, r3, #9
 800c45e:	f003 0301 	and.w	r3, r3, #1
 800c462:	2b00      	cmp	r3, #0
 800c464:	d003      	beq.n	800c46e <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 800c466:	6878      	ldr	r0, [r7, #4]
 800c468:	f000 ff34 	bl	800d2d4 <I2C_Slave_STOPF>
 800c46c:	e056      	b.n	800c51c <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800c46e:	7bbb      	ldrb	r3, [r7, #14]
 800c470:	2b21      	cmp	r3, #33	; 0x21
 800c472:	d002      	beq.n	800c47a <HAL_I2C_EV_IRQHandler+0x232>
 800c474:	7bbb      	ldrb	r3, [r7, #14]
 800c476:	2b29      	cmp	r3, #41	; 0x29
 800c478:	d125      	bne.n	800c4c6 <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800c47a:	69fb      	ldr	r3, [r7, #28]
 800c47c:	09db      	lsrs	r3, r3, #7
 800c47e:	f003 0301 	and.w	r3, r3, #1
 800c482:	2b00      	cmp	r3, #0
 800c484:	d00f      	beq.n	800c4a6 <HAL_I2C_EV_IRQHandler+0x25e>
 800c486:	697b      	ldr	r3, [r7, #20]
 800c488:	0a9b      	lsrs	r3, r3, #10
 800c48a:	f003 0301 	and.w	r3, r3, #1
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d009      	beq.n	800c4a6 <HAL_I2C_EV_IRQHandler+0x25e>
 800c492:	69fb      	ldr	r3, [r7, #28]
 800c494:	089b      	lsrs	r3, r3, #2
 800c496:	f003 0301 	and.w	r3, r3, #1
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d103      	bne.n	800c4a6 <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800c49e:	6878      	ldr	r0, [r7, #4]
 800c4a0:	f000 fe16 	bl	800d0d0 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800c4a4:	e039      	b.n	800c51a <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800c4a6:	69fb      	ldr	r3, [r7, #28]
 800c4a8:	089b      	lsrs	r3, r3, #2
 800c4aa:	f003 0301 	and.w	r3, r3, #1
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d033      	beq.n	800c51a <HAL_I2C_EV_IRQHandler+0x2d2>
 800c4b2:	697b      	ldr	r3, [r7, #20]
 800c4b4:	0a5b      	lsrs	r3, r3, #9
 800c4b6:	f003 0301 	and.w	r3, r3, #1
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d02d      	beq.n	800c51a <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800c4be:	6878      	ldr	r0, [r7, #4]
 800c4c0:	f000 fe43 	bl	800d14a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800c4c4:	e029      	b.n	800c51a <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800c4c6:	69fb      	ldr	r3, [r7, #28]
 800c4c8:	099b      	lsrs	r3, r3, #6
 800c4ca:	f003 0301 	and.w	r3, r3, #1
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d00f      	beq.n	800c4f2 <HAL_I2C_EV_IRQHandler+0x2aa>
 800c4d2:	697b      	ldr	r3, [r7, #20]
 800c4d4:	0a9b      	lsrs	r3, r3, #10
 800c4d6:	f003 0301 	and.w	r3, r3, #1
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d009      	beq.n	800c4f2 <HAL_I2C_EV_IRQHandler+0x2aa>
 800c4de:	69fb      	ldr	r3, [r7, #28]
 800c4e0:	089b      	lsrs	r3, r3, #2
 800c4e2:	f003 0301 	and.w	r3, r3, #1
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d103      	bne.n	800c4f2 <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800c4ea:	6878      	ldr	r0, [r7, #4]
 800c4ec:	f000 fe4e 	bl	800d18c <I2C_SlaveReceive_RXNE>
 800c4f0:	e014      	b.n	800c51c <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800c4f2:	69fb      	ldr	r3, [r7, #28]
 800c4f4:	089b      	lsrs	r3, r3, #2
 800c4f6:	f003 0301 	and.w	r3, r3, #1
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d00e      	beq.n	800c51c <HAL_I2C_EV_IRQHandler+0x2d4>
 800c4fe:	697b      	ldr	r3, [r7, #20]
 800c500:	0a5b      	lsrs	r3, r3, #9
 800c502:	f003 0301 	and.w	r3, r3, #1
 800c506:	2b00      	cmp	r3, #0
 800c508:	d008      	beq.n	800c51c <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800c50a:	6878      	ldr	r0, [r7, #4]
 800c50c:	f000 fe7c 	bl	800d208 <I2C_SlaveReceive_BTF>
 800c510:	e004      	b.n	800c51c <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 800c512:	bf00      	nop
 800c514:	e002      	b.n	800c51c <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800c516:	bf00      	nop
 800c518:	e000      	b.n	800c51c <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800c51a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800c51c:	3720      	adds	r7, #32
 800c51e:	46bd      	mov	sp, r7
 800c520:	bd80      	pop	{r7, pc}

0800c522 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c522:	b480      	push	{r7}
 800c524:	b083      	sub	sp, #12
 800c526:	af00      	add	r7, sp, #0
 800c528:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800c52a:	bf00      	nop
 800c52c:	370c      	adds	r7, #12
 800c52e:	46bd      	mov	sp, r7
 800c530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c534:	4770      	bx	lr

0800c536 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c536:	b480      	push	{r7}
 800c538:	b083      	sub	sp, #12
 800c53a:	af00      	add	r7, sp, #0
 800c53c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800c53e:	bf00      	nop
 800c540:	370c      	adds	r7, #12
 800c542:	46bd      	mov	sp, r7
 800c544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c548:	4770      	bx	lr

0800c54a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c54a:	b480      	push	{r7}
 800c54c:	b083      	sub	sp, #12
 800c54e:	af00      	add	r7, sp, #0
 800c550:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800c552:	bf00      	nop
 800c554:	370c      	adds	r7, #12
 800c556:	46bd      	mov	sp, r7
 800c558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c55c:	4770      	bx	lr

0800c55e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c55e:	b480      	push	{r7}
 800c560:	b083      	sub	sp, #12
 800c562:	af00      	add	r7, sp, #0
 800c564:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800c566:	bf00      	nop
 800c568:	370c      	adds	r7, #12
 800c56a:	46bd      	mov	sp, r7
 800c56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c570:	4770      	bx	lr

0800c572 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800c572:	b480      	push	{r7}
 800c574:	b083      	sub	sp, #12
 800c576:	af00      	add	r7, sp, #0
 800c578:	6078      	str	r0, [r7, #4]
 800c57a:	460b      	mov	r3, r1
 800c57c:	70fb      	strb	r3, [r7, #3]
 800c57e:	4613      	mov	r3, r2
 800c580:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800c582:	bf00      	nop
 800c584:	370c      	adds	r7, #12
 800c586:	46bd      	mov	sp, r7
 800c588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c58c:	4770      	bx	lr

0800c58e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c58e:	b480      	push	{r7}
 800c590:	b083      	sub	sp, #12
 800c592:	af00      	add	r7, sp, #0
 800c594:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800c596:	bf00      	nop
 800c598:	370c      	adds	r7, #12
 800c59a:	46bd      	mov	sp, r7
 800c59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a0:	4770      	bx	lr

0800c5a2 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c5a2:	b480      	push	{r7}
 800c5a4:	b083      	sub	sp, #12
 800c5a6:	af00      	add	r7, sp, #0
 800c5a8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800c5aa:	bf00      	nop
 800c5ac:	370c      	adds	r7, #12
 800c5ae:	46bd      	mov	sp, r7
 800c5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b4:	4770      	bx	lr

0800c5b6 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c5b6:	b480      	push	{r7}
 800c5b8:	b083      	sub	sp, #12
 800c5ba:	af00      	add	r7, sp, #0
 800c5bc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800c5be:	bf00      	nop
 800c5c0:	370c      	adds	r7, #12
 800c5c2:	46bd      	mov	sp, r7
 800c5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c8:	4770      	bx	lr

0800c5ca <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800c5ca:	b480      	push	{r7}
 800c5cc:	b083      	sub	sp, #12
 800c5ce:	af00      	add	r7, sp, #0
 800c5d0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800c5d2:	bf00      	nop
 800c5d4:	370c      	adds	r7, #12
 800c5d6:	46bd      	mov	sp, r7
 800c5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5dc:	4770      	bx	lr

0800c5de <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c5de:	b480      	push	{r7}
 800c5e0:	b083      	sub	sp, #12
 800c5e2:	af00      	add	r7, sp, #0
 800c5e4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800c5e6:	bf00      	nop
 800c5e8:	370c      	adds	r7, #12
 800c5ea:	46bd      	mov	sp, r7
 800c5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f0:	4770      	bx	lr

0800c5f2 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800c5f2:	b580      	push	{r7, lr}
 800c5f4:	b084      	sub	sp, #16
 800c5f6:	af00      	add	r7, sp, #0
 800c5f8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c600:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c608:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c60e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c614:	2b00      	cmp	r3, #0
 800c616:	d150      	bne.n	800c6ba <I2C_MasterTransmit_TXE+0xc8>
 800c618:	7bfb      	ldrb	r3, [r7, #15]
 800c61a:	2b21      	cmp	r3, #33	; 0x21
 800c61c:	d14d      	bne.n	800c6ba <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800c61e:	68bb      	ldr	r3, [r7, #8]
 800c620:	2b08      	cmp	r3, #8
 800c622:	d01d      	beq.n	800c660 <I2C_MasterTransmit_TXE+0x6e>
 800c624:	68bb      	ldr	r3, [r7, #8]
 800c626:	2b20      	cmp	r3, #32
 800c628:	d01a      	beq.n	800c660 <I2C_MasterTransmit_TXE+0x6e>
 800c62a:	68bb      	ldr	r3, [r7, #8]
 800c62c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c630:	d016      	beq.n	800c660 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	685a      	ldr	r2, [r3, #4]
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800c640:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	2211      	movs	r2, #17
 800c646:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	2200      	movs	r2, #0
 800c64c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	2220      	movs	r2, #32
 800c654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800c658:	6878      	ldr	r0, [r7, #4]
 800c65a:	f7ff ff62 	bl	800c522 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800c65e:	e060      	b.n	800c722 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	685a      	ldr	r2, [r3, #4]
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800c66e:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	681a      	ldr	r2, [r3, #0]
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c67e:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	2200      	movs	r2, #0
 800c684:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	2220      	movs	r2, #32
 800c68a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c694:	b2db      	uxtb	r3, r3
 800c696:	2b40      	cmp	r3, #64	; 0x40
 800c698:	d107      	bne.n	800c6aa <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	2200      	movs	r2, #0
 800c69e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800c6a2:	6878      	ldr	r0, [r7, #4]
 800c6a4:	f7ff ff7d 	bl	800c5a2 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800c6a8:	e03b      	b.n	800c722 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	2200      	movs	r2, #0
 800c6ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800c6b2:	6878      	ldr	r0, [r7, #4]
 800c6b4:	f7ff ff35 	bl	800c522 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800c6b8:	e033      	b.n	800c722 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800c6ba:	7bfb      	ldrb	r3, [r7, #15]
 800c6bc:	2b21      	cmp	r3, #33	; 0x21
 800c6be:	d005      	beq.n	800c6cc <I2C_MasterTransmit_TXE+0xda>
 800c6c0:	7bbb      	ldrb	r3, [r7, #14]
 800c6c2:	2b40      	cmp	r3, #64	; 0x40
 800c6c4:	d12d      	bne.n	800c722 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800c6c6:	7bfb      	ldrb	r3, [r7, #15]
 800c6c8:	2b22      	cmp	r3, #34	; 0x22
 800c6ca:	d12a      	bne.n	800c722 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c6d0:	b29b      	uxth	r3, r3
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d108      	bne.n	800c6e8 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	685a      	ldr	r2, [r3, #4]
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c6e4:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800c6e6:	e01c      	b.n	800c722 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c6ee:	b2db      	uxtb	r3, r3
 800c6f0:	2b40      	cmp	r3, #64	; 0x40
 800c6f2:	d103      	bne.n	800c6fc <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800c6f4:	6878      	ldr	r0, [r7, #4]
 800c6f6:	f000 f880 	bl	800c7fa <I2C_MemoryTransmit_TXE_BTF>
}
 800c6fa:	e012      	b.n	800c722 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c700:	781a      	ldrb	r2, [r3, #0]
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c70c:	1c5a      	adds	r2, r3, #1
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c716:	b29b      	uxth	r3, r3
 800c718:	3b01      	subs	r3, #1
 800c71a:	b29a      	uxth	r2, r3
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800c720:	e7ff      	b.n	800c722 <I2C_MasterTransmit_TXE+0x130>
 800c722:	bf00      	nop
 800c724:	3710      	adds	r7, #16
 800c726:	46bd      	mov	sp, r7
 800c728:	bd80      	pop	{r7, pc}

0800c72a <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800c72a:	b580      	push	{r7, lr}
 800c72c:	b084      	sub	sp, #16
 800c72e:	af00      	add	r7, sp, #0
 800c730:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c736:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c73e:	b2db      	uxtb	r3, r3
 800c740:	2b21      	cmp	r3, #33	; 0x21
 800c742:	d156      	bne.n	800c7f2 <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c748:	b29b      	uxth	r3, r3
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d012      	beq.n	800c774 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c752:	781a      	ldrb	r2, [r3, #0]
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c75e:	1c5a      	adds	r2, r3, #1
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c768:	b29b      	uxth	r3, r3
 800c76a:	3b01      	subs	r3, #1
 800c76c:	b29a      	uxth	r2, r3
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800c772:	e03e      	b.n	800c7f2 <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	2b08      	cmp	r3, #8
 800c778:	d01d      	beq.n	800c7b6 <I2C_MasterTransmit_BTF+0x8c>
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	2b20      	cmp	r3, #32
 800c77e:	d01a      	beq.n	800c7b6 <I2C_MasterTransmit_BTF+0x8c>
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c786:	d016      	beq.n	800c7b6 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	685a      	ldr	r2, [r3, #4]
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800c796:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	2211      	movs	r2, #17
 800c79c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	2200      	movs	r2, #0
 800c7a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	2220      	movs	r2, #32
 800c7aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800c7ae:	6878      	ldr	r0, [r7, #4]
 800c7b0:	f7ff feb7 	bl	800c522 <HAL_I2C_MasterTxCpltCallback>
}
 800c7b4:	e01d      	b.n	800c7f2 <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	685a      	ldr	r2, [r3, #4]
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800c7c4:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	681a      	ldr	r2, [r3, #0]
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c7d4:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	2200      	movs	r2, #0
 800c7da:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	2220      	movs	r2, #32
 800c7e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	2200      	movs	r2, #0
 800c7e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800c7ec:	6878      	ldr	r0, [r7, #4]
 800c7ee:	f7ff fe98 	bl	800c522 <HAL_I2C_MasterTxCpltCallback>
}
 800c7f2:	bf00      	nop
 800c7f4:	3710      	adds	r7, #16
 800c7f6:	46bd      	mov	sp, r7
 800c7f8:	bd80      	pop	{r7, pc}

0800c7fa <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800c7fa:	b580      	push	{r7, lr}
 800c7fc:	b084      	sub	sp, #16
 800c7fe:	af00      	add	r7, sp, #0
 800c800:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c808:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d11d      	bne.n	800c84e <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c816:	2b01      	cmp	r3, #1
 800c818:	d10b      	bne.n	800c832 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c81e:	b2da      	uxtb	r2, r3
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c82a:	1c9a      	adds	r2, r3, #2
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800c830:	e06e      	b.n	800c910 <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c836:	b29b      	uxth	r3, r3
 800c838:	121b      	asrs	r3, r3, #8
 800c83a:	b2da      	uxtb	r2, r3
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c846:	1c5a      	adds	r2, r3, #1
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800c84c:	e060      	b.n	800c910 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c852:	2b01      	cmp	r3, #1
 800c854:	d10b      	bne.n	800c86e <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c85a:	b2da      	uxtb	r2, r3
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c866:	1c5a      	adds	r2, r3, #1
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800c86c:	e050      	b.n	800c910 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c872:	2b02      	cmp	r3, #2
 800c874:	d14c      	bne.n	800c910 <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800c876:	7bfb      	ldrb	r3, [r7, #15]
 800c878:	2b22      	cmp	r3, #34	; 0x22
 800c87a:	d108      	bne.n	800c88e <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	681a      	ldr	r2, [r3, #0]
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c88a:	601a      	str	r2, [r3, #0]
}
 800c88c:	e040      	b.n	800c910 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c892:	b29b      	uxth	r3, r3
 800c894:	2b00      	cmp	r3, #0
 800c896:	d015      	beq.n	800c8c4 <I2C_MemoryTransmit_TXE_BTF+0xca>
 800c898:	7bfb      	ldrb	r3, [r7, #15]
 800c89a:	2b21      	cmp	r3, #33	; 0x21
 800c89c:	d112      	bne.n	800c8c4 <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8a2:	781a      	ldrb	r2, [r3, #0]
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8ae:	1c5a      	adds	r2, r3, #1
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c8b8:	b29b      	uxth	r3, r3
 800c8ba:	3b01      	subs	r3, #1
 800c8bc:	b29a      	uxth	r2, r3
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800c8c2:	e025      	b.n	800c910 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c8c8:	b29b      	uxth	r3, r3
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d120      	bne.n	800c910 <I2C_MemoryTransmit_TXE_BTF+0x116>
 800c8ce:	7bfb      	ldrb	r3, [r7, #15]
 800c8d0:	2b21      	cmp	r3, #33	; 0x21
 800c8d2:	d11d      	bne.n	800c910 <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	685a      	ldr	r2, [r3, #4]
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800c8e2:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	681a      	ldr	r2, [r3, #0]
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c8f2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	2200      	movs	r2, #0
 800c8f8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	2220      	movs	r2, #32
 800c8fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	2200      	movs	r2, #0
 800c906:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800c90a:	6878      	ldr	r0, [r7, #4]
 800c90c:	f7ff fe49 	bl	800c5a2 <HAL_I2C_MemTxCpltCallback>
}
 800c910:	bf00      	nop
 800c912:	3710      	adds	r7, #16
 800c914:	46bd      	mov	sp, r7
 800c916:	bd80      	pop	{r7, pc}

0800c918 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800c918:	b580      	push	{r7, lr}
 800c91a:	b084      	sub	sp, #16
 800c91c:	af00      	add	r7, sp, #0
 800c91e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c926:	b2db      	uxtb	r3, r3
 800c928:	2b22      	cmp	r3, #34	; 0x22
 800c92a:	f040 80a2 	bne.w	800ca72 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c932:	b29b      	uxth	r3, r3
 800c934:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	2b03      	cmp	r3, #3
 800c93a:	d921      	bls.n	800c980 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	691a      	ldr	r2, [r3, #16]
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c946:	b2d2      	uxtb	r2, r2
 800c948:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c94e:	1c5a      	adds	r2, r3, #1
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c958:	b29b      	uxth	r3, r3
 800c95a:	3b01      	subs	r3, #1
 800c95c:	b29a      	uxth	r2, r3
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c966:	b29b      	uxth	r3, r3
 800c968:	2b03      	cmp	r3, #3
 800c96a:	f040 8082 	bne.w	800ca72 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	685a      	ldr	r2, [r3, #4]
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c97c:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 800c97e:	e078      	b.n	800ca72 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c984:	2b02      	cmp	r3, #2
 800c986:	d074      	beq.n	800ca72 <I2C_MasterReceive_RXNE+0x15a>
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	2b01      	cmp	r3, #1
 800c98c:	d002      	beq.n	800c994 <I2C_MasterReceive_RXNE+0x7c>
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	2b00      	cmp	r3, #0
 800c992:	d16e      	bne.n	800ca72 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800c994:	6878      	ldr	r0, [r7, #4]
 800c996:	f000 ffa7 	bl	800d8e8 <I2C_WaitOnSTOPRequestThroughIT>
 800c99a:	4603      	mov	r3, r0
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d142      	bne.n	800ca26 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	681a      	ldr	r2, [r3, #0]
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c9ae:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	685a      	ldr	r2, [r3, #4]
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800c9be:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	691a      	ldr	r2, [r3, #16]
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9ca:	b2d2      	uxtb	r2, r2
 800c9cc:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9d2:	1c5a      	adds	r2, r3, #1
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c9dc:	b29b      	uxth	r3, r3
 800c9de:	3b01      	subs	r3, #1
 800c9e0:	b29a      	uxth	r2, r3
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	2220      	movs	r2, #32
 800c9ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c9f4:	b2db      	uxtb	r3, r3
 800c9f6:	2b40      	cmp	r3, #64	; 0x40
 800c9f8:	d10a      	bne.n	800ca10 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	2200      	movs	r2, #0
 800c9fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	2200      	movs	r2, #0
 800ca06:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800ca08:	6878      	ldr	r0, [r7, #4]
 800ca0a:	f7ff fdd4 	bl	800c5b6 <HAL_I2C_MemRxCpltCallback>
}
 800ca0e:	e030      	b.n	800ca72 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	2200      	movs	r2, #0
 800ca14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	2212      	movs	r2, #18
 800ca1c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800ca1e:	6878      	ldr	r0, [r7, #4]
 800ca20:	f7ff fd89 	bl	800c536 <HAL_I2C_MasterRxCpltCallback>
}
 800ca24:	e025      	b.n	800ca72 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	685a      	ldr	r2, [r3, #4]
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800ca34:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	691a      	ldr	r2, [r3, #16]
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca40:	b2d2      	uxtb	r2, r2
 800ca42:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca48:	1c5a      	adds	r2, r3, #1
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ca52:	b29b      	uxth	r3, r3
 800ca54:	3b01      	subs	r3, #1
 800ca56:	b29a      	uxth	r2, r3
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	2220      	movs	r2, #32
 800ca60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	2200      	movs	r2, #0
 800ca68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800ca6c:	6878      	ldr	r0, [r7, #4]
 800ca6e:	f7ff fdac 	bl	800c5ca <HAL_I2C_ErrorCallback>
}
 800ca72:	bf00      	nop
 800ca74:	3710      	adds	r7, #16
 800ca76:	46bd      	mov	sp, r7
 800ca78:	bd80      	pop	{r7, pc}

0800ca7a <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800ca7a:	b580      	push	{r7, lr}
 800ca7c:	b084      	sub	sp, #16
 800ca7e:	af00      	add	r7, sp, #0
 800ca80:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca86:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ca8c:	b29b      	uxth	r3, r3
 800ca8e:	2b04      	cmp	r3, #4
 800ca90:	d11b      	bne.n	800caca <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	685a      	ldr	r2, [r3, #4]
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800caa0:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	691a      	ldr	r2, [r3, #16]
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800caac:	b2d2      	uxtb	r2, r2
 800caae:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cab4:	1c5a      	adds	r2, r3, #1
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cabe:	b29b      	uxth	r3, r3
 800cac0:	3b01      	subs	r3, #1
 800cac2:	b29a      	uxth	r2, r3
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800cac8:	e0bd      	b.n	800cc46 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cace:	b29b      	uxth	r3, r3
 800cad0:	2b03      	cmp	r3, #3
 800cad2:	d129      	bne.n	800cb28 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	685a      	ldr	r2, [r3, #4]
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cae2:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	2b04      	cmp	r3, #4
 800cae8:	d00a      	beq.n	800cb00 <I2C_MasterReceive_BTF+0x86>
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	2b02      	cmp	r3, #2
 800caee:	d007      	beq.n	800cb00 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	681a      	ldr	r2, [r3, #0]
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cafe:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	691a      	ldr	r2, [r3, #16]
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb0a:	b2d2      	uxtb	r2, r2
 800cb0c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb12:	1c5a      	adds	r2, r3, #1
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cb1c:	b29b      	uxth	r3, r3
 800cb1e:	3b01      	subs	r3, #1
 800cb20:	b29a      	uxth	r2, r3
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800cb26:	e08e      	b.n	800cc46 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cb2c:	b29b      	uxth	r3, r3
 800cb2e:	2b02      	cmp	r3, #2
 800cb30:	d176      	bne.n	800cc20 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	2b01      	cmp	r3, #1
 800cb36:	d002      	beq.n	800cb3e <I2C_MasterReceive_BTF+0xc4>
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	2b10      	cmp	r3, #16
 800cb3c:	d108      	bne.n	800cb50 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	681a      	ldr	r2, [r3, #0]
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cb4c:	601a      	str	r2, [r3, #0]
 800cb4e:	e019      	b.n	800cb84 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	2b04      	cmp	r3, #4
 800cb54:	d002      	beq.n	800cb5c <I2C_MasterReceive_BTF+0xe2>
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	2b02      	cmp	r3, #2
 800cb5a:	d108      	bne.n	800cb6e <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	681a      	ldr	r2, [r3, #0]
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800cb6a:	601a      	str	r2, [r3, #0]
 800cb6c:	e00a      	b.n	800cb84 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	2b10      	cmp	r3, #16
 800cb72:	d007      	beq.n	800cb84 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	681a      	ldr	r2, [r3, #0]
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cb82:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	691a      	ldr	r2, [r3, #16]
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb8e:	b2d2      	uxtb	r2, r2
 800cb90:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb96:	1c5a      	adds	r2, r3, #1
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cba0:	b29b      	uxth	r3, r3
 800cba2:	3b01      	subs	r3, #1
 800cba4:	b29a      	uxth	r2, r3
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	691a      	ldr	r2, [r3, #16]
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbb4:	b2d2      	uxtb	r2, r2
 800cbb6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbbc:	1c5a      	adds	r2, r3, #1
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cbc6:	b29b      	uxth	r3, r3
 800cbc8:	3b01      	subs	r3, #1
 800cbca:	b29a      	uxth	r2, r3
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	685a      	ldr	r2, [r3, #4]
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800cbde:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	2220      	movs	r2, #32
 800cbe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800cbee:	b2db      	uxtb	r3, r3
 800cbf0:	2b40      	cmp	r3, #64	; 0x40
 800cbf2:	d10a      	bne.n	800cc0a <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	2200      	movs	r2, #0
 800cbf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	2200      	movs	r2, #0
 800cc00:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800cc02:	6878      	ldr	r0, [r7, #4]
 800cc04:	f7ff fcd7 	bl	800c5b6 <HAL_I2C_MemRxCpltCallback>
}
 800cc08:	e01d      	b.n	800cc46 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	2200      	movs	r2, #0
 800cc0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	2212      	movs	r2, #18
 800cc16:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800cc18:	6878      	ldr	r0, [r7, #4]
 800cc1a:	f7ff fc8c 	bl	800c536 <HAL_I2C_MasterRxCpltCallback>
}
 800cc1e:	e012      	b.n	800cc46 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	691a      	ldr	r2, [r3, #16]
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc2a:	b2d2      	uxtb	r2, r2
 800cc2c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc32:	1c5a      	adds	r2, r3, #1
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cc3c:	b29b      	uxth	r3, r3
 800cc3e:	3b01      	subs	r3, #1
 800cc40:	b29a      	uxth	r2, r3
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800cc46:	bf00      	nop
 800cc48:	3710      	adds	r7, #16
 800cc4a:	46bd      	mov	sp, r7
 800cc4c:	bd80      	pop	{r7, pc}

0800cc4e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800cc4e:	b480      	push	{r7}
 800cc50:	b083      	sub	sp, #12
 800cc52:	af00      	add	r7, sp, #0
 800cc54:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800cc5c:	b2db      	uxtb	r3, r3
 800cc5e:	2b40      	cmp	r3, #64	; 0x40
 800cc60:	d117      	bne.n	800cc92 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d109      	bne.n	800cc7e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cc6e:	b2db      	uxtb	r3, r3
 800cc70:	461a      	mov	r2, r3
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800cc7a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800cc7c:	e067      	b.n	800cd4e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cc82:	b2db      	uxtb	r3, r3
 800cc84:	f043 0301 	orr.w	r3, r3, #1
 800cc88:	b2da      	uxtb	r2, r3
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	611a      	str	r2, [r3, #16]
}
 800cc90:	e05d      	b.n	800cd4e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	691b      	ldr	r3, [r3, #16]
 800cc96:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cc9a:	d133      	bne.n	800cd04 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cca2:	b2db      	uxtb	r3, r3
 800cca4:	2b21      	cmp	r3, #33	; 0x21
 800cca6:	d109      	bne.n	800ccbc <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ccac:	b2db      	uxtb	r3, r3
 800ccae:	461a      	mov	r2, r3
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800ccb8:	611a      	str	r2, [r3, #16]
 800ccba:	e008      	b.n	800ccce <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ccc0:	b2db      	uxtb	r3, r3
 800ccc2:	f043 0301 	orr.w	r3, r3, #1
 800ccc6:	b2da      	uxtb	r2, r3
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d004      	beq.n	800cce0 <I2C_Master_SB+0x92>
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ccda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d108      	bne.n	800ccf2 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d032      	beq.n	800cd4e <I2C_Master_SB+0x100>
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d02d      	beq.n	800cd4e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	685a      	ldr	r2, [r3, #4]
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cd00:	605a      	str	r2, [r3, #4]
}
 800cd02:	e024      	b.n	800cd4e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d10e      	bne.n	800cd2a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cd10:	b29b      	uxth	r3, r3
 800cd12:	11db      	asrs	r3, r3, #7
 800cd14:	b2db      	uxtb	r3, r3
 800cd16:	f003 0306 	and.w	r3, r3, #6
 800cd1a:	b2db      	uxtb	r3, r3
 800cd1c:	f063 030f 	orn	r3, r3, #15
 800cd20:	b2da      	uxtb	r2, r3
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	611a      	str	r2, [r3, #16]
}
 800cd28:	e011      	b.n	800cd4e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cd2e:	2b01      	cmp	r3, #1
 800cd30:	d10d      	bne.n	800cd4e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cd36:	b29b      	uxth	r3, r3
 800cd38:	11db      	asrs	r3, r3, #7
 800cd3a:	b2db      	uxtb	r3, r3
 800cd3c:	f003 0306 	and.w	r3, r3, #6
 800cd40:	b2db      	uxtb	r3, r3
 800cd42:	f063 030e 	orn	r3, r3, #14
 800cd46:	b2da      	uxtb	r2, r3
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	611a      	str	r2, [r3, #16]
}
 800cd4e:	bf00      	nop
 800cd50:	370c      	adds	r7, #12
 800cd52:	46bd      	mov	sp, r7
 800cd54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd58:	4770      	bx	lr

0800cd5a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800cd5a:	b480      	push	{r7}
 800cd5c:	b083      	sub	sp, #12
 800cd5e:	af00      	add	r7, sp, #0
 800cd60:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cd66:	b2da      	uxtb	r2, r3
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d103      	bne.n	800cd7e <I2C_Master_ADD10+0x24>
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d011      	beq.n	800cda2 <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d104      	bne.n	800cd92 <I2C_Master_ADD10+0x38>
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d007      	beq.n	800cda2 <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	685a      	ldr	r2, [r3, #4]
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cda0:	605a      	str	r2, [r3, #4]
    }
  }
}
 800cda2:	bf00      	nop
 800cda4:	370c      	adds	r7, #12
 800cda6:	46bd      	mov	sp, r7
 800cda8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdac:	4770      	bx	lr

0800cdae <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800cdae:	b480      	push	{r7}
 800cdb0:	b091      	sub	sp, #68	; 0x44
 800cdb2:	af00      	add	r7, sp, #0
 800cdb4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800cdbc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdc4:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cdca:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cdd2:	b2db      	uxtb	r3, r3
 800cdd4:	2b22      	cmp	r3, #34	; 0x22
 800cdd6:	f040 8169 	bne.w	800d0ac <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d10f      	bne.n	800ce02 <I2C_Master_ADDR+0x54>
 800cde2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800cde6:	2b40      	cmp	r3, #64	; 0x40
 800cde8:	d10b      	bne.n	800ce02 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800cdea:	2300      	movs	r3, #0
 800cdec:	633b      	str	r3, [r7, #48]	; 0x30
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	695b      	ldr	r3, [r3, #20]
 800cdf4:	633b      	str	r3, [r7, #48]	; 0x30
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	699b      	ldr	r3, [r3, #24]
 800cdfc:	633b      	str	r3, [r7, #48]	; 0x30
 800cdfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce00:	e160      	b.n	800d0c4 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d11d      	bne.n	800ce46 <I2C_Master_ADDR+0x98>
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	691b      	ldr	r3, [r3, #16]
 800ce0e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800ce12:	d118      	bne.n	800ce46 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ce14:	2300      	movs	r3, #0
 800ce16:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	695b      	ldr	r3, [r3, #20]
 800ce1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	699b      	ldr	r3, [r3, #24]
 800ce26:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ce28:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	681a      	ldr	r2, [r3, #0]
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ce38:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ce3e:	1c5a      	adds	r2, r3, #1
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	651a      	str	r2, [r3, #80]	; 0x50
 800ce44:	e13e      	b.n	800d0c4 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ce4a:	b29b      	uxth	r3, r3
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d113      	bne.n	800ce78 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ce50:	2300      	movs	r3, #0
 800ce52:	62bb      	str	r3, [r7, #40]	; 0x28
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	695b      	ldr	r3, [r3, #20]
 800ce5a:	62bb      	str	r3, [r7, #40]	; 0x28
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	699b      	ldr	r3, [r3, #24]
 800ce62:	62bb      	str	r3, [r7, #40]	; 0x28
 800ce64:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	681a      	ldr	r2, [r3, #0]
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ce74:	601a      	str	r2, [r3, #0]
 800ce76:	e115      	b.n	800d0a4 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ce7c:	b29b      	uxth	r3, r3
 800ce7e:	2b01      	cmp	r3, #1
 800ce80:	f040 808a 	bne.w	800cf98 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800ce84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce86:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800ce8a:	d137      	bne.n	800cefc <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	681a      	ldr	r2, [r3, #0]
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ce9a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	685b      	ldr	r3, [r3, #4]
 800cea2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cea6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ceaa:	d113      	bne.n	800ced4 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	681a      	ldr	r2, [r3, #0]
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ceba:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800cebc:	2300      	movs	r3, #0
 800cebe:	627b      	str	r3, [r7, #36]	; 0x24
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	695b      	ldr	r3, [r3, #20]
 800cec6:	627b      	str	r3, [r7, #36]	; 0x24
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	699b      	ldr	r3, [r3, #24]
 800cece:	627b      	str	r3, [r7, #36]	; 0x24
 800ced0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ced2:	e0e7      	b.n	800d0a4 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ced4:	2300      	movs	r3, #0
 800ced6:	623b      	str	r3, [r7, #32]
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	695b      	ldr	r3, [r3, #20]
 800cede:	623b      	str	r3, [r7, #32]
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	699b      	ldr	r3, [r3, #24]
 800cee6:	623b      	str	r3, [r7, #32]
 800cee8:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	681a      	ldr	r2, [r3, #0]
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cef8:	601a      	str	r2, [r3, #0]
 800cefa:	e0d3      	b.n	800d0a4 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800cefc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cefe:	2b08      	cmp	r3, #8
 800cf00:	d02e      	beq.n	800cf60 <I2C_Master_ADDR+0x1b2>
 800cf02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf04:	2b20      	cmp	r3, #32
 800cf06:	d02b      	beq.n	800cf60 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800cf08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf0a:	2b12      	cmp	r3, #18
 800cf0c:	d102      	bne.n	800cf14 <I2C_Master_ADDR+0x166>
 800cf0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf10:	2b01      	cmp	r3, #1
 800cf12:	d125      	bne.n	800cf60 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800cf14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf16:	2b04      	cmp	r3, #4
 800cf18:	d00e      	beq.n	800cf38 <I2C_Master_ADDR+0x18a>
 800cf1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf1c:	2b02      	cmp	r3, #2
 800cf1e:	d00b      	beq.n	800cf38 <I2C_Master_ADDR+0x18a>
 800cf20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf22:	2b10      	cmp	r3, #16
 800cf24:	d008      	beq.n	800cf38 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	681a      	ldr	r2, [r3, #0]
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cf34:	601a      	str	r2, [r3, #0]
 800cf36:	e007      	b.n	800cf48 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	681a      	ldr	r2, [r3, #0]
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800cf46:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800cf48:	2300      	movs	r3, #0
 800cf4a:	61fb      	str	r3, [r7, #28]
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	695b      	ldr	r3, [r3, #20]
 800cf52:	61fb      	str	r3, [r7, #28]
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	699b      	ldr	r3, [r3, #24]
 800cf5a:	61fb      	str	r3, [r7, #28]
 800cf5c:	69fb      	ldr	r3, [r7, #28]
 800cf5e:	e0a1      	b.n	800d0a4 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	681a      	ldr	r2, [r3, #0]
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cf6e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800cf70:	2300      	movs	r3, #0
 800cf72:	61bb      	str	r3, [r7, #24]
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	695b      	ldr	r3, [r3, #20]
 800cf7a:	61bb      	str	r3, [r7, #24]
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	699b      	ldr	r3, [r3, #24]
 800cf82:	61bb      	str	r3, [r7, #24]
 800cf84:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	681a      	ldr	r2, [r3, #0]
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cf94:	601a      	str	r2, [r3, #0]
 800cf96:	e085      	b.n	800d0a4 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cf9c:	b29b      	uxth	r3, r3
 800cf9e:	2b02      	cmp	r3, #2
 800cfa0:	d14d      	bne.n	800d03e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800cfa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfa4:	2b04      	cmp	r3, #4
 800cfa6:	d016      	beq.n	800cfd6 <I2C_Master_ADDR+0x228>
 800cfa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfaa:	2b02      	cmp	r3, #2
 800cfac:	d013      	beq.n	800cfd6 <I2C_Master_ADDR+0x228>
 800cfae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfb0:	2b10      	cmp	r3, #16
 800cfb2:	d010      	beq.n	800cfd6 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	681a      	ldr	r2, [r3, #0]
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cfc2:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	681a      	ldr	r2, [r3, #0]
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cfd2:	601a      	str	r2, [r3, #0]
 800cfd4:	e007      	b.n	800cfe6 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	681a      	ldr	r2, [r3, #0]
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800cfe4:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	685b      	ldr	r3, [r3, #4]
 800cfec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cff0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cff4:	d117      	bne.n	800d026 <I2C_Master_ADDR+0x278>
 800cff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cff8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800cffc:	d00b      	beq.n	800d016 <I2C_Master_ADDR+0x268>
 800cffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d000:	2b01      	cmp	r3, #1
 800d002:	d008      	beq.n	800d016 <I2C_Master_ADDR+0x268>
 800d004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d006:	2b08      	cmp	r3, #8
 800d008:	d005      	beq.n	800d016 <I2C_Master_ADDR+0x268>
 800d00a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d00c:	2b10      	cmp	r3, #16
 800d00e:	d002      	beq.n	800d016 <I2C_Master_ADDR+0x268>
 800d010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d012:	2b20      	cmp	r3, #32
 800d014:	d107      	bne.n	800d026 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	685a      	ldr	r2, [r3, #4]
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800d024:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d026:	2300      	movs	r3, #0
 800d028:	617b      	str	r3, [r7, #20]
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	695b      	ldr	r3, [r3, #20]
 800d030:	617b      	str	r3, [r7, #20]
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	699b      	ldr	r3, [r3, #24]
 800d038:	617b      	str	r3, [r7, #20]
 800d03a:	697b      	ldr	r3, [r7, #20]
 800d03c:	e032      	b.n	800d0a4 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	681a      	ldr	r2, [r3, #0]
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d04c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	685b      	ldr	r3, [r3, #4]
 800d054:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d058:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d05c:	d117      	bne.n	800d08e <I2C_Master_ADDR+0x2e0>
 800d05e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d060:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800d064:	d00b      	beq.n	800d07e <I2C_Master_ADDR+0x2d0>
 800d066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d068:	2b01      	cmp	r3, #1
 800d06a:	d008      	beq.n	800d07e <I2C_Master_ADDR+0x2d0>
 800d06c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d06e:	2b08      	cmp	r3, #8
 800d070:	d005      	beq.n	800d07e <I2C_Master_ADDR+0x2d0>
 800d072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d074:	2b10      	cmp	r3, #16
 800d076:	d002      	beq.n	800d07e <I2C_Master_ADDR+0x2d0>
 800d078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d07a:	2b20      	cmp	r3, #32
 800d07c:	d107      	bne.n	800d08e <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	685a      	ldr	r2, [r3, #4]
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800d08c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d08e:	2300      	movs	r3, #0
 800d090:	613b      	str	r3, [r7, #16]
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	695b      	ldr	r3, [r3, #20]
 800d098:	613b      	str	r3, [r7, #16]
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	699b      	ldr	r3, [r3, #24]
 800d0a0:	613b      	str	r3, [r7, #16]
 800d0a2:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	2200      	movs	r2, #0
 800d0a8:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800d0aa:	e00b      	b.n	800d0c4 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d0ac:	2300      	movs	r3, #0
 800d0ae:	60fb      	str	r3, [r7, #12]
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	695b      	ldr	r3, [r3, #20]
 800d0b6:	60fb      	str	r3, [r7, #12]
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	699b      	ldr	r3, [r3, #24]
 800d0be:	60fb      	str	r3, [r7, #12]
 800d0c0:	68fb      	ldr	r3, [r7, #12]
}
 800d0c2:	e7ff      	b.n	800d0c4 <I2C_Master_ADDR+0x316>
 800d0c4:	bf00      	nop
 800d0c6:	3744      	adds	r7, #68	; 0x44
 800d0c8:	46bd      	mov	sp, r7
 800d0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ce:	4770      	bx	lr

0800d0d0 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800d0d0:	b580      	push	{r7, lr}
 800d0d2:	b084      	sub	sp, #16
 800d0d4:	af00      	add	r7, sp, #0
 800d0d6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d0de:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d0e4:	b29b      	uxth	r3, r3
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d02b      	beq.n	800d142 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0ee:	781a      	ldrb	r2, [r3, #0]
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0fa:	1c5a      	adds	r2, r3, #1
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d104:	b29b      	uxth	r3, r3
 800d106:	3b01      	subs	r3, #1
 800d108:	b29a      	uxth	r2, r3
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d112:	b29b      	uxth	r3, r3
 800d114:	2b00      	cmp	r3, #0
 800d116:	d114      	bne.n	800d142 <I2C_SlaveTransmit_TXE+0x72>
 800d118:	7bfb      	ldrb	r3, [r7, #15]
 800d11a:	2b29      	cmp	r3, #41	; 0x29
 800d11c:	d111      	bne.n	800d142 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	685a      	ldr	r2, [r3, #4]
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d12c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	2221      	movs	r2, #33	; 0x21
 800d132:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	2228      	movs	r2, #40	; 0x28
 800d138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800d13c:	6878      	ldr	r0, [r7, #4]
 800d13e:	f7ff fa04 	bl	800c54a <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800d142:	bf00      	nop
 800d144:	3710      	adds	r7, #16
 800d146:	46bd      	mov	sp, r7
 800d148:	bd80      	pop	{r7, pc}

0800d14a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800d14a:	b480      	push	{r7}
 800d14c:	b083      	sub	sp, #12
 800d14e:	af00      	add	r7, sp, #0
 800d150:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d156:	b29b      	uxth	r3, r3
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d011      	beq.n	800d180 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d160:	781a      	ldrb	r2, [r3, #0]
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d16c:	1c5a      	adds	r2, r3, #1
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d176:	b29b      	uxth	r3, r3
 800d178:	3b01      	subs	r3, #1
 800d17a:	b29a      	uxth	r2, r3
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800d180:	bf00      	nop
 800d182:	370c      	adds	r7, #12
 800d184:	46bd      	mov	sp, r7
 800d186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d18a:	4770      	bx	lr

0800d18c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800d18c:	b580      	push	{r7, lr}
 800d18e:	b084      	sub	sp, #16
 800d190:	af00      	add	r7, sp, #0
 800d192:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d19a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d1a0:	b29b      	uxth	r3, r3
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d02c      	beq.n	800d200 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	691a      	ldr	r2, [r3, #16]
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1b0:	b2d2      	uxtb	r2, r2
 800d1b2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1b8:	1c5a      	adds	r2, r3, #1
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d1c2:	b29b      	uxth	r3, r3
 800d1c4:	3b01      	subs	r3, #1
 800d1c6:	b29a      	uxth	r2, r3
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d1d0:	b29b      	uxth	r3, r3
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d114      	bne.n	800d200 <I2C_SlaveReceive_RXNE+0x74>
 800d1d6:	7bfb      	ldrb	r3, [r7, #15]
 800d1d8:	2b2a      	cmp	r3, #42	; 0x2a
 800d1da:	d111      	bne.n	800d200 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	685a      	ldr	r2, [r3, #4]
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d1ea:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	2222      	movs	r2, #34	; 0x22
 800d1f0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	2228      	movs	r2, #40	; 0x28
 800d1f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800d1fa:	6878      	ldr	r0, [r7, #4]
 800d1fc:	f7ff f9af 	bl	800c55e <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800d200:	bf00      	nop
 800d202:	3710      	adds	r7, #16
 800d204:	46bd      	mov	sp, r7
 800d206:	bd80      	pop	{r7, pc}

0800d208 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800d208:	b480      	push	{r7}
 800d20a:	b083      	sub	sp, #12
 800d20c:	af00      	add	r7, sp, #0
 800d20e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d214:	b29b      	uxth	r3, r3
 800d216:	2b00      	cmp	r3, #0
 800d218:	d012      	beq.n	800d240 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	691a      	ldr	r2, [r3, #16]
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d224:	b2d2      	uxtb	r2, r2
 800d226:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d22c:	1c5a      	adds	r2, r3, #1
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d236:	b29b      	uxth	r3, r3
 800d238:	3b01      	subs	r3, #1
 800d23a:	b29a      	uxth	r2, r3
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800d240:	bf00      	nop
 800d242:	370c      	adds	r7, #12
 800d244:	46bd      	mov	sp, r7
 800d246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d24a:	4770      	bx	lr

0800d24c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800d24c:	b580      	push	{r7, lr}
 800d24e:	b084      	sub	sp, #16
 800d250:	af00      	add	r7, sp, #0
 800d252:	6078      	str	r0, [r7, #4]
 800d254:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800d256:	2300      	movs	r3, #0
 800d258:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d260:	b2db      	uxtb	r3, r3
 800d262:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800d266:	2b28      	cmp	r3, #40	; 0x28
 800d268:	d127      	bne.n	800d2ba <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	685a      	ldr	r2, [r3, #4]
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d278:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800d27a:	683b      	ldr	r3, [r7, #0]
 800d27c:	089b      	lsrs	r3, r3, #2
 800d27e:	f003 0301 	and.w	r3, r3, #1
 800d282:	2b00      	cmp	r3, #0
 800d284:	d101      	bne.n	800d28a <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800d286:	2301      	movs	r3, #1
 800d288:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800d28a:	683b      	ldr	r3, [r7, #0]
 800d28c:	09db      	lsrs	r3, r3, #7
 800d28e:	f003 0301 	and.w	r3, r3, #1
 800d292:	2b00      	cmp	r3, #0
 800d294:	d103      	bne.n	800d29e <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	68db      	ldr	r3, [r3, #12]
 800d29a:	81bb      	strh	r3, [r7, #12]
 800d29c:	e002      	b.n	800d2a4 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	699b      	ldr	r3, [r3, #24]
 800d2a2:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	2200      	movs	r2, #0
 800d2a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800d2ac:	89ba      	ldrh	r2, [r7, #12]
 800d2ae:	7bfb      	ldrb	r3, [r7, #15]
 800d2b0:	4619      	mov	r1, r3
 800d2b2:	6878      	ldr	r0, [r7, #4]
 800d2b4:	f7ff f95d 	bl	800c572 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800d2b8:	e008      	b.n	800d2cc <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	f06f 0202 	mvn.w	r2, #2
 800d2c2:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	2200      	movs	r2, #0
 800d2c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800d2cc:	bf00      	nop
 800d2ce:	3710      	adds	r7, #16
 800d2d0:	46bd      	mov	sp, r7
 800d2d2:	bd80      	pop	{r7, pc}

0800d2d4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800d2d4:	b580      	push	{r7, lr}
 800d2d6:	b084      	sub	sp, #16
 800d2d8:	af00      	add	r7, sp, #0
 800d2da:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d2e2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	685a      	ldr	r2, [r3, #4]
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800d2f2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800d2f4:	2300      	movs	r3, #0
 800d2f6:	60bb      	str	r3, [r7, #8]
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	695b      	ldr	r3, [r3, #20]
 800d2fe:	60bb      	str	r3, [r7, #8]
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	681a      	ldr	r2, [r3, #0]
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	f042 0201 	orr.w	r2, r2, #1
 800d30e:	601a      	str	r2, [r3, #0]
 800d310:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	681a      	ldr	r2, [r3, #0]
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d320:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	685b      	ldr	r3, [r3, #4]
 800d328:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d32c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d330:	d172      	bne.n	800d418 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800d332:	7bfb      	ldrb	r3, [r7, #15]
 800d334:	2b22      	cmp	r3, #34	; 0x22
 800d336:	d002      	beq.n	800d33e <I2C_Slave_STOPF+0x6a>
 800d338:	7bfb      	ldrb	r3, [r7, #15]
 800d33a:	2b2a      	cmp	r3, #42	; 0x2a
 800d33c:	d135      	bne.n	800d3aa <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	685b      	ldr	r3, [r3, #4]
 800d346:	b29a      	uxth	r2, r3
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d350:	b29b      	uxth	r3, r3
 800d352:	2b00      	cmp	r3, #0
 800d354:	d005      	beq.n	800d362 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d35a:	f043 0204 	orr.w	r2, r3, #4
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	685a      	ldr	r2, [r3, #4]
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d370:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d376:	4618      	mov	r0, r3
 800d378:	f7fd fac2 	bl	800a900 <HAL_DMA_GetState>
 800d37c:	4603      	mov	r3, r0
 800d37e:	2b01      	cmp	r3, #1
 800d380:	d049      	beq.n	800d416 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d386:	4a69      	ldr	r2, [pc, #420]	; (800d52c <I2C_Slave_STOPF+0x258>)
 800d388:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d38e:	4618      	mov	r0, r3
 800d390:	f7fd fa94 	bl	800a8bc <HAL_DMA_Abort_IT>
 800d394:	4603      	mov	r3, r0
 800d396:	2b00      	cmp	r3, #0
 800d398:	d03d      	beq.n	800d416 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d39e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d3a0:	687a      	ldr	r2, [r7, #4]
 800d3a2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800d3a4:	4610      	mov	r0, r2
 800d3a6:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800d3a8:	e035      	b.n	800d416 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	685b      	ldr	r3, [r3, #4]
 800d3b2:	b29a      	uxth	r2, r3
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d3bc:	b29b      	uxth	r3, r3
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d005      	beq.n	800d3ce <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3c6:	f043 0204 	orr.w	r2, r3, #4
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	685a      	ldr	r2, [r3, #4]
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d3dc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d3e2:	4618      	mov	r0, r3
 800d3e4:	f7fd fa8c 	bl	800a900 <HAL_DMA_GetState>
 800d3e8:	4603      	mov	r3, r0
 800d3ea:	2b01      	cmp	r3, #1
 800d3ec:	d014      	beq.n	800d418 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d3f2:	4a4e      	ldr	r2, [pc, #312]	; (800d52c <I2C_Slave_STOPF+0x258>)
 800d3f4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d3fa:	4618      	mov	r0, r3
 800d3fc:	f7fd fa5e 	bl	800a8bc <HAL_DMA_Abort_IT>
 800d400:	4603      	mov	r3, r0
 800d402:	2b00      	cmp	r3, #0
 800d404:	d008      	beq.n	800d418 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d40a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d40c:	687a      	ldr	r2, [r7, #4]
 800d40e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800d410:	4610      	mov	r0, r2
 800d412:	4798      	blx	r3
 800d414:	e000      	b.n	800d418 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800d416:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d41c:	b29b      	uxth	r3, r3
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d03e      	beq.n	800d4a0 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	695b      	ldr	r3, [r3, #20]
 800d428:	f003 0304 	and.w	r3, r3, #4
 800d42c:	2b04      	cmp	r3, #4
 800d42e:	d112      	bne.n	800d456 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	691a      	ldr	r2, [r3, #16]
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d43a:	b2d2      	uxtb	r2, r2
 800d43c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d442:	1c5a      	adds	r2, r3, #1
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d44c:	b29b      	uxth	r3, r3
 800d44e:	3b01      	subs	r3, #1
 800d450:	b29a      	uxth	r2, r3
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	695b      	ldr	r3, [r3, #20]
 800d45c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d460:	2b40      	cmp	r3, #64	; 0x40
 800d462:	d112      	bne.n	800d48a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	691a      	ldr	r2, [r3, #16]
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d46e:	b2d2      	uxtb	r2, r2
 800d470:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d476:	1c5a      	adds	r2, r3, #1
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d480:	b29b      	uxth	r3, r3
 800d482:	3b01      	subs	r3, #1
 800d484:	b29a      	uxth	r2, r3
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d48e:	b29b      	uxth	r3, r3
 800d490:	2b00      	cmp	r3, #0
 800d492:	d005      	beq.n	800d4a0 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d498:	f043 0204 	orr.w	r2, r3, #4
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d003      	beq.n	800d4b0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800d4a8:	6878      	ldr	r0, [r7, #4]
 800d4aa:	f000 f843 	bl	800d534 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800d4ae:	e039      	b.n	800d524 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800d4b0:	7bfb      	ldrb	r3, [r7, #15]
 800d4b2:	2b2a      	cmp	r3, #42	; 0x2a
 800d4b4:	d109      	bne.n	800d4ca <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	2200      	movs	r2, #0
 800d4ba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	2228      	movs	r2, #40	; 0x28
 800d4c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800d4c4:	6878      	ldr	r0, [r7, #4]
 800d4c6:	f7ff f84a 	bl	800c55e <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d4d0:	b2db      	uxtb	r3, r3
 800d4d2:	2b28      	cmp	r3, #40	; 0x28
 800d4d4:	d111      	bne.n	800d4fa <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	4a15      	ldr	r2, [pc, #84]	; (800d530 <I2C_Slave_STOPF+0x25c>)
 800d4da:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	2200      	movs	r2, #0
 800d4e0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	2220      	movs	r2, #32
 800d4e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	2200      	movs	r2, #0
 800d4ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800d4f2:	6878      	ldr	r0, [r7, #4]
 800d4f4:	f7ff f84b 	bl	800c58e <HAL_I2C_ListenCpltCallback>
}
 800d4f8:	e014      	b.n	800d524 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d4fe:	2b22      	cmp	r3, #34	; 0x22
 800d500:	d002      	beq.n	800d508 <I2C_Slave_STOPF+0x234>
 800d502:	7bfb      	ldrb	r3, [r7, #15]
 800d504:	2b22      	cmp	r3, #34	; 0x22
 800d506:	d10d      	bne.n	800d524 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	2200      	movs	r2, #0
 800d50c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	2220      	movs	r2, #32
 800d512:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	2200      	movs	r2, #0
 800d51a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800d51e:	6878      	ldr	r0, [r7, #4]
 800d520:	f7ff f81d 	bl	800c55e <HAL_I2C_SlaveRxCpltCallback>
}
 800d524:	bf00      	nop
 800d526:	3710      	adds	r7, #16
 800d528:	46bd      	mov	sp, r7
 800d52a:	bd80      	pop	{r7, pc}
 800d52c:	0800d799 	.word	0x0800d799
 800d530:	ffff0000 	.word	0xffff0000

0800d534 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800d534:	b580      	push	{r7, lr}
 800d536:	b084      	sub	sp, #16
 800d538:	af00      	add	r7, sp, #0
 800d53a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d542:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d54a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800d54c:	7bbb      	ldrb	r3, [r7, #14]
 800d54e:	2b10      	cmp	r3, #16
 800d550:	d002      	beq.n	800d558 <I2C_ITError+0x24>
 800d552:	7bbb      	ldrb	r3, [r7, #14]
 800d554:	2b40      	cmp	r3, #64	; 0x40
 800d556:	d10a      	bne.n	800d56e <I2C_ITError+0x3a>
 800d558:	7bfb      	ldrb	r3, [r7, #15]
 800d55a:	2b22      	cmp	r3, #34	; 0x22
 800d55c:	d107      	bne.n	800d56e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	681a      	ldr	r2, [r3, #0]
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d56c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800d56e:	7bfb      	ldrb	r3, [r7, #15]
 800d570:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800d574:	2b28      	cmp	r3, #40	; 0x28
 800d576:	d107      	bne.n	800d588 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	2200      	movs	r2, #0
 800d57c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	2228      	movs	r2, #40	; 0x28
 800d582:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800d586:	e015      	b.n	800d5b4 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	685b      	ldr	r3, [r3, #4]
 800d58e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d592:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d596:	d00a      	beq.n	800d5ae <I2C_ITError+0x7a>
 800d598:	7bfb      	ldrb	r3, [r7, #15]
 800d59a:	2b60      	cmp	r3, #96	; 0x60
 800d59c:	d007      	beq.n	800d5ae <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	2220      	movs	r2, #32
 800d5a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	2200      	movs	r2, #0
 800d5aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	2200      	movs	r2, #0
 800d5b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	685b      	ldr	r3, [r3, #4]
 800d5ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d5be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d5c2:	d162      	bne.n	800d68a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	685a      	ldr	r2, [r3, #4]
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d5d2:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800d5dc:	b2db      	uxtb	r3, r3
 800d5de:	2b01      	cmp	r3, #1
 800d5e0:	d020      	beq.n	800d624 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5e6:	4a6a      	ldr	r2, [pc, #424]	; (800d790 <I2C_ITError+0x25c>)
 800d5e8:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5ee:	4618      	mov	r0, r3
 800d5f0:	f7fd f964 	bl	800a8bc <HAL_DMA_Abort_IT>
 800d5f4:	4603      	mov	r3, r0
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	f000 8089 	beq.w	800d70e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	681a      	ldr	r2, [r3, #0]
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	f022 0201 	bic.w	r2, r2, #1
 800d60a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	2220      	movs	r2, #32
 800d610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d618:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d61a:	687a      	ldr	r2, [r7, #4]
 800d61c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800d61e:	4610      	mov	r0, r2
 800d620:	4798      	blx	r3
 800d622:	e074      	b.n	800d70e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d628:	4a59      	ldr	r2, [pc, #356]	; (800d790 <I2C_ITError+0x25c>)
 800d62a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d630:	4618      	mov	r0, r3
 800d632:	f7fd f943 	bl	800a8bc <HAL_DMA_Abort_IT>
 800d636:	4603      	mov	r3, r0
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d068      	beq.n	800d70e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	695b      	ldr	r3, [r3, #20]
 800d642:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d646:	2b40      	cmp	r3, #64	; 0x40
 800d648:	d10b      	bne.n	800d662 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	691a      	ldr	r2, [r3, #16]
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d654:	b2d2      	uxtb	r2, r2
 800d656:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d65c:	1c5a      	adds	r2, r3, #1
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	681a      	ldr	r2, [r3, #0]
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	f022 0201 	bic.w	r2, r2, #1
 800d670:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	2220      	movs	r2, #32
 800d676:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d67e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d680:	687a      	ldr	r2, [r7, #4]
 800d682:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800d684:	4610      	mov	r0, r2
 800d686:	4798      	blx	r3
 800d688:	e041      	b.n	800d70e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d690:	b2db      	uxtb	r3, r3
 800d692:	2b60      	cmp	r3, #96	; 0x60
 800d694:	d125      	bne.n	800d6e2 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	2220      	movs	r2, #32
 800d69a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	2200      	movs	r2, #0
 800d6a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	695b      	ldr	r3, [r3, #20]
 800d6aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d6ae:	2b40      	cmp	r3, #64	; 0x40
 800d6b0:	d10b      	bne.n	800d6ca <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	691a      	ldr	r2, [r3, #16]
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6bc:	b2d2      	uxtb	r2, r2
 800d6be:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6c4:	1c5a      	adds	r2, r3, #1
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	681a      	ldr	r2, [r3, #0]
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	f022 0201 	bic.w	r2, r2, #1
 800d6d8:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800d6da:	6878      	ldr	r0, [r7, #4]
 800d6dc:	f7fe ff7f 	bl	800c5de <HAL_I2C_AbortCpltCallback>
 800d6e0:	e015      	b.n	800d70e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	695b      	ldr	r3, [r3, #20]
 800d6e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d6ec:	2b40      	cmp	r3, #64	; 0x40
 800d6ee:	d10b      	bne.n	800d708 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	691a      	ldr	r2, [r3, #16]
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6fa:	b2d2      	uxtb	r2, r2
 800d6fc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d702:	1c5a      	adds	r2, r3, #1
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800d708:	6878      	ldr	r0, [r7, #4]
 800d70a:	f7fe ff5e 	bl	800c5ca <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d712:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800d714:	68bb      	ldr	r3, [r7, #8]
 800d716:	f003 0301 	and.w	r3, r3, #1
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d10e      	bne.n	800d73c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800d71e:	68bb      	ldr	r3, [r7, #8]
 800d720:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800d724:	2b00      	cmp	r3, #0
 800d726:	d109      	bne.n	800d73c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800d728:	68bb      	ldr	r3, [r7, #8]
 800d72a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d104      	bne.n	800d73c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800d732:	68bb      	ldr	r3, [r7, #8]
 800d734:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d007      	beq.n	800d74c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	685a      	ldr	r2, [r3, #4]
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800d74a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d752:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d758:	f003 0304 	and.w	r3, r3, #4
 800d75c:	2b04      	cmp	r3, #4
 800d75e:	d113      	bne.n	800d788 <I2C_ITError+0x254>
 800d760:	7bfb      	ldrb	r3, [r7, #15]
 800d762:	2b28      	cmp	r3, #40	; 0x28
 800d764:	d110      	bne.n	800d788 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	4a0a      	ldr	r2, [pc, #40]	; (800d794 <I2C_ITError+0x260>)
 800d76a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	2200      	movs	r2, #0
 800d770:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	2220      	movs	r2, #32
 800d776:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	2200      	movs	r2, #0
 800d77e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800d782:	6878      	ldr	r0, [r7, #4]
 800d784:	f7fe ff03 	bl	800c58e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800d788:	bf00      	nop
 800d78a:	3710      	adds	r7, #16
 800d78c:	46bd      	mov	sp, r7
 800d78e:	bd80      	pop	{r7, pc}
 800d790:	0800d799 	.word	0x0800d799
 800d794:	ffff0000 	.word	0xffff0000

0800d798 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800d798:	b580      	push	{r7, lr}
 800d79a:	b086      	sub	sp, #24
 800d79c:	af00      	add	r7, sp, #0
 800d79e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d7a0:	2300      	movs	r3, #0
 800d7a2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7a8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800d7aa:	697b      	ldr	r3, [r7, #20]
 800d7ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d7b0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800d7b2:	4b4b      	ldr	r3, [pc, #300]	; (800d8e0 <I2C_DMAAbort+0x148>)
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	08db      	lsrs	r3, r3, #3
 800d7b8:	4a4a      	ldr	r2, [pc, #296]	; (800d8e4 <I2C_DMAAbort+0x14c>)
 800d7ba:	fba2 2303 	umull	r2, r3, r2, r3
 800d7be:	0a1a      	lsrs	r2, r3, #8
 800d7c0:	4613      	mov	r3, r2
 800d7c2:	009b      	lsls	r3, r3, #2
 800d7c4:	4413      	add	r3, r2
 800d7c6:	00da      	lsls	r2, r3, #3
 800d7c8:	1ad3      	subs	r3, r2, r3
 800d7ca:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d106      	bne.n	800d7e0 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d7d2:	697b      	ldr	r3, [r7, #20]
 800d7d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7d6:	f043 0220 	orr.w	r2, r3, #32
 800d7da:	697b      	ldr	r3, [r7, #20]
 800d7dc:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800d7de:	e00a      	b.n	800d7f6 <I2C_DMAAbort+0x5e>
    }
    count--;
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	3b01      	subs	r3, #1
 800d7e4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800d7e6:	697b      	ldr	r3, [r7, #20]
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d7f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d7f4:	d0ea      	beq.n	800d7cc <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800d7f6:	697b      	ldr	r3, [r7, #20]
 800d7f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d003      	beq.n	800d806 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800d7fe:	697b      	ldr	r3, [r7, #20]
 800d800:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d802:	2200      	movs	r2, #0
 800d804:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800d806:	697b      	ldr	r3, [r7, #20]
 800d808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d003      	beq.n	800d816 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800d80e:	697b      	ldr	r3, [r7, #20]
 800d810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d812:	2200      	movs	r2, #0
 800d814:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d816:	697b      	ldr	r3, [r7, #20]
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	681a      	ldr	r2, [r3, #0]
 800d81c:	697b      	ldr	r3, [r7, #20]
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d824:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800d826:	697b      	ldr	r3, [r7, #20]
 800d828:	2200      	movs	r2, #0
 800d82a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800d82c:	697b      	ldr	r3, [r7, #20]
 800d82e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d830:	2b00      	cmp	r3, #0
 800d832:	d003      	beq.n	800d83c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800d834:	697b      	ldr	r3, [r7, #20]
 800d836:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d838:	2200      	movs	r2, #0
 800d83a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800d83c:	697b      	ldr	r3, [r7, #20]
 800d83e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d840:	2b00      	cmp	r3, #0
 800d842:	d003      	beq.n	800d84c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800d844:	697b      	ldr	r3, [r7, #20]
 800d846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d848:	2200      	movs	r2, #0
 800d84a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800d84c:	697b      	ldr	r3, [r7, #20]
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	681a      	ldr	r2, [r3, #0]
 800d852:	697b      	ldr	r3, [r7, #20]
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	f022 0201 	bic.w	r2, r2, #1
 800d85a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800d85c:	697b      	ldr	r3, [r7, #20]
 800d85e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d862:	b2db      	uxtb	r3, r3
 800d864:	2b60      	cmp	r3, #96	; 0x60
 800d866:	d10e      	bne.n	800d886 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800d868:	697b      	ldr	r3, [r7, #20]
 800d86a:	2220      	movs	r2, #32
 800d86c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800d870:	697b      	ldr	r3, [r7, #20]
 800d872:	2200      	movs	r2, #0
 800d874:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800d878:	697b      	ldr	r3, [r7, #20]
 800d87a:	2200      	movs	r2, #0
 800d87c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800d87e:	6978      	ldr	r0, [r7, #20]
 800d880:	f7fe fead 	bl	800c5de <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800d884:	e027      	b.n	800d8d6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800d886:	7cfb      	ldrb	r3, [r7, #19]
 800d888:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800d88c:	2b28      	cmp	r3, #40	; 0x28
 800d88e:	d117      	bne.n	800d8c0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800d890:	697b      	ldr	r3, [r7, #20]
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	681a      	ldr	r2, [r3, #0]
 800d896:	697b      	ldr	r3, [r7, #20]
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	f042 0201 	orr.w	r2, r2, #1
 800d89e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d8a0:	697b      	ldr	r3, [r7, #20]
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	681a      	ldr	r2, [r3, #0]
 800d8a6:	697b      	ldr	r3, [r7, #20]
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d8ae:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800d8b0:	697b      	ldr	r3, [r7, #20]
 800d8b2:	2200      	movs	r2, #0
 800d8b4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800d8b6:	697b      	ldr	r3, [r7, #20]
 800d8b8:	2228      	movs	r2, #40	; 0x28
 800d8ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800d8be:	e007      	b.n	800d8d0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800d8c0:	697b      	ldr	r3, [r7, #20]
 800d8c2:	2220      	movs	r2, #32
 800d8c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800d8c8:	697b      	ldr	r3, [r7, #20]
 800d8ca:	2200      	movs	r2, #0
 800d8cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800d8d0:	6978      	ldr	r0, [r7, #20]
 800d8d2:	f7fe fe7a 	bl	800c5ca <HAL_I2C_ErrorCallback>
}
 800d8d6:	bf00      	nop
 800d8d8:	3718      	adds	r7, #24
 800d8da:	46bd      	mov	sp, r7
 800d8dc:	bd80      	pop	{r7, pc}
 800d8de:	bf00      	nop
 800d8e0:	2000001c 	.word	0x2000001c
 800d8e4:	14f8b589 	.word	0x14f8b589

0800d8e8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800d8e8:	b480      	push	{r7}
 800d8ea:	b085      	sub	sp, #20
 800d8ec:	af00      	add	r7, sp, #0
 800d8ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d8f0:	2300      	movs	r3, #0
 800d8f2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800d8f4:	4b13      	ldr	r3, [pc, #76]	; (800d944 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	08db      	lsrs	r3, r3, #3
 800d8fa:	4a13      	ldr	r2, [pc, #76]	; (800d948 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800d8fc:	fba2 2303 	umull	r2, r3, r2, r3
 800d900:	0a1a      	lsrs	r2, r3, #8
 800d902:	4613      	mov	r3, r2
 800d904:	009b      	lsls	r3, r3, #2
 800d906:	4413      	add	r3, r2
 800d908:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800d90a:	68fb      	ldr	r3, [r7, #12]
 800d90c:	3b01      	subs	r3, #1
 800d90e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800d910:	68fb      	ldr	r3, [r7, #12]
 800d912:	2b00      	cmp	r3, #0
 800d914:	d107      	bne.n	800d926 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d91a:	f043 0220 	orr.w	r2, r3, #32
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800d922:	2301      	movs	r3, #1
 800d924:	e008      	b.n	800d938 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d930:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d934:	d0e9      	beq.n	800d90a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800d936:	2300      	movs	r3, #0
}
 800d938:	4618      	mov	r0, r3
 800d93a:	3714      	adds	r7, #20
 800d93c:	46bd      	mov	sp, r7
 800d93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d942:	4770      	bx	lr
 800d944:	2000001c 	.word	0x2000001c
 800d948:	14f8b589 	.word	0x14f8b589

0800d94c <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800d94c:	b480      	push	{r7}
 800d94e:	b083      	sub	sp, #12
 800d950:	af00      	add	r7, sp, #0
 800d952:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d958:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800d95c:	d103      	bne.n	800d966 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	2201      	movs	r2, #1
 800d962:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800d964:	e007      	b.n	800d976 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d96a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800d96e:	d102      	bne.n	800d976 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	2208      	movs	r2, #8
 800d974:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800d976:	bf00      	nop
 800d978:	370c      	adds	r7, #12
 800d97a:	46bd      	mov	sp, r7
 800d97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d980:	4770      	bx	lr
	...

0800d984 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800d984:	b580      	push	{r7, lr}
 800d986:	b084      	sub	sp, #16
 800d988:	af00      	add	r7, sp, #0
 800d98a:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d101      	bne.n	800d996 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800d992:	2301      	movs	r3, #1
 800d994:	e0bf      	b.n	800db16 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800d99c:	b2db      	uxtb	r3, r3
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d106      	bne.n	800d9b0 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	2200      	movs	r2, #0
 800d9a6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800d9aa:	6878      	ldr	r0, [r7, #4]
 800d9ac:	f7f3 fcae 	bl	800130c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	2202      	movs	r2, #2
 800d9b4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	699a      	ldr	r2, [r3, #24]
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800d9c6:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	6999      	ldr	r1, [r3, #24]
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	685a      	ldr	r2, [r3, #4]
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	689b      	ldr	r3, [r3, #8]
 800d9d6:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800d9dc:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	691b      	ldr	r3, [r3, #16]
 800d9e2:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	430a      	orrs	r2, r1
 800d9ea:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	6899      	ldr	r1, [r3, #8]
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	681a      	ldr	r2, [r3, #0]
 800d9f6:	4b4a      	ldr	r3, [pc, #296]	; (800db20 <HAL_LTDC_Init+0x19c>)
 800d9f8:	400b      	ands	r3, r1
 800d9fa:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	695b      	ldr	r3, [r3, #20]
 800da00:	041b      	lsls	r3, r3, #16
 800da02:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	6899      	ldr	r1, [r3, #8]
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	699a      	ldr	r2, [r3, #24]
 800da0e:	68fb      	ldr	r3, [r7, #12]
 800da10:	431a      	orrs	r2, r3
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	430a      	orrs	r2, r1
 800da18:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	68d9      	ldr	r1, [r3, #12]
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	681a      	ldr	r2, [r3, #0]
 800da24:	4b3e      	ldr	r3, [pc, #248]	; (800db20 <HAL_LTDC_Init+0x19c>)
 800da26:	400b      	ands	r3, r1
 800da28:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	69db      	ldr	r3, [r3, #28]
 800da2e:	041b      	lsls	r3, r3, #16
 800da30:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	68d9      	ldr	r1, [r3, #12]
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	6a1a      	ldr	r2, [r3, #32]
 800da3c:	68fb      	ldr	r3, [r7, #12]
 800da3e:	431a      	orrs	r2, r3
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	430a      	orrs	r2, r1
 800da46:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	6919      	ldr	r1, [r3, #16]
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	681a      	ldr	r2, [r3, #0]
 800da52:	4b33      	ldr	r3, [pc, #204]	; (800db20 <HAL_LTDC_Init+0x19c>)
 800da54:	400b      	ands	r3, r1
 800da56:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da5c:	041b      	lsls	r3, r3, #16
 800da5e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	6919      	ldr	r1, [r3, #16]
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	431a      	orrs	r2, r3
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	430a      	orrs	r2, r1
 800da74:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	6959      	ldr	r1, [r3, #20]
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	681a      	ldr	r2, [r3, #0]
 800da80:	4b27      	ldr	r3, [pc, #156]	; (800db20 <HAL_LTDC_Init+0x19c>)
 800da82:	400b      	ands	r3, r1
 800da84:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da8a:	041b      	lsls	r3, r3, #16
 800da8c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	6959      	ldr	r1, [r3, #20]
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	431a      	orrs	r2, r3
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	430a      	orrs	r2, r1
 800daa2:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800daaa:	021b      	lsls	r3, r3, #8
 800daac:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800dab4:	041b      	lsls	r3, r3, #16
 800dab6:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800dac6:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800dace:	68ba      	ldr	r2, [r7, #8]
 800dad0:	68fb      	ldr	r3, [r7, #12]
 800dad2:	4313      	orrs	r3, r2
 800dad4:	687a      	ldr	r2, [r7, #4]
 800dad6:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800dada:	431a      	orrs	r2, r3
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	430a      	orrs	r2, r1
 800dae2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	f042 0206 	orr.w	r2, r2, #6
 800daf2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	699a      	ldr	r2, [r3, #24]
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	f042 0201 	orr.w	r2, r2, #1
 800db02:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	2200      	movs	r2, #0
 800db08:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	2201      	movs	r2, #1
 800db10:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800db14:	2300      	movs	r3, #0
}
 800db16:	4618      	mov	r0, r3
 800db18:	3710      	adds	r7, #16
 800db1a:	46bd      	mov	sp, r7
 800db1c:	bd80      	pop	{r7, pc}
 800db1e:	bf00      	nop
 800db20:	f000f800 	.word	0xf000f800

0800db24 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800db24:	b580      	push	{r7, lr}
 800db26:	b084      	sub	sp, #16
 800db28:	af00      	add	r7, sp, #0
 800db2a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db32:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db3a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	f003 0304 	and.w	r3, r3, #4
 800db42:	2b00      	cmp	r3, #0
 800db44:	d023      	beq.n	800db8e <HAL_LTDC_IRQHandler+0x6a>
 800db46:	68bb      	ldr	r3, [r7, #8]
 800db48:	f003 0304 	and.w	r3, r3, #4
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d01e      	beq.n	800db8e <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	f022 0204 	bic.w	r2, r2, #4
 800db5e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	2204      	movs	r2, #4
 800db66:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800db6e:	f043 0201 	orr.w	r2, r3, #1
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	2204      	movs	r2, #4
 800db7c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	2200      	movs	r2, #0
 800db84:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800db88:	6878      	ldr	r0, [r7, #4]
 800db8a:	f000 f86f 	bl	800dc6c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	f003 0302 	and.w	r3, r3, #2
 800db94:	2b00      	cmp	r3, #0
 800db96:	d023      	beq.n	800dbe0 <HAL_LTDC_IRQHandler+0xbc>
 800db98:	68bb      	ldr	r3, [r7, #8]
 800db9a:	f003 0302 	and.w	r3, r3, #2
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d01e      	beq.n	800dbe0 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	f022 0202 	bic.w	r2, r2, #2
 800dbb0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	2202      	movs	r2, #2
 800dbb8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800dbc0:	f043 0202 	orr.w	r2, r3, #2
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	2204      	movs	r2, #4
 800dbce:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	2200      	movs	r2, #0
 800dbd6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800dbda:	6878      	ldr	r0, [r7, #4]
 800dbdc:	f000 f846 	bl	800dc6c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	f003 0301 	and.w	r3, r3, #1
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d01b      	beq.n	800dc22 <HAL_LTDC_IRQHandler+0xfe>
 800dbea:	68bb      	ldr	r3, [r7, #8]
 800dbec:	f003 0301 	and.w	r3, r3, #1
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d016      	beq.n	800dc22 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	681b      	ldr	r3, [r3, #0]
 800dbfe:	f022 0201 	bic.w	r2, r2, #1
 800dc02:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	2201      	movs	r2, #1
 800dc0a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	2201      	movs	r2, #1
 800dc10:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	2200      	movs	r2, #0
 800dc18:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800dc1c:	6878      	ldr	r0, [r7, #4]
 800dc1e:	f000 f82f 	bl	800dc80 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	f003 0308 	and.w	r3, r3, #8
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d01b      	beq.n	800dc64 <HAL_LTDC_IRQHandler+0x140>
 800dc2c:	68bb      	ldr	r3, [r7, #8]
 800dc2e:	f003 0308 	and.w	r3, r3, #8
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d016      	beq.n	800dc64 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	681b      	ldr	r3, [r3, #0]
 800dc3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	f022 0208 	bic.w	r2, r2, #8
 800dc44:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	2208      	movs	r2, #8
 800dc4c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	2201      	movs	r2, #1
 800dc52:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	2200      	movs	r2, #0
 800dc5a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800dc5e:	6878      	ldr	r0, [r7, #4]
 800dc60:	f000 f818 	bl	800dc94 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800dc64:	bf00      	nop
 800dc66:	3710      	adds	r7, #16
 800dc68:	46bd      	mov	sp, r7
 800dc6a:	bd80      	pop	{r7, pc}

0800dc6c <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800dc6c:	b480      	push	{r7}
 800dc6e:	b083      	sub	sp, #12
 800dc70:	af00      	add	r7, sp, #0
 800dc72:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800dc74:	bf00      	nop
 800dc76:	370c      	adds	r7, #12
 800dc78:	46bd      	mov	sp, r7
 800dc7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc7e:	4770      	bx	lr

0800dc80 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800dc80:	b480      	push	{r7}
 800dc82:	b083      	sub	sp, #12
 800dc84:	af00      	add	r7, sp, #0
 800dc86:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 800dc88:	bf00      	nop
 800dc8a:	370c      	adds	r7, #12
 800dc8c:	46bd      	mov	sp, r7
 800dc8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc92:	4770      	bx	lr

0800dc94 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800dc94:	b480      	push	{r7}
 800dc96:	b083      	sub	sp, #12
 800dc98:	af00      	add	r7, sp, #0
 800dc9a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800dc9c:	bf00      	nop
 800dc9e:	370c      	adds	r7, #12
 800dca0:	46bd      	mov	sp, r7
 800dca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dca6:	4770      	bx	lr

0800dca8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800dca8:	b5b0      	push	{r4, r5, r7, lr}
 800dcaa:	b084      	sub	sp, #16
 800dcac:	af00      	add	r7, sp, #0
 800dcae:	60f8      	str	r0, [r7, #12]
 800dcb0:	60b9      	str	r1, [r7, #8]
 800dcb2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800dcba:	2b01      	cmp	r3, #1
 800dcbc:	d101      	bne.n	800dcc2 <HAL_LTDC_ConfigLayer+0x1a>
 800dcbe:	2302      	movs	r3, #2
 800dcc0:	e02c      	b.n	800dd1c <HAL_LTDC_ConfigLayer+0x74>
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	2201      	movs	r2, #1
 800dcc6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	2202      	movs	r2, #2
 800dcce:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800dcd2:	68fa      	ldr	r2, [r7, #12]
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	2134      	movs	r1, #52	; 0x34
 800dcd8:	fb01 f303 	mul.w	r3, r1, r3
 800dcdc:	4413      	add	r3, r2
 800dcde:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800dce2:	68bb      	ldr	r3, [r7, #8]
 800dce4:	4614      	mov	r4, r2
 800dce6:	461d      	mov	r5, r3
 800dce8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dcea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dcec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dcee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dcf0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dcf2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dcf4:	682b      	ldr	r3, [r5, #0]
 800dcf6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800dcf8:	687a      	ldr	r2, [r7, #4]
 800dcfa:	68b9      	ldr	r1, [r7, #8]
 800dcfc:	68f8      	ldr	r0, [r7, #12]
 800dcfe:	f000 f811 	bl	800dd24 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	2201      	movs	r2, #1
 800dd08:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	2201      	movs	r2, #1
 800dd0e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	2200      	movs	r2, #0
 800dd16:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800dd1a:	2300      	movs	r3, #0
}
 800dd1c:	4618      	mov	r0, r3
 800dd1e:	3710      	adds	r7, #16
 800dd20:	46bd      	mov	sp, r7
 800dd22:	bdb0      	pop	{r4, r5, r7, pc}

0800dd24 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800dd24:	b480      	push	{r7}
 800dd26:	b089      	sub	sp, #36	; 0x24
 800dd28:	af00      	add	r7, sp, #0
 800dd2a:	60f8      	str	r0, [r7, #12]
 800dd2c:	60b9      	str	r1, [r7, #8]
 800dd2e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800dd30:	68bb      	ldr	r3, [r7, #8]
 800dd32:	685a      	ldr	r2, [r3, #4]
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	68db      	ldr	r3, [r3, #12]
 800dd3a:	0c1b      	lsrs	r3, r3, #16
 800dd3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800dd40:	4413      	add	r3, r2
 800dd42:	041b      	lsls	r3, r3, #16
 800dd44:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800dd46:	68fb      	ldr	r3, [r7, #12]
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	461a      	mov	r2, r3
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	01db      	lsls	r3, r3, #7
 800dd50:	4413      	add	r3, r2
 800dd52:	3384      	adds	r3, #132	; 0x84
 800dd54:	685b      	ldr	r3, [r3, #4]
 800dd56:	68fa      	ldr	r2, [r7, #12]
 800dd58:	6812      	ldr	r2, [r2, #0]
 800dd5a:	4611      	mov	r1, r2
 800dd5c:	687a      	ldr	r2, [r7, #4]
 800dd5e:	01d2      	lsls	r2, r2, #7
 800dd60:	440a      	add	r2, r1
 800dd62:	3284      	adds	r2, #132	; 0x84
 800dd64:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800dd68:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800dd6a:	68bb      	ldr	r3, [r7, #8]
 800dd6c:	681a      	ldr	r2, [r3, #0]
 800dd6e:	68fb      	ldr	r3, [r7, #12]
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	68db      	ldr	r3, [r3, #12]
 800dd74:	0c1b      	lsrs	r3, r3, #16
 800dd76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800dd7a:	4413      	add	r3, r2
 800dd7c:	1c5a      	adds	r2, r3, #1
 800dd7e:	68fb      	ldr	r3, [r7, #12]
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	4619      	mov	r1, r3
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	01db      	lsls	r3, r3, #7
 800dd88:	440b      	add	r3, r1
 800dd8a:	3384      	adds	r3, #132	; 0x84
 800dd8c:	4619      	mov	r1, r3
 800dd8e:	69fb      	ldr	r3, [r7, #28]
 800dd90:	4313      	orrs	r3, r2
 800dd92:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800dd94:	68bb      	ldr	r3, [r7, #8]
 800dd96:	68da      	ldr	r2, [r3, #12]
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	68db      	ldr	r3, [r3, #12]
 800dd9e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800dda2:	4413      	add	r3, r2
 800dda4:	041b      	lsls	r3, r3, #16
 800dda6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	461a      	mov	r2, r3
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	01db      	lsls	r3, r3, #7
 800ddb2:	4413      	add	r3, r2
 800ddb4:	3384      	adds	r3, #132	; 0x84
 800ddb6:	689b      	ldr	r3, [r3, #8]
 800ddb8:	68fa      	ldr	r2, [r7, #12]
 800ddba:	6812      	ldr	r2, [r2, #0]
 800ddbc:	4611      	mov	r1, r2
 800ddbe:	687a      	ldr	r2, [r7, #4]
 800ddc0:	01d2      	lsls	r2, r2, #7
 800ddc2:	440a      	add	r2, r1
 800ddc4:	3284      	adds	r2, #132	; 0x84
 800ddc6:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800ddca:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800ddcc:	68bb      	ldr	r3, [r7, #8]
 800ddce:	689a      	ldr	r2, [r3, #8]
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	68db      	ldr	r3, [r3, #12]
 800ddd6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ddda:	4413      	add	r3, r2
 800dddc:	1c5a      	adds	r2, r3, #1
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	4619      	mov	r1, r3
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	01db      	lsls	r3, r3, #7
 800dde8:	440b      	add	r3, r1
 800ddea:	3384      	adds	r3, #132	; 0x84
 800ddec:	4619      	mov	r1, r3
 800ddee:	69fb      	ldr	r3, [r7, #28]
 800ddf0:	4313      	orrs	r3, r2
 800ddf2:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	461a      	mov	r2, r3
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	01db      	lsls	r3, r3, #7
 800ddfe:	4413      	add	r3, r2
 800de00:	3384      	adds	r3, #132	; 0x84
 800de02:	691b      	ldr	r3, [r3, #16]
 800de04:	68fa      	ldr	r2, [r7, #12]
 800de06:	6812      	ldr	r2, [r2, #0]
 800de08:	4611      	mov	r1, r2
 800de0a:	687a      	ldr	r2, [r7, #4]
 800de0c:	01d2      	lsls	r2, r2, #7
 800de0e:	440a      	add	r2, r1
 800de10:	3284      	adds	r2, #132	; 0x84
 800de12:	f023 0307 	bic.w	r3, r3, #7
 800de16:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	461a      	mov	r2, r3
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	01db      	lsls	r3, r3, #7
 800de22:	4413      	add	r3, r2
 800de24:	3384      	adds	r3, #132	; 0x84
 800de26:	461a      	mov	r2, r3
 800de28:	68bb      	ldr	r3, [r7, #8]
 800de2a:	691b      	ldr	r3, [r3, #16]
 800de2c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800de2e:	68bb      	ldr	r3, [r7, #8]
 800de30:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800de34:	021b      	lsls	r3, r3, #8
 800de36:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800de38:	68bb      	ldr	r3, [r7, #8]
 800de3a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800de3e:	041b      	lsls	r3, r3, #16
 800de40:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800de42:	68bb      	ldr	r3, [r7, #8]
 800de44:	699b      	ldr	r3, [r3, #24]
 800de46:	061b      	lsls	r3, r3, #24
 800de48:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800de4a:	68fb      	ldr	r3, [r7, #12]
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	461a      	mov	r2, r3
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	01db      	lsls	r3, r3, #7
 800de54:	4413      	add	r3, r2
 800de56:	3384      	adds	r3, #132	; 0x84
 800de58:	699b      	ldr	r3, [r3, #24]
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	461a      	mov	r2, r3
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	01db      	lsls	r3, r3, #7
 800de64:	4413      	add	r3, r2
 800de66:	3384      	adds	r3, #132	; 0x84
 800de68:	461a      	mov	r2, r3
 800de6a:	2300      	movs	r3, #0
 800de6c:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800de6e:	68bb      	ldr	r3, [r7, #8]
 800de70:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800de74:	461a      	mov	r2, r3
 800de76:	69fb      	ldr	r3, [r7, #28]
 800de78:	431a      	orrs	r2, r3
 800de7a:	69bb      	ldr	r3, [r7, #24]
 800de7c:	431a      	orrs	r2, r3
 800de7e:	68fb      	ldr	r3, [r7, #12]
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	4619      	mov	r1, r3
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	01db      	lsls	r3, r3, #7
 800de88:	440b      	add	r3, r1
 800de8a:	3384      	adds	r3, #132	; 0x84
 800de8c:	4619      	mov	r1, r3
 800de8e:	697b      	ldr	r3, [r7, #20]
 800de90:	4313      	orrs	r3, r2
 800de92:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	461a      	mov	r2, r3
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	01db      	lsls	r3, r3, #7
 800de9e:	4413      	add	r3, r2
 800dea0:	3384      	adds	r3, #132	; 0x84
 800dea2:	695b      	ldr	r3, [r3, #20]
 800dea4:	68fa      	ldr	r2, [r7, #12]
 800dea6:	6812      	ldr	r2, [r2, #0]
 800dea8:	4611      	mov	r1, r2
 800deaa:	687a      	ldr	r2, [r7, #4]
 800deac:	01d2      	lsls	r2, r2, #7
 800deae:	440a      	add	r2, r1
 800deb0:	3284      	adds	r2, #132	; 0x84
 800deb2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800deb6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	461a      	mov	r2, r3
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	01db      	lsls	r3, r3, #7
 800dec2:	4413      	add	r3, r2
 800dec4:	3384      	adds	r3, #132	; 0x84
 800dec6:	461a      	mov	r2, r3
 800dec8:	68bb      	ldr	r3, [r7, #8]
 800deca:	695b      	ldr	r3, [r3, #20]
 800decc:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	681b      	ldr	r3, [r3, #0]
 800ded2:	461a      	mov	r2, r3
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	01db      	lsls	r3, r3, #7
 800ded8:	4413      	add	r3, r2
 800deda:	3384      	adds	r3, #132	; 0x84
 800dedc:	69db      	ldr	r3, [r3, #28]
 800dede:	68fa      	ldr	r2, [r7, #12]
 800dee0:	6812      	ldr	r2, [r2, #0]
 800dee2:	4611      	mov	r1, r2
 800dee4:	687a      	ldr	r2, [r7, #4]
 800dee6:	01d2      	lsls	r2, r2, #7
 800dee8:	440a      	add	r2, r1
 800deea:	3284      	adds	r2, #132	; 0x84
 800deec:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800def0:	f023 0307 	bic.w	r3, r3, #7
 800def4:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800def6:	68bb      	ldr	r3, [r7, #8]
 800def8:	69da      	ldr	r2, [r3, #28]
 800defa:	68bb      	ldr	r3, [r7, #8]
 800defc:	6a1b      	ldr	r3, [r3, #32]
 800defe:	68f9      	ldr	r1, [r7, #12]
 800df00:	6809      	ldr	r1, [r1, #0]
 800df02:	4608      	mov	r0, r1
 800df04:	6879      	ldr	r1, [r7, #4]
 800df06:	01c9      	lsls	r1, r1, #7
 800df08:	4401      	add	r1, r0
 800df0a:	3184      	adds	r1, #132	; 0x84
 800df0c:	4313      	orrs	r3, r2
 800df0e:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	461a      	mov	r2, r3
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	01db      	lsls	r3, r3, #7
 800df1a:	4413      	add	r3, r2
 800df1c:	3384      	adds	r3, #132	; 0x84
 800df1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	461a      	mov	r2, r3
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	01db      	lsls	r3, r3, #7
 800df2a:	4413      	add	r3, r2
 800df2c:	3384      	adds	r3, #132	; 0x84
 800df2e:	461a      	mov	r2, r3
 800df30:	2300      	movs	r3, #0
 800df32:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	461a      	mov	r2, r3
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	01db      	lsls	r3, r3, #7
 800df3e:	4413      	add	r3, r2
 800df40:	3384      	adds	r3, #132	; 0x84
 800df42:	461a      	mov	r2, r3
 800df44:	68bb      	ldr	r3, [r7, #8]
 800df46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df48:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800df4a:	68bb      	ldr	r3, [r7, #8]
 800df4c:	691b      	ldr	r3, [r3, #16]
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d102      	bne.n	800df58 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 800df52:	2304      	movs	r3, #4
 800df54:	61fb      	str	r3, [r7, #28]
 800df56:	e01b      	b.n	800df90 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800df58:	68bb      	ldr	r3, [r7, #8]
 800df5a:	691b      	ldr	r3, [r3, #16]
 800df5c:	2b01      	cmp	r3, #1
 800df5e:	d102      	bne.n	800df66 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 800df60:	2303      	movs	r3, #3
 800df62:	61fb      	str	r3, [r7, #28]
 800df64:	e014      	b.n	800df90 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800df66:	68bb      	ldr	r3, [r7, #8]
 800df68:	691b      	ldr	r3, [r3, #16]
 800df6a:	2b04      	cmp	r3, #4
 800df6c:	d00b      	beq.n	800df86 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800df6e:	68bb      	ldr	r3, [r7, #8]
 800df70:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800df72:	2b02      	cmp	r3, #2
 800df74:	d007      	beq.n	800df86 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800df76:	68bb      	ldr	r3, [r7, #8]
 800df78:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800df7a:	2b03      	cmp	r3, #3
 800df7c:	d003      	beq.n	800df86 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800df7e:	68bb      	ldr	r3, [r7, #8]
 800df80:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800df82:	2b07      	cmp	r3, #7
 800df84:	d102      	bne.n	800df8c <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 800df86:	2302      	movs	r3, #2
 800df88:	61fb      	str	r3, [r7, #28]
 800df8a:	e001      	b.n	800df90 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 800df8c:	2301      	movs	r3, #1
 800df8e:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	461a      	mov	r2, r3
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	01db      	lsls	r3, r3, #7
 800df9a:	4413      	add	r3, r2
 800df9c:	3384      	adds	r3, #132	; 0x84
 800df9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfa0:	68fa      	ldr	r2, [r7, #12]
 800dfa2:	6812      	ldr	r2, [r2, #0]
 800dfa4:	4611      	mov	r1, r2
 800dfa6:	687a      	ldr	r2, [r7, #4]
 800dfa8:	01d2      	lsls	r2, r2, #7
 800dfaa:	440a      	add	r2, r1
 800dfac:	3284      	adds	r2, #132	; 0x84
 800dfae:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800dfb2:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800dfb4:	68bb      	ldr	r3, [r7, #8]
 800dfb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dfb8:	69fa      	ldr	r2, [r7, #28]
 800dfba:	fb02 f303 	mul.w	r3, r2, r3
 800dfbe:	041a      	lsls	r2, r3, #16
 800dfc0:	68bb      	ldr	r3, [r7, #8]
 800dfc2:	6859      	ldr	r1, [r3, #4]
 800dfc4:	68bb      	ldr	r3, [r7, #8]
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	1acb      	subs	r3, r1, r3
 800dfca:	69f9      	ldr	r1, [r7, #28]
 800dfcc:	fb01 f303 	mul.w	r3, r1, r3
 800dfd0:	3303      	adds	r3, #3
 800dfd2:	68f9      	ldr	r1, [r7, #12]
 800dfd4:	6809      	ldr	r1, [r1, #0]
 800dfd6:	4608      	mov	r0, r1
 800dfd8:	6879      	ldr	r1, [r7, #4]
 800dfda:	01c9      	lsls	r1, r1, #7
 800dfdc:	4401      	add	r1, r0
 800dfde:	3184      	adds	r1, #132	; 0x84
 800dfe0:	4313      	orrs	r3, r2
 800dfe2:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	461a      	mov	r2, r3
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	01db      	lsls	r3, r3, #7
 800dfee:	4413      	add	r3, r2
 800dff0:	3384      	adds	r3, #132	; 0x84
 800dff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dff4:	68fa      	ldr	r2, [r7, #12]
 800dff6:	6812      	ldr	r2, [r2, #0]
 800dff8:	4611      	mov	r1, r2
 800dffa:	687a      	ldr	r2, [r7, #4]
 800dffc:	01d2      	lsls	r2, r2, #7
 800dffe:	440a      	add	r2, r1
 800e000:	3284      	adds	r2, #132	; 0x84
 800e002:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800e006:	f023 0307 	bic.w	r3, r3, #7
 800e00a:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	461a      	mov	r2, r3
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	01db      	lsls	r3, r3, #7
 800e016:	4413      	add	r3, r2
 800e018:	3384      	adds	r3, #132	; 0x84
 800e01a:	461a      	mov	r2, r3
 800e01c:	68bb      	ldr	r3, [r7, #8]
 800e01e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e020:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	461a      	mov	r2, r3
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	01db      	lsls	r3, r3, #7
 800e02c:	4413      	add	r3, r2
 800e02e:	3384      	adds	r3, #132	; 0x84
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	68fa      	ldr	r2, [r7, #12]
 800e034:	6812      	ldr	r2, [r2, #0]
 800e036:	4611      	mov	r1, r2
 800e038:	687a      	ldr	r2, [r7, #4]
 800e03a:	01d2      	lsls	r2, r2, #7
 800e03c:	440a      	add	r2, r1
 800e03e:	3284      	adds	r2, #132	; 0x84
 800e040:	f043 0301 	orr.w	r3, r3, #1
 800e044:	6013      	str	r3, [r2, #0]
}
 800e046:	bf00      	nop
 800e048:	3724      	adds	r7, #36	; 0x24
 800e04a:	46bd      	mov	sp, r7
 800e04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e050:	4770      	bx	lr
	...

0800e054 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800e054:	b580      	push	{r7, lr}
 800e056:	b082      	sub	sp, #8
 800e058:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800e05a:	2300      	movs	r3, #0
 800e05c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800e05e:	2300      	movs	r3, #0
 800e060:	603b      	str	r3, [r7, #0]
 800e062:	4b20      	ldr	r3, [pc, #128]	; (800e0e4 <HAL_PWREx_EnableOverDrive+0x90>)
 800e064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e066:	4a1f      	ldr	r2, [pc, #124]	; (800e0e4 <HAL_PWREx_EnableOverDrive+0x90>)
 800e068:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e06c:	6413      	str	r3, [r2, #64]	; 0x40
 800e06e:	4b1d      	ldr	r3, [pc, #116]	; (800e0e4 <HAL_PWREx_EnableOverDrive+0x90>)
 800e070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e072:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e076:	603b      	str	r3, [r7, #0]
 800e078:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800e07a:	4b1b      	ldr	r3, [pc, #108]	; (800e0e8 <HAL_PWREx_EnableOverDrive+0x94>)
 800e07c:	2201      	movs	r2, #1
 800e07e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800e080:	f7fc f870 	bl	800a164 <HAL_GetTick>
 800e084:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800e086:	e009      	b.n	800e09c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800e088:	f7fc f86c 	bl	800a164 <HAL_GetTick>
 800e08c:	4602      	mov	r2, r0
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	1ad3      	subs	r3, r2, r3
 800e092:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e096:	d901      	bls.n	800e09c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800e098:	2303      	movs	r3, #3
 800e09a:	e01f      	b.n	800e0dc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800e09c:	4b13      	ldr	r3, [pc, #76]	; (800e0ec <HAL_PWREx_EnableOverDrive+0x98>)
 800e09e:	685b      	ldr	r3, [r3, #4]
 800e0a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e0a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e0a8:	d1ee      	bne.n	800e088 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800e0aa:	4b11      	ldr	r3, [pc, #68]	; (800e0f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800e0ac:	2201      	movs	r2, #1
 800e0ae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800e0b0:	f7fc f858 	bl	800a164 <HAL_GetTick>
 800e0b4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800e0b6:	e009      	b.n	800e0cc <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800e0b8:	f7fc f854 	bl	800a164 <HAL_GetTick>
 800e0bc:	4602      	mov	r2, r0
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	1ad3      	subs	r3, r2, r3
 800e0c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e0c6:	d901      	bls.n	800e0cc <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800e0c8:	2303      	movs	r3, #3
 800e0ca:	e007      	b.n	800e0dc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800e0cc:	4b07      	ldr	r3, [pc, #28]	; (800e0ec <HAL_PWREx_EnableOverDrive+0x98>)
 800e0ce:	685b      	ldr	r3, [r3, #4]
 800e0d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e0d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e0d8:	d1ee      	bne.n	800e0b8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800e0da:	2300      	movs	r3, #0
}
 800e0dc:	4618      	mov	r0, r3
 800e0de:	3708      	adds	r7, #8
 800e0e0:	46bd      	mov	sp, r7
 800e0e2:	bd80      	pop	{r7, pc}
 800e0e4:	40023800 	.word	0x40023800
 800e0e8:	420e0040 	.word	0x420e0040
 800e0ec:	40007000 	.word	0x40007000
 800e0f0:	420e0044 	.word	0x420e0044

0800e0f4 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800e0f4:	b580      	push	{r7, lr}
 800e0f6:	b086      	sub	sp, #24
 800e0f8:	af02      	add	r7, sp, #8
 800e0fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800e0fc:	f7fc f832 	bl	800a164 <HAL_GetTick>
 800e100:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	2b00      	cmp	r3, #0
 800e106:	d101      	bne.n	800e10c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800e108:	2301      	movs	r3, #1
 800e10a:	e069      	b.n	800e1e0 <HAL_QSPI_Init+0xec>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e112:	b2db      	uxtb	r3, r3
 800e114:	2b00      	cmp	r3, #0
 800e116:	d10b      	bne.n	800e130 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	2200      	movs	r2, #0
 800e11c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800e120:	6878      	ldr	r0, [r7, #4]
 800e122:	f7f3 f923 	bl	800136c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800e126:	f241 3188 	movw	r1, #5000	; 0x1388
 800e12a:	6878      	ldr	r0, [r7, #4]
 800e12c:	f000 f85e 	bl	800e1ec <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	689b      	ldr	r3, [r3, #8]
 800e13e:	3b01      	subs	r3, #1
 800e140:	021a      	lsls	r2, r3, #8
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	430a      	orrs	r2, r1
 800e148:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e14e:	9300      	str	r3, [sp, #0]
 800e150:	68fb      	ldr	r3, [r7, #12]
 800e152:	2200      	movs	r2, #0
 800e154:	2120      	movs	r1, #32
 800e156:	6878      	ldr	r0, [r7, #4]
 800e158:	f000 f856 	bl	800e208 <QSPI_WaitFlagStateUntilTimeout>
 800e15c:	4603      	mov	r3, r0
 800e15e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800e160:	7afb      	ldrb	r3, [r7, #11]
 800e162:	2b00      	cmp	r3, #0
 800e164:	d137      	bne.n	800e1d6 <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800e170:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 800e174:	687a      	ldr	r2, [r7, #4]
 800e176:	6852      	ldr	r2, [r2, #4]
 800e178:	0611      	lsls	r1, r2, #24
 800e17a:	687a      	ldr	r2, [r7, #4]
 800e17c:	68d2      	ldr	r2, [r2, #12]
 800e17e:	4311      	orrs	r1, r2
 800e180:	687a      	ldr	r2, [r7, #4]
 800e182:	69d2      	ldr	r2, [r2, #28]
 800e184:	4311      	orrs	r1, r2
 800e186:	687a      	ldr	r2, [r7, #4]
 800e188:	6a12      	ldr	r2, [r2, #32]
 800e18a:	4311      	orrs	r1, r2
 800e18c:	687a      	ldr	r2, [r7, #4]
 800e18e:	6812      	ldr	r2, [r2, #0]
 800e190:	430b      	orrs	r3, r1
 800e192:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	685a      	ldr	r2, [r3, #4]
 800e19a:	4b13      	ldr	r3, [pc, #76]	; (800e1e8 <HAL_QSPI_Init+0xf4>)
 800e19c:	4013      	ands	r3, r2
 800e19e:	687a      	ldr	r2, [r7, #4]
 800e1a0:	6912      	ldr	r2, [r2, #16]
 800e1a2:	0411      	lsls	r1, r2, #16
 800e1a4:	687a      	ldr	r2, [r7, #4]
 800e1a6:	6952      	ldr	r2, [r2, #20]
 800e1a8:	4311      	orrs	r1, r2
 800e1aa:	687a      	ldr	r2, [r7, #4]
 800e1ac:	6992      	ldr	r2, [r2, #24]
 800e1ae:	4311      	orrs	r1, r2
 800e1b0:	687a      	ldr	r2, [r7, #4]
 800e1b2:	6812      	ldr	r2, [r2, #0]
 800e1b4:	430b      	orrs	r3, r1
 800e1b6:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	681b      	ldr	r3, [r3, #0]
 800e1bc:	681a      	ldr	r2, [r3, #0]
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	681b      	ldr	r3, [r3, #0]
 800e1c2:	f042 0201 	orr.w	r2, r2, #1
 800e1c6:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	2200      	movs	r2, #0
 800e1cc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	2201      	movs	r2, #1
 800e1d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	2200      	movs	r2, #0
 800e1da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800e1de:	7afb      	ldrb	r3, [r7, #11]
}
 800e1e0:	4618      	mov	r0, r3
 800e1e2:	3710      	adds	r7, #16
 800e1e4:	46bd      	mov	sp, r7
 800e1e6:	bd80      	pop	{r7, pc}
 800e1e8:	ffe0f8fe 	.word	0xffe0f8fe

0800e1ec <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800e1ec:	b480      	push	{r7}
 800e1ee:	b083      	sub	sp, #12
 800e1f0:	af00      	add	r7, sp, #0
 800e1f2:	6078      	str	r0, [r7, #4]
 800e1f4:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	683a      	ldr	r2, [r7, #0]
 800e1fa:	649a      	str	r2, [r3, #72]	; 0x48
}
 800e1fc:	bf00      	nop
 800e1fe:	370c      	adds	r7, #12
 800e200:	46bd      	mov	sp, r7
 800e202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e206:	4770      	bx	lr

0800e208 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800e208:	b580      	push	{r7, lr}
 800e20a:	b084      	sub	sp, #16
 800e20c:	af00      	add	r7, sp, #0
 800e20e:	60f8      	str	r0, [r7, #12]
 800e210:	60b9      	str	r1, [r7, #8]
 800e212:	603b      	str	r3, [r7, #0]
 800e214:	4613      	mov	r3, r2
 800e216:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800e218:	e01a      	b.n	800e250 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e21a:	69bb      	ldr	r3, [r7, #24]
 800e21c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e220:	d016      	beq.n	800e250 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e222:	f7fb ff9f 	bl	800a164 <HAL_GetTick>
 800e226:	4602      	mov	r2, r0
 800e228:	683b      	ldr	r3, [r7, #0]
 800e22a:	1ad3      	subs	r3, r2, r3
 800e22c:	69ba      	ldr	r2, [r7, #24]
 800e22e:	429a      	cmp	r2, r3
 800e230:	d302      	bcc.n	800e238 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800e232:	69bb      	ldr	r3, [r7, #24]
 800e234:	2b00      	cmp	r3, #0
 800e236:	d10b      	bne.n	800e250 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	2204      	movs	r2, #4
 800e23c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e244:	f043 0201 	orr.w	r2, r3, #1
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 800e24c:	2301      	movs	r3, #1
 800e24e:	e00e      	b.n	800e26e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800e250:	68fb      	ldr	r3, [r7, #12]
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	689a      	ldr	r2, [r3, #8]
 800e256:	68bb      	ldr	r3, [r7, #8]
 800e258:	4013      	ands	r3, r2
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	bf14      	ite	ne
 800e25e:	2301      	movne	r3, #1
 800e260:	2300      	moveq	r3, #0
 800e262:	b2db      	uxtb	r3, r3
 800e264:	461a      	mov	r2, r3
 800e266:	79fb      	ldrb	r3, [r7, #7]
 800e268:	429a      	cmp	r2, r3
 800e26a:	d1d6      	bne.n	800e21a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800e26c:	2300      	movs	r3, #0
}
 800e26e:	4618      	mov	r0, r3
 800e270:	3710      	adds	r7, #16
 800e272:	46bd      	mov	sp, r7
 800e274:	bd80      	pop	{r7, pc}
	...

0800e278 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800e278:	b580      	push	{r7, lr}
 800e27a:	b084      	sub	sp, #16
 800e27c:	af00      	add	r7, sp, #0
 800e27e:	6078      	str	r0, [r7, #4]
 800e280:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	2b00      	cmp	r3, #0
 800e286:	d101      	bne.n	800e28c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800e288:	2301      	movs	r3, #1
 800e28a:	e0cc      	b.n	800e426 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800e28c:	4b68      	ldr	r3, [pc, #416]	; (800e430 <HAL_RCC_ClockConfig+0x1b8>)
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	f003 030f 	and.w	r3, r3, #15
 800e294:	683a      	ldr	r2, [r7, #0]
 800e296:	429a      	cmp	r2, r3
 800e298:	d90c      	bls.n	800e2b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e29a:	4b65      	ldr	r3, [pc, #404]	; (800e430 <HAL_RCC_ClockConfig+0x1b8>)
 800e29c:	683a      	ldr	r2, [r7, #0]
 800e29e:	b2d2      	uxtb	r2, r2
 800e2a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800e2a2:	4b63      	ldr	r3, [pc, #396]	; (800e430 <HAL_RCC_ClockConfig+0x1b8>)
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	f003 030f 	and.w	r3, r3, #15
 800e2aa:	683a      	ldr	r2, [r7, #0]
 800e2ac:	429a      	cmp	r2, r3
 800e2ae:	d001      	beq.n	800e2b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800e2b0:	2301      	movs	r3, #1
 800e2b2:	e0b8      	b.n	800e426 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	f003 0302 	and.w	r3, r3, #2
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d020      	beq.n	800e302 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	f003 0304 	and.w	r3, r3, #4
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d005      	beq.n	800e2d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800e2cc:	4b59      	ldr	r3, [pc, #356]	; (800e434 <HAL_RCC_ClockConfig+0x1bc>)
 800e2ce:	689b      	ldr	r3, [r3, #8]
 800e2d0:	4a58      	ldr	r2, [pc, #352]	; (800e434 <HAL_RCC_ClockConfig+0x1bc>)
 800e2d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800e2d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	f003 0308 	and.w	r3, r3, #8
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d005      	beq.n	800e2f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800e2e4:	4b53      	ldr	r3, [pc, #332]	; (800e434 <HAL_RCC_ClockConfig+0x1bc>)
 800e2e6:	689b      	ldr	r3, [r3, #8]
 800e2e8:	4a52      	ldr	r2, [pc, #328]	; (800e434 <HAL_RCC_ClockConfig+0x1bc>)
 800e2ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800e2ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800e2f0:	4b50      	ldr	r3, [pc, #320]	; (800e434 <HAL_RCC_ClockConfig+0x1bc>)
 800e2f2:	689b      	ldr	r3, [r3, #8]
 800e2f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	689b      	ldr	r3, [r3, #8]
 800e2fc:	494d      	ldr	r1, [pc, #308]	; (800e434 <HAL_RCC_ClockConfig+0x1bc>)
 800e2fe:	4313      	orrs	r3, r2
 800e300:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	681b      	ldr	r3, [r3, #0]
 800e306:	f003 0301 	and.w	r3, r3, #1
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d044      	beq.n	800e398 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	685b      	ldr	r3, [r3, #4]
 800e312:	2b01      	cmp	r3, #1
 800e314:	d107      	bne.n	800e326 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e316:	4b47      	ldr	r3, [pc, #284]	; (800e434 <HAL_RCC_ClockConfig+0x1bc>)
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d119      	bne.n	800e356 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800e322:	2301      	movs	r3, #1
 800e324:	e07f      	b.n	800e426 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	685b      	ldr	r3, [r3, #4]
 800e32a:	2b02      	cmp	r3, #2
 800e32c:	d003      	beq.n	800e336 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800e332:	2b03      	cmp	r3, #3
 800e334:	d107      	bne.n	800e346 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800e336:	4b3f      	ldr	r3, [pc, #252]	; (800e434 <HAL_RCC_ClockConfig+0x1bc>)
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d109      	bne.n	800e356 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800e342:	2301      	movs	r3, #1
 800e344:	e06f      	b.n	800e426 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e346:	4b3b      	ldr	r3, [pc, #236]	; (800e434 <HAL_RCC_ClockConfig+0x1bc>)
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	f003 0302 	and.w	r3, r3, #2
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d101      	bne.n	800e356 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800e352:	2301      	movs	r3, #1
 800e354:	e067      	b.n	800e426 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800e356:	4b37      	ldr	r3, [pc, #220]	; (800e434 <HAL_RCC_ClockConfig+0x1bc>)
 800e358:	689b      	ldr	r3, [r3, #8]
 800e35a:	f023 0203 	bic.w	r2, r3, #3
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	685b      	ldr	r3, [r3, #4]
 800e362:	4934      	ldr	r1, [pc, #208]	; (800e434 <HAL_RCC_ClockConfig+0x1bc>)
 800e364:	4313      	orrs	r3, r2
 800e366:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800e368:	f7fb fefc 	bl	800a164 <HAL_GetTick>
 800e36c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e36e:	e00a      	b.n	800e386 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800e370:	f7fb fef8 	bl	800a164 <HAL_GetTick>
 800e374:	4602      	mov	r2, r0
 800e376:	68fb      	ldr	r3, [r7, #12]
 800e378:	1ad3      	subs	r3, r2, r3
 800e37a:	f241 3288 	movw	r2, #5000	; 0x1388
 800e37e:	4293      	cmp	r3, r2
 800e380:	d901      	bls.n	800e386 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800e382:	2303      	movs	r3, #3
 800e384:	e04f      	b.n	800e426 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e386:	4b2b      	ldr	r3, [pc, #172]	; (800e434 <HAL_RCC_ClockConfig+0x1bc>)
 800e388:	689b      	ldr	r3, [r3, #8]
 800e38a:	f003 020c 	and.w	r2, r3, #12
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	685b      	ldr	r3, [r3, #4]
 800e392:	009b      	lsls	r3, r3, #2
 800e394:	429a      	cmp	r2, r3
 800e396:	d1eb      	bne.n	800e370 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800e398:	4b25      	ldr	r3, [pc, #148]	; (800e430 <HAL_RCC_ClockConfig+0x1b8>)
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	f003 030f 	and.w	r3, r3, #15
 800e3a0:	683a      	ldr	r2, [r7, #0]
 800e3a2:	429a      	cmp	r2, r3
 800e3a4:	d20c      	bcs.n	800e3c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e3a6:	4b22      	ldr	r3, [pc, #136]	; (800e430 <HAL_RCC_ClockConfig+0x1b8>)
 800e3a8:	683a      	ldr	r2, [r7, #0]
 800e3aa:	b2d2      	uxtb	r2, r2
 800e3ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800e3ae:	4b20      	ldr	r3, [pc, #128]	; (800e430 <HAL_RCC_ClockConfig+0x1b8>)
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	f003 030f 	and.w	r3, r3, #15
 800e3b6:	683a      	ldr	r2, [r7, #0]
 800e3b8:	429a      	cmp	r2, r3
 800e3ba:	d001      	beq.n	800e3c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800e3bc:	2301      	movs	r3, #1
 800e3be:	e032      	b.n	800e426 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	f003 0304 	and.w	r3, r3, #4
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d008      	beq.n	800e3de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800e3cc:	4b19      	ldr	r3, [pc, #100]	; (800e434 <HAL_RCC_ClockConfig+0x1bc>)
 800e3ce:	689b      	ldr	r3, [r3, #8]
 800e3d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	68db      	ldr	r3, [r3, #12]
 800e3d8:	4916      	ldr	r1, [pc, #88]	; (800e434 <HAL_RCC_ClockConfig+0x1bc>)
 800e3da:	4313      	orrs	r3, r2
 800e3dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	f003 0308 	and.w	r3, r3, #8
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	d009      	beq.n	800e3fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800e3ea:	4b12      	ldr	r3, [pc, #72]	; (800e434 <HAL_RCC_ClockConfig+0x1bc>)
 800e3ec:	689b      	ldr	r3, [r3, #8]
 800e3ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	691b      	ldr	r3, [r3, #16]
 800e3f6:	00db      	lsls	r3, r3, #3
 800e3f8:	490e      	ldr	r1, [pc, #56]	; (800e434 <HAL_RCC_ClockConfig+0x1bc>)
 800e3fa:	4313      	orrs	r3, r2
 800e3fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800e3fe:	f000 f821 	bl	800e444 <HAL_RCC_GetSysClockFreq>
 800e402:	4601      	mov	r1, r0
 800e404:	4b0b      	ldr	r3, [pc, #44]	; (800e434 <HAL_RCC_ClockConfig+0x1bc>)
 800e406:	689b      	ldr	r3, [r3, #8]
 800e408:	091b      	lsrs	r3, r3, #4
 800e40a:	f003 030f 	and.w	r3, r3, #15
 800e40e:	4a0a      	ldr	r2, [pc, #40]	; (800e438 <HAL_RCC_ClockConfig+0x1c0>)
 800e410:	5cd3      	ldrb	r3, [r2, r3]
 800e412:	fa21 f303 	lsr.w	r3, r1, r3
 800e416:	4a09      	ldr	r2, [pc, #36]	; (800e43c <HAL_RCC_ClockConfig+0x1c4>)
 800e418:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800e41a:	4b09      	ldr	r3, [pc, #36]	; (800e440 <HAL_RCC_ClockConfig+0x1c8>)
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	4618      	mov	r0, r3
 800e420:	f7f3 f912 	bl	8001648 <HAL_InitTick>

  return HAL_OK;
 800e424:	2300      	movs	r3, #0
}
 800e426:	4618      	mov	r0, r3
 800e428:	3710      	adds	r7, #16
 800e42a:	46bd      	mov	sp, r7
 800e42c:	bd80      	pop	{r7, pc}
 800e42e:	bf00      	nop
 800e430:	40023c00 	.word	0x40023c00
 800e434:	40023800 	.word	0x40023800
 800e438:	08024d08 	.word	0x08024d08
 800e43c:	2000001c 	.word	0x2000001c
 800e440:	20000020 	.word	0x20000020

0800e444 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800e444:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e446:	b085      	sub	sp, #20
 800e448:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800e44a:	2300      	movs	r3, #0
 800e44c:	607b      	str	r3, [r7, #4]
 800e44e:	2300      	movs	r3, #0
 800e450:	60fb      	str	r3, [r7, #12]
 800e452:	2300      	movs	r3, #0
 800e454:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800e456:	2300      	movs	r3, #0
 800e458:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800e45a:	4b50      	ldr	r3, [pc, #320]	; (800e59c <HAL_RCC_GetSysClockFreq+0x158>)
 800e45c:	689b      	ldr	r3, [r3, #8]
 800e45e:	f003 030c 	and.w	r3, r3, #12
 800e462:	2b04      	cmp	r3, #4
 800e464:	d007      	beq.n	800e476 <HAL_RCC_GetSysClockFreq+0x32>
 800e466:	2b08      	cmp	r3, #8
 800e468:	d008      	beq.n	800e47c <HAL_RCC_GetSysClockFreq+0x38>
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	f040 808d 	bne.w	800e58a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800e470:	4b4b      	ldr	r3, [pc, #300]	; (800e5a0 <HAL_RCC_GetSysClockFreq+0x15c>)
 800e472:	60bb      	str	r3, [r7, #8]
       break;
 800e474:	e08c      	b.n	800e590 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800e476:	4b4b      	ldr	r3, [pc, #300]	; (800e5a4 <HAL_RCC_GetSysClockFreq+0x160>)
 800e478:	60bb      	str	r3, [r7, #8]
      break;
 800e47a:	e089      	b.n	800e590 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800e47c:	4b47      	ldr	r3, [pc, #284]	; (800e59c <HAL_RCC_GetSysClockFreq+0x158>)
 800e47e:	685b      	ldr	r3, [r3, #4]
 800e480:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e484:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800e486:	4b45      	ldr	r3, [pc, #276]	; (800e59c <HAL_RCC_GetSysClockFreq+0x158>)
 800e488:	685b      	ldr	r3, [r3, #4]
 800e48a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d023      	beq.n	800e4da <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800e492:	4b42      	ldr	r3, [pc, #264]	; (800e59c <HAL_RCC_GetSysClockFreq+0x158>)
 800e494:	685b      	ldr	r3, [r3, #4]
 800e496:	099b      	lsrs	r3, r3, #6
 800e498:	f04f 0400 	mov.w	r4, #0
 800e49c:	f240 11ff 	movw	r1, #511	; 0x1ff
 800e4a0:	f04f 0200 	mov.w	r2, #0
 800e4a4:	ea03 0501 	and.w	r5, r3, r1
 800e4a8:	ea04 0602 	and.w	r6, r4, r2
 800e4ac:	4a3d      	ldr	r2, [pc, #244]	; (800e5a4 <HAL_RCC_GetSysClockFreq+0x160>)
 800e4ae:	fb02 f106 	mul.w	r1, r2, r6
 800e4b2:	2200      	movs	r2, #0
 800e4b4:	fb02 f205 	mul.w	r2, r2, r5
 800e4b8:	440a      	add	r2, r1
 800e4ba:	493a      	ldr	r1, [pc, #232]	; (800e5a4 <HAL_RCC_GetSysClockFreq+0x160>)
 800e4bc:	fba5 0101 	umull	r0, r1, r5, r1
 800e4c0:	1853      	adds	r3, r2, r1
 800e4c2:	4619      	mov	r1, r3
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	f04f 0400 	mov.w	r4, #0
 800e4ca:	461a      	mov	r2, r3
 800e4cc:	4623      	mov	r3, r4
 800e4ce:	f7f1 fee7 	bl	80002a0 <__aeabi_uldivmod>
 800e4d2:	4603      	mov	r3, r0
 800e4d4:	460c      	mov	r4, r1
 800e4d6:	60fb      	str	r3, [r7, #12]
 800e4d8:	e049      	b.n	800e56e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800e4da:	4b30      	ldr	r3, [pc, #192]	; (800e59c <HAL_RCC_GetSysClockFreq+0x158>)
 800e4dc:	685b      	ldr	r3, [r3, #4]
 800e4de:	099b      	lsrs	r3, r3, #6
 800e4e0:	f04f 0400 	mov.w	r4, #0
 800e4e4:	f240 11ff 	movw	r1, #511	; 0x1ff
 800e4e8:	f04f 0200 	mov.w	r2, #0
 800e4ec:	ea03 0501 	and.w	r5, r3, r1
 800e4f0:	ea04 0602 	and.w	r6, r4, r2
 800e4f4:	4629      	mov	r1, r5
 800e4f6:	4632      	mov	r2, r6
 800e4f8:	f04f 0300 	mov.w	r3, #0
 800e4fc:	f04f 0400 	mov.w	r4, #0
 800e500:	0154      	lsls	r4, r2, #5
 800e502:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800e506:	014b      	lsls	r3, r1, #5
 800e508:	4619      	mov	r1, r3
 800e50a:	4622      	mov	r2, r4
 800e50c:	1b49      	subs	r1, r1, r5
 800e50e:	eb62 0206 	sbc.w	r2, r2, r6
 800e512:	f04f 0300 	mov.w	r3, #0
 800e516:	f04f 0400 	mov.w	r4, #0
 800e51a:	0194      	lsls	r4, r2, #6
 800e51c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800e520:	018b      	lsls	r3, r1, #6
 800e522:	1a5b      	subs	r3, r3, r1
 800e524:	eb64 0402 	sbc.w	r4, r4, r2
 800e528:	f04f 0100 	mov.w	r1, #0
 800e52c:	f04f 0200 	mov.w	r2, #0
 800e530:	00e2      	lsls	r2, r4, #3
 800e532:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800e536:	00d9      	lsls	r1, r3, #3
 800e538:	460b      	mov	r3, r1
 800e53a:	4614      	mov	r4, r2
 800e53c:	195b      	adds	r3, r3, r5
 800e53e:	eb44 0406 	adc.w	r4, r4, r6
 800e542:	f04f 0100 	mov.w	r1, #0
 800e546:	f04f 0200 	mov.w	r2, #0
 800e54a:	02a2      	lsls	r2, r4, #10
 800e54c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800e550:	0299      	lsls	r1, r3, #10
 800e552:	460b      	mov	r3, r1
 800e554:	4614      	mov	r4, r2
 800e556:	4618      	mov	r0, r3
 800e558:	4621      	mov	r1, r4
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	f04f 0400 	mov.w	r4, #0
 800e560:	461a      	mov	r2, r3
 800e562:	4623      	mov	r3, r4
 800e564:	f7f1 fe9c 	bl	80002a0 <__aeabi_uldivmod>
 800e568:	4603      	mov	r3, r0
 800e56a:	460c      	mov	r4, r1
 800e56c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800e56e:	4b0b      	ldr	r3, [pc, #44]	; (800e59c <HAL_RCC_GetSysClockFreq+0x158>)
 800e570:	685b      	ldr	r3, [r3, #4]
 800e572:	0c1b      	lsrs	r3, r3, #16
 800e574:	f003 0303 	and.w	r3, r3, #3
 800e578:	3301      	adds	r3, #1
 800e57a:	005b      	lsls	r3, r3, #1
 800e57c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800e57e:	68fa      	ldr	r2, [r7, #12]
 800e580:	683b      	ldr	r3, [r7, #0]
 800e582:	fbb2 f3f3 	udiv	r3, r2, r3
 800e586:	60bb      	str	r3, [r7, #8]
      break;
 800e588:	e002      	b.n	800e590 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800e58a:	4b05      	ldr	r3, [pc, #20]	; (800e5a0 <HAL_RCC_GetSysClockFreq+0x15c>)
 800e58c:	60bb      	str	r3, [r7, #8]
      break;
 800e58e:	bf00      	nop
    }
  }
  return sysclockfreq;
 800e590:	68bb      	ldr	r3, [r7, #8]
}
 800e592:	4618      	mov	r0, r3
 800e594:	3714      	adds	r7, #20
 800e596:	46bd      	mov	sp, r7
 800e598:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e59a:	bf00      	nop
 800e59c:	40023800 	.word	0x40023800
 800e5a0:	00f42400 	.word	0x00f42400
 800e5a4:	00989680 	.word	0x00989680

0800e5a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800e5a8:	b480      	push	{r7}
 800e5aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800e5ac:	4b03      	ldr	r3, [pc, #12]	; (800e5bc <HAL_RCC_GetHCLKFreq+0x14>)
 800e5ae:	681b      	ldr	r3, [r3, #0]
}
 800e5b0:	4618      	mov	r0, r3
 800e5b2:	46bd      	mov	sp, r7
 800e5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5b8:	4770      	bx	lr
 800e5ba:	bf00      	nop
 800e5bc:	2000001c 	.word	0x2000001c

0800e5c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800e5c0:	b580      	push	{r7, lr}
 800e5c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800e5c4:	f7ff fff0 	bl	800e5a8 <HAL_RCC_GetHCLKFreq>
 800e5c8:	4601      	mov	r1, r0
 800e5ca:	4b05      	ldr	r3, [pc, #20]	; (800e5e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800e5cc:	689b      	ldr	r3, [r3, #8]
 800e5ce:	0a9b      	lsrs	r3, r3, #10
 800e5d0:	f003 0307 	and.w	r3, r3, #7
 800e5d4:	4a03      	ldr	r2, [pc, #12]	; (800e5e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800e5d6:	5cd3      	ldrb	r3, [r2, r3]
 800e5d8:	fa21 f303 	lsr.w	r3, r1, r3
}
 800e5dc:	4618      	mov	r0, r3
 800e5de:	bd80      	pop	{r7, pc}
 800e5e0:	40023800 	.word	0x40023800
 800e5e4:	08024d18 	.word	0x08024d18

0800e5e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800e5e8:	b580      	push	{r7, lr}
 800e5ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800e5ec:	f7ff ffdc 	bl	800e5a8 <HAL_RCC_GetHCLKFreq>
 800e5f0:	4601      	mov	r1, r0
 800e5f2:	4b05      	ldr	r3, [pc, #20]	; (800e608 <HAL_RCC_GetPCLK2Freq+0x20>)
 800e5f4:	689b      	ldr	r3, [r3, #8]
 800e5f6:	0b5b      	lsrs	r3, r3, #13
 800e5f8:	f003 0307 	and.w	r3, r3, #7
 800e5fc:	4a03      	ldr	r2, [pc, #12]	; (800e60c <HAL_RCC_GetPCLK2Freq+0x24>)
 800e5fe:	5cd3      	ldrb	r3, [r2, r3]
 800e600:	fa21 f303 	lsr.w	r3, r1, r3
}
 800e604:	4618      	mov	r0, r3
 800e606:	bd80      	pop	{r7, pc}
 800e608:	40023800 	.word	0x40023800
 800e60c:	08024d18 	.word	0x08024d18

0800e610 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800e610:	b480      	push	{r7}
 800e612:	b083      	sub	sp, #12
 800e614:	af00      	add	r7, sp, #0
 800e616:	6078      	str	r0, [r7, #4]
 800e618:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	220f      	movs	r2, #15
 800e61e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800e620:	4b12      	ldr	r3, [pc, #72]	; (800e66c <HAL_RCC_GetClockConfig+0x5c>)
 800e622:	689b      	ldr	r3, [r3, #8]
 800e624:	f003 0203 	and.w	r2, r3, #3
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800e62c:	4b0f      	ldr	r3, [pc, #60]	; (800e66c <HAL_RCC_GetClockConfig+0x5c>)
 800e62e:	689b      	ldr	r3, [r3, #8]
 800e630:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800e638:	4b0c      	ldr	r3, [pc, #48]	; (800e66c <HAL_RCC_GetClockConfig+0x5c>)
 800e63a:	689b      	ldr	r3, [r3, #8]
 800e63c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800e644:	4b09      	ldr	r3, [pc, #36]	; (800e66c <HAL_RCC_GetClockConfig+0x5c>)
 800e646:	689b      	ldr	r3, [r3, #8]
 800e648:	08db      	lsrs	r3, r3, #3
 800e64a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800e652:	4b07      	ldr	r3, [pc, #28]	; (800e670 <HAL_RCC_GetClockConfig+0x60>)
 800e654:	681b      	ldr	r3, [r3, #0]
 800e656:	f003 020f 	and.w	r2, r3, #15
 800e65a:	683b      	ldr	r3, [r7, #0]
 800e65c:	601a      	str	r2, [r3, #0]
}
 800e65e:	bf00      	nop
 800e660:	370c      	adds	r7, #12
 800e662:	46bd      	mov	sp, r7
 800e664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e668:	4770      	bx	lr
 800e66a:	bf00      	nop
 800e66c:	40023800 	.word	0x40023800
 800e670:	40023c00 	.word	0x40023c00

0800e674 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800e674:	b580      	push	{r7, lr}
 800e676:	b088      	sub	sp, #32
 800e678:	af00      	add	r7, sp, #0
 800e67a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800e67c:	2300      	movs	r3, #0
 800e67e:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 800e680:	2300      	movs	r3, #0
 800e682:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 800e684:	2300      	movs	r3, #0
 800e686:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 800e688:	2300      	movs	r3, #0
 800e68a:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 800e68c:	2300      	movs	r3, #0
 800e68e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d00a      	beq.n	800e6b2 <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800e69c:	4b66      	ldr	r3, [pc, #408]	; (800e838 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800e69e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e6a2:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e6aa:	4963      	ldr	r1, [pc, #396]	; (800e838 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800e6ac:	4313      	orrs	r3, r2
 800e6ae:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d00a      	beq.n	800e6d4 <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800e6be:	4b5e      	ldr	r3, [pc, #376]	; (800e838 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800e6c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e6c4:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e6cc:	495a      	ldr	r1, [pc, #360]	; (800e838 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800e6ce:	4313      	orrs	r3, r2
 800e6d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	681b      	ldr	r3, [r3, #0]
 800e6d8:	f003 0301 	and.w	r3, r3, #1
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d10b      	bne.n	800e6f8 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	681b      	ldr	r3, [r3, #0]
 800e6e4:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	d105      	bne.n	800e6f8 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d075      	beq.n	800e7e4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800e6f8:	4b50      	ldr	r3, [pc, #320]	; (800e83c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800e6fa:	2200      	movs	r2, #0
 800e6fc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800e6fe:	f7fb fd31 	bl	800a164 <HAL_GetTick>
 800e702:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800e704:	e008      	b.n	800e718 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800e706:	f7fb fd2d 	bl	800a164 <HAL_GetTick>
 800e70a:	4602      	mov	r2, r0
 800e70c:	69fb      	ldr	r3, [r7, #28]
 800e70e:	1ad3      	subs	r3, r2, r3
 800e710:	2b02      	cmp	r3, #2
 800e712:	d901      	bls.n	800e718 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800e714:	2303      	movs	r3, #3
 800e716:	e1dc      	b.n	800ead2 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800e718:	4b47      	ldr	r3, [pc, #284]	; (800e838 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e720:	2b00      	cmp	r3, #0
 800e722:	d1f0      	bne.n	800e706 <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	681b      	ldr	r3, [r3, #0]
 800e728:	f003 0301 	and.w	r3, r3, #1
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d009      	beq.n	800e744 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	685b      	ldr	r3, [r3, #4]
 800e734:	019a      	lsls	r2, r3, #6
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	689b      	ldr	r3, [r3, #8]
 800e73a:	071b      	lsls	r3, r3, #28
 800e73c:	493e      	ldr	r1, [pc, #248]	; (800e838 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800e73e:	4313      	orrs	r3, r2
 800e740:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	f003 0302 	and.w	r3, r3, #2
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	d01f      	beq.n	800e790 <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800e750:	4b39      	ldr	r3, [pc, #228]	; (800e838 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800e752:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e756:	0f1b      	lsrs	r3, r3, #28
 800e758:	f003 0307 	and.w	r3, r3, #7
 800e75c:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	685b      	ldr	r3, [r3, #4]
 800e762:	019a      	lsls	r2, r3, #6
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	68db      	ldr	r3, [r3, #12]
 800e768:	061b      	lsls	r3, r3, #24
 800e76a:	431a      	orrs	r2, r3
 800e76c:	69bb      	ldr	r3, [r7, #24]
 800e76e:	071b      	lsls	r3, r3, #28
 800e770:	4931      	ldr	r1, [pc, #196]	; (800e838 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800e772:	4313      	orrs	r3, r2
 800e774:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800e778:	4b2f      	ldr	r3, [pc, #188]	; (800e838 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800e77a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e77e:	f023 021f 	bic.w	r2, r3, #31
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	6a1b      	ldr	r3, [r3, #32]
 800e786:	3b01      	subs	r3, #1
 800e788:	492b      	ldr	r1, [pc, #172]	; (800e838 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800e78a:	4313      	orrs	r3, r2
 800e78c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	681b      	ldr	r3, [r3, #0]
 800e794:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d00d      	beq.n	800e7b8 <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	685b      	ldr	r3, [r3, #4]
 800e7a0:	019a      	lsls	r2, r3, #6
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	68db      	ldr	r3, [r3, #12]
 800e7a6:	061b      	lsls	r3, r3, #24
 800e7a8:	431a      	orrs	r2, r3
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	689b      	ldr	r3, [r3, #8]
 800e7ae:	071b      	lsls	r3, r3, #28
 800e7b0:	4921      	ldr	r1, [pc, #132]	; (800e838 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800e7b2:	4313      	orrs	r3, r2
 800e7b4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800e7b8:	4b20      	ldr	r3, [pc, #128]	; (800e83c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800e7ba:	2201      	movs	r2, #1
 800e7bc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800e7be:	f7fb fcd1 	bl	800a164 <HAL_GetTick>
 800e7c2:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800e7c4:	e008      	b.n	800e7d8 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800e7c6:	f7fb fccd 	bl	800a164 <HAL_GetTick>
 800e7ca:	4602      	mov	r2, r0
 800e7cc:	69fb      	ldr	r3, [r7, #28]
 800e7ce:	1ad3      	subs	r3, r2, r3
 800e7d0:	2b02      	cmp	r3, #2
 800e7d2:	d901      	bls.n	800e7d8 <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800e7d4:	2303      	movs	r3, #3
 800e7d6:	e17c      	b.n	800ead2 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800e7d8:	4b17      	ldr	r3, [pc, #92]	; (800e838 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e7e0:	2b00      	cmp	r3, #0
 800e7e2:	d0f0      	beq.n	800e7c6 <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	f003 0304 	and.w	r3, r3, #4
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	d112      	bne.n	800e816 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	d10c      	bne.n	800e816 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	681b      	ldr	r3, [r3, #0]
 800e800:	f003 0380 	and.w	r3, r3, #128	; 0x80
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800e804:	2b00      	cmp	r3, #0
 800e806:	f000 80ce 	beq.w	800e9a6 <HAL_RCCEx_PeriphCLKConfig+0x332>
      (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800e80e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e812:	f040 80c8 	bne.w	800e9a6 <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800e816:	4b0a      	ldr	r3, [pc, #40]	; (800e840 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800e818:	2200      	movs	r2, #0
 800e81a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800e81c:	f7fb fca2 	bl	800a164 <HAL_GetTick>
 800e820:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800e822:	e00f      	b.n	800e844 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800e824:	f7fb fc9e 	bl	800a164 <HAL_GetTick>
 800e828:	4602      	mov	r2, r0
 800e82a:	69fb      	ldr	r3, [r7, #28]
 800e82c:	1ad3      	subs	r3, r2, r3
 800e82e:	2b02      	cmp	r3, #2
 800e830:	d908      	bls.n	800e844 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800e832:	2303      	movs	r3, #3
 800e834:	e14d      	b.n	800ead2 <HAL_RCCEx_PeriphCLKConfig+0x45e>
 800e836:	bf00      	nop
 800e838:	40023800 	.word	0x40023800
 800e83c:	42470068 	.word	0x42470068
 800e840:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800e844:	4ba5      	ldr	r3, [pc, #660]	; (800eadc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800e846:	681b      	ldr	r3, [r3, #0]
 800e848:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e84c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e850:	d0e8      	beq.n	800e824 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	f003 0304 	and.w	r3, r3, #4
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d02e      	beq.n	800e8bc <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800e85e:	4b9f      	ldr	r3, [pc, #636]	; (800eadc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800e860:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e864:	0c1b      	lsrs	r3, r3, #16
 800e866:	f003 0303 	and.w	r3, r3, #3
 800e86a:	3301      	adds	r3, #1
 800e86c:	005b      	lsls	r3, r3, #1
 800e86e:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800e870:	4b9a      	ldr	r3, [pc, #616]	; (800eadc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800e872:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e876:	0f1b      	lsrs	r3, r3, #28
 800e878:	f003 0307 	and.w	r3, r3, #7
 800e87c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	691b      	ldr	r3, [r3, #16]
 800e882:	019a      	lsls	r2, r3, #6
 800e884:	697b      	ldr	r3, [r7, #20]
 800e886:	085b      	lsrs	r3, r3, #1
 800e888:	3b01      	subs	r3, #1
 800e88a:	041b      	lsls	r3, r3, #16
 800e88c:	431a      	orrs	r2, r3
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	699b      	ldr	r3, [r3, #24]
 800e892:	061b      	lsls	r3, r3, #24
 800e894:	431a      	orrs	r2, r3
 800e896:	68fb      	ldr	r3, [r7, #12]
 800e898:	071b      	lsls	r3, r3, #28
 800e89a:	4990      	ldr	r1, [pc, #576]	; (800eadc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800e89c:	4313      	orrs	r3, r2
 800e89e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800e8a2:	4b8e      	ldr	r3, [pc, #568]	; (800eadc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800e8a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e8a8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8b0:	3b01      	subs	r3, #1
 800e8b2:	021b      	lsls	r3, r3, #8
 800e8b4:	4989      	ldr	r1, [pc, #548]	; (800eadc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800e8b6:	4313      	orrs	r3, r2
 800e8b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	681b      	ldr	r3, [r3, #0]
 800e8c0:	f003 0308 	and.w	r3, r3, #8
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d02c      	beq.n	800e922 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800e8c8:	4b84      	ldr	r3, [pc, #528]	; (800eadc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800e8ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e8ce:	0c1b      	lsrs	r3, r3, #16
 800e8d0:	f003 0303 	and.w	r3, r3, #3
 800e8d4:	3301      	adds	r3, #1
 800e8d6:	005b      	lsls	r3, r3, #1
 800e8d8:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800e8da:	4b80      	ldr	r3, [pc, #512]	; (800eadc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800e8dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e8e0:	0e1b      	lsrs	r3, r3, #24
 800e8e2:	f003 030f 	and.w	r3, r3, #15
 800e8e6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	691b      	ldr	r3, [r3, #16]
 800e8ec:	019a      	lsls	r2, r3, #6
 800e8ee:	697b      	ldr	r3, [r7, #20]
 800e8f0:	085b      	lsrs	r3, r3, #1
 800e8f2:	3b01      	subs	r3, #1
 800e8f4:	041b      	lsls	r3, r3, #16
 800e8f6:	431a      	orrs	r2, r3
 800e8f8:	693b      	ldr	r3, [r7, #16]
 800e8fa:	061b      	lsls	r3, r3, #24
 800e8fc:	431a      	orrs	r2, r3
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	69db      	ldr	r3, [r3, #28]
 800e902:	071b      	lsls	r3, r3, #28
 800e904:	4975      	ldr	r1, [pc, #468]	; (800eadc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800e906:	4313      	orrs	r3, r2
 800e908:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800e90c:	4b73      	ldr	r3, [pc, #460]	; (800eadc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800e90e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e912:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e91a:	4970      	ldr	r1, [pc, #448]	; (800eadc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800e91c:	4313      	orrs	r3, r2
 800e91e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	681b      	ldr	r3, [r3, #0]
 800e926:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	d024      	beq.n	800e978 <HAL_RCCEx_PeriphCLKConfig+0x304>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800e932:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e936:	d11f      	bne.n	800e978 <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800e938:	4b68      	ldr	r3, [pc, #416]	; (800eadc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800e93a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e93e:	0e1b      	lsrs	r3, r3, #24
 800e940:	f003 030f 	and.w	r3, r3, #15
 800e944:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800e946:	4b65      	ldr	r3, [pc, #404]	; (800eadc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800e948:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e94c:	0f1b      	lsrs	r3, r3, #28
 800e94e:	f003 0307 	and.w	r3, r3, #7
 800e952:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	691b      	ldr	r3, [r3, #16]
 800e958:	019a      	lsls	r2, r3, #6
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	695b      	ldr	r3, [r3, #20]
 800e95e:	085b      	lsrs	r3, r3, #1
 800e960:	3b01      	subs	r3, #1
 800e962:	041b      	lsls	r3, r3, #16
 800e964:	431a      	orrs	r2, r3
 800e966:	693b      	ldr	r3, [r7, #16]
 800e968:	061b      	lsls	r3, r3, #24
 800e96a:	431a      	orrs	r2, r3
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	071b      	lsls	r3, r3, #28
 800e970:	495a      	ldr	r1, [pc, #360]	; (800eadc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800e972:	4313      	orrs	r3, r2
 800e974:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800e978:	4b59      	ldr	r3, [pc, #356]	; (800eae0 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800e97a:	2201      	movs	r2, #1
 800e97c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800e97e:	f7fb fbf1 	bl	800a164 <HAL_GetTick>
 800e982:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800e984:	e008      	b.n	800e998 <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800e986:	f7fb fbed 	bl	800a164 <HAL_GetTick>
 800e98a:	4602      	mov	r2, r0
 800e98c:	69fb      	ldr	r3, [r7, #28]
 800e98e:	1ad3      	subs	r3, r2, r3
 800e990:	2b02      	cmp	r3, #2
 800e992:	d901      	bls.n	800e998 <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800e994:	2303      	movs	r3, #3
 800e996:	e09c      	b.n	800ead2 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800e998:	4b50      	ldr	r3, [pc, #320]	; (800eadc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e9a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e9a4:	d1ef      	bne.n	800e986 <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	f003 0320 	and.w	r3, r3, #32
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	f000 8083 	beq.w	800eaba <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800e9b4:	2300      	movs	r3, #0
 800e9b6:	60bb      	str	r3, [r7, #8]
 800e9b8:	4b48      	ldr	r3, [pc, #288]	; (800eadc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800e9ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e9bc:	4a47      	ldr	r2, [pc, #284]	; (800eadc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800e9be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e9c2:	6413      	str	r3, [r2, #64]	; 0x40
 800e9c4:	4b45      	ldr	r3, [pc, #276]	; (800eadc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800e9c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e9c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e9cc:	60bb      	str	r3, [r7, #8]
 800e9ce:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800e9d0:	4b44      	ldr	r3, [pc, #272]	; (800eae4 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	4a43      	ldr	r2, [pc, #268]	; (800eae4 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800e9d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e9da:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800e9dc:	f7fb fbc2 	bl	800a164 <HAL_GetTick>
 800e9e0:	61f8      	str	r0, [r7, #28]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800e9e2:	e008      	b.n	800e9f6 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800e9e4:	f7fb fbbe 	bl	800a164 <HAL_GetTick>
 800e9e8:	4602      	mov	r2, r0
 800e9ea:	69fb      	ldr	r3, [r7, #28]
 800e9ec:	1ad3      	subs	r3, r2, r3
 800e9ee:	2b02      	cmp	r3, #2
 800e9f0:	d901      	bls.n	800e9f6 <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 800e9f2:	2303      	movs	r3, #3
 800e9f4:	e06d      	b.n	800ead2 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800e9f6:	4b3b      	ldr	r3, [pc, #236]	; (800eae4 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d0f0      	beq.n	800e9e4 <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800ea02:	4b36      	ldr	r3, [pc, #216]	; (800eadc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ea04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ea06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ea0a:	61bb      	str	r3, [r7, #24]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800ea0c:	69bb      	ldr	r3, [r7, #24]
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d02f      	beq.n	800ea72 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ea1a:	69ba      	ldr	r2, [r7, #24]
 800ea1c:	429a      	cmp	r2, r3
 800ea1e:	d028      	beq.n	800ea72 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800ea20:	4b2e      	ldr	r3, [pc, #184]	; (800eadc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ea22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ea24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ea28:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800ea2a:	4b2f      	ldr	r3, [pc, #188]	; (800eae8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800ea2c:	2201      	movs	r2, #1
 800ea2e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800ea30:	4b2d      	ldr	r3, [pc, #180]	; (800eae8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800ea32:	2200      	movs	r2, #0
 800ea34:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800ea36:	4a29      	ldr	r2, [pc, #164]	; (800eadc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ea38:	69bb      	ldr	r3, [r7, #24]
 800ea3a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800ea3c:	4b27      	ldr	r3, [pc, #156]	; (800eadc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ea3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ea40:	f003 0301 	and.w	r3, r3, #1
 800ea44:	2b01      	cmp	r3, #1
 800ea46:	d114      	bne.n	800ea72 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800ea48:	f7fb fb8c 	bl	800a164 <HAL_GetTick>
 800ea4c:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ea4e:	e00a      	b.n	800ea66 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ea50:	f7fb fb88 	bl	800a164 <HAL_GetTick>
 800ea54:	4602      	mov	r2, r0
 800ea56:	69fb      	ldr	r3, [r7, #28]
 800ea58:	1ad3      	subs	r3, r2, r3
 800ea5a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ea5e:	4293      	cmp	r3, r2
 800ea60:	d901      	bls.n	800ea66 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 800ea62:	2303      	movs	r3, #3
 800ea64:	e035      	b.n	800ead2 <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ea66:	4b1d      	ldr	r3, [pc, #116]	; (800eadc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ea68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ea6a:	f003 0302 	and.w	r3, r3, #2
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d0ee      	beq.n	800ea50 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ea7a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ea7e:	d10d      	bne.n	800ea9c <HAL_RCCEx_PeriphCLKConfig+0x428>
 800ea80:	4b16      	ldr	r3, [pc, #88]	; (800eadc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ea82:	689b      	ldr	r3, [r3, #8]
 800ea84:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea8c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800ea90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ea94:	4911      	ldr	r1, [pc, #68]	; (800eadc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ea96:	4313      	orrs	r3, r2
 800ea98:	608b      	str	r3, [r1, #8]
 800ea9a:	e005      	b.n	800eaa8 <HAL_RCCEx_PeriphCLKConfig+0x434>
 800ea9c:	4b0f      	ldr	r3, [pc, #60]	; (800eadc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ea9e:	689b      	ldr	r3, [r3, #8]
 800eaa0:	4a0e      	ldr	r2, [pc, #56]	; (800eadc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800eaa2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800eaa6:	6093      	str	r3, [r2, #8]
 800eaa8:	4b0c      	ldr	r3, [pc, #48]	; (800eadc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800eaaa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eab0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800eab4:	4909      	ldr	r1, [pc, #36]	; (800eadc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800eab6:	4313      	orrs	r3, r2
 800eab8:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	681b      	ldr	r3, [r3, #0]
 800eabe:	f003 0310 	and.w	r3, r3, #16
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d004      	beq.n	800ead0 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800eacc:	4b07      	ldr	r3, [pc, #28]	; (800eaec <HAL_RCCEx_PeriphCLKConfig+0x478>)
 800eace:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800ead0:	2300      	movs	r3, #0
}
 800ead2:	4618      	mov	r0, r3
 800ead4:	3720      	adds	r7, #32
 800ead6:	46bd      	mov	sp, r7
 800ead8:	bd80      	pop	{r7, pc}
 800eada:	bf00      	nop
 800eadc:	40023800 	.word	0x40023800
 800eae0:	42470070 	.word	0x42470070
 800eae4:	40007000 	.word	0x40007000
 800eae8:	42470e40 	.word	0x42470e40
 800eaec:	424711e0 	.word	0x424711e0

0800eaf0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800eaf0:	b580      	push	{r7, lr}
 800eaf2:	b086      	sub	sp, #24
 800eaf4:	af00      	add	r7, sp, #0
 800eaf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800eaf8:	2300      	movs	r3, #0
 800eafa:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	f003 0301 	and.w	r3, r3, #1
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	d075      	beq.n	800ebf4 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800eb08:	4ba2      	ldr	r3, [pc, #648]	; (800ed94 <HAL_RCC_OscConfig+0x2a4>)
 800eb0a:	689b      	ldr	r3, [r3, #8]
 800eb0c:	f003 030c 	and.w	r3, r3, #12
 800eb10:	2b04      	cmp	r3, #4
 800eb12:	d00c      	beq.n	800eb2e <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800eb14:	4b9f      	ldr	r3, [pc, #636]	; (800ed94 <HAL_RCC_OscConfig+0x2a4>)
 800eb16:	689b      	ldr	r3, [r3, #8]
 800eb18:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800eb1c:	2b08      	cmp	r3, #8
 800eb1e:	d112      	bne.n	800eb46 <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800eb20:	4b9c      	ldr	r3, [pc, #624]	; (800ed94 <HAL_RCC_OscConfig+0x2a4>)
 800eb22:	685b      	ldr	r3, [r3, #4]
 800eb24:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800eb28:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800eb2c:	d10b      	bne.n	800eb46 <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800eb2e:	4b99      	ldr	r3, [pc, #612]	; (800ed94 <HAL_RCC_OscConfig+0x2a4>)
 800eb30:	681b      	ldr	r3, [r3, #0]
 800eb32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	d05b      	beq.n	800ebf2 <HAL_RCC_OscConfig+0x102>
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	685b      	ldr	r3, [r3, #4]
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	d157      	bne.n	800ebf2 <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 800eb42:	2301      	movs	r3, #1
 800eb44:	e20b      	b.n	800ef5e <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	685b      	ldr	r3, [r3, #4]
 800eb4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eb4e:	d106      	bne.n	800eb5e <HAL_RCC_OscConfig+0x6e>
 800eb50:	4b90      	ldr	r3, [pc, #576]	; (800ed94 <HAL_RCC_OscConfig+0x2a4>)
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	4a8f      	ldr	r2, [pc, #572]	; (800ed94 <HAL_RCC_OscConfig+0x2a4>)
 800eb56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800eb5a:	6013      	str	r3, [r2, #0]
 800eb5c:	e01d      	b.n	800eb9a <HAL_RCC_OscConfig+0xaa>
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	685b      	ldr	r3, [r3, #4]
 800eb62:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800eb66:	d10c      	bne.n	800eb82 <HAL_RCC_OscConfig+0x92>
 800eb68:	4b8a      	ldr	r3, [pc, #552]	; (800ed94 <HAL_RCC_OscConfig+0x2a4>)
 800eb6a:	681b      	ldr	r3, [r3, #0]
 800eb6c:	4a89      	ldr	r2, [pc, #548]	; (800ed94 <HAL_RCC_OscConfig+0x2a4>)
 800eb6e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800eb72:	6013      	str	r3, [r2, #0]
 800eb74:	4b87      	ldr	r3, [pc, #540]	; (800ed94 <HAL_RCC_OscConfig+0x2a4>)
 800eb76:	681b      	ldr	r3, [r3, #0]
 800eb78:	4a86      	ldr	r2, [pc, #536]	; (800ed94 <HAL_RCC_OscConfig+0x2a4>)
 800eb7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800eb7e:	6013      	str	r3, [r2, #0]
 800eb80:	e00b      	b.n	800eb9a <HAL_RCC_OscConfig+0xaa>
 800eb82:	4b84      	ldr	r3, [pc, #528]	; (800ed94 <HAL_RCC_OscConfig+0x2a4>)
 800eb84:	681b      	ldr	r3, [r3, #0]
 800eb86:	4a83      	ldr	r2, [pc, #524]	; (800ed94 <HAL_RCC_OscConfig+0x2a4>)
 800eb88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800eb8c:	6013      	str	r3, [r2, #0]
 800eb8e:	4b81      	ldr	r3, [pc, #516]	; (800ed94 <HAL_RCC_OscConfig+0x2a4>)
 800eb90:	681b      	ldr	r3, [r3, #0]
 800eb92:	4a80      	ldr	r2, [pc, #512]	; (800ed94 <HAL_RCC_OscConfig+0x2a4>)
 800eb94:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800eb98:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	685b      	ldr	r3, [r3, #4]
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d013      	beq.n	800ebca <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800eba2:	f7fb fadf 	bl	800a164 <HAL_GetTick>
 800eba6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800eba8:	e008      	b.n	800ebbc <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ebaa:	f7fb fadb 	bl	800a164 <HAL_GetTick>
 800ebae:	4602      	mov	r2, r0
 800ebb0:	693b      	ldr	r3, [r7, #16]
 800ebb2:	1ad3      	subs	r3, r2, r3
 800ebb4:	2b64      	cmp	r3, #100	; 0x64
 800ebb6:	d901      	bls.n	800ebbc <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 800ebb8:	2303      	movs	r3, #3
 800ebba:	e1d0      	b.n	800ef5e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ebbc:	4b75      	ldr	r3, [pc, #468]	; (800ed94 <HAL_RCC_OscConfig+0x2a4>)
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d0f0      	beq.n	800ebaa <HAL_RCC_OscConfig+0xba>
 800ebc8:	e014      	b.n	800ebf4 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ebca:	f7fb facb 	bl	800a164 <HAL_GetTick>
 800ebce:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ebd0:	e008      	b.n	800ebe4 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ebd2:	f7fb fac7 	bl	800a164 <HAL_GetTick>
 800ebd6:	4602      	mov	r2, r0
 800ebd8:	693b      	ldr	r3, [r7, #16]
 800ebda:	1ad3      	subs	r3, r2, r3
 800ebdc:	2b64      	cmp	r3, #100	; 0x64
 800ebde:	d901      	bls.n	800ebe4 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 800ebe0:	2303      	movs	r3, #3
 800ebe2:	e1bc      	b.n	800ef5e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ebe4:	4b6b      	ldr	r3, [pc, #428]	; (800ed94 <HAL_RCC_OscConfig+0x2a4>)
 800ebe6:	681b      	ldr	r3, [r3, #0]
 800ebe8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d1f0      	bne.n	800ebd2 <HAL_RCC_OscConfig+0xe2>
 800ebf0:	e000      	b.n	800ebf4 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ebf2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	f003 0302 	and.w	r3, r3, #2
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	d063      	beq.n	800ecc8 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800ec00:	4b64      	ldr	r3, [pc, #400]	; (800ed94 <HAL_RCC_OscConfig+0x2a4>)
 800ec02:	689b      	ldr	r3, [r3, #8]
 800ec04:	f003 030c 	and.w	r3, r3, #12
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d00b      	beq.n	800ec24 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ec0c:	4b61      	ldr	r3, [pc, #388]	; (800ed94 <HAL_RCC_OscConfig+0x2a4>)
 800ec0e:	689b      	ldr	r3, [r3, #8]
 800ec10:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800ec14:	2b08      	cmp	r3, #8
 800ec16:	d11c      	bne.n	800ec52 <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ec18:	4b5e      	ldr	r3, [pc, #376]	; (800ed94 <HAL_RCC_OscConfig+0x2a4>)
 800ec1a:	685b      	ldr	r3, [r3, #4]
 800ec1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d116      	bne.n	800ec52 <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ec24:	4b5b      	ldr	r3, [pc, #364]	; (800ed94 <HAL_RCC_OscConfig+0x2a4>)
 800ec26:	681b      	ldr	r3, [r3, #0]
 800ec28:	f003 0302 	and.w	r3, r3, #2
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d005      	beq.n	800ec3c <HAL_RCC_OscConfig+0x14c>
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	68db      	ldr	r3, [r3, #12]
 800ec34:	2b01      	cmp	r3, #1
 800ec36:	d001      	beq.n	800ec3c <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 800ec38:	2301      	movs	r3, #1
 800ec3a:	e190      	b.n	800ef5e <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ec3c:	4b55      	ldr	r3, [pc, #340]	; (800ed94 <HAL_RCC_OscConfig+0x2a4>)
 800ec3e:	681b      	ldr	r3, [r3, #0]
 800ec40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	691b      	ldr	r3, [r3, #16]
 800ec48:	00db      	lsls	r3, r3, #3
 800ec4a:	4952      	ldr	r1, [pc, #328]	; (800ed94 <HAL_RCC_OscConfig+0x2a4>)
 800ec4c:	4313      	orrs	r3, r2
 800ec4e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ec50:	e03a      	b.n	800ecc8 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	68db      	ldr	r3, [r3, #12]
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	d020      	beq.n	800ec9c <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800ec5a:	4b4f      	ldr	r3, [pc, #316]	; (800ed98 <HAL_RCC_OscConfig+0x2a8>)
 800ec5c:	2201      	movs	r2, #1
 800ec5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ec60:	f7fb fa80 	bl	800a164 <HAL_GetTick>
 800ec64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ec66:	e008      	b.n	800ec7a <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ec68:	f7fb fa7c 	bl	800a164 <HAL_GetTick>
 800ec6c:	4602      	mov	r2, r0
 800ec6e:	693b      	ldr	r3, [r7, #16]
 800ec70:	1ad3      	subs	r3, r2, r3
 800ec72:	2b02      	cmp	r3, #2
 800ec74:	d901      	bls.n	800ec7a <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800ec76:	2303      	movs	r3, #3
 800ec78:	e171      	b.n	800ef5e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ec7a:	4b46      	ldr	r3, [pc, #280]	; (800ed94 <HAL_RCC_OscConfig+0x2a4>)
 800ec7c:	681b      	ldr	r3, [r3, #0]
 800ec7e:	f003 0302 	and.w	r3, r3, #2
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d0f0      	beq.n	800ec68 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ec86:	4b43      	ldr	r3, [pc, #268]	; (800ed94 <HAL_RCC_OscConfig+0x2a4>)
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	691b      	ldr	r3, [r3, #16]
 800ec92:	00db      	lsls	r3, r3, #3
 800ec94:	493f      	ldr	r1, [pc, #252]	; (800ed94 <HAL_RCC_OscConfig+0x2a4>)
 800ec96:	4313      	orrs	r3, r2
 800ec98:	600b      	str	r3, [r1, #0]
 800ec9a:	e015      	b.n	800ecc8 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ec9c:	4b3e      	ldr	r3, [pc, #248]	; (800ed98 <HAL_RCC_OscConfig+0x2a8>)
 800ec9e:	2200      	movs	r2, #0
 800eca0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800eca2:	f7fb fa5f 	bl	800a164 <HAL_GetTick>
 800eca6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800eca8:	e008      	b.n	800ecbc <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ecaa:	f7fb fa5b 	bl	800a164 <HAL_GetTick>
 800ecae:	4602      	mov	r2, r0
 800ecb0:	693b      	ldr	r3, [r7, #16]
 800ecb2:	1ad3      	subs	r3, r2, r3
 800ecb4:	2b02      	cmp	r3, #2
 800ecb6:	d901      	bls.n	800ecbc <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800ecb8:	2303      	movs	r3, #3
 800ecba:	e150      	b.n	800ef5e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ecbc:	4b35      	ldr	r3, [pc, #212]	; (800ed94 <HAL_RCC_OscConfig+0x2a4>)
 800ecbe:	681b      	ldr	r3, [r3, #0]
 800ecc0:	f003 0302 	and.w	r3, r3, #2
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d1f0      	bne.n	800ecaa <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	681b      	ldr	r3, [r3, #0]
 800eccc:	f003 0308 	and.w	r3, r3, #8
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	d030      	beq.n	800ed36 <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	695b      	ldr	r3, [r3, #20]
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	d016      	beq.n	800ed0a <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ecdc:	4b2f      	ldr	r3, [pc, #188]	; (800ed9c <HAL_RCC_OscConfig+0x2ac>)
 800ecde:	2201      	movs	r2, #1
 800ece0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ece2:	f7fb fa3f 	bl	800a164 <HAL_GetTick>
 800ece6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ece8:	e008      	b.n	800ecfc <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800ecea:	f7fb fa3b 	bl	800a164 <HAL_GetTick>
 800ecee:	4602      	mov	r2, r0
 800ecf0:	693b      	ldr	r3, [r7, #16]
 800ecf2:	1ad3      	subs	r3, r2, r3
 800ecf4:	2b02      	cmp	r3, #2
 800ecf6:	d901      	bls.n	800ecfc <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 800ecf8:	2303      	movs	r3, #3
 800ecfa:	e130      	b.n	800ef5e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ecfc:	4b25      	ldr	r3, [pc, #148]	; (800ed94 <HAL_RCC_OscConfig+0x2a4>)
 800ecfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ed00:	f003 0302 	and.w	r3, r3, #2
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d0f0      	beq.n	800ecea <HAL_RCC_OscConfig+0x1fa>
 800ed08:	e015      	b.n	800ed36 <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ed0a:	4b24      	ldr	r3, [pc, #144]	; (800ed9c <HAL_RCC_OscConfig+0x2ac>)
 800ed0c:	2200      	movs	r2, #0
 800ed0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ed10:	f7fb fa28 	bl	800a164 <HAL_GetTick>
 800ed14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ed16:	e008      	b.n	800ed2a <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800ed18:	f7fb fa24 	bl	800a164 <HAL_GetTick>
 800ed1c:	4602      	mov	r2, r0
 800ed1e:	693b      	ldr	r3, [r7, #16]
 800ed20:	1ad3      	subs	r3, r2, r3
 800ed22:	2b02      	cmp	r3, #2
 800ed24:	d901      	bls.n	800ed2a <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 800ed26:	2303      	movs	r3, #3
 800ed28:	e119      	b.n	800ef5e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ed2a:	4b1a      	ldr	r3, [pc, #104]	; (800ed94 <HAL_RCC_OscConfig+0x2a4>)
 800ed2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ed2e:	f003 0302 	and.w	r3, r3, #2
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	d1f0      	bne.n	800ed18 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	681b      	ldr	r3, [r3, #0]
 800ed3a:	f003 0304 	and.w	r3, r3, #4
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	f000 809f 	beq.w	800ee82 <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ed44:	2300      	movs	r3, #0
 800ed46:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ed48:	4b12      	ldr	r3, [pc, #72]	; (800ed94 <HAL_RCC_OscConfig+0x2a4>)
 800ed4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	d10f      	bne.n	800ed74 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ed54:	2300      	movs	r3, #0
 800ed56:	60fb      	str	r3, [r7, #12]
 800ed58:	4b0e      	ldr	r3, [pc, #56]	; (800ed94 <HAL_RCC_OscConfig+0x2a4>)
 800ed5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed5c:	4a0d      	ldr	r2, [pc, #52]	; (800ed94 <HAL_RCC_OscConfig+0x2a4>)
 800ed5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ed62:	6413      	str	r3, [r2, #64]	; 0x40
 800ed64:	4b0b      	ldr	r3, [pc, #44]	; (800ed94 <HAL_RCC_OscConfig+0x2a4>)
 800ed66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ed6c:	60fb      	str	r3, [r7, #12]
 800ed6e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800ed70:	2301      	movs	r3, #1
 800ed72:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ed74:	4b0a      	ldr	r3, [pc, #40]	; (800eda0 <HAL_RCC_OscConfig+0x2b0>)
 800ed76:	681b      	ldr	r3, [r3, #0]
 800ed78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	d120      	bne.n	800edc2 <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800ed80:	4b07      	ldr	r3, [pc, #28]	; (800eda0 <HAL_RCC_OscConfig+0x2b0>)
 800ed82:	681b      	ldr	r3, [r3, #0]
 800ed84:	4a06      	ldr	r2, [pc, #24]	; (800eda0 <HAL_RCC_OscConfig+0x2b0>)
 800ed86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ed8a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ed8c:	f7fb f9ea 	bl	800a164 <HAL_GetTick>
 800ed90:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ed92:	e010      	b.n	800edb6 <HAL_RCC_OscConfig+0x2c6>
 800ed94:	40023800 	.word	0x40023800
 800ed98:	42470000 	.word	0x42470000
 800ed9c:	42470e80 	.word	0x42470e80
 800eda0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800eda4:	f7fb f9de 	bl	800a164 <HAL_GetTick>
 800eda8:	4602      	mov	r2, r0
 800edaa:	693b      	ldr	r3, [r7, #16]
 800edac:	1ad3      	subs	r3, r2, r3
 800edae:	2b02      	cmp	r3, #2
 800edb0:	d901      	bls.n	800edb6 <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 800edb2:	2303      	movs	r3, #3
 800edb4:	e0d3      	b.n	800ef5e <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800edb6:	4b6c      	ldr	r3, [pc, #432]	; (800ef68 <HAL_RCC_OscConfig+0x478>)
 800edb8:	681b      	ldr	r3, [r3, #0]
 800edba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	d0f0      	beq.n	800eda4 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	689b      	ldr	r3, [r3, #8]
 800edc6:	2b01      	cmp	r3, #1
 800edc8:	d106      	bne.n	800edd8 <HAL_RCC_OscConfig+0x2e8>
 800edca:	4b68      	ldr	r3, [pc, #416]	; (800ef6c <HAL_RCC_OscConfig+0x47c>)
 800edcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800edce:	4a67      	ldr	r2, [pc, #412]	; (800ef6c <HAL_RCC_OscConfig+0x47c>)
 800edd0:	f043 0301 	orr.w	r3, r3, #1
 800edd4:	6713      	str	r3, [r2, #112]	; 0x70
 800edd6:	e01c      	b.n	800ee12 <HAL_RCC_OscConfig+0x322>
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	689b      	ldr	r3, [r3, #8]
 800eddc:	2b05      	cmp	r3, #5
 800edde:	d10c      	bne.n	800edfa <HAL_RCC_OscConfig+0x30a>
 800ede0:	4b62      	ldr	r3, [pc, #392]	; (800ef6c <HAL_RCC_OscConfig+0x47c>)
 800ede2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ede4:	4a61      	ldr	r2, [pc, #388]	; (800ef6c <HAL_RCC_OscConfig+0x47c>)
 800ede6:	f043 0304 	orr.w	r3, r3, #4
 800edea:	6713      	str	r3, [r2, #112]	; 0x70
 800edec:	4b5f      	ldr	r3, [pc, #380]	; (800ef6c <HAL_RCC_OscConfig+0x47c>)
 800edee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800edf0:	4a5e      	ldr	r2, [pc, #376]	; (800ef6c <HAL_RCC_OscConfig+0x47c>)
 800edf2:	f043 0301 	orr.w	r3, r3, #1
 800edf6:	6713      	str	r3, [r2, #112]	; 0x70
 800edf8:	e00b      	b.n	800ee12 <HAL_RCC_OscConfig+0x322>
 800edfa:	4b5c      	ldr	r3, [pc, #368]	; (800ef6c <HAL_RCC_OscConfig+0x47c>)
 800edfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800edfe:	4a5b      	ldr	r2, [pc, #364]	; (800ef6c <HAL_RCC_OscConfig+0x47c>)
 800ee00:	f023 0301 	bic.w	r3, r3, #1
 800ee04:	6713      	str	r3, [r2, #112]	; 0x70
 800ee06:	4b59      	ldr	r3, [pc, #356]	; (800ef6c <HAL_RCC_OscConfig+0x47c>)
 800ee08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ee0a:	4a58      	ldr	r2, [pc, #352]	; (800ef6c <HAL_RCC_OscConfig+0x47c>)
 800ee0c:	f023 0304 	bic.w	r3, r3, #4
 800ee10:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	689b      	ldr	r3, [r3, #8]
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d015      	beq.n	800ee46 <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ee1a:	f7fb f9a3 	bl	800a164 <HAL_GetTick>
 800ee1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ee20:	e00a      	b.n	800ee38 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ee22:	f7fb f99f 	bl	800a164 <HAL_GetTick>
 800ee26:	4602      	mov	r2, r0
 800ee28:	693b      	ldr	r3, [r7, #16]
 800ee2a:	1ad3      	subs	r3, r2, r3
 800ee2c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ee30:	4293      	cmp	r3, r2
 800ee32:	d901      	bls.n	800ee38 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 800ee34:	2303      	movs	r3, #3
 800ee36:	e092      	b.n	800ef5e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ee38:	4b4c      	ldr	r3, [pc, #304]	; (800ef6c <HAL_RCC_OscConfig+0x47c>)
 800ee3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ee3c:	f003 0302 	and.w	r3, r3, #2
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	d0ee      	beq.n	800ee22 <HAL_RCC_OscConfig+0x332>
 800ee44:	e014      	b.n	800ee70 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ee46:	f7fb f98d 	bl	800a164 <HAL_GetTick>
 800ee4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ee4c:	e00a      	b.n	800ee64 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ee4e:	f7fb f989 	bl	800a164 <HAL_GetTick>
 800ee52:	4602      	mov	r2, r0
 800ee54:	693b      	ldr	r3, [r7, #16]
 800ee56:	1ad3      	subs	r3, r2, r3
 800ee58:	f241 3288 	movw	r2, #5000	; 0x1388
 800ee5c:	4293      	cmp	r3, r2
 800ee5e:	d901      	bls.n	800ee64 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 800ee60:	2303      	movs	r3, #3
 800ee62:	e07c      	b.n	800ef5e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ee64:	4b41      	ldr	r3, [pc, #260]	; (800ef6c <HAL_RCC_OscConfig+0x47c>)
 800ee66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ee68:	f003 0302 	and.w	r3, r3, #2
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	d1ee      	bne.n	800ee4e <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800ee70:	7dfb      	ldrb	r3, [r7, #23]
 800ee72:	2b01      	cmp	r3, #1
 800ee74:	d105      	bne.n	800ee82 <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ee76:	4b3d      	ldr	r3, [pc, #244]	; (800ef6c <HAL_RCC_OscConfig+0x47c>)
 800ee78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ee7a:	4a3c      	ldr	r2, [pc, #240]	; (800ef6c <HAL_RCC_OscConfig+0x47c>)
 800ee7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ee80:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	699b      	ldr	r3, [r3, #24]
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d068      	beq.n	800ef5c <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800ee8a:	4b38      	ldr	r3, [pc, #224]	; (800ef6c <HAL_RCC_OscConfig+0x47c>)
 800ee8c:	689b      	ldr	r3, [r3, #8]
 800ee8e:	f003 030c 	and.w	r3, r3, #12
 800ee92:	2b08      	cmp	r3, #8
 800ee94:	d060      	beq.n	800ef58 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	699b      	ldr	r3, [r3, #24]
 800ee9a:	2b02      	cmp	r3, #2
 800ee9c:	d145      	bne.n	800ef2a <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ee9e:	4b34      	ldr	r3, [pc, #208]	; (800ef70 <HAL_RCC_OscConfig+0x480>)
 800eea0:	2200      	movs	r2, #0
 800eea2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800eea4:	f7fb f95e 	bl	800a164 <HAL_GetTick>
 800eea8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800eeaa:	e008      	b.n	800eebe <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800eeac:	f7fb f95a 	bl	800a164 <HAL_GetTick>
 800eeb0:	4602      	mov	r2, r0
 800eeb2:	693b      	ldr	r3, [r7, #16]
 800eeb4:	1ad3      	subs	r3, r2, r3
 800eeb6:	2b02      	cmp	r3, #2
 800eeb8:	d901      	bls.n	800eebe <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 800eeba:	2303      	movs	r3, #3
 800eebc:	e04f      	b.n	800ef5e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800eebe:	4b2b      	ldr	r3, [pc, #172]	; (800ef6c <HAL_RCC_OscConfig+0x47c>)
 800eec0:	681b      	ldr	r3, [r3, #0]
 800eec2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d1f0      	bne.n	800eeac <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	69da      	ldr	r2, [r3, #28]
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	6a1b      	ldr	r3, [r3, #32]
 800eed2:	431a      	orrs	r2, r3
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eed8:	019b      	lsls	r3, r3, #6
 800eeda:	431a      	orrs	r2, r3
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eee0:	085b      	lsrs	r3, r3, #1
 800eee2:	3b01      	subs	r3, #1
 800eee4:	041b      	lsls	r3, r3, #16
 800eee6:	431a      	orrs	r2, r3
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eeec:	061b      	lsls	r3, r3, #24
 800eeee:	431a      	orrs	r2, r3
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eef4:	071b      	lsls	r3, r3, #28
 800eef6:	491d      	ldr	r1, [pc, #116]	; (800ef6c <HAL_RCC_OscConfig+0x47c>)
 800eef8:	4313      	orrs	r3, r2
 800eefa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800eefc:	4b1c      	ldr	r3, [pc, #112]	; (800ef70 <HAL_RCC_OscConfig+0x480>)
 800eefe:	2201      	movs	r2, #1
 800ef00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ef02:	f7fb f92f 	bl	800a164 <HAL_GetTick>
 800ef06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ef08:	e008      	b.n	800ef1c <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ef0a:	f7fb f92b 	bl	800a164 <HAL_GetTick>
 800ef0e:	4602      	mov	r2, r0
 800ef10:	693b      	ldr	r3, [r7, #16]
 800ef12:	1ad3      	subs	r3, r2, r3
 800ef14:	2b02      	cmp	r3, #2
 800ef16:	d901      	bls.n	800ef1c <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800ef18:	2303      	movs	r3, #3
 800ef1a:	e020      	b.n	800ef5e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ef1c:	4b13      	ldr	r3, [pc, #76]	; (800ef6c <HAL_RCC_OscConfig+0x47c>)
 800ef1e:	681b      	ldr	r3, [r3, #0]
 800ef20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d0f0      	beq.n	800ef0a <HAL_RCC_OscConfig+0x41a>
 800ef28:	e018      	b.n	800ef5c <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ef2a:	4b11      	ldr	r3, [pc, #68]	; (800ef70 <HAL_RCC_OscConfig+0x480>)
 800ef2c:	2200      	movs	r2, #0
 800ef2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ef30:	f7fb f918 	bl	800a164 <HAL_GetTick>
 800ef34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ef36:	e008      	b.n	800ef4a <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ef38:	f7fb f914 	bl	800a164 <HAL_GetTick>
 800ef3c:	4602      	mov	r2, r0
 800ef3e:	693b      	ldr	r3, [r7, #16]
 800ef40:	1ad3      	subs	r3, r2, r3
 800ef42:	2b02      	cmp	r3, #2
 800ef44:	d901      	bls.n	800ef4a <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800ef46:	2303      	movs	r3, #3
 800ef48:	e009      	b.n	800ef5e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ef4a:	4b08      	ldr	r3, [pc, #32]	; (800ef6c <HAL_RCC_OscConfig+0x47c>)
 800ef4c:	681b      	ldr	r3, [r3, #0]
 800ef4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	d1f0      	bne.n	800ef38 <HAL_RCC_OscConfig+0x448>
 800ef56:	e001      	b.n	800ef5c <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800ef58:	2301      	movs	r3, #1
 800ef5a:	e000      	b.n	800ef5e <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 800ef5c:	2300      	movs	r3, #0
}
 800ef5e:	4618      	mov	r0, r3
 800ef60:	3718      	adds	r7, #24
 800ef62:	46bd      	mov	sp, r7
 800ef64:	bd80      	pop	{r7, pc}
 800ef66:	bf00      	nop
 800ef68:	40007000 	.word	0x40007000
 800ef6c:	40023800 	.word	0x40023800
 800ef70:	42470060 	.word	0x42470060

0800ef74 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 800ef74:	b580      	push	{r7, lr}
 800ef76:	b082      	sub	sp, #8
 800ef78:	af00      	add	r7, sp, #0
 800ef7a:	6078      	str	r0, [r7, #4]
 800ef7c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d101      	bne.n	800ef88 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800ef84:	2301      	movs	r3, #1
 800ef86:	e025      	b.n	800efd4 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ef8e:	b2db      	uxtb	r3, r3
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	d106      	bne.n	800efa2 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	2200      	movs	r2, #0
 800ef98:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800ef9c:	6878      	ldr	r0, [r7, #4]
 800ef9e:	f7f2 fb49 	bl	8001634 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	2202      	movs	r2, #2
 800efa6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	681a      	ldr	r2, [r3, #0]
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	3304      	adds	r3, #4
 800efb2:	4619      	mov	r1, r3
 800efb4:	4610      	mov	r0, r2
 800efb6:	f000 fe19 	bl	800fbec <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	6818      	ldr	r0, [r3, #0]
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	685b      	ldr	r3, [r3, #4]
 800efc2:	461a      	mov	r2, r3
 800efc4:	6839      	ldr	r1, [r7, #0]
 800efc6:	f000 fe84 	bl	800fcd2 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	2201      	movs	r2, #1
 800efce:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800efd2:	2300      	movs	r3, #0
}
 800efd4:	4618      	mov	r0, r3
 800efd6:	3708      	adds	r7, #8
 800efd8:	46bd      	mov	sp, r7
 800efda:	bd80      	pop	{r7, pc}

0800efdc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800efdc:	b580      	push	{r7, lr}
 800efde:	b082      	sub	sp, #8
 800efe0:	af00      	add	r7, sp, #0
 800efe2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	d101      	bne.n	800efee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800efea:	2301      	movs	r3, #1
 800efec:	e01d      	b.n	800f02a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800eff4:	b2db      	uxtb	r3, r3
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	d106      	bne.n	800f008 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	2200      	movs	r2, #0
 800effe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800f002:	6878      	ldr	r0, [r7, #4]
 800f004:	f000 f815 	bl	800f032 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	2202      	movs	r2, #2
 800f00c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	681a      	ldr	r2, [r3, #0]
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	3304      	adds	r3, #4
 800f018:	4619      	mov	r1, r3
 800f01a:	4610      	mov	r0, r2
 800f01c:	f000 f968 	bl	800f2f0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	2201      	movs	r2, #1
 800f024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f028:	2300      	movs	r3, #0
}
 800f02a:	4618      	mov	r0, r3
 800f02c:	3708      	adds	r7, #8
 800f02e:	46bd      	mov	sp, r7
 800f030:	bd80      	pop	{r7, pc}

0800f032 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800f032:	b480      	push	{r7}
 800f034:	b083      	sub	sp, #12
 800f036:	af00      	add	r7, sp, #0
 800f038:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800f03a:	bf00      	nop
 800f03c:	370c      	adds	r7, #12
 800f03e:	46bd      	mov	sp, r7
 800f040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f044:	4770      	bx	lr

0800f046 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800f046:	b480      	push	{r7}
 800f048:	b085      	sub	sp, #20
 800f04a:	af00      	add	r7, sp, #0
 800f04c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	681b      	ldr	r3, [r3, #0]
 800f052:	68da      	ldr	r2, [r3, #12]
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	681b      	ldr	r3, [r3, #0]
 800f058:	f042 0201 	orr.w	r2, r2, #1
 800f05c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	681b      	ldr	r3, [r3, #0]
 800f062:	689b      	ldr	r3, [r3, #8]
 800f064:	f003 0307 	and.w	r3, r3, #7
 800f068:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f06a:	68fb      	ldr	r3, [r7, #12]
 800f06c:	2b06      	cmp	r3, #6
 800f06e:	d007      	beq.n	800f080 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	681b      	ldr	r3, [r3, #0]
 800f074:	681a      	ldr	r2, [r3, #0]
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	f042 0201 	orr.w	r2, r2, #1
 800f07e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800f080:	2300      	movs	r3, #0
}
 800f082:	4618      	mov	r0, r3
 800f084:	3714      	adds	r7, #20
 800f086:	46bd      	mov	sp, r7
 800f088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f08c:	4770      	bx	lr

0800f08e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800f08e:	b580      	push	{r7, lr}
 800f090:	b082      	sub	sp, #8
 800f092:	af00      	add	r7, sp, #0
 800f094:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	681b      	ldr	r3, [r3, #0]
 800f09a:	691b      	ldr	r3, [r3, #16]
 800f09c:	f003 0302 	and.w	r3, r3, #2
 800f0a0:	2b02      	cmp	r3, #2
 800f0a2:	d122      	bne.n	800f0ea <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	681b      	ldr	r3, [r3, #0]
 800f0a8:	68db      	ldr	r3, [r3, #12]
 800f0aa:	f003 0302 	and.w	r3, r3, #2
 800f0ae:	2b02      	cmp	r3, #2
 800f0b0:	d11b      	bne.n	800f0ea <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	681b      	ldr	r3, [r3, #0]
 800f0b6:	f06f 0202 	mvn.w	r2, #2
 800f0ba:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	2201      	movs	r2, #1
 800f0c0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	681b      	ldr	r3, [r3, #0]
 800f0c6:	699b      	ldr	r3, [r3, #24]
 800f0c8:	f003 0303 	and.w	r3, r3, #3
 800f0cc:	2b00      	cmp	r3, #0
 800f0ce:	d003      	beq.n	800f0d8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f0d0:	6878      	ldr	r0, [r7, #4]
 800f0d2:	f000 f8ee 	bl	800f2b2 <HAL_TIM_IC_CaptureCallback>
 800f0d6:	e005      	b.n	800f0e4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f0d8:	6878      	ldr	r0, [r7, #4]
 800f0da:	f000 f8e0 	bl	800f29e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f0de:	6878      	ldr	r0, [r7, #4]
 800f0e0:	f000 f8f1 	bl	800f2c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	2200      	movs	r2, #0
 800f0e8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	681b      	ldr	r3, [r3, #0]
 800f0ee:	691b      	ldr	r3, [r3, #16]
 800f0f0:	f003 0304 	and.w	r3, r3, #4
 800f0f4:	2b04      	cmp	r3, #4
 800f0f6:	d122      	bne.n	800f13e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	681b      	ldr	r3, [r3, #0]
 800f0fc:	68db      	ldr	r3, [r3, #12]
 800f0fe:	f003 0304 	and.w	r3, r3, #4
 800f102:	2b04      	cmp	r3, #4
 800f104:	d11b      	bne.n	800f13e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	681b      	ldr	r3, [r3, #0]
 800f10a:	f06f 0204 	mvn.w	r2, #4
 800f10e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	2202      	movs	r2, #2
 800f114:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	681b      	ldr	r3, [r3, #0]
 800f11a:	699b      	ldr	r3, [r3, #24]
 800f11c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f120:	2b00      	cmp	r3, #0
 800f122:	d003      	beq.n	800f12c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f124:	6878      	ldr	r0, [r7, #4]
 800f126:	f000 f8c4 	bl	800f2b2 <HAL_TIM_IC_CaptureCallback>
 800f12a:	e005      	b.n	800f138 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f12c:	6878      	ldr	r0, [r7, #4]
 800f12e:	f000 f8b6 	bl	800f29e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f132:	6878      	ldr	r0, [r7, #4]
 800f134:	f000 f8c7 	bl	800f2c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	2200      	movs	r2, #0
 800f13c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	691b      	ldr	r3, [r3, #16]
 800f144:	f003 0308 	and.w	r3, r3, #8
 800f148:	2b08      	cmp	r3, #8
 800f14a:	d122      	bne.n	800f192 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	681b      	ldr	r3, [r3, #0]
 800f150:	68db      	ldr	r3, [r3, #12]
 800f152:	f003 0308 	and.w	r3, r3, #8
 800f156:	2b08      	cmp	r3, #8
 800f158:	d11b      	bne.n	800f192 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	681b      	ldr	r3, [r3, #0]
 800f15e:	f06f 0208 	mvn.w	r2, #8
 800f162:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	2204      	movs	r2, #4
 800f168:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	681b      	ldr	r3, [r3, #0]
 800f16e:	69db      	ldr	r3, [r3, #28]
 800f170:	f003 0303 	and.w	r3, r3, #3
 800f174:	2b00      	cmp	r3, #0
 800f176:	d003      	beq.n	800f180 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f178:	6878      	ldr	r0, [r7, #4]
 800f17a:	f000 f89a 	bl	800f2b2 <HAL_TIM_IC_CaptureCallback>
 800f17e:	e005      	b.n	800f18c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f180:	6878      	ldr	r0, [r7, #4]
 800f182:	f000 f88c 	bl	800f29e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f186:	6878      	ldr	r0, [r7, #4]
 800f188:	f000 f89d 	bl	800f2c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	2200      	movs	r2, #0
 800f190:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	681b      	ldr	r3, [r3, #0]
 800f196:	691b      	ldr	r3, [r3, #16]
 800f198:	f003 0310 	and.w	r3, r3, #16
 800f19c:	2b10      	cmp	r3, #16
 800f19e:	d122      	bne.n	800f1e6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	681b      	ldr	r3, [r3, #0]
 800f1a4:	68db      	ldr	r3, [r3, #12]
 800f1a6:	f003 0310 	and.w	r3, r3, #16
 800f1aa:	2b10      	cmp	r3, #16
 800f1ac:	d11b      	bne.n	800f1e6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	f06f 0210 	mvn.w	r2, #16
 800f1b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	2208      	movs	r2, #8
 800f1bc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	681b      	ldr	r3, [r3, #0]
 800f1c2:	69db      	ldr	r3, [r3, #28]
 800f1c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	d003      	beq.n	800f1d4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f1cc:	6878      	ldr	r0, [r7, #4]
 800f1ce:	f000 f870 	bl	800f2b2 <HAL_TIM_IC_CaptureCallback>
 800f1d2:	e005      	b.n	800f1e0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f1d4:	6878      	ldr	r0, [r7, #4]
 800f1d6:	f000 f862 	bl	800f29e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f1da:	6878      	ldr	r0, [r7, #4]
 800f1dc:	f000 f873 	bl	800f2c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	2200      	movs	r2, #0
 800f1e4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	681b      	ldr	r3, [r3, #0]
 800f1ea:	691b      	ldr	r3, [r3, #16]
 800f1ec:	f003 0301 	and.w	r3, r3, #1
 800f1f0:	2b01      	cmp	r3, #1
 800f1f2:	d10e      	bne.n	800f212 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	681b      	ldr	r3, [r3, #0]
 800f1f8:	68db      	ldr	r3, [r3, #12]
 800f1fa:	f003 0301 	and.w	r3, r3, #1
 800f1fe:	2b01      	cmp	r3, #1
 800f200:	d107      	bne.n	800f212 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	681b      	ldr	r3, [r3, #0]
 800f206:	f06f 0201 	mvn.w	r2, #1
 800f20a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f20c:	6878      	ldr	r0, [r7, #4]
 800f20e:	f7f1 fef3 	bl	8000ff8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	681b      	ldr	r3, [r3, #0]
 800f216:	691b      	ldr	r3, [r3, #16]
 800f218:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f21c:	2b80      	cmp	r3, #128	; 0x80
 800f21e:	d10e      	bne.n	800f23e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	681b      	ldr	r3, [r3, #0]
 800f224:	68db      	ldr	r3, [r3, #12]
 800f226:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f22a:	2b80      	cmp	r3, #128	; 0x80
 800f22c:	d107      	bne.n	800f23e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	681b      	ldr	r3, [r3, #0]
 800f232:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800f236:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f238:	6878      	ldr	r0, [r7, #4]
 800f23a:	f000 f903 	bl	800f444 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	681b      	ldr	r3, [r3, #0]
 800f242:	691b      	ldr	r3, [r3, #16]
 800f244:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f248:	2b40      	cmp	r3, #64	; 0x40
 800f24a:	d10e      	bne.n	800f26a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	681b      	ldr	r3, [r3, #0]
 800f250:	68db      	ldr	r3, [r3, #12]
 800f252:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f256:	2b40      	cmp	r3, #64	; 0x40
 800f258:	d107      	bne.n	800f26a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	681b      	ldr	r3, [r3, #0]
 800f25e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800f262:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f264:	6878      	ldr	r0, [r7, #4]
 800f266:	f000 f838 	bl	800f2da <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	681b      	ldr	r3, [r3, #0]
 800f26e:	691b      	ldr	r3, [r3, #16]
 800f270:	f003 0320 	and.w	r3, r3, #32
 800f274:	2b20      	cmp	r3, #32
 800f276:	d10e      	bne.n	800f296 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	681b      	ldr	r3, [r3, #0]
 800f27c:	68db      	ldr	r3, [r3, #12]
 800f27e:	f003 0320 	and.w	r3, r3, #32
 800f282:	2b20      	cmp	r3, #32
 800f284:	d107      	bne.n	800f296 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	681b      	ldr	r3, [r3, #0]
 800f28a:	f06f 0220 	mvn.w	r2, #32
 800f28e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f290:	6878      	ldr	r0, [r7, #4]
 800f292:	f000 f8cd 	bl	800f430 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f296:	bf00      	nop
 800f298:	3708      	adds	r7, #8
 800f29a:	46bd      	mov	sp, r7
 800f29c:	bd80      	pop	{r7, pc}

0800f29e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f29e:	b480      	push	{r7}
 800f2a0:	b083      	sub	sp, #12
 800f2a2:	af00      	add	r7, sp, #0
 800f2a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f2a6:	bf00      	nop
 800f2a8:	370c      	adds	r7, #12
 800f2aa:	46bd      	mov	sp, r7
 800f2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2b0:	4770      	bx	lr

0800f2b2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f2b2:	b480      	push	{r7}
 800f2b4:	b083      	sub	sp, #12
 800f2b6:	af00      	add	r7, sp, #0
 800f2b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f2ba:	bf00      	nop
 800f2bc:	370c      	adds	r7, #12
 800f2be:	46bd      	mov	sp, r7
 800f2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2c4:	4770      	bx	lr

0800f2c6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f2c6:	b480      	push	{r7}
 800f2c8:	b083      	sub	sp, #12
 800f2ca:	af00      	add	r7, sp, #0
 800f2cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f2ce:	bf00      	nop
 800f2d0:	370c      	adds	r7, #12
 800f2d2:	46bd      	mov	sp, r7
 800f2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2d8:	4770      	bx	lr

0800f2da <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f2da:	b480      	push	{r7}
 800f2dc:	b083      	sub	sp, #12
 800f2de:	af00      	add	r7, sp, #0
 800f2e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f2e2:	bf00      	nop
 800f2e4:	370c      	adds	r7, #12
 800f2e6:	46bd      	mov	sp, r7
 800f2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ec:	4770      	bx	lr
	...

0800f2f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800f2f0:	b480      	push	{r7}
 800f2f2:	b085      	sub	sp, #20
 800f2f4:	af00      	add	r7, sp, #0
 800f2f6:	6078      	str	r0, [r7, #4]
 800f2f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	681b      	ldr	r3, [r3, #0]
 800f2fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	4a40      	ldr	r2, [pc, #256]	; (800f404 <TIM_Base_SetConfig+0x114>)
 800f304:	4293      	cmp	r3, r2
 800f306:	d013      	beq.n	800f330 <TIM_Base_SetConfig+0x40>
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f30e:	d00f      	beq.n	800f330 <TIM_Base_SetConfig+0x40>
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	4a3d      	ldr	r2, [pc, #244]	; (800f408 <TIM_Base_SetConfig+0x118>)
 800f314:	4293      	cmp	r3, r2
 800f316:	d00b      	beq.n	800f330 <TIM_Base_SetConfig+0x40>
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	4a3c      	ldr	r2, [pc, #240]	; (800f40c <TIM_Base_SetConfig+0x11c>)
 800f31c:	4293      	cmp	r3, r2
 800f31e:	d007      	beq.n	800f330 <TIM_Base_SetConfig+0x40>
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	4a3b      	ldr	r2, [pc, #236]	; (800f410 <TIM_Base_SetConfig+0x120>)
 800f324:	4293      	cmp	r3, r2
 800f326:	d003      	beq.n	800f330 <TIM_Base_SetConfig+0x40>
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	4a3a      	ldr	r2, [pc, #232]	; (800f414 <TIM_Base_SetConfig+0x124>)
 800f32c:	4293      	cmp	r3, r2
 800f32e:	d108      	bne.n	800f342 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f330:	68fb      	ldr	r3, [r7, #12]
 800f332:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f336:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f338:	683b      	ldr	r3, [r7, #0]
 800f33a:	685b      	ldr	r3, [r3, #4]
 800f33c:	68fa      	ldr	r2, [r7, #12]
 800f33e:	4313      	orrs	r3, r2
 800f340:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	4a2f      	ldr	r2, [pc, #188]	; (800f404 <TIM_Base_SetConfig+0x114>)
 800f346:	4293      	cmp	r3, r2
 800f348:	d02b      	beq.n	800f3a2 <TIM_Base_SetConfig+0xb2>
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f350:	d027      	beq.n	800f3a2 <TIM_Base_SetConfig+0xb2>
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	4a2c      	ldr	r2, [pc, #176]	; (800f408 <TIM_Base_SetConfig+0x118>)
 800f356:	4293      	cmp	r3, r2
 800f358:	d023      	beq.n	800f3a2 <TIM_Base_SetConfig+0xb2>
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	4a2b      	ldr	r2, [pc, #172]	; (800f40c <TIM_Base_SetConfig+0x11c>)
 800f35e:	4293      	cmp	r3, r2
 800f360:	d01f      	beq.n	800f3a2 <TIM_Base_SetConfig+0xb2>
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	4a2a      	ldr	r2, [pc, #168]	; (800f410 <TIM_Base_SetConfig+0x120>)
 800f366:	4293      	cmp	r3, r2
 800f368:	d01b      	beq.n	800f3a2 <TIM_Base_SetConfig+0xb2>
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	4a29      	ldr	r2, [pc, #164]	; (800f414 <TIM_Base_SetConfig+0x124>)
 800f36e:	4293      	cmp	r3, r2
 800f370:	d017      	beq.n	800f3a2 <TIM_Base_SetConfig+0xb2>
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	4a28      	ldr	r2, [pc, #160]	; (800f418 <TIM_Base_SetConfig+0x128>)
 800f376:	4293      	cmp	r3, r2
 800f378:	d013      	beq.n	800f3a2 <TIM_Base_SetConfig+0xb2>
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	4a27      	ldr	r2, [pc, #156]	; (800f41c <TIM_Base_SetConfig+0x12c>)
 800f37e:	4293      	cmp	r3, r2
 800f380:	d00f      	beq.n	800f3a2 <TIM_Base_SetConfig+0xb2>
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	4a26      	ldr	r2, [pc, #152]	; (800f420 <TIM_Base_SetConfig+0x130>)
 800f386:	4293      	cmp	r3, r2
 800f388:	d00b      	beq.n	800f3a2 <TIM_Base_SetConfig+0xb2>
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	4a25      	ldr	r2, [pc, #148]	; (800f424 <TIM_Base_SetConfig+0x134>)
 800f38e:	4293      	cmp	r3, r2
 800f390:	d007      	beq.n	800f3a2 <TIM_Base_SetConfig+0xb2>
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	4a24      	ldr	r2, [pc, #144]	; (800f428 <TIM_Base_SetConfig+0x138>)
 800f396:	4293      	cmp	r3, r2
 800f398:	d003      	beq.n	800f3a2 <TIM_Base_SetConfig+0xb2>
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	4a23      	ldr	r2, [pc, #140]	; (800f42c <TIM_Base_SetConfig+0x13c>)
 800f39e:	4293      	cmp	r3, r2
 800f3a0:	d108      	bne.n	800f3b4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f3a2:	68fb      	ldr	r3, [r7, #12]
 800f3a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f3a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f3aa:	683b      	ldr	r3, [r7, #0]
 800f3ac:	68db      	ldr	r3, [r3, #12]
 800f3ae:	68fa      	ldr	r2, [r7, #12]
 800f3b0:	4313      	orrs	r3, r2
 800f3b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f3b4:	68fb      	ldr	r3, [r7, #12]
 800f3b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f3ba:	683b      	ldr	r3, [r7, #0]
 800f3bc:	695b      	ldr	r3, [r3, #20]
 800f3be:	4313      	orrs	r3, r2
 800f3c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	68fa      	ldr	r2, [r7, #12]
 800f3c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f3c8:	683b      	ldr	r3, [r7, #0]
 800f3ca:	689a      	ldr	r2, [r3, #8]
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f3d0:	683b      	ldr	r3, [r7, #0]
 800f3d2:	681a      	ldr	r2, [r3, #0]
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	4a0a      	ldr	r2, [pc, #40]	; (800f404 <TIM_Base_SetConfig+0x114>)
 800f3dc:	4293      	cmp	r3, r2
 800f3de:	d003      	beq.n	800f3e8 <TIM_Base_SetConfig+0xf8>
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	4a0c      	ldr	r2, [pc, #48]	; (800f414 <TIM_Base_SetConfig+0x124>)
 800f3e4:	4293      	cmp	r3, r2
 800f3e6:	d103      	bne.n	800f3f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f3e8:	683b      	ldr	r3, [r7, #0]
 800f3ea:	691a      	ldr	r2, [r3, #16]
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	2201      	movs	r2, #1
 800f3f4:	615a      	str	r2, [r3, #20]
}
 800f3f6:	bf00      	nop
 800f3f8:	3714      	adds	r7, #20
 800f3fa:	46bd      	mov	sp, r7
 800f3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f400:	4770      	bx	lr
 800f402:	bf00      	nop
 800f404:	40010000 	.word	0x40010000
 800f408:	40000400 	.word	0x40000400
 800f40c:	40000800 	.word	0x40000800
 800f410:	40000c00 	.word	0x40000c00
 800f414:	40010400 	.word	0x40010400
 800f418:	40014000 	.word	0x40014000
 800f41c:	40014400 	.word	0x40014400
 800f420:	40014800 	.word	0x40014800
 800f424:	40001800 	.word	0x40001800
 800f428:	40001c00 	.word	0x40001c00
 800f42c:	40002000 	.word	0x40002000

0800f430 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f430:	b480      	push	{r7}
 800f432:	b083      	sub	sp, #12
 800f434:	af00      	add	r7, sp, #0
 800f436:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f438:	bf00      	nop
 800f43a:	370c      	adds	r7, #12
 800f43c:	46bd      	mov	sp, r7
 800f43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f442:	4770      	bx	lr

0800f444 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f444:	b480      	push	{r7}
 800f446:	b083      	sub	sp, #12
 800f448:	af00      	add	r7, sp, #0
 800f44a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f44c:	bf00      	nop
 800f44e:	370c      	adds	r7, #12
 800f450:	46bd      	mov	sp, r7
 800f452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f456:	4770      	bx	lr

0800f458 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f458:	b580      	push	{r7, lr}
 800f45a:	b082      	sub	sp, #8
 800f45c:	af00      	add	r7, sp, #0
 800f45e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	2b00      	cmp	r3, #0
 800f464:	d101      	bne.n	800f46a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f466:	2301      	movs	r3, #1
 800f468:	e03f      	b.n	800f4ea <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800f470:	b2db      	uxtb	r3, r3
 800f472:	2b00      	cmp	r3, #0
 800f474:	d106      	bne.n	800f484 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	2200      	movs	r2, #0
 800f47a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f47e:	6878      	ldr	r0, [r7, #4]
 800f480:	f7f1 ffee 	bl	8001460 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	2224      	movs	r2, #36	; 0x24
 800f488:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	681b      	ldr	r3, [r3, #0]
 800f490:	68da      	ldr	r2, [r3, #12]
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	681b      	ldr	r3, [r3, #0]
 800f496:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800f49a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800f49c:	6878      	ldr	r0, [r7, #4]
 800f49e:	f000 f829 	bl	800f4f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	681b      	ldr	r3, [r3, #0]
 800f4a6:	691a      	ldr	r2, [r3, #16]
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	681b      	ldr	r3, [r3, #0]
 800f4ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800f4b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	681b      	ldr	r3, [r3, #0]
 800f4b6:	695a      	ldr	r2, [r3, #20]
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	681b      	ldr	r3, [r3, #0]
 800f4bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800f4c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	681b      	ldr	r3, [r3, #0]
 800f4c6:	68da      	ldr	r2, [r3, #12]
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	681b      	ldr	r3, [r3, #0]
 800f4cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800f4d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	2200      	movs	r2, #0
 800f4d6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	2220      	movs	r2, #32
 800f4dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	2220      	movs	r2, #32
 800f4e4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800f4e8:	2300      	movs	r3, #0
}
 800f4ea:	4618      	mov	r0, r3
 800f4ec:	3708      	adds	r7, #8
 800f4ee:	46bd      	mov	sp, r7
 800f4f0:	bd80      	pop	{r7, pc}
	...

0800f4f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f4f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4f8:	b085      	sub	sp, #20
 800f4fa:	af00      	add	r7, sp, #0
 800f4fc:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	681b      	ldr	r3, [r3, #0]
 800f502:	691b      	ldr	r3, [r3, #16]
 800f504:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	68da      	ldr	r2, [r3, #12]
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	681b      	ldr	r3, [r3, #0]
 800f510:	430a      	orrs	r2, r1
 800f512:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	689a      	ldr	r2, [r3, #8]
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	691b      	ldr	r3, [r3, #16]
 800f51c:	431a      	orrs	r2, r3
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	695b      	ldr	r3, [r3, #20]
 800f522:	431a      	orrs	r2, r3
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	69db      	ldr	r3, [r3, #28]
 800f528:	4313      	orrs	r3, r2
 800f52a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	681b      	ldr	r3, [r3, #0]
 800f530:	68db      	ldr	r3, [r3, #12]
 800f532:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800f536:	f023 030c 	bic.w	r3, r3, #12
 800f53a:	687a      	ldr	r2, [r7, #4]
 800f53c:	6812      	ldr	r2, [r2, #0]
 800f53e:	68f9      	ldr	r1, [r7, #12]
 800f540:	430b      	orrs	r3, r1
 800f542:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	681b      	ldr	r3, [r3, #0]
 800f548:	695b      	ldr	r3, [r3, #20]
 800f54a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	699a      	ldr	r2, [r3, #24]
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	681b      	ldr	r3, [r3, #0]
 800f556:	430a      	orrs	r2, r1
 800f558:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	69db      	ldr	r3, [r3, #28]
 800f55e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f562:	f040 818b 	bne.w	800f87c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	681b      	ldr	r3, [r3, #0]
 800f56a:	4ac1      	ldr	r2, [pc, #772]	; (800f870 <UART_SetConfig+0x37c>)
 800f56c:	4293      	cmp	r3, r2
 800f56e:	d005      	beq.n	800f57c <UART_SetConfig+0x88>
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	681b      	ldr	r3, [r3, #0]
 800f574:	4abf      	ldr	r2, [pc, #764]	; (800f874 <UART_SetConfig+0x380>)
 800f576:	4293      	cmp	r3, r2
 800f578:	f040 80bd 	bne.w	800f6f6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800f57c:	f7ff f834 	bl	800e5e8 <HAL_RCC_GetPCLK2Freq>
 800f580:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800f582:	68bb      	ldr	r3, [r7, #8]
 800f584:	461d      	mov	r5, r3
 800f586:	f04f 0600 	mov.w	r6, #0
 800f58a:	46a8      	mov	r8, r5
 800f58c:	46b1      	mov	r9, r6
 800f58e:	eb18 0308 	adds.w	r3, r8, r8
 800f592:	eb49 0409 	adc.w	r4, r9, r9
 800f596:	4698      	mov	r8, r3
 800f598:	46a1      	mov	r9, r4
 800f59a:	eb18 0805 	adds.w	r8, r8, r5
 800f59e:	eb49 0906 	adc.w	r9, r9, r6
 800f5a2:	f04f 0100 	mov.w	r1, #0
 800f5a6:	f04f 0200 	mov.w	r2, #0
 800f5aa:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800f5ae:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800f5b2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800f5b6:	4688      	mov	r8, r1
 800f5b8:	4691      	mov	r9, r2
 800f5ba:	eb18 0005 	adds.w	r0, r8, r5
 800f5be:	eb49 0106 	adc.w	r1, r9, r6
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	685b      	ldr	r3, [r3, #4]
 800f5c6:	461d      	mov	r5, r3
 800f5c8:	f04f 0600 	mov.w	r6, #0
 800f5cc:	196b      	adds	r3, r5, r5
 800f5ce:	eb46 0406 	adc.w	r4, r6, r6
 800f5d2:	461a      	mov	r2, r3
 800f5d4:	4623      	mov	r3, r4
 800f5d6:	f7f0 fe63 	bl	80002a0 <__aeabi_uldivmod>
 800f5da:	4603      	mov	r3, r0
 800f5dc:	460c      	mov	r4, r1
 800f5de:	461a      	mov	r2, r3
 800f5e0:	4ba5      	ldr	r3, [pc, #660]	; (800f878 <UART_SetConfig+0x384>)
 800f5e2:	fba3 2302 	umull	r2, r3, r3, r2
 800f5e6:	095b      	lsrs	r3, r3, #5
 800f5e8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800f5ec:	68bb      	ldr	r3, [r7, #8]
 800f5ee:	461d      	mov	r5, r3
 800f5f0:	f04f 0600 	mov.w	r6, #0
 800f5f4:	46a9      	mov	r9, r5
 800f5f6:	46b2      	mov	sl, r6
 800f5f8:	eb19 0309 	adds.w	r3, r9, r9
 800f5fc:	eb4a 040a 	adc.w	r4, sl, sl
 800f600:	4699      	mov	r9, r3
 800f602:	46a2      	mov	sl, r4
 800f604:	eb19 0905 	adds.w	r9, r9, r5
 800f608:	eb4a 0a06 	adc.w	sl, sl, r6
 800f60c:	f04f 0100 	mov.w	r1, #0
 800f610:	f04f 0200 	mov.w	r2, #0
 800f614:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f618:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f61c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f620:	4689      	mov	r9, r1
 800f622:	4692      	mov	sl, r2
 800f624:	eb19 0005 	adds.w	r0, r9, r5
 800f628:	eb4a 0106 	adc.w	r1, sl, r6
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	685b      	ldr	r3, [r3, #4]
 800f630:	461d      	mov	r5, r3
 800f632:	f04f 0600 	mov.w	r6, #0
 800f636:	196b      	adds	r3, r5, r5
 800f638:	eb46 0406 	adc.w	r4, r6, r6
 800f63c:	461a      	mov	r2, r3
 800f63e:	4623      	mov	r3, r4
 800f640:	f7f0 fe2e 	bl	80002a0 <__aeabi_uldivmod>
 800f644:	4603      	mov	r3, r0
 800f646:	460c      	mov	r4, r1
 800f648:	461a      	mov	r2, r3
 800f64a:	4b8b      	ldr	r3, [pc, #556]	; (800f878 <UART_SetConfig+0x384>)
 800f64c:	fba3 1302 	umull	r1, r3, r3, r2
 800f650:	095b      	lsrs	r3, r3, #5
 800f652:	2164      	movs	r1, #100	; 0x64
 800f654:	fb01 f303 	mul.w	r3, r1, r3
 800f658:	1ad3      	subs	r3, r2, r3
 800f65a:	00db      	lsls	r3, r3, #3
 800f65c:	3332      	adds	r3, #50	; 0x32
 800f65e:	4a86      	ldr	r2, [pc, #536]	; (800f878 <UART_SetConfig+0x384>)
 800f660:	fba2 2303 	umull	r2, r3, r2, r3
 800f664:	095b      	lsrs	r3, r3, #5
 800f666:	005b      	lsls	r3, r3, #1
 800f668:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800f66c:	4498      	add	r8, r3
 800f66e:	68bb      	ldr	r3, [r7, #8]
 800f670:	461d      	mov	r5, r3
 800f672:	f04f 0600 	mov.w	r6, #0
 800f676:	46a9      	mov	r9, r5
 800f678:	46b2      	mov	sl, r6
 800f67a:	eb19 0309 	adds.w	r3, r9, r9
 800f67e:	eb4a 040a 	adc.w	r4, sl, sl
 800f682:	4699      	mov	r9, r3
 800f684:	46a2      	mov	sl, r4
 800f686:	eb19 0905 	adds.w	r9, r9, r5
 800f68a:	eb4a 0a06 	adc.w	sl, sl, r6
 800f68e:	f04f 0100 	mov.w	r1, #0
 800f692:	f04f 0200 	mov.w	r2, #0
 800f696:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f69a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f69e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f6a2:	4689      	mov	r9, r1
 800f6a4:	4692      	mov	sl, r2
 800f6a6:	eb19 0005 	adds.w	r0, r9, r5
 800f6aa:	eb4a 0106 	adc.w	r1, sl, r6
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	685b      	ldr	r3, [r3, #4]
 800f6b2:	461d      	mov	r5, r3
 800f6b4:	f04f 0600 	mov.w	r6, #0
 800f6b8:	196b      	adds	r3, r5, r5
 800f6ba:	eb46 0406 	adc.w	r4, r6, r6
 800f6be:	461a      	mov	r2, r3
 800f6c0:	4623      	mov	r3, r4
 800f6c2:	f7f0 fded 	bl	80002a0 <__aeabi_uldivmod>
 800f6c6:	4603      	mov	r3, r0
 800f6c8:	460c      	mov	r4, r1
 800f6ca:	461a      	mov	r2, r3
 800f6cc:	4b6a      	ldr	r3, [pc, #424]	; (800f878 <UART_SetConfig+0x384>)
 800f6ce:	fba3 1302 	umull	r1, r3, r3, r2
 800f6d2:	095b      	lsrs	r3, r3, #5
 800f6d4:	2164      	movs	r1, #100	; 0x64
 800f6d6:	fb01 f303 	mul.w	r3, r1, r3
 800f6da:	1ad3      	subs	r3, r2, r3
 800f6dc:	00db      	lsls	r3, r3, #3
 800f6de:	3332      	adds	r3, #50	; 0x32
 800f6e0:	4a65      	ldr	r2, [pc, #404]	; (800f878 <UART_SetConfig+0x384>)
 800f6e2:	fba2 2303 	umull	r2, r3, r2, r3
 800f6e6:	095b      	lsrs	r3, r3, #5
 800f6e8:	f003 0207 	and.w	r2, r3, #7
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	681b      	ldr	r3, [r3, #0]
 800f6f0:	4442      	add	r2, r8
 800f6f2:	609a      	str	r2, [r3, #8]
 800f6f4:	e26f      	b.n	800fbd6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800f6f6:	f7fe ff63 	bl	800e5c0 <HAL_RCC_GetPCLK1Freq>
 800f6fa:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800f6fc:	68bb      	ldr	r3, [r7, #8]
 800f6fe:	461d      	mov	r5, r3
 800f700:	f04f 0600 	mov.w	r6, #0
 800f704:	46a8      	mov	r8, r5
 800f706:	46b1      	mov	r9, r6
 800f708:	eb18 0308 	adds.w	r3, r8, r8
 800f70c:	eb49 0409 	adc.w	r4, r9, r9
 800f710:	4698      	mov	r8, r3
 800f712:	46a1      	mov	r9, r4
 800f714:	eb18 0805 	adds.w	r8, r8, r5
 800f718:	eb49 0906 	adc.w	r9, r9, r6
 800f71c:	f04f 0100 	mov.w	r1, #0
 800f720:	f04f 0200 	mov.w	r2, #0
 800f724:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800f728:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800f72c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800f730:	4688      	mov	r8, r1
 800f732:	4691      	mov	r9, r2
 800f734:	eb18 0005 	adds.w	r0, r8, r5
 800f738:	eb49 0106 	adc.w	r1, r9, r6
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	685b      	ldr	r3, [r3, #4]
 800f740:	461d      	mov	r5, r3
 800f742:	f04f 0600 	mov.w	r6, #0
 800f746:	196b      	adds	r3, r5, r5
 800f748:	eb46 0406 	adc.w	r4, r6, r6
 800f74c:	461a      	mov	r2, r3
 800f74e:	4623      	mov	r3, r4
 800f750:	f7f0 fda6 	bl	80002a0 <__aeabi_uldivmod>
 800f754:	4603      	mov	r3, r0
 800f756:	460c      	mov	r4, r1
 800f758:	461a      	mov	r2, r3
 800f75a:	4b47      	ldr	r3, [pc, #284]	; (800f878 <UART_SetConfig+0x384>)
 800f75c:	fba3 2302 	umull	r2, r3, r3, r2
 800f760:	095b      	lsrs	r3, r3, #5
 800f762:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800f766:	68bb      	ldr	r3, [r7, #8]
 800f768:	461d      	mov	r5, r3
 800f76a:	f04f 0600 	mov.w	r6, #0
 800f76e:	46a9      	mov	r9, r5
 800f770:	46b2      	mov	sl, r6
 800f772:	eb19 0309 	adds.w	r3, r9, r9
 800f776:	eb4a 040a 	adc.w	r4, sl, sl
 800f77a:	4699      	mov	r9, r3
 800f77c:	46a2      	mov	sl, r4
 800f77e:	eb19 0905 	adds.w	r9, r9, r5
 800f782:	eb4a 0a06 	adc.w	sl, sl, r6
 800f786:	f04f 0100 	mov.w	r1, #0
 800f78a:	f04f 0200 	mov.w	r2, #0
 800f78e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f792:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f796:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f79a:	4689      	mov	r9, r1
 800f79c:	4692      	mov	sl, r2
 800f79e:	eb19 0005 	adds.w	r0, r9, r5
 800f7a2:	eb4a 0106 	adc.w	r1, sl, r6
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	685b      	ldr	r3, [r3, #4]
 800f7aa:	461d      	mov	r5, r3
 800f7ac:	f04f 0600 	mov.w	r6, #0
 800f7b0:	196b      	adds	r3, r5, r5
 800f7b2:	eb46 0406 	adc.w	r4, r6, r6
 800f7b6:	461a      	mov	r2, r3
 800f7b8:	4623      	mov	r3, r4
 800f7ba:	f7f0 fd71 	bl	80002a0 <__aeabi_uldivmod>
 800f7be:	4603      	mov	r3, r0
 800f7c0:	460c      	mov	r4, r1
 800f7c2:	461a      	mov	r2, r3
 800f7c4:	4b2c      	ldr	r3, [pc, #176]	; (800f878 <UART_SetConfig+0x384>)
 800f7c6:	fba3 1302 	umull	r1, r3, r3, r2
 800f7ca:	095b      	lsrs	r3, r3, #5
 800f7cc:	2164      	movs	r1, #100	; 0x64
 800f7ce:	fb01 f303 	mul.w	r3, r1, r3
 800f7d2:	1ad3      	subs	r3, r2, r3
 800f7d4:	00db      	lsls	r3, r3, #3
 800f7d6:	3332      	adds	r3, #50	; 0x32
 800f7d8:	4a27      	ldr	r2, [pc, #156]	; (800f878 <UART_SetConfig+0x384>)
 800f7da:	fba2 2303 	umull	r2, r3, r2, r3
 800f7de:	095b      	lsrs	r3, r3, #5
 800f7e0:	005b      	lsls	r3, r3, #1
 800f7e2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800f7e6:	4498      	add	r8, r3
 800f7e8:	68bb      	ldr	r3, [r7, #8]
 800f7ea:	461d      	mov	r5, r3
 800f7ec:	f04f 0600 	mov.w	r6, #0
 800f7f0:	46a9      	mov	r9, r5
 800f7f2:	46b2      	mov	sl, r6
 800f7f4:	eb19 0309 	adds.w	r3, r9, r9
 800f7f8:	eb4a 040a 	adc.w	r4, sl, sl
 800f7fc:	4699      	mov	r9, r3
 800f7fe:	46a2      	mov	sl, r4
 800f800:	eb19 0905 	adds.w	r9, r9, r5
 800f804:	eb4a 0a06 	adc.w	sl, sl, r6
 800f808:	f04f 0100 	mov.w	r1, #0
 800f80c:	f04f 0200 	mov.w	r2, #0
 800f810:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f814:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f818:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f81c:	4689      	mov	r9, r1
 800f81e:	4692      	mov	sl, r2
 800f820:	eb19 0005 	adds.w	r0, r9, r5
 800f824:	eb4a 0106 	adc.w	r1, sl, r6
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	685b      	ldr	r3, [r3, #4]
 800f82c:	461d      	mov	r5, r3
 800f82e:	f04f 0600 	mov.w	r6, #0
 800f832:	196b      	adds	r3, r5, r5
 800f834:	eb46 0406 	adc.w	r4, r6, r6
 800f838:	461a      	mov	r2, r3
 800f83a:	4623      	mov	r3, r4
 800f83c:	f7f0 fd30 	bl	80002a0 <__aeabi_uldivmod>
 800f840:	4603      	mov	r3, r0
 800f842:	460c      	mov	r4, r1
 800f844:	461a      	mov	r2, r3
 800f846:	4b0c      	ldr	r3, [pc, #48]	; (800f878 <UART_SetConfig+0x384>)
 800f848:	fba3 1302 	umull	r1, r3, r3, r2
 800f84c:	095b      	lsrs	r3, r3, #5
 800f84e:	2164      	movs	r1, #100	; 0x64
 800f850:	fb01 f303 	mul.w	r3, r1, r3
 800f854:	1ad3      	subs	r3, r2, r3
 800f856:	00db      	lsls	r3, r3, #3
 800f858:	3332      	adds	r3, #50	; 0x32
 800f85a:	4a07      	ldr	r2, [pc, #28]	; (800f878 <UART_SetConfig+0x384>)
 800f85c:	fba2 2303 	umull	r2, r3, r2, r3
 800f860:	095b      	lsrs	r3, r3, #5
 800f862:	f003 0207 	and.w	r2, r3, #7
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	681b      	ldr	r3, [r3, #0]
 800f86a:	4442      	add	r2, r8
 800f86c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800f86e:	e1b2      	b.n	800fbd6 <UART_SetConfig+0x6e2>
 800f870:	40011000 	.word	0x40011000
 800f874:	40011400 	.word	0x40011400
 800f878:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	681b      	ldr	r3, [r3, #0]
 800f880:	4ad7      	ldr	r2, [pc, #860]	; (800fbe0 <UART_SetConfig+0x6ec>)
 800f882:	4293      	cmp	r3, r2
 800f884:	d005      	beq.n	800f892 <UART_SetConfig+0x39e>
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	681b      	ldr	r3, [r3, #0]
 800f88a:	4ad6      	ldr	r2, [pc, #856]	; (800fbe4 <UART_SetConfig+0x6f0>)
 800f88c:	4293      	cmp	r3, r2
 800f88e:	f040 80d1 	bne.w	800fa34 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800f892:	f7fe fea9 	bl	800e5e8 <HAL_RCC_GetPCLK2Freq>
 800f896:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800f898:	68bb      	ldr	r3, [r7, #8]
 800f89a:	469a      	mov	sl, r3
 800f89c:	f04f 0b00 	mov.w	fp, #0
 800f8a0:	46d0      	mov	r8, sl
 800f8a2:	46d9      	mov	r9, fp
 800f8a4:	eb18 0308 	adds.w	r3, r8, r8
 800f8a8:	eb49 0409 	adc.w	r4, r9, r9
 800f8ac:	4698      	mov	r8, r3
 800f8ae:	46a1      	mov	r9, r4
 800f8b0:	eb18 080a 	adds.w	r8, r8, sl
 800f8b4:	eb49 090b 	adc.w	r9, r9, fp
 800f8b8:	f04f 0100 	mov.w	r1, #0
 800f8bc:	f04f 0200 	mov.w	r2, #0
 800f8c0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800f8c4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800f8c8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800f8cc:	4688      	mov	r8, r1
 800f8ce:	4691      	mov	r9, r2
 800f8d0:	eb1a 0508 	adds.w	r5, sl, r8
 800f8d4:	eb4b 0609 	adc.w	r6, fp, r9
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	685b      	ldr	r3, [r3, #4]
 800f8dc:	4619      	mov	r1, r3
 800f8de:	f04f 0200 	mov.w	r2, #0
 800f8e2:	f04f 0300 	mov.w	r3, #0
 800f8e6:	f04f 0400 	mov.w	r4, #0
 800f8ea:	0094      	lsls	r4, r2, #2
 800f8ec:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800f8f0:	008b      	lsls	r3, r1, #2
 800f8f2:	461a      	mov	r2, r3
 800f8f4:	4623      	mov	r3, r4
 800f8f6:	4628      	mov	r0, r5
 800f8f8:	4631      	mov	r1, r6
 800f8fa:	f7f0 fcd1 	bl	80002a0 <__aeabi_uldivmod>
 800f8fe:	4603      	mov	r3, r0
 800f900:	460c      	mov	r4, r1
 800f902:	461a      	mov	r2, r3
 800f904:	4bb8      	ldr	r3, [pc, #736]	; (800fbe8 <UART_SetConfig+0x6f4>)
 800f906:	fba3 2302 	umull	r2, r3, r3, r2
 800f90a:	095b      	lsrs	r3, r3, #5
 800f90c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800f910:	68bb      	ldr	r3, [r7, #8]
 800f912:	469b      	mov	fp, r3
 800f914:	f04f 0c00 	mov.w	ip, #0
 800f918:	46d9      	mov	r9, fp
 800f91a:	46e2      	mov	sl, ip
 800f91c:	eb19 0309 	adds.w	r3, r9, r9
 800f920:	eb4a 040a 	adc.w	r4, sl, sl
 800f924:	4699      	mov	r9, r3
 800f926:	46a2      	mov	sl, r4
 800f928:	eb19 090b 	adds.w	r9, r9, fp
 800f92c:	eb4a 0a0c 	adc.w	sl, sl, ip
 800f930:	f04f 0100 	mov.w	r1, #0
 800f934:	f04f 0200 	mov.w	r2, #0
 800f938:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f93c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f940:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f944:	4689      	mov	r9, r1
 800f946:	4692      	mov	sl, r2
 800f948:	eb1b 0509 	adds.w	r5, fp, r9
 800f94c:	eb4c 060a 	adc.w	r6, ip, sl
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	685b      	ldr	r3, [r3, #4]
 800f954:	4619      	mov	r1, r3
 800f956:	f04f 0200 	mov.w	r2, #0
 800f95a:	f04f 0300 	mov.w	r3, #0
 800f95e:	f04f 0400 	mov.w	r4, #0
 800f962:	0094      	lsls	r4, r2, #2
 800f964:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800f968:	008b      	lsls	r3, r1, #2
 800f96a:	461a      	mov	r2, r3
 800f96c:	4623      	mov	r3, r4
 800f96e:	4628      	mov	r0, r5
 800f970:	4631      	mov	r1, r6
 800f972:	f7f0 fc95 	bl	80002a0 <__aeabi_uldivmod>
 800f976:	4603      	mov	r3, r0
 800f978:	460c      	mov	r4, r1
 800f97a:	461a      	mov	r2, r3
 800f97c:	4b9a      	ldr	r3, [pc, #616]	; (800fbe8 <UART_SetConfig+0x6f4>)
 800f97e:	fba3 1302 	umull	r1, r3, r3, r2
 800f982:	095b      	lsrs	r3, r3, #5
 800f984:	2164      	movs	r1, #100	; 0x64
 800f986:	fb01 f303 	mul.w	r3, r1, r3
 800f98a:	1ad3      	subs	r3, r2, r3
 800f98c:	011b      	lsls	r3, r3, #4
 800f98e:	3332      	adds	r3, #50	; 0x32
 800f990:	4a95      	ldr	r2, [pc, #596]	; (800fbe8 <UART_SetConfig+0x6f4>)
 800f992:	fba2 2303 	umull	r2, r3, r2, r3
 800f996:	095b      	lsrs	r3, r3, #5
 800f998:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f99c:	4498      	add	r8, r3
 800f99e:	68bb      	ldr	r3, [r7, #8]
 800f9a0:	469b      	mov	fp, r3
 800f9a2:	f04f 0c00 	mov.w	ip, #0
 800f9a6:	46d9      	mov	r9, fp
 800f9a8:	46e2      	mov	sl, ip
 800f9aa:	eb19 0309 	adds.w	r3, r9, r9
 800f9ae:	eb4a 040a 	adc.w	r4, sl, sl
 800f9b2:	4699      	mov	r9, r3
 800f9b4:	46a2      	mov	sl, r4
 800f9b6:	eb19 090b 	adds.w	r9, r9, fp
 800f9ba:	eb4a 0a0c 	adc.w	sl, sl, ip
 800f9be:	f04f 0100 	mov.w	r1, #0
 800f9c2:	f04f 0200 	mov.w	r2, #0
 800f9c6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f9ca:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f9ce:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f9d2:	4689      	mov	r9, r1
 800f9d4:	4692      	mov	sl, r2
 800f9d6:	eb1b 0509 	adds.w	r5, fp, r9
 800f9da:	eb4c 060a 	adc.w	r6, ip, sl
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	685b      	ldr	r3, [r3, #4]
 800f9e2:	4619      	mov	r1, r3
 800f9e4:	f04f 0200 	mov.w	r2, #0
 800f9e8:	f04f 0300 	mov.w	r3, #0
 800f9ec:	f04f 0400 	mov.w	r4, #0
 800f9f0:	0094      	lsls	r4, r2, #2
 800f9f2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800f9f6:	008b      	lsls	r3, r1, #2
 800f9f8:	461a      	mov	r2, r3
 800f9fa:	4623      	mov	r3, r4
 800f9fc:	4628      	mov	r0, r5
 800f9fe:	4631      	mov	r1, r6
 800fa00:	f7f0 fc4e 	bl	80002a0 <__aeabi_uldivmod>
 800fa04:	4603      	mov	r3, r0
 800fa06:	460c      	mov	r4, r1
 800fa08:	461a      	mov	r2, r3
 800fa0a:	4b77      	ldr	r3, [pc, #476]	; (800fbe8 <UART_SetConfig+0x6f4>)
 800fa0c:	fba3 1302 	umull	r1, r3, r3, r2
 800fa10:	095b      	lsrs	r3, r3, #5
 800fa12:	2164      	movs	r1, #100	; 0x64
 800fa14:	fb01 f303 	mul.w	r3, r1, r3
 800fa18:	1ad3      	subs	r3, r2, r3
 800fa1a:	011b      	lsls	r3, r3, #4
 800fa1c:	3332      	adds	r3, #50	; 0x32
 800fa1e:	4a72      	ldr	r2, [pc, #456]	; (800fbe8 <UART_SetConfig+0x6f4>)
 800fa20:	fba2 2303 	umull	r2, r3, r2, r3
 800fa24:	095b      	lsrs	r3, r3, #5
 800fa26:	f003 020f 	and.w	r2, r3, #15
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	681b      	ldr	r3, [r3, #0]
 800fa2e:	4442      	add	r2, r8
 800fa30:	609a      	str	r2, [r3, #8]
 800fa32:	e0d0      	b.n	800fbd6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800fa34:	f7fe fdc4 	bl	800e5c0 <HAL_RCC_GetPCLK1Freq>
 800fa38:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800fa3a:	68bb      	ldr	r3, [r7, #8]
 800fa3c:	469a      	mov	sl, r3
 800fa3e:	f04f 0b00 	mov.w	fp, #0
 800fa42:	46d0      	mov	r8, sl
 800fa44:	46d9      	mov	r9, fp
 800fa46:	eb18 0308 	adds.w	r3, r8, r8
 800fa4a:	eb49 0409 	adc.w	r4, r9, r9
 800fa4e:	4698      	mov	r8, r3
 800fa50:	46a1      	mov	r9, r4
 800fa52:	eb18 080a 	adds.w	r8, r8, sl
 800fa56:	eb49 090b 	adc.w	r9, r9, fp
 800fa5a:	f04f 0100 	mov.w	r1, #0
 800fa5e:	f04f 0200 	mov.w	r2, #0
 800fa62:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800fa66:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800fa6a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800fa6e:	4688      	mov	r8, r1
 800fa70:	4691      	mov	r9, r2
 800fa72:	eb1a 0508 	adds.w	r5, sl, r8
 800fa76:	eb4b 0609 	adc.w	r6, fp, r9
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	685b      	ldr	r3, [r3, #4]
 800fa7e:	4619      	mov	r1, r3
 800fa80:	f04f 0200 	mov.w	r2, #0
 800fa84:	f04f 0300 	mov.w	r3, #0
 800fa88:	f04f 0400 	mov.w	r4, #0
 800fa8c:	0094      	lsls	r4, r2, #2
 800fa8e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800fa92:	008b      	lsls	r3, r1, #2
 800fa94:	461a      	mov	r2, r3
 800fa96:	4623      	mov	r3, r4
 800fa98:	4628      	mov	r0, r5
 800fa9a:	4631      	mov	r1, r6
 800fa9c:	f7f0 fc00 	bl	80002a0 <__aeabi_uldivmod>
 800faa0:	4603      	mov	r3, r0
 800faa2:	460c      	mov	r4, r1
 800faa4:	461a      	mov	r2, r3
 800faa6:	4b50      	ldr	r3, [pc, #320]	; (800fbe8 <UART_SetConfig+0x6f4>)
 800faa8:	fba3 2302 	umull	r2, r3, r3, r2
 800faac:	095b      	lsrs	r3, r3, #5
 800faae:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800fab2:	68bb      	ldr	r3, [r7, #8]
 800fab4:	469b      	mov	fp, r3
 800fab6:	f04f 0c00 	mov.w	ip, #0
 800faba:	46d9      	mov	r9, fp
 800fabc:	46e2      	mov	sl, ip
 800fabe:	eb19 0309 	adds.w	r3, r9, r9
 800fac2:	eb4a 040a 	adc.w	r4, sl, sl
 800fac6:	4699      	mov	r9, r3
 800fac8:	46a2      	mov	sl, r4
 800faca:	eb19 090b 	adds.w	r9, r9, fp
 800face:	eb4a 0a0c 	adc.w	sl, sl, ip
 800fad2:	f04f 0100 	mov.w	r1, #0
 800fad6:	f04f 0200 	mov.w	r2, #0
 800fada:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800fade:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800fae2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800fae6:	4689      	mov	r9, r1
 800fae8:	4692      	mov	sl, r2
 800faea:	eb1b 0509 	adds.w	r5, fp, r9
 800faee:	eb4c 060a 	adc.w	r6, ip, sl
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	685b      	ldr	r3, [r3, #4]
 800faf6:	4619      	mov	r1, r3
 800faf8:	f04f 0200 	mov.w	r2, #0
 800fafc:	f04f 0300 	mov.w	r3, #0
 800fb00:	f04f 0400 	mov.w	r4, #0
 800fb04:	0094      	lsls	r4, r2, #2
 800fb06:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800fb0a:	008b      	lsls	r3, r1, #2
 800fb0c:	461a      	mov	r2, r3
 800fb0e:	4623      	mov	r3, r4
 800fb10:	4628      	mov	r0, r5
 800fb12:	4631      	mov	r1, r6
 800fb14:	f7f0 fbc4 	bl	80002a0 <__aeabi_uldivmod>
 800fb18:	4603      	mov	r3, r0
 800fb1a:	460c      	mov	r4, r1
 800fb1c:	461a      	mov	r2, r3
 800fb1e:	4b32      	ldr	r3, [pc, #200]	; (800fbe8 <UART_SetConfig+0x6f4>)
 800fb20:	fba3 1302 	umull	r1, r3, r3, r2
 800fb24:	095b      	lsrs	r3, r3, #5
 800fb26:	2164      	movs	r1, #100	; 0x64
 800fb28:	fb01 f303 	mul.w	r3, r1, r3
 800fb2c:	1ad3      	subs	r3, r2, r3
 800fb2e:	011b      	lsls	r3, r3, #4
 800fb30:	3332      	adds	r3, #50	; 0x32
 800fb32:	4a2d      	ldr	r2, [pc, #180]	; (800fbe8 <UART_SetConfig+0x6f4>)
 800fb34:	fba2 2303 	umull	r2, r3, r2, r3
 800fb38:	095b      	lsrs	r3, r3, #5
 800fb3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fb3e:	4498      	add	r8, r3
 800fb40:	68bb      	ldr	r3, [r7, #8]
 800fb42:	469b      	mov	fp, r3
 800fb44:	f04f 0c00 	mov.w	ip, #0
 800fb48:	46d9      	mov	r9, fp
 800fb4a:	46e2      	mov	sl, ip
 800fb4c:	eb19 0309 	adds.w	r3, r9, r9
 800fb50:	eb4a 040a 	adc.w	r4, sl, sl
 800fb54:	4699      	mov	r9, r3
 800fb56:	46a2      	mov	sl, r4
 800fb58:	eb19 090b 	adds.w	r9, r9, fp
 800fb5c:	eb4a 0a0c 	adc.w	sl, sl, ip
 800fb60:	f04f 0100 	mov.w	r1, #0
 800fb64:	f04f 0200 	mov.w	r2, #0
 800fb68:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800fb6c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800fb70:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800fb74:	4689      	mov	r9, r1
 800fb76:	4692      	mov	sl, r2
 800fb78:	eb1b 0509 	adds.w	r5, fp, r9
 800fb7c:	eb4c 060a 	adc.w	r6, ip, sl
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	685b      	ldr	r3, [r3, #4]
 800fb84:	4619      	mov	r1, r3
 800fb86:	f04f 0200 	mov.w	r2, #0
 800fb8a:	f04f 0300 	mov.w	r3, #0
 800fb8e:	f04f 0400 	mov.w	r4, #0
 800fb92:	0094      	lsls	r4, r2, #2
 800fb94:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800fb98:	008b      	lsls	r3, r1, #2
 800fb9a:	461a      	mov	r2, r3
 800fb9c:	4623      	mov	r3, r4
 800fb9e:	4628      	mov	r0, r5
 800fba0:	4631      	mov	r1, r6
 800fba2:	f7f0 fb7d 	bl	80002a0 <__aeabi_uldivmod>
 800fba6:	4603      	mov	r3, r0
 800fba8:	460c      	mov	r4, r1
 800fbaa:	461a      	mov	r2, r3
 800fbac:	4b0e      	ldr	r3, [pc, #56]	; (800fbe8 <UART_SetConfig+0x6f4>)
 800fbae:	fba3 1302 	umull	r1, r3, r3, r2
 800fbb2:	095b      	lsrs	r3, r3, #5
 800fbb4:	2164      	movs	r1, #100	; 0x64
 800fbb6:	fb01 f303 	mul.w	r3, r1, r3
 800fbba:	1ad3      	subs	r3, r2, r3
 800fbbc:	011b      	lsls	r3, r3, #4
 800fbbe:	3332      	adds	r3, #50	; 0x32
 800fbc0:	4a09      	ldr	r2, [pc, #36]	; (800fbe8 <UART_SetConfig+0x6f4>)
 800fbc2:	fba2 2303 	umull	r2, r3, r2, r3
 800fbc6:	095b      	lsrs	r3, r3, #5
 800fbc8:	f003 020f 	and.w	r2, r3, #15
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	681b      	ldr	r3, [r3, #0]
 800fbd0:	4442      	add	r2, r8
 800fbd2:	609a      	str	r2, [r3, #8]
}
 800fbd4:	e7ff      	b.n	800fbd6 <UART_SetConfig+0x6e2>
 800fbd6:	bf00      	nop
 800fbd8:	3714      	adds	r7, #20
 800fbda:	46bd      	mov	sp, r7
 800fbdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fbe0:	40011000 	.word	0x40011000
 800fbe4:	40011400 	.word	0x40011400
 800fbe8:	51eb851f 	.word	0x51eb851f

0800fbec <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800fbec:	b480      	push	{r7}
 800fbee:	b085      	sub	sp, #20
 800fbf0:	af00      	add	r7, sp, #0
 800fbf2:	6078      	str	r0, [r7, #4]
 800fbf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 800fbf6:	2300      	movs	r3, #0
 800fbf8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 800fbfa:	2300      	movs	r3, #0
 800fbfc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800fbfe:	683b      	ldr	r3, [r7, #0]
 800fc00:	681b      	ldr	r3, [r3, #0]
 800fc02:	2b01      	cmp	r3, #1
 800fc04:	d029      	beq.n	800fc5a <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	681b      	ldr	r3, [r3, #0]
 800fc0a:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800fc0c:	68fb      	ldr	r3, [r7, #12]
 800fc0e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800fc12:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800fc16:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800fc18:	683b      	ldr	r3, [r7, #0]
 800fc1a:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 800fc1c:	683b      	ldr	r3, [r7, #0]
 800fc1e:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800fc20:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 800fc22:	683b      	ldr	r3, [r7, #0]
 800fc24:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 800fc26:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 800fc28:	683b      	ldr	r3, [r7, #0]
 800fc2a:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 800fc2c:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 800fc2e:	683b      	ldr	r3, [r7, #0]
 800fc30:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 800fc32:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 800fc34:	683b      	ldr	r3, [r7, #0]
 800fc36:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 800fc38:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 800fc3a:	683b      	ldr	r3, [r7, #0]
 800fc3c:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 800fc3e:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 800fc40:	683b      	ldr	r3, [r7, #0]
 800fc42:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 800fc44:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 800fc46:	683b      	ldr	r3, [r7, #0]
 800fc48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 800fc4a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800fc4c:	68fa      	ldr	r2, [r7, #12]
 800fc4e:	4313      	orrs	r3, r2
 800fc50:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	68fa      	ldr	r2, [r7, #12]
 800fc56:	601a      	str	r2, [r3, #0]
 800fc58:	e034      	b.n	800fcc4 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	681b      	ldr	r3, [r3, #0]
 800fc5e:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800fc60:	68fb      	ldr	r3, [r7, #12]
 800fc62:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800fc66:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800fc68:	683b      	ldr	r3, [r7, #0]
 800fc6a:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800fc6c:	683b      	ldr	r3, [r7, #0]
 800fc6e:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800fc70:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 800fc72:	683b      	ldr	r3, [r7, #0]
 800fc74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800fc76:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800fc78:	68fa      	ldr	r2, [r7, #12]
 800fc7a:	4313      	orrs	r3, r2
 800fc7c:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	685b      	ldr	r3, [r3, #4]
 800fc82:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800fc84:	68bb      	ldr	r3, [r7, #8]
 800fc86:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800fc8a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800fc8e:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800fc90:	683b      	ldr	r3, [r7, #0]
 800fc92:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 800fc94:	683b      	ldr	r3, [r7, #0]
 800fc96:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800fc98:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 800fc9a:	683b      	ldr	r3, [r7, #0]
 800fc9c:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 800fc9e:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 800fca0:	683b      	ldr	r3, [r7, #0]
 800fca2:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 800fca4:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 800fca6:	683b      	ldr	r3, [r7, #0]
 800fca8:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 800fcaa:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800fcac:	683b      	ldr	r3, [r7, #0]
 800fcae:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 800fcb0:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800fcb2:	68ba      	ldr	r2, [r7, #8]
 800fcb4:	4313      	orrs	r3, r2
 800fcb6:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	68fa      	ldr	r2, [r7, #12]
 800fcbc:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	68ba      	ldr	r2, [r7, #8]
 800fcc2:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 800fcc4:	2300      	movs	r3, #0
}
 800fcc6:	4618      	mov	r0, r3
 800fcc8:	3714      	adds	r7, #20
 800fcca:	46bd      	mov	sp, r7
 800fccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcd0:	4770      	bx	lr

0800fcd2 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800fcd2:	b480      	push	{r7}
 800fcd4:	b087      	sub	sp, #28
 800fcd6:	af00      	add	r7, sp, #0
 800fcd8:	60f8      	str	r0, [r7, #12]
 800fcda:	60b9      	str	r1, [r7, #8]
 800fcdc:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 800fcde:	2300      	movs	r3, #0
 800fce0:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 800fce2:	2300      	movs	r3, #0
 800fce4:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	2b01      	cmp	r3, #1
 800fcea:	d02e      	beq.n	800fd4a <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800fcec:	68fb      	ldr	r3, [r7, #12]
 800fcee:	689b      	ldr	r3, [r3, #8]
 800fcf0:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800fcf2:	697b      	ldr	r3, [r7, #20]
 800fcf4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800fcf8:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800fcfa:	68bb      	ldr	r3, [r7, #8]
 800fcfc:	681b      	ldr	r3, [r3, #0]
 800fcfe:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 800fd00:	68bb      	ldr	r3, [r7, #8]
 800fd02:	685b      	ldr	r3, [r3, #4]
 800fd04:	3b01      	subs	r3, #1
 800fd06:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800fd08:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 800fd0a:	68bb      	ldr	r3, [r7, #8]
 800fd0c:	689b      	ldr	r3, [r3, #8]
 800fd0e:	3b01      	subs	r3, #1
 800fd10:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 800fd12:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 800fd14:	68bb      	ldr	r3, [r7, #8]
 800fd16:	68db      	ldr	r3, [r3, #12]
 800fd18:	3b01      	subs	r3, #1
 800fd1a:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 800fd1c:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 800fd1e:	68bb      	ldr	r3, [r7, #8]
 800fd20:	691b      	ldr	r3, [r3, #16]
 800fd22:	3b01      	subs	r3, #1
 800fd24:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 800fd26:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 800fd28:	68bb      	ldr	r3, [r7, #8]
 800fd2a:	695b      	ldr	r3, [r3, #20]
 800fd2c:	3b01      	subs	r3, #1
 800fd2e:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 800fd30:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 800fd32:	68bb      	ldr	r3, [r7, #8]
 800fd34:	699b      	ldr	r3, [r3, #24]
 800fd36:	3b01      	subs	r3, #1
 800fd38:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800fd3a:	4313      	orrs	r3, r2
 800fd3c:	697a      	ldr	r2, [r7, #20]
 800fd3e:	4313      	orrs	r3, r2
 800fd40:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800fd42:	68fb      	ldr	r3, [r7, #12]
 800fd44:	697a      	ldr	r2, [r7, #20]
 800fd46:	609a      	str	r2, [r3, #8]
 800fd48:	e03b      	b.n	800fdc2 <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800fd4a:	68fb      	ldr	r3, [r7, #12]
 800fd4c:	689b      	ldr	r3, [r3, #8]
 800fd4e:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800fd50:	697b      	ldr	r3, [r7, #20]
 800fd52:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800fd56:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800fd5a:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 800fd5c:	68bb      	ldr	r3, [r7, #8]
 800fd5e:	68db      	ldr	r3, [r3, #12]
 800fd60:	3b01      	subs	r3, #1
 800fd62:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 800fd64:	68bb      	ldr	r3, [r7, #8]
 800fd66:	695b      	ldr	r3, [r3, #20]
 800fd68:	3b01      	subs	r3, #1
 800fd6a:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 800fd6c:	4313      	orrs	r3, r2
 800fd6e:	697a      	ldr	r2, [r7, #20]
 800fd70:	4313      	orrs	r3, r2
 800fd72:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800fd74:	68fb      	ldr	r3, [r7, #12]
 800fd76:	68db      	ldr	r3, [r3, #12]
 800fd78:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800fd7a:	693b      	ldr	r3, [r7, #16]
 800fd7c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800fd80:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800fd82:	68bb      	ldr	r3, [r7, #8]
 800fd84:	681b      	ldr	r3, [r3, #0]
 800fd86:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 800fd88:	68bb      	ldr	r3, [r7, #8]
 800fd8a:	685b      	ldr	r3, [r3, #4]
 800fd8c:	3b01      	subs	r3, #1
 800fd8e:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800fd90:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 800fd92:	68bb      	ldr	r3, [r7, #8]
 800fd94:	689b      	ldr	r3, [r3, #8]
 800fd96:	3b01      	subs	r3, #1
 800fd98:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 800fd9a:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 800fd9c:	68bb      	ldr	r3, [r7, #8]
 800fd9e:	691b      	ldr	r3, [r3, #16]
 800fda0:	3b01      	subs	r3, #1
 800fda2:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 800fda4:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 800fda6:	68bb      	ldr	r3, [r7, #8]
 800fda8:	699b      	ldr	r3, [r3, #24]
 800fdaa:	3b01      	subs	r3, #1
 800fdac:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800fdae:	4313      	orrs	r3, r2
 800fdb0:	693a      	ldr	r2, [r7, #16]
 800fdb2:	4313      	orrs	r3, r2
 800fdb4:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800fdb6:	68fb      	ldr	r3, [r7, #12]
 800fdb8:	697a      	ldr	r2, [r7, #20]
 800fdba:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800fdbc:	68fb      	ldr	r3, [r7, #12]
 800fdbe:	693a      	ldr	r2, [r7, #16]
 800fdc0:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 800fdc2:	2300      	movs	r3, #0
}
 800fdc4:	4618      	mov	r0, r3
 800fdc6:	371c      	adds	r7, #28
 800fdc8:	46bd      	mov	sp, r7
 800fdca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdce:	4770      	bx	lr

0800fdd0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800fdd0:	b480      	push	{r7}
 800fdd2:	b085      	sub	sp, #20
 800fdd4:	af00      	add	r7, sp, #0
 800fdd6:	4603      	mov	r3, r0
 800fdd8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800fdda:	2300      	movs	r3, #0
 800fddc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800fdde:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800fde2:	2b84      	cmp	r3, #132	; 0x84
 800fde4:	d005      	beq.n	800fdf2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800fde6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800fdea:	68fb      	ldr	r3, [r7, #12]
 800fdec:	4413      	add	r3, r2
 800fdee:	3303      	adds	r3, #3
 800fdf0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800fdf2:	68fb      	ldr	r3, [r7, #12]
}
 800fdf4:	4618      	mov	r0, r3
 800fdf6:	3714      	adds	r7, #20
 800fdf8:	46bd      	mov	sp, r7
 800fdfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdfe:	4770      	bx	lr

0800fe00 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800fe00:	b580      	push	{r7, lr}
 800fe02:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800fe04:	f001 fc58 	bl	80116b8 <vTaskStartScheduler>
  
  return osOK;
 800fe08:	2300      	movs	r3, #0
}
 800fe0a:	4618      	mov	r0, r3
 800fe0c:	bd80      	pop	{r7, pc}

0800fe0e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800fe0e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fe10:	b089      	sub	sp, #36	; 0x24
 800fe12:	af04      	add	r7, sp, #16
 800fe14:	6078      	str	r0, [r7, #4]
 800fe16:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	695b      	ldr	r3, [r3, #20]
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	d020      	beq.n	800fe62 <osThreadCreate+0x54>
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	699b      	ldr	r3, [r3, #24]
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	d01c      	beq.n	800fe62 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	685c      	ldr	r4, [r3, #4]
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	681d      	ldr	r5, [r3, #0]
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	691e      	ldr	r6, [r3, #16]
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800fe3a:	4618      	mov	r0, r3
 800fe3c:	f7ff ffc8 	bl	800fdd0 <makeFreeRtosPriority>
 800fe40:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	695b      	ldr	r3, [r3, #20]
 800fe46:	687a      	ldr	r2, [r7, #4]
 800fe48:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800fe4a:	9202      	str	r2, [sp, #8]
 800fe4c:	9301      	str	r3, [sp, #4]
 800fe4e:	9100      	str	r1, [sp, #0]
 800fe50:	683b      	ldr	r3, [r7, #0]
 800fe52:	4632      	mov	r2, r6
 800fe54:	4629      	mov	r1, r5
 800fe56:	4620      	mov	r0, r4
 800fe58:	f001 fa60 	bl	801131c <xTaskCreateStatic>
 800fe5c:	4603      	mov	r3, r0
 800fe5e:	60fb      	str	r3, [r7, #12]
 800fe60:	e01c      	b.n	800fe9c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	685c      	ldr	r4, [r3, #4]
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800fe6e:	b29e      	uxth	r6, r3
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800fe76:	4618      	mov	r0, r3
 800fe78:	f7ff ffaa 	bl	800fdd0 <makeFreeRtosPriority>
 800fe7c:	4602      	mov	r2, r0
 800fe7e:	f107 030c 	add.w	r3, r7, #12
 800fe82:	9301      	str	r3, [sp, #4]
 800fe84:	9200      	str	r2, [sp, #0]
 800fe86:	683b      	ldr	r3, [r7, #0]
 800fe88:	4632      	mov	r2, r6
 800fe8a:	4629      	mov	r1, r5
 800fe8c:	4620      	mov	r0, r4
 800fe8e:	f001 fa9f 	bl	80113d0 <xTaskCreate>
 800fe92:	4603      	mov	r3, r0
 800fe94:	2b01      	cmp	r3, #1
 800fe96:	d001      	beq.n	800fe9c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800fe98:	2300      	movs	r3, #0
 800fe9a:	e000      	b.n	800fe9e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800fe9c:	68fb      	ldr	r3, [r7, #12]
}
 800fe9e:	4618      	mov	r0, r3
 800fea0:	3714      	adds	r7, #20
 800fea2:	46bd      	mov	sp, r7
 800fea4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fea6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800fea6:	b580      	push	{r7, lr}
 800fea8:	b084      	sub	sp, #16
 800feaa:	af00      	add	r7, sp, #0
 800feac:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800feb2:	68fb      	ldr	r3, [r7, #12]
 800feb4:	2b00      	cmp	r3, #0
 800feb6:	d001      	beq.n	800febc <osDelay+0x16>
 800feb8:	68fb      	ldr	r3, [r7, #12]
 800feba:	e000      	b.n	800febe <osDelay+0x18>
 800febc:	2301      	movs	r3, #1
 800febe:	4618      	mov	r0, r3
 800fec0:	f001 fbc6 	bl	8011650 <vTaskDelay>
  
  return osOK;
 800fec4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800fec6:	4618      	mov	r0, r3
 800fec8:	3710      	adds	r7, #16
 800feca:	46bd      	mov	sp, r7
 800fecc:	bd80      	pop	{r7, pc}
	...

0800fed0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800fed0:	b580      	push	{r7, lr}
 800fed2:	b08a      	sub	sp, #40	; 0x28
 800fed4:	af00      	add	r7, sp, #0
 800fed6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800fed8:	2300      	movs	r3, #0
 800feda:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800fedc:	f001 fc4a 	bl	8011774 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800fee0:	4b59      	ldr	r3, [pc, #356]	; (8010048 <pvPortMalloc+0x178>)
 800fee2:	681b      	ldr	r3, [r3, #0]
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	d101      	bne.n	800feec <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800fee8:	f000 f910 	bl	801010c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800feec:	4b57      	ldr	r3, [pc, #348]	; (801004c <pvPortMalloc+0x17c>)
 800feee:	681a      	ldr	r2, [r3, #0]
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	4013      	ands	r3, r2
 800fef4:	2b00      	cmp	r3, #0
 800fef6:	f040 808c 	bne.w	8010012 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	2b00      	cmp	r3, #0
 800fefe:	d01c      	beq.n	800ff3a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800ff00:	2208      	movs	r2, #8
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	4413      	add	r3, r2
 800ff06:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	f003 0307 	and.w	r3, r3, #7
 800ff0e:	2b00      	cmp	r3, #0
 800ff10:	d013      	beq.n	800ff3a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	f023 0307 	bic.w	r3, r3, #7
 800ff18:	3308      	adds	r3, #8
 800ff1a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	f003 0307 	and.w	r3, r3, #7
 800ff22:	2b00      	cmp	r3, #0
 800ff24:	d009      	beq.n	800ff3a <pvPortMalloc+0x6a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ff26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff2a:	f383 8811 	msr	BASEPRI, r3
 800ff2e:	f3bf 8f6f 	isb	sy
 800ff32:	f3bf 8f4f 	dsb	sy
 800ff36:	617b      	str	r3, [r7, #20]
 800ff38:	e7fe      	b.n	800ff38 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	d068      	beq.n	8010012 <pvPortMalloc+0x142>
 800ff40:	4b43      	ldr	r3, [pc, #268]	; (8010050 <pvPortMalloc+0x180>)
 800ff42:	681b      	ldr	r3, [r3, #0]
 800ff44:	687a      	ldr	r2, [r7, #4]
 800ff46:	429a      	cmp	r2, r3
 800ff48:	d863      	bhi.n	8010012 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ff4a:	4b42      	ldr	r3, [pc, #264]	; (8010054 <pvPortMalloc+0x184>)
 800ff4c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ff4e:	4b41      	ldr	r3, [pc, #260]	; (8010054 <pvPortMalloc+0x184>)
 800ff50:	681b      	ldr	r3, [r3, #0]
 800ff52:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ff54:	e004      	b.n	800ff60 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800ff56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff58:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ff5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff5c:	681b      	ldr	r3, [r3, #0]
 800ff5e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ff60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff62:	685b      	ldr	r3, [r3, #4]
 800ff64:	687a      	ldr	r2, [r7, #4]
 800ff66:	429a      	cmp	r2, r3
 800ff68:	d903      	bls.n	800ff72 <pvPortMalloc+0xa2>
 800ff6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff6c:	681b      	ldr	r3, [r3, #0]
 800ff6e:	2b00      	cmp	r3, #0
 800ff70:	d1f1      	bne.n	800ff56 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ff72:	4b35      	ldr	r3, [pc, #212]	; (8010048 <pvPortMalloc+0x178>)
 800ff74:	681b      	ldr	r3, [r3, #0]
 800ff76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ff78:	429a      	cmp	r2, r3
 800ff7a:	d04a      	beq.n	8010012 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ff7c:	6a3b      	ldr	r3, [r7, #32]
 800ff7e:	681b      	ldr	r3, [r3, #0]
 800ff80:	2208      	movs	r2, #8
 800ff82:	4413      	add	r3, r2
 800ff84:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ff86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff88:	681a      	ldr	r2, [r3, #0]
 800ff8a:	6a3b      	ldr	r3, [r7, #32]
 800ff8c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ff8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff90:	685a      	ldr	r2, [r3, #4]
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	1ad2      	subs	r2, r2, r3
 800ff96:	2308      	movs	r3, #8
 800ff98:	005b      	lsls	r3, r3, #1
 800ff9a:	429a      	cmp	r2, r3
 800ff9c:	d91e      	bls.n	800ffdc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ff9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	4413      	add	r3, r2
 800ffa4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ffa6:	69bb      	ldr	r3, [r7, #24]
 800ffa8:	f003 0307 	and.w	r3, r3, #7
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	d009      	beq.n	800ffc4 <pvPortMalloc+0xf4>
 800ffb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffb4:	f383 8811 	msr	BASEPRI, r3
 800ffb8:	f3bf 8f6f 	isb	sy
 800ffbc:	f3bf 8f4f 	dsb	sy
 800ffc0:	613b      	str	r3, [r7, #16]
 800ffc2:	e7fe      	b.n	800ffc2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ffc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffc6:	685a      	ldr	r2, [r3, #4]
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	1ad2      	subs	r2, r2, r3
 800ffcc:	69bb      	ldr	r3, [r7, #24]
 800ffce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ffd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffd2:	687a      	ldr	r2, [r7, #4]
 800ffd4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ffd6:	69b8      	ldr	r0, [r7, #24]
 800ffd8:	f000 f8fa 	bl	80101d0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ffdc:	4b1c      	ldr	r3, [pc, #112]	; (8010050 <pvPortMalloc+0x180>)
 800ffde:	681a      	ldr	r2, [r3, #0]
 800ffe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffe2:	685b      	ldr	r3, [r3, #4]
 800ffe4:	1ad3      	subs	r3, r2, r3
 800ffe6:	4a1a      	ldr	r2, [pc, #104]	; (8010050 <pvPortMalloc+0x180>)
 800ffe8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ffea:	4b19      	ldr	r3, [pc, #100]	; (8010050 <pvPortMalloc+0x180>)
 800ffec:	681a      	ldr	r2, [r3, #0]
 800ffee:	4b1a      	ldr	r3, [pc, #104]	; (8010058 <pvPortMalloc+0x188>)
 800fff0:	681b      	ldr	r3, [r3, #0]
 800fff2:	429a      	cmp	r2, r3
 800fff4:	d203      	bcs.n	800fffe <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800fff6:	4b16      	ldr	r3, [pc, #88]	; (8010050 <pvPortMalloc+0x180>)
 800fff8:	681b      	ldr	r3, [r3, #0]
 800fffa:	4a17      	ldr	r2, [pc, #92]	; (8010058 <pvPortMalloc+0x188>)
 800fffc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800fffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010000:	685a      	ldr	r2, [r3, #4]
 8010002:	4b12      	ldr	r3, [pc, #72]	; (801004c <pvPortMalloc+0x17c>)
 8010004:	681b      	ldr	r3, [r3, #0]
 8010006:	431a      	orrs	r2, r3
 8010008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801000a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801000c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801000e:	2200      	movs	r2, #0
 8010010:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010012:	f001 fbbd 	bl	8011790 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8010016:	69fb      	ldr	r3, [r7, #28]
 8010018:	2b00      	cmp	r3, #0
 801001a:	d101      	bne.n	8010020 <pvPortMalloc+0x150>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 801001c:	f7f0 fad2 	bl	80005c4 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8010020:	69fb      	ldr	r3, [r7, #28]
 8010022:	f003 0307 	and.w	r3, r3, #7
 8010026:	2b00      	cmp	r3, #0
 8010028:	d009      	beq.n	801003e <pvPortMalloc+0x16e>
 801002a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801002e:	f383 8811 	msr	BASEPRI, r3
 8010032:	f3bf 8f6f 	isb	sy
 8010036:	f3bf 8f4f 	dsb	sy
 801003a:	60fb      	str	r3, [r7, #12]
 801003c:	e7fe      	b.n	801003c <pvPortMalloc+0x16c>
	return pvReturn;
 801003e:	69fb      	ldr	r3, [r7, #28]
}
 8010040:	4618      	mov	r0, r3
 8010042:	3728      	adds	r7, #40	; 0x28
 8010044:	46bd      	mov	sp, r7
 8010046:	bd80      	pop	{r7, pc}
 8010048:	2000d054 	.word	0x2000d054
 801004c:	2000d060 	.word	0x2000d060
 8010050:	2000d058 	.word	0x2000d058
 8010054:	2000d04c 	.word	0x2000d04c
 8010058:	2000d05c 	.word	0x2000d05c

0801005c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 801005c:	b580      	push	{r7, lr}
 801005e:	b086      	sub	sp, #24
 8010060:	af00      	add	r7, sp, #0
 8010062:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	2b00      	cmp	r3, #0
 801006c:	d046      	beq.n	80100fc <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801006e:	2308      	movs	r3, #8
 8010070:	425b      	negs	r3, r3
 8010072:	697a      	ldr	r2, [r7, #20]
 8010074:	4413      	add	r3, r2
 8010076:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8010078:	697b      	ldr	r3, [r7, #20]
 801007a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801007c:	693b      	ldr	r3, [r7, #16]
 801007e:	685a      	ldr	r2, [r3, #4]
 8010080:	4b20      	ldr	r3, [pc, #128]	; (8010104 <vPortFree+0xa8>)
 8010082:	681b      	ldr	r3, [r3, #0]
 8010084:	4013      	ands	r3, r2
 8010086:	2b00      	cmp	r3, #0
 8010088:	d109      	bne.n	801009e <vPortFree+0x42>
 801008a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801008e:	f383 8811 	msr	BASEPRI, r3
 8010092:	f3bf 8f6f 	isb	sy
 8010096:	f3bf 8f4f 	dsb	sy
 801009a:	60fb      	str	r3, [r7, #12]
 801009c:	e7fe      	b.n	801009c <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801009e:	693b      	ldr	r3, [r7, #16]
 80100a0:	681b      	ldr	r3, [r3, #0]
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	d009      	beq.n	80100ba <vPortFree+0x5e>
 80100a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100aa:	f383 8811 	msr	BASEPRI, r3
 80100ae:	f3bf 8f6f 	isb	sy
 80100b2:	f3bf 8f4f 	dsb	sy
 80100b6:	60bb      	str	r3, [r7, #8]
 80100b8:	e7fe      	b.n	80100b8 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80100ba:	693b      	ldr	r3, [r7, #16]
 80100bc:	685a      	ldr	r2, [r3, #4]
 80100be:	4b11      	ldr	r3, [pc, #68]	; (8010104 <vPortFree+0xa8>)
 80100c0:	681b      	ldr	r3, [r3, #0]
 80100c2:	4013      	ands	r3, r2
 80100c4:	2b00      	cmp	r3, #0
 80100c6:	d019      	beq.n	80100fc <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80100c8:	693b      	ldr	r3, [r7, #16]
 80100ca:	681b      	ldr	r3, [r3, #0]
 80100cc:	2b00      	cmp	r3, #0
 80100ce:	d115      	bne.n	80100fc <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80100d0:	693b      	ldr	r3, [r7, #16]
 80100d2:	685a      	ldr	r2, [r3, #4]
 80100d4:	4b0b      	ldr	r3, [pc, #44]	; (8010104 <vPortFree+0xa8>)
 80100d6:	681b      	ldr	r3, [r3, #0]
 80100d8:	43db      	mvns	r3, r3
 80100da:	401a      	ands	r2, r3
 80100dc:	693b      	ldr	r3, [r7, #16]
 80100de:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80100e0:	f001 fb48 	bl	8011774 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80100e4:	693b      	ldr	r3, [r7, #16]
 80100e6:	685a      	ldr	r2, [r3, #4]
 80100e8:	4b07      	ldr	r3, [pc, #28]	; (8010108 <vPortFree+0xac>)
 80100ea:	681b      	ldr	r3, [r3, #0]
 80100ec:	4413      	add	r3, r2
 80100ee:	4a06      	ldr	r2, [pc, #24]	; (8010108 <vPortFree+0xac>)
 80100f0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80100f2:	6938      	ldr	r0, [r7, #16]
 80100f4:	f000 f86c 	bl	80101d0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80100f8:	f001 fb4a 	bl	8011790 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80100fc:	bf00      	nop
 80100fe:	3718      	adds	r7, #24
 8010100:	46bd      	mov	sp, r7
 8010102:	bd80      	pop	{r7, pc}
 8010104:	2000d060 	.word	0x2000d060
 8010108:	2000d058 	.word	0x2000d058

0801010c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 801010c:	b480      	push	{r7}
 801010e:	b085      	sub	sp, #20
 8010110:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8010112:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010116:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010118:	4b27      	ldr	r3, [pc, #156]	; (80101b8 <prvHeapInit+0xac>)
 801011a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801011c:	68fb      	ldr	r3, [r7, #12]
 801011e:	f003 0307 	and.w	r3, r3, #7
 8010122:	2b00      	cmp	r3, #0
 8010124:	d00c      	beq.n	8010140 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8010126:	68fb      	ldr	r3, [r7, #12]
 8010128:	3307      	adds	r3, #7
 801012a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801012c:	68fb      	ldr	r3, [r7, #12]
 801012e:	f023 0307 	bic.w	r3, r3, #7
 8010132:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8010134:	68ba      	ldr	r2, [r7, #8]
 8010136:	68fb      	ldr	r3, [r7, #12]
 8010138:	1ad3      	subs	r3, r2, r3
 801013a:	4a1f      	ldr	r2, [pc, #124]	; (80101b8 <prvHeapInit+0xac>)
 801013c:	4413      	add	r3, r2
 801013e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010140:	68fb      	ldr	r3, [r7, #12]
 8010142:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8010144:	4a1d      	ldr	r2, [pc, #116]	; (80101bc <prvHeapInit+0xb0>)
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801014a:	4b1c      	ldr	r3, [pc, #112]	; (80101bc <prvHeapInit+0xb0>)
 801014c:	2200      	movs	r2, #0
 801014e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	68ba      	ldr	r2, [r7, #8]
 8010154:	4413      	add	r3, r2
 8010156:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010158:	2208      	movs	r2, #8
 801015a:	68fb      	ldr	r3, [r7, #12]
 801015c:	1a9b      	subs	r3, r3, r2
 801015e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010160:	68fb      	ldr	r3, [r7, #12]
 8010162:	f023 0307 	bic.w	r3, r3, #7
 8010166:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8010168:	68fb      	ldr	r3, [r7, #12]
 801016a:	4a15      	ldr	r2, [pc, #84]	; (80101c0 <prvHeapInit+0xb4>)
 801016c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801016e:	4b14      	ldr	r3, [pc, #80]	; (80101c0 <prvHeapInit+0xb4>)
 8010170:	681b      	ldr	r3, [r3, #0]
 8010172:	2200      	movs	r2, #0
 8010174:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8010176:	4b12      	ldr	r3, [pc, #72]	; (80101c0 <prvHeapInit+0xb4>)
 8010178:	681b      	ldr	r3, [r3, #0]
 801017a:	2200      	movs	r2, #0
 801017c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8010182:	683b      	ldr	r3, [r7, #0]
 8010184:	68fa      	ldr	r2, [r7, #12]
 8010186:	1ad2      	subs	r2, r2, r3
 8010188:	683b      	ldr	r3, [r7, #0]
 801018a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801018c:	4b0c      	ldr	r3, [pc, #48]	; (80101c0 <prvHeapInit+0xb4>)
 801018e:	681a      	ldr	r2, [r3, #0]
 8010190:	683b      	ldr	r3, [r7, #0]
 8010192:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010194:	683b      	ldr	r3, [r7, #0]
 8010196:	685b      	ldr	r3, [r3, #4]
 8010198:	4a0a      	ldr	r2, [pc, #40]	; (80101c4 <prvHeapInit+0xb8>)
 801019a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801019c:	683b      	ldr	r3, [r7, #0]
 801019e:	685b      	ldr	r3, [r3, #4]
 80101a0:	4a09      	ldr	r2, [pc, #36]	; (80101c8 <prvHeapInit+0xbc>)
 80101a2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80101a4:	4b09      	ldr	r3, [pc, #36]	; (80101cc <prvHeapInit+0xc0>)
 80101a6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80101aa:	601a      	str	r2, [r3, #0]
}
 80101ac:	bf00      	nop
 80101ae:	3714      	adds	r7, #20
 80101b0:	46bd      	mov	sp, r7
 80101b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101b6:	4770      	bx	lr
 80101b8:	2000504c 	.word	0x2000504c
 80101bc:	2000d04c 	.word	0x2000d04c
 80101c0:	2000d054 	.word	0x2000d054
 80101c4:	2000d05c 	.word	0x2000d05c
 80101c8:	2000d058 	.word	0x2000d058
 80101cc:	2000d060 	.word	0x2000d060

080101d0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80101d0:	b480      	push	{r7}
 80101d2:	b085      	sub	sp, #20
 80101d4:	af00      	add	r7, sp, #0
 80101d6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80101d8:	4b28      	ldr	r3, [pc, #160]	; (801027c <prvInsertBlockIntoFreeList+0xac>)
 80101da:	60fb      	str	r3, [r7, #12]
 80101dc:	e002      	b.n	80101e4 <prvInsertBlockIntoFreeList+0x14>
 80101de:	68fb      	ldr	r3, [r7, #12]
 80101e0:	681b      	ldr	r3, [r3, #0]
 80101e2:	60fb      	str	r3, [r7, #12]
 80101e4:	68fb      	ldr	r3, [r7, #12]
 80101e6:	681b      	ldr	r3, [r3, #0]
 80101e8:	687a      	ldr	r2, [r7, #4]
 80101ea:	429a      	cmp	r2, r3
 80101ec:	d8f7      	bhi.n	80101de <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80101ee:	68fb      	ldr	r3, [r7, #12]
 80101f0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80101f2:	68fb      	ldr	r3, [r7, #12]
 80101f4:	685b      	ldr	r3, [r3, #4]
 80101f6:	68ba      	ldr	r2, [r7, #8]
 80101f8:	4413      	add	r3, r2
 80101fa:	687a      	ldr	r2, [r7, #4]
 80101fc:	429a      	cmp	r2, r3
 80101fe:	d108      	bne.n	8010212 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010200:	68fb      	ldr	r3, [r7, #12]
 8010202:	685a      	ldr	r2, [r3, #4]
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	685b      	ldr	r3, [r3, #4]
 8010208:	441a      	add	r2, r3
 801020a:	68fb      	ldr	r3, [r7, #12]
 801020c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801020e:	68fb      	ldr	r3, [r7, #12]
 8010210:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	685b      	ldr	r3, [r3, #4]
 801021a:	68ba      	ldr	r2, [r7, #8]
 801021c:	441a      	add	r2, r3
 801021e:	68fb      	ldr	r3, [r7, #12]
 8010220:	681b      	ldr	r3, [r3, #0]
 8010222:	429a      	cmp	r2, r3
 8010224:	d118      	bne.n	8010258 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8010226:	68fb      	ldr	r3, [r7, #12]
 8010228:	681a      	ldr	r2, [r3, #0]
 801022a:	4b15      	ldr	r3, [pc, #84]	; (8010280 <prvInsertBlockIntoFreeList+0xb0>)
 801022c:	681b      	ldr	r3, [r3, #0]
 801022e:	429a      	cmp	r2, r3
 8010230:	d00d      	beq.n	801024e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	685a      	ldr	r2, [r3, #4]
 8010236:	68fb      	ldr	r3, [r7, #12]
 8010238:	681b      	ldr	r3, [r3, #0]
 801023a:	685b      	ldr	r3, [r3, #4]
 801023c:	441a      	add	r2, r3
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8010242:	68fb      	ldr	r3, [r7, #12]
 8010244:	681b      	ldr	r3, [r3, #0]
 8010246:	681a      	ldr	r2, [r3, #0]
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	601a      	str	r2, [r3, #0]
 801024c:	e008      	b.n	8010260 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801024e:	4b0c      	ldr	r3, [pc, #48]	; (8010280 <prvInsertBlockIntoFreeList+0xb0>)
 8010250:	681a      	ldr	r2, [r3, #0]
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	601a      	str	r2, [r3, #0]
 8010256:	e003      	b.n	8010260 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010258:	68fb      	ldr	r3, [r7, #12]
 801025a:	681a      	ldr	r2, [r3, #0]
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010260:	68fa      	ldr	r2, [r7, #12]
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	429a      	cmp	r2, r3
 8010266:	d002      	beq.n	801026e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010268:	68fb      	ldr	r3, [r7, #12]
 801026a:	687a      	ldr	r2, [r7, #4]
 801026c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801026e:	bf00      	nop
 8010270:	3714      	adds	r7, #20
 8010272:	46bd      	mov	sp, r7
 8010274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010278:	4770      	bx	lr
 801027a:	bf00      	nop
 801027c:	2000d04c 	.word	0x2000d04c
 8010280:	2000d054 	.word	0x2000d054

08010284 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8010284:	b480      	push	{r7}
 8010286:	b083      	sub	sp, #12
 8010288:	af00      	add	r7, sp, #0
 801028a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	f103 0208 	add.w	r2, r3, #8
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	f04f 32ff 	mov.w	r2, #4294967295
 801029c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	f103 0208 	add.w	r2, r3, #8
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	f103 0208 	add.w	r2, r3, #8
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	2200      	movs	r2, #0
 80102b6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80102b8:	bf00      	nop
 80102ba:	370c      	adds	r7, #12
 80102bc:	46bd      	mov	sp, r7
 80102be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102c2:	4770      	bx	lr

080102c4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80102c4:	b480      	push	{r7}
 80102c6:	b083      	sub	sp, #12
 80102c8:	af00      	add	r7, sp, #0
 80102ca:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	2200      	movs	r2, #0
 80102d0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80102d2:	bf00      	nop
 80102d4:	370c      	adds	r7, #12
 80102d6:	46bd      	mov	sp, r7
 80102d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102dc:	4770      	bx	lr

080102de <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80102de:	b480      	push	{r7}
 80102e0:	b085      	sub	sp, #20
 80102e2:	af00      	add	r7, sp, #0
 80102e4:	6078      	str	r0, [r7, #4]
 80102e6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	685b      	ldr	r3, [r3, #4]
 80102ec:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80102ee:	683b      	ldr	r3, [r7, #0]
 80102f0:	68fa      	ldr	r2, [r7, #12]
 80102f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80102f4:	68fb      	ldr	r3, [r7, #12]
 80102f6:	689a      	ldr	r2, [r3, #8]
 80102f8:	683b      	ldr	r3, [r7, #0]
 80102fa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80102fc:	68fb      	ldr	r3, [r7, #12]
 80102fe:	689b      	ldr	r3, [r3, #8]
 8010300:	683a      	ldr	r2, [r7, #0]
 8010302:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8010304:	68fb      	ldr	r3, [r7, #12]
 8010306:	683a      	ldr	r2, [r7, #0]
 8010308:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801030a:	683b      	ldr	r3, [r7, #0]
 801030c:	687a      	ldr	r2, [r7, #4]
 801030e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	681b      	ldr	r3, [r3, #0]
 8010314:	1c5a      	adds	r2, r3, #1
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	601a      	str	r2, [r3, #0]
}
 801031a:	bf00      	nop
 801031c:	3714      	adds	r7, #20
 801031e:	46bd      	mov	sp, r7
 8010320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010324:	4770      	bx	lr

08010326 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010326:	b480      	push	{r7}
 8010328:	b085      	sub	sp, #20
 801032a:	af00      	add	r7, sp, #0
 801032c:	6078      	str	r0, [r7, #4]
 801032e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8010330:	683b      	ldr	r3, [r7, #0]
 8010332:	681b      	ldr	r3, [r3, #0]
 8010334:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8010336:	68bb      	ldr	r3, [r7, #8]
 8010338:	f1b3 3fff 	cmp.w	r3, #4294967295
 801033c:	d103      	bne.n	8010346 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	691b      	ldr	r3, [r3, #16]
 8010342:	60fb      	str	r3, [r7, #12]
 8010344:	e00c      	b.n	8010360 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	3308      	adds	r3, #8
 801034a:	60fb      	str	r3, [r7, #12]
 801034c:	e002      	b.n	8010354 <vListInsert+0x2e>
 801034e:	68fb      	ldr	r3, [r7, #12]
 8010350:	685b      	ldr	r3, [r3, #4]
 8010352:	60fb      	str	r3, [r7, #12]
 8010354:	68fb      	ldr	r3, [r7, #12]
 8010356:	685b      	ldr	r3, [r3, #4]
 8010358:	681b      	ldr	r3, [r3, #0]
 801035a:	68ba      	ldr	r2, [r7, #8]
 801035c:	429a      	cmp	r2, r3
 801035e:	d2f6      	bcs.n	801034e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8010360:	68fb      	ldr	r3, [r7, #12]
 8010362:	685a      	ldr	r2, [r3, #4]
 8010364:	683b      	ldr	r3, [r7, #0]
 8010366:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8010368:	683b      	ldr	r3, [r7, #0]
 801036a:	685b      	ldr	r3, [r3, #4]
 801036c:	683a      	ldr	r2, [r7, #0]
 801036e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8010370:	683b      	ldr	r3, [r7, #0]
 8010372:	68fa      	ldr	r2, [r7, #12]
 8010374:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8010376:	68fb      	ldr	r3, [r7, #12]
 8010378:	683a      	ldr	r2, [r7, #0]
 801037a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 801037c:	683b      	ldr	r3, [r7, #0]
 801037e:	687a      	ldr	r2, [r7, #4]
 8010380:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	681b      	ldr	r3, [r3, #0]
 8010386:	1c5a      	adds	r2, r3, #1
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	601a      	str	r2, [r3, #0]
}
 801038c:	bf00      	nop
 801038e:	3714      	adds	r7, #20
 8010390:	46bd      	mov	sp, r7
 8010392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010396:	4770      	bx	lr

08010398 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8010398:	b480      	push	{r7}
 801039a:	b085      	sub	sp, #20
 801039c:	af00      	add	r7, sp, #0
 801039e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	691b      	ldr	r3, [r3, #16]
 80103a4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	685b      	ldr	r3, [r3, #4]
 80103aa:	687a      	ldr	r2, [r7, #4]
 80103ac:	6892      	ldr	r2, [r2, #8]
 80103ae:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	689b      	ldr	r3, [r3, #8]
 80103b4:	687a      	ldr	r2, [r7, #4]
 80103b6:	6852      	ldr	r2, [r2, #4]
 80103b8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80103ba:	68fb      	ldr	r3, [r7, #12]
 80103bc:	685b      	ldr	r3, [r3, #4]
 80103be:	687a      	ldr	r2, [r7, #4]
 80103c0:	429a      	cmp	r2, r3
 80103c2:	d103      	bne.n	80103cc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	689a      	ldr	r2, [r3, #8]
 80103c8:	68fb      	ldr	r3, [r7, #12]
 80103ca:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	2200      	movs	r2, #0
 80103d0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80103d2:	68fb      	ldr	r3, [r7, #12]
 80103d4:	681b      	ldr	r3, [r3, #0]
 80103d6:	1e5a      	subs	r2, r3, #1
 80103d8:	68fb      	ldr	r3, [r7, #12]
 80103da:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80103dc:	68fb      	ldr	r3, [r7, #12]
 80103de:	681b      	ldr	r3, [r3, #0]
}
 80103e0:	4618      	mov	r0, r3
 80103e2:	3714      	adds	r7, #20
 80103e4:	46bd      	mov	sp, r7
 80103e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103ea:	4770      	bx	lr

080103ec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80103ec:	b480      	push	{r7}
 80103ee:	b085      	sub	sp, #20
 80103f0:	af00      	add	r7, sp, #0
 80103f2:	60f8      	str	r0, [r7, #12]
 80103f4:	60b9      	str	r1, [r7, #8]
 80103f6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80103f8:	68fb      	ldr	r3, [r7, #12]
 80103fa:	3b04      	subs	r3, #4
 80103fc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80103fe:	68fb      	ldr	r3, [r7, #12]
 8010400:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8010404:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010406:	68fb      	ldr	r3, [r7, #12]
 8010408:	3b04      	subs	r3, #4
 801040a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801040c:	68bb      	ldr	r3, [r7, #8]
 801040e:	f023 0201 	bic.w	r2, r3, #1
 8010412:	68fb      	ldr	r3, [r7, #12]
 8010414:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010416:	68fb      	ldr	r3, [r7, #12]
 8010418:	3b04      	subs	r3, #4
 801041a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801041c:	4a0c      	ldr	r2, [pc, #48]	; (8010450 <pxPortInitialiseStack+0x64>)
 801041e:	68fb      	ldr	r3, [r7, #12]
 8010420:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8010422:	68fb      	ldr	r3, [r7, #12]
 8010424:	3b14      	subs	r3, #20
 8010426:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010428:	687a      	ldr	r2, [r7, #4]
 801042a:	68fb      	ldr	r3, [r7, #12]
 801042c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801042e:	68fb      	ldr	r3, [r7, #12]
 8010430:	3b04      	subs	r3, #4
 8010432:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010434:	68fb      	ldr	r3, [r7, #12]
 8010436:	f06f 0202 	mvn.w	r2, #2
 801043a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801043c:	68fb      	ldr	r3, [r7, #12]
 801043e:	3b20      	subs	r3, #32
 8010440:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8010442:	68fb      	ldr	r3, [r7, #12]
}
 8010444:	4618      	mov	r0, r3
 8010446:	3714      	adds	r7, #20
 8010448:	46bd      	mov	sp, r7
 801044a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801044e:	4770      	bx	lr
 8010450:	08010455 	.word	0x08010455

08010454 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010454:	b480      	push	{r7}
 8010456:	b085      	sub	sp, #20
 8010458:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801045a:	2300      	movs	r3, #0
 801045c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801045e:	4b11      	ldr	r3, [pc, #68]	; (80104a4 <prvTaskExitError+0x50>)
 8010460:	681b      	ldr	r3, [r3, #0]
 8010462:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010466:	d009      	beq.n	801047c <prvTaskExitError+0x28>
 8010468:	f04f 0350 	mov.w	r3, #80	; 0x50
 801046c:	f383 8811 	msr	BASEPRI, r3
 8010470:	f3bf 8f6f 	isb	sy
 8010474:	f3bf 8f4f 	dsb	sy
 8010478:	60fb      	str	r3, [r7, #12]
 801047a:	e7fe      	b.n	801047a <prvTaskExitError+0x26>
 801047c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010480:	f383 8811 	msr	BASEPRI, r3
 8010484:	f3bf 8f6f 	isb	sy
 8010488:	f3bf 8f4f 	dsb	sy
 801048c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801048e:	bf00      	nop
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	2b00      	cmp	r3, #0
 8010494:	d0fc      	beq.n	8010490 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8010496:	bf00      	nop
 8010498:	3714      	adds	r7, #20
 801049a:	46bd      	mov	sp, r7
 801049c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104a0:	4770      	bx	lr
 80104a2:	bf00      	nop
 80104a4:	20000028 	.word	0x20000028
	...

080104b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80104b0:	4b07      	ldr	r3, [pc, #28]	; (80104d0 <pxCurrentTCBConst2>)
 80104b2:	6819      	ldr	r1, [r3, #0]
 80104b4:	6808      	ldr	r0, [r1, #0]
 80104b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104ba:	f380 8809 	msr	PSP, r0
 80104be:	f3bf 8f6f 	isb	sy
 80104c2:	f04f 0000 	mov.w	r0, #0
 80104c6:	f380 8811 	msr	BASEPRI, r0
 80104ca:	4770      	bx	lr
 80104cc:	f3af 8000 	nop.w

080104d0 <pxCurrentTCBConst2>:
 80104d0:	2000d06c 	.word	0x2000d06c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80104d4:	bf00      	nop
 80104d6:	bf00      	nop

080104d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80104d8:	4808      	ldr	r0, [pc, #32]	; (80104fc <prvPortStartFirstTask+0x24>)
 80104da:	6800      	ldr	r0, [r0, #0]
 80104dc:	6800      	ldr	r0, [r0, #0]
 80104de:	f380 8808 	msr	MSP, r0
 80104e2:	f04f 0000 	mov.w	r0, #0
 80104e6:	f380 8814 	msr	CONTROL, r0
 80104ea:	b662      	cpsie	i
 80104ec:	b661      	cpsie	f
 80104ee:	f3bf 8f4f 	dsb	sy
 80104f2:	f3bf 8f6f 	isb	sy
 80104f6:	df00      	svc	0
 80104f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80104fa:	bf00      	nop
 80104fc:	e000ed08 	.word	0xe000ed08

08010500 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010500:	b580      	push	{r7, lr}
 8010502:	b086      	sub	sp, #24
 8010504:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8010506:	4b44      	ldr	r3, [pc, #272]	; (8010618 <xPortStartScheduler+0x118>)
 8010508:	681b      	ldr	r3, [r3, #0]
 801050a:	4a44      	ldr	r2, [pc, #272]	; (801061c <xPortStartScheduler+0x11c>)
 801050c:	4293      	cmp	r3, r2
 801050e:	d109      	bne.n	8010524 <xPortStartScheduler+0x24>
 8010510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010514:	f383 8811 	msr	BASEPRI, r3
 8010518:	f3bf 8f6f 	isb	sy
 801051c:	f3bf 8f4f 	dsb	sy
 8010520:	613b      	str	r3, [r7, #16]
 8010522:	e7fe      	b.n	8010522 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8010524:	4b3c      	ldr	r3, [pc, #240]	; (8010618 <xPortStartScheduler+0x118>)
 8010526:	681b      	ldr	r3, [r3, #0]
 8010528:	4a3d      	ldr	r2, [pc, #244]	; (8010620 <xPortStartScheduler+0x120>)
 801052a:	4293      	cmp	r3, r2
 801052c:	d109      	bne.n	8010542 <xPortStartScheduler+0x42>
 801052e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010532:	f383 8811 	msr	BASEPRI, r3
 8010536:	f3bf 8f6f 	isb	sy
 801053a:	f3bf 8f4f 	dsb	sy
 801053e:	60fb      	str	r3, [r7, #12]
 8010540:	e7fe      	b.n	8010540 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8010542:	4b38      	ldr	r3, [pc, #224]	; (8010624 <xPortStartScheduler+0x124>)
 8010544:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8010546:	697b      	ldr	r3, [r7, #20]
 8010548:	781b      	ldrb	r3, [r3, #0]
 801054a:	b2db      	uxtb	r3, r3
 801054c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801054e:	697b      	ldr	r3, [r7, #20]
 8010550:	22ff      	movs	r2, #255	; 0xff
 8010552:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010554:	697b      	ldr	r3, [r7, #20]
 8010556:	781b      	ldrb	r3, [r3, #0]
 8010558:	b2db      	uxtb	r3, r3
 801055a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801055c:	78fb      	ldrb	r3, [r7, #3]
 801055e:	b2db      	uxtb	r3, r3
 8010560:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8010564:	b2da      	uxtb	r2, r3
 8010566:	4b30      	ldr	r3, [pc, #192]	; (8010628 <xPortStartScheduler+0x128>)
 8010568:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801056a:	4b30      	ldr	r3, [pc, #192]	; (801062c <xPortStartScheduler+0x12c>)
 801056c:	2207      	movs	r2, #7
 801056e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010570:	e009      	b.n	8010586 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8010572:	4b2e      	ldr	r3, [pc, #184]	; (801062c <xPortStartScheduler+0x12c>)
 8010574:	681b      	ldr	r3, [r3, #0]
 8010576:	3b01      	subs	r3, #1
 8010578:	4a2c      	ldr	r2, [pc, #176]	; (801062c <xPortStartScheduler+0x12c>)
 801057a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801057c:	78fb      	ldrb	r3, [r7, #3]
 801057e:	b2db      	uxtb	r3, r3
 8010580:	005b      	lsls	r3, r3, #1
 8010582:	b2db      	uxtb	r3, r3
 8010584:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010586:	78fb      	ldrb	r3, [r7, #3]
 8010588:	b2db      	uxtb	r3, r3
 801058a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801058e:	2b80      	cmp	r3, #128	; 0x80
 8010590:	d0ef      	beq.n	8010572 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010592:	4b26      	ldr	r3, [pc, #152]	; (801062c <xPortStartScheduler+0x12c>)
 8010594:	681b      	ldr	r3, [r3, #0]
 8010596:	f1c3 0307 	rsb	r3, r3, #7
 801059a:	2b04      	cmp	r3, #4
 801059c:	d009      	beq.n	80105b2 <xPortStartScheduler+0xb2>
 801059e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105a2:	f383 8811 	msr	BASEPRI, r3
 80105a6:	f3bf 8f6f 	isb	sy
 80105aa:	f3bf 8f4f 	dsb	sy
 80105ae:	60bb      	str	r3, [r7, #8]
 80105b0:	e7fe      	b.n	80105b0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80105b2:	4b1e      	ldr	r3, [pc, #120]	; (801062c <xPortStartScheduler+0x12c>)
 80105b4:	681b      	ldr	r3, [r3, #0]
 80105b6:	021b      	lsls	r3, r3, #8
 80105b8:	4a1c      	ldr	r2, [pc, #112]	; (801062c <xPortStartScheduler+0x12c>)
 80105ba:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80105bc:	4b1b      	ldr	r3, [pc, #108]	; (801062c <xPortStartScheduler+0x12c>)
 80105be:	681b      	ldr	r3, [r3, #0]
 80105c0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80105c4:	4a19      	ldr	r2, [pc, #100]	; (801062c <xPortStartScheduler+0x12c>)
 80105c6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	b2da      	uxtb	r2, r3
 80105cc:	697b      	ldr	r3, [r7, #20]
 80105ce:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80105d0:	4b17      	ldr	r3, [pc, #92]	; (8010630 <xPortStartScheduler+0x130>)
 80105d2:	681b      	ldr	r3, [r3, #0]
 80105d4:	4a16      	ldr	r2, [pc, #88]	; (8010630 <xPortStartScheduler+0x130>)
 80105d6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80105da:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80105dc:	4b14      	ldr	r3, [pc, #80]	; (8010630 <xPortStartScheduler+0x130>)
 80105de:	681b      	ldr	r3, [r3, #0]
 80105e0:	4a13      	ldr	r2, [pc, #76]	; (8010630 <xPortStartScheduler+0x130>)
 80105e2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80105e6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80105e8:	f000 f8d6 	bl	8010798 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80105ec:	4b11      	ldr	r3, [pc, #68]	; (8010634 <xPortStartScheduler+0x134>)
 80105ee:	2200      	movs	r2, #0
 80105f0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80105f2:	f000 f8f5 	bl	80107e0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80105f6:	4b10      	ldr	r3, [pc, #64]	; (8010638 <xPortStartScheduler+0x138>)
 80105f8:	681b      	ldr	r3, [r3, #0]
 80105fa:	4a0f      	ldr	r2, [pc, #60]	; (8010638 <xPortStartScheduler+0x138>)
 80105fc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8010600:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8010602:	f7ff ff69 	bl	80104d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8010606:	f001 fa17 	bl	8011a38 <vTaskSwitchContext>
	prvTaskExitError();
 801060a:	f7ff ff23 	bl	8010454 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801060e:	2300      	movs	r3, #0
}
 8010610:	4618      	mov	r0, r3
 8010612:	3718      	adds	r7, #24
 8010614:	46bd      	mov	sp, r7
 8010616:	bd80      	pop	{r7, pc}
 8010618:	e000ed00 	.word	0xe000ed00
 801061c:	410fc271 	.word	0x410fc271
 8010620:	410fc270 	.word	0x410fc270
 8010624:	e000e400 	.word	0xe000e400
 8010628:	2000d064 	.word	0x2000d064
 801062c:	2000d068 	.word	0x2000d068
 8010630:	e000ed20 	.word	0xe000ed20
 8010634:	20000028 	.word	0x20000028
 8010638:	e000ef34 	.word	0xe000ef34

0801063c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801063c:	b480      	push	{r7}
 801063e:	b083      	sub	sp, #12
 8010640:	af00      	add	r7, sp, #0
 8010642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010646:	f383 8811 	msr	BASEPRI, r3
 801064a:	f3bf 8f6f 	isb	sy
 801064e:	f3bf 8f4f 	dsb	sy
 8010652:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8010654:	4b0e      	ldr	r3, [pc, #56]	; (8010690 <vPortEnterCritical+0x54>)
 8010656:	681b      	ldr	r3, [r3, #0]
 8010658:	3301      	adds	r3, #1
 801065a:	4a0d      	ldr	r2, [pc, #52]	; (8010690 <vPortEnterCritical+0x54>)
 801065c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801065e:	4b0c      	ldr	r3, [pc, #48]	; (8010690 <vPortEnterCritical+0x54>)
 8010660:	681b      	ldr	r3, [r3, #0]
 8010662:	2b01      	cmp	r3, #1
 8010664:	d10e      	bne.n	8010684 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010666:	4b0b      	ldr	r3, [pc, #44]	; (8010694 <vPortEnterCritical+0x58>)
 8010668:	681b      	ldr	r3, [r3, #0]
 801066a:	b2db      	uxtb	r3, r3
 801066c:	2b00      	cmp	r3, #0
 801066e:	d009      	beq.n	8010684 <vPortEnterCritical+0x48>
 8010670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010674:	f383 8811 	msr	BASEPRI, r3
 8010678:	f3bf 8f6f 	isb	sy
 801067c:	f3bf 8f4f 	dsb	sy
 8010680:	603b      	str	r3, [r7, #0]
 8010682:	e7fe      	b.n	8010682 <vPortEnterCritical+0x46>
	}
}
 8010684:	bf00      	nop
 8010686:	370c      	adds	r7, #12
 8010688:	46bd      	mov	sp, r7
 801068a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801068e:	4770      	bx	lr
 8010690:	20000028 	.word	0x20000028
 8010694:	e000ed04 	.word	0xe000ed04

08010698 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010698:	b480      	push	{r7}
 801069a:	b083      	sub	sp, #12
 801069c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801069e:	4b11      	ldr	r3, [pc, #68]	; (80106e4 <vPortExitCritical+0x4c>)
 80106a0:	681b      	ldr	r3, [r3, #0]
 80106a2:	2b00      	cmp	r3, #0
 80106a4:	d109      	bne.n	80106ba <vPortExitCritical+0x22>
 80106a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106aa:	f383 8811 	msr	BASEPRI, r3
 80106ae:	f3bf 8f6f 	isb	sy
 80106b2:	f3bf 8f4f 	dsb	sy
 80106b6:	607b      	str	r3, [r7, #4]
 80106b8:	e7fe      	b.n	80106b8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80106ba:	4b0a      	ldr	r3, [pc, #40]	; (80106e4 <vPortExitCritical+0x4c>)
 80106bc:	681b      	ldr	r3, [r3, #0]
 80106be:	3b01      	subs	r3, #1
 80106c0:	4a08      	ldr	r2, [pc, #32]	; (80106e4 <vPortExitCritical+0x4c>)
 80106c2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80106c4:	4b07      	ldr	r3, [pc, #28]	; (80106e4 <vPortExitCritical+0x4c>)
 80106c6:	681b      	ldr	r3, [r3, #0]
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	d104      	bne.n	80106d6 <vPortExitCritical+0x3e>
 80106cc:	2300      	movs	r3, #0
 80106ce:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80106d0:	683b      	ldr	r3, [r7, #0]
 80106d2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80106d6:	bf00      	nop
 80106d8:	370c      	adds	r7, #12
 80106da:	46bd      	mov	sp, r7
 80106dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106e0:	4770      	bx	lr
 80106e2:	bf00      	nop
 80106e4:	20000028 	.word	0x20000028
	...

080106f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80106f0:	f3ef 8009 	mrs	r0, PSP
 80106f4:	f3bf 8f6f 	isb	sy
 80106f8:	4b15      	ldr	r3, [pc, #84]	; (8010750 <pxCurrentTCBConst>)
 80106fa:	681a      	ldr	r2, [r3, #0]
 80106fc:	f01e 0f10 	tst.w	lr, #16
 8010700:	bf08      	it	eq
 8010702:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010706:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801070a:	6010      	str	r0, [r2, #0]
 801070c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010710:	f04f 0050 	mov.w	r0, #80	; 0x50
 8010714:	f380 8811 	msr	BASEPRI, r0
 8010718:	f3bf 8f4f 	dsb	sy
 801071c:	f3bf 8f6f 	isb	sy
 8010720:	f001 f98a 	bl	8011a38 <vTaskSwitchContext>
 8010724:	f04f 0000 	mov.w	r0, #0
 8010728:	f380 8811 	msr	BASEPRI, r0
 801072c:	bc09      	pop	{r0, r3}
 801072e:	6819      	ldr	r1, [r3, #0]
 8010730:	6808      	ldr	r0, [r1, #0]
 8010732:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010736:	f01e 0f10 	tst.w	lr, #16
 801073a:	bf08      	it	eq
 801073c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010740:	f380 8809 	msr	PSP, r0
 8010744:	f3bf 8f6f 	isb	sy
 8010748:	4770      	bx	lr
 801074a:	bf00      	nop
 801074c:	f3af 8000 	nop.w

08010750 <pxCurrentTCBConst>:
 8010750:	2000d06c 	.word	0x2000d06c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010754:	bf00      	nop
 8010756:	bf00      	nop

08010758 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010758:	b580      	push	{r7, lr}
 801075a:	b082      	sub	sp, #8
 801075c:	af00      	add	r7, sp, #0
	__asm volatile
 801075e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010762:	f383 8811 	msr	BASEPRI, r3
 8010766:	f3bf 8f6f 	isb	sy
 801076a:	f3bf 8f4f 	dsb	sy
 801076e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010770:	f001 f8aa 	bl	80118c8 <xTaskIncrementTick>
 8010774:	4603      	mov	r3, r0
 8010776:	2b00      	cmp	r3, #0
 8010778:	d003      	beq.n	8010782 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801077a:	4b06      	ldr	r3, [pc, #24]	; (8010794 <SysTick_Handler+0x3c>)
 801077c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010780:	601a      	str	r2, [r3, #0]
 8010782:	2300      	movs	r3, #0
 8010784:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010786:	683b      	ldr	r3, [r7, #0]
 8010788:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 801078c:	bf00      	nop
 801078e:	3708      	adds	r7, #8
 8010790:	46bd      	mov	sp, r7
 8010792:	bd80      	pop	{r7, pc}
 8010794:	e000ed04 	.word	0xe000ed04

08010798 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8010798:	b480      	push	{r7}
 801079a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801079c:	4b0b      	ldr	r3, [pc, #44]	; (80107cc <vPortSetupTimerInterrupt+0x34>)
 801079e:	2200      	movs	r2, #0
 80107a0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80107a2:	4b0b      	ldr	r3, [pc, #44]	; (80107d0 <vPortSetupTimerInterrupt+0x38>)
 80107a4:	2200      	movs	r2, #0
 80107a6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80107a8:	4b0a      	ldr	r3, [pc, #40]	; (80107d4 <vPortSetupTimerInterrupt+0x3c>)
 80107aa:	681b      	ldr	r3, [r3, #0]
 80107ac:	4a0a      	ldr	r2, [pc, #40]	; (80107d8 <vPortSetupTimerInterrupt+0x40>)
 80107ae:	fba2 2303 	umull	r2, r3, r2, r3
 80107b2:	099b      	lsrs	r3, r3, #6
 80107b4:	4a09      	ldr	r2, [pc, #36]	; (80107dc <vPortSetupTimerInterrupt+0x44>)
 80107b6:	3b01      	subs	r3, #1
 80107b8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80107ba:	4b04      	ldr	r3, [pc, #16]	; (80107cc <vPortSetupTimerInterrupt+0x34>)
 80107bc:	2207      	movs	r2, #7
 80107be:	601a      	str	r2, [r3, #0]
}
 80107c0:	bf00      	nop
 80107c2:	46bd      	mov	sp, r7
 80107c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107c8:	4770      	bx	lr
 80107ca:	bf00      	nop
 80107cc:	e000e010 	.word	0xe000e010
 80107d0:	e000e018 	.word	0xe000e018
 80107d4:	2000001c 	.word	0x2000001c
 80107d8:	10624dd3 	.word	0x10624dd3
 80107dc:	e000e014 	.word	0xe000e014

080107e0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80107e0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80107f0 <vPortEnableVFP+0x10>
 80107e4:	6801      	ldr	r1, [r0, #0]
 80107e6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80107ea:	6001      	str	r1, [r0, #0]
 80107ec:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80107ee:	bf00      	nop
 80107f0:	e000ed88 	.word	0xe000ed88

080107f4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80107f4:	b480      	push	{r7}
 80107f6:	b085      	sub	sp, #20
 80107f8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80107fa:	f3ef 8305 	mrs	r3, IPSR
 80107fe:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010800:	68fb      	ldr	r3, [r7, #12]
 8010802:	2b0f      	cmp	r3, #15
 8010804:	d913      	bls.n	801082e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8010806:	4a16      	ldr	r2, [pc, #88]	; (8010860 <vPortValidateInterruptPriority+0x6c>)
 8010808:	68fb      	ldr	r3, [r7, #12]
 801080a:	4413      	add	r3, r2
 801080c:	781b      	ldrb	r3, [r3, #0]
 801080e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010810:	4b14      	ldr	r3, [pc, #80]	; (8010864 <vPortValidateInterruptPriority+0x70>)
 8010812:	781b      	ldrb	r3, [r3, #0]
 8010814:	7afa      	ldrb	r2, [r7, #11]
 8010816:	429a      	cmp	r2, r3
 8010818:	d209      	bcs.n	801082e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 801081a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801081e:	f383 8811 	msr	BASEPRI, r3
 8010822:	f3bf 8f6f 	isb	sy
 8010826:	f3bf 8f4f 	dsb	sy
 801082a:	607b      	str	r3, [r7, #4]
 801082c:	e7fe      	b.n	801082c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801082e:	4b0e      	ldr	r3, [pc, #56]	; (8010868 <vPortValidateInterruptPriority+0x74>)
 8010830:	681b      	ldr	r3, [r3, #0]
 8010832:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8010836:	4b0d      	ldr	r3, [pc, #52]	; (801086c <vPortValidateInterruptPriority+0x78>)
 8010838:	681b      	ldr	r3, [r3, #0]
 801083a:	429a      	cmp	r2, r3
 801083c:	d909      	bls.n	8010852 <vPortValidateInterruptPriority+0x5e>
 801083e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010842:	f383 8811 	msr	BASEPRI, r3
 8010846:	f3bf 8f6f 	isb	sy
 801084a:	f3bf 8f4f 	dsb	sy
 801084e:	603b      	str	r3, [r7, #0]
 8010850:	e7fe      	b.n	8010850 <vPortValidateInterruptPriority+0x5c>
	}
 8010852:	bf00      	nop
 8010854:	3714      	adds	r7, #20
 8010856:	46bd      	mov	sp, r7
 8010858:	f85d 7b04 	ldr.w	r7, [sp], #4
 801085c:	4770      	bx	lr
 801085e:	bf00      	nop
 8010860:	e000e3f0 	.word	0xe000e3f0
 8010864:	2000d064 	.word	0x2000d064
 8010868:	e000ed0c 	.word	0xe000ed0c
 801086c:	2000d068 	.word	0x2000d068

08010870 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8010870:	b580      	push	{r7, lr}
 8010872:	b084      	sub	sp, #16
 8010874:	af00      	add	r7, sp, #0
 8010876:	6078      	str	r0, [r7, #4]
 8010878:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801087e:	68fb      	ldr	r3, [r7, #12]
 8010880:	2b00      	cmp	r3, #0
 8010882:	d109      	bne.n	8010898 <xQueueGenericReset+0x28>
 8010884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010888:	f383 8811 	msr	BASEPRI, r3
 801088c:	f3bf 8f6f 	isb	sy
 8010890:	f3bf 8f4f 	dsb	sy
 8010894:	60bb      	str	r3, [r7, #8]
 8010896:	e7fe      	b.n	8010896 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8010898:	f7ff fed0 	bl	801063c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801089c:	68fb      	ldr	r3, [r7, #12]
 801089e:	681a      	ldr	r2, [r3, #0]
 80108a0:	68fb      	ldr	r3, [r7, #12]
 80108a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80108a4:	68f9      	ldr	r1, [r7, #12]
 80108a6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80108a8:	fb01 f303 	mul.w	r3, r1, r3
 80108ac:	441a      	add	r2, r3
 80108ae:	68fb      	ldr	r3, [r7, #12]
 80108b0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80108b2:	68fb      	ldr	r3, [r7, #12]
 80108b4:	2200      	movs	r2, #0
 80108b6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80108b8:	68fb      	ldr	r3, [r7, #12]
 80108ba:	681a      	ldr	r2, [r3, #0]
 80108bc:	68fb      	ldr	r3, [r7, #12]
 80108be:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80108c0:	68fb      	ldr	r3, [r7, #12]
 80108c2:	681a      	ldr	r2, [r3, #0]
 80108c4:	68fb      	ldr	r3, [r7, #12]
 80108c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80108c8:	3b01      	subs	r3, #1
 80108ca:	68f9      	ldr	r1, [r7, #12]
 80108cc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80108ce:	fb01 f303 	mul.w	r3, r1, r3
 80108d2:	441a      	add	r2, r3
 80108d4:	68fb      	ldr	r3, [r7, #12]
 80108d6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80108d8:	68fb      	ldr	r3, [r7, #12]
 80108da:	22ff      	movs	r2, #255	; 0xff
 80108dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80108e0:	68fb      	ldr	r3, [r7, #12]
 80108e2:	22ff      	movs	r2, #255	; 0xff
 80108e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80108e8:	683b      	ldr	r3, [r7, #0]
 80108ea:	2b00      	cmp	r3, #0
 80108ec:	d114      	bne.n	8010918 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80108ee:	68fb      	ldr	r3, [r7, #12]
 80108f0:	691b      	ldr	r3, [r3, #16]
 80108f2:	2b00      	cmp	r3, #0
 80108f4:	d01a      	beq.n	801092c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80108f6:	68fb      	ldr	r3, [r7, #12]
 80108f8:	3310      	adds	r3, #16
 80108fa:	4618      	mov	r0, r3
 80108fc:	f001 f940 	bl	8011b80 <xTaskRemoveFromEventList>
 8010900:	4603      	mov	r3, r0
 8010902:	2b00      	cmp	r3, #0
 8010904:	d012      	beq.n	801092c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8010906:	4b0d      	ldr	r3, [pc, #52]	; (801093c <xQueueGenericReset+0xcc>)
 8010908:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801090c:	601a      	str	r2, [r3, #0]
 801090e:	f3bf 8f4f 	dsb	sy
 8010912:	f3bf 8f6f 	isb	sy
 8010916:	e009      	b.n	801092c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8010918:	68fb      	ldr	r3, [r7, #12]
 801091a:	3310      	adds	r3, #16
 801091c:	4618      	mov	r0, r3
 801091e:	f7ff fcb1 	bl	8010284 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8010922:	68fb      	ldr	r3, [r7, #12]
 8010924:	3324      	adds	r3, #36	; 0x24
 8010926:	4618      	mov	r0, r3
 8010928:	f7ff fcac 	bl	8010284 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801092c:	f7ff feb4 	bl	8010698 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8010930:	2301      	movs	r3, #1
}
 8010932:	4618      	mov	r0, r3
 8010934:	3710      	adds	r7, #16
 8010936:	46bd      	mov	sp, r7
 8010938:	bd80      	pop	{r7, pc}
 801093a:	bf00      	nop
 801093c:	e000ed04 	.word	0xe000ed04

08010940 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8010940:	b580      	push	{r7, lr}
 8010942:	b08a      	sub	sp, #40	; 0x28
 8010944:	af02      	add	r7, sp, #8
 8010946:	60f8      	str	r0, [r7, #12]
 8010948:	60b9      	str	r1, [r7, #8]
 801094a:	4613      	mov	r3, r2
 801094c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801094e:	68fb      	ldr	r3, [r7, #12]
 8010950:	2b00      	cmp	r3, #0
 8010952:	d109      	bne.n	8010968 <xQueueGenericCreate+0x28>
 8010954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010958:	f383 8811 	msr	BASEPRI, r3
 801095c:	f3bf 8f6f 	isb	sy
 8010960:	f3bf 8f4f 	dsb	sy
 8010964:	613b      	str	r3, [r7, #16]
 8010966:	e7fe      	b.n	8010966 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8010968:	68bb      	ldr	r3, [r7, #8]
 801096a:	2b00      	cmp	r3, #0
 801096c:	d102      	bne.n	8010974 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 801096e:	2300      	movs	r3, #0
 8010970:	61fb      	str	r3, [r7, #28]
 8010972:	e004      	b.n	801097e <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010974:	68fb      	ldr	r3, [r7, #12]
 8010976:	68ba      	ldr	r2, [r7, #8]
 8010978:	fb02 f303 	mul.w	r3, r2, r3
 801097c:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 801097e:	69fb      	ldr	r3, [r7, #28]
 8010980:	3348      	adds	r3, #72	; 0x48
 8010982:	4618      	mov	r0, r3
 8010984:	f7ff faa4 	bl	800fed0 <pvPortMalloc>
 8010988:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 801098a:	69bb      	ldr	r3, [r7, #24]
 801098c:	2b00      	cmp	r3, #0
 801098e:	d011      	beq.n	80109b4 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8010990:	69bb      	ldr	r3, [r7, #24]
 8010992:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010994:	697b      	ldr	r3, [r7, #20]
 8010996:	3348      	adds	r3, #72	; 0x48
 8010998:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 801099a:	69bb      	ldr	r3, [r7, #24]
 801099c:	2200      	movs	r2, #0
 801099e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80109a2:	79fa      	ldrb	r2, [r7, #7]
 80109a4:	69bb      	ldr	r3, [r7, #24]
 80109a6:	9300      	str	r3, [sp, #0]
 80109a8:	4613      	mov	r3, r2
 80109aa:	697a      	ldr	r2, [r7, #20]
 80109ac:	68b9      	ldr	r1, [r7, #8]
 80109ae:	68f8      	ldr	r0, [r7, #12]
 80109b0:	f000 f805 	bl	80109be <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80109b4:	69bb      	ldr	r3, [r7, #24]
	}
 80109b6:	4618      	mov	r0, r3
 80109b8:	3720      	adds	r7, #32
 80109ba:	46bd      	mov	sp, r7
 80109bc:	bd80      	pop	{r7, pc}

080109be <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80109be:	b580      	push	{r7, lr}
 80109c0:	b084      	sub	sp, #16
 80109c2:	af00      	add	r7, sp, #0
 80109c4:	60f8      	str	r0, [r7, #12]
 80109c6:	60b9      	str	r1, [r7, #8]
 80109c8:	607a      	str	r2, [r7, #4]
 80109ca:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80109cc:	68bb      	ldr	r3, [r7, #8]
 80109ce:	2b00      	cmp	r3, #0
 80109d0:	d103      	bne.n	80109da <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80109d2:	69bb      	ldr	r3, [r7, #24]
 80109d4:	69ba      	ldr	r2, [r7, #24]
 80109d6:	601a      	str	r2, [r3, #0]
 80109d8:	e002      	b.n	80109e0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80109da:	69bb      	ldr	r3, [r7, #24]
 80109dc:	687a      	ldr	r2, [r7, #4]
 80109de:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80109e0:	69bb      	ldr	r3, [r7, #24]
 80109e2:	68fa      	ldr	r2, [r7, #12]
 80109e4:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80109e6:	69bb      	ldr	r3, [r7, #24]
 80109e8:	68ba      	ldr	r2, [r7, #8]
 80109ea:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80109ec:	2101      	movs	r1, #1
 80109ee:	69b8      	ldr	r0, [r7, #24]
 80109f0:	f7ff ff3e 	bl	8010870 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80109f4:	bf00      	nop
 80109f6:	3710      	adds	r7, #16
 80109f8:	46bd      	mov	sp, r7
 80109fa:	bd80      	pop	{r7, pc}

080109fc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80109fc:	b580      	push	{r7, lr}
 80109fe:	b08e      	sub	sp, #56	; 0x38
 8010a00:	af00      	add	r7, sp, #0
 8010a02:	60f8      	str	r0, [r7, #12]
 8010a04:	60b9      	str	r1, [r7, #8]
 8010a06:	607a      	str	r2, [r7, #4]
 8010a08:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8010a0a:	2300      	movs	r3, #0
 8010a0c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010a0e:	68fb      	ldr	r3, [r7, #12]
 8010a10:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	d109      	bne.n	8010a2c <xQueueGenericSend+0x30>
 8010a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a1c:	f383 8811 	msr	BASEPRI, r3
 8010a20:	f3bf 8f6f 	isb	sy
 8010a24:	f3bf 8f4f 	dsb	sy
 8010a28:	62bb      	str	r3, [r7, #40]	; 0x28
 8010a2a:	e7fe      	b.n	8010a2a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010a2c:	68bb      	ldr	r3, [r7, #8]
 8010a2e:	2b00      	cmp	r3, #0
 8010a30:	d103      	bne.n	8010a3a <xQueueGenericSend+0x3e>
 8010a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a36:	2b00      	cmp	r3, #0
 8010a38:	d101      	bne.n	8010a3e <xQueueGenericSend+0x42>
 8010a3a:	2301      	movs	r3, #1
 8010a3c:	e000      	b.n	8010a40 <xQueueGenericSend+0x44>
 8010a3e:	2300      	movs	r3, #0
 8010a40:	2b00      	cmp	r3, #0
 8010a42:	d109      	bne.n	8010a58 <xQueueGenericSend+0x5c>
 8010a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a48:	f383 8811 	msr	BASEPRI, r3
 8010a4c:	f3bf 8f6f 	isb	sy
 8010a50:	f3bf 8f4f 	dsb	sy
 8010a54:	627b      	str	r3, [r7, #36]	; 0x24
 8010a56:	e7fe      	b.n	8010a56 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010a58:	683b      	ldr	r3, [r7, #0]
 8010a5a:	2b02      	cmp	r3, #2
 8010a5c:	d103      	bne.n	8010a66 <xQueueGenericSend+0x6a>
 8010a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010a62:	2b01      	cmp	r3, #1
 8010a64:	d101      	bne.n	8010a6a <xQueueGenericSend+0x6e>
 8010a66:	2301      	movs	r3, #1
 8010a68:	e000      	b.n	8010a6c <xQueueGenericSend+0x70>
 8010a6a:	2300      	movs	r3, #0
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	d109      	bne.n	8010a84 <xQueueGenericSend+0x88>
 8010a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a74:	f383 8811 	msr	BASEPRI, r3
 8010a78:	f3bf 8f6f 	isb	sy
 8010a7c:	f3bf 8f4f 	dsb	sy
 8010a80:	623b      	str	r3, [r7, #32]
 8010a82:	e7fe      	b.n	8010a82 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010a84:	f001 fa34 	bl	8011ef0 <xTaskGetSchedulerState>
 8010a88:	4603      	mov	r3, r0
 8010a8a:	2b00      	cmp	r3, #0
 8010a8c:	d102      	bne.n	8010a94 <xQueueGenericSend+0x98>
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	2b00      	cmp	r3, #0
 8010a92:	d101      	bne.n	8010a98 <xQueueGenericSend+0x9c>
 8010a94:	2301      	movs	r3, #1
 8010a96:	e000      	b.n	8010a9a <xQueueGenericSend+0x9e>
 8010a98:	2300      	movs	r3, #0
 8010a9a:	2b00      	cmp	r3, #0
 8010a9c:	d109      	bne.n	8010ab2 <xQueueGenericSend+0xb6>
 8010a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010aa2:	f383 8811 	msr	BASEPRI, r3
 8010aa6:	f3bf 8f6f 	isb	sy
 8010aaa:	f3bf 8f4f 	dsb	sy
 8010aae:	61fb      	str	r3, [r7, #28]
 8010ab0:	e7fe      	b.n	8010ab0 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010ab2:	f7ff fdc3 	bl	801063c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ab8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010abc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010abe:	429a      	cmp	r2, r3
 8010ac0:	d302      	bcc.n	8010ac8 <xQueueGenericSend+0xcc>
 8010ac2:	683b      	ldr	r3, [r7, #0]
 8010ac4:	2b02      	cmp	r3, #2
 8010ac6:	d129      	bne.n	8010b1c <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010ac8:	683a      	ldr	r2, [r7, #0]
 8010aca:	68b9      	ldr	r1, [r7, #8]
 8010acc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010ace:	f000 fb15 	bl	80110fc <prvCopyDataToQueue>
 8010ad2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ad8:	2b00      	cmp	r3, #0
 8010ada:	d010      	beq.n	8010afe <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ade:	3324      	adds	r3, #36	; 0x24
 8010ae0:	4618      	mov	r0, r3
 8010ae2:	f001 f84d 	bl	8011b80 <xTaskRemoveFromEventList>
 8010ae6:	4603      	mov	r3, r0
 8010ae8:	2b00      	cmp	r3, #0
 8010aea:	d013      	beq.n	8010b14 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8010aec:	4b3f      	ldr	r3, [pc, #252]	; (8010bec <xQueueGenericSend+0x1f0>)
 8010aee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010af2:	601a      	str	r2, [r3, #0]
 8010af4:	f3bf 8f4f 	dsb	sy
 8010af8:	f3bf 8f6f 	isb	sy
 8010afc:	e00a      	b.n	8010b14 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8010afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b00:	2b00      	cmp	r3, #0
 8010b02:	d007      	beq.n	8010b14 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8010b04:	4b39      	ldr	r3, [pc, #228]	; (8010bec <xQueueGenericSend+0x1f0>)
 8010b06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010b0a:	601a      	str	r2, [r3, #0]
 8010b0c:	f3bf 8f4f 	dsb	sy
 8010b10:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8010b14:	f7ff fdc0 	bl	8010698 <vPortExitCritical>
				return pdPASS;
 8010b18:	2301      	movs	r3, #1
 8010b1a:	e063      	b.n	8010be4 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	2b00      	cmp	r3, #0
 8010b20:	d103      	bne.n	8010b2a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010b22:	f7ff fdb9 	bl	8010698 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8010b26:	2300      	movs	r3, #0
 8010b28:	e05c      	b.n	8010be4 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010b2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b2c:	2b00      	cmp	r3, #0
 8010b2e:	d106      	bne.n	8010b3e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010b30:	f107 0314 	add.w	r3, r7, #20
 8010b34:	4618      	mov	r0, r3
 8010b36:	f001 f885 	bl	8011c44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010b3a:	2301      	movs	r3, #1
 8010b3c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010b3e:	f7ff fdab 	bl	8010698 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010b42:	f000 fe17 	bl	8011774 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010b46:	f7ff fd79 	bl	801063c <vPortEnterCritical>
 8010b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b4c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010b50:	b25b      	sxtb	r3, r3
 8010b52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b56:	d103      	bne.n	8010b60 <xQueueGenericSend+0x164>
 8010b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b5a:	2200      	movs	r2, #0
 8010b5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b62:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010b66:	b25b      	sxtb	r3, r3
 8010b68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b6c:	d103      	bne.n	8010b76 <xQueueGenericSend+0x17a>
 8010b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b70:	2200      	movs	r2, #0
 8010b72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010b76:	f7ff fd8f 	bl	8010698 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010b7a:	1d3a      	adds	r2, r7, #4
 8010b7c:	f107 0314 	add.w	r3, r7, #20
 8010b80:	4611      	mov	r1, r2
 8010b82:	4618      	mov	r0, r3
 8010b84:	f001 f874 	bl	8011c70 <xTaskCheckForTimeOut>
 8010b88:	4603      	mov	r3, r0
 8010b8a:	2b00      	cmp	r3, #0
 8010b8c:	d124      	bne.n	8010bd8 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8010b8e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010b90:	f000 fbac 	bl	80112ec <prvIsQueueFull>
 8010b94:	4603      	mov	r3, r0
 8010b96:	2b00      	cmp	r3, #0
 8010b98:	d018      	beq.n	8010bcc <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8010b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b9c:	3310      	adds	r3, #16
 8010b9e:	687a      	ldr	r2, [r7, #4]
 8010ba0:	4611      	mov	r1, r2
 8010ba2:	4618      	mov	r0, r3
 8010ba4:	f000 ffc8 	bl	8011b38 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8010ba8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010baa:	f000 fb37 	bl	801121c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8010bae:	f000 fdef 	bl	8011790 <xTaskResumeAll>
 8010bb2:	4603      	mov	r3, r0
 8010bb4:	2b00      	cmp	r3, #0
 8010bb6:	f47f af7c 	bne.w	8010ab2 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8010bba:	4b0c      	ldr	r3, [pc, #48]	; (8010bec <xQueueGenericSend+0x1f0>)
 8010bbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010bc0:	601a      	str	r2, [r3, #0]
 8010bc2:	f3bf 8f4f 	dsb	sy
 8010bc6:	f3bf 8f6f 	isb	sy
 8010bca:	e772      	b.n	8010ab2 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8010bcc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010bce:	f000 fb25 	bl	801121c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010bd2:	f000 fddd 	bl	8011790 <xTaskResumeAll>
 8010bd6:	e76c      	b.n	8010ab2 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8010bd8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010bda:	f000 fb1f 	bl	801121c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010bde:	f000 fdd7 	bl	8011790 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8010be2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8010be4:	4618      	mov	r0, r3
 8010be6:	3738      	adds	r7, #56	; 0x38
 8010be8:	46bd      	mov	sp, r7
 8010bea:	bd80      	pop	{r7, pc}
 8010bec:	e000ed04 	.word	0xe000ed04

08010bf0 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010bf0:	b580      	push	{r7, lr}
 8010bf2:	b08e      	sub	sp, #56	; 0x38
 8010bf4:	af00      	add	r7, sp, #0
 8010bf6:	6078      	str	r0, [r7, #4]
 8010bf8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8010bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c00:	2b00      	cmp	r3, #0
 8010c02:	d109      	bne.n	8010c18 <xQueueGiveFromISR+0x28>
 8010c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c08:	f383 8811 	msr	BASEPRI, r3
 8010c0c:	f3bf 8f6f 	isb	sy
 8010c10:	f3bf 8f4f 	dsb	sy
 8010c14:	623b      	str	r3, [r7, #32]
 8010c16:	e7fe      	b.n	8010c16 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c1c:	2b00      	cmp	r3, #0
 8010c1e:	d009      	beq.n	8010c34 <xQueueGiveFromISR+0x44>
 8010c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c24:	f383 8811 	msr	BASEPRI, r3
 8010c28:	f3bf 8f6f 	isb	sy
 8010c2c:	f3bf 8f4f 	dsb	sy
 8010c30:	61fb      	str	r3, [r7, #28]
 8010c32:	e7fe      	b.n	8010c32 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8010c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c36:	681b      	ldr	r3, [r3, #0]
 8010c38:	2b00      	cmp	r3, #0
 8010c3a:	d103      	bne.n	8010c44 <xQueueGiveFromISR+0x54>
 8010c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c3e:	689b      	ldr	r3, [r3, #8]
 8010c40:	2b00      	cmp	r3, #0
 8010c42:	d101      	bne.n	8010c48 <xQueueGiveFromISR+0x58>
 8010c44:	2301      	movs	r3, #1
 8010c46:	e000      	b.n	8010c4a <xQueueGiveFromISR+0x5a>
 8010c48:	2300      	movs	r3, #0
 8010c4a:	2b00      	cmp	r3, #0
 8010c4c:	d109      	bne.n	8010c62 <xQueueGiveFromISR+0x72>
 8010c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c52:	f383 8811 	msr	BASEPRI, r3
 8010c56:	f3bf 8f6f 	isb	sy
 8010c5a:	f3bf 8f4f 	dsb	sy
 8010c5e:	61bb      	str	r3, [r7, #24]
 8010c60:	e7fe      	b.n	8010c60 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010c62:	f7ff fdc7 	bl	80107f4 <vPortValidateInterruptPriority>
	__asm volatile
 8010c66:	f3ef 8211 	mrs	r2, BASEPRI
 8010c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c6e:	f383 8811 	msr	BASEPRI, r3
 8010c72:	f3bf 8f6f 	isb	sy
 8010c76:	f3bf 8f4f 	dsb	sy
 8010c7a:	617a      	str	r2, [r7, #20]
 8010c7c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8010c7e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010c80:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c86:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8010c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010c8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010c8e:	429a      	cmp	r2, r3
 8010c90:	d22b      	bcs.n	8010cea <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c94:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010c98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c9e:	1c5a      	adds	r2, r3, #1
 8010ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ca2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8010ca4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010ca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010cac:	d112      	bne.n	8010cd4 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010cb2:	2b00      	cmp	r3, #0
 8010cb4:	d016      	beq.n	8010ce4 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cb8:	3324      	adds	r3, #36	; 0x24
 8010cba:	4618      	mov	r0, r3
 8010cbc:	f000 ff60 	bl	8011b80 <xTaskRemoveFromEventList>
 8010cc0:	4603      	mov	r3, r0
 8010cc2:	2b00      	cmp	r3, #0
 8010cc4:	d00e      	beq.n	8010ce4 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010cc6:	683b      	ldr	r3, [r7, #0]
 8010cc8:	2b00      	cmp	r3, #0
 8010cca:	d00b      	beq.n	8010ce4 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010ccc:	683b      	ldr	r3, [r7, #0]
 8010cce:	2201      	movs	r2, #1
 8010cd0:	601a      	str	r2, [r3, #0]
 8010cd2:	e007      	b.n	8010ce4 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010cd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010cd8:	3301      	adds	r3, #1
 8010cda:	b2db      	uxtb	r3, r3
 8010cdc:	b25a      	sxtb	r2, r3
 8010cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ce0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8010ce4:	2301      	movs	r3, #1
 8010ce6:	637b      	str	r3, [r7, #52]	; 0x34
 8010ce8:	e001      	b.n	8010cee <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8010cea:	2300      	movs	r3, #0
 8010cec:	637b      	str	r3, [r7, #52]	; 0x34
 8010cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cf0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8010cf2:	68fb      	ldr	r3, [r7, #12]
 8010cf4:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010cf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010cfa:	4618      	mov	r0, r3
 8010cfc:	3738      	adds	r7, #56	; 0x38
 8010cfe:	46bd      	mov	sp, r7
 8010d00:	bd80      	pop	{r7, pc}
	...

08010d04 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8010d04:	b580      	push	{r7, lr}
 8010d06:	b08c      	sub	sp, #48	; 0x30
 8010d08:	af00      	add	r7, sp, #0
 8010d0a:	60f8      	str	r0, [r7, #12]
 8010d0c:	60b9      	str	r1, [r7, #8]
 8010d0e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8010d10:	2300      	movs	r3, #0
 8010d12:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010d14:	68fb      	ldr	r3, [r7, #12]
 8010d16:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d1a:	2b00      	cmp	r3, #0
 8010d1c:	d109      	bne.n	8010d32 <xQueueReceive+0x2e>
	__asm volatile
 8010d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d22:	f383 8811 	msr	BASEPRI, r3
 8010d26:	f3bf 8f6f 	isb	sy
 8010d2a:	f3bf 8f4f 	dsb	sy
 8010d2e:	623b      	str	r3, [r7, #32]
 8010d30:	e7fe      	b.n	8010d30 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010d32:	68bb      	ldr	r3, [r7, #8]
 8010d34:	2b00      	cmp	r3, #0
 8010d36:	d103      	bne.n	8010d40 <xQueueReceive+0x3c>
 8010d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	d101      	bne.n	8010d44 <xQueueReceive+0x40>
 8010d40:	2301      	movs	r3, #1
 8010d42:	e000      	b.n	8010d46 <xQueueReceive+0x42>
 8010d44:	2300      	movs	r3, #0
 8010d46:	2b00      	cmp	r3, #0
 8010d48:	d109      	bne.n	8010d5e <xQueueReceive+0x5a>
 8010d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d4e:	f383 8811 	msr	BASEPRI, r3
 8010d52:	f3bf 8f6f 	isb	sy
 8010d56:	f3bf 8f4f 	dsb	sy
 8010d5a:	61fb      	str	r3, [r7, #28]
 8010d5c:	e7fe      	b.n	8010d5c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010d5e:	f001 f8c7 	bl	8011ef0 <xTaskGetSchedulerState>
 8010d62:	4603      	mov	r3, r0
 8010d64:	2b00      	cmp	r3, #0
 8010d66:	d102      	bne.n	8010d6e <xQueueReceive+0x6a>
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	2b00      	cmp	r3, #0
 8010d6c:	d101      	bne.n	8010d72 <xQueueReceive+0x6e>
 8010d6e:	2301      	movs	r3, #1
 8010d70:	e000      	b.n	8010d74 <xQueueReceive+0x70>
 8010d72:	2300      	movs	r3, #0
 8010d74:	2b00      	cmp	r3, #0
 8010d76:	d109      	bne.n	8010d8c <xQueueReceive+0x88>
 8010d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d7c:	f383 8811 	msr	BASEPRI, r3
 8010d80:	f3bf 8f6f 	isb	sy
 8010d84:	f3bf 8f4f 	dsb	sy
 8010d88:	61bb      	str	r3, [r7, #24]
 8010d8a:	e7fe      	b.n	8010d8a <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010d8c:	f7ff fc56 	bl	801063c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d94:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d98:	2b00      	cmp	r3, #0
 8010d9a:	d01f      	beq.n	8010ddc <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010d9c:	68b9      	ldr	r1, [r7, #8]
 8010d9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010da0:	f000 fa16 	bl	80111d0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010da6:	1e5a      	subs	r2, r3, #1
 8010da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010daa:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010dae:	691b      	ldr	r3, [r3, #16]
 8010db0:	2b00      	cmp	r3, #0
 8010db2:	d00f      	beq.n	8010dd4 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010db6:	3310      	adds	r3, #16
 8010db8:	4618      	mov	r0, r3
 8010dba:	f000 fee1 	bl	8011b80 <xTaskRemoveFromEventList>
 8010dbe:	4603      	mov	r3, r0
 8010dc0:	2b00      	cmp	r3, #0
 8010dc2:	d007      	beq.n	8010dd4 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010dc4:	4b3c      	ldr	r3, [pc, #240]	; (8010eb8 <xQueueReceive+0x1b4>)
 8010dc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010dca:	601a      	str	r2, [r3, #0]
 8010dcc:	f3bf 8f4f 	dsb	sy
 8010dd0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010dd4:	f7ff fc60 	bl	8010698 <vPortExitCritical>
				return pdPASS;
 8010dd8:	2301      	movs	r3, #1
 8010dda:	e069      	b.n	8010eb0 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	2b00      	cmp	r3, #0
 8010de0:	d103      	bne.n	8010dea <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010de2:	f7ff fc59 	bl	8010698 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010de6:	2300      	movs	r3, #0
 8010de8:	e062      	b.n	8010eb0 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010dec:	2b00      	cmp	r3, #0
 8010dee:	d106      	bne.n	8010dfe <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010df0:	f107 0310 	add.w	r3, r7, #16
 8010df4:	4618      	mov	r0, r3
 8010df6:	f000 ff25 	bl	8011c44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010dfa:	2301      	movs	r3, #1
 8010dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010dfe:	f7ff fc4b 	bl	8010698 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010e02:	f000 fcb7 	bl	8011774 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010e06:	f7ff fc19 	bl	801063c <vPortEnterCritical>
 8010e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e0c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010e10:	b25b      	sxtb	r3, r3
 8010e12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010e16:	d103      	bne.n	8010e20 <xQueueReceive+0x11c>
 8010e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e1a:	2200      	movs	r2, #0
 8010e1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e22:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010e26:	b25b      	sxtb	r3, r3
 8010e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010e2c:	d103      	bne.n	8010e36 <xQueueReceive+0x132>
 8010e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e30:	2200      	movs	r2, #0
 8010e32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010e36:	f7ff fc2f 	bl	8010698 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010e3a:	1d3a      	adds	r2, r7, #4
 8010e3c:	f107 0310 	add.w	r3, r7, #16
 8010e40:	4611      	mov	r1, r2
 8010e42:	4618      	mov	r0, r3
 8010e44:	f000 ff14 	bl	8011c70 <xTaskCheckForTimeOut>
 8010e48:	4603      	mov	r3, r0
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	d123      	bne.n	8010e96 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010e4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010e50:	f000 fa36 	bl	80112c0 <prvIsQueueEmpty>
 8010e54:	4603      	mov	r3, r0
 8010e56:	2b00      	cmp	r3, #0
 8010e58:	d017      	beq.n	8010e8a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e5c:	3324      	adds	r3, #36	; 0x24
 8010e5e:	687a      	ldr	r2, [r7, #4]
 8010e60:	4611      	mov	r1, r2
 8010e62:	4618      	mov	r0, r3
 8010e64:	f000 fe68 	bl	8011b38 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010e68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010e6a:	f000 f9d7 	bl	801121c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010e6e:	f000 fc8f 	bl	8011790 <xTaskResumeAll>
 8010e72:	4603      	mov	r3, r0
 8010e74:	2b00      	cmp	r3, #0
 8010e76:	d189      	bne.n	8010d8c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8010e78:	4b0f      	ldr	r3, [pc, #60]	; (8010eb8 <xQueueReceive+0x1b4>)
 8010e7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010e7e:	601a      	str	r2, [r3, #0]
 8010e80:	f3bf 8f4f 	dsb	sy
 8010e84:	f3bf 8f6f 	isb	sy
 8010e88:	e780      	b.n	8010d8c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8010e8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010e8c:	f000 f9c6 	bl	801121c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010e90:	f000 fc7e 	bl	8011790 <xTaskResumeAll>
 8010e94:	e77a      	b.n	8010d8c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8010e96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010e98:	f000 f9c0 	bl	801121c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010e9c:	f000 fc78 	bl	8011790 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010ea0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010ea2:	f000 fa0d 	bl	80112c0 <prvIsQueueEmpty>
 8010ea6:	4603      	mov	r3, r0
 8010ea8:	2b00      	cmp	r3, #0
 8010eaa:	f43f af6f 	beq.w	8010d8c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010eae:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8010eb0:	4618      	mov	r0, r3
 8010eb2:	3730      	adds	r7, #48	; 0x30
 8010eb4:	46bd      	mov	sp, r7
 8010eb6:	bd80      	pop	{r7, pc}
 8010eb8:	e000ed04 	.word	0xe000ed04

08010ebc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8010ebc:	b580      	push	{r7, lr}
 8010ebe:	b08e      	sub	sp, #56	; 0x38
 8010ec0:	af00      	add	r7, sp, #0
 8010ec2:	6078      	str	r0, [r7, #4]
 8010ec4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8010ec6:	2300      	movs	r3, #0
 8010ec8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8010ece:	2300      	movs	r3, #0
 8010ed0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ed4:	2b00      	cmp	r3, #0
 8010ed6:	d109      	bne.n	8010eec <xQueueSemaphoreTake+0x30>
 8010ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010edc:	f383 8811 	msr	BASEPRI, r3
 8010ee0:	f3bf 8f6f 	isb	sy
 8010ee4:	f3bf 8f4f 	dsb	sy
 8010ee8:	623b      	str	r3, [r7, #32]
 8010eea:	e7fe      	b.n	8010eea <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ef0:	2b00      	cmp	r3, #0
 8010ef2:	d009      	beq.n	8010f08 <xQueueSemaphoreTake+0x4c>
 8010ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ef8:	f383 8811 	msr	BASEPRI, r3
 8010efc:	f3bf 8f6f 	isb	sy
 8010f00:	f3bf 8f4f 	dsb	sy
 8010f04:	61fb      	str	r3, [r7, #28]
 8010f06:	e7fe      	b.n	8010f06 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010f08:	f000 fff2 	bl	8011ef0 <xTaskGetSchedulerState>
 8010f0c:	4603      	mov	r3, r0
 8010f0e:	2b00      	cmp	r3, #0
 8010f10:	d102      	bne.n	8010f18 <xQueueSemaphoreTake+0x5c>
 8010f12:	683b      	ldr	r3, [r7, #0]
 8010f14:	2b00      	cmp	r3, #0
 8010f16:	d101      	bne.n	8010f1c <xQueueSemaphoreTake+0x60>
 8010f18:	2301      	movs	r3, #1
 8010f1a:	e000      	b.n	8010f1e <xQueueSemaphoreTake+0x62>
 8010f1c:	2300      	movs	r3, #0
 8010f1e:	2b00      	cmp	r3, #0
 8010f20:	d109      	bne.n	8010f36 <xQueueSemaphoreTake+0x7a>
 8010f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f26:	f383 8811 	msr	BASEPRI, r3
 8010f2a:	f3bf 8f6f 	isb	sy
 8010f2e:	f3bf 8f4f 	dsb	sy
 8010f32:	61bb      	str	r3, [r7, #24]
 8010f34:	e7fe      	b.n	8010f34 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010f36:	f7ff fb81 	bl	801063c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8010f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010f3e:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8010f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f42:	2b00      	cmp	r3, #0
 8010f44:	d024      	beq.n	8010f90 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8010f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f48:	1e5a      	subs	r2, r3, #1
 8010f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f4c:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f50:	681b      	ldr	r3, [r3, #0]
 8010f52:	2b00      	cmp	r3, #0
 8010f54:	d104      	bne.n	8010f60 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8010f56:	f001 f985 	bl	8012264 <pvTaskIncrementMutexHeldCount>
 8010f5a:	4602      	mov	r2, r0
 8010f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f5e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f62:	691b      	ldr	r3, [r3, #16]
 8010f64:	2b00      	cmp	r3, #0
 8010f66:	d00f      	beq.n	8010f88 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f6a:	3310      	adds	r3, #16
 8010f6c:	4618      	mov	r0, r3
 8010f6e:	f000 fe07 	bl	8011b80 <xTaskRemoveFromEventList>
 8010f72:	4603      	mov	r3, r0
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	d007      	beq.n	8010f88 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010f78:	4b53      	ldr	r3, [pc, #332]	; (80110c8 <xQueueSemaphoreTake+0x20c>)
 8010f7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010f7e:	601a      	str	r2, [r3, #0]
 8010f80:	f3bf 8f4f 	dsb	sy
 8010f84:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010f88:	f7ff fb86 	bl	8010698 <vPortExitCritical>
				return pdPASS;
 8010f8c:	2301      	movs	r3, #1
 8010f8e:	e096      	b.n	80110be <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010f90:	683b      	ldr	r3, [r7, #0]
 8010f92:	2b00      	cmp	r3, #0
 8010f94:	d110      	bne.n	8010fb8 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8010f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f98:	2b00      	cmp	r3, #0
 8010f9a:	d009      	beq.n	8010fb0 <xQueueSemaphoreTake+0xf4>
 8010f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fa0:	f383 8811 	msr	BASEPRI, r3
 8010fa4:	f3bf 8f6f 	isb	sy
 8010fa8:	f3bf 8f4f 	dsb	sy
 8010fac:	617b      	str	r3, [r7, #20]
 8010fae:	e7fe      	b.n	8010fae <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8010fb0:	f7ff fb72 	bl	8010698 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010fb4:	2300      	movs	r3, #0
 8010fb6:	e082      	b.n	80110be <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010fb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010fba:	2b00      	cmp	r3, #0
 8010fbc:	d106      	bne.n	8010fcc <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010fbe:	f107 030c 	add.w	r3, r7, #12
 8010fc2:	4618      	mov	r0, r3
 8010fc4:	f000 fe3e 	bl	8011c44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010fc8:	2301      	movs	r3, #1
 8010fca:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010fcc:	f7ff fb64 	bl	8010698 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010fd0:	f000 fbd0 	bl	8011774 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010fd4:	f7ff fb32 	bl	801063c <vPortEnterCritical>
 8010fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fda:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010fde:	b25b      	sxtb	r3, r3
 8010fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010fe4:	d103      	bne.n	8010fee <xQueueSemaphoreTake+0x132>
 8010fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fe8:	2200      	movs	r2, #0
 8010fea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ff0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010ff4:	b25b      	sxtb	r3, r3
 8010ff6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ffa:	d103      	bne.n	8011004 <xQueueSemaphoreTake+0x148>
 8010ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ffe:	2200      	movs	r2, #0
 8011000:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011004:	f7ff fb48 	bl	8010698 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011008:	463a      	mov	r2, r7
 801100a:	f107 030c 	add.w	r3, r7, #12
 801100e:	4611      	mov	r1, r2
 8011010:	4618      	mov	r0, r3
 8011012:	f000 fe2d 	bl	8011c70 <xTaskCheckForTimeOut>
 8011016:	4603      	mov	r3, r0
 8011018:	2b00      	cmp	r3, #0
 801101a:	d132      	bne.n	8011082 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801101c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801101e:	f000 f94f 	bl	80112c0 <prvIsQueueEmpty>
 8011022:	4603      	mov	r3, r0
 8011024:	2b00      	cmp	r3, #0
 8011026:	d026      	beq.n	8011076 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801102a:	681b      	ldr	r3, [r3, #0]
 801102c:	2b00      	cmp	r3, #0
 801102e:	d109      	bne.n	8011044 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8011030:	f7ff fb04 	bl	801063c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8011034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011036:	689b      	ldr	r3, [r3, #8]
 8011038:	4618      	mov	r0, r3
 801103a:	f000 ff77 	bl	8011f2c <xTaskPriorityInherit>
 801103e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8011040:	f7ff fb2a 	bl	8010698 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8011044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011046:	3324      	adds	r3, #36	; 0x24
 8011048:	683a      	ldr	r2, [r7, #0]
 801104a:	4611      	mov	r1, r2
 801104c:	4618      	mov	r0, r3
 801104e:	f000 fd73 	bl	8011b38 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8011052:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011054:	f000 f8e2 	bl	801121c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8011058:	f000 fb9a 	bl	8011790 <xTaskResumeAll>
 801105c:	4603      	mov	r3, r0
 801105e:	2b00      	cmp	r3, #0
 8011060:	f47f af69 	bne.w	8010f36 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8011064:	4b18      	ldr	r3, [pc, #96]	; (80110c8 <xQueueSemaphoreTake+0x20c>)
 8011066:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801106a:	601a      	str	r2, [r3, #0]
 801106c:	f3bf 8f4f 	dsb	sy
 8011070:	f3bf 8f6f 	isb	sy
 8011074:	e75f      	b.n	8010f36 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8011076:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011078:	f000 f8d0 	bl	801121c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801107c:	f000 fb88 	bl	8011790 <xTaskResumeAll>
 8011080:	e759      	b.n	8010f36 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8011082:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011084:	f000 f8ca 	bl	801121c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011088:	f000 fb82 	bl	8011790 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801108c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801108e:	f000 f917 	bl	80112c0 <prvIsQueueEmpty>
 8011092:	4603      	mov	r3, r0
 8011094:	2b00      	cmp	r3, #0
 8011096:	f43f af4e 	beq.w	8010f36 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 801109a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801109c:	2b00      	cmp	r3, #0
 801109e:	d00d      	beq.n	80110bc <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 80110a0:	f7ff facc 	bl	801063c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80110a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80110a6:	f000 f811 	bl	80110cc <prvGetDisinheritPriorityAfterTimeout>
 80110aa:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80110ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110ae:	689b      	ldr	r3, [r3, #8]
 80110b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80110b2:	4618      	mov	r0, r3
 80110b4:	f001 f83e 	bl	8012134 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80110b8:	f7ff faee 	bl	8010698 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80110bc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80110be:	4618      	mov	r0, r3
 80110c0:	3738      	adds	r7, #56	; 0x38
 80110c2:	46bd      	mov	sp, r7
 80110c4:	bd80      	pop	{r7, pc}
 80110c6:	bf00      	nop
 80110c8:	e000ed04 	.word	0xe000ed04

080110cc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80110cc:	b480      	push	{r7}
 80110ce:	b085      	sub	sp, #20
 80110d0:	af00      	add	r7, sp, #0
 80110d2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80110d8:	2b00      	cmp	r3, #0
 80110da:	d006      	beq.n	80110ea <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80110e0:	681b      	ldr	r3, [r3, #0]
 80110e2:	f1c3 0307 	rsb	r3, r3, #7
 80110e6:	60fb      	str	r3, [r7, #12]
 80110e8:	e001      	b.n	80110ee <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80110ea:	2300      	movs	r3, #0
 80110ec:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80110ee:	68fb      	ldr	r3, [r7, #12]
	}
 80110f0:	4618      	mov	r0, r3
 80110f2:	3714      	adds	r7, #20
 80110f4:	46bd      	mov	sp, r7
 80110f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110fa:	4770      	bx	lr

080110fc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80110fc:	b580      	push	{r7, lr}
 80110fe:	b086      	sub	sp, #24
 8011100:	af00      	add	r7, sp, #0
 8011102:	60f8      	str	r0, [r7, #12]
 8011104:	60b9      	str	r1, [r7, #8]
 8011106:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8011108:	2300      	movs	r3, #0
 801110a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801110c:	68fb      	ldr	r3, [r7, #12]
 801110e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011110:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8011112:	68fb      	ldr	r3, [r7, #12]
 8011114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011116:	2b00      	cmp	r3, #0
 8011118:	d10d      	bne.n	8011136 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801111a:	68fb      	ldr	r3, [r7, #12]
 801111c:	681b      	ldr	r3, [r3, #0]
 801111e:	2b00      	cmp	r3, #0
 8011120:	d14d      	bne.n	80111be <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8011122:	68fb      	ldr	r3, [r7, #12]
 8011124:	689b      	ldr	r3, [r3, #8]
 8011126:	4618      	mov	r0, r3
 8011128:	f000 ff80 	bl	801202c <xTaskPriorityDisinherit>
 801112c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801112e:	68fb      	ldr	r3, [r7, #12]
 8011130:	2200      	movs	r2, #0
 8011132:	609a      	str	r2, [r3, #8]
 8011134:	e043      	b.n	80111be <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	2b00      	cmp	r3, #0
 801113a:	d119      	bne.n	8011170 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801113c:	68fb      	ldr	r3, [r7, #12]
 801113e:	6858      	ldr	r0, [r3, #4]
 8011140:	68fb      	ldr	r3, [r7, #12]
 8011142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011144:	461a      	mov	r2, r3
 8011146:	68b9      	ldr	r1, [r7, #8]
 8011148:	f011 fbd0 	bl	80228ec <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801114c:	68fb      	ldr	r3, [r7, #12]
 801114e:	685a      	ldr	r2, [r3, #4]
 8011150:	68fb      	ldr	r3, [r7, #12]
 8011152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011154:	441a      	add	r2, r3
 8011156:	68fb      	ldr	r3, [r7, #12]
 8011158:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801115a:	68fb      	ldr	r3, [r7, #12]
 801115c:	685a      	ldr	r2, [r3, #4]
 801115e:	68fb      	ldr	r3, [r7, #12]
 8011160:	689b      	ldr	r3, [r3, #8]
 8011162:	429a      	cmp	r2, r3
 8011164:	d32b      	bcc.n	80111be <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8011166:	68fb      	ldr	r3, [r7, #12]
 8011168:	681a      	ldr	r2, [r3, #0]
 801116a:	68fb      	ldr	r3, [r7, #12]
 801116c:	605a      	str	r2, [r3, #4]
 801116e:	e026      	b.n	80111be <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8011170:	68fb      	ldr	r3, [r7, #12]
 8011172:	68d8      	ldr	r0, [r3, #12]
 8011174:	68fb      	ldr	r3, [r7, #12]
 8011176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011178:	461a      	mov	r2, r3
 801117a:	68b9      	ldr	r1, [r7, #8]
 801117c:	f011 fbb6 	bl	80228ec <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8011180:	68fb      	ldr	r3, [r7, #12]
 8011182:	68da      	ldr	r2, [r3, #12]
 8011184:	68fb      	ldr	r3, [r7, #12]
 8011186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011188:	425b      	negs	r3, r3
 801118a:	441a      	add	r2, r3
 801118c:	68fb      	ldr	r3, [r7, #12]
 801118e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011190:	68fb      	ldr	r3, [r7, #12]
 8011192:	68da      	ldr	r2, [r3, #12]
 8011194:	68fb      	ldr	r3, [r7, #12]
 8011196:	681b      	ldr	r3, [r3, #0]
 8011198:	429a      	cmp	r2, r3
 801119a:	d207      	bcs.n	80111ac <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801119c:	68fb      	ldr	r3, [r7, #12]
 801119e:	689a      	ldr	r2, [r3, #8]
 80111a0:	68fb      	ldr	r3, [r7, #12]
 80111a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80111a4:	425b      	negs	r3, r3
 80111a6:	441a      	add	r2, r3
 80111a8:	68fb      	ldr	r3, [r7, #12]
 80111aa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	2b02      	cmp	r3, #2
 80111b0:	d105      	bne.n	80111be <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80111b2:	693b      	ldr	r3, [r7, #16]
 80111b4:	2b00      	cmp	r3, #0
 80111b6:	d002      	beq.n	80111be <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80111b8:	693b      	ldr	r3, [r7, #16]
 80111ba:	3b01      	subs	r3, #1
 80111bc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80111be:	693b      	ldr	r3, [r7, #16]
 80111c0:	1c5a      	adds	r2, r3, #1
 80111c2:	68fb      	ldr	r3, [r7, #12]
 80111c4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80111c6:	697b      	ldr	r3, [r7, #20]
}
 80111c8:	4618      	mov	r0, r3
 80111ca:	3718      	adds	r7, #24
 80111cc:	46bd      	mov	sp, r7
 80111ce:	bd80      	pop	{r7, pc}

080111d0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80111d0:	b580      	push	{r7, lr}
 80111d2:	b082      	sub	sp, #8
 80111d4:	af00      	add	r7, sp, #0
 80111d6:	6078      	str	r0, [r7, #4]
 80111d8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80111de:	2b00      	cmp	r3, #0
 80111e0:	d018      	beq.n	8011214 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	68da      	ldr	r2, [r3, #12]
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80111ea:	441a      	add	r2, r3
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	68da      	ldr	r2, [r3, #12]
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	689b      	ldr	r3, [r3, #8]
 80111f8:	429a      	cmp	r2, r3
 80111fa:	d303      	bcc.n	8011204 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	681a      	ldr	r2, [r3, #0]
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	68d9      	ldr	r1, [r3, #12]
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801120c:	461a      	mov	r2, r3
 801120e:	6838      	ldr	r0, [r7, #0]
 8011210:	f011 fb6c 	bl	80228ec <memcpy>
	}
}
 8011214:	bf00      	nop
 8011216:	3708      	adds	r7, #8
 8011218:	46bd      	mov	sp, r7
 801121a:	bd80      	pop	{r7, pc}

0801121c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801121c:	b580      	push	{r7, lr}
 801121e:	b084      	sub	sp, #16
 8011220:	af00      	add	r7, sp, #0
 8011222:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8011224:	f7ff fa0a 	bl	801063c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801122e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011230:	e011      	b.n	8011256 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011236:	2b00      	cmp	r3, #0
 8011238:	d012      	beq.n	8011260 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	3324      	adds	r3, #36	; 0x24
 801123e:	4618      	mov	r0, r3
 8011240:	f000 fc9e 	bl	8011b80 <xTaskRemoveFromEventList>
 8011244:	4603      	mov	r3, r0
 8011246:	2b00      	cmp	r3, #0
 8011248:	d001      	beq.n	801124e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801124a:	f000 fd71 	bl	8011d30 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801124e:	7bfb      	ldrb	r3, [r7, #15]
 8011250:	3b01      	subs	r3, #1
 8011252:	b2db      	uxtb	r3, r3
 8011254:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011256:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801125a:	2b00      	cmp	r3, #0
 801125c:	dce9      	bgt.n	8011232 <prvUnlockQueue+0x16>
 801125e:	e000      	b.n	8011262 <prvUnlockQueue+0x46>
					break;
 8011260:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	22ff      	movs	r2, #255	; 0xff
 8011266:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 801126a:	f7ff fa15 	bl	8010698 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801126e:	f7ff f9e5 	bl	801063c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8011272:	687b      	ldr	r3, [r7, #4]
 8011274:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011278:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801127a:	e011      	b.n	80112a0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801127c:	687b      	ldr	r3, [r7, #4]
 801127e:	691b      	ldr	r3, [r3, #16]
 8011280:	2b00      	cmp	r3, #0
 8011282:	d012      	beq.n	80112aa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	3310      	adds	r3, #16
 8011288:	4618      	mov	r0, r3
 801128a:	f000 fc79 	bl	8011b80 <xTaskRemoveFromEventList>
 801128e:	4603      	mov	r3, r0
 8011290:	2b00      	cmp	r3, #0
 8011292:	d001      	beq.n	8011298 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8011294:	f000 fd4c 	bl	8011d30 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8011298:	7bbb      	ldrb	r3, [r7, #14]
 801129a:	3b01      	subs	r3, #1
 801129c:	b2db      	uxtb	r3, r3
 801129e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80112a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80112a4:	2b00      	cmp	r3, #0
 80112a6:	dce9      	bgt.n	801127c <prvUnlockQueue+0x60>
 80112a8:	e000      	b.n	80112ac <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80112aa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	22ff      	movs	r2, #255	; 0xff
 80112b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80112b4:	f7ff f9f0 	bl	8010698 <vPortExitCritical>
}
 80112b8:	bf00      	nop
 80112ba:	3710      	adds	r7, #16
 80112bc:	46bd      	mov	sp, r7
 80112be:	bd80      	pop	{r7, pc}

080112c0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80112c0:	b580      	push	{r7, lr}
 80112c2:	b084      	sub	sp, #16
 80112c4:	af00      	add	r7, sp, #0
 80112c6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80112c8:	f7ff f9b8 	bl	801063c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80112d0:	2b00      	cmp	r3, #0
 80112d2:	d102      	bne.n	80112da <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80112d4:	2301      	movs	r3, #1
 80112d6:	60fb      	str	r3, [r7, #12]
 80112d8:	e001      	b.n	80112de <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80112da:	2300      	movs	r3, #0
 80112dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80112de:	f7ff f9db 	bl	8010698 <vPortExitCritical>

	return xReturn;
 80112e2:	68fb      	ldr	r3, [r7, #12]
}
 80112e4:	4618      	mov	r0, r3
 80112e6:	3710      	adds	r7, #16
 80112e8:	46bd      	mov	sp, r7
 80112ea:	bd80      	pop	{r7, pc}

080112ec <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80112ec:	b580      	push	{r7, lr}
 80112ee:	b084      	sub	sp, #16
 80112f0:	af00      	add	r7, sp, #0
 80112f2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80112f4:	f7ff f9a2 	bl	801063c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80112f8:	687b      	ldr	r3, [r7, #4]
 80112fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011300:	429a      	cmp	r2, r3
 8011302:	d102      	bne.n	801130a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8011304:	2301      	movs	r3, #1
 8011306:	60fb      	str	r3, [r7, #12]
 8011308:	e001      	b.n	801130e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801130a:	2300      	movs	r3, #0
 801130c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801130e:	f7ff f9c3 	bl	8010698 <vPortExitCritical>

	return xReturn;
 8011312:	68fb      	ldr	r3, [r7, #12]
}
 8011314:	4618      	mov	r0, r3
 8011316:	3710      	adds	r7, #16
 8011318:	46bd      	mov	sp, r7
 801131a:	bd80      	pop	{r7, pc}

0801131c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 801131c:	b580      	push	{r7, lr}
 801131e:	b08e      	sub	sp, #56	; 0x38
 8011320:	af04      	add	r7, sp, #16
 8011322:	60f8      	str	r0, [r7, #12]
 8011324:	60b9      	str	r1, [r7, #8]
 8011326:	607a      	str	r2, [r7, #4]
 8011328:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801132a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801132c:	2b00      	cmp	r3, #0
 801132e:	d109      	bne.n	8011344 <xTaskCreateStatic+0x28>
 8011330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011334:	f383 8811 	msr	BASEPRI, r3
 8011338:	f3bf 8f6f 	isb	sy
 801133c:	f3bf 8f4f 	dsb	sy
 8011340:	623b      	str	r3, [r7, #32]
 8011342:	e7fe      	b.n	8011342 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8011344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011346:	2b00      	cmp	r3, #0
 8011348:	d109      	bne.n	801135e <xTaskCreateStatic+0x42>
 801134a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801134e:	f383 8811 	msr	BASEPRI, r3
 8011352:	f3bf 8f6f 	isb	sy
 8011356:	f3bf 8f4f 	dsb	sy
 801135a:	61fb      	str	r3, [r7, #28]
 801135c:	e7fe      	b.n	801135c <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801135e:	2358      	movs	r3, #88	; 0x58
 8011360:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8011362:	693b      	ldr	r3, [r7, #16]
 8011364:	2b58      	cmp	r3, #88	; 0x58
 8011366:	d009      	beq.n	801137c <xTaskCreateStatic+0x60>
 8011368:	f04f 0350 	mov.w	r3, #80	; 0x50
 801136c:	f383 8811 	msr	BASEPRI, r3
 8011370:	f3bf 8f6f 	isb	sy
 8011374:	f3bf 8f4f 	dsb	sy
 8011378:	61bb      	str	r3, [r7, #24]
 801137a:	e7fe      	b.n	801137a <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801137c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801137e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011380:	2b00      	cmp	r3, #0
 8011382:	d01e      	beq.n	80113c2 <xTaskCreateStatic+0xa6>
 8011384:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011386:	2b00      	cmp	r3, #0
 8011388:	d01b      	beq.n	80113c2 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801138a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801138c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801138e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011390:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011392:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8011394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011396:	2202      	movs	r2, #2
 8011398:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801139c:	2300      	movs	r3, #0
 801139e:	9303      	str	r3, [sp, #12]
 80113a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113a2:	9302      	str	r3, [sp, #8]
 80113a4:	f107 0314 	add.w	r3, r7, #20
 80113a8:	9301      	str	r3, [sp, #4]
 80113aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113ac:	9300      	str	r3, [sp, #0]
 80113ae:	683b      	ldr	r3, [r7, #0]
 80113b0:	687a      	ldr	r2, [r7, #4]
 80113b2:	68b9      	ldr	r1, [r7, #8]
 80113b4:	68f8      	ldr	r0, [r7, #12]
 80113b6:	f000 f850 	bl	801145a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80113ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80113bc:	f000 f8de 	bl	801157c <prvAddNewTaskToReadyList>
 80113c0:	e001      	b.n	80113c6 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 80113c2:	2300      	movs	r3, #0
 80113c4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80113c6:	697b      	ldr	r3, [r7, #20]
	}
 80113c8:	4618      	mov	r0, r3
 80113ca:	3728      	adds	r7, #40	; 0x28
 80113cc:	46bd      	mov	sp, r7
 80113ce:	bd80      	pop	{r7, pc}

080113d0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80113d0:	b580      	push	{r7, lr}
 80113d2:	b08c      	sub	sp, #48	; 0x30
 80113d4:	af04      	add	r7, sp, #16
 80113d6:	60f8      	str	r0, [r7, #12]
 80113d8:	60b9      	str	r1, [r7, #8]
 80113da:	603b      	str	r3, [r7, #0]
 80113dc:	4613      	mov	r3, r2
 80113de:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80113e0:	88fb      	ldrh	r3, [r7, #6]
 80113e2:	009b      	lsls	r3, r3, #2
 80113e4:	4618      	mov	r0, r3
 80113e6:	f7fe fd73 	bl	800fed0 <pvPortMalloc>
 80113ea:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80113ec:	697b      	ldr	r3, [r7, #20]
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	d00e      	beq.n	8011410 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80113f2:	2058      	movs	r0, #88	; 0x58
 80113f4:	f7fe fd6c 	bl	800fed0 <pvPortMalloc>
 80113f8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80113fa:	69fb      	ldr	r3, [r7, #28]
 80113fc:	2b00      	cmp	r3, #0
 80113fe:	d003      	beq.n	8011408 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8011400:	69fb      	ldr	r3, [r7, #28]
 8011402:	697a      	ldr	r2, [r7, #20]
 8011404:	631a      	str	r2, [r3, #48]	; 0x30
 8011406:	e005      	b.n	8011414 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8011408:	6978      	ldr	r0, [r7, #20]
 801140a:	f7fe fe27 	bl	801005c <vPortFree>
 801140e:	e001      	b.n	8011414 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8011410:	2300      	movs	r3, #0
 8011412:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8011414:	69fb      	ldr	r3, [r7, #28]
 8011416:	2b00      	cmp	r3, #0
 8011418:	d017      	beq.n	801144a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801141a:	69fb      	ldr	r3, [r7, #28]
 801141c:	2200      	movs	r2, #0
 801141e:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8011422:	88fa      	ldrh	r2, [r7, #6]
 8011424:	2300      	movs	r3, #0
 8011426:	9303      	str	r3, [sp, #12]
 8011428:	69fb      	ldr	r3, [r7, #28]
 801142a:	9302      	str	r3, [sp, #8]
 801142c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801142e:	9301      	str	r3, [sp, #4]
 8011430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011432:	9300      	str	r3, [sp, #0]
 8011434:	683b      	ldr	r3, [r7, #0]
 8011436:	68b9      	ldr	r1, [r7, #8]
 8011438:	68f8      	ldr	r0, [r7, #12]
 801143a:	f000 f80e 	bl	801145a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801143e:	69f8      	ldr	r0, [r7, #28]
 8011440:	f000 f89c 	bl	801157c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8011444:	2301      	movs	r3, #1
 8011446:	61bb      	str	r3, [r7, #24]
 8011448:	e002      	b.n	8011450 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801144a:	f04f 33ff 	mov.w	r3, #4294967295
 801144e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8011450:	69bb      	ldr	r3, [r7, #24]
	}
 8011452:	4618      	mov	r0, r3
 8011454:	3720      	adds	r7, #32
 8011456:	46bd      	mov	sp, r7
 8011458:	bd80      	pop	{r7, pc}

0801145a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801145a:	b580      	push	{r7, lr}
 801145c:	b088      	sub	sp, #32
 801145e:	af00      	add	r7, sp, #0
 8011460:	60f8      	str	r0, [r7, #12]
 8011462:	60b9      	str	r1, [r7, #8]
 8011464:	607a      	str	r2, [r7, #4]
 8011466:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8011468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801146a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	009b      	lsls	r3, r3, #2
 8011470:	461a      	mov	r2, r3
 8011472:	21a5      	movs	r1, #165	; 0xa5
 8011474:	f011 fa45 	bl	8022902 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8011478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801147a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801147c:	687b      	ldr	r3, [r7, #4]
 801147e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8011482:	3b01      	subs	r3, #1
 8011484:	009b      	lsls	r3, r3, #2
 8011486:	4413      	add	r3, r2
 8011488:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801148a:	69bb      	ldr	r3, [r7, #24]
 801148c:	f023 0307 	bic.w	r3, r3, #7
 8011490:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8011492:	69bb      	ldr	r3, [r7, #24]
 8011494:	f003 0307 	and.w	r3, r3, #7
 8011498:	2b00      	cmp	r3, #0
 801149a:	d009      	beq.n	80114b0 <prvInitialiseNewTask+0x56>
 801149c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114a0:	f383 8811 	msr	BASEPRI, r3
 80114a4:	f3bf 8f6f 	isb	sy
 80114a8:	f3bf 8f4f 	dsb	sy
 80114ac:	617b      	str	r3, [r7, #20]
 80114ae:	e7fe      	b.n	80114ae <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80114b0:	68bb      	ldr	r3, [r7, #8]
 80114b2:	2b00      	cmp	r3, #0
 80114b4:	d01f      	beq.n	80114f6 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80114b6:	2300      	movs	r3, #0
 80114b8:	61fb      	str	r3, [r7, #28]
 80114ba:	e012      	b.n	80114e2 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80114bc:	68ba      	ldr	r2, [r7, #8]
 80114be:	69fb      	ldr	r3, [r7, #28]
 80114c0:	4413      	add	r3, r2
 80114c2:	7819      	ldrb	r1, [r3, #0]
 80114c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80114c6:	69fb      	ldr	r3, [r7, #28]
 80114c8:	4413      	add	r3, r2
 80114ca:	3334      	adds	r3, #52	; 0x34
 80114cc:	460a      	mov	r2, r1
 80114ce:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80114d0:	68ba      	ldr	r2, [r7, #8]
 80114d2:	69fb      	ldr	r3, [r7, #28]
 80114d4:	4413      	add	r3, r2
 80114d6:	781b      	ldrb	r3, [r3, #0]
 80114d8:	2b00      	cmp	r3, #0
 80114da:	d006      	beq.n	80114ea <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80114dc:	69fb      	ldr	r3, [r7, #28]
 80114de:	3301      	adds	r3, #1
 80114e0:	61fb      	str	r3, [r7, #28]
 80114e2:	69fb      	ldr	r3, [r7, #28]
 80114e4:	2b0f      	cmp	r3, #15
 80114e6:	d9e9      	bls.n	80114bc <prvInitialiseNewTask+0x62>
 80114e8:	e000      	b.n	80114ec <prvInitialiseNewTask+0x92>
			{
				break;
 80114ea:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80114ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114ee:	2200      	movs	r2, #0
 80114f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80114f4:	e003      	b.n	80114fe <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80114f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114f8:	2200      	movs	r2, #0
 80114fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80114fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011500:	2b06      	cmp	r3, #6
 8011502:	d901      	bls.n	8011508 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8011504:	2306      	movs	r3, #6
 8011506:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8011508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801150a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801150c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801150e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011510:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011512:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8011514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011516:	2200      	movs	r2, #0
 8011518:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801151a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801151c:	3304      	adds	r3, #4
 801151e:	4618      	mov	r0, r3
 8011520:	f7fe fed0 	bl	80102c4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8011524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011526:	3318      	adds	r3, #24
 8011528:	4618      	mov	r0, r3
 801152a:	f7fe fecb 	bl	80102c4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801152e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011530:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011532:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011536:	f1c3 0207 	rsb	r2, r3, #7
 801153a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801153c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801153e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011540:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011542:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 8011544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011546:	2200      	movs	r2, #0
 8011548:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801154a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801154c:	2200      	movs	r2, #0
 801154e:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8011550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011552:	2200      	movs	r2, #0
 8011554:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8011558:	683a      	ldr	r2, [r7, #0]
 801155a:	68f9      	ldr	r1, [r7, #12]
 801155c:	69b8      	ldr	r0, [r7, #24]
 801155e:	f7fe ff45 	bl	80103ec <pxPortInitialiseStack>
 8011562:	4602      	mov	r2, r0
 8011564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011566:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8011568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801156a:	2b00      	cmp	r3, #0
 801156c:	d002      	beq.n	8011574 <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801156e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011570:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011572:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011574:	bf00      	nop
 8011576:	3720      	adds	r7, #32
 8011578:	46bd      	mov	sp, r7
 801157a:	bd80      	pop	{r7, pc}

0801157c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801157c:	b580      	push	{r7, lr}
 801157e:	b082      	sub	sp, #8
 8011580:	af00      	add	r7, sp, #0
 8011582:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8011584:	f7ff f85a 	bl	801063c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8011588:	4b2a      	ldr	r3, [pc, #168]	; (8011634 <prvAddNewTaskToReadyList+0xb8>)
 801158a:	681b      	ldr	r3, [r3, #0]
 801158c:	3301      	adds	r3, #1
 801158e:	4a29      	ldr	r2, [pc, #164]	; (8011634 <prvAddNewTaskToReadyList+0xb8>)
 8011590:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8011592:	4b29      	ldr	r3, [pc, #164]	; (8011638 <prvAddNewTaskToReadyList+0xbc>)
 8011594:	681b      	ldr	r3, [r3, #0]
 8011596:	2b00      	cmp	r3, #0
 8011598:	d109      	bne.n	80115ae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801159a:	4a27      	ldr	r2, [pc, #156]	; (8011638 <prvAddNewTaskToReadyList+0xbc>)
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80115a0:	4b24      	ldr	r3, [pc, #144]	; (8011634 <prvAddNewTaskToReadyList+0xb8>)
 80115a2:	681b      	ldr	r3, [r3, #0]
 80115a4:	2b01      	cmp	r3, #1
 80115a6:	d110      	bne.n	80115ca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80115a8:	f000 fbe8 	bl	8011d7c <prvInitialiseTaskLists>
 80115ac:	e00d      	b.n	80115ca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80115ae:	4b23      	ldr	r3, [pc, #140]	; (801163c <prvAddNewTaskToReadyList+0xc0>)
 80115b0:	681b      	ldr	r3, [r3, #0]
 80115b2:	2b00      	cmp	r3, #0
 80115b4:	d109      	bne.n	80115ca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80115b6:	4b20      	ldr	r3, [pc, #128]	; (8011638 <prvAddNewTaskToReadyList+0xbc>)
 80115b8:	681b      	ldr	r3, [r3, #0]
 80115ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80115c0:	429a      	cmp	r2, r3
 80115c2:	d802      	bhi.n	80115ca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80115c4:	4a1c      	ldr	r2, [pc, #112]	; (8011638 <prvAddNewTaskToReadyList+0xbc>)
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80115ca:	4b1d      	ldr	r3, [pc, #116]	; (8011640 <prvAddNewTaskToReadyList+0xc4>)
 80115cc:	681b      	ldr	r3, [r3, #0]
 80115ce:	3301      	adds	r3, #1
 80115d0:	4a1b      	ldr	r2, [pc, #108]	; (8011640 <prvAddNewTaskToReadyList+0xc4>)
 80115d2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80115d8:	2201      	movs	r2, #1
 80115da:	409a      	lsls	r2, r3
 80115dc:	4b19      	ldr	r3, [pc, #100]	; (8011644 <prvAddNewTaskToReadyList+0xc8>)
 80115de:	681b      	ldr	r3, [r3, #0]
 80115e0:	4313      	orrs	r3, r2
 80115e2:	4a18      	ldr	r2, [pc, #96]	; (8011644 <prvAddNewTaskToReadyList+0xc8>)
 80115e4:	6013      	str	r3, [r2, #0]
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80115ea:	4613      	mov	r3, r2
 80115ec:	009b      	lsls	r3, r3, #2
 80115ee:	4413      	add	r3, r2
 80115f0:	009b      	lsls	r3, r3, #2
 80115f2:	4a15      	ldr	r2, [pc, #84]	; (8011648 <prvAddNewTaskToReadyList+0xcc>)
 80115f4:	441a      	add	r2, r3
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	3304      	adds	r3, #4
 80115fa:	4619      	mov	r1, r3
 80115fc:	4610      	mov	r0, r2
 80115fe:	f7fe fe6e 	bl	80102de <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8011602:	f7ff f849 	bl	8010698 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8011606:	4b0d      	ldr	r3, [pc, #52]	; (801163c <prvAddNewTaskToReadyList+0xc0>)
 8011608:	681b      	ldr	r3, [r3, #0]
 801160a:	2b00      	cmp	r3, #0
 801160c:	d00e      	beq.n	801162c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801160e:	4b0a      	ldr	r3, [pc, #40]	; (8011638 <prvAddNewTaskToReadyList+0xbc>)
 8011610:	681b      	ldr	r3, [r3, #0]
 8011612:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011618:	429a      	cmp	r2, r3
 801161a:	d207      	bcs.n	801162c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801161c:	4b0b      	ldr	r3, [pc, #44]	; (801164c <prvAddNewTaskToReadyList+0xd0>)
 801161e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011622:	601a      	str	r2, [r3, #0]
 8011624:	f3bf 8f4f 	dsb	sy
 8011628:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801162c:	bf00      	nop
 801162e:	3708      	adds	r7, #8
 8011630:	46bd      	mov	sp, r7
 8011632:	bd80      	pop	{r7, pc}
 8011634:	2000d16c 	.word	0x2000d16c
 8011638:	2000d06c 	.word	0x2000d06c
 801163c:	2000d178 	.word	0x2000d178
 8011640:	2000d188 	.word	0x2000d188
 8011644:	2000d174 	.word	0x2000d174
 8011648:	2000d070 	.word	0x2000d070
 801164c:	e000ed04 	.word	0xe000ed04

08011650 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8011650:	b580      	push	{r7, lr}
 8011652:	b084      	sub	sp, #16
 8011654:	af00      	add	r7, sp, #0
 8011656:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8011658:	2300      	movs	r3, #0
 801165a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	2b00      	cmp	r3, #0
 8011660:	d016      	beq.n	8011690 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8011662:	4b13      	ldr	r3, [pc, #76]	; (80116b0 <vTaskDelay+0x60>)
 8011664:	681b      	ldr	r3, [r3, #0]
 8011666:	2b00      	cmp	r3, #0
 8011668:	d009      	beq.n	801167e <vTaskDelay+0x2e>
 801166a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801166e:	f383 8811 	msr	BASEPRI, r3
 8011672:	f3bf 8f6f 	isb	sy
 8011676:	f3bf 8f4f 	dsb	sy
 801167a:	60bb      	str	r3, [r7, #8]
 801167c:	e7fe      	b.n	801167c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 801167e:	f000 f879 	bl	8011774 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8011682:	2100      	movs	r1, #0
 8011684:	6878      	ldr	r0, [r7, #4]
 8011686:	f000 fe01 	bl	801228c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801168a:	f000 f881 	bl	8011790 <xTaskResumeAll>
 801168e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8011690:	68fb      	ldr	r3, [r7, #12]
 8011692:	2b00      	cmp	r3, #0
 8011694:	d107      	bne.n	80116a6 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8011696:	4b07      	ldr	r3, [pc, #28]	; (80116b4 <vTaskDelay+0x64>)
 8011698:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801169c:	601a      	str	r2, [r3, #0]
 801169e:	f3bf 8f4f 	dsb	sy
 80116a2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80116a6:	bf00      	nop
 80116a8:	3710      	adds	r7, #16
 80116aa:	46bd      	mov	sp, r7
 80116ac:	bd80      	pop	{r7, pc}
 80116ae:	bf00      	nop
 80116b0:	2000d194 	.word	0x2000d194
 80116b4:	e000ed04 	.word	0xe000ed04

080116b8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80116b8:	b580      	push	{r7, lr}
 80116ba:	b08a      	sub	sp, #40	; 0x28
 80116bc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80116be:	2300      	movs	r3, #0
 80116c0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80116c2:	2300      	movs	r3, #0
 80116c4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80116c6:	463a      	mov	r2, r7
 80116c8:	1d39      	adds	r1, r7, #4
 80116ca:	f107 0308 	add.w	r3, r7, #8
 80116ce:	4618      	mov	r0, r3
 80116d0:	f7ee ff80 	bl	80005d4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80116d4:	6839      	ldr	r1, [r7, #0]
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	68ba      	ldr	r2, [r7, #8]
 80116da:	9202      	str	r2, [sp, #8]
 80116dc:	9301      	str	r3, [sp, #4]
 80116de:	2300      	movs	r3, #0
 80116e0:	9300      	str	r3, [sp, #0]
 80116e2:	2300      	movs	r3, #0
 80116e4:	460a      	mov	r2, r1
 80116e6:	491d      	ldr	r1, [pc, #116]	; (801175c <vTaskStartScheduler+0xa4>)
 80116e8:	481d      	ldr	r0, [pc, #116]	; (8011760 <vTaskStartScheduler+0xa8>)
 80116ea:	f7ff fe17 	bl	801131c <xTaskCreateStatic>
 80116ee:	4602      	mov	r2, r0
 80116f0:	4b1c      	ldr	r3, [pc, #112]	; (8011764 <vTaskStartScheduler+0xac>)
 80116f2:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80116f4:	4b1b      	ldr	r3, [pc, #108]	; (8011764 <vTaskStartScheduler+0xac>)
 80116f6:	681b      	ldr	r3, [r3, #0]
 80116f8:	2b00      	cmp	r3, #0
 80116fa:	d002      	beq.n	8011702 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80116fc:	2301      	movs	r3, #1
 80116fe:	617b      	str	r3, [r7, #20]
 8011700:	e001      	b.n	8011706 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8011702:	2300      	movs	r3, #0
 8011704:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8011706:	697b      	ldr	r3, [r7, #20]
 8011708:	2b01      	cmp	r3, #1
 801170a:	d115      	bne.n	8011738 <vTaskStartScheduler+0x80>
 801170c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011710:	f383 8811 	msr	BASEPRI, r3
 8011714:	f3bf 8f6f 	isb	sy
 8011718:	f3bf 8f4f 	dsb	sy
 801171c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801171e:	4b12      	ldr	r3, [pc, #72]	; (8011768 <vTaskStartScheduler+0xb0>)
 8011720:	f04f 32ff 	mov.w	r2, #4294967295
 8011724:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8011726:	4b11      	ldr	r3, [pc, #68]	; (801176c <vTaskStartScheduler+0xb4>)
 8011728:	2201      	movs	r2, #1
 801172a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801172c:	4b10      	ldr	r3, [pc, #64]	; (8011770 <vTaskStartScheduler+0xb8>)
 801172e:	2200      	movs	r2, #0
 8011730:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8011732:	f7fe fee5 	bl	8010500 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8011736:	e00d      	b.n	8011754 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8011738:	697b      	ldr	r3, [r7, #20]
 801173a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801173e:	d109      	bne.n	8011754 <vTaskStartScheduler+0x9c>
 8011740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011744:	f383 8811 	msr	BASEPRI, r3
 8011748:	f3bf 8f6f 	isb	sy
 801174c:	f3bf 8f4f 	dsb	sy
 8011750:	60fb      	str	r3, [r7, #12]
 8011752:	e7fe      	b.n	8011752 <vTaskStartScheduler+0x9a>
}
 8011754:	bf00      	nop
 8011756:	3718      	adds	r7, #24
 8011758:	46bd      	mov	sp, r7
 801175a:	bd80      	pop	{r7, pc}
 801175c:	08023fa8 	.word	0x08023fa8
 8011760:	08011d49 	.word	0x08011d49
 8011764:	2000d190 	.word	0x2000d190
 8011768:	2000d18c 	.word	0x2000d18c
 801176c:	2000d178 	.word	0x2000d178
 8011770:	2000d170 	.word	0x2000d170

08011774 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8011774:	b480      	push	{r7}
 8011776:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8011778:	4b04      	ldr	r3, [pc, #16]	; (801178c <vTaskSuspendAll+0x18>)
 801177a:	681b      	ldr	r3, [r3, #0]
 801177c:	3301      	adds	r3, #1
 801177e:	4a03      	ldr	r2, [pc, #12]	; (801178c <vTaskSuspendAll+0x18>)
 8011780:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8011782:	bf00      	nop
 8011784:	46bd      	mov	sp, r7
 8011786:	f85d 7b04 	ldr.w	r7, [sp], #4
 801178a:	4770      	bx	lr
 801178c:	2000d194 	.word	0x2000d194

08011790 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8011790:	b580      	push	{r7, lr}
 8011792:	b084      	sub	sp, #16
 8011794:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8011796:	2300      	movs	r3, #0
 8011798:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801179a:	2300      	movs	r3, #0
 801179c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801179e:	4b41      	ldr	r3, [pc, #260]	; (80118a4 <xTaskResumeAll+0x114>)
 80117a0:	681b      	ldr	r3, [r3, #0]
 80117a2:	2b00      	cmp	r3, #0
 80117a4:	d109      	bne.n	80117ba <xTaskResumeAll+0x2a>
 80117a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117aa:	f383 8811 	msr	BASEPRI, r3
 80117ae:	f3bf 8f6f 	isb	sy
 80117b2:	f3bf 8f4f 	dsb	sy
 80117b6:	603b      	str	r3, [r7, #0]
 80117b8:	e7fe      	b.n	80117b8 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80117ba:	f7fe ff3f 	bl	801063c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80117be:	4b39      	ldr	r3, [pc, #228]	; (80118a4 <xTaskResumeAll+0x114>)
 80117c0:	681b      	ldr	r3, [r3, #0]
 80117c2:	3b01      	subs	r3, #1
 80117c4:	4a37      	ldr	r2, [pc, #220]	; (80118a4 <xTaskResumeAll+0x114>)
 80117c6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80117c8:	4b36      	ldr	r3, [pc, #216]	; (80118a4 <xTaskResumeAll+0x114>)
 80117ca:	681b      	ldr	r3, [r3, #0]
 80117cc:	2b00      	cmp	r3, #0
 80117ce:	d161      	bne.n	8011894 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80117d0:	4b35      	ldr	r3, [pc, #212]	; (80118a8 <xTaskResumeAll+0x118>)
 80117d2:	681b      	ldr	r3, [r3, #0]
 80117d4:	2b00      	cmp	r3, #0
 80117d6:	d05d      	beq.n	8011894 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80117d8:	e02e      	b.n	8011838 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80117da:	4b34      	ldr	r3, [pc, #208]	; (80118ac <xTaskResumeAll+0x11c>)
 80117dc:	68db      	ldr	r3, [r3, #12]
 80117de:	68db      	ldr	r3, [r3, #12]
 80117e0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80117e2:	68fb      	ldr	r3, [r7, #12]
 80117e4:	3318      	adds	r3, #24
 80117e6:	4618      	mov	r0, r3
 80117e8:	f7fe fdd6 	bl	8010398 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80117ec:	68fb      	ldr	r3, [r7, #12]
 80117ee:	3304      	adds	r3, #4
 80117f0:	4618      	mov	r0, r3
 80117f2:	f7fe fdd1 	bl	8010398 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80117f6:	68fb      	ldr	r3, [r7, #12]
 80117f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80117fa:	2201      	movs	r2, #1
 80117fc:	409a      	lsls	r2, r3
 80117fe:	4b2c      	ldr	r3, [pc, #176]	; (80118b0 <xTaskResumeAll+0x120>)
 8011800:	681b      	ldr	r3, [r3, #0]
 8011802:	4313      	orrs	r3, r2
 8011804:	4a2a      	ldr	r2, [pc, #168]	; (80118b0 <xTaskResumeAll+0x120>)
 8011806:	6013      	str	r3, [r2, #0]
 8011808:	68fb      	ldr	r3, [r7, #12]
 801180a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801180c:	4613      	mov	r3, r2
 801180e:	009b      	lsls	r3, r3, #2
 8011810:	4413      	add	r3, r2
 8011812:	009b      	lsls	r3, r3, #2
 8011814:	4a27      	ldr	r2, [pc, #156]	; (80118b4 <xTaskResumeAll+0x124>)
 8011816:	441a      	add	r2, r3
 8011818:	68fb      	ldr	r3, [r7, #12]
 801181a:	3304      	adds	r3, #4
 801181c:	4619      	mov	r1, r3
 801181e:	4610      	mov	r0, r2
 8011820:	f7fe fd5d 	bl	80102de <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011824:	68fb      	ldr	r3, [r7, #12]
 8011826:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011828:	4b23      	ldr	r3, [pc, #140]	; (80118b8 <xTaskResumeAll+0x128>)
 801182a:	681b      	ldr	r3, [r3, #0]
 801182c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801182e:	429a      	cmp	r2, r3
 8011830:	d302      	bcc.n	8011838 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8011832:	4b22      	ldr	r3, [pc, #136]	; (80118bc <xTaskResumeAll+0x12c>)
 8011834:	2201      	movs	r2, #1
 8011836:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011838:	4b1c      	ldr	r3, [pc, #112]	; (80118ac <xTaskResumeAll+0x11c>)
 801183a:	681b      	ldr	r3, [r3, #0]
 801183c:	2b00      	cmp	r3, #0
 801183e:	d1cc      	bne.n	80117da <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8011840:	68fb      	ldr	r3, [r7, #12]
 8011842:	2b00      	cmp	r3, #0
 8011844:	d001      	beq.n	801184a <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8011846:	f000 fb33 	bl	8011eb0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 801184a:	4b1d      	ldr	r3, [pc, #116]	; (80118c0 <xTaskResumeAll+0x130>)
 801184c:	681b      	ldr	r3, [r3, #0]
 801184e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	2b00      	cmp	r3, #0
 8011854:	d010      	beq.n	8011878 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8011856:	f000 f837 	bl	80118c8 <xTaskIncrementTick>
 801185a:	4603      	mov	r3, r0
 801185c:	2b00      	cmp	r3, #0
 801185e:	d002      	beq.n	8011866 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8011860:	4b16      	ldr	r3, [pc, #88]	; (80118bc <xTaskResumeAll+0x12c>)
 8011862:	2201      	movs	r2, #1
 8011864:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	3b01      	subs	r3, #1
 801186a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	2b00      	cmp	r3, #0
 8011870:	d1f1      	bne.n	8011856 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8011872:	4b13      	ldr	r3, [pc, #76]	; (80118c0 <xTaskResumeAll+0x130>)
 8011874:	2200      	movs	r2, #0
 8011876:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8011878:	4b10      	ldr	r3, [pc, #64]	; (80118bc <xTaskResumeAll+0x12c>)
 801187a:	681b      	ldr	r3, [r3, #0]
 801187c:	2b00      	cmp	r3, #0
 801187e:	d009      	beq.n	8011894 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8011880:	2301      	movs	r3, #1
 8011882:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8011884:	4b0f      	ldr	r3, [pc, #60]	; (80118c4 <xTaskResumeAll+0x134>)
 8011886:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801188a:	601a      	str	r2, [r3, #0]
 801188c:	f3bf 8f4f 	dsb	sy
 8011890:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011894:	f7fe ff00 	bl	8010698 <vPortExitCritical>

	return xAlreadyYielded;
 8011898:	68bb      	ldr	r3, [r7, #8]
}
 801189a:	4618      	mov	r0, r3
 801189c:	3710      	adds	r7, #16
 801189e:	46bd      	mov	sp, r7
 80118a0:	bd80      	pop	{r7, pc}
 80118a2:	bf00      	nop
 80118a4:	2000d194 	.word	0x2000d194
 80118a8:	2000d16c 	.word	0x2000d16c
 80118ac:	2000d12c 	.word	0x2000d12c
 80118b0:	2000d174 	.word	0x2000d174
 80118b4:	2000d070 	.word	0x2000d070
 80118b8:	2000d06c 	.word	0x2000d06c
 80118bc:	2000d180 	.word	0x2000d180
 80118c0:	2000d17c 	.word	0x2000d17c
 80118c4:	e000ed04 	.word	0xe000ed04

080118c8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80118c8:	b580      	push	{r7, lr}
 80118ca:	b086      	sub	sp, #24
 80118cc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80118ce:	2300      	movs	r3, #0
 80118d0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80118d2:	4b4e      	ldr	r3, [pc, #312]	; (8011a0c <xTaskIncrementTick+0x144>)
 80118d4:	681b      	ldr	r3, [r3, #0]
 80118d6:	2b00      	cmp	r3, #0
 80118d8:	f040 8087 	bne.w	80119ea <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80118dc:	4b4c      	ldr	r3, [pc, #304]	; (8011a10 <xTaskIncrementTick+0x148>)
 80118de:	681b      	ldr	r3, [r3, #0]
 80118e0:	3301      	adds	r3, #1
 80118e2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80118e4:	4a4a      	ldr	r2, [pc, #296]	; (8011a10 <xTaskIncrementTick+0x148>)
 80118e6:	693b      	ldr	r3, [r7, #16]
 80118e8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80118ea:	693b      	ldr	r3, [r7, #16]
 80118ec:	2b00      	cmp	r3, #0
 80118ee:	d11f      	bne.n	8011930 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80118f0:	4b48      	ldr	r3, [pc, #288]	; (8011a14 <xTaskIncrementTick+0x14c>)
 80118f2:	681b      	ldr	r3, [r3, #0]
 80118f4:	681b      	ldr	r3, [r3, #0]
 80118f6:	2b00      	cmp	r3, #0
 80118f8:	d009      	beq.n	801190e <xTaskIncrementTick+0x46>
 80118fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118fe:	f383 8811 	msr	BASEPRI, r3
 8011902:	f3bf 8f6f 	isb	sy
 8011906:	f3bf 8f4f 	dsb	sy
 801190a:	603b      	str	r3, [r7, #0]
 801190c:	e7fe      	b.n	801190c <xTaskIncrementTick+0x44>
 801190e:	4b41      	ldr	r3, [pc, #260]	; (8011a14 <xTaskIncrementTick+0x14c>)
 8011910:	681b      	ldr	r3, [r3, #0]
 8011912:	60fb      	str	r3, [r7, #12]
 8011914:	4b40      	ldr	r3, [pc, #256]	; (8011a18 <xTaskIncrementTick+0x150>)
 8011916:	681b      	ldr	r3, [r3, #0]
 8011918:	4a3e      	ldr	r2, [pc, #248]	; (8011a14 <xTaskIncrementTick+0x14c>)
 801191a:	6013      	str	r3, [r2, #0]
 801191c:	4a3e      	ldr	r2, [pc, #248]	; (8011a18 <xTaskIncrementTick+0x150>)
 801191e:	68fb      	ldr	r3, [r7, #12]
 8011920:	6013      	str	r3, [r2, #0]
 8011922:	4b3e      	ldr	r3, [pc, #248]	; (8011a1c <xTaskIncrementTick+0x154>)
 8011924:	681b      	ldr	r3, [r3, #0]
 8011926:	3301      	adds	r3, #1
 8011928:	4a3c      	ldr	r2, [pc, #240]	; (8011a1c <xTaskIncrementTick+0x154>)
 801192a:	6013      	str	r3, [r2, #0]
 801192c:	f000 fac0 	bl	8011eb0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8011930:	4b3b      	ldr	r3, [pc, #236]	; (8011a20 <xTaskIncrementTick+0x158>)
 8011932:	681b      	ldr	r3, [r3, #0]
 8011934:	693a      	ldr	r2, [r7, #16]
 8011936:	429a      	cmp	r2, r3
 8011938:	d348      	bcc.n	80119cc <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801193a:	4b36      	ldr	r3, [pc, #216]	; (8011a14 <xTaskIncrementTick+0x14c>)
 801193c:	681b      	ldr	r3, [r3, #0]
 801193e:	681b      	ldr	r3, [r3, #0]
 8011940:	2b00      	cmp	r3, #0
 8011942:	d104      	bne.n	801194e <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011944:	4b36      	ldr	r3, [pc, #216]	; (8011a20 <xTaskIncrementTick+0x158>)
 8011946:	f04f 32ff 	mov.w	r2, #4294967295
 801194a:	601a      	str	r2, [r3, #0]
					break;
 801194c:	e03e      	b.n	80119cc <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801194e:	4b31      	ldr	r3, [pc, #196]	; (8011a14 <xTaskIncrementTick+0x14c>)
 8011950:	681b      	ldr	r3, [r3, #0]
 8011952:	68db      	ldr	r3, [r3, #12]
 8011954:	68db      	ldr	r3, [r3, #12]
 8011956:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8011958:	68bb      	ldr	r3, [r7, #8]
 801195a:	685b      	ldr	r3, [r3, #4]
 801195c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801195e:	693a      	ldr	r2, [r7, #16]
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	429a      	cmp	r2, r3
 8011964:	d203      	bcs.n	801196e <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8011966:	4a2e      	ldr	r2, [pc, #184]	; (8011a20 <xTaskIncrementTick+0x158>)
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801196c:	e02e      	b.n	80119cc <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801196e:	68bb      	ldr	r3, [r7, #8]
 8011970:	3304      	adds	r3, #4
 8011972:	4618      	mov	r0, r3
 8011974:	f7fe fd10 	bl	8010398 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8011978:	68bb      	ldr	r3, [r7, #8]
 801197a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801197c:	2b00      	cmp	r3, #0
 801197e:	d004      	beq.n	801198a <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011980:	68bb      	ldr	r3, [r7, #8]
 8011982:	3318      	adds	r3, #24
 8011984:	4618      	mov	r0, r3
 8011986:	f7fe fd07 	bl	8010398 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801198a:	68bb      	ldr	r3, [r7, #8]
 801198c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801198e:	2201      	movs	r2, #1
 8011990:	409a      	lsls	r2, r3
 8011992:	4b24      	ldr	r3, [pc, #144]	; (8011a24 <xTaskIncrementTick+0x15c>)
 8011994:	681b      	ldr	r3, [r3, #0]
 8011996:	4313      	orrs	r3, r2
 8011998:	4a22      	ldr	r2, [pc, #136]	; (8011a24 <xTaskIncrementTick+0x15c>)
 801199a:	6013      	str	r3, [r2, #0]
 801199c:	68bb      	ldr	r3, [r7, #8]
 801199e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80119a0:	4613      	mov	r3, r2
 80119a2:	009b      	lsls	r3, r3, #2
 80119a4:	4413      	add	r3, r2
 80119a6:	009b      	lsls	r3, r3, #2
 80119a8:	4a1f      	ldr	r2, [pc, #124]	; (8011a28 <xTaskIncrementTick+0x160>)
 80119aa:	441a      	add	r2, r3
 80119ac:	68bb      	ldr	r3, [r7, #8]
 80119ae:	3304      	adds	r3, #4
 80119b0:	4619      	mov	r1, r3
 80119b2:	4610      	mov	r0, r2
 80119b4:	f7fe fc93 	bl	80102de <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80119b8:	68bb      	ldr	r3, [r7, #8]
 80119ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80119bc:	4b1b      	ldr	r3, [pc, #108]	; (8011a2c <xTaskIncrementTick+0x164>)
 80119be:	681b      	ldr	r3, [r3, #0]
 80119c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80119c2:	429a      	cmp	r2, r3
 80119c4:	d3b9      	bcc.n	801193a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80119c6:	2301      	movs	r3, #1
 80119c8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80119ca:	e7b6      	b.n	801193a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80119cc:	4b17      	ldr	r3, [pc, #92]	; (8011a2c <xTaskIncrementTick+0x164>)
 80119ce:	681b      	ldr	r3, [r3, #0]
 80119d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80119d2:	4915      	ldr	r1, [pc, #84]	; (8011a28 <xTaskIncrementTick+0x160>)
 80119d4:	4613      	mov	r3, r2
 80119d6:	009b      	lsls	r3, r3, #2
 80119d8:	4413      	add	r3, r2
 80119da:	009b      	lsls	r3, r3, #2
 80119dc:	440b      	add	r3, r1
 80119de:	681b      	ldr	r3, [r3, #0]
 80119e0:	2b01      	cmp	r3, #1
 80119e2:	d907      	bls.n	80119f4 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 80119e4:	2301      	movs	r3, #1
 80119e6:	617b      	str	r3, [r7, #20]
 80119e8:	e004      	b.n	80119f4 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80119ea:	4b11      	ldr	r3, [pc, #68]	; (8011a30 <xTaskIncrementTick+0x168>)
 80119ec:	681b      	ldr	r3, [r3, #0]
 80119ee:	3301      	adds	r3, #1
 80119f0:	4a0f      	ldr	r2, [pc, #60]	; (8011a30 <xTaskIncrementTick+0x168>)
 80119f2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80119f4:	4b0f      	ldr	r3, [pc, #60]	; (8011a34 <xTaskIncrementTick+0x16c>)
 80119f6:	681b      	ldr	r3, [r3, #0]
 80119f8:	2b00      	cmp	r3, #0
 80119fa:	d001      	beq.n	8011a00 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 80119fc:	2301      	movs	r3, #1
 80119fe:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8011a00:	697b      	ldr	r3, [r7, #20]
}
 8011a02:	4618      	mov	r0, r3
 8011a04:	3718      	adds	r7, #24
 8011a06:	46bd      	mov	sp, r7
 8011a08:	bd80      	pop	{r7, pc}
 8011a0a:	bf00      	nop
 8011a0c:	2000d194 	.word	0x2000d194
 8011a10:	2000d170 	.word	0x2000d170
 8011a14:	2000d124 	.word	0x2000d124
 8011a18:	2000d128 	.word	0x2000d128
 8011a1c:	2000d184 	.word	0x2000d184
 8011a20:	2000d18c 	.word	0x2000d18c
 8011a24:	2000d174 	.word	0x2000d174
 8011a28:	2000d070 	.word	0x2000d070
 8011a2c:	2000d06c 	.word	0x2000d06c
 8011a30:	2000d17c 	.word	0x2000d17c
 8011a34:	2000d180 	.word	0x2000d180

08011a38 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8011a38:	b580      	push	{r7, lr}
 8011a3a:	b088      	sub	sp, #32
 8011a3c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8011a3e:	4b39      	ldr	r3, [pc, #228]	; (8011b24 <vTaskSwitchContext+0xec>)
 8011a40:	681b      	ldr	r3, [r3, #0]
 8011a42:	2b00      	cmp	r3, #0
 8011a44:	d003      	beq.n	8011a4e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8011a46:	4b38      	ldr	r3, [pc, #224]	; (8011b28 <vTaskSwitchContext+0xf0>)
 8011a48:	2201      	movs	r2, #1
 8011a4a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8011a4c:	e065      	b.n	8011b1a <vTaskSwitchContext+0xe2>
		xYieldPending = pdFALSE;
 8011a4e:	4b36      	ldr	r3, [pc, #216]	; (8011b28 <vTaskSwitchContext+0xf0>)
 8011a50:	2200      	movs	r2, #0
 8011a52:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8011a54:	4b35      	ldr	r3, [pc, #212]	; (8011b2c <vTaskSwitchContext+0xf4>)
 8011a56:	681b      	ldr	r3, [r3, #0]
 8011a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011a5a:	61fb      	str	r3, [r7, #28]
 8011a5c:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8011a60:	61bb      	str	r3, [r7, #24]
 8011a62:	69fb      	ldr	r3, [r7, #28]
 8011a64:	681b      	ldr	r3, [r3, #0]
 8011a66:	69ba      	ldr	r2, [r7, #24]
 8011a68:	429a      	cmp	r2, r3
 8011a6a:	d111      	bne.n	8011a90 <vTaskSwitchContext+0x58>
 8011a6c:	69fb      	ldr	r3, [r7, #28]
 8011a6e:	3304      	adds	r3, #4
 8011a70:	681b      	ldr	r3, [r3, #0]
 8011a72:	69ba      	ldr	r2, [r7, #24]
 8011a74:	429a      	cmp	r2, r3
 8011a76:	d10b      	bne.n	8011a90 <vTaskSwitchContext+0x58>
 8011a78:	69fb      	ldr	r3, [r7, #28]
 8011a7a:	3308      	adds	r3, #8
 8011a7c:	681b      	ldr	r3, [r3, #0]
 8011a7e:	69ba      	ldr	r2, [r7, #24]
 8011a80:	429a      	cmp	r2, r3
 8011a82:	d105      	bne.n	8011a90 <vTaskSwitchContext+0x58>
 8011a84:	69fb      	ldr	r3, [r7, #28]
 8011a86:	330c      	adds	r3, #12
 8011a88:	681b      	ldr	r3, [r3, #0]
 8011a8a:	69ba      	ldr	r2, [r7, #24]
 8011a8c:	429a      	cmp	r2, r3
 8011a8e:	d008      	beq.n	8011aa2 <vTaskSwitchContext+0x6a>
 8011a90:	4b26      	ldr	r3, [pc, #152]	; (8011b2c <vTaskSwitchContext+0xf4>)
 8011a92:	681a      	ldr	r2, [r3, #0]
 8011a94:	4b25      	ldr	r3, [pc, #148]	; (8011b2c <vTaskSwitchContext+0xf4>)
 8011a96:	681b      	ldr	r3, [r3, #0]
 8011a98:	3334      	adds	r3, #52	; 0x34
 8011a9a:	4619      	mov	r1, r3
 8011a9c:	4610      	mov	r0, r2
 8011a9e:	f7ee fd86 	bl	80005ae <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011aa2:	4b23      	ldr	r3, [pc, #140]	; (8011b30 <vTaskSwitchContext+0xf8>)
 8011aa4:	681b      	ldr	r3, [r3, #0]
 8011aa6:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8011aa8:	68fb      	ldr	r3, [r7, #12]
 8011aaa:	fab3 f383 	clz	r3, r3
 8011aae:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8011ab0:	7afb      	ldrb	r3, [r7, #11]
 8011ab2:	f1c3 031f 	rsb	r3, r3, #31
 8011ab6:	617b      	str	r3, [r7, #20]
 8011ab8:	491e      	ldr	r1, [pc, #120]	; (8011b34 <vTaskSwitchContext+0xfc>)
 8011aba:	697a      	ldr	r2, [r7, #20]
 8011abc:	4613      	mov	r3, r2
 8011abe:	009b      	lsls	r3, r3, #2
 8011ac0:	4413      	add	r3, r2
 8011ac2:	009b      	lsls	r3, r3, #2
 8011ac4:	440b      	add	r3, r1
 8011ac6:	681b      	ldr	r3, [r3, #0]
 8011ac8:	2b00      	cmp	r3, #0
 8011aca:	d109      	bne.n	8011ae0 <vTaskSwitchContext+0xa8>
	__asm volatile
 8011acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ad0:	f383 8811 	msr	BASEPRI, r3
 8011ad4:	f3bf 8f6f 	isb	sy
 8011ad8:	f3bf 8f4f 	dsb	sy
 8011adc:	607b      	str	r3, [r7, #4]
 8011ade:	e7fe      	b.n	8011ade <vTaskSwitchContext+0xa6>
 8011ae0:	697a      	ldr	r2, [r7, #20]
 8011ae2:	4613      	mov	r3, r2
 8011ae4:	009b      	lsls	r3, r3, #2
 8011ae6:	4413      	add	r3, r2
 8011ae8:	009b      	lsls	r3, r3, #2
 8011aea:	4a12      	ldr	r2, [pc, #72]	; (8011b34 <vTaskSwitchContext+0xfc>)
 8011aec:	4413      	add	r3, r2
 8011aee:	613b      	str	r3, [r7, #16]
 8011af0:	693b      	ldr	r3, [r7, #16]
 8011af2:	685b      	ldr	r3, [r3, #4]
 8011af4:	685a      	ldr	r2, [r3, #4]
 8011af6:	693b      	ldr	r3, [r7, #16]
 8011af8:	605a      	str	r2, [r3, #4]
 8011afa:	693b      	ldr	r3, [r7, #16]
 8011afc:	685a      	ldr	r2, [r3, #4]
 8011afe:	693b      	ldr	r3, [r7, #16]
 8011b00:	3308      	adds	r3, #8
 8011b02:	429a      	cmp	r2, r3
 8011b04:	d104      	bne.n	8011b10 <vTaskSwitchContext+0xd8>
 8011b06:	693b      	ldr	r3, [r7, #16]
 8011b08:	685b      	ldr	r3, [r3, #4]
 8011b0a:	685a      	ldr	r2, [r3, #4]
 8011b0c:	693b      	ldr	r3, [r7, #16]
 8011b0e:	605a      	str	r2, [r3, #4]
 8011b10:	693b      	ldr	r3, [r7, #16]
 8011b12:	685b      	ldr	r3, [r3, #4]
 8011b14:	68db      	ldr	r3, [r3, #12]
 8011b16:	4a05      	ldr	r2, [pc, #20]	; (8011b2c <vTaskSwitchContext+0xf4>)
 8011b18:	6013      	str	r3, [r2, #0]
}
 8011b1a:	bf00      	nop
 8011b1c:	3720      	adds	r7, #32
 8011b1e:	46bd      	mov	sp, r7
 8011b20:	bd80      	pop	{r7, pc}
 8011b22:	bf00      	nop
 8011b24:	2000d194 	.word	0x2000d194
 8011b28:	2000d180 	.word	0x2000d180
 8011b2c:	2000d06c 	.word	0x2000d06c
 8011b30:	2000d174 	.word	0x2000d174
 8011b34:	2000d070 	.word	0x2000d070

08011b38 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8011b38:	b580      	push	{r7, lr}
 8011b3a:	b084      	sub	sp, #16
 8011b3c:	af00      	add	r7, sp, #0
 8011b3e:	6078      	str	r0, [r7, #4]
 8011b40:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	2b00      	cmp	r3, #0
 8011b46:	d109      	bne.n	8011b5c <vTaskPlaceOnEventList+0x24>
 8011b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b4c:	f383 8811 	msr	BASEPRI, r3
 8011b50:	f3bf 8f6f 	isb	sy
 8011b54:	f3bf 8f4f 	dsb	sy
 8011b58:	60fb      	str	r3, [r7, #12]
 8011b5a:	e7fe      	b.n	8011b5a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011b5c:	4b07      	ldr	r3, [pc, #28]	; (8011b7c <vTaskPlaceOnEventList+0x44>)
 8011b5e:	681b      	ldr	r3, [r3, #0]
 8011b60:	3318      	adds	r3, #24
 8011b62:	4619      	mov	r1, r3
 8011b64:	6878      	ldr	r0, [r7, #4]
 8011b66:	f7fe fbde 	bl	8010326 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8011b6a:	2101      	movs	r1, #1
 8011b6c:	6838      	ldr	r0, [r7, #0]
 8011b6e:	f000 fb8d 	bl	801228c <prvAddCurrentTaskToDelayedList>
}
 8011b72:	bf00      	nop
 8011b74:	3710      	adds	r7, #16
 8011b76:	46bd      	mov	sp, r7
 8011b78:	bd80      	pop	{r7, pc}
 8011b7a:	bf00      	nop
 8011b7c:	2000d06c 	.word	0x2000d06c

08011b80 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8011b80:	b580      	push	{r7, lr}
 8011b82:	b086      	sub	sp, #24
 8011b84:	af00      	add	r7, sp, #0
 8011b86:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	68db      	ldr	r3, [r3, #12]
 8011b8c:	68db      	ldr	r3, [r3, #12]
 8011b8e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8011b90:	693b      	ldr	r3, [r7, #16]
 8011b92:	2b00      	cmp	r3, #0
 8011b94:	d109      	bne.n	8011baa <xTaskRemoveFromEventList+0x2a>
 8011b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b9a:	f383 8811 	msr	BASEPRI, r3
 8011b9e:	f3bf 8f6f 	isb	sy
 8011ba2:	f3bf 8f4f 	dsb	sy
 8011ba6:	60fb      	str	r3, [r7, #12]
 8011ba8:	e7fe      	b.n	8011ba8 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8011baa:	693b      	ldr	r3, [r7, #16]
 8011bac:	3318      	adds	r3, #24
 8011bae:	4618      	mov	r0, r3
 8011bb0:	f7fe fbf2 	bl	8010398 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011bb4:	4b1d      	ldr	r3, [pc, #116]	; (8011c2c <xTaskRemoveFromEventList+0xac>)
 8011bb6:	681b      	ldr	r3, [r3, #0]
 8011bb8:	2b00      	cmp	r3, #0
 8011bba:	d11c      	bne.n	8011bf6 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8011bbc:	693b      	ldr	r3, [r7, #16]
 8011bbe:	3304      	adds	r3, #4
 8011bc0:	4618      	mov	r0, r3
 8011bc2:	f7fe fbe9 	bl	8010398 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8011bc6:	693b      	ldr	r3, [r7, #16]
 8011bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011bca:	2201      	movs	r2, #1
 8011bcc:	409a      	lsls	r2, r3
 8011bce:	4b18      	ldr	r3, [pc, #96]	; (8011c30 <xTaskRemoveFromEventList+0xb0>)
 8011bd0:	681b      	ldr	r3, [r3, #0]
 8011bd2:	4313      	orrs	r3, r2
 8011bd4:	4a16      	ldr	r2, [pc, #88]	; (8011c30 <xTaskRemoveFromEventList+0xb0>)
 8011bd6:	6013      	str	r3, [r2, #0]
 8011bd8:	693b      	ldr	r3, [r7, #16]
 8011bda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011bdc:	4613      	mov	r3, r2
 8011bde:	009b      	lsls	r3, r3, #2
 8011be0:	4413      	add	r3, r2
 8011be2:	009b      	lsls	r3, r3, #2
 8011be4:	4a13      	ldr	r2, [pc, #76]	; (8011c34 <xTaskRemoveFromEventList+0xb4>)
 8011be6:	441a      	add	r2, r3
 8011be8:	693b      	ldr	r3, [r7, #16]
 8011bea:	3304      	adds	r3, #4
 8011bec:	4619      	mov	r1, r3
 8011bee:	4610      	mov	r0, r2
 8011bf0:	f7fe fb75 	bl	80102de <vListInsertEnd>
 8011bf4:	e005      	b.n	8011c02 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8011bf6:	693b      	ldr	r3, [r7, #16]
 8011bf8:	3318      	adds	r3, #24
 8011bfa:	4619      	mov	r1, r3
 8011bfc:	480e      	ldr	r0, [pc, #56]	; (8011c38 <xTaskRemoveFromEventList+0xb8>)
 8011bfe:	f7fe fb6e 	bl	80102de <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011c02:	693b      	ldr	r3, [r7, #16]
 8011c04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011c06:	4b0d      	ldr	r3, [pc, #52]	; (8011c3c <xTaskRemoveFromEventList+0xbc>)
 8011c08:	681b      	ldr	r3, [r3, #0]
 8011c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c0c:	429a      	cmp	r2, r3
 8011c0e:	d905      	bls.n	8011c1c <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8011c10:	2301      	movs	r3, #1
 8011c12:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8011c14:	4b0a      	ldr	r3, [pc, #40]	; (8011c40 <xTaskRemoveFromEventList+0xc0>)
 8011c16:	2201      	movs	r2, #1
 8011c18:	601a      	str	r2, [r3, #0]
 8011c1a:	e001      	b.n	8011c20 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8011c1c:	2300      	movs	r3, #0
 8011c1e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8011c20:	697b      	ldr	r3, [r7, #20]
}
 8011c22:	4618      	mov	r0, r3
 8011c24:	3718      	adds	r7, #24
 8011c26:	46bd      	mov	sp, r7
 8011c28:	bd80      	pop	{r7, pc}
 8011c2a:	bf00      	nop
 8011c2c:	2000d194 	.word	0x2000d194
 8011c30:	2000d174 	.word	0x2000d174
 8011c34:	2000d070 	.word	0x2000d070
 8011c38:	2000d12c 	.word	0x2000d12c
 8011c3c:	2000d06c 	.word	0x2000d06c
 8011c40:	2000d180 	.word	0x2000d180

08011c44 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8011c44:	b480      	push	{r7}
 8011c46:	b083      	sub	sp, #12
 8011c48:	af00      	add	r7, sp, #0
 8011c4a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8011c4c:	4b06      	ldr	r3, [pc, #24]	; (8011c68 <vTaskInternalSetTimeOutState+0x24>)
 8011c4e:	681a      	ldr	r2, [r3, #0]
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8011c54:	4b05      	ldr	r3, [pc, #20]	; (8011c6c <vTaskInternalSetTimeOutState+0x28>)
 8011c56:	681a      	ldr	r2, [r3, #0]
 8011c58:	687b      	ldr	r3, [r7, #4]
 8011c5a:	605a      	str	r2, [r3, #4]
}
 8011c5c:	bf00      	nop
 8011c5e:	370c      	adds	r7, #12
 8011c60:	46bd      	mov	sp, r7
 8011c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c66:	4770      	bx	lr
 8011c68:	2000d184 	.word	0x2000d184
 8011c6c:	2000d170 	.word	0x2000d170

08011c70 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8011c70:	b580      	push	{r7, lr}
 8011c72:	b088      	sub	sp, #32
 8011c74:	af00      	add	r7, sp, #0
 8011c76:	6078      	str	r0, [r7, #4]
 8011c78:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	2b00      	cmp	r3, #0
 8011c7e:	d109      	bne.n	8011c94 <xTaskCheckForTimeOut+0x24>
 8011c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c84:	f383 8811 	msr	BASEPRI, r3
 8011c88:	f3bf 8f6f 	isb	sy
 8011c8c:	f3bf 8f4f 	dsb	sy
 8011c90:	613b      	str	r3, [r7, #16]
 8011c92:	e7fe      	b.n	8011c92 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8011c94:	683b      	ldr	r3, [r7, #0]
 8011c96:	2b00      	cmp	r3, #0
 8011c98:	d109      	bne.n	8011cae <xTaskCheckForTimeOut+0x3e>
 8011c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c9e:	f383 8811 	msr	BASEPRI, r3
 8011ca2:	f3bf 8f6f 	isb	sy
 8011ca6:	f3bf 8f4f 	dsb	sy
 8011caa:	60fb      	str	r3, [r7, #12]
 8011cac:	e7fe      	b.n	8011cac <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8011cae:	f7fe fcc5 	bl	801063c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8011cb2:	4b1d      	ldr	r3, [pc, #116]	; (8011d28 <xTaskCheckForTimeOut+0xb8>)
 8011cb4:	681b      	ldr	r3, [r3, #0]
 8011cb6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	685b      	ldr	r3, [r3, #4]
 8011cbc:	69ba      	ldr	r2, [r7, #24]
 8011cbe:	1ad3      	subs	r3, r2, r3
 8011cc0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8011cc2:	683b      	ldr	r3, [r7, #0]
 8011cc4:	681b      	ldr	r3, [r3, #0]
 8011cc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011cca:	d102      	bne.n	8011cd2 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8011ccc:	2300      	movs	r3, #0
 8011cce:	61fb      	str	r3, [r7, #28]
 8011cd0:	e023      	b.n	8011d1a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8011cd2:	687b      	ldr	r3, [r7, #4]
 8011cd4:	681a      	ldr	r2, [r3, #0]
 8011cd6:	4b15      	ldr	r3, [pc, #84]	; (8011d2c <xTaskCheckForTimeOut+0xbc>)
 8011cd8:	681b      	ldr	r3, [r3, #0]
 8011cda:	429a      	cmp	r2, r3
 8011cdc:	d007      	beq.n	8011cee <xTaskCheckForTimeOut+0x7e>
 8011cde:	687b      	ldr	r3, [r7, #4]
 8011ce0:	685b      	ldr	r3, [r3, #4]
 8011ce2:	69ba      	ldr	r2, [r7, #24]
 8011ce4:	429a      	cmp	r2, r3
 8011ce6:	d302      	bcc.n	8011cee <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8011ce8:	2301      	movs	r3, #1
 8011cea:	61fb      	str	r3, [r7, #28]
 8011cec:	e015      	b.n	8011d1a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8011cee:	683b      	ldr	r3, [r7, #0]
 8011cf0:	681b      	ldr	r3, [r3, #0]
 8011cf2:	697a      	ldr	r2, [r7, #20]
 8011cf4:	429a      	cmp	r2, r3
 8011cf6:	d20b      	bcs.n	8011d10 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8011cf8:	683b      	ldr	r3, [r7, #0]
 8011cfa:	681a      	ldr	r2, [r3, #0]
 8011cfc:	697b      	ldr	r3, [r7, #20]
 8011cfe:	1ad2      	subs	r2, r2, r3
 8011d00:	683b      	ldr	r3, [r7, #0]
 8011d02:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8011d04:	6878      	ldr	r0, [r7, #4]
 8011d06:	f7ff ff9d 	bl	8011c44 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8011d0a:	2300      	movs	r3, #0
 8011d0c:	61fb      	str	r3, [r7, #28]
 8011d0e:	e004      	b.n	8011d1a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8011d10:	683b      	ldr	r3, [r7, #0]
 8011d12:	2200      	movs	r2, #0
 8011d14:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8011d16:	2301      	movs	r3, #1
 8011d18:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8011d1a:	f7fe fcbd 	bl	8010698 <vPortExitCritical>

	return xReturn;
 8011d1e:	69fb      	ldr	r3, [r7, #28]
}
 8011d20:	4618      	mov	r0, r3
 8011d22:	3720      	adds	r7, #32
 8011d24:	46bd      	mov	sp, r7
 8011d26:	bd80      	pop	{r7, pc}
 8011d28:	2000d170 	.word	0x2000d170
 8011d2c:	2000d184 	.word	0x2000d184

08011d30 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8011d30:	b480      	push	{r7}
 8011d32:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8011d34:	4b03      	ldr	r3, [pc, #12]	; (8011d44 <vTaskMissedYield+0x14>)
 8011d36:	2201      	movs	r2, #1
 8011d38:	601a      	str	r2, [r3, #0]
}
 8011d3a:	bf00      	nop
 8011d3c:	46bd      	mov	sp, r7
 8011d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d42:	4770      	bx	lr
 8011d44:	2000d180 	.word	0x2000d180

08011d48 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8011d48:	b580      	push	{r7, lr}
 8011d4a:	b082      	sub	sp, #8
 8011d4c:	af00      	add	r7, sp, #0
 8011d4e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8011d50:	f000 f854 	bl	8011dfc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8011d54:	4b07      	ldr	r3, [pc, #28]	; (8011d74 <prvIdleTask+0x2c>)
 8011d56:	681b      	ldr	r3, [r3, #0]
 8011d58:	2b01      	cmp	r3, #1
 8011d5a:	d907      	bls.n	8011d6c <prvIdleTask+0x24>
			{
				taskYIELD();
 8011d5c:	4b06      	ldr	r3, [pc, #24]	; (8011d78 <prvIdleTask+0x30>)
 8011d5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011d62:	601a      	str	r2, [r3, #0]
 8011d64:	f3bf 8f4f 	dsb	sy
 8011d68:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8011d6c:	f7ee fc18 	bl	80005a0 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8011d70:	e7ee      	b.n	8011d50 <prvIdleTask+0x8>
 8011d72:	bf00      	nop
 8011d74:	2000d070 	.word	0x2000d070
 8011d78:	e000ed04 	.word	0xe000ed04

08011d7c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8011d7c:	b580      	push	{r7, lr}
 8011d7e:	b082      	sub	sp, #8
 8011d80:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011d82:	2300      	movs	r3, #0
 8011d84:	607b      	str	r3, [r7, #4]
 8011d86:	e00c      	b.n	8011da2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8011d88:	687a      	ldr	r2, [r7, #4]
 8011d8a:	4613      	mov	r3, r2
 8011d8c:	009b      	lsls	r3, r3, #2
 8011d8e:	4413      	add	r3, r2
 8011d90:	009b      	lsls	r3, r3, #2
 8011d92:	4a12      	ldr	r2, [pc, #72]	; (8011ddc <prvInitialiseTaskLists+0x60>)
 8011d94:	4413      	add	r3, r2
 8011d96:	4618      	mov	r0, r3
 8011d98:	f7fe fa74 	bl	8010284 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011d9c:	687b      	ldr	r3, [r7, #4]
 8011d9e:	3301      	adds	r3, #1
 8011da0:	607b      	str	r3, [r7, #4]
 8011da2:	687b      	ldr	r3, [r7, #4]
 8011da4:	2b06      	cmp	r3, #6
 8011da6:	d9ef      	bls.n	8011d88 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8011da8:	480d      	ldr	r0, [pc, #52]	; (8011de0 <prvInitialiseTaskLists+0x64>)
 8011daa:	f7fe fa6b 	bl	8010284 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8011dae:	480d      	ldr	r0, [pc, #52]	; (8011de4 <prvInitialiseTaskLists+0x68>)
 8011db0:	f7fe fa68 	bl	8010284 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8011db4:	480c      	ldr	r0, [pc, #48]	; (8011de8 <prvInitialiseTaskLists+0x6c>)
 8011db6:	f7fe fa65 	bl	8010284 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8011dba:	480c      	ldr	r0, [pc, #48]	; (8011dec <prvInitialiseTaskLists+0x70>)
 8011dbc:	f7fe fa62 	bl	8010284 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8011dc0:	480b      	ldr	r0, [pc, #44]	; (8011df0 <prvInitialiseTaskLists+0x74>)
 8011dc2:	f7fe fa5f 	bl	8010284 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8011dc6:	4b0b      	ldr	r3, [pc, #44]	; (8011df4 <prvInitialiseTaskLists+0x78>)
 8011dc8:	4a05      	ldr	r2, [pc, #20]	; (8011de0 <prvInitialiseTaskLists+0x64>)
 8011dca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8011dcc:	4b0a      	ldr	r3, [pc, #40]	; (8011df8 <prvInitialiseTaskLists+0x7c>)
 8011dce:	4a05      	ldr	r2, [pc, #20]	; (8011de4 <prvInitialiseTaskLists+0x68>)
 8011dd0:	601a      	str	r2, [r3, #0]
}
 8011dd2:	bf00      	nop
 8011dd4:	3708      	adds	r7, #8
 8011dd6:	46bd      	mov	sp, r7
 8011dd8:	bd80      	pop	{r7, pc}
 8011dda:	bf00      	nop
 8011ddc:	2000d070 	.word	0x2000d070
 8011de0:	2000d0fc 	.word	0x2000d0fc
 8011de4:	2000d110 	.word	0x2000d110
 8011de8:	2000d12c 	.word	0x2000d12c
 8011dec:	2000d140 	.word	0x2000d140
 8011df0:	2000d158 	.word	0x2000d158
 8011df4:	2000d124 	.word	0x2000d124
 8011df8:	2000d128 	.word	0x2000d128

08011dfc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8011dfc:	b580      	push	{r7, lr}
 8011dfe:	b082      	sub	sp, #8
 8011e00:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011e02:	e019      	b.n	8011e38 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8011e04:	f7fe fc1a 	bl	801063c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011e08:	4b0f      	ldr	r3, [pc, #60]	; (8011e48 <prvCheckTasksWaitingTermination+0x4c>)
 8011e0a:	68db      	ldr	r3, [r3, #12]
 8011e0c:	68db      	ldr	r3, [r3, #12]
 8011e0e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	3304      	adds	r3, #4
 8011e14:	4618      	mov	r0, r3
 8011e16:	f7fe fabf 	bl	8010398 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8011e1a:	4b0c      	ldr	r3, [pc, #48]	; (8011e4c <prvCheckTasksWaitingTermination+0x50>)
 8011e1c:	681b      	ldr	r3, [r3, #0]
 8011e1e:	3b01      	subs	r3, #1
 8011e20:	4a0a      	ldr	r2, [pc, #40]	; (8011e4c <prvCheckTasksWaitingTermination+0x50>)
 8011e22:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8011e24:	4b0a      	ldr	r3, [pc, #40]	; (8011e50 <prvCheckTasksWaitingTermination+0x54>)
 8011e26:	681b      	ldr	r3, [r3, #0]
 8011e28:	3b01      	subs	r3, #1
 8011e2a:	4a09      	ldr	r2, [pc, #36]	; (8011e50 <prvCheckTasksWaitingTermination+0x54>)
 8011e2c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8011e2e:	f7fe fc33 	bl	8010698 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8011e32:	6878      	ldr	r0, [r7, #4]
 8011e34:	f000 f80e 	bl	8011e54 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011e38:	4b05      	ldr	r3, [pc, #20]	; (8011e50 <prvCheckTasksWaitingTermination+0x54>)
 8011e3a:	681b      	ldr	r3, [r3, #0]
 8011e3c:	2b00      	cmp	r3, #0
 8011e3e:	d1e1      	bne.n	8011e04 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8011e40:	bf00      	nop
 8011e42:	3708      	adds	r7, #8
 8011e44:	46bd      	mov	sp, r7
 8011e46:	bd80      	pop	{r7, pc}
 8011e48:	2000d140 	.word	0x2000d140
 8011e4c:	2000d16c 	.word	0x2000d16c
 8011e50:	2000d154 	.word	0x2000d154

08011e54 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8011e54:	b580      	push	{r7, lr}
 8011e56:	b084      	sub	sp, #16
 8011e58:	af00      	add	r7, sp, #0
 8011e5a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8011e62:	2b00      	cmp	r3, #0
 8011e64:	d108      	bne.n	8011e78 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011e6a:	4618      	mov	r0, r3
 8011e6c:	f7fe f8f6 	bl	801005c <vPortFree>
				vPortFree( pxTCB );
 8011e70:	6878      	ldr	r0, [r7, #4]
 8011e72:	f7fe f8f3 	bl	801005c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8011e76:	e017      	b.n	8011ea8 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8011e7e:	2b01      	cmp	r3, #1
 8011e80:	d103      	bne.n	8011e8a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8011e82:	6878      	ldr	r0, [r7, #4]
 8011e84:	f7fe f8ea 	bl	801005c <vPortFree>
	}
 8011e88:	e00e      	b.n	8011ea8 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8011e90:	2b02      	cmp	r3, #2
 8011e92:	d009      	beq.n	8011ea8 <prvDeleteTCB+0x54>
 8011e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e98:	f383 8811 	msr	BASEPRI, r3
 8011e9c:	f3bf 8f6f 	isb	sy
 8011ea0:	f3bf 8f4f 	dsb	sy
 8011ea4:	60fb      	str	r3, [r7, #12]
 8011ea6:	e7fe      	b.n	8011ea6 <prvDeleteTCB+0x52>
	}
 8011ea8:	bf00      	nop
 8011eaa:	3710      	adds	r7, #16
 8011eac:	46bd      	mov	sp, r7
 8011eae:	bd80      	pop	{r7, pc}

08011eb0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8011eb0:	b480      	push	{r7}
 8011eb2:	b083      	sub	sp, #12
 8011eb4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011eb6:	4b0c      	ldr	r3, [pc, #48]	; (8011ee8 <prvResetNextTaskUnblockTime+0x38>)
 8011eb8:	681b      	ldr	r3, [r3, #0]
 8011eba:	681b      	ldr	r3, [r3, #0]
 8011ebc:	2b00      	cmp	r3, #0
 8011ebe:	d104      	bne.n	8011eca <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8011ec0:	4b0a      	ldr	r3, [pc, #40]	; (8011eec <prvResetNextTaskUnblockTime+0x3c>)
 8011ec2:	f04f 32ff 	mov.w	r2, #4294967295
 8011ec6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8011ec8:	e008      	b.n	8011edc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011eca:	4b07      	ldr	r3, [pc, #28]	; (8011ee8 <prvResetNextTaskUnblockTime+0x38>)
 8011ecc:	681b      	ldr	r3, [r3, #0]
 8011ece:	68db      	ldr	r3, [r3, #12]
 8011ed0:	68db      	ldr	r3, [r3, #12]
 8011ed2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	685b      	ldr	r3, [r3, #4]
 8011ed8:	4a04      	ldr	r2, [pc, #16]	; (8011eec <prvResetNextTaskUnblockTime+0x3c>)
 8011eda:	6013      	str	r3, [r2, #0]
}
 8011edc:	bf00      	nop
 8011ede:	370c      	adds	r7, #12
 8011ee0:	46bd      	mov	sp, r7
 8011ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ee6:	4770      	bx	lr
 8011ee8:	2000d124 	.word	0x2000d124
 8011eec:	2000d18c 	.word	0x2000d18c

08011ef0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8011ef0:	b480      	push	{r7}
 8011ef2:	b083      	sub	sp, #12
 8011ef4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8011ef6:	4b0b      	ldr	r3, [pc, #44]	; (8011f24 <xTaskGetSchedulerState+0x34>)
 8011ef8:	681b      	ldr	r3, [r3, #0]
 8011efa:	2b00      	cmp	r3, #0
 8011efc:	d102      	bne.n	8011f04 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8011efe:	2301      	movs	r3, #1
 8011f00:	607b      	str	r3, [r7, #4]
 8011f02:	e008      	b.n	8011f16 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011f04:	4b08      	ldr	r3, [pc, #32]	; (8011f28 <xTaskGetSchedulerState+0x38>)
 8011f06:	681b      	ldr	r3, [r3, #0]
 8011f08:	2b00      	cmp	r3, #0
 8011f0a:	d102      	bne.n	8011f12 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8011f0c:	2302      	movs	r3, #2
 8011f0e:	607b      	str	r3, [r7, #4]
 8011f10:	e001      	b.n	8011f16 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8011f12:	2300      	movs	r3, #0
 8011f14:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8011f16:	687b      	ldr	r3, [r7, #4]
	}
 8011f18:	4618      	mov	r0, r3
 8011f1a:	370c      	adds	r7, #12
 8011f1c:	46bd      	mov	sp, r7
 8011f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f22:	4770      	bx	lr
 8011f24:	2000d178 	.word	0x2000d178
 8011f28:	2000d194 	.word	0x2000d194

08011f2c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8011f2c:	b580      	push	{r7, lr}
 8011f2e:	b084      	sub	sp, #16
 8011f30:	af00      	add	r7, sp, #0
 8011f32:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8011f34:	687b      	ldr	r3, [r7, #4]
 8011f36:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8011f38:	2300      	movs	r3, #0
 8011f3a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8011f3c:	687b      	ldr	r3, [r7, #4]
 8011f3e:	2b00      	cmp	r3, #0
 8011f40:	d069      	beq.n	8012016 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8011f42:	68bb      	ldr	r3, [r7, #8]
 8011f44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011f46:	4b36      	ldr	r3, [pc, #216]	; (8012020 <xTaskPriorityInherit+0xf4>)
 8011f48:	681b      	ldr	r3, [r3, #0]
 8011f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f4c:	429a      	cmp	r2, r3
 8011f4e:	d259      	bcs.n	8012004 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011f50:	68bb      	ldr	r3, [r7, #8]
 8011f52:	699b      	ldr	r3, [r3, #24]
 8011f54:	2b00      	cmp	r3, #0
 8011f56:	db06      	blt.n	8011f66 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011f58:	4b31      	ldr	r3, [pc, #196]	; (8012020 <xTaskPriorityInherit+0xf4>)
 8011f5a:	681b      	ldr	r3, [r3, #0]
 8011f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f5e:	f1c3 0207 	rsb	r2, r3, #7
 8011f62:	68bb      	ldr	r3, [r7, #8]
 8011f64:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8011f66:	68bb      	ldr	r3, [r7, #8]
 8011f68:	6959      	ldr	r1, [r3, #20]
 8011f6a:	68bb      	ldr	r3, [r7, #8]
 8011f6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011f6e:	4613      	mov	r3, r2
 8011f70:	009b      	lsls	r3, r3, #2
 8011f72:	4413      	add	r3, r2
 8011f74:	009b      	lsls	r3, r3, #2
 8011f76:	4a2b      	ldr	r2, [pc, #172]	; (8012024 <xTaskPriorityInherit+0xf8>)
 8011f78:	4413      	add	r3, r2
 8011f7a:	4299      	cmp	r1, r3
 8011f7c:	d13a      	bne.n	8011ff4 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011f7e:	68bb      	ldr	r3, [r7, #8]
 8011f80:	3304      	adds	r3, #4
 8011f82:	4618      	mov	r0, r3
 8011f84:	f7fe fa08 	bl	8010398 <uxListRemove>
 8011f88:	4603      	mov	r3, r0
 8011f8a:	2b00      	cmp	r3, #0
 8011f8c:	d115      	bne.n	8011fba <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8011f8e:	68bb      	ldr	r3, [r7, #8]
 8011f90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011f92:	4924      	ldr	r1, [pc, #144]	; (8012024 <xTaskPriorityInherit+0xf8>)
 8011f94:	4613      	mov	r3, r2
 8011f96:	009b      	lsls	r3, r3, #2
 8011f98:	4413      	add	r3, r2
 8011f9a:	009b      	lsls	r3, r3, #2
 8011f9c:	440b      	add	r3, r1
 8011f9e:	681b      	ldr	r3, [r3, #0]
 8011fa0:	2b00      	cmp	r3, #0
 8011fa2:	d10a      	bne.n	8011fba <xTaskPriorityInherit+0x8e>
 8011fa4:	68bb      	ldr	r3, [r7, #8]
 8011fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011fa8:	2201      	movs	r2, #1
 8011faa:	fa02 f303 	lsl.w	r3, r2, r3
 8011fae:	43da      	mvns	r2, r3
 8011fb0:	4b1d      	ldr	r3, [pc, #116]	; (8012028 <xTaskPriorityInherit+0xfc>)
 8011fb2:	681b      	ldr	r3, [r3, #0]
 8011fb4:	4013      	ands	r3, r2
 8011fb6:	4a1c      	ldr	r2, [pc, #112]	; (8012028 <xTaskPriorityInherit+0xfc>)
 8011fb8:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011fba:	4b19      	ldr	r3, [pc, #100]	; (8012020 <xTaskPriorityInherit+0xf4>)
 8011fbc:	681b      	ldr	r3, [r3, #0]
 8011fbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011fc0:	68bb      	ldr	r3, [r7, #8]
 8011fc2:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8011fc4:	68bb      	ldr	r3, [r7, #8]
 8011fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011fc8:	2201      	movs	r2, #1
 8011fca:	409a      	lsls	r2, r3
 8011fcc:	4b16      	ldr	r3, [pc, #88]	; (8012028 <xTaskPriorityInherit+0xfc>)
 8011fce:	681b      	ldr	r3, [r3, #0]
 8011fd0:	4313      	orrs	r3, r2
 8011fd2:	4a15      	ldr	r2, [pc, #84]	; (8012028 <xTaskPriorityInherit+0xfc>)
 8011fd4:	6013      	str	r3, [r2, #0]
 8011fd6:	68bb      	ldr	r3, [r7, #8]
 8011fd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011fda:	4613      	mov	r3, r2
 8011fdc:	009b      	lsls	r3, r3, #2
 8011fde:	4413      	add	r3, r2
 8011fe0:	009b      	lsls	r3, r3, #2
 8011fe2:	4a10      	ldr	r2, [pc, #64]	; (8012024 <xTaskPriorityInherit+0xf8>)
 8011fe4:	441a      	add	r2, r3
 8011fe6:	68bb      	ldr	r3, [r7, #8]
 8011fe8:	3304      	adds	r3, #4
 8011fea:	4619      	mov	r1, r3
 8011fec:	4610      	mov	r0, r2
 8011fee:	f7fe f976 	bl	80102de <vListInsertEnd>
 8011ff2:	e004      	b.n	8011ffe <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011ff4:	4b0a      	ldr	r3, [pc, #40]	; (8012020 <xTaskPriorityInherit+0xf4>)
 8011ff6:	681b      	ldr	r3, [r3, #0]
 8011ff8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011ffa:	68bb      	ldr	r3, [r7, #8]
 8011ffc:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8011ffe:	2301      	movs	r3, #1
 8012000:	60fb      	str	r3, [r7, #12]
 8012002:	e008      	b.n	8012016 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8012004:	68bb      	ldr	r3, [r7, #8]
 8012006:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012008:	4b05      	ldr	r3, [pc, #20]	; (8012020 <xTaskPriorityInherit+0xf4>)
 801200a:	681b      	ldr	r3, [r3, #0]
 801200c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801200e:	429a      	cmp	r2, r3
 8012010:	d201      	bcs.n	8012016 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8012012:	2301      	movs	r3, #1
 8012014:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8012016:	68fb      	ldr	r3, [r7, #12]
	}
 8012018:	4618      	mov	r0, r3
 801201a:	3710      	adds	r7, #16
 801201c:	46bd      	mov	sp, r7
 801201e:	bd80      	pop	{r7, pc}
 8012020:	2000d06c 	.word	0x2000d06c
 8012024:	2000d070 	.word	0x2000d070
 8012028:	2000d174 	.word	0x2000d174

0801202c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801202c:	b580      	push	{r7, lr}
 801202e:	b086      	sub	sp, #24
 8012030:	af00      	add	r7, sp, #0
 8012032:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8012034:	687b      	ldr	r3, [r7, #4]
 8012036:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8012038:	2300      	movs	r3, #0
 801203a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801203c:	687b      	ldr	r3, [r7, #4]
 801203e:	2b00      	cmp	r3, #0
 8012040:	d06c      	beq.n	801211c <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8012042:	4b39      	ldr	r3, [pc, #228]	; (8012128 <xTaskPriorityDisinherit+0xfc>)
 8012044:	681b      	ldr	r3, [r3, #0]
 8012046:	693a      	ldr	r2, [r7, #16]
 8012048:	429a      	cmp	r2, r3
 801204a:	d009      	beq.n	8012060 <xTaskPriorityDisinherit+0x34>
 801204c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012050:	f383 8811 	msr	BASEPRI, r3
 8012054:	f3bf 8f6f 	isb	sy
 8012058:	f3bf 8f4f 	dsb	sy
 801205c:	60fb      	str	r3, [r7, #12]
 801205e:	e7fe      	b.n	801205e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8012060:	693b      	ldr	r3, [r7, #16]
 8012062:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012064:	2b00      	cmp	r3, #0
 8012066:	d109      	bne.n	801207c <xTaskPriorityDisinherit+0x50>
 8012068:	f04f 0350 	mov.w	r3, #80	; 0x50
 801206c:	f383 8811 	msr	BASEPRI, r3
 8012070:	f3bf 8f6f 	isb	sy
 8012074:	f3bf 8f4f 	dsb	sy
 8012078:	60bb      	str	r3, [r7, #8]
 801207a:	e7fe      	b.n	801207a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 801207c:	693b      	ldr	r3, [r7, #16]
 801207e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012080:	1e5a      	subs	r2, r3, #1
 8012082:	693b      	ldr	r3, [r7, #16]
 8012084:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8012086:	693b      	ldr	r3, [r7, #16]
 8012088:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801208a:	693b      	ldr	r3, [r7, #16]
 801208c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801208e:	429a      	cmp	r2, r3
 8012090:	d044      	beq.n	801211c <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8012092:	693b      	ldr	r3, [r7, #16]
 8012094:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012096:	2b00      	cmp	r3, #0
 8012098:	d140      	bne.n	801211c <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801209a:	693b      	ldr	r3, [r7, #16]
 801209c:	3304      	adds	r3, #4
 801209e:	4618      	mov	r0, r3
 80120a0:	f7fe f97a 	bl	8010398 <uxListRemove>
 80120a4:	4603      	mov	r3, r0
 80120a6:	2b00      	cmp	r3, #0
 80120a8:	d115      	bne.n	80120d6 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80120aa:	693b      	ldr	r3, [r7, #16]
 80120ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80120ae:	491f      	ldr	r1, [pc, #124]	; (801212c <xTaskPriorityDisinherit+0x100>)
 80120b0:	4613      	mov	r3, r2
 80120b2:	009b      	lsls	r3, r3, #2
 80120b4:	4413      	add	r3, r2
 80120b6:	009b      	lsls	r3, r3, #2
 80120b8:	440b      	add	r3, r1
 80120ba:	681b      	ldr	r3, [r3, #0]
 80120bc:	2b00      	cmp	r3, #0
 80120be:	d10a      	bne.n	80120d6 <xTaskPriorityDisinherit+0xaa>
 80120c0:	693b      	ldr	r3, [r7, #16]
 80120c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80120c4:	2201      	movs	r2, #1
 80120c6:	fa02 f303 	lsl.w	r3, r2, r3
 80120ca:	43da      	mvns	r2, r3
 80120cc:	4b18      	ldr	r3, [pc, #96]	; (8012130 <xTaskPriorityDisinherit+0x104>)
 80120ce:	681b      	ldr	r3, [r3, #0]
 80120d0:	4013      	ands	r3, r2
 80120d2:	4a17      	ldr	r2, [pc, #92]	; (8012130 <xTaskPriorityDisinherit+0x104>)
 80120d4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80120d6:	693b      	ldr	r3, [r7, #16]
 80120d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80120da:	693b      	ldr	r3, [r7, #16]
 80120dc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80120de:	693b      	ldr	r3, [r7, #16]
 80120e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80120e2:	f1c3 0207 	rsb	r2, r3, #7
 80120e6:	693b      	ldr	r3, [r7, #16]
 80120e8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80120ea:	693b      	ldr	r3, [r7, #16]
 80120ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80120ee:	2201      	movs	r2, #1
 80120f0:	409a      	lsls	r2, r3
 80120f2:	4b0f      	ldr	r3, [pc, #60]	; (8012130 <xTaskPriorityDisinherit+0x104>)
 80120f4:	681b      	ldr	r3, [r3, #0]
 80120f6:	4313      	orrs	r3, r2
 80120f8:	4a0d      	ldr	r2, [pc, #52]	; (8012130 <xTaskPriorityDisinherit+0x104>)
 80120fa:	6013      	str	r3, [r2, #0]
 80120fc:	693b      	ldr	r3, [r7, #16]
 80120fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012100:	4613      	mov	r3, r2
 8012102:	009b      	lsls	r3, r3, #2
 8012104:	4413      	add	r3, r2
 8012106:	009b      	lsls	r3, r3, #2
 8012108:	4a08      	ldr	r2, [pc, #32]	; (801212c <xTaskPriorityDisinherit+0x100>)
 801210a:	441a      	add	r2, r3
 801210c:	693b      	ldr	r3, [r7, #16]
 801210e:	3304      	adds	r3, #4
 8012110:	4619      	mov	r1, r3
 8012112:	4610      	mov	r0, r2
 8012114:	f7fe f8e3 	bl	80102de <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8012118:	2301      	movs	r3, #1
 801211a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801211c:	697b      	ldr	r3, [r7, #20]
	}
 801211e:	4618      	mov	r0, r3
 8012120:	3718      	adds	r7, #24
 8012122:	46bd      	mov	sp, r7
 8012124:	bd80      	pop	{r7, pc}
 8012126:	bf00      	nop
 8012128:	2000d06c 	.word	0x2000d06c
 801212c:	2000d070 	.word	0x2000d070
 8012130:	2000d174 	.word	0x2000d174

08012134 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8012134:	b580      	push	{r7, lr}
 8012136:	b088      	sub	sp, #32
 8012138:	af00      	add	r7, sp, #0
 801213a:	6078      	str	r0, [r7, #4]
 801213c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801213e:	687b      	ldr	r3, [r7, #4]
 8012140:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8012142:	2301      	movs	r3, #1
 8012144:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8012146:	687b      	ldr	r3, [r7, #4]
 8012148:	2b00      	cmp	r3, #0
 801214a:	f000 8081 	beq.w	8012250 <vTaskPriorityDisinheritAfterTimeout+0x11c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 801214e:	69bb      	ldr	r3, [r7, #24]
 8012150:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012152:	2b00      	cmp	r3, #0
 8012154:	d109      	bne.n	801216a <vTaskPriorityDisinheritAfterTimeout+0x36>
 8012156:	f04f 0350 	mov.w	r3, #80	; 0x50
 801215a:	f383 8811 	msr	BASEPRI, r3
 801215e:	f3bf 8f6f 	isb	sy
 8012162:	f3bf 8f4f 	dsb	sy
 8012166:	60fb      	str	r3, [r7, #12]
 8012168:	e7fe      	b.n	8012168 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801216a:	69bb      	ldr	r3, [r7, #24]
 801216c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801216e:	683a      	ldr	r2, [r7, #0]
 8012170:	429a      	cmp	r2, r3
 8012172:	d902      	bls.n	801217a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8012174:	683b      	ldr	r3, [r7, #0]
 8012176:	61fb      	str	r3, [r7, #28]
 8012178:	e002      	b.n	8012180 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 801217a:	69bb      	ldr	r3, [r7, #24]
 801217c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801217e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8012180:	69bb      	ldr	r3, [r7, #24]
 8012182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012184:	69fa      	ldr	r2, [r7, #28]
 8012186:	429a      	cmp	r2, r3
 8012188:	d062      	beq.n	8012250 <vTaskPriorityDisinheritAfterTimeout+0x11c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801218a:	69bb      	ldr	r3, [r7, #24]
 801218c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801218e:	697a      	ldr	r2, [r7, #20]
 8012190:	429a      	cmp	r2, r3
 8012192:	d15d      	bne.n	8012250 <vTaskPriorityDisinheritAfterTimeout+0x11c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8012194:	4b30      	ldr	r3, [pc, #192]	; (8012258 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 8012196:	681b      	ldr	r3, [r3, #0]
 8012198:	69ba      	ldr	r2, [r7, #24]
 801219a:	429a      	cmp	r2, r3
 801219c:	d109      	bne.n	80121b2 <vTaskPriorityDisinheritAfterTimeout+0x7e>
 801219e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121a2:	f383 8811 	msr	BASEPRI, r3
 80121a6:	f3bf 8f6f 	isb	sy
 80121aa:	f3bf 8f4f 	dsb	sy
 80121ae:	60bb      	str	r3, [r7, #8]
 80121b0:	e7fe      	b.n	80121b0 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80121b2:	69bb      	ldr	r3, [r7, #24]
 80121b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80121b6:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80121b8:	69bb      	ldr	r3, [r7, #24]
 80121ba:	69fa      	ldr	r2, [r7, #28]
 80121bc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80121be:	69bb      	ldr	r3, [r7, #24]
 80121c0:	699b      	ldr	r3, [r3, #24]
 80121c2:	2b00      	cmp	r3, #0
 80121c4:	db04      	blt.n	80121d0 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80121c6:	69fb      	ldr	r3, [r7, #28]
 80121c8:	f1c3 0207 	rsb	r2, r3, #7
 80121cc:	69bb      	ldr	r3, [r7, #24]
 80121ce:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80121d0:	69bb      	ldr	r3, [r7, #24]
 80121d2:	6959      	ldr	r1, [r3, #20]
 80121d4:	693a      	ldr	r2, [r7, #16]
 80121d6:	4613      	mov	r3, r2
 80121d8:	009b      	lsls	r3, r3, #2
 80121da:	4413      	add	r3, r2
 80121dc:	009b      	lsls	r3, r3, #2
 80121de:	4a1f      	ldr	r2, [pc, #124]	; (801225c <vTaskPriorityDisinheritAfterTimeout+0x128>)
 80121e0:	4413      	add	r3, r2
 80121e2:	4299      	cmp	r1, r3
 80121e4:	d134      	bne.n	8012250 <vTaskPriorityDisinheritAfterTimeout+0x11c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80121e6:	69bb      	ldr	r3, [r7, #24]
 80121e8:	3304      	adds	r3, #4
 80121ea:	4618      	mov	r0, r3
 80121ec:	f7fe f8d4 	bl	8010398 <uxListRemove>
 80121f0:	4603      	mov	r3, r0
 80121f2:	2b00      	cmp	r3, #0
 80121f4:	d115      	bne.n	8012222 <vTaskPriorityDisinheritAfterTimeout+0xee>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80121f6:	69bb      	ldr	r3, [r7, #24]
 80121f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80121fa:	4918      	ldr	r1, [pc, #96]	; (801225c <vTaskPriorityDisinheritAfterTimeout+0x128>)
 80121fc:	4613      	mov	r3, r2
 80121fe:	009b      	lsls	r3, r3, #2
 8012200:	4413      	add	r3, r2
 8012202:	009b      	lsls	r3, r3, #2
 8012204:	440b      	add	r3, r1
 8012206:	681b      	ldr	r3, [r3, #0]
 8012208:	2b00      	cmp	r3, #0
 801220a:	d10a      	bne.n	8012222 <vTaskPriorityDisinheritAfterTimeout+0xee>
 801220c:	69bb      	ldr	r3, [r7, #24]
 801220e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012210:	2201      	movs	r2, #1
 8012212:	fa02 f303 	lsl.w	r3, r2, r3
 8012216:	43da      	mvns	r2, r3
 8012218:	4b11      	ldr	r3, [pc, #68]	; (8012260 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 801221a:	681b      	ldr	r3, [r3, #0]
 801221c:	4013      	ands	r3, r2
 801221e:	4a10      	ldr	r2, [pc, #64]	; (8012260 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8012220:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8012222:	69bb      	ldr	r3, [r7, #24]
 8012224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012226:	2201      	movs	r2, #1
 8012228:	409a      	lsls	r2, r3
 801222a:	4b0d      	ldr	r3, [pc, #52]	; (8012260 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 801222c:	681b      	ldr	r3, [r3, #0]
 801222e:	4313      	orrs	r3, r2
 8012230:	4a0b      	ldr	r2, [pc, #44]	; (8012260 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8012232:	6013      	str	r3, [r2, #0]
 8012234:	69bb      	ldr	r3, [r7, #24]
 8012236:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012238:	4613      	mov	r3, r2
 801223a:	009b      	lsls	r3, r3, #2
 801223c:	4413      	add	r3, r2
 801223e:	009b      	lsls	r3, r3, #2
 8012240:	4a06      	ldr	r2, [pc, #24]	; (801225c <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8012242:	441a      	add	r2, r3
 8012244:	69bb      	ldr	r3, [r7, #24]
 8012246:	3304      	adds	r3, #4
 8012248:	4619      	mov	r1, r3
 801224a:	4610      	mov	r0, r2
 801224c:	f7fe f847 	bl	80102de <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012250:	bf00      	nop
 8012252:	3720      	adds	r7, #32
 8012254:	46bd      	mov	sp, r7
 8012256:	bd80      	pop	{r7, pc}
 8012258:	2000d06c 	.word	0x2000d06c
 801225c:	2000d070 	.word	0x2000d070
 8012260:	2000d174 	.word	0x2000d174

08012264 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8012264:	b480      	push	{r7}
 8012266:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8012268:	4b07      	ldr	r3, [pc, #28]	; (8012288 <pvTaskIncrementMutexHeldCount+0x24>)
 801226a:	681b      	ldr	r3, [r3, #0]
 801226c:	2b00      	cmp	r3, #0
 801226e:	d004      	beq.n	801227a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8012270:	4b05      	ldr	r3, [pc, #20]	; (8012288 <pvTaskIncrementMutexHeldCount+0x24>)
 8012272:	681b      	ldr	r3, [r3, #0]
 8012274:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8012276:	3201      	adds	r2, #1
 8012278:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 801227a:	4b03      	ldr	r3, [pc, #12]	; (8012288 <pvTaskIncrementMutexHeldCount+0x24>)
 801227c:	681b      	ldr	r3, [r3, #0]
	}
 801227e:	4618      	mov	r0, r3
 8012280:	46bd      	mov	sp, r7
 8012282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012286:	4770      	bx	lr
 8012288:	2000d06c 	.word	0x2000d06c

0801228c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801228c:	b580      	push	{r7, lr}
 801228e:	b084      	sub	sp, #16
 8012290:	af00      	add	r7, sp, #0
 8012292:	6078      	str	r0, [r7, #4]
 8012294:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8012296:	4b29      	ldr	r3, [pc, #164]	; (801233c <prvAddCurrentTaskToDelayedList+0xb0>)
 8012298:	681b      	ldr	r3, [r3, #0]
 801229a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801229c:	4b28      	ldr	r3, [pc, #160]	; (8012340 <prvAddCurrentTaskToDelayedList+0xb4>)
 801229e:	681b      	ldr	r3, [r3, #0]
 80122a0:	3304      	adds	r3, #4
 80122a2:	4618      	mov	r0, r3
 80122a4:	f7fe f878 	bl	8010398 <uxListRemove>
 80122a8:	4603      	mov	r3, r0
 80122aa:	2b00      	cmp	r3, #0
 80122ac:	d10b      	bne.n	80122c6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80122ae:	4b24      	ldr	r3, [pc, #144]	; (8012340 <prvAddCurrentTaskToDelayedList+0xb4>)
 80122b0:	681b      	ldr	r3, [r3, #0]
 80122b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80122b4:	2201      	movs	r2, #1
 80122b6:	fa02 f303 	lsl.w	r3, r2, r3
 80122ba:	43da      	mvns	r2, r3
 80122bc:	4b21      	ldr	r3, [pc, #132]	; (8012344 <prvAddCurrentTaskToDelayedList+0xb8>)
 80122be:	681b      	ldr	r3, [r3, #0]
 80122c0:	4013      	ands	r3, r2
 80122c2:	4a20      	ldr	r2, [pc, #128]	; (8012344 <prvAddCurrentTaskToDelayedList+0xb8>)
 80122c4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80122c6:	687b      	ldr	r3, [r7, #4]
 80122c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80122cc:	d10a      	bne.n	80122e4 <prvAddCurrentTaskToDelayedList+0x58>
 80122ce:	683b      	ldr	r3, [r7, #0]
 80122d0:	2b00      	cmp	r3, #0
 80122d2:	d007      	beq.n	80122e4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80122d4:	4b1a      	ldr	r3, [pc, #104]	; (8012340 <prvAddCurrentTaskToDelayedList+0xb4>)
 80122d6:	681b      	ldr	r3, [r3, #0]
 80122d8:	3304      	adds	r3, #4
 80122da:	4619      	mov	r1, r3
 80122dc:	481a      	ldr	r0, [pc, #104]	; (8012348 <prvAddCurrentTaskToDelayedList+0xbc>)
 80122de:	f7fd fffe 	bl	80102de <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80122e2:	e026      	b.n	8012332 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80122e4:	68fa      	ldr	r2, [r7, #12]
 80122e6:	687b      	ldr	r3, [r7, #4]
 80122e8:	4413      	add	r3, r2
 80122ea:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80122ec:	4b14      	ldr	r3, [pc, #80]	; (8012340 <prvAddCurrentTaskToDelayedList+0xb4>)
 80122ee:	681b      	ldr	r3, [r3, #0]
 80122f0:	68ba      	ldr	r2, [r7, #8]
 80122f2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80122f4:	68ba      	ldr	r2, [r7, #8]
 80122f6:	68fb      	ldr	r3, [r7, #12]
 80122f8:	429a      	cmp	r2, r3
 80122fa:	d209      	bcs.n	8012310 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80122fc:	4b13      	ldr	r3, [pc, #76]	; (801234c <prvAddCurrentTaskToDelayedList+0xc0>)
 80122fe:	681a      	ldr	r2, [r3, #0]
 8012300:	4b0f      	ldr	r3, [pc, #60]	; (8012340 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012302:	681b      	ldr	r3, [r3, #0]
 8012304:	3304      	adds	r3, #4
 8012306:	4619      	mov	r1, r3
 8012308:	4610      	mov	r0, r2
 801230a:	f7fe f80c 	bl	8010326 <vListInsert>
}
 801230e:	e010      	b.n	8012332 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012310:	4b0f      	ldr	r3, [pc, #60]	; (8012350 <prvAddCurrentTaskToDelayedList+0xc4>)
 8012312:	681a      	ldr	r2, [r3, #0]
 8012314:	4b0a      	ldr	r3, [pc, #40]	; (8012340 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012316:	681b      	ldr	r3, [r3, #0]
 8012318:	3304      	adds	r3, #4
 801231a:	4619      	mov	r1, r3
 801231c:	4610      	mov	r0, r2
 801231e:	f7fe f802 	bl	8010326 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8012322:	4b0c      	ldr	r3, [pc, #48]	; (8012354 <prvAddCurrentTaskToDelayedList+0xc8>)
 8012324:	681b      	ldr	r3, [r3, #0]
 8012326:	68ba      	ldr	r2, [r7, #8]
 8012328:	429a      	cmp	r2, r3
 801232a:	d202      	bcs.n	8012332 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 801232c:	4a09      	ldr	r2, [pc, #36]	; (8012354 <prvAddCurrentTaskToDelayedList+0xc8>)
 801232e:	68bb      	ldr	r3, [r7, #8]
 8012330:	6013      	str	r3, [r2, #0]
}
 8012332:	bf00      	nop
 8012334:	3710      	adds	r7, #16
 8012336:	46bd      	mov	sp, r7
 8012338:	bd80      	pop	{r7, pc}
 801233a:	bf00      	nop
 801233c:	2000d170 	.word	0x2000d170
 8012340:	2000d06c 	.word	0x2000d06c
 8012344:	2000d174 	.word	0x2000d174
 8012348:	2000d158 	.word	0x2000d158
 801234c:	2000d128 	.word	0x2000d128
 8012350:	2000d124 	.word	0x2000d124
 8012354:	2000d18c 	.word	0x2000d18c

08012358 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8012358:	8880      	ldrh	r0, [r0, #4]
 801235a:	4770      	bx	lr

0801235c <_ZN8touchgfx17AbstractPartition5clearEv>:
 801235c:	2300      	movs	r3, #0
 801235e:	8083      	strh	r3, [r0, #4]
 8012360:	4770      	bx	lr
	...

08012364 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8012364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012366:	6803      	ldr	r3, [r0, #0]
 8012368:	4605      	mov	r5, r0
 801236a:	460e      	mov	r6, r1
 801236c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801236e:	2100      	movs	r1, #0
 8012370:	4798      	blx	r3
 8012372:	682b      	ldr	r3, [r5, #0]
 8012374:	4604      	mov	r4, r0
 8012376:	6a1b      	ldr	r3, [r3, #32]
 8012378:	4628      	mov	r0, r5
 801237a:	4798      	blx	r3
 801237c:	88ab      	ldrh	r3, [r5, #4]
 801237e:	1b34      	subs	r4, r6, r4
 8012380:	b2a4      	uxth	r4, r4
 8012382:	fbb4 f4f0 	udiv	r4, r4, r0
 8012386:	42a3      	cmp	r3, r4
 8012388:	d805      	bhi.n	8012396 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x32>
 801238a:	4b0e      	ldr	r3, [pc, #56]	; (80123c4 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x60>)
 801238c:	4a0e      	ldr	r2, [pc, #56]	; (80123c8 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 801238e:	211e      	movs	r1, #30
 8012390:	480e      	ldr	r0, [pc, #56]	; (80123cc <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 8012392:	f010 fa2d 	bl	80227f0 <__assert_func>
 8012396:	682b      	ldr	r3, [r5, #0]
 8012398:	2100      	movs	r1, #0
 801239a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801239c:	4628      	mov	r0, r5
 801239e:	4798      	blx	r3
 80123a0:	682b      	ldr	r3, [r5, #0]
 80123a2:	4607      	mov	r7, r0
 80123a4:	6a1b      	ldr	r3, [r3, #32]
 80123a6:	4628      	mov	r0, r5
 80123a8:	4798      	blx	r3
 80123aa:	1bf3      	subs	r3, r6, r7
 80123ac:	b29b      	uxth	r3, r3
 80123ae:	fbb3 f2f0 	udiv	r2, r3, r0
 80123b2:	fb02 3010 	mls	r0, r2, r0, r3
 80123b6:	b118      	cbz	r0, 80123c0 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x5c>
 80123b8:	4b05      	ldr	r3, [pc, #20]	; (80123d0 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x6c>)
 80123ba:	4a03      	ldr	r2, [pc, #12]	; (80123c8 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 80123bc:	211f      	movs	r1, #31
 80123be:	e7e7      	b.n	8012390 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x2c>
 80123c0:	4620      	mov	r0, r4
 80123c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80123c4:	08024d20 	.word	0x08024d20
 80123c8:	08024e8e 	.word	0x08024e8e
 80123cc:	08024d35 	.word	0x08024d35
 80123d0:	08024d63 	.word	0x08024d63

080123d4 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 80123d4:	b538      	push	{r3, r4, r5, lr}
 80123d6:	6803      	ldr	r3, [r0, #0]
 80123d8:	6a1b      	ldr	r3, [r3, #32]
 80123da:	460d      	mov	r5, r1
 80123dc:	4604      	mov	r4, r0
 80123de:	4798      	blx	r3
 80123e0:	4285      	cmp	r5, r0
 80123e2:	d905      	bls.n	80123f0 <_ZN8touchgfx17AbstractPartition8allocateEt+0x1c>
 80123e4:	4b0c      	ldr	r3, [pc, #48]	; (8012418 <_ZN8touchgfx17AbstractPartition8allocateEt+0x44>)
 80123e6:	4a0d      	ldr	r2, [pc, #52]	; (801241c <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 80123e8:	212f      	movs	r1, #47	; 0x2f
 80123ea:	480d      	ldr	r0, [pc, #52]	; (8012420 <_ZN8touchgfx17AbstractPartition8allocateEt+0x4c>)
 80123ec:	f010 fa00 	bl	80227f0 <__assert_func>
 80123f0:	6823      	ldr	r3, [r4, #0]
 80123f2:	88a5      	ldrh	r5, [r4, #4]
 80123f4:	69db      	ldr	r3, [r3, #28]
 80123f6:	4620      	mov	r0, r4
 80123f8:	4798      	blx	r3
 80123fa:	4285      	cmp	r5, r0
 80123fc:	d303      	bcc.n	8012406 <_ZN8touchgfx17AbstractPartition8allocateEt+0x32>
 80123fe:	4b09      	ldr	r3, [pc, #36]	; (8012424 <_ZN8touchgfx17AbstractPartition8allocateEt+0x50>)
 8012400:	4a06      	ldr	r2, [pc, #24]	; (801241c <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 8012402:	2130      	movs	r1, #48	; 0x30
 8012404:	e7f1      	b.n	80123ea <_ZN8touchgfx17AbstractPartition8allocateEt+0x16>
 8012406:	6823      	ldr	r3, [r4, #0]
 8012408:	88a1      	ldrh	r1, [r4, #4]
 801240a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801240c:	4620      	mov	r0, r4
 801240e:	4798      	blx	r3
 8012410:	88a3      	ldrh	r3, [r4, #4]
 8012412:	3301      	adds	r3, #1
 8012414:	80a3      	strh	r3, [r4, #4]
 8012416:	bd38      	pop	{r3, r4, r5, pc}
 8012418:	08024ddd 	.word	0x08024ddd
 801241c:	08024ed1 	.word	0x08024ed1
 8012420:	08024d35 	.word	0x08024d35
 8012424:	08024df4 	.word	0x08024df4

08012428 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8012428:	b570      	push	{r4, r5, r6, lr}
 801242a:	6803      	ldr	r3, [r0, #0]
 801242c:	6a1b      	ldr	r3, [r3, #32]
 801242e:	4616      	mov	r6, r2
 8012430:	4604      	mov	r4, r0
 8012432:	460d      	mov	r5, r1
 8012434:	4798      	blx	r3
 8012436:	4286      	cmp	r6, r0
 8012438:	d905      	bls.n	8012446 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x1e>
 801243a:	4b06      	ldr	r3, [pc, #24]	; (8012454 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x2c>)
 801243c:	4a06      	ldr	r2, [pc, #24]	; (8012458 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x30>)
 801243e:	4807      	ldr	r0, [pc, #28]	; (801245c <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x34>)
 8012440:	2139      	movs	r1, #57	; 0x39
 8012442:	f010 f9d5 	bl	80227f0 <__assert_func>
 8012446:	6823      	ldr	r3, [r4, #0]
 8012448:	4629      	mov	r1, r5
 801244a:	4620      	mov	r0, r4
 801244c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801244e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012452:	4718      	bx	r3
 8012454:	08024ddd 	.word	0x08024ddd
 8012458:	08024e44 	.word	0x08024e44
 801245c:	08024d35 	.word	0x08024d35

08012460 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 8012460:	4770      	bx	lr
	...

08012464 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8012464:	4a02      	ldr	r2, [pc, #8]	; (8012470 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 8012466:	6002      	str	r2, [r0, #0]
 8012468:	2200      	movs	r2, #0
 801246a:	8082      	strh	r2, [r0, #4]
 801246c:	4770      	bx	lr
 801246e:	bf00      	nop
 8012470:	08024e18 	.word	0x08024e18

08012474 <_ZN8touchgfx11BoxProgress8setColorENS_9colortypeE>:
 8012474:	f8c0 10b8 	str.w	r1, [r0, #184]	; 0xb8
 8012478:	4770      	bx	lr

0801247a <_ZNK8touchgfx11BoxProgress8getColorEv>:
 801247a:	f8d0 00b8 	ldr.w	r0, [r0, #184]	; 0xb8
 801247e:	4770      	bx	lr

08012480 <_ZN8touchgfx11BoxProgress8setAlphaEh>:
 8012480:	f880 10b6 	strb.w	r1, [r0, #182]	; 0xb6
 8012484:	4770      	bx	lr

08012486 <_ZNK8touchgfx11BoxProgress8getAlphaEv>:
 8012486:	f890 00b6 	ldrb.w	r0, [r0, #182]	; 0xb6
 801248a:	4770      	bx	lr

0801248c <_ZN8touchgfx11BoxProgressD1Ev>:
 801248c:	b510      	push	{r4, lr}
 801248e:	4b03      	ldr	r3, [pc, #12]	; (801249c <_ZN8touchgfx11BoxProgressD1Ev+0x10>)
 8012490:	6003      	str	r3, [r0, #0]
 8012492:	4604      	mov	r4, r0
 8012494:	f000 f8b6 	bl	8012604 <_ZN8touchgfx25AbstractDirectionProgressD1Ev>
 8012498:	4620      	mov	r0, r4
 801249a:	bd10      	pop	{r4, pc}
 801249c:	08024f18 	.word	0x08024f18

080124a0 <_ZN8touchgfx11BoxProgressD0Ev>:
 80124a0:	b510      	push	{r4, lr}
 80124a2:	4604      	mov	r4, r0
 80124a4:	f7ff fff2 	bl	801248c <_ZN8touchgfx11BoxProgressD1Ev>
 80124a8:	4620      	mov	r0, r4
 80124aa:	21c0      	movs	r1, #192	; 0xc0
 80124ac:	f010 f975 	bl	802279a <_ZdlPvj>
 80124b0:	4620      	mov	r0, r4
 80124b2:	bd10      	pop	{r4, pc}

080124b4 <_ZN8touchgfx11BoxProgressC1Ev>:
 80124b4:	b510      	push	{r4, lr}
 80124b6:	4604      	mov	r4, r0
 80124b8:	f000 f8b8 	bl	801262c <_ZN8touchgfx25AbstractDirectionProgressC1Ev>
 80124bc:	2201      	movs	r2, #1
 80124be:	f884 20b5 	strb.w	r2, [r4, #181]	; 0xb5
 80124c2:	4b15      	ldr	r3, [pc, #84]	; (8012518 <_ZN8touchgfx11BoxProgressC1Ev+0x64>)
 80124c4:	4a15      	ldr	r2, [pc, #84]	; (801251c <_ZN8touchgfx11BoxProgressC1Ev+0x68>)
 80124c6:	6023      	str	r3, [r4, #0]
 80124c8:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 80124cc:	2300      	movs	r3, #0
 80124ce:	22ff      	movs	r2, #255	; 0xff
 80124d0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80124d4:	f8a4 3094 	strh.w	r3, [r4, #148]	; 0x94
 80124d8:	f8a4 3096 	strh.w	r3, [r4, #150]	; 0x96
 80124dc:	f8a4 3098 	strh.w	r3, [r4, #152]	; 0x98
 80124e0:	f8a4 309a 	strh.w	r3, [r4, #154]	; 0x9a
 80124e4:	f8a4 309c 	strh.w	r3, [r4, #156]	; 0x9c
 80124e8:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
 80124ec:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
 80124f0:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
 80124f4:	e9c4 3329 	strd	r3, r3, [r4, #164]	; 0xa4
 80124f8:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
 80124fc:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
 8012500:	f884 20b6 	strb.w	r2, [r4, #182]	; 0xb6
 8012504:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
 8012508:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
 801250c:	f104 0190 	add.w	r1, r4, #144	; 0x90
 8012510:	f001 f89e 	bl	8013650 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8012514:	4620      	mov	r0, r4
 8012516:	bd10      	pop	{r4, pc}
 8012518:	08024f18 	.word	0x08024f18
 801251c:	08026314 	.word	0x08026314

08012520 <_ZN8touchgfx11BoxProgress28setProgressIndicatorPositionEssss>:
 8012520:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8012524:	4617      	mov	r7, r2
 8012526:	f9bd 5020 	ldrsh.w	r5, [sp, #32]
 801252a:	9500      	str	r5, [sp, #0]
 801252c:	2200      	movs	r2, #0
 801252e:	4604      	mov	r4, r0
 8012530:	460e      	mov	r6, r1
 8012532:	3090      	adds	r0, #144	; 0x90
 8012534:	4611      	mov	r1, r2
 8012536:	4698      	mov	r8, r3
 8012538:	f7f1 ffd0 	bl	80044dc <_ZN8touchgfx8Drawable11setPositionEssss>
 801253c:	4643      	mov	r3, r8
 801253e:	463a      	mov	r2, r7
 8012540:	4631      	mov	r1, r6
 8012542:	4620      	mov	r0, r4
 8012544:	9508      	str	r5, [sp, #32]
 8012546:	b002      	add	sp, #8
 8012548:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801254c:	f000 b87d 	b.w	801264a <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>

08012550 <_ZN8touchgfx11BoxProgress8setValueEi>:
 8012550:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012552:	4604      	mov	r4, r0
 8012554:	f104 0590 	add.w	r5, r4, #144	; 0x90
 8012558:	f000 f8c0 	bl	80126dc <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>
 801255c:	4628      	mov	r0, r5
 801255e:	f004 fe7b 	bl	8017258 <_ZNK8touchgfx8Drawable10invalidateEv>
 8012562:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
 8012566:	2b03      	cmp	r3, #3
 8012568:	d814      	bhi.n	8012594 <_ZN8touchgfx11BoxProgress8setValueEi+0x44>
 801256a:	e8df f003 	tbb	[pc, r3]
 801256e:	0202      	.short	0x0202
 8012570:	1010      	.short	0x1010
 8012572:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 8012576:	4620      	mov	r0, r4
 8012578:	f000 f90a 	bl	8012790 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>
 801257c:	b200      	sxth	r0, r0
 801257e:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
 8012582:	2b03      	cmp	r3, #3
 8012584:	d81a      	bhi.n	80125bc <_ZN8touchgfx11BoxProgress8setValueEi+0x6c>
 8012586:	e8df f003 	tbb	[pc, r3]
 801258a:	0e07      	.short	0x0e07
 801258c:	231f      	.short	0x231f
 801258e:	f8b4 1062 	ldrh.w	r1, [r4, #98]	; 0x62
 8012592:	e7f0      	b.n	8012576 <_ZN8touchgfx11BoxProgress8setValueEi+0x26>
 8012594:	2000      	movs	r0, #0
 8012596:	e7f2      	b.n	801257e <_ZN8touchgfx11BoxProgress8setValueEi+0x2e>
 8012598:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 801259c:	9300      	str	r3, [sp, #0]
 801259e:	4603      	mov	r3, r0
 80125a0:	2200      	movs	r2, #0
 80125a2:	2100      	movs	r1, #0
 80125a4:	e007      	b.n	80125b6 <_ZN8touchgfx11BoxProgress8setValueEi+0x66>
 80125a6:	8921      	ldrh	r1, [r4, #8]
 80125a8:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 80125ac:	9300      	str	r3, [sp, #0]
 80125ae:	1a09      	subs	r1, r1, r0
 80125b0:	4603      	mov	r3, r0
 80125b2:	2200      	movs	r2, #0
 80125b4:	b209      	sxth	r1, r1
 80125b6:	4628      	mov	r0, r5
 80125b8:	f7f1 ff90 	bl	80044dc <_ZN8touchgfx8Drawable11setPositionEssss>
 80125bc:	4628      	mov	r0, r5
 80125be:	b003      	add	sp, #12
 80125c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80125c4:	f004 be48 	b.w	8017258 <_ZNK8touchgfx8Drawable10invalidateEv>
 80125c8:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 80125cc:	9000      	str	r0, [sp, #0]
 80125ce:	e7e7      	b.n	80125a0 <_ZN8touchgfx11BoxProgress8setValueEi+0x50>
 80125d0:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 80125d4:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 80125d8:	9000      	str	r0, [sp, #0]
 80125da:	1a12      	subs	r2, r2, r0
 80125dc:	b212      	sxth	r2, r2
 80125de:	e7e0      	b.n	80125a2 <_ZN8touchgfx11BoxProgress8setValueEi+0x52>

080125e0 <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>:
 80125e0:	b570      	push	{r4, r5, r6, lr}
 80125e2:	6803      	ldr	r3, [r0, #0]
 80125e4:	f880 108e 	strb.w	r1, [r0, #142]	; 0x8e
 80125e8:	e9d3 532b 	ldrd	r5, r3, [r3, #172]	; 0xac
 80125ec:	4604      	mov	r4, r0
 80125ee:	4798      	blx	r3
 80125f0:	462b      	mov	r3, r5
 80125f2:	4601      	mov	r1, r0
 80125f4:	4620      	mov	r0, r4
 80125f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80125fa:	4718      	bx	r3

080125fc <_ZNK8touchgfx25AbstractDirectionProgress12getDirectionEv>:
 80125fc:	f890 008e 	ldrb.w	r0, [r0, #142]	; 0x8e
 8012600:	4770      	bx	lr
	...

08012604 <_ZN8touchgfx25AbstractDirectionProgressD1Ev>:
 8012604:	b510      	push	{r4, lr}
 8012606:	4b03      	ldr	r3, [pc, #12]	; (8012614 <_ZN8touchgfx25AbstractDirectionProgressD1Ev+0x10>)
 8012608:	6003      	str	r3, [r0, #0]
 801260a:	4604      	mov	r4, r0
 801260c:	f000 f81c 	bl	8012648 <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>
 8012610:	4620      	mov	r0, r4
 8012612:	bd10      	pop	{r4, pc}
 8012614:	08024ff0 	.word	0x08024ff0

08012618 <_ZN8touchgfx25AbstractDirectionProgressD0Ev>:
 8012618:	b510      	push	{r4, lr}
 801261a:	4604      	mov	r4, r0
 801261c:	f7ff fff2 	bl	8012604 <_ZN8touchgfx25AbstractDirectionProgressD1Ev>
 8012620:	4620      	mov	r0, r4
 8012622:	2190      	movs	r1, #144	; 0x90
 8012624:	f010 f8b9 	bl	802279a <_ZdlPvj>
 8012628:	4620      	mov	r0, r4
 801262a:	bd10      	pop	{r4, pc}

0801262c <_ZN8touchgfx25AbstractDirectionProgressC1Ev>:
 801262c:	b510      	push	{r4, lr}
 801262e:	4604      	mov	r4, r0
 8012630:	f000 f8ce 	bl	80127d0 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>
 8012634:	4b03      	ldr	r3, [pc, #12]	; (8012644 <_ZN8touchgfx25AbstractDirectionProgressC1Ev+0x18>)
 8012636:	6023      	str	r3, [r4, #0]
 8012638:	4620      	mov	r0, r4
 801263a:	2100      	movs	r1, #0
 801263c:	f7ff ffd0 	bl	80125e0 <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>
 8012640:	4620      	mov	r0, r4
 8012642:	bd10      	pop	{r4, pc}
 8012644:	08024ff0 	.word	0x08024ff0

08012648 <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>:
 8012648:	4770      	bx	lr

0801264a <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>:
 801264a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801264e:	4604      	mov	r4, r0
 8012650:	f9bd 7020 	ldrsh.w	r7, [sp, #32]
 8012654:	9700      	str	r7, [sp, #0]
 8012656:	3058      	adds	r0, #88	; 0x58
 8012658:	4615      	mov	r5, r2
 801265a:	460e      	mov	r6, r1
 801265c:	4698      	mov	r8, r3
 801265e:	f7f1 ff3d 	bl	80044dc <_ZN8touchgfx8Drawable11setPositionEssss>
 8012662:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 8012666:	eb06 0308 	add.w	r3, r6, r8
 801266a:	429a      	cmp	r2, r3
 801266c:	bfb8      	it	lt
 801266e:	8123      	strhlt	r3, [r4, #8]
 8012670:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8012674:	19ea      	adds	r2, r5, r7
 8012676:	4293      	cmp	r3, r2
 8012678:	bfb8      	it	lt
 801267a:	8162      	strhlt	r2, [r4, #10]
 801267c:	b002      	add	sp, #8
 801267e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012682 <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorXEv>:
 8012682:	f9b0 005c 	ldrsh.w	r0, [r0, #92]	; 0x5c
 8012686:	4770      	bx	lr

08012688 <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorYEv>:
 8012688:	f9b0 005e 	ldrsh.w	r0, [r0, #94]	; 0x5e
 801268c:	4770      	bx	lr

0801268e <_ZNK8touchgfx25AbstractProgressIndicator25getProgressIndicatorWidthEv>:
 801268e:	f9b0 0060 	ldrsh.w	r0, [r0, #96]	; 0x60
 8012692:	4770      	bx	lr

08012694 <_ZNK8touchgfx25AbstractProgressIndicator26getProgressIndicatorHeightEv>:
 8012694:	f9b0 0062 	ldrsh.w	r0, [r0, #98]	; 0x62
 8012698:	4770      	bx	lr

0801269a <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERsS1_RtS2_>:
 801269a:	b510      	push	{r4, lr}
 801269c:	f9b0 4084 	ldrsh.w	r4, [r0, #132]	; 0x84
 80126a0:	800c      	strh	r4, [r1, #0]
 80126a2:	f9b0 1086 	ldrsh.w	r1, [r0, #134]	; 0x86
 80126a6:	8011      	strh	r1, [r2, #0]
 80126a8:	f8b0 208a 	ldrh.w	r2, [r0, #138]	; 0x8a
 80126ac:	801a      	strh	r2, [r3, #0]
 80126ae:	9b02      	ldr	r3, [sp, #8]
 80126b0:	f8b0 208c 	ldrh.w	r2, [r0, #140]	; 0x8c
 80126b4:	801a      	strh	r2, [r3, #0]
 80126b6:	bd10      	pop	{r4, pc}

080126b8 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERsS1_Rt>:
 80126b8:	b510      	push	{r4, lr}
 80126ba:	f9b0 4084 	ldrsh.w	r4, [r0, #132]	; 0x84
 80126be:	800c      	strh	r4, [r1, #0]
 80126c0:	f9b0 1086 	ldrsh.w	r1, [r0, #134]	; 0x86
 80126c4:	8011      	strh	r1, [r2, #0]
 80126c6:	f8b0 208a 	ldrh.w	r2, [r0, #138]	; 0x8a
 80126ca:	801a      	strh	r2, [r3, #0]
 80126cc:	bd10      	pop	{r4, pc}

080126ce <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERsS1_>:
 80126ce:	f9b0 3084 	ldrsh.w	r3, [r0, #132]	; 0x84
 80126d2:	800b      	strh	r3, [r1, #0]
 80126d4:	f9b0 3086 	ldrsh.w	r3, [r0, #134]	; 0x86
 80126d8:	8013      	strh	r3, [r2, #0]
 80126da:	4770      	bx	lr

080126dc <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>:
 80126dc:	f9b0 3084 	ldrsh.w	r3, [r0, #132]	; 0x84
 80126e0:	4299      	cmp	r1, r3
 80126e2:	bfb8      	it	lt
 80126e4:	4619      	movlt	r1, r3
 80126e6:	f9b0 3086 	ldrsh.w	r3, [r0, #134]	; 0x86
 80126ea:	4299      	cmp	r1, r3
 80126ec:	bfa8      	it	ge
 80126ee:	4619      	movge	r1, r3
 80126f0:	f8a0 1088 	strh.w	r1, [r0, #136]	; 0x88
 80126f4:	4770      	bx	lr

080126f6 <_ZNK8touchgfx25AbstractProgressIndicator8getValueEv>:
 80126f6:	f8b0 0088 	ldrh.w	r0, [r0, #136]	; 0x88
 80126fa:	4770      	bx	lr

080126fc <_ZN8touchgfx25AbstractProgressIndicatorD0Ev>:
 80126fc:	b510      	push	{r4, lr}
 80126fe:	2190      	movs	r1, #144	; 0x90
 8012700:	4604      	mov	r4, r0
 8012702:	f010 f84a 	bl	802279a <_ZdlPvj>
 8012706:	4620      	mov	r0, r4
 8012708:	bd10      	pop	{r4, pc}

0801270a <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>:
 801270a:	b510      	push	{r4, lr}
 801270c:	4604      	mov	r4, r0
 801270e:	302c      	adds	r0, #44	; 0x2c
 8012710:	f002 ff90 	bl	8015634 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8012714:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8012716:	8123      	strh	r3, [r4, #8]
 8012718:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801271a:	8163      	strh	r3, [r4, #10]
 801271c:	bd10      	pop	{r4, pc}
	...

08012720 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt>:
 8012720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012724:	4291      	cmp	r1, r2
 8012726:	4604      	mov	r4, r0
 8012728:	460e      	mov	r6, r1
 801272a:	4615      	mov	r5, r2
 801272c:	4698      	mov	r8, r3
 801272e:	f8bd 7018 	ldrh.w	r7, [sp, #24]
 8012732:	db05      	blt.n	8012740 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x20>
 8012734:	4b12      	ldr	r3, [pc, #72]	; (8012780 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x60>)
 8012736:	4a13      	ldr	r2, [pc, #76]	; (8012784 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x64>)
 8012738:	214d      	movs	r1, #77	; 0x4d
 801273a:	4813      	ldr	r0, [pc, #76]	; (8012788 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x68>)
 801273c:	f010 f858 	bl	80227f0 <__assert_func>
 8012740:	f8a4 1084 	strh.w	r1, [r4, #132]	; 0x84
 8012744:	f8a4 2086 	strh.w	r2, [r4, #134]	; 0x86
 8012748:	6803      	ldr	r3, [r0, #0]
 801274a:	f8b0 1088 	ldrh.w	r1, [r0, #136]	; 0x88
 801274e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8012752:	4798      	blx	r3
 8012754:	f1b8 0f00 	cmp.w	r8, #0
 8012758:	d10c      	bne.n	8012774 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x54>
 801275a:	1bad      	subs	r5, r5, r6
 801275c:	f8a4 508a 	strh.w	r5, [r4, #138]	; 0x8a
 8012760:	f8b4 308a 	ldrh.w	r3, [r4, #138]	; 0x8a
 8012764:	f8a4 708c 	strh.w	r7, [r4, #140]	; 0x8c
 8012768:	42bb      	cmp	r3, r7
 801276a:	d806      	bhi.n	801277a <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x5a>
 801276c:	4b07      	ldr	r3, [pc, #28]	; (801278c <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x6c>)
 801276e:	4a05      	ldr	r2, [pc, #20]	; (8012784 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x64>)
 8012770:	215a      	movs	r1, #90	; 0x5a
 8012772:	e7e2      	b.n	801273a <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x1a>
 8012774:	f8a4 808a 	strh.w	r8, [r4, #138]	; 0x8a
 8012778:	e7f2      	b.n	8012760 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x40>
 801277a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801277e:	bf00      	nop
 8012780:	080250b0 	.word	0x080250b0
 8012784:	080251ec 	.word	0x080251ec
 8012788:	080250ba 	.word	0x080250ba
 801278c:	08025111 	.word	0x08025111

08012790 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>:
 8012790:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012792:	4604      	mov	r4, r0
 8012794:	460d      	mov	r5, r1
 8012796:	b1b9      	cbz	r1, 80127c8 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt+0x38>
 8012798:	f8b0 608c 	ldrh.w	r6, [r0, #140]	; 0x8c
 801279c:	f9b4 2086 	ldrsh.w	r2, [r4, #134]	; 0x86
 80127a0:	f9b0 0084 	ldrsh.w	r0, [r0, #132]	; 0x84
 80127a4:	f8b4 108a 	ldrh.w	r1, [r4, #138]	; 0x8a
 80127a8:	f8b4 7088 	ldrh.w	r7, [r4, #136]	; 0x88
 80127ac:	1a12      	subs	r2, r2, r0
 80127ae:	ab01      	add	r3, sp, #4
 80127b0:	1b89      	subs	r1, r1, r6
 80127b2:	1a38      	subs	r0, r7, r0
 80127b4:	f004 fe91 	bl	80174da <_ZN8touchgfx6muldivElllRl>
 80127b8:	4629      	mov	r1, r5
 80127ba:	ab01      	add	r3, sp, #4
 80127bc:	f8b4 208a 	ldrh.w	r2, [r4, #138]	; 0x8a
 80127c0:	4430      	add	r0, r6
 80127c2:	f004 fe8a 	bl	80174da <_ZN8touchgfx6muldivElllRl>
 80127c6:	b285      	uxth	r5, r0
 80127c8:	4628      	mov	r0, r5
 80127ca:	b003      	add	sp, #12
 80127cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080127d0 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>:
 80127d0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80127d4:	4604      	mov	r4, r0
 80127d6:	4625      	mov	r5, r4
 80127d8:	f7f1 fe32 	bl	8004440 <_ZN8touchgfx8DrawableC1Ev>
 80127dc:	2600      	movs	r6, #0
 80127de:	4b1b      	ldr	r3, [pc, #108]	; (801284c <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0x7c>)
 80127e0:	62a6      	str	r6, [r4, #40]	; 0x28
 80127e2:	af02      	add	r7, sp, #8
 80127e4:	f845 3b2c 	str.w	r3, [r5], #44
 80127e8:	f64f 78ff 	movw	r8, #65535	; 0xffff
 80127ec:	f827 8d04 	strh.w	r8, [r7, #-4]!
 80127f0:	4628      	mov	r0, r5
 80127f2:	f7f1 fe25 	bl	8004440 <_ZN8touchgfx8DrawableC1Ev>
 80127f6:	4b16      	ldr	r3, [pc, #88]	; (8012850 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0x80>)
 80127f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80127fa:	4639      	mov	r1, r7
 80127fc:	4628      	mov	r0, r5
 80127fe:	f104 0758 	add.w	r7, r4, #88	; 0x58
 8012802:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
 8012806:	f884 8054 	strb.w	r8, [r4, #84]	; 0x54
 801280a:	f002 ff13 	bl	8015634 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 801280e:	4638      	mov	r0, r7
 8012810:	f7f1 fe16 	bl	8004440 <_ZN8touchgfx8DrawableC1Ev>
 8012814:	4b0f      	ldr	r3, [pc, #60]	; (8012854 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0x84>)
 8012816:	65a3      	str	r3, [r4, #88]	; 0x58
 8012818:	f44f 03c8 	mov.w	r3, #6553600	; 0x640000
 801281c:	e9c4 3321 	strd	r3, r3, [r4, #132]	; 0x84
 8012820:	4632      	mov	r2, r6
 8012822:	4631      	mov	r1, r6
 8012824:	4628      	mov	r0, r5
 8012826:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
 801282a:	f8a4 608c 	strh.w	r6, [r4, #140]	; 0x8c
 801282e:	f7f1 fea0 	bl	8004572 <_ZN8touchgfx8Drawable5setXYEss>
 8012832:	4629      	mov	r1, r5
 8012834:	4620      	mov	r0, r4
 8012836:	f000 ff0b 	bl	8013650 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801283a:	4620      	mov	r0, r4
 801283c:	4639      	mov	r1, r7
 801283e:	f000 ff07 	bl	8013650 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8012842:	4620      	mov	r0, r4
 8012844:	b002      	add	sp, #8
 8012846:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801284a:	bf00      	nop
 801284c:	08025134 	.word	0x08025134
 8012850:	08026500 	.word	0x08026500
 8012854:	08025570 	.word	0x08025570

08012858 <_ZNK8touchgfx12DrawableList13getHorizontalEv>:
 8012858:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 801285c:	4770      	bx	lr

0801285e <_ZNK8touchgfx12DrawableList11getCircularEv>:
 801285e:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
 8012862:	4770      	bx	lr

08012864 <_ZNK8touchgfx12DrawableList11getItemSizeEv>:
 8012864:	f9b0 0034 	ldrsh.w	r0, [r0, #52]	; 0x34
 8012868:	4770      	bx	lr

0801286a <_ZNK8touchgfx12DrawableList15getDrawableSizeEv>:
 801286a:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801286c:	8e80      	ldrh	r0, [r0, #52]	; 0x34
 801286e:	eba0 0043 	sub.w	r0, r0, r3, lsl #1
 8012872:	b200      	sxth	r0, r0
 8012874:	4770      	bx	lr

08012876 <_ZNK8touchgfx12DrawableList17getDrawableMarginEv>:
 8012876:	f9b0 0036 	ldrsh.w	r0, [r0, #54]	; 0x36
 801287a:	4770      	bx	lr

0801287c <_ZN8touchgfx12DrawableListC1Ev>:
 801287c:	2101      	movs	r1, #1
 801287e:	2200      	movs	r2, #0
 8012880:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 8012884:	490f      	ldr	r1, [pc, #60]	; (80128c4 <_ZN8touchgfx12DrawableListC1Ev+0x48>)
 8012886:	8082      	strh	r2, [r0, #4]
 8012888:	80c2      	strh	r2, [r0, #6]
 801288a:	8102      	strh	r2, [r0, #8]
 801288c:	8142      	strh	r2, [r0, #10]
 801288e:	8182      	strh	r2, [r0, #12]
 8012890:	81c2      	strh	r2, [r0, #14]
 8012892:	8202      	strh	r2, [r0, #16]
 8012894:	8242      	strh	r2, [r0, #18]
 8012896:	e9c0 2205 	strd	r2, r2, [r0, #20]
 801289a:	61c2      	str	r2, [r0, #28]
 801289c:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 80128a0:	6282      	str	r2, [r0, #40]	; 0x28
 80128a2:	6001      	str	r1, [r0, #0]
 80128a4:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
 80128a8:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
 80128ac:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 80128b0:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 80128b4:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
 80128b8:	f8a0 2042 	strh.w	r2, [r0, #66]	; 0x42
 80128bc:	e9c0 2211 	strd	r2, r2, [r0, #68]	; 0x44
 80128c0:	4770      	bx	lr
 80128c2:	bf00      	nop
 80128c4:	08025258 	.word	0x08025258

080128c8 <_ZN8touchgfx12DrawableList15setDrawableSizeEss>:
 80128c8:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 80128cc:	8681      	strh	r1, [r0, #52]	; 0x34
 80128ce:	86c2      	strh	r2, [r0, #54]	; 0x36
 80128d0:	4770      	bx	lr

080128d2 <_ZNK8touchgfx12DrawableList16getNumberOfItemsEv>:
 80128d2:	f9b0 0038 	ldrsh.w	r0, [r0, #56]	; 0x38
 80128d6:	4770      	bx	lr

080128d8 <_ZNK8touchgfx12DrawableList28getRequiredNumberOfDrawablesEv>:
 80128d8:	b538      	push	{r3, r4, r5, lr}
 80128da:	4605      	mov	r5, r0
 80128dc:	6c40      	ldr	r0, [r0, #68]	; 0x44
 80128de:	b308      	cbz	r0, 8012924 <_ZNK8touchgfx12DrawableList28getRequiredNumberOfDrawablesEv+0x4c>
 80128e0:	f9b5 2034 	ldrsh.w	r2, [r5, #52]	; 0x34
 80128e4:	2a00      	cmp	r2, #0
 80128e6:	dd21      	ble.n	801292c <_ZNK8touchgfx12DrawableList28getRequiredNumberOfDrawablesEv+0x54>
 80128e8:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 80128ec:	b1db      	cbz	r3, 8012926 <_ZNK8touchgfx12DrawableList28getRequiredNumberOfDrawablesEv+0x4e>
 80128ee:	f9b5 4008 	ldrsh.w	r4, [r5, #8]
 80128f2:	1e63      	subs	r3, r4, #1
 80128f4:	1e54      	subs	r4, r2, #1
 80128f6:	441c      	add	r4, r3
 80128f8:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
 80128fc:	fb94 f4f2 	sdiv	r4, r4, r2
 8012900:	3401      	adds	r4, #1
 8012902:	b224      	sxth	r4, r4
 8012904:	b923      	cbnz	r3, 8012910 <_ZNK8touchgfx12DrawableList28getRequiredNumberOfDrawablesEv+0x38>
 8012906:	f9b5 3038 	ldrsh.w	r3, [r5, #56]	; 0x38
 801290a:	429c      	cmp	r4, r3
 801290c:	bfa8      	it	ge
 801290e:	461c      	movge	r4, r3
 8012910:	6803      	ldr	r3, [r0, #0]
 8012912:	68db      	ldr	r3, [r3, #12]
 8012914:	4798      	blx	r3
 8012916:	f9b5 3042 	ldrsh.w	r3, [r5, #66]	; 0x42
 801291a:	1ac0      	subs	r0, r0, r3
 801291c:	42a0      	cmp	r0, r4
 801291e:	bfa8      	it	ge
 8012920:	4620      	movge	r0, r4
 8012922:	b200      	sxth	r0, r0
 8012924:	bd38      	pop	{r3, r4, r5, pc}
 8012926:	f9b5 400a 	ldrsh.w	r4, [r5, #10]
 801292a:	e7e2      	b.n	80128f2 <_ZNK8touchgfx12DrawableList28getRequiredNumberOfDrawablesEv+0x1a>
 801292c:	2000      	movs	r0, #0
 801292e:	e7f9      	b.n	8012924 <_ZNK8touchgfx12DrawableList28getRequiredNumberOfDrawablesEv+0x4c>

08012930 <_ZN8touchgfx12DrawableList9setOffsetEl>:
 8012930:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012934:	4604      	mov	r4, r0
 8012936:	460d      	mov	r5, r1
 8012938:	6321      	str	r1, [r4, #48]	; 0x30
 801293a:	f9b0 303a 	ldrsh.w	r3, [r0, #58]	; 0x3a
 801293e:	2b00      	cmp	r3, #0
 8012940:	f000 80eb 	beq.w	8012b1a <_ZN8touchgfx12DrawableList9setOffsetEl+0x1ea>
 8012944:	f9b0 3038 	ldrsh.w	r3, [r0, #56]	; 0x38
 8012948:	2b00      	cmp	r3, #0
 801294a:	f000 80e6 	beq.w	8012b1a <_ZN8touchgfx12DrawableList9setOffsetEl+0x1ea>
 801294e:	f9b0 3034 	ldrsh.w	r3, [r0, #52]	; 0x34
 8012952:	2b00      	cmp	r3, #0
 8012954:	f000 80e1 	beq.w	8012b1a <_ZN8touchgfx12DrawableList9setOffsetEl+0x1ea>
 8012958:	6c80      	ldr	r0, [r0, #72]	; 0x48
 801295a:	2800      	cmp	r0, #0
 801295c:	f000 80dd 	beq.w	8012b1a <_ZN8touchgfx12DrawableList9setOffsetEl+0x1ea>
 8012960:	6803      	ldr	r3, [r0, #0]
 8012962:	68db      	ldr	r3, [r3, #12]
 8012964:	4798      	blx	r3
 8012966:	2800      	cmp	r0, #0
 8012968:	f000 80d7 	beq.w	8012b1a <_ZN8touchgfx12DrawableList9setOffsetEl+0x1ea>
 801296c:	2d00      	cmp	r5, #0
 801296e:	f9b4 1034 	ldrsh.w	r1, [r4, #52]	; 0x34
 8012972:	bfc1      	itttt	gt
 8012974:	fb95 f2f1 	sdivgt	r2, r5, r1
 8012978:	3201      	addgt	r2, #1
 801297a:	4253      	neggt	r3, r2
 801297c:	fb01 5512 	mlsgt	r5, r1, r2, r5
 8012980:	f1c1 0200 	rsb	r2, r1, #0
 8012984:	bfcc      	ite	gt
 8012986:	b21b      	sxthgt	r3, r3
 8012988:	2300      	movle	r3, #0
 801298a:	f894 702d 	ldrb.w	r7, [r4, #45]	; 0x2d
 801298e:	f9b4 003a 	ldrsh.w	r0, [r4, #58]	; 0x3a
 8012992:	42aa      	cmp	r2, r5
 8012994:	bfa1      	itttt	ge
 8012996:	fb95 f2f1 	sdivge	r2, r5, r1
 801299a:	1a9b      	subge	r3, r3, r2
 801299c:	b21b      	sxthge	r3, r3
 801299e:	fb01 5512 	mlsge	r5, r1, r2, r5
 80129a2:	b167      	cbz	r7, 80129be <_ZN8touchgfx12DrawableList9setOffsetEl+0x8e>
 80129a4:	f9b4 1038 	ldrsh.w	r1, [r4, #56]	; 0x38
 80129a8:	fb93 f2f1 	sdiv	r2, r3, r1
 80129ac:	fb01 3312 	mls	r3, r1, r2, r3
 80129b0:	440b      	add	r3, r1
 80129b2:	fb93 f2f1 	sdiv	r2, r3, r1
 80129b6:	fb01 3312 	mls	r3, r1, r2, r3
 80129ba:	b21b      	sxth	r3, r3
 80129bc:	e004      	b.n	80129c8 <_ZN8touchgfx12DrawableList9setOffsetEl+0x98>
 80129be:	2b00      	cmp	r3, #0
 80129c0:	da64      	bge.n	8012a8c <_ZN8touchgfx12DrawableList9setOffsetEl+0x15c>
 80129c2:	fb01 5513 	mls	r5, r1, r3, r5
 80129c6:	463b      	mov	r3, r7
 80129c8:	f894 6040 	ldrb.w	r6, [r4, #64]	; 0x40
 80129cc:	b1be      	cbz	r6, 80129fe <_ZN8touchgfx12DrawableList9setOffsetEl+0xce>
 80129ce:	f9b4 e03c 	ldrsh.w	lr, [r4, #60]	; 0x3c
 80129d2:	459e      	cmp	lr, r3
 80129d4:	d068      	beq.n	8012aa8 <_ZN8touchgfx12DrawableList9setOffsetEl+0x178>
 80129d6:	2601      	movs	r6, #1
 80129d8:	4286      	cmp	r6, r0
 80129da:	da67      	bge.n	8012aac <_ZN8touchgfx12DrawableList9setOffsetEl+0x17c>
 80129dc:	eb0e 0106 	add.w	r1, lr, r6
 80129e0:	199a      	adds	r2, r3, r6
 80129e2:	b14f      	cbz	r7, 80129f8 <_ZN8touchgfx12DrawableList9setOffsetEl+0xc8>
 80129e4:	f9b4 c038 	ldrsh.w	ip, [r4, #56]	; 0x38
 80129e8:	fb91 f8fc 	sdiv	r8, r1, ip
 80129ec:	fb0c 1118 	mls	r1, ip, r8, r1
 80129f0:	fb92 f8fc 	sdiv	r8, r2, ip
 80129f4:	fb0c 2218 	mls	r2, ip, r8, r2
 80129f8:	428b      	cmp	r3, r1
 80129fa:	d151      	bne.n	8012aa0 <_ZN8touchgfx12DrawableList9setOffsetEl+0x170>
 80129fc:	4276      	negs	r6, r6
 80129fe:	f9b4 203e 	ldrsh.w	r2, [r4, #62]	; 0x3e
 8012a02:	87a3      	strh	r3, [r4, #60]	; 0x3c
 8012a04:	1b92      	subs	r2, r2, r6
 8012a06:	4402      	add	r2, r0
 8012a08:	2700      	movs	r7, #0
 8012a0a:	fb92 f1f0 	sdiv	r1, r2, r0
 8012a0e:	fb00 2011 	mls	r0, r0, r1, r2
 8012a12:	87e0      	strh	r0, [r4, #62]	; 0x3e
 8012a14:	b2ad      	uxth	r5, r5
 8012a16:	46ba      	mov	sl, r7
 8012a18:	f04f 0b01 	mov.w	fp, #1
 8012a1c:	f9b4 203a 	ldrsh.w	r2, [r4, #58]	; 0x3a
 8012a20:	42ba      	cmp	r2, r7
 8012a22:	dd77      	ble.n	8012b14 <_ZN8touchgfx12DrawableList9setOffsetEl+0x1e4>
 8012a24:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	; 0x3e
 8012a28:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8012a2a:	f8b4 1042 	ldrh.w	r1, [r4, #66]	; 0x42
 8012a2e:	443b      	add	r3, r7
 8012a30:	fb93 f8f2 	sdiv	r8, r3, r2
 8012a34:	fb02 3818 	mls	r8, r2, r8, r3
 8012a38:	fa1f f888 	uxth.w	r8, r8
 8012a3c:	6803      	ldr	r3, [r0, #0]
 8012a3e:	4441      	add	r1, r8
 8012a40:	689b      	ldr	r3, [r3, #8]
 8012a42:	b209      	sxth	r1, r1
 8012a44:	4798      	blx	r3
 8012a46:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8012a4a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8012a4c:	f8b4 c034 	ldrh.w	ip, [r4, #52]	; 0x34
 8012a50:	6802      	ldr	r2, [r0, #0]
 8012a52:	4681      	mov	r9, r0
 8012a54:	fa1f fe87 	uxth.w	lr, r7
 8012a58:	b351      	cbz	r1, 8012ab0 <_ZN8touchgfx12DrawableList9setOffsetEl+0x180>
 8012a5a:	18e9      	adds	r1, r5, r3
 8012a5c:	fb1c 110e 	smlabb	r1, ip, lr, r1
 8012a60:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8012a62:	b209      	sxth	r1, r1
 8012a64:	2200      	movs	r2, #0
 8012a66:	4798      	blx	r3
 8012a68:	f9b4 303c 	ldrsh.w	r3, [r4, #60]	; 0x3c
 8012a6c:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8012a70:	443b      	add	r3, r7
 8012a72:	b322      	cbz	r2, 8012abe <_ZN8touchgfx12DrawableList9setOffsetEl+0x18e>
 8012a74:	f9b4 2038 	ldrsh.w	r2, [r4, #56]	; 0x38
 8012a78:	fb93 f1f2 	sdiv	r1, r3, r2
 8012a7c:	fb02 3311 	mls	r3, r2, r1, r3
 8012a80:	2b00      	cmp	r3, #0
 8012a82:	da22      	bge.n	8012aca <_ZN8touchgfx12DrawableList9setOffsetEl+0x19a>
 8012a84:	f889 a025 	strb.w	sl, [r9, #37]	; 0x25
 8012a88:	3701      	adds	r7, #1
 8012a8a:	e7c7      	b.n	8012a1c <_ZN8touchgfx12DrawableList9setOffsetEl+0xec>
 8012a8c:	f9b4 2038 	ldrsh.w	r2, [r4, #56]	; 0x38
 8012a90:	18c6      	adds	r6, r0, r3
 8012a92:	4296      	cmp	r6, r2
 8012a94:	dd98      	ble.n	80129c8 <_ZN8touchgfx12DrawableList9setOffsetEl+0x98>
 8012a96:	1b92      	subs	r2, r2, r6
 8012a98:	fb01 5502 	mla	r5, r1, r2, r5
 8012a9c:	4413      	add	r3, r2
 8012a9e:	e78c      	b.n	80129ba <_ZN8touchgfx12DrawableList9setOffsetEl+0x8a>
 8012aa0:	4596      	cmp	lr, r2
 8012aa2:	d0ac      	beq.n	80129fe <_ZN8touchgfx12DrawableList9setOffsetEl+0xce>
 8012aa4:	3601      	adds	r6, #1
 8012aa6:	e797      	b.n	80129d8 <_ZN8touchgfx12DrawableList9setOffsetEl+0xa8>
 8012aa8:	2600      	movs	r6, #0
 8012aaa:	e7a8      	b.n	80129fe <_ZN8touchgfx12DrawableList9setOffsetEl+0xce>
 8012aac:	4606      	mov	r6, r0
 8012aae:	e7a6      	b.n	80129fe <_ZN8touchgfx12DrawableList9setOffsetEl+0xce>
 8012ab0:	442b      	add	r3, r5
 8012ab2:	fb1c 3c0e 	smlabb	ip, ip, lr, r3
 8012ab6:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8012ab8:	fa0f f28c 	sxth.w	r2, ip
 8012abc:	e7d3      	b.n	8012a66 <_ZN8touchgfx12DrawableList9setOffsetEl+0x136>
 8012abe:	2b00      	cmp	r3, #0
 8012ac0:	dbe0      	blt.n	8012a84 <_ZN8touchgfx12DrawableList9setOffsetEl+0x154>
 8012ac2:	f9b4 2038 	ldrsh.w	r2, [r4, #56]	; 0x38
 8012ac6:	4293      	cmp	r3, r2
 8012ac8:	dadc      	bge.n	8012a84 <_ZN8touchgfx12DrawableList9setOffsetEl+0x154>
 8012aca:	f889 b025 	strb.w	fp, [r9, #37]	; 0x25
 8012ace:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 8012ad2:	b132      	cbz	r2, 8012ae2 <_ZN8touchgfx12DrawableList9setOffsetEl+0x1b2>
 8012ad4:	42be      	cmp	r6, r7
 8012ad6:	dc04      	bgt.n	8012ae2 <_ZN8touchgfx12DrawableList9setOffsetEl+0x1b2>
 8012ad8:	f9b4 203a 	ldrsh.w	r2, [r4, #58]	; 0x3a
 8012adc:	4432      	add	r2, r6
 8012ade:	4297      	cmp	r7, r2
 8012ae0:	dbd2      	blt.n	8012a88 <_ZN8touchgfx12DrawableList9setOffsetEl+0x158>
 8012ae2:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8012ae4:	9301      	str	r3, [sp, #4]
 8012ae6:	6802      	ldr	r2, [r0, #0]
 8012ae8:	68d2      	ldr	r2, [r2, #12]
 8012aea:	4790      	blx	r2
 8012aec:	2800      	cmp	r0, #0
 8012aee:	d0cb      	beq.n	8012a88 <_ZN8touchgfx12DrawableList9setOffsetEl+0x158>
 8012af0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8012af2:	f8b4 2042 	ldrh.w	r2, [r4, #66]	; 0x42
 8012af6:	6801      	ldr	r1, [r0, #0]
 8012af8:	9b01      	ldr	r3, [sp, #4]
 8012afa:	4442      	add	r2, r8
 8012afc:	b21b      	sxth	r3, r3
 8012afe:	f8d1 8008 	ldr.w	r8, [r1, #8]
 8012b02:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8012b04:	b212      	sxth	r2, r2
 8012b06:	47c0      	blx	r8
 8012b08:	f8d9 3000 	ldr.w	r3, [r9]
 8012b0c:	4648      	mov	r0, r9
 8012b0e:	695b      	ldr	r3, [r3, #20]
 8012b10:	4798      	blx	r3
 8012b12:	e7b9      	b.n	8012a88 <_ZN8touchgfx12DrawableList9setOffsetEl+0x158>
 8012b14:	2301      	movs	r3, #1
 8012b16:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8012b1a:	b003      	add	sp, #12
 8012b1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012b20 <_ZNK8touchgfx12DrawableList9getOffsetEv>:
 8012b20:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8012b22:	4770      	bx	lr

08012b24 <_ZNK8touchgfx12DrawableList16getDrawableIndexEss>:
 8012b24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012b26:	1c54      	adds	r4, r2, #1
 8012b28:	db2f      	blt.n	8012b8a <_ZNK8touchgfx12DrawableList16getDrawableIndexEss+0x66>
 8012b2a:	f9b0 403a 	ldrsh.w	r4, [r0, #58]	; 0x3a
 8012b2e:	4294      	cmp	r4, r2
 8012b30:	dd2b      	ble.n	8012b8a <_ZNK8touchgfx12DrawableList16getDrawableIndexEss+0x66>
 8012b32:	b354      	cbz	r4, 8012b8a <_ZNK8touchgfx12DrawableList16getDrawableIndexEss+0x66>
 8012b34:	f9b0 6038 	ldrsh.w	r6, [r0, #56]	; 0x38
 8012b38:	b33e      	cbz	r6, 8012b8a <_ZNK8touchgfx12DrawableList16getDrawableIndexEss+0x66>
 8012b3a:	1c53      	adds	r3, r2, #1
 8012b3c:	d008      	beq.n	8012b50 <_ZNK8touchgfx12DrawableList16getDrawableIndexEss+0x2c>
 8012b3e:	f9b0 303e 	ldrsh.w	r3, [r0, #62]	; 0x3e
 8012b42:	1ad2      	subs	r2, r2, r3
 8012b44:	4422      	add	r2, r4
 8012b46:	fb92 f3f4 	sdiv	r3, r2, r4
 8012b4a:	fb04 2213 	mls	r2, r4, r3, r2
 8012b4e:	b212      	sxth	r2, r2
 8012b50:	3201      	adds	r2, #1
 8012b52:	b212      	sxth	r2, r2
 8012b54:	4294      	cmp	r4, r2
 8012b56:	dd18      	ble.n	8012b8a <_ZNK8touchgfx12DrawableList16getDrawableIndexEss+0x66>
 8012b58:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
 8012b5a:	f890 702d 	ldrb.w	r7, [r0, #45]	; 0x2d
 8012b5e:	b295      	uxth	r5, r2
 8012b60:	442b      	add	r3, r5
 8012b62:	b21b      	sxth	r3, r3
 8012b64:	b127      	cbz	r7, 8012b70 <_ZNK8touchgfx12DrawableList16getDrawableIndexEss+0x4c>
 8012b66:	fb93 f7f6 	sdiv	r7, r3, r6
 8012b6a:	fb06 3317 	mls	r3, r6, r7, r3
 8012b6e:	b21b      	sxth	r3, r3
 8012b70:	428b      	cmp	r3, r1
 8012b72:	d108      	bne.n	8012b86 <_ZNK8touchgfx12DrawableList16getDrawableIndexEss+0x62>
 8012b74:	f9b0 003e 	ldrsh.w	r0, [r0, #62]	; 0x3e
 8012b78:	4402      	add	r2, r0
 8012b7a:	fb92 f0f4 	sdiv	r0, r2, r4
 8012b7e:	fb04 2010 	mls	r0, r4, r0, r2
 8012b82:	b200      	sxth	r0, r0
 8012b84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012b86:	1c6a      	adds	r2, r5, #1
 8012b88:	e7e3      	b.n	8012b52 <_ZNK8touchgfx12DrawableList16getDrawableIndexEss+0x2e>
 8012b8a:	f04f 30ff 	mov.w	r0, #4294967295
 8012b8e:	e7f9      	b.n	8012b84 <_ZNK8touchgfx12DrawableList16getDrawableIndexEss+0x60>

08012b90 <_ZN8touchgfx12DrawableList16refreshDrawablesEv>:
 8012b90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012b92:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8012b94:	2500      	movs	r5, #0
 8012b96:	4604      	mov	r4, r0
 8012b98:	8745      	strh	r5, [r0, #58]	; 0x3a
 8012b9a:	2b00      	cmp	r3, #0
 8012b9c:	d03c      	beq.n	8012c18 <_ZN8touchgfx12DrawableList16refreshDrawablesEv+0x88>
 8012b9e:	f7ff fe9b 	bl	80128d8 <_ZNK8touchgfx12DrawableList28getRequiredNumberOfDrawablesEv>
 8012ba2:	8760      	strh	r0, [r4, #58]	; 0x3a
 8012ba4:	4620      	mov	r0, r4
 8012ba6:	f000 fcc6 	bl	8013536 <_ZN8touchgfx9Container9removeAllEv>
 8012baa:	f9b4 303a 	ldrsh.w	r3, [r4, #58]	; 0x3a
 8012bae:	42ab      	cmp	r3, r5
 8012bb0:	dd27      	ble.n	8012c02 <_ZN8touchgfx12DrawableList16refreshDrawablesEv+0x72>
 8012bb2:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8012bb4:	f8b4 1042 	ldrh.w	r1, [r4, #66]	; 0x42
 8012bb8:	6803      	ldr	r3, [r0, #0]
 8012bba:	4429      	add	r1, r5
 8012bbc:	b209      	sxth	r1, r1
 8012bbe:	689b      	ldr	r3, [r3, #8]
 8012bc0:	4798      	blx	r3
 8012bc2:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 8012bc6:	f8b4 c036 	ldrh.w	ip, [r4, #54]	; 0x36
 8012bca:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
 8012bcc:	6807      	ldr	r7, [r0, #0]
 8012bce:	4606      	mov	r6, r0
 8012bd0:	b17a      	cbz	r2, 8012bf2 <_ZN8touchgfx12DrawableList16refreshDrawablesEv+0x62>
 8012bd2:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8012bd6:	9300      	str	r3, [sp, #0]
 8012bd8:	eba1 014c 	sub.w	r1, r1, ip, lsl #1
 8012bdc:	6abf      	ldr	r7, [r7, #40]	; 0x28
 8012bde:	b20b      	sxth	r3, r1
 8012be0:	2200      	movs	r2, #0
 8012be2:	4611      	mov	r1, r2
 8012be4:	47b8      	blx	r7
 8012be6:	4631      	mov	r1, r6
 8012be8:	4620      	mov	r0, r4
 8012bea:	f000 fd31 	bl	8013650 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8012bee:	3501      	adds	r5, #1
 8012bf0:	e7db      	b.n	8012baa <_ZN8touchgfx12DrawableList16refreshDrawablesEv+0x1a>
 8012bf2:	eba1 014c 	sub.w	r1, r1, ip, lsl #1
 8012bf6:	b209      	sxth	r1, r1
 8012bf8:	9100      	str	r1, [sp, #0]
 8012bfa:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8012bfe:	6abf      	ldr	r7, [r7, #40]	; 0x28
 8012c00:	e7ef      	b.n	8012be2 <_ZN8touchgfx12DrawableList16refreshDrawablesEv+0x52>
 8012c02:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8012c04:	2300      	movs	r3, #0
 8012c06:	4620      	mov	r0, r4
 8012c08:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8012c0c:	63e3      	str	r3, [r4, #60]	; 0x3c
 8012c0e:	b003      	add	sp, #12
 8012c10:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8012c14:	f7ff be8c 	b.w	8012930 <_ZN8touchgfx12DrawableList9setOffsetEl>
 8012c18:	b003      	add	sp, #12
 8012c1a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012c1c <_ZN8touchgfx12DrawableList8setWidthEs>:
 8012c1c:	8101      	strh	r1, [r0, #8]
 8012c1e:	f7ff bfb7 	b.w	8012b90 <_ZN8touchgfx12DrawableList16refreshDrawablesEv>

08012c22 <_ZN8touchgfx12DrawableList9setHeightEs>:
 8012c22:	8141      	strh	r1, [r0, #10]
 8012c24:	f7ff bfb4 	b.w	8012b90 <_ZN8touchgfx12DrawableList16refreshDrawablesEv>

08012c28 <_ZN8touchgfx12DrawableList13setHorizontalEb>:
 8012c28:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8012c2c:	b121      	cbz	r1, 8012c38 <_ZN8touchgfx12DrawableList13setHorizontalEb+0x10>
 8012c2e:	b92b      	cbnz	r3, 8012c3c <_ZN8touchgfx12DrawableList13setHorizontalEb+0x14>
 8012c30:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c
 8012c34:	f7ff bfac 	b.w	8012b90 <_ZN8touchgfx12DrawableList16refreshDrawablesEv>
 8012c38:	2b00      	cmp	r3, #0
 8012c3a:	d1f9      	bne.n	8012c30 <_ZN8touchgfx12DrawableList13setHorizontalEb+0x8>
 8012c3c:	4770      	bx	lr

08012c3e <_ZN8touchgfx12DrawableList11setCircularEb>:
 8012c3e:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8012c42:	b121      	cbz	r1, 8012c4e <_ZN8touchgfx12DrawableList11setCircularEb+0x10>
 8012c44:	b92b      	cbnz	r3, 8012c52 <_ZN8touchgfx12DrawableList11setCircularEb+0x14>
 8012c46:	f880 102d 	strb.w	r1, [r0, #45]	; 0x2d
 8012c4a:	f7ff bfa1 	b.w	8012b90 <_ZN8touchgfx12DrawableList16refreshDrawablesEv>
 8012c4e:	2b00      	cmp	r3, #0
 8012c50:	d1f9      	bne.n	8012c46 <_ZN8touchgfx12DrawableList11setCircularEb+0x8>
 8012c52:	4770      	bx	lr

08012c54 <_ZN8touchgfx12DrawableList12setDrawablesERNS_26DrawableListItemsInterfaceEsRNS_15GenericCallbackIPS1_ssEE>:
 8012c54:	b410      	push	{r4}
 8012c56:	6441      	str	r1, [r0, #68]	; 0x44
 8012c58:	f8a0 2042 	strh.w	r2, [r0, #66]	; 0x42
 8012c5c:	6483      	str	r3, [r0, #72]	; 0x48
 8012c5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012c62:	f7ff bf95 	b.w	8012b90 <_ZN8touchgfx12DrawableList16refreshDrawablesEv>

08012c66 <_ZN8touchgfx12DrawableList16setNumberOfItemsEs>:
 8012c66:	8701      	strh	r1, [r0, #56]	; 0x38
 8012c68:	f7ff bf92 	b.w	8012b90 <_ZN8touchgfx12DrawableList16refreshDrawablesEv>

08012c6c <_ZN8touchgfx12DrawableList11itemChangedEs>:
 8012c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c6e:	4604      	mov	r4, r0
 8012c70:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8012c72:	460e      	mov	r6, r1
 8012c74:	b1c0      	cbz	r0, 8012ca8 <_ZN8touchgfx12DrawableList11itemChangedEs+0x3c>
 8012c76:	6803      	ldr	r3, [r0, #0]
 8012c78:	68db      	ldr	r3, [r3, #12]
 8012c7a:	4798      	blx	r3
 8012c7c:	b1a0      	cbz	r0, 8012ca8 <_ZN8touchgfx12DrawableList11itemChangedEs+0x3c>
 8012c7e:	f04f 35ff 	mov.w	r5, #4294967295
 8012c82:	462a      	mov	r2, r5
 8012c84:	4631      	mov	r1, r6
 8012c86:	4620      	mov	r0, r4
 8012c88:	f7ff ff4c 	bl	8012b24 <_ZNK8touchgfx12DrawableList16getDrawableIndexEss>
 8012c8c:	1c43      	adds	r3, r0, #1
 8012c8e:	4605      	mov	r5, r0
 8012c90:	d00a      	beq.n	8012ca8 <_ZN8touchgfx12DrawableList11itemChangedEs+0x3c>
 8012c92:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8012c94:	f8b4 2042 	ldrh.w	r2, [r4, #66]	; 0x42
 8012c98:	6803      	ldr	r3, [r0, #0]
 8012c9a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8012c9c:	689f      	ldr	r7, [r3, #8]
 8012c9e:	442a      	add	r2, r5
 8012ca0:	4633      	mov	r3, r6
 8012ca2:	b212      	sxth	r2, r2
 8012ca4:	47b8      	blx	r7
 8012ca6:	e7ec      	b.n	8012c82 <_ZN8touchgfx12DrawableList11itemChangedEs+0x16>
 8012ca8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012caa <_ZN8touchgfx10ScrollList16handleClickEventERKNS_10ClickEventE>:
 8012caa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012cae:	790b      	ldrb	r3, [r1, #4]
 8012cb0:	4604      	mov	r4, r0
 8012cb2:	2b00      	cmp	r3, #0
 8012cb4:	d165      	bne.n	8012d82 <_ZN8touchgfx10ScrollList16handleClickEventERKNS_10ClickEventE+0xd8>
 8012cb6:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8012cba:	f8a0 30b0 	strh.w	r3, [r0, #176]	; 0xb0
 8012cbe:	f9b1 3008 	ldrsh.w	r3, [r1, #8]
 8012cc2:	f8a0 30b2 	strh.w	r3, [r0, #178]	; 0xb2
 8012cc6:	6803      	ldr	r3, [r0, #0]
 8012cc8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8012ccc:	4798      	blx	r3
 8012cce:	6823      	ldr	r3, [r4, #0]
 8012cd0:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
 8012cd4:	4601      	mov	r1, r0
 8012cd6:	f8d3 50b0 	ldr.w	r5, [r3, #176]	; 0xb0
 8012cda:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8012cde:	4620      	mov	r0, r4
 8012ce0:	4798      	blx	r3
 8012ce2:	4601      	mov	r1, r0
 8012ce4:	4620      	mov	r0, r4
 8012ce6:	47a8      	blx	r5
 8012ce8:	6823      	ldr	r3, [r4, #0]
 8012cea:	4620      	mov	r0, r4
 8012cec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012cf0:	4798      	blx	r3
 8012cf2:	2800      	cmp	r0, #0
 8012cf4:	d03b      	beq.n	8012d6e <_ZN8touchgfx10ScrollList16handleClickEventERKNS_10ClickEventE+0xc4>
 8012cf6:	f9b4 50b0 	ldrsh.w	r5, [r4, #176]	; 0xb0
 8012cfa:	6823      	ldr	r3, [r4, #0]
 8012cfc:	4620      	mov	r0, r4
 8012cfe:	f8d3 60c0 	ldr.w	r6, [r3, #192]	; 0xc0
 8012d02:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8012d06:	4798      	blx	r3
 8012d08:	1b41      	subs	r1, r0, r5
 8012d0a:	4620      	mov	r0, r4
 8012d0c:	47b0      	blx	r6
 8012d0e:	6823      	ldr	r3, [r4, #0]
 8012d10:	b285      	uxth	r5, r0
 8012d12:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8012d16:	4620      	mov	r0, r4
 8012d18:	4798      	blx	r3
 8012d1a:	f8b4 607c 	ldrh.w	r6, [r4, #124]	; 0x7c
 8012d1e:	6823      	ldr	r3, [r4, #0]
 8012d20:	fb16 f600 	smulbb	r6, r6, r0
 8012d24:	b2b6      	uxth	r6, r6
 8012d26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012d2a:	4620      	mov	r0, r4
 8012d2c:	b237      	sxth	r7, r6
 8012d2e:	4798      	blx	r3
 8012d30:	bb00      	cbnz	r0, 8012d74 <_ZN8touchgfx10ScrollList16handleClickEventERKNS_10ClickEventE+0xca>
 8012d32:	426d      	negs	r5, r5
 8012d34:	b22d      	sxth	r5, r5
 8012d36:	2d00      	cmp	r5, #0
 8012d38:	f2c0 808a 	blt.w	8012e50 <_ZN8touchgfx10ScrollList16handleClickEventERKNS_10ClickEventE+0x1a6>
 8012d3c:	42bd      	cmp	r5, r7
 8012d3e:	f280 8087 	bge.w	8012e50 <_ZN8touchgfx10ScrollList16handleClickEventERKNS_10ClickEventE+0x1a6>
 8012d42:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
 8012d46:	2800      	cmp	r0, #0
 8012d48:	f000 8082 	beq.w	8012e50 <_ZN8touchgfx10ScrollList16handleClickEventERKNS_10ClickEventE+0x1a6>
 8012d4c:	6803      	ldr	r3, [r0, #0]
 8012d4e:	f9b4 607c 	ldrsh.w	r6, [r4, #124]	; 0x7c
 8012d52:	68db      	ldr	r3, [r3, #12]
 8012d54:	4798      	blx	r3
 8012d56:	2800      	cmp	r0, #0
 8012d58:	d07a      	beq.n	8012e50 <_ZN8touchgfx10ScrollList16handleClickEventERKNS_10ClickEventE+0x1a6>
 8012d5a:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
 8012d5e:	6803      	ldr	r3, [r0, #0]
 8012d60:	fb95 f1f6 	sdiv	r1, r5, r6
 8012d64:	689b      	ldr	r3, [r3, #8]
 8012d66:	b209      	sxth	r1, r1
 8012d68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012d6c:	4718      	bx	r3
 8012d6e:	f9b4 50b2 	ldrsh.w	r5, [r4, #178]	; 0xb2
 8012d72:	e7c2      	b.n	8012cfa <_ZN8touchgfx10ScrollList16handleClickEventERKNS_10ClickEventE+0x50>
 8012d74:	1b75      	subs	r5, r6, r5
 8012d76:	b22e      	sxth	r6, r5
 8012d78:	fb96 f5f7 	sdiv	r5, r6, r7
 8012d7c:	fb07 6515 	mls	r5, r7, r5, r6
 8012d80:	e7d8      	b.n	8012d34 <_ZN8touchgfx10ScrollList16handleClickEventERKNS_10ClickEventE+0x8a>
 8012d82:	2b01      	cmp	r3, #1
 8012d84:	d164      	bne.n	8012e50 <_ZN8touchgfx10ScrollList16handleClickEventERKNS_10ClickEventE+0x1a6>
 8012d86:	f890 309c 	ldrb.w	r3, [r0, #156]	; 0x9c
 8012d8a:	2b00      	cmp	r3, #0
 8012d8c:	d14d      	bne.n	8012e2a <_ZN8touchgfx10ScrollList16handleClickEventERKNS_10ClickEventE+0x180>
 8012d8e:	6803      	ldr	r3, [r0, #0]
 8012d90:	f8d3 50b0 	ldr.w	r5, [r3, #176]	; 0xb0
 8012d94:	f8d3 60c0 	ldr.w	r6, [r3, #192]	; 0xc0
 8012d98:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8012d9c:	4798      	blx	r3
 8012d9e:	4601      	mov	r1, r0
 8012da0:	4620      	mov	r0, r4
 8012da2:	47b0      	blx	r6
 8012da4:	4601      	mov	r1, r0
 8012da6:	4620      	mov	r0, r4
 8012da8:	47a8      	blx	r5
 8012daa:	6823      	ldr	r3, [r4, #0]
 8012dac:	4620      	mov	r0, r4
 8012dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012db2:	4798      	blx	r3
 8012db4:	b378      	cbz	r0, 8012e16 <_ZN8touchgfx10ScrollList16handleClickEventERKNS_10ClickEventE+0x16c>
 8012db6:	f9b4 50b0 	ldrsh.w	r5, [r4, #176]	; 0xb0
 8012dba:	6823      	ldr	r3, [r4, #0]
 8012dbc:	4620      	mov	r0, r4
 8012dbe:	f8d3 60c0 	ldr.w	r6, [r3, #192]	; 0xc0
 8012dc2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8012dc6:	4798      	blx	r3
 8012dc8:	1b41      	subs	r1, r0, r5
 8012dca:	4620      	mov	r0, r4
 8012dcc:	47b0      	blx	r6
 8012dce:	6823      	ldr	r3, [r4, #0]
 8012dd0:	b285      	uxth	r5, r0
 8012dd2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8012dd6:	4620      	mov	r0, r4
 8012dd8:	4798      	blx	r3
 8012dda:	f8b4 607c 	ldrh.w	r6, [r4, #124]	; 0x7c
 8012dde:	6823      	ldr	r3, [r4, #0]
 8012de0:	fb16 f600 	smulbb	r6, r6, r0
 8012de4:	b2b6      	uxth	r6, r6
 8012de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012dea:	4620      	mov	r0, r4
 8012dec:	b237      	sxth	r7, r6
 8012dee:	4798      	blx	r3
 8012df0:	b9a0      	cbnz	r0, 8012e1c <_ZN8touchgfx10ScrollList16handleClickEventERKNS_10ClickEventE+0x172>
 8012df2:	426d      	negs	r5, r5
 8012df4:	b22d      	sxth	r5, r5
 8012df6:	2d00      	cmp	r5, #0
 8012df8:	db2a      	blt.n	8012e50 <_ZN8touchgfx10ScrollList16handleClickEventERKNS_10ClickEventE+0x1a6>
 8012dfa:	42bd      	cmp	r5, r7
 8012dfc:	da28      	bge.n	8012e50 <_ZN8touchgfx10ScrollList16handleClickEventERKNS_10ClickEventE+0x1a6>
 8012dfe:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8012e02:	b328      	cbz	r0, 8012e50 <_ZN8touchgfx10ScrollList16handleClickEventERKNS_10ClickEventE+0x1a6>
 8012e04:	6803      	ldr	r3, [r0, #0]
 8012e06:	f9b4 607c 	ldrsh.w	r6, [r4, #124]	; 0x7c
 8012e0a:	68db      	ldr	r3, [r3, #12]
 8012e0c:	4798      	blx	r3
 8012e0e:	b1f8      	cbz	r0, 8012e50 <_ZN8touchgfx10ScrollList16handleClickEventERKNS_10ClickEventE+0x1a6>
 8012e10:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8012e14:	e7a3      	b.n	8012d5e <_ZN8touchgfx10ScrollList16handleClickEventERKNS_10ClickEventE+0xb4>
 8012e16:	f9b4 50b2 	ldrsh.w	r5, [r4, #178]	; 0xb2
 8012e1a:	e7ce      	b.n	8012dba <_ZN8touchgfx10ScrollList16handleClickEventERKNS_10ClickEventE+0x110>
 8012e1c:	1b75      	subs	r5, r6, r5
 8012e1e:	b22e      	sxth	r6, r5
 8012e20:	fb96 f5f7 	sdiv	r5, r6, r7
 8012e24:	fb07 6515 	mls	r5, r7, r5, r6
 8012e28:	e7e4      	b.n	8012df4 <_ZN8touchgfx10ScrollList16handleClickEventERKNS_10ClickEventE+0x14a>
 8012e2a:	2b02      	cmp	r3, #2
 8012e2c:	d110      	bne.n	8012e50 <_ZN8touchgfx10ScrollList16handleClickEventERKNS_10ClickEventE+0x1a6>
 8012e2e:	6803      	ldr	r3, [r0, #0]
 8012e30:	e9d3 6530 	ldrd	r6, r5, [r3, #192]	; 0xc0
 8012e34:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8012e38:	4798      	blx	r3
 8012e3a:	4601      	mov	r1, r0
 8012e3c:	4620      	mov	r0, r4
 8012e3e:	47b0      	blx	r6
 8012e40:	462b      	mov	r3, r5
 8012e42:	4601      	mov	r1, r0
 8012e44:	f04f 32ff 	mov.w	r2, #4294967295
 8012e48:	4620      	mov	r0, r4
 8012e4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012e4e:	4718      	bx	r3
 8012e50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012e54 <_ZNK8touchgfx10ScrollList22keepOffsetInsideLimitsEls>:
 8012e54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e58:	6803      	ldr	r3, [r0, #0]
 8012e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012e5e:	4605      	mov	r5, r0
 8012e60:	460e      	mov	r6, r1
 8012e62:	4617      	mov	r7, r2
 8012e64:	4798      	blx	r3
 8012e66:	4604      	mov	r4, r0
 8012e68:	b9d8      	cbnz	r0, 8012ea2 <_ZNK8touchgfx10ScrollList22keepOffsetInsideLimitsEls+0x4e>
 8012e6a:	682b      	ldr	r3, [r5, #0]
 8012e6c:	f8d5 80c0 	ldr.w	r8, [r5, #192]	; 0xc0
 8012e70:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8012e74:	42be      	cmp	r6, r7
 8012e76:	4628      	mov	r0, r5
 8012e78:	bfa8      	it	ge
 8012e7a:	463e      	movge	r6, r7
 8012e7c:	4798      	blx	r3
 8012e7e:	4580      	cmp	r8, r0
 8012e80:	da07      	bge.n	8012e92 <_ZNK8touchgfx10ScrollList22keepOffsetInsideLimitsEls+0x3e>
 8012e82:	682b      	ldr	r3, [r5, #0]
 8012e84:	4628      	mov	r0, r5
 8012e86:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8012e8a:	4798      	blx	r3
 8012e8c:	f8d5 40c0 	ldr.w	r4, [r5, #192]	; 0xc0
 8012e90:	1b04      	subs	r4, r0, r4
 8012e92:	f9b5 107c 	ldrsh.w	r1, [r5, #124]	; 0x7c
 8012e96:	434c      	muls	r4, r1
 8012e98:	4264      	negs	r4, r4
 8012e9a:	1be1      	subs	r1, r4, r7
 8012e9c:	428e      	cmp	r6, r1
 8012e9e:	bfb8      	it	lt
 8012ea0:	460e      	movlt	r6, r1
 8012ea2:	4630      	mov	r0, r6
 8012ea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012ea8 <_ZN8touchgfx10ScrollList12setDrawablesERNS_26DrawableListItemsInterfaceERNS_15GenericCallbackIPS1_ssEE>:
 8012ea8:	b570      	push	{r4, r5, r6, lr}
 8012eaa:	460d      	mov	r5, r1
 8012eac:	4604      	mov	r4, r0
 8012eae:	4616      	mov	r6, r2
 8012eb0:	f000 fa1f 	bl	80132f2 <_ZN8touchgfx10ScrollBase13stopAnimationEv>
 8012eb4:	682b      	ldr	r3, [r5, #0]
 8012eb6:	4628      	mov	r0, r5
 8012eb8:	68db      	ldr	r3, [r3, #12]
 8012eba:	4798      	blx	r3
 8012ebc:	4633      	mov	r3, r6
 8012ebe:	f8a4 0078 	strh.w	r0, [r4, #120]	; 0x78
 8012ec2:	4629      	mov	r1, r5
 8012ec4:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8012ec8:	2200      	movs	r2, #0
 8012eca:	f7ff fec3 	bl	8012c54 <_ZN8touchgfx12DrawableList12setDrawablesERNS_26DrawableListItemsInterfaceEsRNS_15GenericCallbackIPS1_ssEE>
 8012ece:	6823      	ldr	r3, [r4, #0]
 8012ed0:	4620      	mov	r0, r4
 8012ed2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8012ed6:	2100      	movs	r1, #0
 8012ed8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012edc:	4718      	bx	r3

08012ede <_ZN8touchgfx10ScrollList18getPositionForItemEs>:
 8012ede:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012ee2:	6803      	ldr	r3, [r0, #0]
 8012ee4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8012ee8:	460f      	mov	r7, r1
 8012eea:	4604      	mov	r4, r0
 8012eec:	4798      	blx	r3
 8012eee:	4601      	mov	r1, r0
 8012ef0:	4620      	mov	r0, r4
 8012ef2:	f000 fa4b 	bl	801338c <_ZNK8touchgfx10ScrollBase19getNormalizedOffsetEi>
 8012ef6:	2f00      	cmp	r7, #0
 8012ef8:	4606      	mov	r6, r0
 8012efa:	db6b      	blt.n	8012fd4 <_ZN8touchgfx10ScrollList18getPositionForItemEs+0xf6>
 8012efc:	f104 092c 	add.w	r9, r4, #44	; 0x2c
 8012f00:	4648      	mov	r0, r9
 8012f02:	f7ff fce6 	bl	80128d2 <_ZNK8touchgfx12DrawableList16getNumberOfItemsEv>
 8012f06:	42b8      	cmp	r0, r7
 8012f08:	dd64      	ble.n	8012fd4 <_ZN8touchgfx10ScrollList18getPositionForItemEs+0xf6>
 8012f0a:	f9b4 507c 	ldrsh.w	r5, [r4, #124]	; 0x7c
 8012f0e:	2d00      	cmp	r5, #0
 8012f10:	d060      	beq.n	8012fd4 <_ZN8touchgfx10ScrollList18getPositionForItemEs+0xf6>
 8012f12:	6823      	ldr	r3, [r4, #0]
 8012f14:	4278      	negs	r0, r7
 8012f16:	4345      	muls	r5, r0
 8012f18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012f1c:	4620      	mov	r0, r4
 8012f1e:	4798      	blx	r3
 8012f20:	2800      	cmp	r0, #0
 8012f22:	d05a      	beq.n	8012fda <_ZN8touchgfx10ScrollList18getPositionForItemEs+0xfc>
 8012f24:	f9b4 8008 	ldrsh.w	r8, [r4, #8]
 8012f28:	f8b4 107a 	ldrh.w	r1, [r4, #122]	; 0x7a
 8012f2c:	f8b4 30ba 	ldrh.w	r3, [r4, #186]	; 0xba
 8012f30:	4419      	add	r1, r3
 8012f32:	eba8 0801 	sub.w	r8, r8, r1
 8012f36:	4648      	mov	r0, r9
 8012f38:	fa0f f888 	sxth.w	r8, r8
 8012f3c:	f7ff fc8f 	bl	801285e <_ZNK8touchgfx12DrawableList11getCircularEv>
 8012f40:	2800      	cmp	r0, #0
 8012f42:	d051      	beq.n	8012fe8 <_ZN8touchgfx10ScrollList18getPositionForItemEs+0x10a>
 8012f44:	46b2      	mov	sl, r6
 8012f46:	4651      	mov	r1, sl
 8012f48:	4620      	mov	r0, r4
 8012f4a:	f000 fa1f 	bl	801338c <_ZNK8touchgfx10ScrollBase19getNormalizedOffsetEi>
 8012f4e:	f9b4 307c 	ldrsh.w	r3, [r4, #124]	; 0x7c
 8012f52:	4240      	negs	r0, r0
 8012f54:	fb90 f0f3 	sdiv	r0, r0, r3
 8012f58:	b200      	sxth	r0, r0
 8012f5a:	4287      	cmp	r7, r0
 8012f5c:	d03a      	beq.n	8012fd4 <_ZN8touchgfx10ScrollList18getPositionForItemEs+0xf6>
 8012f5e:	ebaa 0a03 	sub.w	sl, sl, r3
 8012f62:	eba8 0303 	sub.w	r3, r8, r3
 8012f66:	1af3      	subs	r3, r6, r3
 8012f68:	4553      	cmp	r3, sl
 8012f6a:	ddec      	ble.n	8012f46 <_ZN8touchgfx10ScrollList18getPositionForItemEs+0x68>
 8012f6c:	4648      	mov	r0, r9
 8012f6e:	f7ff fcb0 	bl	80128d2 <_ZNK8touchgfx12DrawableList16getNumberOfItemsEv>
 8012f72:	f9b4 107c 	ldrsh.w	r1, [r4, #124]	; 0x7c
 8012f76:	fb00 f701 	mul.w	r7, r0, r1
 8012f7a:	eba8 0101 	sub.w	r1, r8, r1
 8012f7e:	1a71      	subs	r1, r6, r1
 8012f80:	4620      	mov	r0, r4
 8012f82:	f000 fa03 	bl	801338c <_ZNK8touchgfx10ScrollBase19getNormalizedOffsetEi>
 8012f86:	eb05 0a07 	add.w	sl, r5, r7
 8012f8a:	eba5 0906 	sub.w	r9, r5, r6
 8012f8e:	ebaa 0a06 	sub.w	sl, sl, r6
 8012f92:	1beb      	subs	r3, r5, r7
 8012f94:	ea89 72e9 	eor.w	r2, r9, r9, asr #31
 8012f98:	ea8a 71ea 	eor.w	r1, sl, sl, asr #31
 8012f9c:	1ac3      	subs	r3, r0, r3
 8012f9e:	eba2 72e9 	sub.w	r2, r2, r9, asr #31
 8012fa2:	eba1 71ea 	sub.w	r1, r1, sl, asr #31
 8012fa6:	4291      	cmp	r1, r2
 8012fa8:	bfb8      	it	lt
 8012faa:	46d1      	movlt	r9, sl
 8012fac:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8012fb0:	1b45      	subs	r5, r0, r5
 8012fb2:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8012fb6:	d52f      	bpl.n	8013018 <_ZN8touchgfx10ScrollList18getPositionForItemEs+0x13a>
 8012fb8:	4269      	negs	r1, r5
 8012fba:	4291      	cmp	r1, r2
 8012fbc:	dd10      	ble.n	8012fe0 <_ZN8touchgfx10ScrollList18getPositionForItemEs+0x102>
 8012fbe:	2b00      	cmp	r3, #0
 8012fc0:	da10      	bge.n	8012fe4 <_ZN8touchgfx10ScrollList18getPositionForItemEs+0x106>
 8012fc2:	425d      	negs	r5, r3
 8012fc4:	ea89 72e9 	eor.w	r2, r9, r9, asr #31
 8012fc8:	eba2 72e9 	sub.w	r2, r2, r9, asr #31
 8012fcc:	4295      	cmp	r5, r2
 8012fce:	bfb4      	ite	lt
 8012fd0:	1af6      	sublt	r6, r6, r3
 8012fd2:	444e      	addge	r6, r9
 8012fd4:	4630      	mov	r0, r6
 8012fd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012fda:	f9b4 800a 	ldrsh.w	r8, [r4, #10]
 8012fde:	e7a3      	b.n	8012f28 <_ZN8touchgfx10ScrollList18getPositionForItemEs+0x4a>
 8012fe0:	462b      	mov	r3, r5
 8012fe2:	e7ee      	b.n	8012fc2 <_ZN8touchgfx10ScrollList18getPositionForItemEs+0xe4>
 8012fe4:	461d      	mov	r5, r3
 8012fe6:	e7ed      	b.n	8012fc4 <_ZN8touchgfx10ScrollList18getPositionForItemEs+0xe6>
 8012fe8:	42ae      	cmp	r6, r5
 8012fea:	db13      	blt.n	8013014 <_ZN8touchgfx10ScrollList18getPositionForItemEs+0x136>
 8012fec:	f9b4 207c 	ldrsh.w	r2, [r4, #124]	; 0x7c
 8012ff0:	fb98 f3f2 	sdiv	r3, r8, r2
 8012ff4:	b21b      	sxth	r3, r3
 8012ff6:	2b00      	cmp	r3, #0
 8012ff8:	dd05      	ble.n	8013006 <_ZN8touchgfx10ScrollList18getPositionForItemEs+0x128>
 8012ffa:	f894 10bc 	ldrb.w	r1, [r4, #188]	; 0xbc
 8012ffe:	b131      	cbz	r1, 801300e <_ZN8touchgfx10ScrollList18getPositionForItemEs+0x130>
 8013000:	3b01      	subs	r3, #1
 8013002:	fb02 5503 	mla	r5, r2, r3, r5
 8013006:	42ae      	cmp	r6, r5
 8013008:	bfa8      	it	ge
 801300a:	462e      	movge	r6, r5
 801300c:	e7e2      	b.n	8012fd4 <_ZN8touchgfx10ScrollList18getPositionForItemEs+0xf6>
 801300e:	4445      	add	r5, r8
 8013010:	1aad      	subs	r5, r5, r2
 8013012:	e7f8      	b.n	8013006 <_ZN8touchgfx10ScrollList18getPositionForItemEs+0x128>
 8013014:	462e      	mov	r6, r5
 8013016:	e7dd      	b.n	8012fd4 <_ZN8touchgfx10ScrollList18getPositionForItemEs+0xf6>
 8013018:	4295      	cmp	r5, r2
 801301a:	dcd0      	bgt.n	8012fbe <_ZN8touchgfx10ScrollList18getPositionForItemEs+0xe0>
 801301c:	462b      	mov	r3, r5
 801301e:	e7d1      	b.n	8012fc4 <_ZN8touchgfx10ScrollList18getPositionForItemEs+0xe6>

08013020 <_ZNK8touchgfx10ScrollList23getNearestAlignedOffsetEl>:
 8013020:	b570      	push	{r4, r5, r6, lr}
 8013022:	f890 30bc 	ldrb.w	r3, [r0, #188]	; 0xbc
 8013026:	4604      	mov	r4, r0
 8013028:	460d      	mov	r5, r1
 801302a:	b11b      	cbz	r3, 8013034 <_ZNK8touchgfx10ScrollList23getNearestAlignedOffsetEl+0x14>
 801302c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013030:	f000 b87b 	b.w	801312a <_ZNK8touchgfx10ScrollBase23getNearestAlignedOffsetEl>
 8013034:	6803      	ldr	r3, [r0, #0]
 8013036:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801303a:	4798      	blx	r3
 801303c:	4602      	mov	r2, r0
 801303e:	b938      	cbnz	r0, 8013050 <_ZNK8touchgfx10ScrollList23getNearestAlignedOffsetEl+0x30>
 8013040:	6823      	ldr	r3, [r4, #0]
 8013042:	4629      	mov	r1, r5
 8013044:	4620      	mov	r0, r4
 8013046:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 801304a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801304e:	4718      	bx	r3
 8013050:	4628      	mov	r0, r5
 8013052:	bd70      	pop	{r4, r5, r6, pc}

08013054 <_ZN8touchgfx10ScrollListC1Ev>:
 8013054:	b510      	push	{r4, lr}
 8013056:	4604      	mov	r4, r0
 8013058:	f000 f9fc 	bl	8013454 <_ZN8touchgfx10ScrollBaseC1Ev>
 801305c:	4b05      	ldr	r3, [pc, #20]	; (8013074 <_ZN8touchgfx10ScrollListC1Ev+0x20>)
 801305e:	6023      	str	r3, [r4, #0]
 8013060:	2300      	movs	r3, #0
 8013062:	f8a4 30ba 	strh.w	r3, [r4, #186]	; 0xba
 8013066:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
 801306a:	2301      	movs	r3, #1
 801306c:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
 8013070:	4620      	mov	r0, r4
 8013072:	bd10      	pop	{r4, pc}
 8013074:	08025304 	.word	0x08025304

08013078 <_ZN8touchgfx10ScrollList10setPaddingEss>:
 8013078:	b570      	push	{r4, r5, r6, lr}
 801307a:	6803      	ldr	r3, [r0, #0]
 801307c:	4604      	mov	r4, r0
 801307e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8013082:	460e      	mov	r6, r1
 8013084:	4615      	mov	r5, r2
 8013086:	4798      	blx	r3
 8013088:	6823      	ldr	r3, [r4, #0]
 801308a:	f8a4 607a 	strh.w	r6, [r4, #122]	; 0x7a
 801308e:	f8a4 50ba 	strh.w	r5, [r4, #186]	; 0xba
 8013092:	b201      	sxth	r1, r0
 8013094:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8013098:	4620      	mov	r0, r4
 801309a:	4798      	blx	r3
 801309c:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 80130a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80130a4:	f7ff bd74 	b.w	8012b90 <_ZN8touchgfx12DrawableList16refreshDrawablesEv>

080130a8 <_ZN8touchgfx10ScrollList11setSnappingEb>:
 80130a8:	b570      	push	{r4, r5, r6, lr}
 80130aa:	4604      	mov	r4, r0
 80130ac:	f880 10bc 	strb.w	r1, [r0, #188]	; 0xbc
 80130b0:	b181      	cbz	r1, 80130d4 <_ZN8touchgfx10ScrollList11setSnappingEb+0x2c>
 80130b2:	6803      	ldr	r3, [r0, #0]
 80130b4:	f8d3 50b0 	ldr.w	r5, [r3, #176]	; 0xb0
 80130b8:	f8d3 60c0 	ldr.w	r6, [r3, #192]	; 0xc0
 80130bc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80130c0:	4798      	blx	r3
 80130c2:	4601      	mov	r1, r0
 80130c4:	4620      	mov	r0, r4
 80130c6:	47b0      	blx	r6
 80130c8:	462b      	mov	r3, r5
 80130ca:	4601      	mov	r1, r0
 80130cc:	4620      	mov	r0, r4
 80130ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80130d2:	4718      	bx	r3
 80130d4:	bd70      	pop	{r4, r5, r6, pc}

080130d6 <_ZN8touchgfx10ScrollBase13animateToItemEss>:
 80130d6:	b570      	push	{r4, r5, r6, lr}
 80130d8:	6803      	ldr	r3, [r0, #0]
 80130da:	4604      	mov	r4, r0
 80130dc:	4615      	mov	r5, r2
 80130de:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80130e2:	4798      	blx	r3
 80130e4:	2d00      	cmp	r5, #0
 80130e6:	6823      	ldr	r3, [r4, #0]
 80130e8:	bfb8      	it	lt
 80130ea:	f9b4 5088 	ldrshlt.w	r5, [r4, #136]	; 0x88
 80130ee:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80130f2:	4601      	mov	r1, r0
 80130f4:	462a      	mov	r2, r5
 80130f6:	4620      	mov	r0, r4
 80130f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80130fc:	4718      	bx	r3

080130fe <_ZNK8touchgfx10ScrollBase16getNumberOfItemsEv>:
 80130fe:	302c      	adds	r0, #44	; 0x2c
 8013100:	f7ff bbe7 	b.w	80128d2 <_ZNK8touchgfx12DrawableList16getNumberOfItemsEv>

08013104 <_ZN8touchgfx10ScrollBase11itemChangedEi>:
 8013104:	b209      	sxth	r1, r1
 8013106:	302c      	adds	r0, #44	; 0x2c
 8013108:	f7ff bdb0 	b.w	8012c6c <_ZN8touchgfx12DrawableList11itemChangedEs>

0801310c <_ZN8touchgfx10ScrollBase9setOffsetEl>:
 801310c:	f9b0 307a 	ldrsh.w	r3, [r0, #122]	; 0x7a
 8013110:	302c      	adds	r0, #44	; 0x2c
 8013112:	4419      	add	r1, r3
 8013114:	f7ff bc0c 	b.w	8012930 <_ZN8touchgfx12DrawableList9setOffsetEl>

08013118 <_ZNK8touchgfx10ScrollBase9getOffsetEv>:
 8013118:	b510      	push	{r4, lr}
 801311a:	4604      	mov	r4, r0
 801311c:	302c      	adds	r0, #44	; 0x2c
 801311e:	f7ff fcff 	bl	8012b20 <_ZNK8touchgfx12DrawableList9getOffsetEv>
 8013122:	f9b4 307a 	ldrsh.w	r3, [r4, #122]	; 0x7a
 8013126:	1ac0      	subs	r0, r0, r3
 8013128:	bd10      	pop	{r4, pc}

0801312a <_ZNK8touchgfx10ScrollBase23getNearestAlignedOffsetEl>:
 801312a:	b538      	push	{r3, r4, r5, lr}
 801312c:	f9b0 307c 	ldrsh.w	r3, [r0, #124]	; 0x7c
 8013130:	4605      	mov	r5, r0
 8013132:	460c      	mov	r4, r1
 8013134:	b193      	cbz	r3, 801315c <_ZNK8touchgfx10ScrollBase23getNearestAlignedOffsetEl+0x32>
 8013136:	6803      	ldr	r3, [r0, #0]
 8013138:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801313c:	4798      	blx	r3
 801313e:	4602      	mov	r2, r0
 8013140:	b170      	cbz	r0, 8013160 <_ZNK8touchgfx10ScrollBase23getNearestAlignedOffsetEl+0x36>
 8013142:	f9b5 307c 	ldrsh.w	r3, [r5, #124]	; 0x7c
 8013146:	2c00      	cmp	r4, #0
 8013148:	f04f 0102 	mov.w	r1, #2
 801314c:	fb93 f1f1 	sdiv	r1, r3, r1
 8013150:	bfb4      	ite	lt
 8013152:	1a64      	sublt	r4, r4, r1
 8013154:	1864      	addge	r4, r4, r1
 8013156:	fb94 f4f3 	sdiv	r4, r4, r3
 801315a:	435c      	muls	r4, r3
 801315c:	4620      	mov	r0, r4
 801315e:	bd38      	pop	{r3, r4, r5, pc}
 8013160:	682b      	ldr	r3, [r5, #0]
 8013162:	4621      	mov	r1, r4
 8013164:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8013168:	4628      	mov	r0, r5
 801316a:	4798      	blx	r3
 801316c:	f9b5 407c 	ldrsh.w	r4, [r5, #124]	; 0x7c
 8013170:	2302      	movs	r3, #2
 8013172:	fb94 f3f3 	sdiv	r3, r4, r3
 8013176:	1ac0      	subs	r0, r0, r3
 8013178:	fb90 f0f4 	sdiv	r0, r0, r4
 801317c:	4344      	muls	r4, r0
 801317e:	e7ed      	b.n	801315c <_ZNK8touchgfx10ScrollBase23getNearestAlignedOffsetEl+0x32>

08013180 <_ZN8touchgfx10ScrollBase16setNumberOfItemsEs>:
 8013180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013184:	6803      	ldr	r3, [r0, #0]
 8013186:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801318a:	460d      	mov	r5, r1
 801318c:	4604      	mov	r4, r0
 801318e:	4798      	blx	r3
 8013190:	42a8      	cmp	r0, r5
 8013192:	d020      	beq.n	80131d6 <_ZN8touchgfx10ScrollBase16setNumberOfItemsEs+0x56>
 8013194:	4629      	mov	r1, r5
 8013196:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 801319a:	f7ff fd64 	bl	8012c66 <_ZN8touchgfx12DrawableList16setNumberOfItemsEs>
 801319e:	6823      	ldr	r3, [r4, #0]
 80131a0:	4620      	mov	r0, r4
 80131a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80131a6:	4798      	blx	r3
 80131a8:	4605      	mov	r5, r0
 80131aa:	b9a0      	cbnz	r0, 80131d6 <_ZN8touchgfx10ScrollBase16setNumberOfItemsEs+0x56>
 80131ac:	6823      	ldr	r3, [r4, #0]
 80131ae:	4620      	mov	r0, r4
 80131b0:	f8d3 60c4 	ldr.w	r6, [r3, #196]	; 0xc4
 80131b4:	f8d3 70bc 	ldr.w	r7, [r3, #188]	; 0xbc
 80131b8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80131bc:	4798      	blx	r3
 80131be:	462a      	mov	r2, r5
 80131c0:	4601      	mov	r1, r0
 80131c2:	4620      	mov	r0, r4
 80131c4:	47b8      	blx	r7
 80131c6:	4633      	mov	r3, r6
 80131c8:	4601      	mov	r1, r0
 80131ca:	f04f 32ff 	mov.w	r2, #4294967295
 80131ce:	4620      	mov	r0, r4
 80131d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80131d4:	4718      	bx	r3
 80131d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080131da <_ZN8touchgfx10ScrollBase17animateToPositionEls>:
 80131da:	b570      	push	{r4, r5, r6, lr}
 80131dc:	6803      	ldr	r3, [r0, #0]
 80131de:	4615      	mov	r5, r2
 80131e0:	4604      	mov	r4, r0
 80131e2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80131e6:	4798      	blx	r3
 80131e8:	2d00      	cmp	r5, #0
 80131ea:	bfb8      	it	lt
 80131ec:	f9b4 5088 	ldrshlt.w	r5, [r4, #136]	; 0x88
 80131f0:	6823      	ldr	r3, [r4, #0]
 80131f2:	2d00      	cmp	r5, #0
 80131f4:	4606      	mov	r6, r0
 80131f6:	dc06      	bgt.n	8013206 <_ZN8touchgfx10ScrollBase17animateToPositionEls+0x2c>
 80131f8:	4601      	mov	r1, r0
 80131fa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80131fe:	4620      	mov	r0, r4
 8013200:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013204:	4718      	bx	r3
 8013206:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801320a:	4620      	mov	r0, r4
 801320c:	4798      	blx	r3
 801320e:	2300      	movs	r3, #0
 8013210:	e9c4 3528 	strd	r3, r5, [r4, #160]	; 0xa0
 8013214:	f894 309c 	ldrb.w	r3, [r4, #156]	; 0x9c
 8013218:	2b01      	cmp	r3, #1
 801321a:	e9c4 062a 	strd	r0, r6, [r4, #168]	; 0xa8
 801321e:	d007      	beq.n	8013230 <_ZN8touchgfx10ScrollBase17animateToPositionEls+0x56>
 8013220:	f003 fba8 	bl	8016974 <_ZN8touchgfx11Application11getInstanceEv>
 8013224:	4621      	mov	r1, r4
 8013226:	f003 fbab 	bl	8016980 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>
 801322a:	2301      	movs	r3, #1
 801322c:	f884 309c 	strb.w	r3, [r4, #156]	; 0x9c
 8013230:	bd70      	pop	{r4, r5, r6, pc}

08013232 <_ZN8touchgfx10ScrollBase18handleGestureEventERKNS_12GestureEventE>:
 8013232:	b570      	push	{r4, r5, r6, lr}
 8013234:	6803      	ldr	r3, [r0, #0]
 8013236:	790e      	ldrb	r6, [r1, #4]
 8013238:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801323c:	4605      	mov	r5, r0
 801323e:	460c      	mov	r4, r1
 8013240:	4798      	blx	r3
 8013242:	f080 0001 	eor.w	r0, r0, #1
 8013246:	b2c0      	uxtb	r0, r0
 8013248:	42b0      	cmp	r0, r6
 801324a:	d141      	bne.n	80132d0 <_ZN8touchgfx10ScrollBase18handleGestureEventERKNS_12GestureEventE+0x9e>
 801324c:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8013250:	2b00      	cmp	r3, #0
 8013252:	bfbd      	ittte	lt
 8013254:	425b      	neglt	r3, r3
 8013256:	b21b      	sxthlt	r3, r3
 8013258:	f04f 36ff 	movlt.w	r6, #4294967295
 801325c:	2601      	movge	r6, #1
 801325e:	2b04      	cmp	r3, #4
 8013260:	bfc2      	ittt	gt
 8013262:	3b04      	subgt	r3, #4
 8013264:	ebc3 03c3 	rsbgt	r3, r3, r3, lsl #3
 8013268:	b21c      	sxthgt	r4, r3
 801326a:	682b      	ldr	r3, [r5, #0]
 801326c:	4628      	mov	r0, r5
 801326e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8013272:	bfd8      	it	le
 8013274:	2407      	movle	r4, #7
 8013276:	4798      	blx	r3
 8013278:	f8b5 107e 	ldrh.w	r1, [r5, #126]	; 0x7e
 801327c:	4366      	muls	r6, r4
 801327e:	230a      	movs	r3, #10
 8013280:	4371      	muls	r1, r6
 8013282:	fb91 f1f3 	sdiv	r1, r1, r3
 8013286:	f8b5 3082 	ldrh.w	r3, [r5, #130]	; 0x82
 801328a:	4401      	add	r1, r0
 801328c:	b163      	cbz	r3, 80132a8 <_ZN8touchgfx10ScrollBase18handleGestureEventERKNS_12GestureEventE+0x76>
 801328e:	f9b5 007c 	ldrsh.w	r0, [r5, #124]	; 0x7c
 8013292:	f8d5 20b4 	ldr.w	r2, [r5, #180]	; 0xb4
 8013296:	4343      	muls	r3, r0
 8013298:	18d0      	adds	r0, r2, r3
 801329a:	4281      	cmp	r1, r0
 801329c:	bfa8      	it	ge
 801329e:	4601      	movge	r1, r0
 80132a0:	1ad0      	subs	r0, r2, r3
 80132a2:	4281      	cmp	r1, r0
 80132a4:	bfb8      	it	lt
 80132a6:	4601      	movlt	r1, r0
 80132a8:	682b      	ldr	r3, [r5, #0]
 80132aa:	2200      	movs	r2, #0
 80132ac:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80132b0:	4628      	mov	r0, r5
 80132b2:	4798      	blx	r3
 80132b4:	f8b5 2088 	ldrh.w	r2, [r5, #136]	; 0x88
 80132b8:	682b      	ldr	r3, [r5, #0]
 80132ba:	42a2      	cmp	r2, r4
 80132bc:	bfa8      	it	ge
 80132be:	4622      	movge	r2, r4
 80132c0:	4601      	mov	r1, r0
 80132c2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80132c6:	4628      	mov	r0, r5
 80132c8:	b212      	sxth	r2, r2
 80132ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80132ce:	4718      	bx	r3
 80132d0:	bd70      	pop	{r4, r5, r6, pc}

080132d2 <_ZN8touchgfx10ScrollBase15setDrawableSizeEss>:
 80132d2:	eb01 0342 	add.w	r3, r1, r2, lsl #1
 80132d6:	f8a0 307c 	strh.w	r3, [r0, #124]	; 0x7c
 80132da:	302c      	adds	r0, #44	; 0x2c
 80132dc:	f7ff baf4 	b.w	80128c8 <_ZN8touchgfx12DrawableList15setDrawableSizeEss>

080132e0 <_ZN8touchgfx10ScrollBase17setEasingEquationEPFstsstE>:
 80132e0:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
 80132e4:	4770      	bx	lr

080132e6 <_ZN8touchgfx10ScrollBase20setSwipeAccelerationEt>:
 80132e6:	f8a0 107e 	strh.w	r1, [r0, #126]	; 0x7e
 80132ea:	4770      	bx	lr

080132ec <_ZN8touchgfx10ScrollBase19setDragAccelerationEt>:
 80132ec:	f8a0 1080 	strh.w	r1, [r0, #128]	; 0x80
 80132f0:	4770      	bx	lr

080132f2 <_ZN8touchgfx10ScrollBase13stopAnimationEv>:
 80132f2:	b510      	push	{r4, lr}
 80132f4:	f890 309c 	ldrb.w	r3, [r0, #156]	; 0x9c
 80132f8:	2b01      	cmp	r3, #1
 80132fa:	4604      	mov	r4, r0
 80132fc:	d10b      	bne.n	8013316 <_ZN8touchgfx10ScrollBase13stopAnimationEv+0x24>
 80132fe:	f003 fb39 	bl	8016974 <_ZN8touchgfx11Application11getInstanceEv>
 8013302:	4621      	mov	r1, r4
 8013304:	f003 fb6e 	bl	80169e4 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>
 8013308:	6823      	ldr	r3, [r4, #0]
 801330a:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 801330e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8013312:	4620      	mov	r0, r4
 8013314:	4798      	blx	r3
 8013316:	2300      	movs	r3, #0
 8013318:	f884 309c 	strb.w	r3, [r4, #156]	; 0x9c
 801331c:	bd10      	pop	{r4, pc}

0801331e <_ZN8touchgfx10ScrollBase15handleDragEventERKNS_9DragEventE>:
 801331e:	b570      	push	{r4, r5, r6, lr}
 8013320:	4604      	mov	r4, r0
 8013322:	460e      	mov	r6, r1
 8013324:	f7ff ffe5 	bl	80132f2 <_ZN8touchgfx10ScrollBase13stopAnimationEv>
 8013328:	2302      	movs	r3, #2
 801332a:	f884 309c 	strb.w	r3, [r4, #156]	; 0x9c
 801332e:	6823      	ldr	r3, [r4, #0]
 8013330:	4620      	mov	r0, r4
 8013332:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8013336:	4798      	blx	r3
 8013338:	6823      	ldr	r3, [r4, #0]
 801333a:	4605      	mov	r5, r0
 801333c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013340:	4620      	mov	r0, r4
 8013342:	4798      	blx	r3
 8013344:	b1f8      	cbz	r0, 8013386 <_ZN8touchgfx10ScrollBase15handleDragEventERKNS_9DragEventE+0x68>
 8013346:	8973      	ldrh	r3, [r6, #10]
 8013348:	88f1      	ldrh	r1, [r6, #6]
 801334a:	f9b4 207c 	ldrsh.w	r2, [r4, #124]	; 0x7c
 801334e:	1a5b      	subs	r3, r3, r1
 8013350:	f8b4 1080 	ldrh.w	r1, [r4, #128]	; 0x80
 8013354:	b21b      	sxth	r3, r3
 8013356:	434b      	muls	r3, r1
 8013358:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801335c:	210a      	movs	r1, #10
 801335e:	fb93 f3f1 	sdiv	r3, r3, r1
 8013362:	2104      	movs	r1, #4
 8013364:	fb92 f2f1 	sdiv	r2, r2, r1
 8013368:	6821      	ldr	r1, [r4, #0]
 801336a:	4620      	mov	r0, r4
 801336c:	f8d1 60bc 	ldr.w	r6, [r1, #188]	; 0xbc
 8013370:	b212      	sxth	r2, r2
 8013372:	1959      	adds	r1, r3, r5
 8013374:	47b0      	blx	r6
 8013376:	6823      	ldr	r3, [r4, #0]
 8013378:	4601      	mov	r1, r0
 801337a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801337e:	4620      	mov	r0, r4
 8013380:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013384:	4718      	bx	r3
 8013386:	89b3      	ldrh	r3, [r6, #12]
 8013388:	8931      	ldrh	r1, [r6, #8]
 801338a:	e7de      	b.n	801334a <_ZN8touchgfx10ScrollBase15handleDragEventERKNS_9DragEventE+0x2c>

0801338c <_ZNK8touchgfx10ScrollBase19getNormalizedOffsetEi>:
 801338c:	b538      	push	{r3, r4, r5, lr}
 801338e:	6803      	ldr	r3, [r0, #0]
 8013390:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8013394:	4605      	mov	r5, r0
 8013396:	460c      	mov	r4, r1
 8013398:	4798      	blx	r3
 801339a:	b150      	cbz	r0, 80133b2 <_ZNK8touchgfx10ScrollBase19getNormalizedOffsetEi+0x26>
 801339c:	f9b5 307c 	ldrsh.w	r3, [r5, #124]	; 0x7c
 80133a0:	b13b      	cbz	r3, 80133b2 <_ZNK8touchgfx10ScrollBase19getNormalizedOffsetEi+0x26>
 80133a2:	4358      	muls	r0, r3
 80133a4:	fb94 f3f0 	sdiv	r3, r4, r0
 80133a8:	fb00 4413 	mls	r4, r0, r3, r4
 80133ac:	2c00      	cmp	r4, #0
 80133ae:	bfc8      	it	gt
 80133b0:	1a24      	subgt	r4, r4, r0
 80133b2:	4620      	mov	r0, r4
 80133b4:	bd38      	pop	{r3, r4, r5, pc}

080133b6 <_ZN8touchgfx10ScrollBase15handleTickEventEv>:
 80133b6:	b570      	push	{r4, r5, r6, lr}
 80133b8:	f890 309c 	ldrb.w	r3, [r0, #156]	; 0x9c
 80133bc:	2b01      	cmp	r3, #1
 80133be:	4604      	mov	r4, r0
 80133c0:	d13d      	bne.n	801343e <_ZN8touchgfx10ScrollBase15handleTickEventEv+0x88>
 80133c2:	e9d4 622a 	ldrd	r6, r2, [r4, #168]	; 0xa8
 80133c6:	f8d0 00a0 	ldr.w	r0, [r0, #160]	; 0xa0
 80133ca:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 80133ce:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
 80133d2:	3001      	adds	r0, #1
 80133d4:	1b92      	subs	r2, r2, r6
 80133d6:	b212      	sxth	r2, r2
 80133d8:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
 80133dc:	2100      	movs	r1, #0
 80133de:	b280      	uxth	r0, r0
 80133e0:	47a8      	blx	r5
 80133e2:	6823      	ldr	r3, [r4, #0]
 80133e4:	1981      	adds	r1, r0, r6
 80133e6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80133ea:	4620      	mov	r0, r4
 80133ec:	4798      	blx	r3
 80133ee:	e9d4 2328 	ldrd	r2, r3, [r4, #160]	; 0xa0
 80133f2:	429a      	cmp	r2, r3
 80133f4:	dd23      	ble.n	801343e <_ZN8touchgfx10ScrollBase15handleTickEventEv+0x88>
 80133f6:	2300      	movs	r3, #0
 80133f8:	f884 309c 	strb.w	r3, [r4, #156]	; 0x9c
 80133fc:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
 8013400:	f003 fab8 	bl	8016974 <_ZN8touchgfx11Application11getInstanceEv>
 8013404:	4621      	mov	r1, r4
 8013406:	f003 faed 	bl	80169e4 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>
 801340a:	6823      	ldr	r3, [r4, #0]
 801340c:	4620      	mov	r0, r4
 801340e:	e9d3 532c 	ldrd	r5, r3, [r3, #176]	; 0xb0
 8013412:	4798      	blx	r3
 8013414:	4601      	mov	r1, r0
 8013416:	4620      	mov	r0, r4
 8013418:	f7ff ffb8 	bl	801338c <_ZNK8touchgfx10ScrollBase19getNormalizedOffsetEi>
 801341c:	4601      	mov	r1, r0
 801341e:	4620      	mov	r0, r4
 8013420:	47a8      	blx	r5
 8013422:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 8013426:	b150      	cbz	r0, 801343e <_ZN8touchgfx10ScrollBase15handleTickEventEv+0x88>
 8013428:	6803      	ldr	r3, [r0, #0]
 801342a:	68db      	ldr	r3, [r3, #12]
 801342c:	4798      	blx	r3
 801342e:	b130      	cbz	r0, 801343e <_ZN8touchgfx10ScrollBase15handleTickEventEv+0x88>
 8013430:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 8013434:	6803      	ldr	r3, [r0, #0]
 8013436:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801343a:	689b      	ldr	r3, [r3, #8]
 801343c:	4718      	bx	r3
 801343e:	bd70      	pop	{r4, r5, r6, pc}

08013440 <_ZN8touchgfx10ScrollBase13setHorizontalEb>:
 8013440:	f081 0301 	eor.w	r3, r1, #1
 8013444:	f880 10b9 	strb.w	r1, [r0, #185]	; 0xb9
 8013448:	f880 30b8 	strb.w	r3, [r0, #184]	; 0xb8
 801344c:	302c      	adds	r0, #44	; 0x2c
 801344e:	f7ff bbeb 	b.w	8012c28 <_ZN8touchgfx12DrawableList13setHorizontalEb>
	...

08013454 <_ZN8touchgfx10ScrollBaseC1Ev>:
 8013454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013456:	4606      	mov	r6, r0
 8013458:	2500      	movs	r5, #0
 801345a:	2701      	movs	r7, #1
 801345c:	4b23      	ldr	r3, [pc, #140]	; (80134ec <_ZN8touchgfx10ScrollBaseC1Ev+0x98>)
 801345e:	8085      	strh	r5, [r0, #4]
 8013460:	80c5      	strh	r5, [r0, #6]
 8013462:	8105      	strh	r5, [r0, #8]
 8013464:	8145      	strh	r5, [r0, #10]
 8013466:	8185      	strh	r5, [r0, #12]
 8013468:	81c5      	strh	r5, [r0, #14]
 801346a:	8205      	strh	r5, [r0, #16]
 801346c:	8245      	strh	r5, [r0, #18]
 801346e:	e9c0 5505 	strd	r5, r5, [r0, #20]
 8013472:	61c5      	str	r5, [r0, #28]
 8013474:	f880 5024 	strb.w	r5, [r0, #36]	; 0x24
 8013478:	f880 7025 	strb.w	r7, [r0, #37]	; 0x25
 801347c:	6285      	str	r5, [r0, #40]	; 0x28
 801347e:	f846 3b2c 	str.w	r3, [r6], #44
 8013482:	4604      	mov	r4, r0
 8013484:	4630      	mov	r0, r6
 8013486:	f7ff f9f9 	bl	801287c <_ZN8touchgfx12DrawableListC1Ev>
 801348a:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 801348e:	230a      	movs	r3, #10
 8013490:	e9c4 231f 	strd	r2, r3, [r4, #124]	; 0x7c
 8013494:	4b16      	ldr	r3, [pc, #88]	; (80134f0 <_ZN8touchgfx10ScrollBaseC1Ev+0x9c>)
 8013496:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 801349a:	231e      	movs	r3, #30
 801349c:	f8a4 3088 	strh.w	r3, [r4, #136]	; 0x88
 80134a0:	4631      	mov	r1, r6
 80134a2:	4620      	mov	r0, r4
 80134a4:	67a5      	str	r5, [r4, #120]	; 0x78
 80134a6:	e9c4 5523 	strd	r5, r5, [r4, #140]	; 0x8c
 80134aa:	e9c4 5525 	strd	r5, r5, [r4, #148]	; 0x94
 80134ae:	f884 509c 	strb.w	r5, [r4, #156]	; 0x9c
 80134b2:	e9c4 5528 	strd	r5, r5, [r4, #160]	; 0xa0
 80134b6:	e9c4 552a 	strd	r5, r5, [r4, #168]	; 0xa8
 80134ba:	e9c4 552c 	strd	r5, r5, [r4, #176]	; 0xb0
 80134be:	f884 50b8 	strb.w	r5, [r4, #184]	; 0xb8
 80134c2:	f884 50b9 	strb.w	r5, [r4, #185]	; 0xb9
 80134c6:	f000 f8c3 	bl	8013650 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80134ca:	462a      	mov	r2, r5
 80134cc:	4629      	mov	r1, r5
 80134ce:	4630      	mov	r0, r6
 80134d0:	f7f1 f84f 	bl	8004572 <_ZN8touchgfx8Drawable5setXYEss>
 80134d4:	4629      	mov	r1, r5
 80134d6:	4630      	mov	r0, r6
 80134d8:	f7ff fba6 	bl	8012c28 <_ZN8touchgfx12DrawableList13setHorizontalEb>
 80134dc:	4630      	mov	r0, r6
 80134de:	4629      	mov	r1, r5
 80134e0:	f7ff fbad 	bl	8012c3e <_ZN8touchgfx12DrawableList11setCircularEb>
 80134e4:	f884 7024 	strb.w	r7, [r4, #36]	; 0x24
 80134e8:	4620      	mov	r0, r4
 80134ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80134ec:	080253d8 	.word	0x080253d8
 80134f0:	08017c45 	.word	0x08017c45

080134f4 <_ZN8touchgfx10ScrollBase11setCircularEb>:
 80134f4:	302c      	adds	r0, #44	; 0x2c
 80134f6:	f7ff bba2 	b.w	8012c3e <_ZN8touchgfx12DrawableList11setCircularEb>

080134fa <_ZN8touchgfx10ScrollBase8setWidthEs>:
 80134fa:	8101      	strh	r1, [r0, #8]
 80134fc:	302c      	adds	r0, #44	; 0x2c
 80134fe:	f7ff bb8d 	b.w	8012c1c <_ZN8touchgfx12DrawableList8setWidthEs>

08013502 <_ZN8touchgfx10ScrollBase9setHeightEs>:
 8013502:	8141      	strh	r1, [r0, #10]
 8013504:	302c      	adds	r0, #44	; 0x2c
 8013506:	f7ff bb8c 	b.w	8012c22 <_ZN8touchgfx12DrawableList9setHeightEs>

0801350a <_ZNK8touchgfx10ScrollBase13getHorizontalEv>:
 801350a:	302c      	adds	r0, #44	; 0x2c
 801350c:	f7ff b9a4 	b.w	8012858 <_ZNK8touchgfx12DrawableList13getHorizontalEv>

08013510 <_ZNK8touchgfx10ScrollBase11getCircularEv>:
 8013510:	302c      	adds	r0, #44	; 0x2c
 8013512:	f7ff b9a4 	b.w	801285e <_ZNK8touchgfx12DrawableList11getCircularEv>

08013516 <_ZNK8touchgfx10ScrollBase15getDrawableSizeEv>:
 8013516:	302c      	adds	r0, #44	; 0x2c
 8013518:	f7ff b9a7 	b.w	801286a <_ZNK8touchgfx12DrawableList15getDrawableSizeEv>

0801351c <_ZNK8touchgfx10ScrollBase17getDrawableMarginEv>:
 801351c:	302c      	adds	r0, #44	; 0x2c
 801351e:	f7ff b9aa 	b.w	8012876 <_ZNK8touchgfx12DrawableList17getDrawableMarginEv>

08013522 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 8013522:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8013524:	2000      	movs	r0, #0
 8013526:	b12b      	cbz	r3, 8013534 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8013528:	b920      	cbnz	r0, 8013534 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 801352a:	1a5a      	subs	r2, r3, r1
 801352c:	4250      	negs	r0, r2
 801352e:	4150      	adcs	r0, r2
 8013530:	699b      	ldr	r3, [r3, #24]
 8013532:	e7f8      	b.n	8013526 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 8013534:	4770      	bx	lr

08013536 <_ZN8touchgfx9Container9removeAllEv>:
 8013536:	2200      	movs	r2, #0
 8013538:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801353a:	b123      	cbz	r3, 8013546 <_ZN8touchgfx9Container9removeAllEv+0x10>
 801353c:	6999      	ldr	r1, [r3, #24]
 801353e:	6281      	str	r1, [r0, #40]	; 0x28
 8013540:	e9c3 2205 	strd	r2, r2, [r3, #20]
 8013544:	e7f8      	b.n	8013538 <_ZN8touchgfx9Container9removeAllEv+0x2>
 8013546:	4770      	bx	lr

08013548 <_ZN8touchgfx9Container6unlinkEv>:
 8013548:	2300      	movs	r3, #0
 801354a:	6283      	str	r3, [r0, #40]	; 0x28
 801354c:	4770      	bx	lr

0801354e <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 801354e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013552:	461f      	mov	r7, r3
 8013554:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8013558:	460d      	mov	r5, r1
 801355a:	4616      	mov	r6, r2
 801355c:	b103      	cbz	r3, 8013560 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 801355e:	6038      	str	r0, [r7, #0]
 8013560:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8013562:	b314      	cbz	r4, 80135aa <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 8013564:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8013568:	b1eb      	cbz	r3, 80135a6 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 801356a:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801356e:	428d      	cmp	r5, r1
 8013570:	db19      	blt.n	80135a6 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8013572:	8923      	ldrh	r3, [r4, #8]
 8013574:	b289      	uxth	r1, r1
 8013576:	440b      	add	r3, r1
 8013578:	b21b      	sxth	r3, r3
 801357a:	429d      	cmp	r5, r3
 801357c:	da13      	bge.n	80135a6 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 801357e:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8013582:	4296      	cmp	r6, r2
 8013584:	db0f      	blt.n	80135a6 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8013586:	8963      	ldrh	r3, [r4, #10]
 8013588:	b292      	uxth	r2, r2
 801358a:	4413      	add	r3, r2
 801358c:	b21b      	sxth	r3, r3
 801358e:	429e      	cmp	r6, r3
 8013590:	da09      	bge.n	80135a6 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8013592:	6823      	ldr	r3, [r4, #0]
 8013594:	1ab2      	subs	r2, r6, r2
 8013596:	1a69      	subs	r1, r5, r1
 8013598:	f8d3 801c 	ldr.w	r8, [r3, #28]
 801359c:	b212      	sxth	r2, r2
 801359e:	463b      	mov	r3, r7
 80135a0:	b209      	sxth	r1, r1
 80135a2:	4620      	mov	r0, r4
 80135a4:	47c0      	blx	r8
 80135a6:	69a4      	ldr	r4, [r4, #24]
 80135a8:	e7db      	b.n	8013562 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 80135aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080135ae <_ZNK8touchgfx9Container12getSolidRectEv>:
 80135ae:	2200      	movs	r2, #0
 80135b0:	8002      	strh	r2, [r0, #0]
 80135b2:	8042      	strh	r2, [r0, #2]
 80135b4:	8082      	strh	r2, [r0, #4]
 80135b6:	80c2      	strh	r2, [r0, #6]
 80135b8:	4770      	bx	lr

080135ba <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 80135ba:	b570      	push	{r4, r5, r6, lr}
 80135bc:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80135be:	460d      	mov	r5, r1
 80135c0:	4616      	mov	r6, r2
 80135c2:	b13c      	cbz	r4, 80135d4 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 80135c4:	6823      	ldr	r3, [r4, #0]
 80135c6:	4620      	mov	r0, r4
 80135c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80135ca:	4632      	mov	r2, r6
 80135cc:	4629      	mov	r1, r5
 80135ce:	4798      	blx	r3
 80135d0:	69a4      	ldr	r4, [r4, #24]
 80135d2:	e7f6      	b.n	80135c2 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 80135d4:	bd70      	pop	{r4, r5, r6, pc}

080135d6 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 80135d6:	b538      	push	{r3, r4, r5, lr}
 80135d8:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80135da:	460d      	mov	r5, r1
 80135dc:	b134      	cbz	r4, 80135ec <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 80135de:	682b      	ldr	r3, [r5, #0]
 80135e0:	4621      	mov	r1, r4
 80135e2:	689b      	ldr	r3, [r3, #8]
 80135e4:	4628      	mov	r0, r5
 80135e6:	4798      	blx	r3
 80135e8:	69a4      	ldr	r4, [r4, #24]
 80135ea:	e7f7      	b.n	80135dc <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 80135ec:	bd38      	pop	{r3, r4, r5, pc}

080135ee <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 80135ee:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80135f0:	b19b      	cbz	r3, 801361a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 80135f2:	428b      	cmp	r3, r1
 80135f4:	d109      	bne.n	801360a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 80135f6:	699a      	ldr	r2, [r3, #24]
 80135f8:	2100      	movs	r1, #0
 80135fa:	6159      	str	r1, [r3, #20]
 80135fc:	6282      	str	r2, [r0, #40]	; 0x28
 80135fe:	b902      	cbnz	r2, 8013602 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8013600:	4770      	bx	lr
 8013602:	6199      	str	r1, [r3, #24]
 8013604:	4770      	bx	lr
 8013606:	4613      	mov	r3, r2
 8013608:	b13a      	cbz	r2, 801361a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 801360a:	699a      	ldr	r2, [r3, #24]
 801360c:	428a      	cmp	r2, r1
 801360e:	d1fa      	bne.n	8013606 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8013610:	698a      	ldr	r2, [r1, #24]
 8013612:	619a      	str	r2, [r3, #24]
 8013614:	2300      	movs	r3, #0
 8013616:	e9c1 3305 	strd	r3, r3, [r1, #20]
 801361a:	4770      	bx	lr

0801361c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 801361c:	b410      	push	{r4}
 801361e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8013620:	4604      	mov	r4, r0
 8013622:	b92b      	cbnz	r3, 8013630 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 8013624:	6803      	ldr	r3, [r0, #0]
 8013626:	f85d 4b04 	ldr.w	r4, [sp], #4
 801362a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801362c:	4611      	mov	r1, r2
 801362e:	4718      	bx	r3
 8013630:	b941      	cbnz	r1, 8013644 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 8013632:	6193      	str	r3, [r2, #24]
 8013634:	6282      	str	r2, [r0, #40]	; 0x28
 8013636:	6154      	str	r4, [r2, #20]
 8013638:	f85d 4b04 	ldr.w	r4, [sp], #4
 801363c:	4770      	bx	lr
 801363e:	4603      	mov	r3, r0
 8013640:	2800      	cmp	r0, #0
 8013642:	d0f9      	beq.n	8013638 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 8013644:	4299      	cmp	r1, r3
 8013646:	6998      	ldr	r0, [r3, #24]
 8013648:	d1f9      	bne.n	801363e <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 801364a:	6190      	str	r0, [r2, #24]
 801364c:	618a      	str	r2, [r1, #24]
 801364e:	e7f2      	b.n	8013636 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

08013650 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 8013650:	4288      	cmp	r0, r1
 8013652:	b508      	push	{r3, lr}
 8013654:	d105      	bne.n	8013662 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x12>
 8013656:	4b11      	ldr	r3, [pc, #68]	; (801369c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x4c>)
 8013658:	4a11      	ldr	r2, [pc, #68]	; (80136a0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 801365a:	2123      	movs	r1, #35	; 0x23
 801365c:	4811      	ldr	r0, [pc, #68]	; (80136a4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x54>)
 801365e:	f00f f8c7 	bl	80227f0 <__assert_func>
 8013662:	694b      	ldr	r3, [r1, #20]
 8013664:	b11b      	cbz	r3, 801366e <_ZN8touchgfx9Container3addERNS_8DrawableE+0x1e>
 8013666:	4b10      	ldr	r3, [pc, #64]	; (80136a8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x58>)
 8013668:	4a0d      	ldr	r2, [pc, #52]	; (80136a0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 801366a:	2124      	movs	r1, #36	; 0x24
 801366c:	e7f6      	b.n	801365c <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 801366e:	e9c1 0305 	strd	r0, r3, [r1, #20]
 8013672:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8013674:	b913      	cbnz	r3, 801367c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2c>
 8013676:	6281      	str	r1, [r0, #40]	; 0x28
 8013678:	bd08      	pop	{r3, pc}
 801367a:	4613      	mov	r3, r2
 801367c:	699a      	ldr	r2, [r3, #24]
 801367e:	b12a      	cbz	r2, 801368c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x3c>
 8013680:	428b      	cmp	r3, r1
 8013682:	d1fa      	bne.n	801367a <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2a>
 8013684:	4b09      	ldr	r3, [pc, #36]	; (80136ac <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 8013686:	4a06      	ldr	r2, [pc, #24]	; (80136a0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8013688:	2135      	movs	r1, #53	; 0x35
 801368a:	e7e7      	b.n	801365c <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 801368c:	428b      	cmp	r3, r1
 801368e:	d103      	bne.n	8013698 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x48>
 8013690:	4b06      	ldr	r3, [pc, #24]	; (80136ac <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 8013692:	4a03      	ldr	r2, [pc, #12]	; (80136a0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8013694:	2138      	movs	r1, #56	; 0x38
 8013696:	e7e1      	b.n	801365c <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8013698:	6199      	str	r1, [r3, #24]
 801369a:	e7ed      	b.n	8013678 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x28>
 801369c:	080254a0 	.word	0x080254a0
 80136a0:	080255f4 	.word	0x080255f4
 80136a4:	080254cc 	.word	0x080254cc
 80136a8:	080254ff 	.word	0x080254ff
 80136ac:	08025535 	.word	0x08025535

080136b0 <_ZN8touchgfx4RectaNERKS0_>:
 80136b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80136b4:	888b      	ldrh	r3, [r1, #4]
 80136b6:	f9b1 9000 	ldrsh.w	r9, [r1]
 80136ba:	f9b0 a000 	ldrsh.w	sl, [r0]
 80136be:	444b      	add	r3, r9
 80136c0:	b29b      	uxth	r3, r3
 80136c2:	fa0f f883 	sxth.w	r8, r3
 80136c6:	45c2      	cmp	sl, r8
 80136c8:	da30      	bge.n	801372c <_ZN8touchgfx4RectaNERKS0_+0x7c>
 80136ca:	8882      	ldrh	r2, [r0, #4]
 80136cc:	4452      	add	r2, sl
 80136ce:	b292      	uxth	r2, r2
 80136d0:	fa0f fe82 	sxth.w	lr, r2
 80136d4:	45f1      	cmp	r9, lr
 80136d6:	da29      	bge.n	801372c <_ZN8touchgfx4RectaNERKS0_+0x7c>
 80136d8:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 80136dc:	88cc      	ldrh	r4, [r1, #6]
 80136de:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 80136e2:	442c      	add	r4, r5
 80136e4:	b224      	sxth	r4, r4
 80136e6:	42a6      	cmp	r6, r4
 80136e8:	da20      	bge.n	801372c <_ZN8touchgfx4RectaNERKS0_+0x7c>
 80136ea:	88c7      	ldrh	r7, [r0, #6]
 80136ec:	4437      	add	r7, r6
 80136ee:	b2bf      	uxth	r7, r7
 80136f0:	fa0f fc87 	sxth.w	ip, r7
 80136f4:	4565      	cmp	r5, ip
 80136f6:	da19      	bge.n	801372c <_ZN8touchgfx4RectaNERKS0_+0x7c>
 80136f8:	45ca      	cmp	sl, r9
 80136fa:	4654      	mov	r4, sl
 80136fc:	bfb8      	it	lt
 80136fe:	464c      	movlt	r4, r9
 8013700:	42b5      	cmp	r5, r6
 8013702:	bfb8      	it	lt
 8013704:	4635      	movlt	r5, r6
 8013706:	45f0      	cmp	r8, lr
 8013708:	bfc8      	it	gt
 801370a:	4613      	movgt	r3, r2
 801370c:	1b1b      	subs	r3, r3, r4
 801370e:	8083      	strh	r3, [r0, #4]
 8013710:	88ca      	ldrh	r2, [r1, #6]
 8013712:	884b      	ldrh	r3, [r1, #2]
 8013714:	8004      	strh	r4, [r0, #0]
 8013716:	4413      	add	r3, r2
 8013718:	b29b      	uxth	r3, r3
 801371a:	b21a      	sxth	r2, r3
 801371c:	4594      	cmp	ip, r2
 801371e:	bfb8      	it	lt
 8013720:	463b      	movlt	r3, r7
 8013722:	1b5b      	subs	r3, r3, r5
 8013724:	80c3      	strh	r3, [r0, #6]
 8013726:	8045      	strh	r5, [r0, #2]
 8013728:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801372c:	2300      	movs	r3, #0
 801372e:	8003      	strh	r3, [r0, #0]
 8013730:	8043      	strh	r3, [r0, #2]
 8013732:	8083      	strh	r3, [r0, #4]
 8013734:	80c3      	strh	r3, [r0, #6]
 8013736:	e7f7      	b.n	8013728 <_ZN8touchgfx4RectaNERKS0_+0x78>

08013738 <_ZNK8touchgfx4Rect7isEmptyEv>:
 8013738:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801373c:	b12b      	cbz	r3, 801374a <_ZNK8touchgfx4Rect7isEmptyEv+0x12>
 801373e:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8013742:	fab0 f080 	clz	r0, r0
 8013746:	0940      	lsrs	r0, r0, #5
 8013748:	4770      	bx	lr
 801374a:	2001      	movs	r0, #1
 801374c:	4770      	bx	lr

0801374e <_ZNK8touchgfx9Container16getContainedAreaEv>:
 801374e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013752:	2300      	movs	r3, #0
 8013754:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8013756:	8003      	strh	r3, [r0, #0]
 8013758:	4604      	mov	r4, r0
 801375a:	8043      	strh	r3, [r0, #2]
 801375c:	8083      	strh	r3, [r0, #4]
 801375e:	80c3      	strh	r3, [r0, #6]
 8013760:	2d00      	cmp	r5, #0
 8013762:	d040      	beq.n	80137e6 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 8013764:	1d28      	adds	r0, r5, #4
 8013766:	f7ff ffe7 	bl	8013738 <_ZNK8touchgfx4Rect7isEmptyEv>
 801376a:	b988      	cbnz	r0, 8013790 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 801376c:	4620      	mov	r0, r4
 801376e:	f7ff ffe3 	bl	8013738 <_ZNK8touchgfx4Rect7isEmptyEv>
 8013772:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8013776:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801377a:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 801377e:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 8013782:	b138      	cbz	r0, 8013794 <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 8013784:	8022      	strh	r2, [r4, #0]
 8013786:	8063      	strh	r3, [r4, #2]
 8013788:	f8a4 e004 	strh.w	lr, [r4, #4]
 801378c:	f8a4 c006 	strh.w	ip, [r4, #6]
 8013790:	69ad      	ldr	r5, [r5, #24]
 8013792:	e7e5      	b.n	8013760 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 8013794:	f9b4 0000 	ldrsh.w	r0, [r4]
 8013798:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801379c:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 80137a0:	4290      	cmp	r0, r2
 80137a2:	4607      	mov	r7, r0
 80137a4:	bfa8      	it	ge
 80137a6:	4617      	movge	r7, r2
 80137a8:	4472      	add	r2, lr
 80137aa:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 80137ae:	8027      	strh	r7, [r4, #0]
 80137b0:	4299      	cmp	r1, r3
 80137b2:	460e      	mov	r6, r1
 80137b4:	4440      	add	r0, r8
 80137b6:	bfa8      	it	ge
 80137b8:	461e      	movge	r6, r3
 80137ba:	4471      	add	r1, lr
 80137bc:	4463      	add	r3, ip
 80137be:	b200      	sxth	r0, r0
 80137c0:	b212      	sxth	r2, r2
 80137c2:	b209      	sxth	r1, r1
 80137c4:	b21b      	sxth	r3, r3
 80137c6:	4290      	cmp	r0, r2
 80137c8:	bfac      	ite	ge
 80137ca:	ebc7 0200 	rsbge	r2, r7, r0
 80137ce:	ebc7 0202 	rsblt	r2, r7, r2
 80137d2:	4299      	cmp	r1, r3
 80137d4:	bfac      	ite	ge
 80137d6:	ebc6 0301 	rsbge	r3, r6, r1
 80137da:	ebc6 0303 	rsblt	r3, r6, r3
 80137de:	8066      	strh	r6, [r4, #2]
 80137e0:	80a2      	strh	r2, [r4, #4]
 80137e2:	80e3      	strh	r3, [r4, #6]
 80137e4:	e7d4      	b.n	8013790 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 80137e6:	4620      	mov	r0, r4
 80137e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080137ec <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 80137ec:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80137f0:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 80137f4:	b383      	cbz	r3, 8013858 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 80137f6:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80137f8:	b374      	cbz	r4, 8013858 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 80137fa:	f9b1 5000 	ldrsh.w	r5, [r1]
 80137fe:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 8013802:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8013806:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 801380a:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 801380e:	b303      	cbz	r3, 8013852 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8013810:	4668      	mov	r0, sp
 8013812:	1d21      	adds	r1, r4, #4
 8013814:	f8ad 5000 	strh.w	r5, [sp]
 8013818:	f8ad 6002 	strh.w	r6, [sp, #2]
 801381c:	f8ad 7004 	strh.w	r7, [sp, #4]
 8013820:	f8ad 8006 	strh.w	r8, [sp, #6]
 8013824:	f7ff ff44 	bl	80136b0 <_ZN8touchgfx4RectaNERKS0_>
 8013828:	4668      	mov	r0, sp
 801382a:	f7ff ff85 	bl	8013738 <_ZNK8touchgfx4Rect7isEmptyEv>
 801382e:	b980      	cbnz	r0, 8013852 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8013830:	f8bd 3000 	ldrh.w	r3, [sp]
 8013834:	88a2      	ldrh	r2, [r4, #4]
 8013836:	1a9b      	subs	r3, r3, r2
 8013838:	f8ad 3000 	strh.w	r3, [sp]
 801383c:	88e2      	ldrh	r2, [r4, #6]
 801383e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8013842:	1a9b      	subs	r3, r3, r2
 8013844:	f8ad 3002 	strh.w	r3, [sp, #2]
 8013848:	6823      	ldr	r3, [r4, #0]
 801384a:	4669      	mov	r1, sp
 801384c:	689b      	ldr	r3, [r3, #8]
 801384e:	4620      	mov	r0, r4
 8013850:	4798      	blx	r3
 8013852:	69a4      	ldr	r4, [r4, #24]
 8013854:	2c00      	cmp	r4, #0
 8013856:	d1d8      	bne.n	801380a <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 8013858:	b002      	add	sp, #8
 801385a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801385e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 801385e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013860:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8013864:	460d      	mov	r5, r1
 8013866:	4616      	mov	r6, r2
 8013868:	b323      	cbz	r3, 80138b4 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 801386a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801386c:	b314      	cbz	r4, 80138b4 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 801386e:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8013872:	b1eb      	cbz	r3, 80138b0 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8013874:	6828      	ldr	r0, [r5, #0]
 8013876:	6869      	ldr	r1, [r5, #4]
 8013878:	466b      	mov	r3, sp
 801387a:	c303      	stmia	r3!, {r0, r1}
 801387c:	4668      	mov	r0, sp
 801387e:	1d21      	adds	r1, r4, #4
 8013880:	f7ff ff16 	bl	80136b0 <_ZN8touchgfx4RectaNERKS0_>
 8013884:	4668      	mov	r0, sp
 8013886:	f7ff ff57 	bl	8013738 <_ZNK8touchgfx4Rect7isEmptyEv>
 801388a:	b988      	cbnz	r0, 80138b0 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 801388c:	f8bd 3000 	ldrh.w	r3, [sp]
 8013890:	88a2      	ldrh	r2, [r4, #4]
 8013892:	1a9b      	subs	r3, r3, r2
 8013894:	f8ad 3000 	strh.w	r3, [sp]
 8013898:	88e2      	ldrh	r2, [r4, #6]
 801389a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801389e:	1a9b      	subs	r3, r3, r2
 80138a0:	f8ad 3002 	strh.w	r3, [sp, #2]
 80138a4:	6823      	ldr	r3, [r4, #0]
 80138a6:	4632      	mov	r2, r6
 80138a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80138aa:	4669      	mov	r1, sp
 80138ac:	4620      	mov	r0, r4
 80138ae:	4798      	blx	r3
 80138b0:	69a4      	ldr	r4, [r4, #24]
 80138b2:	e7db      	b.n	801386c <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 80138b4:	b002      	add	sp, #8
 80138b6:	bd70      	pop	{r4, r5, r6, pc}

080138b8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 80138b8:	b513      	push	{r0, r1, r4, lr}
 80138ba:	6803      	ldr	r3, [r0, #0]
 80138bc:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
 80138c0:	2300      	movs	r3, #0
 80138c2:	e9cd 3300 	strd	r3, r3, [sp]
 80138c6:	466b      	mov	r3, sp
 80138c8:	47a0      	blx	r4
 80138ca:	b002      	add	sp, #8
 80138cc:	bd10      	pop	{r4, pc}

080138ce <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 80138ce:	2301      	movs	r3, #1
 80138d0:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 80138d4:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 80138d8:	4770      	bx	lr

080138da <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 80138da:	2301      	movs	r3, #1
 80138dc:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 80138e0:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 80138e4:	4770      	bx	lr

080138e6 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 80138e6:	6843      	ldr	r3, [r0, #4]
 80138e8:	2201      	movs	r2, #1
 80138ea:	725a      	strb	r2, [r3, #9]
 80138ec:	6840      	ldr	r0, [r0, #4]
 80138ee:	6803      	ldr	r3, [r0, #0]
 80138f0:	691b      	ldr	r3, [r3, #16]
 80138f2:	4718      	bx	r3

080138f4 <_ZN8touchgfx3HAL8flushDMAEv>:
 80138f4:	6840      	ldr	r0, [r0, #4]
 80138f6:	6803      	ldr	r3, [r0, #0]
 80138f8:	689b      	ldr	r3, [r3, #8]
 80138fa:	4718      	bx	r3

080138fc <_ZN8touchgfx3HAL10beginFrameEv>:
 80138fc:	4b04      	ldr	r3, [pc, #16]	; (8013910 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 80138fe:	781b      	ldrb	r3, [r3, #0]
 8013900:	b123      	cbz	r3, 801390c <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 8013902:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 8013906:	f080 0001 	eor.w	r0, r0, #1
 801390a:	4770      	bx	lr
 801390c:	2001      	movs	r0, #1
 801390e:	4770      	bx	lr
 8013910:	2000d1a2 	.word	0x2000d1a2

08013914 <_ZN8touchgfx3HAL8endFrameEv>:
 8013914:	b510      	push	{r4, lr}
 8013916:	4604      	mov	r4, r0
 8013918:	6840      	ldr	r0, [r0, #4]
 801391a:	6803      	ldr	r3, [r0, #0]
 801391c:	689b      	ldr	r3, [r3, #8]
 801391e:	4798      	blx	r3
 8013920:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 8013924:	b113      	cbz	r3, 801392c <_ZN8touchgfx3HAL8endFrameEv+0x18>
 8013926:	2301      	movs	r3, #1
 8013928:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 801392c:	bd10      	pop	{r4, pc}

0801392e <_ZN8touchgfx3HAL9taskEntryEv>:
 801392e:	b508      	push	{r3, lr}
 8013930:	6803      	ldr	r3, [r0, #0]
 8013932:	4604      	mov	r4, r0
 8013934:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013936:	4798      	blx	r3
 8013938:	6823      	ldr	r3, [r4, #0]
 801393a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801393c:	4620      	mov	r0, r4
 801393e:	4798      	blx	r3
 8013940:	f7ee fba0 	bl	8002084 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 8013944:	6823      	ldr	r3, [r4, #0]
 8013946:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013948:	e7f8      	b.n	801393c <_ZN8touchgfx3HAL9taskEntryEv+0xe>
	...

0801394c <_ZN8touchgfx3HAL4tickEv>:
 801394c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801394e:	6803      	ldr	r3, [r0, #0]
 8013950:	4d5c      	ldr	r5, [pc, #368]	; (8013ac4 <_ZN8touchgfx3HAL4tickEv+0x178>)
 8013952:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8013956:	4604      	mov	r4, r0
 8013958:	4798      	blx	r3
 801395a:	2800      	cmp	r0, #0
 801395c:	f000 8097 	beq.w	8013a8e <_ZN8touchgfx3HAL4tickEv+0x142>
 8013960:	2001      	movs	r0, #1
 8013962:	f7ee f871 	bl	8001a48 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8013966:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 801396a:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 801396e:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 8013972:	2600      	movs	r6, #0
 8013974:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 8013978:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 801397c:	b133      	cbz	r3, 801398c <_ZN8touchgfx3HAL4tickEv+0x40>
 801397e:	6823      	ldr	r3, [r4, #0]
 8013980:	4620      	mov	r0, r4
 8013982:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8013986:	4798      	blx	r3
 8013988:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 801398c:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8013990:	6862      	ldr	r2, [r4, #4]
 8013992:	f083 0301 	eor.w	r3, r3, #1
 8013996:	7253      	strb	r3, [r2, #9]
 8013998:	2601      	movs	r6, #1
 801399a:	702e      	strb	r6, [r5, #0]
 801399c:	f002 ffea 	bl	8016974 <_ZN8touchgfx11Application11getInstanceEv>
 80139a0:	6803      	ldr	r3, [r0, #0]
 80139a2:	4631      	mov	r1, r6
 80139a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80139a6:	4798      	blx	r3
 80139a8:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 80139ac:	b90b      	cbnz	r3, 80139b2 <_ZN8touchgfx3HAL4tickEv+0x66>
 80139ae:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 80139b2:	f002 ffdf 	bl	8016974 <_ZN8touchgfx11Application11getInstanceEv>
 80139b6:	6803      	ldr	r3, [r0, #0]
 80139b8:	695b      	ldr	r3, [r3, #20]
 80139ba:	4798      	blx	r3
 80139bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80139be:	6803      	ldr	r3, [r0, #0]
 80139c0:	691b      	ldr	r3, [r3, #16]
 80139c2:	4798      	blx	r3
 80139c4:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 80139c8:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 80139cc:	3b01      	subs	r3, #1
 80139ce:	b2db      	uxtb	r3, r3
 80139d0:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 80139d4:	b10a      	cbz	r2, 80139da <_ZN8touchgfx3HAL4tickEv+0x8e>
 80139d6:	2b00      	cmp	r3, #0
 80139d8:	d1eb      	bne.n	80139b2 <_ZN8touchgfx3HAL4tickEv+0x66>
 80139da:	4a3b      	ldr	r2, [pc, #236]	; (8013ac8 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 80139dc:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 80139e0:	7813      	ldrb	r3, [r2, #0]
 80139e2:	3301      	adds	r3, #1
 80139e4:	b25b      	sxtb	r3, r3
 80139e6:	4299      	cmp	r1, r3
 80139e8:	7013      	strb	r3, [r2, #0]
 80139ea:	dc10      	bgt.n	8013a0e <_ZN8touchgfx3HAL4tickEv+0xc2>
 80139ec:	68e0      	ldr	r0, [r4, #12]
 80139ee:	2300      	movs	r3, #0
 80139f0:	7013      	strb	r3, [r2, #0]
 80139f2:	6803      	ldr	r3, [r0, #0]
 80139f4:	aa03      	add	r2, sp, #12
 80139f6:	68db      	ldr	r3, [r3, #12]
 80139f8:	a902      	add	r1, sp, #8
 80139fa:	4798      	blx	r3
 80139fc:	6823      	ldr	r3, [r4, #0]
 80139fe:	2800      	cmp	r0, #0
 8013a00:	d051      	beq.n	8013aa6 <_ZN8touchgfx3HAL4tickEv+0x15a>
 8013a02:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8013a06:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8013a0a:	4620      	mov	r0, r4
 8013a0c:	4798      	blx	r3
 8013a0e:	6960      	ldr	r0, [r4, #20]
 8013a10:	2300      	movs	r3, #0
 8013a12:	f88d 3007 	strb.w	r3, [sp, #7]
 8013a16:	b158      	cbz	r0, 8013a30 <_ZN8touchgfx3HAL4tickEv+0xe4>
 8013a18:	6803      	ldr	r3, [r0, #0]
 8013a1a:	f10d 0107 	add.w	r1, sp, #7
 8013a1e:	68db      	ldr	r3, [r3, #12]
 8013a20:	4798      	blx	r3
 8013a22:	b128      	cbz	r0, 8013a30 <_ZN8touchgfx3HAL4tickEv+0xe4>
 8013a24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013a26:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8013a2a:	6803      	ldr	r3, [r0, #0]
 8013a2c:	68db      	ldr	r3, [r3, #12]
 8013a2e:	4798      	blx	r3
 8013a30:	f104 001c 	add.w	r0, r4, #28
 8013a34:	f00d f9fe 	bl	8020e34 <_ZN8touchgfx8Gestures4tickEv>
 8013a38:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 8013a3c:	b30b      	cbz	r3, 8013a82 <_ZN8touchgfx3HAL4tickEv+0x136>
 8013a3e:	6920      	ldr	r0, [r4, #16]
 8013a40:	6803      	ldr	r3, [r0, #0]
 8013a42:	691b      	ldr	r3, [r3, #16]
 8013a44:	4798      	blx	r3
 8013a46:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8013a48:	4606      	mov	r6, r0
 8013a4a:	b903      	cbnz	r3, 8013a4e <_ZN8touchgfx3HAL4tickEv+0x102>
 8013a4c:	6720      	str	r0, [r4, #112]	; 0x70
 8013a4e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8013a50:	4a1e      	ldr	r2, [pc, #120]	; (8013acc <_ZN8touchgfx3HAL4tickEv+0x180>)
 8013a52:	1af3      	subs	r3, r6, r3
 8013a54:	4293      	cmp	r3, r2
 8013a56:	d914      	bls.n	8013a82 <_ZN8touchgfx3HAL4tickEv+0x136>
 8013a58:	6920      	ldr	r0, [r4, #16]
 8013a5a:	6803      	ldr	r3, [r0, #0]
 8013a5c:	699b      	ldr	r3, [r3, #24]
 8013a5e:	4798      	blx	r3
 8013a60:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8013a62:	2264      	movs	r2, #100	; 0x64
 8013a64:	1af3      	subs	r3, r6, r3
 8013a66:	fbb3 f3f2 	udiv	r3, r3, r2
 8013a6a:	fbb0 f0f3 	udiv	r0, r0, r3
 8013a6e:	2800      	cmp	r0, #0
 8013a70:	dc1e      	bgt.n	8013ab0 <_ZN8touchgfx3HAL4tickEv+0x164>
 8013a72:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 8013a76:	6920      	ldr	r0, [r4, #16]
 8013a78:	6803      	ldr	r3, [r0, #0]
 8013a7a:	2100      	movs	r1, #0
 8013a7c:	69db      	ldr	r3, [r3, #28]
 8013a7e:	4798      	blx	r3
 8013a80:	6726      	str	r6, [r4, #112]	; 0x70
 8013a82:	f002 ff77 	bl	8016974 <_ZN8touchgfx11Application11getInstanceEv>
 8013a86:	6803      	ldr	r3, [r0, #0]
 8013a88:	2100      	movs	r1, #0
 8013a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013a8c:	4798      	blx	r3
 8013a8e:	6823      	ldr	r3, [r4, #0]
 8013a90:	4620      	mov	r0, r4
 8013a92:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8013a96:	4798      	blx	r3
 8013a98:	2001      	movs	r0, #1
 8013a9a:	f7ed ffe0 	bl	8001a5e <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8013a9e:	2300      	movs	r3, #0
 8013aa0:	702b      	strb	r3, [r5, #0]
 8013aa2:	b004      	add	sp, #16
 8013aa4:	bd70      	pop	{r4, r5, r6, pc}
 8013aa6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8013aaa:	4620      	mov	r0, r4
 8013aac:	4798      	blx	r3
 8013aae:	e7ae      	b.n	8013a0e <_ZN8touchgfx3HAL4tickEv+0xc2>
 8013ab0:	2863      	cmp	r0, #99	; 0x63
 8013ab2:	bfcb      	itete	gt
 8013ab4:	2300      	movgt	r3, #0
 8013ab6:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 8013aba:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 8013abe:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 8013ac2:	e7d8      	b.n	8013a76 <_ZN8touchgfx3HAL4tickEv+0x12a>
 8013ac4:	2000d1a8 	.word	0x2000d1a8
 8013ac8:	2000d1a9 	.word	0x2000d1a9
 8013acc:	05f5e100 	.word	0x05f5e100

08013ad0 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8013ad0:	f7ee ba9e 	b.w	8002010 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08013ad4 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8013ad4:	6581      	str	r1, [r0, #88]	; 0x58
 8013ad6:	301c      	adds	r0, #28
 8013ad8:	f00d b9aa 	b.w	8020e30 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08013adc <_ZN8touchgfx3HAL5touchEll>:
 8013adc:	b530      	push	{r4, r5, lr}
 8013ade:	b087      	sub	sp, #28
 8013ae0:	4604      	mov	r4, r0
 8013ae2:	a804      	add	r0, sp, #16
 8013ae4:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8013ae8:	f002 fd48 	bl	801657c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8013aec:	9b04      	ldr	r3, [sp, #16]
 8013aee:	f8ad 300c 	strh.w	r3, [sp, #12]
 8013af2:	a906      	add	r1, sp, #24
 8013af4:	9b05      	ldr	r3, [sp, #20]
 8013af6:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 8013afa:	a803      	add	r0, sp, #12
 8013afc:	f002 fd8c 	bl	8016618 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8013b00:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 8013b04:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8013b08:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8013b0c:	f104 001c 	add.w	r0, r4, #28
 8013b10:	b189      	cbz	r1, 8013b36 <_ZN8touchgfx3HAL5touchEll+0x5a>
 8013b12:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 8013b16:	9300      	str	r3, [sp, #0]
 8013b18:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8013b1c:	4613      	mov	r3, r2
 8013b1e:	462a      	mov	r2, r5
 8013b20:	f00d f996 	bl	8020e50 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8013b24:	b128      	cbz	r0, 8013b32 <_ZN8touchgfx3HAL5touchEll+0x56>
 8013b26:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8013b2a:	65e3      	str	r3, [r4, #92]	; 0x5c
 8013b2c:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8013b30:	6623      	str	r3, [r4, #96]	; 0x60
 8013b32:	b007      	add	sp, #28
 8013b34:	bd30      	pop	{r4, r5, pc}
 8013b36:	f00d f9cf 	bl	8020ed8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8013b3a:	2301      	movs	r3, #1
 8013b3c:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8013b40:	e7f1      	b.n	8013b26 <_ZN8touchgfx3HAL5touchEll+0x4a>

08013b42 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 8013b42:	b570      	push	{r4, r5, r6, lr}
 8013b44:	2b00      	cmp	r3, #0
 8013b46:	d050      	beq.n	8013bea <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 8013b48:	ea81 0002 	eor.w	r0, r1, r2
 8013b4c:	07c6      	lsls	r6, r0, #31
 8013b4e:	d508      	bpl.n	8013b62 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 8013b50:	3a01      	subs	r2, #1
 8013b52:	18cc      	adds	r4, r1, r3
 8013b54:	42a1      	cmp	r1, r4
 8013b56:	d048      	beq.n	8013bea <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 8013b58:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8013b5c:	f801 0b01 	strb.w	r0, [r1], #1
 8013b60:	e7f8      	b.n	8013b54 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 8013b62:	07d5      	lsls	r5, r2, #31
 8013b64:	bf42      	ittt	mi
 8013b66:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 8013b6a:	f801 0b01 	strbmi.w	r0, [r1], #1
 8013b6e:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8013b72:	2b01      	cmp	r3, #1
 8013b74:	d915      	bls.n	8013ba2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 8013b76:	ea82 0001 	eor.w	r0, r2, r1
 8013b7a:	0784      	lsls	r4, r0, #30
 8013b7c:	d02d      	beq.n	8013bda <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x98>
 8013b7e:	1e94      	subs	r4, r2, #2
 8013b80:	4608      	mov	r0, r1
 8013b82:	18ce      	adds	r6, r1, r3
 8013b84:	f834 5f02 	ldrh.w	r5, [r4, #2]!
 8013b88:	f820 5b02 	strh.w	r5, [r0], #2
 8013b8c:	1a35      	subs	r5, r6, r0
 8013b8e:	2d01      	cmp	r5, #1
 8013b90:	d8f8      	bhi.n	8013b84 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x42>
 8013b92:	1e98      	subs	r0, r3, #2
 8013b94:	f020 0001 	bic.w	r0, r0, #1
 8013b98:	3002      	adds	r0, #2
 8013b9a:	4401      	add	r1, r0
 8013b9c:	4402      	add	r2, r0
 8013b9e:	f003 0301 	and.w	r3, r3, #1
 8013ba2:	1f14      	subs	r4, r2, #4
 8013ba4:	4608      	mov	r0, r1
 8013ba6:	18ce      	adds	r6, r1, r3
 8013ba8:	1a35      	subs	r5, r6, r0
 8013baa:	2d03      	cmp	r5, #3
 8013bac:	d810      	bhi.n	8013bd0 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x8e>
 8013bae:	089c      	lsrs	r4, r3, #2
 8013bb0:	00a0      	lsls	r0, r4, #2
 8013bb2:	4401      	add	r1, r0
 8013bb4:	3801      	subs	r0, #1
 8013bb6:	4402      	add	r2, r0
 8013bb8:	f06f 0003 	mvn.w	r0, #3
 8013bbc:	fb00 3404 	mla	r4, r0, r4, r3
 8013bc0:	440c      	add	r4, r1
 8013bc2:	42a1      	cmp	r1, r4
 8013bc4:	d011      	beq.n	8013bea <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 8013bc6:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8013bca:	f801 3b01 	strb.w	r3, [r1], #1
 8013bce:	e7f8      	b.n	8013bc2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x80>
 8013bd0:	f854 5f04 	ldr.w	r5, [r4, #4]!
 8013bd4:	f840 5b04 	str.w	r5, [r0], #4
 8013bd8:	e7e6      	b.n	8013ba8 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x66>
 8013bda:	0790      	lsls	r0, r2, #30
 8013bdc:	d0e1      	beq.n	8013ba2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 8013bde:	f832 0b02 	ldrh.w	r0, [r2], #2
 8013be2:	f821 0b02 	strh.w	r0, [r1], #2
 8013be6:	3b02      	subs	r3, #2
 8013be8:	e7db      	b.n	8013ba2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 8013bea:	2001      	movs	r0, #1
 8013bec:	bd70      	pop	{r4, r5, r6, pc}

08013bee <_ZN8touchgfx3HAL7noTouchEv>:
 8013bee:	b510      	push	{r4, lr}
 8013bf0:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 8013bf4:	4604      	mov	r4, r0
 8013bf6:	b153      	cbz	r3, 8013c0e <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8013bf8:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 8013bfc:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 8013c00:	2101      	movs	r1, #1
 8013c02:	301c      	adds	r0, #28
 8013c04:	f00d f968 	bl	8020ed8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8013c08:	2300      	movs	r3, #0
 8013c0a:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8013c0e:	bd10      	pop	{r4, pc}

08013c10 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8013c10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013c14:	4605      	mov	r5, r0
 8013c16:	6980      	ldr	r0, [r0, #24]
 8013c18:	b085      	sub	sp, #20
 8013c1a:	460f      	mov	r7, r1
 8013c1c:	4690      	mov	r8, r2
 8013c1e:	4699      	mov	r9, r3
 8013c20:	b930      	cbnz	r0, 8013c30 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x20>
 8013c22:	4b1f      	ldr	r3, [pc, #124]	; (8013ca0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x90>)
 8013c24:	4a1f      	ldr	r2, [pc, #124]	; (8013ca4 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 8013c26:	f44f 7198 	mov.w	r1, #304	; 0x130
 8013c2a:	481f      	ldr	r0, [pc, #124]	; (8013ca8 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x98>)
 8013c2c:	f00e fde0 	bl	80227f0 <__assert_func>
 8013c30:	ac04      	add	r4, sp, #16
 8013c32:	2600      	movs	r6, #0
 8013c34:	f844 6d04 	str.w	r6, [r4, #-4]!
 8013c38:	6806      	ldr	r6, [r0, #0]
 8013c3a:	9401      	str	r4, [sp, #4]
 8013c3c:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 8013c40:	9400      	str	r4, [sp, #0]
 8013c42:	6834      	ldr	r4, [r6, #0]
 8013c44:	47a0      	blx	r4
 8013c46:	4c19      	ldr	r4, [pc, #100]	; (8013cac <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x9c>)
 8013c48:	4606      	mov	r6, r0
 8013c4a:	f8a4 9000 	strh.w	r9, [r4]
 8013c4e:	f7ed ff51 	bl	8001af4 <_ZN8touchgfx3HAL3lcdEv>
 8013c52:	6803      	ldr	r3, [r0, #0]
 8013c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013c56:	4798      	blx	r3
 8013c58:	280c      	cmp	r0, #12
 8013c5a:	d80f      	bhi.n	8013c7c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6c>
 8013c5c:	e8df f000 	tbb	[pc, r0]
 8013c60:	1b1b1207 	.word	0x1b1b1207
 8013c64:	1b1b1b1b 	.word	0x1b1b1b1b
 8013c68:	1b1b1b1b 	.word	0x1b1b1b1b
 8013c6c:	1b          	.byte	0x1b
 8013c6d:	00          	.byte	0x00
 8013c6e:	8823      	ldrh	r3, [r4, #0]
 8013c70:	fb08 7203 	mla	r2, r8, r3, r7
 8013c74:	9b03      	ldr	r3, [sp, #12]
 8013c76:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8013c7a:	63eb      	str	r3, [r5, #60]	; 0x3c
 8013c7c:	4630      	mov	r0, r6
 8013c7e:	b005      	add	sp, #20
 8013c80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013c84:	8822      	ldrh	r2, [r4, #0]
 8013c86:	9b03      	ldr	r3, [sp, #12]
 8013c88:	fb08 7202 	mla	r2, r8, r2, r7
 8013c8c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8013c90:	1a9a      	subs	r2, r3, r2
 8013c92:	63ea      	str	r2, [r5, #60]	; 0x3c
 8013c94:	e7f2      	b.n	8013c7c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6c>
 8013c96:	4b06      	ldr	r3, [pc, #24]	; (8013cb0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0xa0>)
 8013c98:	4a02      	ldr	r2, [pc, #8]	; (8013ca4 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 8013c9a:	f240 114d 	movw	r1, #333	; 0x14d
 8013c9e:	e7c4      	b.n	8013c2a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x1a>
 8013ca0:	0802569d 	.word	0x0802569d
 8013ca4:	080259ae 	.word	0x080259ae
 8013ca8:	080256e2 	.word	0x080256e2
 8013cac:	2000d19e 	.word	0x2000d19e
 8013cb0:	08025708 	.word	0x08025708

08013cb4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth>:
 8013cb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013cb8:	4698      	mov	r8, r3
 8013cba:	6803      	ldr	r3, [r0, #0]
 8013cbc:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 8013cbe:	4b0f      	ldr	r3, [pc, #60]	; (8013cfc <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x48>)
 8013cc0:	b087      	sub	sp, #28
 8013cc2:	f8b3 9000 	ldrh.w	r9, [r3]
 8013cc6:	460e      	mov	r6, r1
 8013cc8:	4617      	mov	r7, r2
 8013cca:	4604      	mov	r4, r0
 8013ccc:	f7ed ff12 	bl	8001af4 <_ZN8touchgfx3HAL3lcdEv>
 8013cd0:	6803      	ldr	r3, [r0, #0]
 8013cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013cd4:	4798      	blx	r3
 8013cd6:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8013cda:	9302      	str	r3, [sp, #8]
 8013cdc:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8013ce0:	9301      	str	r3, [sp, #4]
 8013ce2:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8013ce6:	9300      	str	r3, [sp, #0]
 8013ce8:	e9cd 9003 	strd	r9, r0, [sp, #12]
 8013cec:	4643      	mov	r3, r8
 8013cee:	463a      	mov	r2, r7
 8013cf0:	4631      	mov	r1, r6
 8013cf2:	4620      	mov	r0, r4
 8013cf4:	47a8      	blx	r5
 8013cf6:	b007      	add	sp, #28
 8013cf8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013cfc:	2000d19e 	.word	0x2000d19e

08013d00 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8013d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d04:	4606      	mov	r6, r0
 8013d06:	b089      	sub	sp, #36	; 0x24
 8013d08:	4610      	mov	r0, r2
 8013d0a:	460c      	mov	r4, r1
 8013d0c:	4691      	mov	r9, r2
 8013d0e:	4698      	mov	r8, r3
 8013d10:	f004 ff4e 	bl	8018bb0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8013d14:	2800      	cmp	r0, #0
 8013d16:	f000 8092 	beq.w	8013e3e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x13e>
 8013d1a:	f8df a13c 	ldr.w	sl, [pc, #316]	; 8013e58 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>
 8013d1e:	f8df b13c 	ldr.w	fp, [pc, #316]	; 8013e5c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15c>
 8013d22:	f8da 0000 	ldr.w	r0, [sl]
 8013d26:	4f4b      	ldr	r7, [pc, #300]	; (8013e54 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>)
 8013d28:	6802      	ldr	r2, [r0, #0]
 8013d2a:	6a12      	ldr	r2, [r2, #32]
 8013d2c:	4790      	blx	r2
 8013d2e:	f8da 0000 	ldr.w	r0, [sl]
 8013d32:	6802      	ldr	r2, [r0, #0]
 8013d34:	ad08      	add	r5, sp, #32
 8013d36:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8013d38:	4790      	blx	r2
 8013d3a:	f825 9d0c 	strh.w	r9, [r5, #-12]!
 8013d3e:	f8bb 3000 	ldrh.w	r3, [fp]
 8013d42:	9300      	str	r3, [sp, #0]
 8013d44:	4628      	mov	r0, r5
 8013d46:	883b      	ldrh	r3, [r7, #0]
 8013d48:	9301      	str	r3, [sp, #4]
 8013d4a:	f004 fff1 	bl	8018d30 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8013d4e:	f8ab 0000 	strh.w	r0, [fp]
 8013d52:	4628      	mov	r0, r5
 8013d54:	f005 f826 	bl	8018da4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8013d58:	f8da b000 	ldr.w	fp, [sl]
 8013d5c:	8038      	strh	r0, [r7, #0]
 8013d5e:	f8db 303c 	ldr.w	r3, [fp, #60]	; 0x3c
 8013d62:	9302      	str	r3, [sp, #8]
 8013d64:	4648      	mov	r0, r9
 8013d66:	f8db 7040 	ldr.w	r7, [fp, #64]	; 0x40
 8013d6a:	f004 ff21 	bl	8018bb0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8013d6e:	f8da 2000 	ldr.w	r2, [sl]
 8013d72:	f8cb 0040 	str.w	r0, [fp, #64]	; 0x40
 8013d76:	63d0      	str	r0, [r2, #60]	; 0x3c
 8013d78:	6822      	ldr	r2, [r4, #0]
 8013d7a:	f9b4 9004 	ldrsh.w	r9, [r4, #4]
 8013d7e:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8013d80:	f9b4 a006 	ldrsh.w	sl, [r4, #6]
 8013d84:	2200      	movs	r2, #0
 8013d86:	4611      	mov	r1, r2
 8013d88:	4620      	mov	r0, r4
 8013d8a:	4798      	blx	r3
 8013d8c:	2201      	movs	r2, #1
 8013d8e:	f894 b025 	ldrb.w	fp, [r4, #37]	; 0x25
 8013d92:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
 8013d96:	f9b8 1004 	ldrsh.w	r1, [r8, #4]
 8013d9a:	1d22      	adds	r2, r4, #4
 8013d9c:	2900      	cmp	r1, #0
 8013d9e:	d051      	beq.n	8013e44 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x144>
 8013da0:	f9b8 1006 	ldrsh.w	r1, [r8, #6]
 8013da4:	2900      	cmp	r1, #0
 8013da6:	d04d      	beq.n	8013e44 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x144>
 8013da8:	6810      	ldr	r0, [r2, #0]
 8013daa:	6851      	ldr	r1, [r2, #4]
 8013dac:	f10d 0c18 	add.w	ip, sp, #24
 8013db0:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8013db4:	4641      	mov	r1, r8
 8013db6:	a806      	add	r0, sp, #24
 8013db8:	f7ff fc7a 	bl	80136b0 <_ZN8touchgfx4RectaNERKS0_>
 8013dbc:	4628      	mov	r0, r5
 8013dbe:	f005 f943 	bl	8019048 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8013dc2:	4680      	mov	r8, r0
 8013dc4:	f7ed fe96 	bl	8001af4 <_ZN8touchgfx3HAL3lcdEv>
 8013dc8:	6802      	ldr	r2, [r0, #0]
 8013dca:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8013dcc:	4790      	blx	r2
 8013dce:	4580      	cmp	r8, r0
 8013dd0:	d03d      	beq.n	8013e4e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x14e>
 8013dd2:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 8013dd4:	b150      	cbz	r0, 8013dec <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xec>
 8013dd6:	4628      	mov	r0, r5
 8013dd8:	f005 f936 	bl	8019048 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8013ddc:	4605      	mov	r5, r0
 8013dde:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 8013de0:	6803      	ldr	r3, [r0, #0]
 8013de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013de4:	4798      	blx	r3
 8013de6:	1a2b      	subs	r3, r5, r0
 8013de8:	4258      	negs	r0, r3
 8013dea:	4158      	adcs	r0, r3
 8013dec:	f886 0076 	strb.w	r0, [r6, #118]	; 0x76
 8013df0:	6822      	ldr	r2, [r4, #0]
 8013df2:	6963      	ldr	r3, [r4, #20]
 8013df4:	9303      	str	r3, [sp, #12]
 8013df6:	2500      	movs	r5, #0
 8013df8:	6165      	str	r5, [r4, #20]
 8013dfa:	4620      	mov	r0, r4
 8013dfc:	6892      	ldr	r2, [r2, #8]
 8013dfe:	a906      	add	r1, sp, #24
 8013e00:	4790      	blx	r2
 8013e02:	9b03      	ldr	r3, [sp, #12]
 8013e04:	6163      	str	r3, [r4, #20]
 8013e06:	f886 5076 	strb.w	r5, [r6, #118]	; 0x76
 8013e0a:	6823      	ldr	r3, [r4, #0]
 8013e0c:	f884 b025 	strb.w	fp, [r4, #37]	; 0x25
 8013e10:	4620      	mov	r0, r4
 8013e12:	4c11      	ldr	r4, [pc, #68]	; (8013e58 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>)
 8013e14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013e16:	4652      	mov	r2, sl
 8013e18:	4649      	mov	r1, r9
 8013e1a:	4798      	blx	r3
 8013e1c:	6820      	ldr	r0, [r4, #0]
 8013e1e:	9b02      	ldr	r3, [sp, #8]
 8013e20:	9a00      	ldr	r2, [sp, #0]
 8013e22:	e9c0 370f 	strd	r3, r7, [r0, #60]	; 0x3c
 8013e26:	4b0d      	ldr	r3, [pc, #52]	; (8013e5c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15c>)
 8013e28:	801a      	strh	r2, [r3, #0]
 8013e2a:	4b0a      	ldr	r3, [pc, #40]	; (8013e54 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>)
 8013e2c:	9a01      	ldr	r2, [sp, #4]
 8013e2e:	801a      	strh	r2, [r3, #0]
 8013e30:	6803      	ldr	r3, [r0, #0]
 8013e32:	6a1b      	ldr	r3, [r3, #32]
 8013e34:	4798      	blx	r3
 8013e36:	6820      	ldr	r0, [r4, #0]
 8013e38:	6803      	ldr	r3, [r0, #0]
 8013e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e3c:	4798      	blx	r3
 8013e3e:	b009      	add	sp, #36	; 0x24
 8013e40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e44:	6810      	ldr	r0, [r2, #0]
 8013e46:	6851      	ldr	r1, [r2, #4]
 8013e48:	ab06      	add	r3, sp, #24
 8013e4a:	c303      	stmia	r3!, {r0, r1}
 8013e4c:	e7b6      	b.n	8013dbc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xbc>
 8013e4e:	2000      	movs	r0, #0
 8013e50:	e7cc      	b.n	8013dec <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xec>
 8013e52:	bf00      	nop
 8013e54:	2000d1a0 	.word	0x2000d1a0
 8013e58:	2000d1a4 	.word	0x2000d1a4
 8013e5c:	2000d19e 	.word	0x2000d19e

08013e60 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 8013e60:	b510      	push	{r4, lr}
 8013e62:	4b07      	ldr	r3, [pc, #28]	; (8013e80 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 8013e64:	781b      	ldrb	r3, [r3, #0]
 8013e66:	4604      	mov	r4, r0
 8013e68:	b13b      	cbz	r3, 8013e7a <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8013e6a:	6803      	ldr	r3, [r0, #0]
 8013e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013e6e:	4798      	blx	r3
 8013e70:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8013e72:	4283      	cmp	r3, r0
 8013e74:	d101      	bne.n	8013e7a <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8013e76:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8013e78:	bd10      	pop	{r4, pc}
 8013e7a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8013e7c:	e7fc      	b.n	8013e78 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 8013e7e:	bf00      	nop
 8013e80:	2000d1a2 	.word	0x2000d1a2

08013e84 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8013e84:	b510      	push	{r4, lr}
 8013e86:	4b0b      	ldr	r3, [pc, #44]	; (8013eb4 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x30>)
 8013e88:	781b      	ldrb	r3, [r3, #0]
 8013e8a:	4604      	mov	r4, r0
 8013e8c:	b95b      	cbnz	r3, 8013ea6 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8013e8e:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 8013e92:	2b02      	cmp	r3, #2
 8013e94:	d007      	beq.n	8013ea6 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8013e96:	6840      	ldr	r0, [r0, #4]
 8013e98:	f000 fbc8 	bl	801462c <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8013e9c:	b118      	cbz	r0, 8013ea6 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8013e9e:	6862      	ldr	r2, [r4, #4]
 8013ea0:	7a53      	ldrb	r3, [r2, #9]
 8013ea2:	2b00      	cmp	r3, #0
 8013ea4:	d0fc      	beq.n	8013ea0 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8013ea6:	f7ee f8a5 	bl	8001ff4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8013eaa:	4620      	mov	r0, r4
 8013eac:	f7ff ffd8 	bl	8013e60 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8013eb0:	bd10      	pop	{r4, pc}
 8013eb2:	bf00      	nop
 8013eb4:	2000d1a2 	.word	0x2000d1a2

08013eb8 <_ZN8touchgfx3HAL10initializeEv>:
 8013eb8:	b510      	push	{r4, lr}
 8013eba:	4604      	mov	r4, r0
 8013ebc:	f7ee f876 	bl	8001fac <_ZN8touchgfx10OSWrappers10initializeEv>
 8013ec0:	6860      	ldr	r0, [r4, #4]
 8013ec2:	6803      	ldr	r3, [r0, #0]
 8013ec4:	68db      	ldr	r3, [r3, #12]
 8013ec6:	4798      	blx	r3
 8013ec8:	68e0      	ldr	r0, [r4, #12]
 8013eca:	6803      	ldr	r3, [r0, #0]
 8013ecc:	689b      	ldr	r3, [r3, #8]
 8013ece:	4798      	blx	r3
 8013ed0:	6823      	ldr	r3, [r4, #0]
 8013ed2:	4620      	mov	r0, r4
 8013ed4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013ed6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013eda:	4718      	bx	r3

08013edc <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>:
 8013edc:	b508      	push	{r3, lr}
 8013ede:	290c      	cmp	r1, #12
 8013ee0:	d817      	bhi.n	8013f12 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x36>
 8013ee2:	e8df f001 	tbb	[pc, r1]
 8013ee6:	090b      	.short	0x090b
 8013ee8:	0d0d0d07 	.word	0x0d0d0d07
 8013eec:	1414140d 	.word	0x1414140d
 8013ef0:	1414      	.short	0x1414
 8013ef2:	0d          	.byte	0x0d
 8013ef3:	00          	.byte	0x00
 8013ef4:	2020      	movs	r0, #32
 8013ef6:	bd08      	pop	{r3, pc}
 8013ef8:	2018      	movs	r0, #24
 8013efa:	e7fc      	b.n	8013ef6 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8013efc:	2010      	movs	r0, #16
 8013efe:	e7fa      	b.n	8013ef6 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8013f00:	4b05      	ldr	r3, [pc, #20]	; (8013f18 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x3c>)
 8013f02:	4a06      	ldr	r2, [pc, #24]	; (8013f1c <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x40>)
 8013f04:	4806      	ldr	r0, [pc, #24]	; (8013f20 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x44>)
 8013f06:	f44f 710c 	mov.w	r1, #560	; 0x230
 8013f0a:	f00e fc71 	bl	80227f0 <__assert_func>
 8013f0e:	2008      	movs	r0, #8
 8013f10:	e7f1      	b.n	8013ef6 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8013f12:	2000      	movs	r0, #0
 8013f14:	e7ef      	b.n	8013ef6 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8013f16:	bf00      	nop
 8013f18:	080257db 	.word	0x080257db
 8013f1c:	08025b70 	.word	0x08025b70
 8013f20:	080256e2 	.word	0x080256e2

08013f24 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>:
 8013f24:	b570      	push	{r4, r5, r6, lr}
 8013f26:	460d      	mov	r5, r1
 8013f28:	f89d 1014 	ldrb.w	r1, [sp, #20]
 8013f2c:	4616      	mov	r6, r2
 8013f2e:	461c      	mov	r4, r3
 8013f30:	f7ff ffd4 	bl	8013edc <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>
 8013f34:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8013f38:	10c0      	asrs	r0, r0, #3
 8013f3a:	fb06 5101 	mla	r1, r6, r1, r5
 8013f3e:	fb00 4001 	mla	r0, r0, r1, r4
 8013f42:	bd70      	pop	{r4, r5, r6, pc}

08013f44 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>:
 8013f44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013f48:	b08a      	sub	sp, #40	; 0x28
 8013f4a:	f04f 0c00 	mov.w	ip, #0
 8013f4e:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
 8013f52:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 8013f56:	f8bd 5050 	ldrh.w	r5, [sp, #80]	; 0x50
 8013f5a:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
 8013f5e:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 8013f62:	f8cd c020 	str.w	ip, [sp, #32]
 8013f66:	f1b8 0f02 	cmp.w	r8, #2
 8013f6a:	4604      	mov	r4, r0
 8013f6c:	469a      	mov	sl, r3
 8013f6e:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 8013f72:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8013f76:	d030      	beq.n	8013fda <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x96>
 8013f78:	2bff      	cmp	r3, #255	; 0xff
 8013f7a:	d12c      	bne.n	8013fd6 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x92>
 8013f7c:	4560      	cmp	r0, ip
 8013f7e:	bf14      	ite	ne
 8013f80:	2004      	movne	r0, #4
 8013f82:	2001      	moveq	r0, #1
 8013f84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013f88:	9204      	str	r2, [sp, #16]
 8013f8a:	4620      	mov	r0, r4
 8013f8c:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 8013f90:	f8ad 201c 	strh.w	r2, [sp, #28]
 8013f94:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8013f98:	f8ad 6018 	strh.w	r6, [sp, #24]
 8013f9c:	f8ad 501a 	strh.w	r5, [sp, #26]
 8013fa0:	f7ff ff5e 	bl	8013e60 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8013fa4:	e9cd 9700 	strd	r9, r7, [sp]
 8013fa8:	4603      	mov	r3, r0
 8013faa:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 8013fae:	4651      	mov	r1, sl
 8013fb0:	4620      	mov	r0, r4
 8013fb2:	f7ff ffb7 	bl	8013f24 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8013fb6:	f8ad 901e 	strh.w	r9, [sp, #30]
 8013fba:	9005      	str	r0, [sp, #20]
 8013fbc:	f88d 8025 	strb.w	r8, [sp, #37]	; 0x25
 8013fc0:	f88d 7026 	strb.w	r7, [sp, #38]	; 0x26
 8013fc4:	b106      	cbz	r6, 8013fc8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x84>
 8013fc6:	b98d      	cbnz	r5, 8013fec <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa8>
 8013fc8:	4b12      	ldr	r3, [pc, #72]	; (8014014 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd0>)
 8013fca:	4a13      	ldr	r2, [pc, #76]	; (8014018 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 8013fcc:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8013fd0:	4812      	ldr	r0, [pc, #72]	; (801401c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd8>)
 8013fd2:	f00e fc0d 	bl	80227f0 <__assert_func>
 8013fd6:	2004      	movs	r0, #4
 8013fd8:	e7d4      	b.n	8013f84 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 8013fda:	2bff      	cmp	r3, #255	; 0xff
 8013fdc:	d104      	bne.n	8013fe8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa4>
 8013fde:	2800      	cmp	r0, #0
 8013fe0:	bf14      	ite	ne
 8013fe2:	2040      	movne	r0, #64	; 0x40
 8013fe4:	2020      	moveq	r0, #32
 8013fe6:	e7cd      	b.n	8013f84 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 8013fe8:	2040      	movs	r0, #64	; 0x40
 8013fea:	e7cb      	b.n	8013f84 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 8013fec:	6823      	ldr	r3, [r4, #0]
 8013fee:	9d02      	ldr	r5, [sp, #8]
 8013ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013ff2:	4620      	mov	r0, r4
 8013ff4:	4798      	blx	r3
 8013ff6:	4228      	tst	r0, r5
 8013ff8:	d104      	bne.n	8014004 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xc0>
 8013ffa:	4b09      	ldr	r3, [pc, #36]	; (8014020 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xdc>)
 8013ffc:	4a06      	ldr	r2, [pc, #24]	; (8014018 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 8013ffe:	f240 11b1 	movw	r1, #433	; 0x1b1
 8014002:	e7e5      	b.n	8013fd0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x8c>
 8014004:	6860      	ldr	r0, [r4, #4]
 8014006:	6803      	ldr	r3, [r0, #0]
 8014008:	a902      	add	r1, sp, #8
 801400a:	685b      	ldr	r3, [r3, #4]
 801400c:	4798      	blx	r3
 801400e:	b00a      	add	sp, #40	; 0x28
 8014010:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014014:	0802575e 	.word	0x0802575e
 8014018:	08025a12 	.word	0x08025a12
 801401c:	080256e2 	.word	0x080256e2
 8014020:	08025796 	.word	0x08025796

08014024 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_>:
 8014024:	b510      	push	{r4, lr}
 8014026:	b08a      	sub	sp, #40	; 0x28
 8014028:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 801402c:	9408      	str	r4, [sp, #32]
 801402e:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 8014032:	9407      	str	r4, [sp, #28]
 8014034:	f8bd 4044 	ldrh.w	r4, [sp, #68]	; 0x44
 8014038:	9406      	str	r4, [sp, #24]
 801403a:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 801403e:	9405      	str	r4, [sp, #20]
 8014040:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
 8014044:	9404      	str	r4, [sp, #16]
 8014046:	f8bd 4038 	ldrh.w	r4, [sp, #56]	; 0x38
 801404a:	9403      	str	r4, [sp, #12]
 801404c:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
 8014050:	9402      	str	r4, [sp, #8]
 8014052:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 8014056:	e9cd 3400 	strd	r3, r4, [sp]
 801405a:	4613      	mov	r3, r2
 801405c:	2200      	movs	r2, #0
 801405e:	f7ff ff71 	bl	8013f44 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8014062:	b00a      	add	sp, #40	; 0x28
 8014064:	bd10      	pop	{r4, pc}
	...

08014068 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb>:
 8014068:	b5f0      	push	{r4, r5, r6, r7, lr}
 801406a:	b08b      	sub	sp, #44	; 0x2c
 801406c:	4616      	mov	r6, r2
 801406e:	460d      	mov	r5, r1
 8014070:	461f      	mov	r7, r3
 8014072:	4604      	mov	r4, r0
 8014074:	f7ed fd3e 	bl	8001af4 <_ZN8touchgfx3HAL3lcdEv>
 8014078:	6803      	ldr	r3, [r0, #0]
 801407a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801407c:	4798      	blx	r3
 801407e:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8014082:	4b0d      	ldr	r3, [pc, #52]	; (80140b8 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x50>)
 8014084:	881b      	ldrh	r3, [r3, #0]
 8014086:	9306      	str	r3, [sp, #24]
 8014088:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 801408c:	9305      	str	r3, [sp, #20]
 801408e:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8014092:	9304      	str	r3, [sp, #16]
 8014094:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8014098:	9303      	str	r3, [sp, #12]
 801409a:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801409e:	9302      	str	r3, [sp, #8]
 80140a0:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80140a4:	2200      	movs	r2, #0
 80140a6:	e9cd 7300 	strd	r7, r3, [sp]
 80140aa:	4629      	mov	r1, r5
 80140ac:	4633      	mov	r3, r6
 80140ae:	4620      	mov	r0, r4
 80140b0:	f7ff ff48 	bl	8013f44 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 80140b4:	b00b      	add	sp, #44	; 0x2c
 80140b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80140b8:	2000d19e 	.word	0x2000d19e

080140bc <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth>:
 80140bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80140c0:	461f      	mov	r7, r3
 80140c2:	4b14      	ldr	r3, [pc, #80]	; (8014114 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x58>)
 80140c4:	b08a      	sub	sp, #40	; 0x28
 80140c6:	4616      	mov	r6, r2
 80140c8:	f8b3 8000 	ldrh.w	r8, [r3]
 80140cc:	460d      	mov	r5, r1
 80140ce:	4604      	mov	r4, r0
 80140d0:	f7ed fd10 	bl	8001af4 <_ZN8touchgfx3HAL3lcdEv>
 80140d4:	6803      	ldr	r3, [r0, #0]
 80140d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80140d8:	4798      	blx	r3
 80140da:	2302      	movs	r3, #2
 80140dc:	e9cd 8306 	strd	r8, r3, [sp, #24]
 80140e0:	2301      	movs	r3, #1
 80140e2:	9305      	str	r3, [sp, #20]
 80140e4:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 80140e8:	9304      	str	r3, [sp, #16]
 80140ea:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80140ee:	9303      	str	r3, [sp, #12]
 80140f0:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 80140f4:	9302      	str	r3, [sp, #8]
 80140f6:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80140fa:	9008      	str	r0, [sp, #32]
 80140fc:	e9cd 7300 	strd	r7, r3, [sp]
 8014100:	2200      	movs	r2, #0
 8014102:	4633      	mov	r3, r6
 8014104:	4629      	mov	r1, r5
 8014106:	4620      	mov	r0, r4
 8014108:	f7ff ff1c 	bl	8013f44 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801410c:	b00a      	add	sp, #40	; 0x28
 801410e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014112:	bf00      	nop
 8014114:	2000d19e 	.word	0x2000d19e

08014118 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE>:
 8014118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801411c:	b08b      	sub	sp, #44	; 0x2c
 801411e:	469b      	mov	fp, r3
 8014120:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 8014124:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
 8014128:	f8bd 805c 	ldrh.w	r8, [sp, #92]	; 0x5c
 801412c:	2fff      	cmp	r7, #255	; 0xff
 801412e:	bf14      	ite	ne
 8014130:	2308      	movne	r3, #8
 8014132:	2302      	moveq	r3, #2
 8014134:	2600      	movs	r6, #0
 8014136:	4604      	mov	r4, r0
 8014138:	4689      	mov	r9, r1
 801413a:	4692      	mov	sl, r2
 801413c:	e9cd 3602 	strd	r3, r6, [sp, #8]
 8014140:	9608      	str	r6, [sp, #32]
 8014142:	f7ff fe8d 	bl	8013e60 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8014146:	e9cd 8500 	strd	r8, r5, [sp]
 801414a:	4603      	mov	r3, r0
 801414c:	465a      	mov	r2, fp
 801414e:	4651      	mov	r1, sl
 8014150:	4620      	mov	r0, r4
 8014152:	f7ff fee7 	bl	8013f24 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8014156:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 801415a:	f8ad 3018 	strh.w	r3, [sp, #24]
 801415e:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8014162:	f8ad 301a 	strh.w	r3, [sp, #26]
 8014166:	6823      	ldr	r3, [r4, #0]
 8014168:	9005      	str	r0, [sp, #20]
 801416a:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 801416e:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
 8014172:	f8ad 601c 	strh.w	r6, [sp, #28]
 8014176:	f8ad 801e 	strh.w	r8, [sp, #30]
 801417a:	f8cd 9020 	str.w	r9, [sp, #32]
 801417e:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
 8014182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014184:	9d02      	ldr	r5, [sp, #8]
 8014186:	4620      	mov	r0, r4
 8014188:	4798      	blx	r3
 801418a:	4228      	tst	r0, r5
 801418c:	d106      	bne.n	801419c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x84>
 801418e:	4b07      	ldr	r3, [pc, #28]	; (80141ac <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x94>)
 8014190:	4a07      	ldr	r2, [pc, #28]	; (80141b0 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x98>)
 8014192:	4808      	ldr	r0, [pc, #32]	; (80141b4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x9c>)
 8014194:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
 8014198:	f00e fb2a 	bl	80227f0 <__assert_func>
 801419c:	6860      	ldr	r0, [r4, #4]
 801419e:	6803      	ldr	r3, [r0, #0]
 80141a0:	a902      	add	r1, sp, #8
 80141a2:	685b      	ldr	r3, [r3, #4]
 80141a4:	4798      	blx	r3
 80141a6:	b00b      	add	sp, #44	; 0x2c
 80141a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80141ac:	08025796 	.word	0x08025796
 80141b0:	08025adb 	.word	0x08025adb
 80141b4:	080256e2 	.word	0x080256e2

080141b8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 80141b8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80141bc:	461f      	mov	r7, r3
 80141be:	4b0b      	ldr	r3, [pc, #44]	; (80141ec <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 80141c0:	460d      	mov	r5, r1
 80141c2:	f8b3 8000 	ldrh.w	r8, [r3]
 80141c6:	4616      	mov	r6, r2
 80141c8:	4604      	mov	r4, r0
 80141ca:	f7ed fc93 	bl	8001af4 <_ZN8touchgfx3HAL3lcdEv>
 80141ce:	6803      	ldr	r3, [r0, #0]
 80141d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80141d2:	4798      	blx	r3
 80141d4:	463b      	mov	r3, r7
 80141d6:	e9cd 8000 	strd	r8, r0, [sp]
 80141da:	4632      	mov	r2, r6
 80141dc:	4629      	mov	r1, r5
 80141de:	4620      	mov	r0, r4
 80141e0:	f7ff fea0 	bl	8013f24 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 80141e4:	b002      	add	sp, #8
 80141e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80141ea:	bf00      	nop
 80141ec:	2000d19e 	.word	0x2000d19e

080141f0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE>:
 80141f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80141f4:	b088      	sub	sp, #32
 80141f6:	4698      	mov	r8, r3
 80141f8:	2300      	movs	r3, #0
 80141fa:	9306      	str	r3, [sp, #24]
 80141fc:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8014200:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 8014204:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8014208:	f8ad 6010 	strh.w	r6, [sp, #16]
 801420c:	e9cd 3100 	strd	r3, r1, [sp]
 8014210:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8014214:	f8ad 3014 	strh.w	r3, [sp, #20]
 8014218:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 801421c:	f88d 301c 	strb.w	r3, [sp, #28]
 8014220:	4617      	mov	r7, r2
 8014222:	4604      	mov	r4, r0
 8014224:	f8ad 5012 	strh.w	r5, [sp, #18]
 8014228:	f7ff fe1a 	bl	8013e60 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801422c:	4642      	mov	r2, r8
 801422e:	4603      	mov	r3, r0
 8014230:	4639      	mov	r1, r7
 8014232:	4620      	mov	r0, r4
 8014234:	f7ff ffc0 	bl	80141b8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8014238:	4b16      	ldr	r3, [pc, #88]	; (8014294 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa4>)
 801423a:	9003      	str	r0, [sp, #12]
 801423c:	881b      	ldrh	r3, [r3, #0]
 801423e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8014242:	f7ed fc57 	bl	8001af4 <_ZN8touchgfx3HAL3lcdEv>
 8014246:	6803      	ldr	r3, [r0, #0]
 8014248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801424a:	4798      	blx	r3
 801424c:	f88d 001e 	strb.w	r0, [sp, #30]
 8014250:	f88d 001d 	strb.w	r0, [sp, #29]
 8014254:	b106      	cbz	r6, 8014258 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x68>
 8014256:	b935      	cbnz	r5, 8014266 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x76>
 8014258:	4b0f      	ldr	r3, [pc, #60]	; (8014298 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa8>)
 801425a:	4a10      	ldr	r2, [pc, #64]	; (801429c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 801425c:	f240 11cd 	movw	r1, #461	; 0x1cd
 8014260:	480f      	ldr	r0, [pc, #60]	; (80142a0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb0>)
 8014262:	f00e fac5 	bl	80227f0 <__assert_func>
 8014266:	6823      	ldr	r3, [r4, #0]
 8014268:	9d00      	ldr	r5, [sp, #0]
 801426a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801426c:	4620      	mov	r0, r4
 801426e:	4798      	blx	r3
 8014270:	4228      	tst	r0, r5
 8014272:	d104      	bne.n	801427e <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x8e>
 8014274:	4b0b      	ldr	r3, [pc, #44]	; (80142a4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb4>)
 8014276:	4a09      	ldr	r2, [pc, #36]	; (801429c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 8014278:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
 801427c:	e7f0      	b.n	8014260 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x70>
 801427e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014280:	6860      	ldr	r0, [r4, #4]
 8014282:	9306      	str	r3, [sp, #24]
 8014284:	6803      	ldr	r3, [r0, #0]
 8014286:	4669      	mov	r1, sp
 8014288:	685b      	ldr	r3, [r3, #4]
 801428a:	4798      	blx	r3
 801428c:	b008      	add	sp, #32
 801428e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014292:	bf00      	nop
 8014294:	2000d19e 	.word	0x2000d19e
 8014298:	0802575e 	.word	0x0802575e
 801429c:	080258c4 	.word	0x080258c4
 80142a0:	080256e2 	.word	0x080256e2
 80142a4:	08025796 	.word	0x08025796

080142a8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 80142a8:	b570      	push	{r4, r5, r6, lr}
 80142aa:	b08a      	sub	sp, #40	; 0x28
 80142ac:	466b      	mov	r3, sp
 80142ae:	e883 0006 	stmia.w	r3, {r1, r2}
 80142b2:	4b20      	ldr	r3, [pc, #128]	; (8014334 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x8c>)
 80142b4:	781b      	ldrb	r3, [r3, #0]
 80142b6:	4604      	mov	r4, r0
 80142b8:	b933      	cbnz	r3, 80142c8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x20>
 80142ba:	4b1f      	ldr	r3, [pc, #124]	; (8014338 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x90>)
 80142bc:	4a1f      	ldr	r2, [pc, #124]	; (801433c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x94>)
 80142be:	4820      	ldr	r0, [pc, #128]	; (8014340 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x98>)
 80142c0:	f240 11f9 	movw	r1, #505	; 0x1f9
 80142c4:	f00e fa94 	bl	80227f0 <__assert_func>
 80142c8:	2300      	movs	r3, #0
 80142ca:	9308      	str	r3, [sp, #32]
 80142cc:	2301      	movs	r3, #1
 80142ce:	9302      	str	r3, [sp, #8]
 80142d0:	6803      	ldr	r3, [r0, #0]
 80142d2:	f8bd 5000 	ldrh.w	r5, [sp]
 80142d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80142d8:	f8bd 6002 	ldrh.w	r6, [sp, #2]
 80142dc:	4798      	blx	r3
 80142de:	4632      	mov	r2, r6
 80142e0:	4629      	mov	r1, r5
 80142e2:	4603      	mov	r3, r0
 80142e4:	4620      	mov	r0, r4
 80142e6:	f7ff ff67 	bl	80141b8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80142ea:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80142ec:	9305      	str	r3, [sp, #20]
 80142ee:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80142f2:	f8ad 3018 	strh.w	r3, [sp, #24]
 80142f6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80142fa:	f8ad 301a 	strh.w	r3, [sp, #26]
 80142fe:	4b11      	ldr	r3, [pc, #68]	; (8014344 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x9c>)
 8014300:	9003      	str	r0, [sp, #12]
 8014302:	881b      	ldrh	r3, [r3, #0]
 8014304:	f8ad 301c 	strh.w	r3, [sp, #28]
 8014308:	f8ad 301e 	strh.w	r3, [sp, #30]
 801430c:	f7ed fbf2 	bl	8001af4 <_ZN8touchgfx3HAL3lcdEv>
 8014310:	6803      	ldr	r3, [r0, #0]
 8014312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014314:	4798      	blx	r3
 8014316:	23ff      	movs	r3, #255	; 0xff
 8014318:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 801431c:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 8014320:	6860      	ldr	r0, [r4, #4]
 8014322:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8014326:	6803      	ldr	r3, [r0, #0]
 8014328:	a902      	add	r1, sp, #8
 801432a:	685b      	ldr	r3, [r3, #4]
 801432c:	4798      	blx	r3
 801432e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8014330:	b00a      	add	sp, #40	; 0x28
 8014332:	bd70      	pop	{r4, r5, r6, pc}
 8014334:	2000d1a3 	.word	0x2000d1a3
 8014338:	0802562f 	.word	0x0802562f
 801433c:	08025968 	.word	0x08025968
 8014340:	080256e2 	.word	0x080256e2
 8014344:	2000d19e 	.word	0x2000d19e

08014348 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8014348:	b5f0      	push	{r4, r5, r6, r7, lr}
 801434a:	b08b      	sub	sp, #44	; 0x2c
 801434c:	466d      	mov	r5, sp
 801434e:	e885 0006 	stmia.w	r5, {r1, r2}
 8014352:	461d      	mov	r5, r3
 8014354:	2300      	movs	r3, #0
 8014356:	9308      	str	r3, [sp, #32]
 8014358:	2301      	movs	r3, #1
 801435a:	9302      	str	r3, [sp, #8]
 801435c:	6803      	ldr	r3, [r0, #0]
 801435e:	f8bd 6000 	ldrh.w	r6, [sp]
 8014362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014364:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8014368:	4604      	mov	r4, r0
 801436a:	4798      	blx	r3
 801436c:	463a      	mov	r2, r7
 801436e:	4631      	mov	r1, r6
 8014370:	4603      	mov	r3, r0
 8014372:	4620      	mov	r0, r4
 8014374:	f7ff ff20 	bl	80141b8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8014378:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801437c:	f8ad 3018 	strh.w	r3, [sp, #24]
 8014380:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8014384:	f8ad 301a 	strh.w	r3, [sp, #26]
 8014388:	4b0e      	ldr	r3, [pc, #56]	; (80143c4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x7c>)
 801438a:	9003      	str	r0, [sp, #12]
 801438c:	881b      	ldrh	r3, [r3, #0]
 801438e:	f8ad 301c 	strh.w	r3, [sp, #28]
 8014392:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014394:	f8ad 301e 	strh.w	r3, [sp, #30]
 8014398:	9505      	str	r5, [sp, #20]
 801439a:	f7ed fbab 	bl	8001af4 <_ZN8touchgfx3HAL3lcdEv>
 801439e:	6803      	ldr	r3, [r0, #0]
 80143a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80143a2:	4798      	blx	r3
 80143a4:	23ff      	movs	r3, #255	; 0xff
 80143a6:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 80143aa:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 80143ae:	6860      	ldr	r0, [r4, #4]
 80143b0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80143b4:	6803      	ldr	r3, [r0, #0]
 80143b6:	a902      	add	r1, sp, #8
 80143b8:	685b      	ldr	r3, [r3, #4]
 80143ba:	4798      	blx	r3
 80143bc:	4628      	mov	r0, r5
 80143be:	b00b      	add	sp, #44	; 0x2c
 80143c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80143c2:	bf00      	nop
 80143c4:	2000d19e 	.word	0x2000d19e

080143c8 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 80143c8:	b570      	push	{r4, r5, r6, lr}
 80143ca:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 80143ce:	4604      	mov	r4, r0
 80143d0:	b19b      	cbz	r3, 80143fa <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 80143d2:	2002      	movs	r0, #2
 80143d4:	f7ed fb4e 	bl	8001a74 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 80143d8:	2300      	movs	r3, #0
 80143da:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 80143de:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 80143e2:	6823      	ldr	r3, [r4, #0]
 80143e4:	4620      	mov	r0, r4
 80143e6:	f8d3 509c 	ldr.w	r5, [r3, #156]	; 0x9c
 80143ea:	f7ff fd39 	bl	8013e60 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80143ee:	462b      	mov	r3, r5
 80143f0:	4601      	mov	r1, r0
 80143f2:	4620      	mov	r0, r4
 80143f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80143f8:	4718      	bx	r3
 80143fa:	bd70      	pop	{r4, r5, r6, pc}

080143fc <_ZN8touchgfx13DMA_Interface10initializeEv>:
 80143fc:	4770      	bx	lr

080143fe <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 80143fe:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 8014402:	1a13      	subs	r3, r2, r0
 8014404:	4258      	negs	r0, r3
 8014406:	4158      	adcs	r0, r3
 8014408:	4770      	bx	lr

0801440a <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 801440a:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 801440e:	1a9b      	subs	r3, r3, r2
 8014410:	2b00      	cmp	r3, #0
 8014412:	bfdc      	itt	le
 8014414:	6882      	ldrle	r2, [r0, #8]
 8014416:	189b      	addle	r3, r3, r2
 8014418:	2b01      	cmp	r3, #1
 801441a:	bfcc      	ite	gt
 801441c:	2000      	movgt	r0, #0
 801441e:	2001      	movle	r0, #1
 8014420:	4770      	bx	lr

08014422 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 8014422:	6902      	ldr	r2, [r0, #16]
 8014424:	6840      	ldr	r0, [r0, #4]
 8014426:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 801442a:	4770      	bx	lr

0801442c <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 801442c:	6803      	ldr	r3, [r0, #0]
 801442e:	691b      	ldr	r3, [r3, #16]
 8014430:	4718      	bx	r3

08014432 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 8014432:	4770      	bx	lr

08014434 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 8014434:	4770      	bx	lr
	...

08014438 <_ZN8touchgfx13DMA_Interface7executeEv>:
 8014438:	b570      	push	{r4, r5, r6, lr}
 801443a:	2301      	movs	r3, #1
 801443c:	7203      	strb	r3, [r0, #8]
 801443e:	4604      	mov	r4, r0
 8014440:	6840      	ldr	r0, [r0, #4]
 8014442:	6803      	ldr	r3, [r0, #0]
 8014444:	699b      	ldr	r3, [r3, #24]
 8014446:	4798      	blx	r3
 8014448:	6803      	ldr	r3, [r0, #0]
 801444a:	2b08      	cmp	r3, #8
 801444c:	4605      	mov	r5, r0
 801444e:	d01e      	beq.n	801448e <_ZN8touchgfx13DMA_Interface7executeEv+0x56>
 8014450:	d80b      	bhi.n	801446a <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8014452:	2b02      	cmp	r3, #2
 8014454:	d027      	beq.n	80144a6 <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 8014456:	2b04      	cmp	r3, #4
 8014458:	d011      	beq.n	801447e <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 801445a:	2b01      	cmp	r3, #1
 801445c:	d028      	beq.n	80144b0 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 801445e:	4b17      	ldr	r3, [pc, #92]	; (80144bc <_ZN8touchgfx13DMA_Interface7executeEv+0x84>)
 8014460:	4a17      	ldr	r2, [pc, #92]	; (80144c0 <_ZN8touchgfx13DMA_Interface7executeEv+0x88>)
 8014462:	4818      	ldr	r0, [pc, #96]	; (80144c4 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>)
 8014464:	218b      	movs	r1, #139	; 0x8b
 8014466:	f00e f9c3 	bl	80227f0 <__assert_func>
 801446a:	2b40      	cmp	r3, #64	; 0x40
 801446c:	d020      	beq.n	80144b0 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 801446e:	d801      	bhi.n	8014474 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 8014470:	2b20      	cmp	r3, #32
 8014472:	e7f3      	b.n	801445c <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 8014474:	2b80      	cmp	r3, #128	; 0x80
 8014476:	d01b      	beq.n	80144b0 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8014478:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801447c:	e7ee      	b.n	801445c <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 801447e:	6823      	ldr	r3, [r4, #0]
 8014480:	7f01      	ldrb	r1, [r0, #28]
 8014482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014484:	4620      	mov	r0, r4
 8014486:	4798      	blx	r3
 8014488:	6823      	ldr	r3, [r4, #0]
 801448a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801448c:	e006      	b.n	801449c <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 801448e:	6823      	ldr	r3, [r4, #0]
 8014490:	7f01      	ldrb	r1, [r0, #28]
 8014492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014494:	4620      	mov	r0, r4
 8014496:	4798      	blx	r3
 8014498:	6823      	ldr	r3, [r4, #0]
 801449a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801449c:	4629      	mov	r1, r5
 801449e:	4620      	mov	r0, r4
 80144a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80144a4:	4718      	bx	r3
 80144a6:	6823      	ldr	r3, [r4, #0]
 80144a8:	4620      	mov	r0, r4
 80144aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80144ac:	4798      	blx	r3
 80144ae:	e7f3      	b.n	8014498 <_ZN8touchgfx13DMA_Interface7executeEv+0x60>
 80144b0:	6823      	ldr	r3, [r4, #0]
 80144b2:	4620      	mov	r0, r4
 80144b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80144b6:	4798      	blx	r3
 80144b8:	e7e6      	b.n	8014488 <_ZN8touchgfx13DMA_Interface7executeEv+0x50>
 80144ba:	bf00      	nop
 80144bc:	08025bb9 	.word	0x08025bb9
 80144c0:	08025cc8 	.word	0x08025cc8
 80144c4:	08025bde 	.word	0x08025bde

080144c8 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 80144c8:	b570      	push	{r4, r5, r6, lr}
 80144ca:	4604      	mov	r4, r0
 80144cc:	460e      	mov	r6, r1
 80144ce:	6860      	ldr	r0, [r4, #4]
 80144d0:	6803      	ldr	r3, [r0, #0]
 80144d2:	685b      	ldr	r3, [r3, #4]
 80144d4:	4798      	blx	r3
 80144d6:	2800      	cmp	r0, #0
 80144d8:	d1f9      	bne.n	80144ce <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 80144da:	4d0b      	ldr	r5, [pc, #44]	; (8014508 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x40>)
 80144dc:	6828      	ldr	r0, [r5, #0]
 80144de:	6803      	ldr	r3, [r0, #0]
 80144e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80144e2:	4798      	blx	r3
 80144e4:	f7ed fda2 	bl	800202c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 80144e8:	6860      	ldr	r0, [r4, #4]
 80144ea:	6803      	ldr	r3, [r0, #0]
 80144ec:	4631      	mov	r1, r6
 80144ee:	689b      	ldr	r3, [r3, #8]
 80144f0:	4798      	blx	r3
 80144f2:	6823      	ldr	r3, [r4, #0]
 80144f4:	4620      	mov	r0, r4
 80144f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80144f8:	4798      	blx	r3
 80144fa:	6828      	ldr	r0, [r5, #0]
 80144fc:	6803      	ldr	r3, [r0, #0]
 80144fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014502:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8014504:	4718      	bx	r3
 8014506:	bf00      	nop
 8014508:	2000d1a4 	.word	0x2000d1a4

0801450c <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 801450c:	b508      	push	{r3, lr}
 801450e:	f7ed fd71 	bl	8001ff4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8014512:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8014516:	f7ed bd7b 	b.w	8002010 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0801451a <_ZN8touchgfx13DMA_Interface5startEv>:
 801451a:	b510      	push	{r4, lr}
 801451c:	4604      	mov	r4, r0
 801451e:	6840      	ldr	r0, [r0, #4]
 8014520:	6803      	ldr	r3, [r0, #0]
 8014522:	681b      	ldr	r3, [r3, #0]
 8014524:	4798      	blx	r3
 8014526:	b948      	cbnz	r0, 801453c <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8014528:	7a63      	ldrb	r3, [r4, #9]
 801452a:	b13b      	cbz	r3, 801453c <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801452c:	7a23      	ldrb	r3, [r4, #8]
 801452e:	b92b      	cbnz	r3, 801453c <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8014530:	6823      	ldr	r3, [r4, #0]
 8014532:	4620      	mov	r0, r4
 8014534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014536:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801453a:	4718      	bx	r3
 801453c:	bd10      	pop	{r4, pc}
	...

08014540 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8014540:	b510      	push	{r4, lr}
 8014542:	e9d0 4203 	ldrd	r4, r2, [r0, #12]
 8014546:	1b12      	subs	r2, r2, r4
 8014548:	2a00      	cmp	r2, #0
 801454a:	bfdc      	itt	le
 801454c:	6883      	ldrle	r3, [r0, #8]
 801454e:	18d2      	addle	r2, r2, r3
 8014550:	2a01      	cmp	r2, #1
 8014552:	dd18      	ble.n	8014586 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x46>
 8014554:	6843      	ldr	r3, [r0, #4]
 8014556:	f101 021c 	add.w	r2, r1, #28
 801455a:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 801455e:	f851 4b04 	ldr.w	r4, [r1], #4
 8014562:	f843 4b04 	str.w	r4, [r3], #4
 8014566:	4291      	cmp	r1, r2
 8014568:	d1f9      	bne.n	801455e <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x1e>
 801456a:	880a      	ldrh	r2, [r1, #0]
 801456c:	801a      	strh	r2, [r3, #0]
 801456e:	788a      	ldrb	r2, [r1, #2]
 8014570:	709a      	strb	r2, [r3, #2]
 8014572:	68c3      	ldr	r3, [r0, #12]
 8014574:	6882      	ldr	r2, [r0, #8]
 8014576:	f3bf 8f5b 	dmb	ish
 801457a:	3301      	adds	r3, #1
 801457c:	429a      	cmp	r2, r3
 801457e:	bfd8      	it	le
 8014580:	1a9b      	suble	r3, r3, r2
 8014582:	60c3      	str	r3, [r0, #12]
 8014584:	bd10      	pop	{r4, pc}
 8014586:	4b03      	ldr	r3, [pc, #12]	; (8014594 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
 8014588:	4a03      	ldr	r2, [pc, #12]	; (8014598 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x58>)
 801458a:	4804      	ldr	r0, [pc, #16]	; (801459c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x5c>)
 801458c:	2139      	movs	r1, #57	; 0x39
 801458e:	f00e f92f 	bl	80227f0 <__assert_func>
 8014592:	bf00      	nop
 8014594:	08025c04 	.word	0x08025c04
 8014598:	08025cf8 	.word	0x08025cf8
 801459c:	08025bde 	.word	0x08025bde

080145a0 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 80145a0:	b510      	push	{r4, lr}
 80145a2:	6803      	ldr	r3, [r0, #0]
 80145a4:	681b      	ldr	r3, [r3, #0]
 80145a6:	4604      	mov	r4, r0
 80145a8:	4798      	blx	r3
 80145aa:	b128      	cbz	r0, 80145b8 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
 80145ac:	4b07      	ldr	r3, [pc, #28]	; (80145cc <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
 80145ae:	4a08      	ldr	r2, [pc, #32]	; (80145d0 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 80145b0:	4808      	ldr	r0, [pc, #32]	; (80145d4 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 80145b2:	213f      	movs	r1, #63	; 0x3f
 80145b4:	f00e f91c 	bl	80227f0 <__assert_func>
 80145b8:	6923      	ldr	r3, [r4, #16]
 80145ba:	68a2      	ldr	r2, [r4, #8]
 80145bc:	f3bf 8f5b 	dmb	ish
 80145c0:	3301      	adds	r3, #1
 80145c2:	429a      	cmp	r2, r3
 80145c4:	bfd8      	it	le
 80145c6:	1a9b      	suble	r3, r3, r2
 80145c8:	6123      	str	r3, [r4, #16]
 80145ca:	bd10      	pop	{r4, pc}
 80145cc:	08025c27 	.word	0x08025c27
 80145d0:	08025d46 	.word	0x08025d46
 80145d4:	08025bde 	.word	0x08025bde

080145d8 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 80145d8:	b570      	push	{r4, r5, r6, lr}
 80145da:	4604      	mov	r4, r0
 80145dc:	6840      	ldr	r0, [r0, #4]
 80145de:	6803      	ldr	r3, [r0, #0]
 80145e0:	681b      	ldr	r3, [r3, #0]
 80145e2:	4798      	blx	r3
 80145e4:	4605      	mov	r5, r0
 80145e6:	b930      	cbnz	r0, 80145f6 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 80145e8:	7a23      	ldrb	r3, [r4, #8]
 80145ea:	b123      	cbz	r3, 80145f6 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 80145ec:	6860      	ldr	r0, [r4, #4]
 80145ee:	6803      	ldr	r3, [r0, #0]
 80145f0:	695b      	ldr	r3, [r3, #20]
 80145f2:	4798      	blx	r3
 80145f4:	7225      	strb	r5, [r4, #8]
 80145f6:	6860      	ldr	r0, [r4, #4]
 80145f8:	6803      	ldr	r3, [r0, #0]
 80145fa:	681b      	ldr	r3, [r3, #0]
 80145fc:	4798      	blx	r3
 80145fe:	b928      	cbnz	r0, 801460c <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8014600:	6823      	ldr	r3, [r4, #0]
 8014602:	4620      	mov	r0, r4
 8014604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014606:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801460a:	4718      	bx	r3
 801460c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014610:	f7ed bd18 	b.w	8002044 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

08014614 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8014614:	b510      	push	{r4, lr}
 8014616:	4c04      	ldr	r4, [pc, #16]	; (8014628 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8014618:	6082      	str	r2, [r0, #8]
 801461a:	2200      	movs	r2, #0
 801461c:	e9c0 4100 	strd	r4, r1, [r0]
 8014620:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8014624:	bd10      	pop	{r4, pc}
 8014626:	bf00      	nop
 8014628:	08025cac 	.word	0x08025cac

0801462c <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 801462c:	6840      	ldr	r0, [r0, #4]
 801462e:	6803      	ldr	r3, [r0, #0]
 8014630:	681b      	ldr	r3, [r3, #0]
 8014632:	4718      	bx	r3

08014634 <_ZN8touchgfx21AbstractPainterRGB88810renderInitEv>:
 8014634:	2001      	movs	r0, #1
 8014636:	4770      	bx	lr

08014638 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh>:
 8014638:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801463c:	460d      	mov	r5, r1
 801463e:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 8014642:	b085      	sub	sp, #20
 8014644:	4411      	add	r1, r2
 8014646:	60c1      	str	r1, [r0, #12]
 8014648:	4690      	mov	r8, r2
 801464a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801464c:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8014650:	4699      	mov	r9, r3
 8014652:	440a      	add	r2, r1
 8014654:	6803      	ldr	r3, [r0, #0]
 8014656:	6102      	str	r2, [r0, #16]
 8014658:	68db      	ldr	r3, [r3, #12]
 801465a:	4604      	mov	r4, r0
 801465c:	e9dd 670d 	ldrd	r6, r7, [sp, #52]	; 0x34
 8014660:	4798      	blx	r3
 8014662:	2800      	cmp	r0, #0
 8014664:	d039      	beq.n	80146da <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0xa2>
 8014666:	44c8      	add	r8, r9
 8014668:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801466c:	4445      	add	r5, r8
 801466e:	6823      	ldr	r3, [r4, #0]
 8014670:	f10d 020f 	add.w	r2, sp, #15
 8014674:	9200      	str	r2, [sp, #0]
 8014676:	f8d3 8010 	ldr.w	r8, [r3, #16]
 801467a:	f10d 020d 	add.w	r2, sp, #13
 801467e:	f10d 030e 	add.w	r3, sp, #14
 8014682:	a903      	add	r1, sp, #12
 8014684:	4620      	mov	r0, r4
 8014686:	47c0      	blx	r8
 8014688:	b1f8      	cbz	r0, 80146ca <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x92>
 801468a:	f89d 300f 	ldrb.w	r3, [sp, #15]
 801468e:	7a20      	ldrb	r0, [r4, #8]
 8014690:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8014694:	f89d 100e 	ldrb.w	r1, [sp, #14]
 8014698:	4358      	muls	r0, r3
 801469a:	1c43      	adds	r3, r0, #1
 801469c:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 80146a0:	f817 0b01 	ldrb.w	r0, [r7], #1
 80146a4:	121b      	asrs	r3, r3, #8
 80146a6:	fb10 f003 	smulbb	r0, r0, r3
 80146aa:	b283      	uxth	r3, r0
 80146ac:	1c58      	adds	r0, r3, #1
 80146ae:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80146b2:	1200      	asrs	r0, r0, #8
 80146b4:	6823      	ldr	r3, [r4, #0]
 80146b6:	28ff      	cmp	r0, #255	; 0xff
 80146b8:	f8d3 8014 	ldr.w	r8, [r3, #20]
 80146bc:	f89d 300d 	ldrb.w	r3, [sp, #13]
 80146c0:	d10e      	bne.n	80146e0 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0xa8>
 80146c2:	9100      	str	r1, [sp, #0]
 80146c4:	4629      	mov	r1, r5
 80146c6:	4620      	mov	r0, r4
 80146c8:	47c0      	blx	r8
 80146ca:	68e3      	ldr	r3, [r4, #12]
 80146cc:	3e01      	subs	r6, #1
 80146ce:	f103 0301 	add.w	r3, r3, #1
 80146d2:	f105 0503 	add.w	r5, r5, #3
 80146d6:	60e3      	str	r3, [r4, #12]
 80146d8:	d1c9      	bne.n	801466e <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x36>
 80146da:	b005      	add	sp, #20
 80146dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80146e0:	fa1f fc80 	uxth.w	ip, r0
 80146e4:	f895 e002 	ldrb.w	lr, [r5, #2]
 80146e8:	43c0      	mvns	r0, r0
 80146ea:	b2c0      	uxtb	r0, r0
 80146ec:	fb12 f20c 	smulbb	r2, r2, ip
 80146f0:	fb0e 2200 	mla	r2, lr, r0, r2
 80146f4:	f895 e001 	ldrb.w	lr, [r5, #1]
 80146f8:	fb13 f30c 	smulbb	r3, r3, ip
 80146fc:	fb0e 3300 	mla	r3, lr, r0, r3
 8014700:	f895 e000 	ldrb.w	lr, [r5]
 8014704:	b29b      	uxth	r3, r3
 8014706:	fb11 f10c 	smulbb	r1, r1, ip
 801470a:	b292      	uxth	r2, r2
 801470c:	fb0e 1000 	mla	r0, lr, r0, r1
 8014710:	1c59      	adds	r1, r3, #1
 8014712:	b280      	uxth	r0, r0
 8014714:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8014718:	1c51      	adds	r1, r2, #1
 801471a:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801471e:	1c41      	adds	r1, r0, #1
 8014720:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8014724:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8014728:	9000      	str	r0, [sp, #0]
 801472a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801472e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8014732:	e7c7      	b.n	80146c4 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x8c>

08014734 <_ZN8touchgfx21AbstractPainterRGB88811renderPixelEPthhh>:
 8014734:	f89d 0000 	ldrb.w	r0, [sp]
 8014738:	7008      	strb	r0, [r1, #0]
 801473a:	704b      	strb	r3, [r1, #1]
 801473c:	708a      	strb	r2, [r1, #2]
 801473e:	4770      	bx	lr

08014740 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh>:
 8014740:	4413      	add	r3, r2
 8014742:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8014746:	4419      	add	r1, r3
 8014748:	7dc2      	ldrb	r2, [r0, #23]
 801474a:	7a03      	ldrb	r3, [r0, #8]
 801474c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801474e:	435a      	muls	r2, r3
 8014750:	1c53      	adds	r3, r2, #1
 8014752:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8014756:	121b      	asrs	r3, r3, #8
 8014758:	2bff      	cmp	r3, #255	; 0xff
 801475a:	e9dd 7406 	ldrd	r7, r4, [sp, #24]
 801475e:	d13f      	bne.n	80147e0 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0xa0>
 8014760:	4427      	add	r7, r4
 8014762:	f814 3b01 	ldrb.w	r3, [r4], #1
 8014766:	7d86      	ldrb	r6, [r0, #22]
 8014768:	2bff      	cmp	r3, #255	; 0xff
 801476a:	f101 0103 	add.w	r1, r1, #3
 801476e:	d10a      	bne.n	8014786 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x46>
 8014770:	f801 6c03 	strb.w	r6, [r1, #-3]
 8014774:	7d43      	ldrb	r3, [r0, #21]
 8014776:	f801 3c02 	strb.w	r3, [r1, #-2]
 801477a:	7d03      	ldrb	r3, [r0, #20]
 801477c:	f801 3c01 	strb.w	r3, [r1, #-1]
 8014780:	42a7      	cmp	r7, r4
 8014782:	d1ee      	bne.n	8014762 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x22>
 8014784:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014786:	b29a      	uxth	r2, r3
 8014788:	f811 5c03 	ldrb.w	r5, [r1, #-3]
 801478c:	43db      	mvns	r3, r3
 801478e:	b2db      	uxtb	r3, r3
 8014790:	fb16 f602 	smulbb	r6, r6, r2
 8014794:	fb05 6503 	mla	r5, r5, r3, r6
 8014798:	b2ad      	uxth	r5, r5
 801479a:	1c6e      	adds	r6, r5, #1
 801479c:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 80147a0:	122d      	asrs	r5, r5, #8
 80147a2:	f801 5c03 	strb.w	r5, [r1, #-3]
 80147a6:	f811 6c02 	ldrb.w	r6, [r1, #-2]
 80147aa:	7d45      	ldrb	r5, [r0, #21]
 80147ac:	fb16 f603 	smulbb	r6, r6, r3
 80147b0:	fb05 6502 	mla	r5, r5, r2, r6
 80147b4:	b2ad      	uxth	r5, r5
 80147b6:	1c6e      	adds	r6, r5, #1
 80147b8:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 80147bc:	122d      	asrs	r5, r5, #8
 80147be:	f801 5c02 	strb.w	r5, [r1, #-2]
 80147c2:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 80147c6:	7d06      	ldrb	r6, [r0, #20]
 80147c8:	fb15 f303 	smulbb	r3, r5, r3
 80147cc:	fb06 3202 	mla	r2, r6, r2, r3
 80147d0:	b292      	uxth	r2, r2
 80147d2:	1c53      	adds	r3, r2, #1
 80147d4:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 80147d8:	1212      	asrs	r2, r2, #8
 80147da:	f801 2c01 	strb.w	r2, [r1, #-1]
 80147de:	e7cf      	b.n	8014780 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x40>
 80147e0:	b2de      	uxtb	r6, r3
 80147e2:	2b00      	cmp	r3, #0
 80147e4:	d0ce      	beq.n	8014784 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x44>
 80147e6:	3103      	adds	r1, #3
 80147e8:	4427      	add	r7, r4
 80147ea:	f814 2b01 	ldrb.w	r2, [r4], #1
 80147ee:	f811 cc03 	ldrb.w	ip, [r1, #-3]
 80147f2:	fb02 f306 	mul.w	r3, r2, r6
 80147f6:	1c5a      	adds	r2, r3, #1
 80147f8:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80147fc:	1212      	asrs	r2, r2, #8
 80147fe:	b295      	uxth	r5, r2
 8014800:	43d2      	mvns	r2, r2
 8014802:	b2d3      	uxtb	r3, r2
 8014804:	7d82      	ldrb	r2, [r0, #22]
 8014806:	fb1c fc03 	smulbb	ip, ip, r3
 801480a:	fb02 c205 	mla	r2, r2, r5, ip
 801480e:	b292      	uxth	r2, r2
 8014810:	f102 0c01 	add.w	ip, r2, #1
 8014814:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8014818:	1212      	asrs	r2, r2, #8
 801481a:	f801 2c03 	strb.w	r2, [r1, #-3]
 801481e:	f811 cc02 	ldrb.w	ip, [r1, #-2]
 8014822:	7d42      	ldrb	r2, [r0, #21]
 8014824:	fb1c fc03 	smulbb	ip, ip, r3
 8014828:	fb02 c205 	mla	r2, r2, r5, ip
 801482c:	b292      	uxth	r2, r2
 801482e:	f102 0c01 	add.w	ip, r2, #1
 8014832:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8014836:	1212      	asrs	r2, r2, #8
 8014838:	f801 2c02 	strb.w	r2, [r1, #-2]
 801483c:	f811 2c01 	ldrb.w	r2, [r1, #-1]
 8014840:	f890 c014 	ldrb.w	ip, [r0, #20]
 8014844:	fb12 f303 	smulbb	r3, r2, r3
 8014848:	fb0c 3305 	mla	r3, ip, r5, r3
 801484c:	b29b      	uxth	r3, r3
 801484e:	1c5a      	adds	r2, r3, #1
 8014850:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8014854:	121b      	asrs	r3, r3, #8
 8014856:	42bc      	cmp	r4, r7
 8014858:	f801 3c01 	strb.w	r3, [r1, #-1]
 801485c:	f101 0103 	add.w	r1, r1, #3
 8014860:	d1c3      	bne.n	80147ea <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0xaa>
 8014862:	e78f      	b.n	8014784 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x44>

08014864 <_ZN8touchgfx13PainterRGB88810renderNextERhS1_S1_S1_>:
 8014864:	b510      	push	{r4, lr}
 8014866:	7d04      	ldrb	r4, [r0, #20]
 8014868:	700c      	strb	r4, [r1, #0]
 801486a:	7d41      	ldrb	r1, [r0, #21]
 801486c:	7011      	strb	r1, [r2, #0]
 801486e:	7d82      	ldrb	r2, [r0, #22]
 8014870:	701a      	strb	r2, [r3, #0]
 8014872:	9b02      	ldr	r3, [sp, #8]
 8014874:	7dc2      	ldrb	r2, [r0, #23]
 8014876:	701a      	strb	r2, [r3, #0]
 8014878:	2001      	movs	r0, #1
 801487a:	bd10      	pop	{r4, pc}

0801487c <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>:
 801487c:	b570      	push	{r4, r5, r6, lr}
 801487e:	4616      	mov	r6, r2
 8014880:	4604      	mov	r4, r0
 8014882:	460d      	mov	r5, r1
 8014884:	f7ed f936 	bl	8001af4 <_ZN8touchgfx3HAL3lcdEv>
 8014888:	6803      	ldr	r3, [r0, #0]
 801488a:	4629      	mov	r1, r5
 801488c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801488e:	4798      	blx	r3
 8014890:	7520      	strb	r0, [r4, #20]
 8014892:	f7ed f92f 	bl	8001af4 <_ZN8touchgfx3HAL3lcdEv>
 8014896:	6803      	ldr	r3, [r0, #0]
 8014898:	4629      	mov	r1, r5
 801489a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801489c:	4798      	blx	r3
 801489e:	7560      	strb	r0, [r4, #21]
 80148a0:	f7ed f928 	bl	8001af4 <_ZN8touchgfx3HAL3lcdEv>
 80148a4:	6803      	ldr	r3, [r0, #0]
 80148a6:	4629      	mov	r1, r5
 80148a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80148aa:	4798      	blx	r3
 80148ac:	75e6      	strb	r6, [r4, #23]
 80148ae:	75a0      	strb	r0, [r4, #22]
 80148b0:	bd70      	pop	{r4, r5, r6, pc}
	...

080148b4 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>:
 80148b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80148b6:	4604      	mov	r4, r0
 80148b8:	460e      	mov	r6, r1
 80148ba:	4617      	mov	r7, r2
 80148bc:	f000 f832 	bl	8014924 <_ZN8touchgfx15AbstractPainterC1Ev>
 80148c0:	4b12      	ldr	r3, [pc, #72]	; (801490c <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x58>)
 80148c2:	6023      	str	r3, [r4, #0]
 80148c4:	f7ed f916 	bl	8001af4 <_ZN8touchgfx3HAL3lcdEv>
 80148c8:	6803      	ldr	r3, [r0, #0]
 80148ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80148cc:	4798      	blx	r3
 80148ce:	1e43      	subs	r3, r0, #1
 80148d0:	425d      	negs	r5, r3
 80148d2:	415d      	adcs	r5, r3
 80148d4:	4b0e      	ldr	r3, [pc, #56]	; (8014910 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x5c>)
 80148d6:	681b      	ldr	r3, [r3, #0]
 80148d8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80148da:	b130      	cbz	r0, 80148ea <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x36>
 80148dc:	6803      	ldr	r3, [r0, #0]
 80148de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80148e0:	4798      	blx	r3
 80148e2:	2801      	cmp	r0, #1
 80148e4:	bf08      	it	eq
 80148e6:	f045 0501 	orreq.w	r5, r5, #1
 80148ea:	b92d      	cbnz	r5, 80148f8 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x44>
 80148ec:	4b09      	ldr	r3, [pc, #36]	; (8014914 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x60>)
 80148ee:	4a0a      	ldr	r2, [pc, #40]	; (8014918 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x64>)
 80148f0:	480a      	ldr	r0, [pc, #40]	; (801491c <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x68>)
 80148f2:	2129      	movs	r1, #41	; 0x29
 80148f4:	f00d ff7c 	bl	80227f0 <__assert_func>
 80148f8:	4b09      	ldr	r3, [pc, #36]	; (8014920 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x6c>)
 80148fa:	6023      	str	r3, [r4, #0]
 80148fc:	4620      	mov	r0, r4
 80148fe:	463a      	mov	r2, r7
 8014900:	4631      	mov	r1, r6
 8014902:	f7ff ffbb 	bl	801487c <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>
 8014906:	4620      	mov	r0, r4
 8014908:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801490a:	bf00      	nop
 801490c:	08025d80 	.word	0x08025d80
 8014910:	2000d1a4 	.word	0x2000d1a4
 8014914:	08025d98 	.word	0x08025d98
 8014918:	08025e5c 	.word	0x08025e5c
 801491c:	08025df6 	.word	0x08025df6
 8014920:	08025e44 	.word	0x08025e44

08014924 <_ZN8touchgfx15AbstractPainterC1Ev>:
 8014924:	4a03      	ldr	r2, [pc, #12]	; (8014934 <_ZN8touchgfx15AbstractPainterC1Ev+0x10>)
 8014926:	6002      	str	r2, [r0, #0]
 8014928:	2200      	movs	r2, #0
 801492a:	6042      	str	r2, [r0, #4]
 801492c:	22ff      	movs	r2, #255	; 0xff
 801492e:	7202      	strb	r2, [r0, #8]
 8014930:	4770      	bx	lr
 8014932:	bf00      	nop
 8014934:	08025ea0 	.word	0x08025ea0

08014938 <_ZN8touchgfx15AbstractPainterD1Ev>:
 8014938:	4770      	bx	lr

0801493a <_ZN8touchgfx15AbstractPainter9setOffsetEtt>:
 801493a:	8081      	strh	r1, [r0, #4]
 801493c:	80c2      	strh	r2, [r0, #6]
 801493e:	4770      	bx	lr

08014940 <_ZN8touchgfx15AbstractPainter14setWidgetAlphaEh>:
 8014940:	7201      	strb	r1, [r0, #8]
 8014942:	4770      	bx	lr

08014944 <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
 8014944:	f880 102e 	strb.w	r1, [r0, #46]	; 0x2e
 8014948:	4770      	bx	lr

0801494a <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:
 801494a:	f890 002e 	ldrb.w	r0, [r0, #46]	; 0x2e
 801494e:	4770      	bx	lr

08014950 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>:
 8014950:	6281      	str	r1, [r0, #40]	; 0x28
 8014952:	4770      	bx	lr

08014954 <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 8014954:	b513      	push	{r0, r1, r4, lr}
 8014956:	6803      	ldr	r3, [r0, #0]
 8014958:	4604      	mov	r4, r0
 801495a:	4601      	mov	r1, r0
 801495c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801495e:	4668      	mov	r0, sp
 8014960:	4798      	blx	r3
 8014962:	6823      	ldr	r3, [r4, #0]
 8014964:	4669      	mov	r1, sp
 8014966:	691b      	ldr	r3, [r3, #16]
 8014968:	4620      	mov	r0, r4
 801496a:	4798      	blx	r3
 801496c:	b002      	add	sp, #8
 801496e:	bd10      	pop	{r4, pc}

08014970 <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
 8014970:	b510      	push	{r4, lr}
 8014972:	2200      	movs	r2, #0
 8014974:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 8014978:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 801497c:	8002      	strh	r2, [r0, #0]
 801497e:	8042      	strh	r2, [r0, #2]
 8014980:	8084      	strh	r4, [r0, #4]
 8014982:	80c1      	strh	r1, [r0, #6]
 8014984:	bd10      	pop	{r4, pc}

08014986 <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
 8014986:	2200      	movs	r2, #0
 8014988:	8002      	strh	r2, [r0, #0]
 801498a:	8042      	strh	r2, [r0, #2]
 801498c:	8082      	strh	r2, [r0, #4]
 801498e:	80c2      	strh	r2, [r0, #6]
 8014990:	4770      	bx	lr
	...

08014994 <_ZNK8touchgfx12CanvasWidget10getPainterEv>:
 8014994:	b508      	push	{r3, lr}
 8014996:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8014998:	b928      	cbnz	r0, 80149a6 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x12>
 801499a:	4b03      	ldr	r3, [pc, #12]	; (80149a8 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x14>)
 801499c:	4a03      	ldr	r2, [pc, #12]	; (80149ac <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x18>)
 801499e:	4804      	ldr	r0, [pc, #16]	; (80149b0 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x1c>)
 80149a0:	2127      	movs	r1, #39	; 0x27
 80149a2:	f00d ff25 	bl	80227f0 <__assert_func>
 80149a6:	bd08      	pop	{r3, pc}
 80149a8:	08025eac 	.word	0x08025eac
 80149ac:	08025f90 	.word	0x08025f90
 80149b0:	08025ed3 	.word	0x08025ed3

080149b4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 80149b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80149b8:	4604      	mov	r4, r0
 80149ba:	b089      	sub	sp, #36	; 0x24
 80149bc:	6808      	ldr	r0, [r1, #0]
 80149be:	6849      	ldr	r1, [r1, #4]
 80149c0:	ab02      	add	r3, sp, #8
 80149c2:	c303      	stmia	r3!, {r0, r1}
 80149c4:	4b41      	ldr	r3, [pc, #260]	; (8014acc <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x118>)
 80149c6:	781b      	ldrb	r3, [r3, #0]
 80149c8:	2b01      	cmp	r3, #1
 80149ca:	6823      	ldr	r3, [r4, #0]
 80149cc:	4621      	mov	r1, r4
 80149ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80149d0:	a804      	add	r0, sp, #16
 80149d2:	bf1f      	itttt	ne
 80149d4:	f10d 0906 	addne.w	r9, sp, #6
 80149d8:	ae03      	addne	r6, sp, #12
 80149da:	f10d 050e 	addne.w	r5, sp, #14
 80149de:	f10d 080a 	addne.w	r8, sp, #10
 80149e2:	bf01      	itttt	eq
 80149e4:	f10d 090e 	addeq.w	r9, sp, #14
 80149e8:	f10d 0606 	addeq.w	r6, sp, #6
 80149ec:	ad03      	addeq	r5, sp, #12
 80149ee:	f10d 0808 	addeq.w	r8, sp, #8
 80149f2:	4798      	blx	r3
 80149f4:	f04f 0a00 	mov.w	sl, #0
 80149f8:	f04f 0b01 	mov.w	fp, #1
 80149fc:	f9b5 3000 	ldrsh.w	r3, [r5]
 8014a00:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 8014a04:	2b00      	cmp	r3, #0
 8014a06:	d056      	beq.n	8014ab6 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x102>
 8014a08:	4293      	cmp	r3, r2
 8014a0a:	bfa8      	it	ge
 8014a0c:	4613      	movge	r3, r2
 8014a0e:	f8ad 3006 	strh.w	r3, [sp, #6]
 8014a12:	f9bd 7006 	ldrsh.w	r7, [sp, #6]
 8014a16:	2f00      	cmp	r7, #0
 8014a18:	dd34      	ble.n	8014a84 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd0>
 8014a1a:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 8014a1e:	f8bd c014 	ldrh.w	ip, [sp, #20]
 8014a22:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8014a26:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8014a2a:	f9b6 e000 	ldrsh.w	lr, [r6]
 8014a2e:	f9b9 1000 	ldrsh.w	r1, [r9]
 8014a32:	f8ad 2018 	strh.w	r2, [sp, #24]
 8014a36:	4484      	add	ip, r0
 8014a38:	fa0f fc8c 	sxth.w	ip, ip
 8014a3c:	4562      	cmp	r2, ip
 8014a3e:	f8ad 301a 	strh.w	r3, [sp, #26]
 8014a42:	f8ad e01c 	strh.w	lr, [sp, #28]
 8014a46:	f8ad 101e 	strh.w	r1, [sp, #30]
 8014a4a:	da29      	bge.n	8014aa0 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8014a4c:	4472      	add	r2, lr
 8014a4e:	b212      	sxth	r2, r2
 8014a50:	4290      	cmp	r0, r2
 8014a52:	da25      	bge.n	8014aa0 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8014a54:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 8014a58:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8014a5c:	4402      	add	r2, r0
 8014a5e:	b212      	sxth	r2, r2
 8014a60:	4293      	cmp	r3, r2
 8014a62:	da1d      	bge.n	8014aa0 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8014a64:	440b      	add	r3, r1
 8014a66:	b21b      	sxth	r3, r3
 8014a68:	4298      	cmp	r0, r3
 8014a6a:	da19      	bge.n	8014aa0 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8014a6c:	6823      	ldr	r3, [r4, #0]
 8014a6e:	a906      	add	r1, sp, #24
 8014a70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014a72:	4620      	mov	r0, r4
 8014a74:	4798      	blx	r3
 8014a76:	b998      	cbnz	r0, 8014aa0 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8014a78:	107f      	asrs	r7, r7, #1
 8014a7a:	f8ad 7006 	strh.w	r7, [sp, #6]
 8014a7e:	f04f 0a01 	mov.w	sl, #1
 8014a82:	e7c6      	b.n	8014a12 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 8014a84:	d10c      	bne.n	8014aa0 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8014a86:	f8ad b006 	strh.w	fp, [sp, #6]
 8014a8a:	f8b8 2000 	ldrh.w	r2, [r8]
 8014a8e:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 8014a92:	440a      	add	r2, r1
 8014a94:	f8a8 2000 	strh.w	r2, [r8]
 8014a98:	882b      	ldrh	r3, [r5, #0]
 8014a9a:	1a5b      	subs	r3, r3, r1
 8014a9c:	802b      	strh	r3, [r5, #0]
 8014a9e:	e7ad      	b.n	80149fc <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8014aa0:	f1ba 0f00 	cmp.w	sl, #0
 8014aa4:	d0f1      	beq.n	8014a8a <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd6>
 8014aa6:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 8014aaa:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8014aae:	429a      	cmp	r2, r3
 8014ab0:	bf08      	it	eq
 8014ab2:	85a7      	strheq	r7, [r4, #44]	; 0x2c
 8014ab4:	e7e9      	b.n	8014a8a <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd6>
 8014ab6:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8014aba:	429a      	cmp	r2, r3
 8014abc:	bf04      	itt	eq
 8014abe:	f647 73fe 	movweq	r3, #32766	; 0x7ffe
 8014ac2:	85a3      	strheq	r3, [r4, #44]	; 0x2c
 8014ac4:	b009      	add	sp, #36	; 0x24
 8014ac6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014aca:	bf00      	nop
 8014acc:	2000d19c 	.word	0x2000d19c

08014ad0 <_ZN8touchgfx12CanvasWidgetC1Ev>:
 8014ad0:	2200      	movs	r2, #0
 8014ad2:	8082      	strh	r2, [r0, #4]
 8014ad4:	80c2      	strh	r2, [r0, #6]
 8014ad6:	8102      	strh	r2, [r0, #8]
 8014ad8:	8142      	strh	r2, [r0, #10]
 8014ada:	8182      	strh	r2, [r0, #12]
 8014adc:	81c2      	strh	r2, [r0, #14]
 8014ade:	8202      	strh	r2, [r0, #16]
 8014ae0:	8242      	strh	r2, [r0, #18]
 8014ae2:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8014ae6:	61c2      	str	r2, [r0, #28]
 8014ae8:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 8014aec:	2101      	movs	r1, #1
 8014aee:	6282      	str	r2, [r0, #40]	; 0x28
 8014af0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8014af4:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 8014af8:	8582      	strh	r2, [r0, #44]	; 0x2c
 8014afa:	4903      	ldr	r1, [pc, #12]	; (8014b08 <_ZN8touchgfx12CanvasWidgetC1Ev+0x38>)
 8014afc:	6001      	str	r1, [r0, #0]
 8014afe:	22ff      	movs	r2, #255	; 0xff
 8014b00:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
 8014b04:	4770      	bx	lr
 8014b06:	bf00      	nop
 8014b08:	08025f18 	.word	0x08025f18

08014b0c <_ZN8touchgfx12CanvasWidgetD1Ev>:
 8014b0c:	4770      	bx	lr

08014b0e <_ZNK8touchgfx4Line14getMinimalRectEv>:
 8014b0e:	f101 0368 	add.w	r3, r1, #104	; 0x68
 8014b12:	4602      	mov	r2, r0
 8014b14:	cb03      	ldmia	r3!, {r0, r1}
 8014b16:	6010      	str	r0, [r2, #0]
 8014b18:	6051      	str	r1, [r2, #4]
 8014b1a:	4610      	mov	r0, r2
 8014b1c:	4770      	bx	lr

08014b1e <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 8014b1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014b22:	f9b1 5004 	ldrsh.w	r5, [r1, #4]
 8014b26:	b395      	cbz	r5, 8014b8e <_ZN8touchgfx4Rect11expandToFitERKS0_+0x70>
 8014b28:	f9b1 c006 	ldrsh.w	ip, [r1, #6]
 8014b2c:	f1bc 0f00 	cmp.w	ip, #0
 8014b30:	d02d      	beq.n	8014b8e <_ZN8touchgfx4Rect11expandToFitERKS0_+0x70>
 8014b32:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8014b36:	f9b1 e000 	ldrsh.w	lr, [r1]
 8014b3a:	b354      	cbz	r4, 8014b92 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x74>
 8014b3c:	f9b0 7006 	ldrsh.w	r7, [r0, #6]
 8014b40:	b33f      	cbz	r7, 8014b92 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x74>
 8014b42:	f9b0 8000 	ldrsh.w	r8, [r0]
 8014b46:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 8014b4a:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8014b4e:	45f0      	cmp	r8, lr
 8014b50:	4646      	mov	r6, r8
 8014b52:	4475      	add	r5, lr
 8014b54:	bfa8      	it	ge
 8014b56:	4676      	movge	r6, lr
 8014b58:	4444      	add	r4, r8
 8014b5a:	4293      	cmp	r3, r2
 8014b5c:	4619      	mov	r1, r3
 8014b5e:	b22d      	sxth	r5, r5
 8014b60:	bfa8      	it	ge
 8014b62:	4611      	movge	r1, r2
 8014b64:	b224      	sxth	r4, r4
 8014b66:	4462      	add	r2, ip
 8014b68:	443b      	add	r3, r7
 8014b6a:	42a5      	cmp	r5, r4
 8014b6c:	bfac      	ite	ge
 8014b6e:	ebc6 0405 	rsbge	r4, r6, r5
 8014b72:	ebc6 0404 	rsblt	r4, r6, r4
 8014b76:	b212      	sxth	r2, r2
 8014b78:	b21b      	sxth	r3, r3
 8014b7a:	8006      	strh	r6, [r0, #0]
 8014b7c:	8041      	strh	r1, [r0, #2]
 8014b7e:	8084      	strh	r4, [r0, #4]
 8014b80:	429a      	cmp	r2, r3
 8014b82:	bfac      	ite	ge
 8014b84:	ebc1 0302 	rsbge	r3, r1, r2
 8014b88:	ebc1 0303 	rsblt	r3, r1, r3
 8014b8c:	80c3      	strh	r3, [r0, #6]
 8014b8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014b92:	f8a0 e000 	strh.w	lr, [r0]
 8014b96:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8014b9a:	8043      	strh	r3, [r0, #2]
 8014b9c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8014ba0:	8083      	strh	r3, [r0, #4]
 8014ba2:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8014ba6:	e7f1      	b.n	8014b8c <_ZN8touchgfx4Rect11expandToFitERKS0_+0x6e>

08014ba8 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>:
 8014ba8:	b507      	push	{r0, r1, r2, lr}
 8014baa:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8014bae:	ab01      	add	r3, sp, #4
 8014bb0:	6809      	ldr	r1, [r1, #0]
 8014bb2:	6800      	ldr	r0, [r0, #0]
 8014bb4:	f002 fc91 	bl	80174da <_ZN8touchgfx6muldivElllRl>
 8014bb8:	b003      	add	sp, #12
 8014bba:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08014bc0 <_ZN8touchgfx7CWRUtil4sineEi>:
 8014bc0:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8014bc4:	fb90 f3f2 	sdiv	r3, r0, r2
 8014bc8:	fb03 0312 	mls	r3, r3, r2, r0
 8014bcc:	4413      	add	r3, r2
 8014bce:	fb93 f0f2 	sdiv	r0, r3, r2
 8014bd2:	fb02 3010 	mls	r0, r2, r0, r3
 8014bd6:	285a      	cmp	r0, #90	; 0x5a
 8014bd8:	4b09      	ldr	r3, [pc, #36]	; (8014c00 <_ZN8touchgfx7CWRUtil4sineEi+0x40>)
 8014bda:	dc02      	bgt.n	8014be2 <_ZN8touchgfx7CWRUtil4sineEi+0x22>
 8014bdc:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8014be0:	4770      	bx	lr
 8014be2:	28b4      	cmp	r0, #180	; 0xb4
 8014be4:	dc02      	bgt.n	8014bec <_ZN8touchgfx7CWRUtil4sineEi+0x2c>
 8014be6:	f1c0 00b4 	rsb	r0, r0, #180	; 0xb4
 8014bea:	e7f7      	b.n	8014bdc <_ZN8touchgfx7CWRUtil4sineEi+0x1c>
 8014bec:	f5b0 7f87 	cmp.w	r0, #270	; 0x10e
 8014bf0:	bfd4      	ite	le
 8014bf2:	38b4      	suble	r0, #180	; 0xb4
 8014bf4:	f5c0 70b4 	rsbgt	r0, r0, #360	; 0x168
 8014bf8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8014bfc:	4240      	negs	r0, r0
 8014bfe:	4770      	bx	lr
 8014c00:	0802603a 	.word	0x0802603a

08014c04 <_ZN8touchgfx7CWRUtil5isqrtEm>:
 8014c04:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8014c08:	bf2c      	ite	cs
 8014c0a:	f04f 4280 	movcs.w	r2, #1073741824	; 0x40000000
 8014c0e:	f44f 4280 	movcc.w	r2, #16384	; 0x4000
 8014c12:	2300      	movs	r3, #0
 8014c14:	1899      	adds	r1, r3, r2
 8014c16:	4288      	cmp	r0, r1
 8014c18:	bf24      	itt	cs
 8014c1a:	1853      	addcs	r3, r2, r1
 8014c1c:	1a40      	subcs	r0, r0, r1
 8014c1e:	0892      	lsrs	r2, r2, #2
 8014c20:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8014c24:	d1f6      	bne.n	8014c14 <_ZN8touchgfx7CWRUtil5isqrtEm+0x10>
 8014c26:	4618      	mov	r0, r3
 8014c28:	4770      	bx	lr
	...

08014c2c <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>:
 8014c2c:	2800      	cmp	r0, #0
 8014c2e:	b508      	push	{r3, lr}
 8014c30:	da05      	bge.n	8014c3e <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x12>
 8014c32:	4240      	negs	r0, r0
 8014c34:	f7ff fffa 	bl	8014c2c <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 8014c38:	4240      	negs	r0, r0
 8014c3a:	b240      	sxtb	r0, r0
 8014c3c:	bd08      	pop	{r3, pc}
 8014c3e:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8014c42:	dc11      	bgt.n	8014c68 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x3c>
 8014c44:	f5b0 7f35 	cmp.w	r0, #724	; 0x2d4
 8014c48:	dd09      	ble.n	8014c5e <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x32>
 8014c4a:	4340      	muls	r0, r0
 8014c4c:	f5c0 1080 	rsb	r0, r0, #1048576	; 0x100000
 8014c50:	f7ff ffd8 	bl	8014c04 <_ZN8touchgfx7CWRUtil5isqrtEm>
 8014c54:	f7ff ffea 	bl	8014c2c <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 8014c58:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 8014c5c:	e7ed      	b.n	8014c3a <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0xe>
 8014c5e:	3003      	adds	r0, #3
 8014c60:	10c0      	asrs	r0, r0, #3
 8014c62:	4b02      	ldr	r3, [pc, #8]	; (8014c6c <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x40>)
 8014c64:	5618      	ldrsb	r0, [r3, r0]
 8014c66:	e7e9      	b.n	8014c3c <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x10>
 8014c68:	2000      	movs	r0, #0
 8014c6a:	e7e7      	b.n	8014c3c <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x10>
 8014c6c:	08025fde 	.word	0x08025fde

08014c70 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>:
 8014c70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014c72:	460c      	mov	r4, r1
 8014c74:	1e01      	subs	r1, r0, #0
 8014c76:	4615      	mov	r5, r2
 8014c78:	db01      	blt.n	8014c7e <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0xe>
 8014c7a:	2c00      	cmp	r4, #0
 8014c7c:	da06      	bge.n	8014c8c <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x1c>
 8014c7e:	4b11      	ldr	r3, [pc, #68]	; (8014cc4 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x54>)
 8014c80:	4a11      	ldr	r2, [pc, #68]	; (8014cc8 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x58>)
 8014c82:	4812      	ldr	r0, [pc, #72]	; (8014ccc <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x5c>)
 8014c84:	f240 3197 	movw	r1, #919	; 0x397
 8014c88:	f00d fdb2 	bl	80227f0 <__assert_func>
 8014c8c:	428c      	cmp	r4, r1
 8014c8e:	dd06      	ble.n	8014c9e <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x2e>
 8014c90:	4620      	mov	r0, r4
 8014c92:	f7ff ffed 	bl	8014c70 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8014c96:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 8014c9a:	b003      	add	sp, #12
 8014c9c:	bd30      	pop	{r4, r5, pc}
 8014c9e:	4349      	muls	r1, r1
 8014ca0:	fb04 1004 	mla	r0, r4, r4, r1
 8014ca4:	f7ff ffae 	bl	8014c04 <_ZN8touchgfx7CWRUtil5isqrtEm>
 8014ca8:	6028      	str	r0, [r5, #0]
 8014caa:	2800      	cmp	r0, #0
 8014cac:	d0f5      	beq.n	8014c9a <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x2a>
 8014cae:	4602      	mov	r2, r0
 8014cb0:	ab01      	add	r3, sp, #4
 8014cb2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8014cb6:	4620      	mov	r0, r4
 8014cb8:	f002 fc0f 	bl	80174da <_ZN8touchgfx6muldivElllRl>
 8014cbc:	f7ff ffb6 	bl	8014c2c <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 8014cc0:	e7eb      	b.n	8014c9a <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x2a>
 8014cc2:	bf00      	nop
 8014cc4:	080260f0 	.word	0x080260f0
 8014cc8:	080261b8 	.word	0x080261b8
 8014ccc:	08026101 	.word	0x08026101

08014cd0 <_ZN8touchgfx4LineC1Ev>:
 8014cd0:	b510      	push	{r4, lr}
 8014cd2:	4604      	mov	r4, r0
 8014cd4:	f7ff fefc 	bl	8014ad0 <_ZN8touchgfx12CanvasWidgetC1Ev>
 8014cd8:	4b0c      	ldr	r3, [pc, #48]	; (8014d0c <_ZN8touchgfx4LineC1Ev+0x3c>)
 8014cda:	6023      	str	r3, [r4, #0]
 8014cdc:	2220      	movs	r2, #32
 8014cde:	2300      	movs	r3, #0
 8014ce0:	6422      	str	r2, [r4, #64]	; 0x40
 8014ce2:	2212      	movs	r2, #18
 8014ce4:	e9c4 330c 	strd	r3, r3, [r4, #48]	; 0x30
 8014ce8:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
 8014cec:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8014cf0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8014cf4:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
 8014cf8:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
 8014cfc:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
 8014d00:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68
 8014d04:	6722      	str	r2, [r4, #112]	; 0x70
 8014d06:	60a3      	str	r3, [r4, #8]
 8014d08:	4620      	mov	r0, r4
 8014d0a:	bd10      	pop	{r4, pc}
 8014d0c:	08026140 	.word	0x08026140

08014d10 <_ZN8touchgfx4Line17updateCachedShapeEv>:
 8014d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d14:	6b86      	ldr	r6, [r0, #56]	; 0x38
 8014d16:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8014d18:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 8014d1a:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8014d1c:	1af6      	subs	r6, r6, r3
 8014d1e:	b085      	sub	sp, #20
 8014d20:	4604      	mov	r4, r0
 8014d22:	eba5 0502 	sub.w	r5, r5, r2
 8014d26:	f040 8099 	bne.w	8014e5c <_ZN8touchgfx4Line17updateCachedShapeEv+0x14c>
 8014d2a:	b955      	cbnz	r5, 8014d42 <_ZN8touchgfx4Line17updateCachedShapeEv+0x32>
 8014d2c:	e9c0 3314 	strd	r3, r3, [r0, #80]	; 0x50
 8014d30:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8014d34:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 8014d38:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 8014d3c:	b005      	add	sp, #20
 8014d3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d42:	ea85 77e5 	eor.w	r7, r5, r5, asr #31
 8014d46:	eba7 77e5 	sub.w	r7, r7, r5, asr #31
 8014d4a:	463a      	mov	r2, r7
 8014d4c:	4629      	mov	r1, r5
 8014d4e:	ab03      	add	r3, sp, #12
 8014d50:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8014d52:	f002 fbc2 	bl	80174da <_ZN8touchgfx6muldivElllRl>
 8014d56:	f04f 0802 	mov.w	r8, #2
 8014d5a:	ab03      	add	r3, sp, #12
 8014d5c:	fb90 f5f8 	sdiv	r5, r0, r8
 8014d60:	463a      	mov	r2, r7
 8014d62:	4631      	mov	r1, r6
 8014d64:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8014d66:	f002 fbb8 	bl	80174da <_ZN8touchgfx6muldivElllRl>
 8014d6a:	f894 a044 	ldrb.w	sl, [r4, #68]	; 0x44
 8014d6e:	fb90 f0f8 	sdiv	r0, r0, r8
 8014d72:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
 8014d76:	f8d4 e038 	ldr.w	lr, [r4, #56]	; 0x38
 8014d7a:	f8d4 c03c 	ldr.w	ip, [r4, #60]	; 0x3c
 8014d7e:	6b67      	ldr	r7, [r4, #52]	; 0x34
 8014d80:	eba8 0305 	sub.w	r3, r8, r5
 8014d84:	f1ba 0f00 	cmp.w	sl, #0
 8014d88:	f040 80c1 	bne.w	8014f0e <_ZN8touchgfx4Line17updateCachedShapeEv+0x1fe>
 8014d8c:	64a3      	str	r3, [r4, #72]	; 0x48
 8014d8e:	19c3      	adds	r3, r0, r7
 8014d90:	65a3      	str	r3, [r4, #88]	; 0x58
 8014d92:	ebae 0305 	sub.w	r3, lr, r5
 8014d96:	64e3      	str	r3, [r4, #76]	; 0x4c
 8014d98:	eb00 030c 	add.w	r3, r0, ip
 8014d9c:	65e3      	str	r3, [r4, #92]	; 0x5c
 8014d9e:	eb05 030e 	add.w	r3, r5, lr
 8014da2:	6523      	str	r3, [r4, #80]	; 0x50
 8014da4:	ebac 0300 	sub.w	r3, ip, r0
 8014da8:	6623      	str	r3, [r4, #96]	; 0x60
 8014daa:	eb05 0308 	add.w	r3, r5, r8
 8014dae:	6563      	str	r3, [r4, #84]	; 0x54
 8014db0:	1a3b      	subs	r3, r7, r0
 8014db2:	6ca6      	ldr	r6, [r4, #72]	; 0x48
 8014db4:	6663      	str	r3, [r4, #100]	; 0x64
 8014db6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8014db8:	9100      	str	r1, [sp, #0]
 8014dba:	f104 0358 	add.w	r3, r4, #88	; 0x58
 8014dbe:	f104 094c 	add.w	r9, r4, #76	; 0x4c
 8014dc2:	9301      	str	r3, [sp, #4]
 8014dc4:	4632      	mov	r2, r6
 8014dc6:	f859 bb04 	ldr.w	fp, [r9], #4
 8014dca:	9b00      	ldr	r3, [sp, #0]
 8014dcc:	455e      	cmp	r6, fp
 8014dce:	bfa8      	it	ge
 8014dd0:	465e      	movge	r6, fp
 8014dd2:	455a      	cmp	r2, fp
 8014dd4:	bfb8      	it	lt
 8014dd6:	465a      	movlt	r2, fp
 8014dd8:	f8d9 b00c 	ldr.w	fp, [r9, #12]
 8014ddc:	4559      	cmp	r1, fp
 8014dde:	bfa8      	it	ge
 8014de0:	4659      	movge	r1, fp
 8014de2:	455b      	cmp	r3, fp
 8014de4:	bfb8      	it	lt
 8014de6:	465b      	movlt	r3, fp
 8014de8:	9300      	str	r3, [sp, #0]
 8014dea:	9b01      	ldr	r3, [sp, #4]
 8014dec:	454b      	cmp	r3, r9
 8014dee:	d1ea      	bne.n	8014dc6 <_ZN8touchgfx4Line17updateCachedShapeEv+0xb6>
 8014df0:	f04f 0b20 	mov.w	fp, #32
 8014df4:	b209      	sxth	r1, r1
 8014df6:	b212      	sxth	r2, r2
 8014df8:	fb91 f9fb 	sdiv	r9, r1, fp
 8014dfc:	fb92 f2fb 	sdiv	r2, r2, fp
 8014e00:	f9bd 1000 	ldrsh.w	r1, [sp]
 8014e04:	fb91 f1fb 	sdiv	r1, r1, fp
 8014e08:	3201      	adds	r2, #1
 8014e0a:	3101      	adds	r1, #1
 8014e0c:	b236      	sxth	r6, r6
 8014e0e:	eba1 0109 	sub.w	r1, r1, r9
 8014e12:	fb96 f6fb 	sdiv	r6, r6, fp
 8014e16:	f1ba 0f01 	cmp.w	sl, #1
 8014e1a:	f8a4 6068 	strh.w	r6, [r4, #104]	; 0x68
 8014e1e:	eba2 0606 	sub.w	r6, r2, r6
 8014e22:	f8a4 906a 	strh.w	r9, [r4, #106]	; 0x6a
 8014e26:	f8a4 606c 	strh.w	r6, [r4, #108]	; 0x6c
 8014e2a:	f8a4 106e 	strh.w	r1, [r4, #110]	; 0x6e
 8014e2e:	d185      	bne.n	8014d3c <_ZN8touchgfx4Line17updateCachedShapeEv+0x2c>
 8014e30:	eba8 0305 	sub.w	r3, r8, r5
 8014e34:	64a3      	str	r3, [r4, #72]	; 0x48
 8014e36:	19c3      	adds	r3, r0, r7
 8014e38:	65a3      	str	r3, [r4, #88]	; 0x58
 8014e3a:	ebae 0305 	sub.w	r3, lr, r5
 8014e3e:	64e3      	str	r3, [r4, #76]	; 0x4c
 8014e40:	eb00 030c 	add.w	r3, r0, ip
 8014e44:	65e3      	str	r3, [r4, #92]	; 0x5c
 8014e46:	eb05 030e 	add.w	r3, r5, lr
 8014e4a:	6523      	str	r3, [r4, #80]	; 0x50
 8014e4c:	4445      	add	r5, r8
 8014e4e:	ebac 0300 	sub.w	r3, ip, r0
 8014e52:	1a38      	subs	r0, r7, r0
 8014e54:	6623      	str	r3, [r4, #96]	; 0x60
 8014e56:	6565      	str	r5, [r4, #84]	; 0x54
 8014e58:	6660      	str	r0, [r4, #100]	; 0x64
 8014e5a:	e76f      	b.n	8014d3c <_ZN8touchgfx4Line17updateCachedShapeEv+0x2c>
 8014e5c:	ea86 77e6 	eor.w	r7, r6, r6, asr #31
 8014e60:	eba7 77e6 	sub.w	r7, r7, r6, asr #31
 8014e64:	2d00      	cmp	r5, #0
 8014e66:	f43f af70 	beq.w	8014d4a <_ZN8touchgfx4Line17updateCachedShapeEv+0x3a>
 8014e6a:	ea85 73e5 	eor.w	r3, r5, r5, asr #31
 8014e6e:	eba3 73e5 	sub.w	r3, r3, r5, asr #31
 8014e72:	fb93 f2f7 	sdiv	r2, r3, r7
 8014e76:	fb07 3312 	mls	r3, r7, r2, r3
 8014e7a:	b34b      	cbz	r3, 8014ed0 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1c0>
 8014e7c:	fb97 f2f3 	sdiv	r2, r7, r3
 8014e80:	fb03 7712 	mls	r7, r3, r2, r7
 8014e84:	2f00      	cmp	r7, #0
 8014e86:	d1f4      	bne.n	8014e72 <_ZN8touchgfx4Line17updateCachedShapeEv+0x162>
 8014e88:	2b01      	cmp	r3, #1
 8014e8a:	bf18      	it	ne
 8014e8c:	fb96 f6f3 	sdivne	r6, r6, r3
 8014e90:	ea86 71e6 	eor.w	r1, r6, r6, asr #31
 8014e94:	eba1 71e6 	sub.w	r1, r1, r6, asr #31
 8014e98:	f24b 5204 	movw	r2, #46340	; 0xb504
 8014e9c:	bf18      	it	ne
 8014e9e:	fb95 f5f3 	sdivne	r5, r5, r3
 8014ea2:	4291      	cmp	r1, r2
 8014ea4:	dd16      	ble.n	8014ed4 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1c4>
 8014ea6:	2d00      	cmp	r5, #0
 8014ea8:	da4d      	bge.n	8014f46 <_ZN8touchgfx4Line17updateCachedShapeEv+0x236>
 8014eaa:	4b29      	ldr	r3, [pc, #164]	; (8014f50 <_ZN8touchgfx4Line17updateCachedShapeEv+0x240>)
 8014eac:	429d      	cmp	r5, r3
 8014eae:	da27      	bge.n	8014f00 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1f0>
 8014eb0:	426a      	negs	r2, r5
 8014eb2:	f24b 5304 	movw	r3, #46340	; 0xb504
 8014eb6:	fb91 f1f3 	sdiv	r1, r1, r3
 8014eba:	fb92 f3f3 	sdiv	r3, r2, r3
 8014ebe:	4299      	cmp	r1, r3
 8014ec0:	bfcc      	ite	gt
 8014ec2:	1c4b      	addgt	r3, r1, #1
 8014ec4:	3301      	addle	r3, #1
 8014ec6:	fb96 f6f3 	sdiv	r6, r6, r3
 8014eca:	fb95 f5f3 	sdiv	r5, r5, r3
 8014ece:	e00f      	b.n	8014ef0 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1e0>
 8014ed0:	463b      	mov	r3, r7
 8014ed2:	e7d9      	b.n	8014e88 <_ZN8touchgfx4Line17updateCachedShapeEv+0x178>
 8014ed4:	2d00      	cmp	r5, #0
 8014ed6:	fb92 f2f1 	sdiv	r2, r2, r1
 8014eda:	da13      	bge.n	8014f04 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1f4>
 8014edc:	4269      	negs	r1, r5
 8014ede:	f24b 5304 	movw	r3, #46340	; 0xb504
 8014ee2:	fb93 f3f1 	sdiv	r3, r3, r1
 8014ee6:	429a      	cmp	r2, r3
 8014ee8:	bfa8      	it	ge
 8014eea:	461a      	movge	r2, r3
 8014eec:	4356      	muls	r6, r2
 8014eee:	4355      	muls	r5, r2
 8014ef0:	fb05 f005 	mul.w	r0, r5, r5
 8014ef4:	fb06 0006 	mla	r0, r6, r6, r0
 8014ef8:	f7ff fe84 	bl	8014c04 <_ZN8touchgfx7CWRUtil5isqrtEm>
 8014efc:	4607      	mov	r7, r0
 8014efe:	e724      	b.n	8014d4a <_ZN8touchgfx4Line17updateCachedShapeEv+0x3a>
 8014f00:	2200      	movs	r2, #0
 8014f02:	e7eb      	b.n	8014edc <_ZN8touchgfx4Line17updateCachedShapeEv+0x1cc>
 8014f04:	4629      	mov	r1, r5
 8014f06:	e7ea      	b.n	8014ede <_ZN8touchgfx4Line17updateCachedShapeEv+0x1ce>
 8014f08:	4629      	mov	r1, r5
 8014f0a:	2200      	movs	r2, #0
 8014f0c:	e7e7      	b.n	8014ede <_ZN8touchgfx4Line17updateCachedShapeEv+0x1ce>
 8014f0e:	1a1b      	subs	r3, r3, r0
 8014f10:	64a3      	str	r3, [r4, #72]	; 0x48
 8014f12:	19c3      	adds	r3, r0, r7
 8014f14:	1b5b      	subs	r3, r3, r5
 8014f16:	65a3      	str	r3, [r4, #88]	; 0x58
 8014f18:	ebae 0305 	sub.w	r3, lr, r5
 8014f1c:	4403      	add	r3, r0
 8014f1e:	64e3      	str	r3, [r4, #76]	; 0x4c
 8014f20:	eb00 030c 	add.w	r3, r0, ip
 8014f24:	442b      	add	r3, r5
 8014f26:	65e3      	str	r3, [r4, #92]	; 0x5c
 8014f28:	eb05 030e 	add.w	r3, r5, lr
 8014f2c:	4403      	add	r3, r0
 8014f2e:	6523      	str	r3, [r4, #80]	; 0x50
 8014f30:	ebac 0300 	sub.w	r3, ip, r0
 8014f34:	442b      	add	r3, r5
 8014f36:	6623      	str	r3, [r4, #96]	; 0x60
 8014f38:	eb05 0308 	add.w	r3, r5, r8
 8014f3c:	1a1b      	subs	r3, r3, r0
 8014f3e:	6563      	str	r3, [r4, #84]	; 0x54
 8014f40:	1a3b      	subs	r3, r7, r0
 8014f42:	1b5b      	subs	r3, r3, r5
 8014f44:	e735      	b.n	8014db2 <_ZN8touchgfx4Line17updateCachedShapeEv+0xa2>
 8014f46:	4295      	cmp	r5, r2
 8014f48:	ddde      	ble.n	8014f08 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1f8>
 8014f4a:	462a      	mov	r2, r5
 8014f4c:	e7b1      	b.n	8014eb2 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1a2>
 8014f4e:	bf00      	nop
 8014f50:	ffff4afc 	.word	0xffff4afc

08014f54 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_>:
 8014f54:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8014f56:	428b      	cmp	r3, r1
 8014f58:	d102      	bne.n	8014f60 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_+0xc>
 8014f5a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8014f5c:	4293      	cmp	r3, r2
 8014f5e:	d003      	beq.n	8014f68 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_+0x14>
 8014f60:	e9c0 120c 	strd	r1, r2, [r0, #48]	; 0x30
 8014f64:	f7ff bed4 	b.w	8014d10 <_ZN8touchgfx4Line17updateCachedShapeEv>
 8014f68:	4770      	bx	lr

08014f6a <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_>:
 8014f6a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8014f6c:	428b      	cmp	r3, r1
 8014f6e:	d102      	bne.n	8014f76 <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_+0xc>
 8014f70:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8014f72:	4293      	cmp	r3, r2
 8014f74:	d003      	beq.n	8014f7e <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_+0x14>
 8014f76:	e9c0 120e 	strd	r1, r2, [r0, #56]	; 0x38
 8014f7a:	f7ff bec9 	b.w	8014d10 <_ZN8touchgfx4Line17updateCachedShapeEv>
 8014f7e:	4770      	bx	lr

08014f80 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>:
 8014f80:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
 8014f84:	f7ff bec4 	b.w	8014d10 <_ZN8touchgfx4Line17updateCachedShapeEv>

08014f88 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE>:
 8014f88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014f8c:	b0b3      	sub	sp, #204	; 0xcc
 8014f8e:	4604      	mov	r4, r0
 8014f90:	460a      	mov	r2, r1
 8014f92:	ad32      	add	r5, sp, #200	; 0xc8
 8014f94:	4601      	mov	r1, r0
 8014f96:	a804      	add	r0, sp, #16
 8014f98:	f00c f84c 	bl	8021034 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>
 8014f9c:	2300      	movs	r3, #0
 8014f9e:	f845 3dc4 	str.w	r3, [r5, #-196]!
 8014fa2:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8014fa4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8014fa6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8014fa8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8014faa:	1ac0      	subs	r0, r0, r3
 8014fac:	eba1 0102 	sub.w	r1, r1, r2
 8014fb0:	d43c      	bmi.n	801502c <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xa4>
 8014fb2:	2900      	cmp	r1, #0
 8014fb4:	462a      	mov	r2, r5
 8014fb6:	db33      	blt.n	8015020 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x98>
 8014fb8:	f7ff fe5a 	bl	8014c70 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8014fbc:	f100 075a 	add.w	r7, r0, #90	; 0x5a
 8014fc0:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8014fc2:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8014fc4:	a804      	add	r0, sp, #16
 8014fc6:	f00c f9fe 	bl	80213c6 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 8014fca:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8014fcc:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8014fce:	a804      	add	r0, sp, #16
 8014fd0:	f00c f988 	bl	80212e4 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8014fd4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8014fd8:	2b01      	cmp	r3, #1
 8014fda:	d137      	bne.n	801504c <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xc4>
 8014fdc:	6f26      	ldr	r6, [r4, #112]	; 0x70
 8014fde:	2eb3      	cmp	r6, #179	; 0xb3
 8014fe0:	dc34      	bgt.n	801504c <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xc4>
 8014fe2:	eba7 0906 	sub.w	r9, r7, r6
 8014fe6:	4648      	mov	r0, r9
 8014fe8:	f7ff fdea 	bl	8014bc0 <_ZN8touchgfx7CWRUtil4sineEi>
 8014fec:	a902      	add	r1, sp, #8
 8014fee:	9002      	str	r0, [sp, #8]
 8014ff0:	4628      	mov	r0, r5
 8014ff2:	f7ff fdd9 	bl	8014ba8 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8014ff6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8014ff8:	eb00 0801 	add.w	r8, r0, r1
 8014ffc:	f1c9 005a 	rsb	r0, r9, #90	; 0x5a
 8015000:	f7ff fdde 	bl	8014bc0 <_ZN8touchgfx7CWRUtil4sineEi>
 8015004:	a903      	add	r1, sp, #12
 8015006:	9003      	str	r0, [sp, #12]
 8015008:	4628      	mov	r0, r5
 801500a:	f7ff fdcd 	bl	8014ba8 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801500e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8015010:	4641      	mov	r1, r8
 8015012:	1a12      	subs	r2, r2, r0
 8015014:	a804      	add	r0, sp, #16
 8015016:	f00c f965 	bl	80212e4 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 801501a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801501c:	441e      	add	r6, r3
 801501e:	e7de      	b.n	8014fde <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x56>
 8015020:	4249      	negs	r1, r1
 8015022:	f7ff fe25 	bl	8014c70 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8015026:	f1c0 075a 	rsb	r7, r0, #90	; 0x5a
 801502a:	e7c9      	b.n	8014fc0 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x38>
 801502c:	2900      	cmp	r1, #0
 801502e:	f1c0 0000 	rsb	r0, r0, #0
 8015032:	462a      	mov	r2, r5
 8015034:	db04      	blt.n	8015040 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xb8>
 8015036:	f7ff fe1b 	bl	8014c70 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 801503a:	f5c0 7787 	rsb	r7, r0, #270	; 0x10e
 801503e:	e7bf      	b.n	8014fc0 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x38>
 8015040:	4249      	negs	r1, r1
 8015042:	f7ff fe15 	bl	8014c70 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8015046:	f500 7787 	add.w	r7, r0, #270	; 0x10e
 801504a:	e7b9      	b.n	8014fc0 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x38>
 801504c:	6e22      	ldr	r2, [r4, #96]	; 0x60
 801504e:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8015050:	a804      	add	r0, sp, #16
 8015052:	f00c f947 	bl	80212e4 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8015056:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8015058:	6d61      	ldr	r1, [r4, #84]	; 0x54
 801505a:	a804      	add	r0, sp, #16
 801505c:	f00c f942 	bl	80212e4 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8015060:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8015064:	2b01      	cmp	r3, #1
 8015066:	d123      	bne.n	80150b0 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x128>
 8015068:	6f26      	ldr	r6, [r4, #112]	; 0x70
 801506a:	f1c6 06b4 	rsb	r6, r6, #180	; 0xb4
 801506e:	2e00      	cmp	r6, #0
 8015070:	dd1e      	ble.n	80150b0 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x128>
 8015072:	eb06 0907 	add.w	r9, r6, r7
 8015076:	4648      	mov	r0, r9
 8015078:	f7ff fda2 	bl	8014bc0 <_ZN8touchgfx7CWRUtil4sineEi>
 801507c:	a902      	add	r1, sp, #8
 801507e:	9002      	str	r0, [sp, #8]
 8015080:	4628      	mov	r0, r5
 8015082:	f7ff fd91 	bl	8014ba8 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8015086:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8015088:	eb00 0801 	add.w	r8, r0, r1
 801508c:	f1c9 005a 	rsb	r0, r9, #90	; 0x5a
 8015090:	f7ff fd96 	bl	8014bc0 <_ZN8touchgfx7CWRUtil4sineEi>
 8015094:	a903      	add	r1, sp, #12
 8015096:	9003      	str	r0, [sp, #12]
 8015098:	4628      	mov	r0, r5
 801509a:	f7ff fd85 	bl	8014ba8 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801509e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80150a0:	4641      	mov	r1, r8
 80150a2:	1a12      	subs	r2, r2, r0
 80150a4:	a804      	add	r0, sp, #16
 80150a6:	f00c f91d 	bl	80212e4 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 80150aa:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80150ac:	1af6      	subs	r6, r6, r3
 80150ae:	e7de      	b.n	801506e <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xe6>
 80150b0:	a804      	add	r0, sp, #16
 80150b2:	f00c fa8c 	bl	80215ce <_ZN8touchgfx6Canvas6renderEv>
 80150b6:	4604      	mov	r4, r0
 80150b8:	a804      	add	r0, sp, #16
 80150ba:	f00c fac9 	bl	8021650 <_ZN8touchgfx6CanvasD1Ev>
 80150be:	4620      	mov	r0, r4
 80150c0:	b033      	add	sp, #204	; 0xcc
 80150c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080150c6 <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 80150c6:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 80150ca:	4770      	bx	lr

080150cc <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 80150cc:	b570      	push	{r4, r5, r6, lr}
 80150ce:	790b      	ldrb	r3, [r1, #4]
 80150d0:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 80150d4:	2b00      	cmp	r3, #0
 80150d6:	bf0c      	ite	eq
 80150d8:	2301      	moveq	r3, #1
 80150da:	2300      	movne	r3, #0
 80150dc:	4604      	mov	r4, r0
 80150de:	460e      	mov	r6, r1
 80150e0:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
 80150e4:	d110      	bne.n	8015108 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 80150e6:	b185      	cbz	r5, 801510a <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3e>
 80150e8:	7933      	ldrb	r3, [r6, #4]
 80150ea:	2b01      	cmp	r3, #1
 80150ec:	d113      	bne.n	8015116 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x4a>
 80150ee:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80150f0:	b188      	cbz	r0, 8015116 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x4a>
 80150f2:	6803      	ldr	r3, [r0, #0]
 80150f4:	68db      	ldr	r3, [r3, #12]
 80150f6:	4798      	blx	r3
 80150f8:	b168      	cbz	r0, 8015116 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x4a>
 80150fa:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80150fc:	6803      	ldr	r3, [r0, #0]
 80150fe:	4621      	mov	r1, r4
 8015100:	689b      	ldr	r3, [r3, #8]
 8015102:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015106:	4718      	bx	r3
 8015108:	b12d      	cbz	r5, 8015116 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x4a>
 801510a:	6823      	ldr	r3, [r4, #0]
 801510c:	4620      	mov	r0, r4
 801510e:	695b      	ldr	r3, [r3, #20]
 8015110:	4798      	blx	r3
 8015112:	2d00      	cmp	r5, #0
 8015114:	d1e8      	bne.n	80150e8 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 8015116:	bd70      	pop	{r4, r5, r6, pc}

08015118 <_ZN8touchgfx8TextArea13getTextHeightEv>:
 8015118:	b570      	push	{r4, r5, r6, lr}
 801511a:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 801511c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015120:	429a      	cmp	r2, r3
 8015122:	4604      	mov	r4, r0
 8015124:	d00c      	beq.n	8015140 <_ZN8touchgfx8TextArea13getTextHeightEv+0x28>
 8015126:	f850 3b26 	ldr.w	r3, [r0], #38
 801512a:	6f1d      	ldr	r5, [r3, #112]	; 0x70
 801512c:	f7ef fce6 	bl	8004afc <_ZNK8touchgfx9TypedText7getTextEv>
 8015130:	2300      	movs	r3, #0
 8015132:	4601      	mov	r1, r0
 8015134:	46ac      	mov	ip, r5
 8015136:	4620      	mov	r0, r4
 8015138:	461a      	mov	r2, r3
 801513a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801513e:	4760      	bx	ip
 8015140:	2000      	movs	r0, #0
 8015142:	bd70      	pop	{r4, r5, r6, pc}

08015144 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 8015144:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015146:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 8015148:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801514c:	429a      	cmp	r2, r3
 801514e:	d016      	beq.n	801517e <_ZNK8touchgfx8TextArea12getTextWidthEv+0x3a>
 8015150:	f100 0426 	add.w	r4, r0, #38	; 0x26
 8015154:	4620      	mov	r0, r4
 8015156:	f7ee fccb 	bl	8003af0 <_ZNK8touchgfx9TypedText7getFontEv>
 801515a:	6803      	ldr	r3, [r0, #0]
 801515c:	4605      	mov	r5, r0
 801515e:	4620      	mov	r0, r4
 8015160:	69de      	ldr	r6, [r3, #28]
 8015162:	f7ee fce1 	bl	8003b28 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 8015166:	4607      	mov	r7, r0
 8015168:	4620      	mov	r0, r4
 801516a:	f7ef fcc7 	bl	8004afc <_ZNK8touchgfx9TypedText7getTextEv>
 801516e:	2300      	movs	r3, #0
 8015170:	4602      	mov	r2, r0
 8015172:	9300      	str	r3, [sp, #0]
 8015174:	4639      	mov	r1, r7
 8015176:	4628      	mov	r0, r5
 8015178:	47b0      	blx	r6
 801517a:	b003      	add	sp, #12
 801517c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801517e:	2000      	movs	r0, #0
 8015180:	e7fb      	b.n	801517a <_ZNK8touchgfx8TextArea12getTextWidthEv+0x36>

08015182 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 8015182:	b40e      	push	{r1, r2, r3}
 8015184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015188:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 801518a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801518e:	429a      	cmp	r2, r3
 8015190:	b09b      	sub	sp, #108	; 0x6c
 8015192:	4604      	mov	r4, r0
 8015194:	d03f      	beq.n	8015216 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x94>
 8015196:	f100 0726 	add.w	r7, r0, #38	; 0x26
 801519a:	ab22      	add	r3, sp, #136	; 0x88
 801519c:	4638      	mov	r0, r7
 801519e:	9303      	str	r3, [sp, #12]
 80151a0:	f7ee fca6 	bl	8003af0 <_ZNK8touchgfx9TypedText7getFontEv>
 80151a4:	6803      	ldr	r3, [r0, #0]
 80151a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80151a8:	4680      	mov	r8, r0
 80151aa:	4798      	blx	r3
 80151ac:	b205      	sxth	r5, r0
 80151ae:	4606      	mov	r6, r0
 80151b0:	a804      	add	r0, sp, #16
 80151b2:	f003 f801 	bl	80181b8 <_ZN8touchgfx12TextProviderC1Ev>
 80151b6:	f8d8 3000 	ldr.w	r3, [r8]
 80151ba:	4640      	mov	r0, r8
 80151bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80151be:	4798      	blx	r3
 80151c0:	9a03      	ldr	r2, [sp, #12]
 80151c2:	9921      	ldr	r1, [sp, #132]	; 0x84
 80151c4:	4603      	mov	r3, r0
 80151c6:	a804      	add	r0, sp, #16
 80151c8:	f003 f813 	bl	80181f2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 80151cc:	4638      	mov	r0, r7
 80151ce:	f7ee fcab 	bl	8003b28 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 80151d2:	4680      	mov	r8, r0
 80151d4:	4638      	mov	r0, r7
 80151d6:	f7ee fc8b 	bl	8003af0 <_ZNK8touchgfx9TypedText7getFontEv>
 80151da:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 80151de:	f894 1031 	ldrb.w	r1, [r4, #49]	; 0x31
 80151e2:	9300      	str	r3, [sp, #0]
 80151e4:	4642      	mov	r2, r8
 80151e6:	4603      	mov	r3, r0
 80151e8:	a804      	add	r0, sp, #16
 80151ea:	f000 ffea 	bl	80161c2 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 80151ee:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 80151f2:	18a9      	adds	r1, r5, r2
 80151f4:	2900      	cmp	r1, #0
 80151f6:	b203      	sxth	r3, r0
 80151f8:	dd0b      	ble.n	8015212 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x90>
 80151fa:	3b01      	subs	r3, #1
 80151fc:	fb13 f302 	smulbb	r3, r3, r2
 8015200:	fb16 3300 	smlabb	r3, r6, r0, r3
 8015204:	b21d      	sxth	r5, r3
 8015206:	4628      	mov	r0, r5
 8015208:	b01b      	add	sp, #108	; 0x6c
 801520a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801520e:	b003      	add	sp, #12
 8015210:	4770      	bx	lr
 8015212:	2b00      	cmp	r3, #0
 8015214:	dcf7      	bgt.n	8015206 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x84>
 8015216:	2500      	movs	r5, #0
 8015218:	e7f5      	b.n	8015206 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x84>
	...

0801521c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 801521c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015220:	8cc6      	ldrh	r6, [r0, #38]	; 0x26
 8015222:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015226:	429e      	cmp	r6, r3
 8015228:	b08d      	sub	sp, #52	; 0x34
 801522a:	4604      	mov	r4, r0
 801522c:	4688      	mov	r8, r1
 801522e:	d04b      	beq.n	80152c8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xac>
 8015230:	f100 0526 	add.w	r5, r0, #38	; 0x26
 8015234:	4628      	mov	r0, r5
 8015236:	f7ee fc5b 	bl	8003af0 <_ZNK8touchgfx9TypedText7getFontEv>
 801523a:	4607      	mov	r7, r0
 801523c:	2800      	cmp	r0, #0
 801523e:	d043      	beq.n	80152c8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xac>
 8015240:	4628      	mov	r0, r5
 8015242:	f7ee fc89 	bl	8003b58 <_ZNK8touchgfx9TypedText11assertValidEv>
 8015246:	4b22      	ldr	r3, [pc, #136]	; (80152d0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xb4>)
 8015248:	f894 902e 	ldrb.w	r9, [r4, #46]	; 0x2e
 801524c:	681b      	ldr	r3, [r3, #0]
 801524e:	f9b4 a02c 	ldrsh.w	sl, [r4, #44]	; 0x2c
 8015252:	f894 b030 	ldrb.w	fp, [r4, #48]	; 0x30
 8015256:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 801525a:	4628      	mov	r0, r5
 801525c:	785e      	ldrb	r6, [r3, #1]
 801525e:	f7ee fc63 	bl	8003b28 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 8015262:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8015264:	9309      	str	r3, [sp, #36]	; 0x24
 8015266:	4b1b      	ldr	r3, [pc, #108]	; (80152d4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xb8>)
 8015268:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 801526c:	681b      	ldr	r3, [r3, #0]
 801526e:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
 8015272:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8015276:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
 801527a:	9707      	str	r7, [sp, #28]
 801527c:	f3c6 0601 	ubfx	r6, r6, #0, #2
 8015280:	f88d 902a 	strb.w	r9, [sp, #42]	; 0x2a
 8015284:	f88d 6020 	strb.w	r6, [sp, #32]
 8015288:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 801528c:	f88d b022 	strb.w	fp, [sp, #34]	; 0x22
 8015290:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 8015294:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 8015298:	b10a      	cbz	r2, 801529e <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x82>
 801529a:	6cde      	ldr	r6, [r3, #76]	; 0x4c
 801529c:	b906      	cbnz	r6, 80152a0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x84>
 801529e:	689e      	ldr	r6, [r3, #8]
 80152a0:	af05      	add	r7, sp, #20
 80152a2:	4621      	mov	r1, r4
 80152a4:	4638      	mov	r0, r7
 80152a6:	f002 f87e 	bl	80173a6 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80152aa:	4628      	mov	r0, r5
 80152ac:	f7ef fc26 	bl	8004afc <_ZNK8touchgfx9TypedText7getTextEv>
 80152b0:	2300      	movs	r3, #0
 80152b2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80152b6:	ab07      	add	r3, sp, #28
 80152b8:	9001      	str	r0, [sp, #4]
 80152ba:	9300      	str	r3, [sp, #0]
 80152bc:	e897 0006 	ldmia.w	r7, {r1, r2}
 80152c0:	4643      	mov	r3, r8
 80152c2:	4630      	mov	r0, r6
 80152c4:	f000 fd48 	bl	8015d58 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 80152c8:	b00d      	add	sp, #52	; 0x34
 80152ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80152ce:	bf00      	nop
 80152d0:	2000d234 	.word	0x2000d234
 80152d4:	2000d1a4 	.word	0x2000d1a4

080152d8 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 80152d8:	b570      	push	{r4, r5, r6, lr}
 80152da:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 80152dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80152e0:	429a      	cmp	r2, r3
 80152e2:	4604      	mov	r4, r0
 80152e4:	d021      	beq.n	801532a <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x52>
 80152e6:	6803      	ldr	r3, [r0, #0]
 80152e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80152ea:	4798      	blx	r3
 80152ec:	6823      	ldr	r3, [r4, #0]
 80152ee:	4605      	mov	r5, r0
 80152f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80152f2:	4620      	mov	r0, r4
 80152f4:	4798      	blx	r3
 80152f6:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 80152fa:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 80152fe:	6823      	ldr	r3, [r4, #0]
 8015300:	4606      	mov	r6, r0
 8015302:	b22d      	sxth	r5, r5
 8015304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015306:	d109      	bne.n	801531c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x44>
 8015308:	4629      	mov	r1, r5
 801530a:	4620      	mov	r0, r4
 801530c:	4798      	blx	r3
 801530e:	6823      	ldr	r3, [r4, #0]
 8015310:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015312:	4631      	mov	r1, r6
 8015314:	4620      	mov	r0, r4
 8015316:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801531a:	4718      	bx	r3
 801531c:	4601      	mov	r1, r0
 801531e:	4620      	mov	r0, r4
 8015320:	4798      	blx	r3
 8015322:	6823      	ldr	r3, [r4, #0]
 8015324:	4629      	mov	r1, r5
 8015326:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015328:	e7f4      	b.n	8015314 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>
 801532a:	bd70      	pop	{r4, r5, r6, pc}

0801532c <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>:
 801532c:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 8015330:	84c1      	strh	r1, [r0, #38]	; 0x26
 8015332:	b922      	cbnz	r2, 801533e <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x12>
 8015334:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8015338:	b90b      	cbnz	r3, 801533e <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x12>
 801533a:	f7ff bfcd 	b.w	80152d8 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 801533e:	4770      	bx	lr

08015340 <_ZN8touchgfx3BoxD1Ev>:
 8015340:	4770      	bx	lr

08015342 <_ZNK8touchgfx3Box12getSolidRectEv>:
 8015342:	2300      	movs	r3, #0
 8015344:	8003      	strh	r3, [r0, #0]
 8015346:	8043      	strh	r3, [r0, #2]
 8015348:	8083      	strh	r3, [r0, #4]
 801534a:	80c3      	strh	r3, [r0, #6]
 801534c:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 8015350:	b91b      	cbnz	r3, 801535a <_ZNK8touchgfx3Box12getSolidRectEv+0x18>
 8015352:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 8015356:	2bff      	cmp	r3, #255	; 0xff
 8015358:	d103      	bne.n	8015362 <_ZNK8touchgfx3Box12getSolidRectEv+0x20>
 801535a:	890b      	ldrh	r3, [r1, #8]
 801535c:	8083      	strh	r3, [r0, #4]
 801535e:	894b      	ldrh	r3, [r1, #10]
 8015360:	80c3      	strh	r3, [r0, #6]
 8015362:	4770      	bx	lr

08015364 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 8015364:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015366:	4604      	mov	r4, r0
 8015368:	6808      	ldr	r0, [r1, #0]
 801536a:	6849      	ldr	r1, [r1, #4]
 801536c:	466b      	mov	r3, sp
 801536e:	c303      	stmia	r3!, {r0, r1}
 8015370:	6823      	ldr	r3, [r4, #0]
 8015372:	4669      	mov	r1, sp
 8015374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015376:	4620      	mov	r0, r4
 8015378:	4798      	blx	r3
 801537a:	4b08      	ldr	r3, [pc, #32]	; (801539c <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 801537c:	681b      	ldr	r3, [r3, #0]
 801537e:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8015382:	b10a      	cbz	r2, 8015388 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 8015384:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8015386:	b900      	cbnz	r0, 801538a <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 8015388:	6898      	ldr	r0, [r3, #8]
 801538a:	6803      	ldr	r3, [r0, #0]
 801538c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 801538e:	69dd      	ldr	r5, [r3, #28]
 8015390:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8015394:	4669      	mov	r1, sp
 8015396:	47a8      	blx	r5
 8015398:	b003      	add	sp, #12
 801539a:	bd30      	pop	{r4, r5, pc}
 801539c:	2000d1a4 	.word	0x2000d1a4

080153a0 <_ZN8touchgfx3BoxD0Ev>:
 80153a0:	b510      	push	{r4, lr}
 80153a2:	2130      	movs	r1, #48	; 0x30
 80153a4:	4604      	mov	r4, r0
 80153a6:	f00d f9f8 	bl	802279a <_ZdlPvj>
 80153aa:	4620      	mov	r0, r4
 80153ac:	bd10      	pop	{r4, pc}

080153ae <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 80153ae:	b538      	push	{r3, r4, r5, lr}
 80153b0:	880b      	ldrh	r3, [r1, #0]
 80153b2:	85c3      	strh	r3, [r0, #46]	; 0x2e
 80153b4:	4605      	mov	r5, r0
 80153b6:	8813      	ldrh	r3, [r2, #0]
 80153b8:	f825 3f30 	strh.w	r3, [r5, #48]!
 80153bc:	4604      	mov	r4, r0
 80153be:	4628      	mov	r0, r5
 80153c0:	f003 fcb6 	bl	8018d30 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80153c4:	8120      	strh	r0, [r4, #8]
 80153c6:	4628      	mov	r0, r5
 80153c8:	f003 fcec 	bl	8018da4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80153cc:	8160      	strh	r0, [r4, #10]
 80153ce:	bd38      	pop	{r3, r4, r5, pc}

080153d0 <_ZNK8touchgfx6Button12getSolidRectEv>:
 80153d0:	b510      	push	{r4, lr}
 80153d2:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 80153d6:	2bff      	cmp	r3, #255	; 0xff
 80153d8:	4604      	mov	r4, r0
 80153da:	d006      	beq.n	80153ea <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 80153dc:	2300      	movs	r3, #0
 80153de:	8003      	strh	r3, [r0, #0]
 80153e0:	8043      	strh	r3, [r0, #2]
 80153e2:	8083      	strh	r3, [r0, #4]
 80153e4:	80c3      	strh	r3, [r0, #6]
 80153e6:	4620      	mov	r0, r4
 80153e8:	bd10      	pop	{r4, pc}
 80153ea:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 80153ee:	b11b      	cbz	r3, 80153f8 <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 80153f0:	3130      	adds	r1, #48	; 0x30
 80153f2:	f003 fd11 	bl	8018e18 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 80153f6:	e7f6      	b.n	80153e6 <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 80153f8:	312e      	adds	r1, #46	; 0x2e
 80153fa:	e7fa      	b.n	80153f2 <_ZNK8touchgfx6Button12getSolidRectEv+0x22>

080153fc <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 80153fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015400:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8015404:	b08b      	sub	sp, #44	; 0x2c
 8015406:	4604      	mov	r4, r0
 8015408:	4689      	mov	r9, r1
 801540a:	2b00      	cmp	r3, #0
 801540c:	d043      	beq.n	8015496 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x9a>
 801540e:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 8015410:	f8ad 3014 	strh.w	r3, [sp, #20]
 8015414:	a805      	add	r0, sp, #20
 8015416:	f003 fc8b 	bl	8018d30 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801541a:	4607      	mov	r7, r0
 801541c:	fa0f f880 	sxth.w	r8, r0
 8015420:	a805      	add	r0, sp, #20
 8015422:	f003 fcbf 	bl	8018da4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8015426:	f9b9 6000 	ldrsh.w	r6, [r9]
 801542a:	f8b9 2004 	ldrh.w	r2, [r9, #4]
 801542e:	4432      	add	r2, r6
 8015430:	b292      	uxth	r2, r2
 8015432:	2300      	movs	r3, #0
 8015434:	fa0f fe82 	sxth.w	lr, r2
 8015438:	459e      	cmp	lr, r3
 801543a:	fa0f fc80 	sxth.w	ip, r0
 801543e:	9306      	str	r3, [sp, #24]
 8015440:	dd2b      	ble.n	801549a <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x9e>
 8015442:	45b0      	cmp	r8, r6
 8015444:	dd29      	ble.n	801549a <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x9e>
 8015446:	f9b9 5002 	ldrsh.w	r5, [r9, #2]
 801544a:	f8b9 3006 	ldrh.w	r3, [r9, #6]
 801544e:	442b      	add	r3, r5
 8015450:	b29b      	uxth	r3, r3
 8015452:	b219      	sxth	r1, r3
 8015454:	2900      	cmp	r1, #0
 8015456:	dd20      	ble.n	801549a <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x9e>
 8015458:	45ac      	cmp	ip, r5
 801545a:	dd1e      	ble.n	801549a <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x9e>
 801545c:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 8015460:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8015464:	45f0      	cmp	r8, lr
 8015466:	bfb8      	it	lt
 8015468:	463a      	movlt	r2, r7
 801546a:	458c      	cmp	ip, r1
 801546c:	bfb8      	it	lt
 801546e:	4603      	movlt	r3, r0
 8015470:	1b92      	subs	r2, r2, r6
 8015472:	1b5b      	subs	r3, r3, r5
 8015474:	f8ad 201c 	strh.w	r2, [sp, #28]
 8015478:	f8ad 301e 	strh.w	r3, [sp, #30]
 801547c:	f8ad 6018 	strh.w	r6, [sp, #24]
 8015480:	f8ad 501a 	strh.w	r5, [sp, #26]
 8015484:	4b1d      	ldr	r3, [pc, #116]	; (80154fc <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>)
 8015486:	681b      	ldr	r3, [r3, #0]
 8015488:	b953      	cbnz	r3, 80154a0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa4>
 801548a:	4b1d      	ldr	r3, [pc, #116]	; (8015500 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x104>)
 801548c:	4a1d      	ldr	r2, [pc, #116]	; (8015504 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x108>)
 801548e:	481e      	ldr	r0, [pc, #120]	; (8015508 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x10c>)
 8015490:	21b8      	movs	r1, #184	; 0xb8
 8015492:	f00d f9ad 	bl	80227f0 <__assert_func>
 8015496:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8015498:	e7ba      	b.n	8015410 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 801549a:	2300      	movs	r3, #0
 801549c:	9307      	str	r3, [sp, #28]
 801549e:	e7f1      	b.n	8015484 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x88>
 80154a0:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 80154a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80154a8:	429a      	cmp	r2, r3
 80154aa:	d024      	beq.n	80154f6 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xfa>
 80154ac:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80154b0:	b30b      	cbz	r3, 80154f6 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xfa>
 80154b2:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 80154b6:	b1f3      	cbz	r3, 80154f6 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xfa>
 80154b8:	2300      	movs	r3, #0
 80154ba:	e9cd 3308 	strd	r3, r3, [sp, #32]
 80154be:	6823      	ldr	r3, [r4, #0]
 80154c0:	a908      	add	r1, sp, #32
 80154c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80154c4:	4620      	mov	r0, r4
 80154c6:	4798      	blx	r3
 80154c8:	4b10      	ldr	r3, [pc, #64]	; (801550c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x110>)
 80154ca:	681b      	ldr	r3, [r3, #0]
 80154cc:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80154d0:	b10a      	cbz	r2, 80154d6 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 80154d2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80154d4:	b900      	cbnz	r0, 80154d8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xdc>
 80154d6:	6898      	ldr	r0, [r3, #8]
 80154d8:	6801      	ldr	r1, [r0, #0]
 80154da:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 80154de:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 80154e2:	2501      	movs	r5, #1
 80154e4:	9502      	str	r5, [sp, #8]
 80154e6:	f894 4032 	ldrb.w	r4, [r4, #50]	; 0x32
 80154ea:	9401      	str	r4, [sp, #4]
 80154ec:	ac06      	add	r4, sp, #24
 80154ee:	9400      	str	r4, [sp, #0]
 80154f0:	68cc      	ldr	r4, [r1, #12]
 80154f2:	a905      	add	r1, sp, #20
 80154f4:	47a0      	blx	r4
 80154f6:	b00b      	add	sp, #44	; 0x2c
 80154f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80154fc:	2000d26c 	.word	0x2000d26c
 8015500:	08026374 	.word	0x08026374
 8015504:	08026448 	.word	0x08026448
 8015508:	080263b0 	.word	0x080263b0
 801550c:	2000d1a4 	.word	0x2000d1a4

08015510 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv>:
 8015510:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8015514:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 8015516:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801551a:	429a      	cmp	r2, r3
 801551c:	4604      	mov	r4, r0
 801551e:	d018      	beq.n	8015552 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x42>
 8015520:	f100 0526 	add.w	r5, r0, #38	; 0x26
 8015524:	4628      	mov	r0, r5
 8015526:	f7ee fae3 	bl	8003af0 <_ZNK8touchgfx9TypedText7getFontEv>
 801552a:	6803      	ldr	r3, [r0, #0]
 801552c:	4606      	mov	r6, r0
 801552e:	4628      	mov	r0, r5
 8015530:	69df      	ldr	r7, [r3, #28]
 8015532:	f7ee faf9 	bl	8003b28 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 8015536:	4680      	mov	r8, r0
 8015538:	4628      	mov	r0, r5
 801553a:	f7ef fadf 	bl	8004afc <_ZNK8touchgfx9TypedText7getTextEv>
 801553e:	2300      	movs	r3, #0
 8015540:	9300      	str	r3, [sp, #0]
 8015542:	4602      	mov	r2, r0
 8015544:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015546:	4641      	mov	r1, r8
 8015548:	4630      	mov	r0, r6
 801554a:	47b8      	blx	r7
 801554c:	b002      	add	sp, #8
 801554e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015552:	2000      	movs	r0, #0
 8015554:	e7fa      	b.n	801554c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x3c>

08015556 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv>:
 8015556:	b570      	push	{r4, r5, r6, lr}
 8015558:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 801555a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801555e:	429a      	cmp	r2, r3
 8015560:	4604      	mov	r4, r0
 8015562:	d00c      	beq.n	801557e <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x28>
 8015564:	f850 3b26 	ldr.w	r3, [r0], #38
 8015568:	6f1d      	ldr	r5, [r3, #112]	; 0x70
 801556a:	f7ef fac7 	bl	8004afc <_ZNK8touchgfx9TypedText7getTextEv>
 801556e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8015570:	4601      	mov	r1, r0
 8015572:	46ac      	mov	ip, r5
 8015574:	4620      	mov	r0, r4
 8015576:	2300      	movs	r3, #0
 8015578:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801557c:	4760      	bx	ip
 801557e:	2000      	movs	r0, #0
 8015580:	bd70      	pop	{r4, r5, r6, pc}
	...

08015584 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE>:
 8015584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015588:	8cc6      	ldrh	r6, [r0, #38]	; 0x26
 801558a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801558e:	429e      	cmp	r6, r3
 8015590:	b08d      	sub	sp, #52	; 0x34
 8015592:	4604      	mov	r4, r0
 8015594:	460f      	mov	r7, r1
 8015596:	d048      	beq.n	801562a <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xa6>
 8015598:	f100 0526 	add.w	r5, r0, #38	; 0x26
 801559c:	4628      	mov	r0, r5
 801559e:	f7ee faa7 	bl	8003af0 <_ZNK8touchgfx9TypedText7getFontEv>
 80155a2:	4680      	mov	r8, r0
 80155a4:	2800      	cmp	r0, #0
 80155a6:	d040      	beq.n	801562a <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xa6>
 80155a8:	4628      	mov	r0, r5
 80155aa:	f7ee fad5 	bl	8003b58 <_ZNK8touchgfx9TypedText11assertValidEv>
 80155ae:	4b20      	ldr	r3, [pc, #128]	; (8015630 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xac>)
 80155b0:	f894 902e 	ldrb.w	r9, [r4, #46]	; 0x2e
 80155b4:	681b      	ldr	r3, [r3, #0]
 80155b6:	f9b4 a02c 	ldrsh.w	sl, [r4, #44]	; 0x2c
 80155ba:	f894 b030 	ldrb.w	fp, [r4, #48]	; 0x30
 80155be:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 80155c2:	4628      	mov	r0, r5
 80155c4:	785e      	ldrb	r6, [r3, #1]
 80155c6:	f7ee faaf 	bl	8003b28 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 80155ca:	f3c6 0601 	ubfx	r6, r6, #0, #2
 80155ce:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 80155d2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80155d4:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
 80155d8:	9309      	str	r3, [sp, #36]	; 0x24
 80155da:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
 80155de:	f8cd 801c 	str.w	r8, [sp, #28]
 80155e2:	f88d 6020 	strb.w	r6, [sp, #32]
 80155e6:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 80155ea:	f88d 902a 	strb.w	r9, [sp, #42]	; 0x2a
 80155ee:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 80155f2:	f88d b022 	strb.w	fp, [sp, #34]	; 0x22
 80155f6:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 80155fa:	f7ec fa7b 	bl	8001af4 <_ZN8touchgfx3HAL3lcdEv>
 80155fe:	ae05      	add	r6, sp, #20
 8015600:	4621      	mov	r1, r4
 8015602:	4680      	mov	r8, r0
 8015604:	4630      	mov	r0, r6
 8015606:	f001 fece 	bl	80173a6 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801560a:	4628      	mov	r0, r5
 801560c:	f7ef fa76 	bl	8004afc <_ZNK8touchgfx9TypedText7getTextEv>
 8015610:	2300      	movs	r3, #0
 8015612:	9303      	str	r3, [sp, #12]
 8015614:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015616:	e9cd 0301 	strd	r0, r3, [sp, #4]
 801561a:	ab07      	add	r3, sp, #28
 801561c:	9300      	str	r3, [sp, #0]
 801561e:	e896 0006 	ldmia.w	r6, {r1, r2}
 8015622:	463b      	mov	r3, r7
 8015624:	4640      	mov	r0, r8
 8015626:	f000 fb97 	bl	8015d58 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 801562a:	b00d      	add	sp, #52	; 0x34
 801562c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015630:	2000d234 	.word	0x2000d234

08015634 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 8015634:	b570      	push	{r4, r5, r6, lr}
 8015636:	4605      	mov	r5, r0
 8015638:	880b      	ldrh	r3, [r1, #0]
 801563a:	84c3      	strh	r3, [r0, #38]	; 0x26
 801563c:	f855 3b26 	ldr.w	r3, [r5], #38
 8015640:	4604      	mov	r4, r0
 8015642:	4628      	mov	r0, r5
 8015644:	6b9e      	ldr	r6, [r3, #56]	; 0x38
 8015646:	f003 fb73 	bl	8018d30 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801564a:	b201      	sxth	r1, r0
 801564c:	4620      	mov	r0, r4
 801564e:	47b0      	blx	r6
 8015650:	6823      	ldr	r3, [r4, #0]
 8015652:	4628      	mov	r0, r5
 8015654:	6bde      	ldr	r6, [r3, #60]	; 0x3c
 8015656:	f003 fba5 	bl	8018da4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801565a:	b201      	sxth	r1, r0
 801565c:	4620      	mov	r0, r4
 801565e:	47b0      	blx	r6
 8015660:	4628      	mov	r0, r5
 8015662:	f003 fc33 	bl	8018ecc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8015666:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
 801566a:	bd70      	pop	{r4, r5, r6, pc}

0801566c <_ZNK8touchgfx5Image12getSolidRectEv>:
 801566c:	b510      	push	{r4, lr}
 801566e:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8015672:	2bff      	cmp	r3, #255	; 0xff
 8015674:	4604      	mov	r4, r0
 8015676:	d006      	beq.n	8015686 <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 8015678:	2300      	movs	r3, #0
 801567a:	8003      	strh	r3, [r0, #0]
 801567c:	8043      	strh	r3, [r0, #2]
 801567e:	8083      	strh	r3, [r0, #4]
 8015680:	80c3      	strh	r3, [r0, #6]
 8015682:	4620      	mov	r0, r4
 8015684:	bd10      	pop	{r4, pc}
 8015686:	3126      	adds	r1, #38	; 0x26
 8015688:	f003 fbc6 	bl	8018e18 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801568c:	e7f9      	b.n	8015682 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>
	...

08015690 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 8015690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015694:	4604      	mov	r4, r0
 8015696:	b088      	sub	sp, #32
 8015698:	f854 3b26 	ldr.w	r3, [r4], #38
 801569c:	2500      	movs	r5, #0
 801569e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80156a0:	460f      	mov	r7, r1
 80156a2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80156a6:	a904      	add	r1, sp, #16
 80156a8:	4606      	mov	r6, r0
 80156aa:	4798      	blx	r3
 80156ac:	4620      	mov	r0, r4
 80156ae:	f003 fb3f 	bl	8018d30 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80156b2:	4680      	mov	r8, r0
 80156b4:	4620      	mov	r0, r4
 80156b6:	f003 fb75 	bl	8018da4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80156ba:	9506      	str	r5, [sp, #24]
 80156bc:	ad06      	add	r5, sp, #24
 80156be:	f8ad 001e 	strh.w	r0, [sp, #30]
 80156c2:	4639      	mov	r1, r7
 80156c4:	4628      	mov	r0, r5
 80156c6:	f8ad 801c 	strh.w	r8, [sp, #28]
 80156ca:	f7fd fff1 	bl	80136b0 <_ZN8touchgfx4RectaNERKS0_>
 80156ce:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80156d2:	b1c3      	cbz	r3, 8015706 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x76>
 80156d4:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 80156d8:	b1ab      	cbz	r3, 8015706 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x76>
 80156da:	4b0c      	ldr	r3, [pc, #48]	; (801570c <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7c>)
 80156dc:	681b      	ldr	r3, [r3, #0]
 80156de:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80156e2:	b10a      	cbz	r2, 80156e8 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x58>
 80156e4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80156e6:	b900      	cbnz	r0, 80156ea <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5a>
 80156e8:	6898      	ldr	r0, [r3, #8]
 80156ea:	6801      	ldr	r1, [r0, #0]
 80156ec:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80156f0:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80156f4:	2701      	movs	r7, #1
 80156f6:	9702      	str	r7, [sp, #8]
 80156f8:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 80156fc:	e9cd 5600 	strd	r5, r6, [sp]
 8015700:	68cd      	ldr	r5, [r1, #12]
 8015702:	4621      	mov	r1, r4
 8015704:	47a8      	blx	r5
 8015706:	b008      	add	sp, #32
 8015708:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801570c:	2000d1a4 	.word	0x2000d1a4

08015710 <_ZNK8touchgfx15ButtonWithLabel12getSolidRectEv>:
 8015710:	b510      	push	{r4, lr}
 8015712:	4604      	mov	r4, r0
 8015714:	f7ff fe5c 	bl	80153d0 <_ZNK8touchgfx6Button12getSolidRectEv>
 8015718:	4620      	mov	r0, r4
 801571a:	bd10      	pop	{r4, pc}

0801571c <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE>:
 801571c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015720:	4604      	mov	r4, r0
 8015722:	b08f      	sub	sp, #60	; 0x3c
 8015724:	4688      	mov	r8, r1
 8015726:	f7ff fe69 	bl	80153fc <_ZNK8touchgfx6Button4drawERKNS_4RectE>
 801572a:	8ea7      	ldrh	r7, [r4, #52]	; 0x34
 801572c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015730:	429f      	cmp	r7, r3
 8015732:	f000 809a 	beq.w	801586a <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x14e>
 8015736:	f104 0534 	add.w	r5, r4, #52	; 0x34
 801573a:	4e54      	ldr	r6, [pc, #336]	; (801588c <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x170>)
 801573c:	4628      	mov	r0, r5
 801573e:	f7ee fa0b 	bl	8003b58 <_ZNK8touchgfx9TypedText11assertValidEv>
 8015742:	6833      	ldr	r3, [r6, #0]
 8015744:	f894 e040 	ldrb.w	lr, [r4, #64]	; 0x40
 8015748:	f813 2017 	ldrb.w	r2, [r3, r7, lsl #1]
 801574c:	4b50      	ldr	r3, [pc, #320]	; (8015890 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x174>)
 801574e:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
 8015752:	681b      	ldr	r3, [r3, #0]
 8015754:	f1be 0f01 	cmp.w	lr, #1
 8015758:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 801575c:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 8015760:	f04f 0300 	mov.w	r3, #0
 8015764:	9305      	str	r3, [sp, #20]
 8015766:	b208      	sxth	r0, r1
 8015768:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 801576c:	f04f 0c02 	mov.w	ip, #2
 8015770:	d07e      	beq.n	8015870 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x154>
 8015772:	f1be 0f03 	cmp.w	lr, #3
 8015776:	d07b      	beq.n	8015870 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x154>
 8015778:	1a52      	subs	r2, r2, r1
 801577a:	f8ad 3018 	strh.w	r3, [sp, #24]
 801577e:	fb92 f2fc 	sdiv	r2, r2, ip
 8015782:	f8ad 001a 	strh.w	r0, [sp, #26]
 8015786:	f8ad 2016 	strh.w	r2, [sp, #22]
 801578a:	f10d 0914 	add.w	r9, sp, #20
 801578e:	e899 0003 	ldmia.w	r9, {r0, r1}
 8015792:	f10d 0a1c 	add.w	sl, sp, #28
 8015796:	e88a 0003 	stmia.w	sl, {r0, r1}
 801579a:	4641      	mov	r1, r8
 801579c:	4650      	mov	r0, sl
 801579e:	f7fd ff87 	bl	80136b0 <_ZN8touchgfx4RectaNERKS0_>
 80157a2:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 80157a6:	2b00      	cmp	r3, #0
 80157a8:	d05f      	beq.n	801586a <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x14e>
 80157aa:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 80157ae:	2b00      	cmp	r3, #0
 80157b0:	d05b      	beq.n	801586a <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x14e>
 80157b2:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80157b6:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 80157ba:	1a9b      	subs	r3, r3, r2
 80157bc:	f8ad 301c 	strh.w	r3, [sp, #28]
 80157c0:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 80157c4:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80157c8:	1a9b      	subs	r3, r3, r2
 80157ca:	f8ad 301e 	strh.w	r3, [sp, #30]
 80157ce:	6823      	ldr	r3, [r4, #0]
 80157d0:	4649      	mov	r1, r9
 80157d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80157d4:	4620      	mov	r0, r4
 80157d6:	4798      	blx	r3
 80157d8:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80157dc:	2b00      	cmp	r3, #0
 80157de:	d051      	beq.n	8015884 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x168>
 80157e0:	f8d4 b03c 	ldr.w	fp, [r4, #60]	; 0x3c
 80157e4:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 80157e8:	9303      	str	r3, [sp, #12]
 80157ea:	4628      	mov	r0, r5
 80157ec:	f7ee f9b4 	bl	8003b58 <_ZNK8touchgfx9TypedText11assertValidEv>
 80157f0:	f8b4 8034 	ldrh.w	r8, [r4, #52]	; 0x34
 80157f4:	6832      	ldr	r2, [r6, #0]
 80157f6:	f894 4040 	ldrb.w	r4, [r4, #64]	; 0x40
 80157fa:	eb02 0248 	add.w	r2, r2, r8, lsl #1
 80157fe:	4628      	mov	r0, r5
 8015800:	7856      	ldrb	r6, [r2, #1]
 8015802:	f3c6 0201 	ubfx	r2, r6, #0, #2
 8015806:	9202      	str	r2, [sp, #8]
 8015808:	f7ee f9a6 	bl	8003b58 <_ZNK8touchgfx9TypedText11assertValidEv>
 801580c:	9b03      	ldr	r3, [sp, #12]
 801580e:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
 8015812:	2300      	movs	r3, #0
 8015814:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 8015818:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 801581c:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
 8015820:	4b1c      	ldr	r3, [pc, #112]	; (8015894 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x178>)
 8015822:	9a02      	ldr	r2, [sp, #8]
 8015824:	681b      	ldr	r3, [r3, #0]
 8015826:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
 801582a:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801582e:	9709      	str	r7, [sp, #36]	; 0x24
 8015830:	f3c6 0681 	ubfx	r6, r6, #2, #2
 8015834:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8015838:	f88d 6029 	strb.w	r6, [sp, #41]	; 0x29
 801583c:	f88d 402a 	strb.w	r4, [sp, #42]	; 0x2a
 8015840:	b10a      	cbz	r2, 8015846 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x12a>
 8015842:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8015844:	b904      	cbnz	r4, 8015848 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x12c>
 8015846:	689c      	ldr	r4, [r3, #8]
 8015848:	4628      	mov	r0, r5
 801584a:	f7ee f985 	bl	8003b58 <_ZNK8touchgfx9TypedText11assertValidEv>
 801584e:	4b12      	ldr	r3, [pc, #72]	; (8015898 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x17c>)
 8015850:	4641      	mov	r1, r8
 8015852:	6818      	ldr	r0, [r3, #0]
 8015854:	f7f2 fcd6 	bl	8008204 <_ZNK8touchgfx5Texts7getTextEt>
 8015858:	ab09      	add	r3, sp, #36	; 0x24
 801585a:	9001      	str	r0, [sp, #4]
 801585c:	9300      	str	r3, [sp, #0]
 801585e:	e899 0006 	ldmia.w	r9, {r1, r2}
 8015862:	4653      	mov	r3, sl
 8015864:	4620      	mov	r0, r4
 8015866:	f000 fa77 	bl	8015d58 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 801586a:	b00f      	add	sp, #60	; 0x3c
 801586c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015870:	1a5b      	subs	r3, r3, r1
 8015872:	f8ad 0018 	strh.w	r0, [sp, #24]
 8015876:	fb93 f3fc 	sdiv	r3, r3, ip
 801587a:	f8ad 201a 	strh.w	r2, [sp, #26]
 801587e:	f8ad 3014 	strh.w	r3, [sp, #20]
 8015882:	e782      	b.n	801578a <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x6e>
 8015884:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
 8015888:	e7ac      	b.n	80157e4 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0xc8>
 801588a:	bf00      	nop
 801588c:	2000d234 	.word	0x2000d234
 8015890:	2000d23c 	.word	0x2000d23c
 8015894:	2000d1a4 	.word	0x2000d1a4
 8015898:	2000d240 	.word	0x2000d240

0801589c <_ZN8touchgfx15ButtonWithLabelC1Ev>:
 801589c:	b510      	push	{r4, lr}
 801589e:	2101      	movs	r1, #1
 80158a0:	2200      	movs	r2, #0
 80158a2:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 80158a6:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
 80158aa:	4c0f      	ldr	r4, [pc, #60]	; (80158e8 <_ZN8touchgfx15ButtonWithLabelC1Ev+0x4c>)
 80158ac:	8082      	strh	r2, [r0, #4]
 80158ae:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80158b2:	80c2      	strh	r2, [r0, #6]
 80158b4:	8102      	strh	r2, [r0, #8]
 80158b6:	8142      	strh	r2, [r0, #10]
 80158b8:	8182      	strh	r2, [r0, #12]
 80158ba:	81c2      	strh	r2, [r0, #14]
 80158bc:	8202      	strh	r2, [r0, #16]
 80158be:	8242      	strh	r2, [r0, #18]
 80158c0:	e9c0 2205 	strd	r2, r2, [r0, #20]
 80158c4:	61c2      	str	r2, [r0, #28]
 80158c6:	6282      	str	r2, [r0, #40]	; 0x28
 80158c8:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
 80158cc:	85c1      	strh	r1, [r0, #46]	; 0x2e
 80158ce:	8601      	strh	r1, [r0, #48]	; 0x30
 80158d0:	f880 1032 	strb.w	r1, [r0, #50]	; 0x32
 80158d4:	6004      	str	r4, [r0, #0]
 80158d6:	8681      	strh	r1, [r0, #52]	; 0x34
 80158d8:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 80158dc:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
 80158e0:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
 80158e4:	bd10      	pop	{r4, pc}
 80158e6:	bf00      	nop
 80158e8:	0802656c 	.word	0x0802656c

080158ec <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>:
 80158ec:	4b02      	ldr	r3, [pc, #8]	; (80158f8 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0xc>)
 80158ee:	6018      	str	r0, [r3, #0]
 80158f0:	4b02      	ldr	r3, [pc, #8]	; (80158fc <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0x10>)
 80158f2:	6019      	str	r1, [r3, #0]
 80158f4:	4770      	bx	lr
 80158f6:	bf00      	nop
 80158f8:	2000d1ac 	.word	0x2000d1ac
 80158fc:	2000d1c0 	.word	0x2000d1c0

08015900 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj>:
 8015900:	b538      	push	{r3, r4, r5, lr}
 8015902:	4c2b      	ldr	r4, [pc, #172]	; (80159b0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb0>)
 8015904:	4b2b      	ldr	r3, [pc, #172]	; (80159b4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb4>)
 8015906:	6821      	ldr	r1, [r4, #0]
 8015908:	681a      	ldr	r2, [r3, #0]
 801590a:	4d2b      	ldr	r5, [pc, #172]	; (80159b8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb8>)
 801590c:	4281      	cmp	r1, r0
 801590e:	492b      	ldr	r1, [pc, #172]	; (80159bc <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xbc>)
 8015910:	d108      	bne.n	8015924 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x24>
 8015912:	682b      	ldr	r3, [r5, #0]
 8015914:	4293      	cmp	r3, r2
 8015916:	d105      	bne.n	8015924 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x24>
 8015918:	6808      	ldr	r0, [r1, #0]
 801591a:	280f      	cmp	r0, #15
 801591c:	bf94      	ite	ls
 801591e:	2000      	movls	r0, #0
 8015920:	2001      	movhi	r0, #1
 8015922:	bd38      	pop	{r3, r4, r5, pc}
 8015924:	4b26      	ldr	r3, [pc, #152]	; (80159c0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc0>)
 8015926:	6020      	str	r0, [r4, #0]
 8015928:	681b      	ldr	r3, [r3, #0]
 801592a:	602a      	str	r2, [r5, #0]
 801592c:	4298      	cmp	r0, r3
 801592e:	d905      	bls.n	801593c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x3c>
 8015930:	4b24      	ldr	r3, [pc, #144]	; (80159c4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 8015932:	4a25      	ldr	r2, [pc, #148]	; (80159c8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 8015934:	2137      	movs	r1, #55	; 0x37
 8015936:	4825      	ldr	r0, [pc, #148]	; (80159cc <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xcc>)
 8015938:	f00c ff5a 	bl	80227f0 <__assert_func>
 801593c:	f010 0403 	ands.w	r4, r0, #3
 8015940:	bf1f      	itttt	ne
 8015942:	f1c4 0504 	rsbne	r5, r4, #4
 8015946:	3b04      	subne	r3, #4
 8015948:	1952      	addne	r2, r2, r5
 801594a:	191b      	addne	r3, r3, r4
 801594c:	4402      	add	r2, r0
 801594e:	1a1b      	subs	r3, r3, r0
 8015950:	3001      	adds	r0, #1
 8015952:	f020 0401 	bic.w	r4, r0, #1
 8015956:	4d1e      	ldr	r5, [pc, #120]	; (80159d0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd0>)
 8015958:	42a3      	cmp	r3, r4
 801595a:	602a      	str	r2, [r5, #0]
 801595c:	d203      	bcs.n	8015966 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x66>
 801595e:	4b19      	ldr	r3, [pc, #100]	; (80159c4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 8015960:	4a19      	ldr	r2, [pc, #100]	; (80159c8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 8015962:	214a      	movs	r1, #74	; 0x4a
 8015964:	e7e7      	b.n	8015936 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 8015966:	f010 0002 	ands.w	r0, r0, #2
 801596a:	bf1f      	itttt	ne
 801596c:	f1c0 0504 	rsbne	r5, r0, #4
 8015970:	1952      	addne	r2, r2, r5
 8015972:	1f05      	subne	r5, r0, #4
 8015974:	195b      	addne	r3, r3, r5
 8015976:	1b1b      	subs	r3, r3, r4
 8015978:	4d16      	ldr	r5, [pc, #88]	; (80159d4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd4>)
 801597a:	4422      	add	r2, r4
 801597c:	429c      	cmp	r4, r3
 801597e:	602a      	str	r2, [r5, #0]
 8015980:	d903      	bls.n	801598a <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x8a>
 8015982:	4b10      	ldr	r3, [pc, #64]	; (80159c4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 8015984:	4a10      	ldr	r2, [pc, #64]	; (80159c8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 8015986:	215d      	movs	r1, #93	; 0x5d
 8015988:	e7d5      	b.n	8015936 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 801598a:	b120      	cbz	r0, 8015996 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x96>
 801598c:	f1c0 0504 	rsb	r5, r0, #4
 8015990:	3804      	subs	r0, #4
 8015992:	442a      	add	r2, r5
 8015994:	4403      	add	r3, r0
 8015996:	1b1b      	subs	r3, r3, r4
 8015998:	480f      	ldr	r0, [pc, #60]	; (80159d8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd8>)
 801599a:	600b      	str	r3, [r1, #0]
 801599c:	4422      	add	r2, r4
 801599e:	2b0f      	cmp	r3, #15
 80159a0:	6002      	str	r2, [r0, #0]
 80159a2:	d803      	bhi.n	80159ac <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xac>
 80159a4:	4b0d      	ldr	r3, [pc, #52]	; (80159dc <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xdc>)
 80159a6:	4a08      	ldr	r2, [pc, #32]	; (80159c8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 80159a8:	2170      	movs	r1, #112	; 0x70
 80159aa:	e7c4      	b.n	8015936 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 80159ac:	2001      	movs	r0, #1
 80159ae:	e7b8      	b.n	8015922 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x22>
 80159b0:	2000d1b4 	.word	0x2000d1b4
 80159b4:	2000d1ac 	.word	0x2000d1ac
 80159b8:	2000d1bc 	.word	0x2000d1bc
 80159bc:	2000d1c4 	.word	0x2000d1c4
 80159c0:	2000d1c0 	.word	0x2000d1c0
 80159c4:	080265d4 	.word	0x080265d4
 80159c8:	0802669c 	.word	0x0802669c
 80159cc:	0802660d 	.word	0x0802660d
 80159d0:	2000d1c8 	.word	0x2000d1c8
 80159d4:	2000d1b8 	.word	0x2000d1b8
 80159d8:	2000d1b0 	.word	0x2000d1b0
 80159dc:	08026657 	.word	0x08026657

080159e0 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv>:
 80159e0:	4b04      	ldr	r3, [pc, #16]	; (80159f4 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x14>)
 80159e2:	6818      	ldr	r0, [r3, #0]
 80159e4:	b120      	cbz	r0, 80159f0 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x10>
 80159e6:	4b04      	ldr	r3, [pc, #16]	; (80159f8 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x18>)
 80159e8:	6818      	ldr	r0, [r3, #0]
 80159ea:	3000      	adds	r0, #0
 80159ec:	bf18      	it	ne
 80159ee:	2001      	movne	r0, #1
 80159f0:	4770      	bx	lr
 80159f2:	bf00      	nop
 80159f4:	2000d1ac 	.word	0x2000d1ac
 80159f8:	2000d1c0 	.word	0x2000d1c0

080159fc <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>:
 80159fc:	4b01      	ldr	r3, [pc, #4]	; (8015a04 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv+0x8>)
 80159fe:	6818      	ldr	r0, [r3, #0]
 8015a00:	4770      	bx	lr
 8015a02:	bf00      	nop
 8015a04:	2000d1b4 	.word	0x2000d1b4

08015a08 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv>:
 8015a08:	4b01      	ldr	r3, [pc, #4]	; (8015a10 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv+0x8>)
 8015a0a:	6818      	ldr	r0, [r3, #0]
 8015a0c:	4770      	bx	lr
 8015a0e:	bf00      	nop
 8015a10:	2000d1bc 	.word	0x2000d1bc

08015a14 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv>:
 8015a14:	4b01      	ldr	r3, [pc, #4]	; (8015a1c <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv+0x8>)
 8015a16:	6818      	ldr	r0, [r3, #0]
 8015a18:	4770      	bx	lr
 8015a1a:	bf00      	nop
 8015a1c:	2000d1c8 	.word	0x2000d1c8

08015a20 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv>:
 8015a20:	4b01      	ldr	r3, [pc, #4]	; (8015a28 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv+0x8>)
 8015a22:	6818      	ldr	r0, [r3, #0]
 8015a24:	4770      	bx	lr
 8015a26:	bf00      	nop
 8015a28:	2000d1b8 	.word	0x2000d1b8

08015a2c <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 8015a2c:	4b01      	ldr	r3, [pc, #4]	; (8015a34 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 8015a2e:	6818      	ldr	r0, [r3, #0]
 8015a30:	4770      	bx	lr
 8015a32:	bf00      	nop
 8015a34:	2000d1b0 	.word	0x2000d1b0

08015a38 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 8015a38:	4b01      	ldr	r3, [pc, #4]	; (8015a40 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 8015a3a:	6818      	ldr	r0, [r3, #0]
 8015a3c:	4770      	bx	lr
 8015a3e:	bf00      	nop
 8015a40:	2000d1c4 	.word	0x2000d1c4

08015a44 <_ZN8touchgfx3LCD4initEv>:
 8015a44:	4770      	bx	lr

08015a46 <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8015a46:	2000      	movs	r0, #0
 8015a48:	4770      	bx	lr

08015a4a <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 8015a4a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a4e:	b091      	sub	sp, #68	; 0x44
 8015a50:	4699      	mov	r9, r3
 8015a52:	f8dd a06c 	ldr.w	sl, [sp, #108]	; 0x6c
 8015a56:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 8015a58:	f9ba 300c 	ldrsh.w	r3, [sl, #12]
 8015a5c:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8015a60:	4680      	mov	r8, r0
 8015a62:	4617      	mov	r7, r2
 8015a64:	a80e      	add	r0, sp, #56	; 0x38
 8015a66:	f9ba 2008 	ldrsh.w	r2, [sl, #8]
 8015a6a:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 8015a6e:	2500      	movs	r5, #0
 8015a70:	910d      	str	r1, [sp, #52]	; 0x34
 8015a72:	950e      	str	r5, [sp, #56]	; 0x38
 8015a74:	f000 fe3e 	bl	80166f4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8015a78:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8015a7a:	f8d9 6000 	ldr.w	r6, [r9]
 8015a7e:	6818      	ldr	r0, [r3, #0]
 8015a80:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8015a82:	f9b4 b000 	ldrsh.w	fp, [r4]
 8015a86:	f9b3 2000 	ldrsh.w	r2, [r3]
 8015a8a:	eb02 0c06 	add.w	ip, r2, r6
 8015a8e:	1b80      	subs	r0, r0, r6
 8015a90:	ebab 0e0c 	sub.w	lr, fp, ip
 8015a94:	4570      	cmp	r0, lr
 8015a96:	f340 80bd 	ble.w	8015c14 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1ca>
 8015a9a:	88a1      	ldrh	r1, [r4, #4]
 8015a9c:	4459      	add	r1, fp
 8015a9e:	b209      	sxth	r1, r1
 8015aa0:	458c      	cmp	ip, r1
 8015aa2:	f300 80b7 	bgt.w	8015c14 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1ca>
 8015aa6:	f8bd 3080 	ldrh.w	r3, [sp, #128]	; 0x80
 8015aaa:	ed97 4a09 	vldr	s8, [r7, #36]	; 0x24
 8015aae:	edd7 4a0b 	vldr	s9, [r7, #44]	; 0x2c
 8015ab2:	edd9 6a07 	vldr	s13, [r9, #28]
 8015ab6:	edd9 1a0a 	vldr	s3, [r9, #40]	; 0x28
 8015aba:	ed99 2a0d 	vldr	s4, [r9, #52]	; 0x34
 8015abe:	4283      	cmp	r3, r0
 8015ac0:	bfa8      	it	ge
 8015ac2:	4603      	movge	r3, r0
 8015ac4:	ee07 3a90 	vmov	s15, r3
 8015ac8:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8015acc:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8015ad0:	ee25 4a04 	vmul.f32	s8, s10, s8
 8015ad4:	ee65 4a24 	vmul.f32	s9, s10, s9
 8015ad8:	ee25 5a27 	vmul.f32	s10, s10, s15
 8015adc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8015ae0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8015ae4:	45e3      	cmp	fp, ip
 8015ae6:	ee71 0aa4 	vadd.f32	s1, s3, s9
 8015aea:	ee32 1a05 	vadd.f32	s2, s4, s10
 8015aee:	ee36 0a84 	vadd.f32	s0, s13, s8
 8015af2:	ee61 1a87 	vmul.f32	s3, s3, s14
 8015af6:	ee22 2a07 	vmul.f32	s4, s4, s14
 8015afa:	f340 808e 	ble.w	8015c1a <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1d0>
 8015afe:	fb9e f5f3 	sdiv	r5, lr, r3
 8015b02:	ee07 5a10 	vmov	s14, r5
 8015b06:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015b0a:	2d00      	cmp	r5, #0
 8015b0c:	fb03 e415 	mls	r4, r3, r5, lr
 8015b10:	eea7 0a04 	vfma.f32	s0, s14, s8
 8015b14:	eee7 0a24 	vfma.f32	s1, s14, s9
 8015b18:	eea7 1a05 	vfma.f32	s2, s14, s10
 8015b1c:	dd13      	ble.n	8015b46 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 8015b1e:	ee70 6a44 	vsub.f32	s13, s0, s8
 8015b22:	ee70 1ae4 	vsub.f32	s3, s1, s9
 8015b26:	eef5 6a40 	vcmp.f32	s13, #0.0
 8015b2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b2e:	bf18      	it	ne
 8015b30:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 8015b34:	ee31 2a45 	vsub.f32	s4, s2, s10
 8015b38:	bf08      	it	eq
 8015b3a:	eeb0 7a67 	vmoveq.f32	s14, s15
 8015b3e:	ee61 1a87 	vmul.f32	s3, s3, s14
 8015b42:	ee22 2a07 	vmul.f32	s4, s4, s14
 8015b46:	fb05 f703 	mul.w	r7, r5, r3
 8015b4a:	1bc0      	subs	r0, r0, r7
 8015b4c:	443e      	add	r6, r7
 8015b4e:	1997      	adds	r7, r2, r6
 8015b50:	4407      	add	r7, r0
 8015b52:	42b9      	cmp	r1, r7
 8015b54:	bfbc      	itt	lt
 8015b56:	1a88      	sublt	r0, r1, r2
 8015b58:	1b80      	sublt	r0, r0, r6
 8015b5a:	2800      	cmp	r0, #0
 8015b5c:	dd5a      	ble.n	8015c14 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1ca>
 8015b5e:	fb90 f1f3 	sdiv	r1, r0, r3
 8015b62:	fb03 0211 	mls	r2, r3, r1, r0
 8015b66:	b90a      	cbnz	r2, 8015b6c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x122>
 8015b68:	3901      	subs	r1, #1
 8015b6a:	461a      	mov	r2, r3
 8015b6c:	eec7 3a80 	vdiv.f32	s7, s15, s0
 8015b70:	f89d b07c 	ldrb.w	fp, [sp, #124]	; 0x7c
 8015b74:	44a4      	add	ip, r4
 8015b76:	fb03 c505 	mla	r5, r3, r5, ip
 8015b7a:	2900      	cmp	r1, #0
 8015b7c:	bfcc      	ite	gt
 8015b7e:	469e      	movgt	lr, r3
 8015b80:	4696      	movle	lr, r2
 8015b82:	eef0 6a42 	vmov.f32	s13, s4
 8015b86:	ee60 2aa3 	vmul.f32	s5, s1, s7
 8015b8a:	ee21 3a23 	vmul.f32	s6, s2, s7
 8015b8e:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8015b92:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8015b96:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8015b9a:	eeb0 7a61 	vmov.f32	s14, s3
 8015b9e:	ee17 0a90 	vmov	r0, s15
 8015ba2:	ee73 7a42 	vsub.f32	s15, s6, s4
 8015ba6:	fb90 f6f3 	sdiv	r6, r0, r3
 8015baa:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8015bae:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8015bb2:	ee17 0a90 	vmov	r0, s15
 8015bb6:	fb90 f7f3 	sdiv	r7, r0, r3
 8015bba:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8015bbe:	900c      	str	r0, [sp, #48]	; 0x30
 8015bc0:	f8d0 8000 	ldr.w	r8, [r0]
 8015bc4:	981c      	ldr	r0, [sp, #112]	; 0x70
 8015bc6:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8015bca:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	; 0x3e
 8015bce:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8015bd2:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 8015bd6:	f8cd a020 	str.w	sl, [sp, #32]
 8015bda:	f9b0 a002 	ldrsh.w	sl, [r0, #2]
 8015bde:	980d      	ldr	r0, [sp, #52]	; 0x34
 8015be0:	f8d9 9014 	ldr.w	r9, [r9, #20]
 8015be4:	9603      	str	r6, [sp, #12]
 8015be6:	e9cd 7004 	strd	r7, r0, [sp, #16]
 8015bea:	ee16 0a90 	vmov	r0, s13
 8015bee:	fb07 0704 	mla	r7, r7, r4, r0
 8015bf2:	ee17 0a10 	vmov	r0, s14
 8015bf6:	fb06 0604 	mla	r6, r6, r4, r0
 8015bfa:	e9cd 3600 	strd	r3, r6, [sp]
 8015bfe:	44ca      	add	sl, r9
 8015c00:	f8cd a01c 	str.w	sl, [sp, #28]
 8015c04:	9506      	str	r5, [sp, #24]
 8015c06:	9702      	str	r7, [sp, #8]
 8015c08:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8015c0c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8015c0e:	ebae 0304 	sub.w	r3, lr, r4
 8015c12:	47a8      	blx	r5
 8015c14:	b011      	add	sp, #68	; 0x44
 8015c16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015c1a:	462c      	mov	r4, r5
 8015c1c:	e797      	b.n	8015b4e <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x104>

08015c1e <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 8015c1e:	b570      	push	{r4, r5, r6, lr}
 8015c20:	4604      	mov	r4, r0
 8015c22:	2500      	movs	r5, #0
 8015c24:	7223      	strb	r3, [r4, #8]
 8015c26:	9804      	ldr	r0, [sp, #16]
 8015c28:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8015c2c:	8025      	strh	r5, [r4, #0]
 8015c2e:	6061      	str	r1, [r4, #4]
 8015c30:	7263      	strb	r3, [r4, #9]
 8015c32:	60e0      	str	r0, [r4, #12]
 8015c34:	8222      	strh	r2, [r4, #16]
 8015c36:	8265      	strh	r5, [r4, #18]
 8015c38:	82a5      	strh	r5, [r4, #20]
 8015c3a:	82e5      	strh	r5, [r4, #22]
 8015c3c:	8325      	strh	r5, [r4, #24]
 8015c3e:	8365      	strh	r5, [r4, #26]
 8015c40:	83a5      	strh	r5, [r4, #28]
 8015c42:	77a5      	strb	r5, [r4, #30]
 8015c44:	6803      	ldr	r3, [r0, #0]
 8015c46:	695b      	ldr	r3, [r3, #20]
 8015c48:	4798      	blx	r3
 8015c4a:	4606      	mov	r6, r0
 8015c4c:	b1f8      	cbz	r0, 8015c8e <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 8015c4e:	68e0      	ldr	r0, [r4, #12]
 8015c50:	6803      	ldr	r3, [r0, #0]
 8015c52:	4631      	mov	r1, r6
 8015c54:	68db      	ldr	r3, [r3, #12]
 8015c56:	4798      	blx	r3
 8015c58:	f990 300d 	ldrsb.w	r3, [r0, #13]
 8015c5c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8015c60:	7a83      	ldrb	r3, [r0, #10]
 8015c62:	4313      	orrs	r3, r2
 8015c64:	83a3      	strh	r3, [r4, #28]
 8015c66:	7a63      	ldrb	r3, [r4, #9]
 8015c68:	2b04      	cmp	r3, #4
 8015c6a:	4605      	mov	r5, r0
 8015c6c:	d10f      	bne.n	8015c8e <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 8015c6e:	68e0      	ldr	r0, [r4, #12]
 8015c70:	6803      	ldr	r3, [r0, #0]
 8015c72:	462a      	mov	r2, r5
 8015c74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015c76:	4631      	mov	r1, r6
 8015c78:	4798      	blx	r3
 8015c7a:	f995 300d 	ldrsb.w	r3, [r5, #13]
 8015c7e:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8015c82:	7aab      	ldrb	r3, [r5, #10]
 8015c84:	4313      	orrs	r3, r2
 8015c86:	4418      	add	r0, r3
 8015c88:	8ba3      	ldrh	r3, [r4, #28]
 8015c8a:	4418      	add	r0, r3
 8015c8c:	83a0      	strh	r0, [r4, #28]
 8015c8e:	4620      	mov	r0, r4
 8015c90:	bd70      	pop	{r4, r5, r6, pc}

08015c92 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 8015c92:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c96:	2400      	movs	r4, #0
 8015c98:	b085      	sub	sp, #20
 8015c9a:	4681      	mov	r9, r0
 8015c9c:	460f      	mov	r7, r1
 8015c9e:	4692      	mov	sl, r2
 8015ca0:	469b      	mov	fp, r3
 8015ca2:	46a0      	mov	r8, r4
 8015ca4:	4626      	mov	r6, r4
 8015ca6:	4554      	cmp	r4, sl
 8015ca8:	da21      	bge.n	8015cee <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x5c>
 8015caa:	2300      	movs	r3, #0
 8015cac:	9303      	str	r3, [sp, #12]
 8015cae:	463a      	mov	r2, r7
 8015cb0:	ab03      	add	r3, sp, #12
 8015cb2:	4659      	mov	r1, fp
 8015cb4:	4648      	mov	r0, r9
 8015cb6:	f002 fc01 	bl	80184bc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8015cba:	4605      	mov	r5, r0
 8015cbc:	b1b8      	cbz	r0, 8015cee <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x5c>
 8015cbe:	280a      	cmp	r0, #10
 8015cc0:	d015      	beq.n	8015cee <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x5c>
 8015cc2:	9a03      	ldr	r2, [sp, #12]
 8015cc4:	b182      	cbz	r2, 8015ce8 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x56>
 8015cc6:	f992 000d 	ldrsb.w	r0, [r2, #13]
 8015cca:	7a93      	ldrb	r3, [r2, #10]
 8015ccc:	8895      	ldrh	r5, [r2, #4]
 8015cce:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8015cd2:	4303      	orrs	r3, r0
 8015cd4:	9301      	str	r3, [sp, #4]
 8015cd6:	683b      	ldr	r3, [r7, #0]
 8015cd8:	4641      	mov	r1, r8
 8015cda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015cdc:	4638      	mov	r0, r7
 8015cde:	4798      	blx	r3
 8015ce0:	9b01      	ldr	r3, [sp, #4]
 8015ce2:	4418      	add	r0, r3
 8015ce4:	4406      	add	r6, r0
 8015ce6:	b2b6      	uxth	r6, r6
 8015ce8:	3401      	adds	r4, #1
 8015cea:	46a8      	mov	r8, r5
 8015cec:	e7db      	b.n	8015ca6 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x14>
 8015cee:	4630      	mov	r0, r6
 8015cf0:	b005      	add	sp, #20
 8015cf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015cf6 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 8015cf6:	2a02      	cmp	r2, #2
 8015cf8:	b530      	push	{r4, r5, lr}
 8015cfa:	d011      	beq.n	8015d20 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 8015cfc:	2a03      	cmp	r2, #3
 8015cfe:	d01c      	beq.n	8015d3a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 8015d00:	2a01      	cmp	r2, #1
 8015d02:	d10c      	bne.n	8015d1e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8015d04:	888b      	ldrh	r3, [r1, #4]
 8015d06:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8015d0a:	8801      	ldrh	r1, [r0, #0]
 8015d0c:	8844      	ldrh	r4, [r0, #2]
 8015d0e:	8004      	strh	r4, [r0, #0]
 8015d10:	1a9b      	subs	r3, r3, r2
 8015d12:	1a5b      	subs	r3, r3, r1
 8015d14:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8015d18:	8043      	strh	r3, [r0, #2]
 8015d1a:	8081      	strh	r1, [r0, #4]
 8015d1c:	80c2      	strh	r2, [r0, #6]
 8015d1e:	bd30      	pop	{r4, r5, pc}
 8015d20:	88cb      	ldrh	r3, [r1, #6]
 8015d22:	88c2      	ldrh	r2, [r0, #6]
 8015d24:	1a9b      	subs	r3, r3, r2
 8015d26:	8842      	ldrh	r2, [r0, #2]
 8015d28:	1a9b      	subs	r3, r3, r2
 8015d2a:	888a      	ldrh	r2, [r1, #4]
 8015d2c:	8881      	ldrh	r1, [r0, #4]
 8015d2e:	8043      	strh	r3, [r0, #2]
 8015d30:	1a52      	subs	r2, r2, r1
 8015d32:	8801      	ldrh	r1, [r0, #0]
 8015d34:	1a52      	subs	r2, r2, r1
 8015d36:	8002      	strh	r2, [r0, #0]
 8015d38:	e7f1      	b.n	8015d1e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8015d3a:	88cb      	ldrh	r3, [r1, #6]
 8015d3c:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8015d40:	8841      	ldrh	r1, [r0, #2]
 8015d42:	f9b0 5000 	ldrsh.w	r5, [r0]
 8015d46:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8015d4a:	8045      	strh	r5, [r0, #2]
 8015d4c:	1a9b      	subs	r3, r3, r2
 8015d4e:	1a5b      	subs	r3, r3, r1
 8015d50:	8003      	strh	r3, [r0, #0]
 8015d52:	8082      	strh	r2, [r0, #4]
 8015d54:	80c4      	strh	r4, [r0, #6]
 8015d56:	e7e2      	b.n	8015d1e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

08015d58 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:
 8015d58:	b570      	push	{r4, r5, r6, lr}
 8015d5a:	b086      	sub	sp, #24
 8015d5c:	ac02      	add	r4, sp, #8
 8015d5e:	e884 0006 	stmia.w	r4, {r1, r2}
 8015d62:	461a      	mov	r2, r3
 8015d64:	ab0c      	add	r3, sp, #48	; 0x30
 8015d66:	9305      	str	r3, [sp, #20]
 8015d68:	4b0a      	ldr	r3, [pc, #40]	; (8015d94 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz+0x3c>)
 8015d6a:	685d      	ldr	r5, [r3, #4]
 8015d6c:	1069      	asrs	r1, r5, #1
 8015d6e:	07ed      	lsls	r5, r5, #31
 8015d70:	bf4c      	ite	mi
 8015d72:	681b      	ldrmi	r3, [r3, #0]
 8015d74:	681d      	ldrpl	r5, [r3, #0]
 8015d76:	eb00 0601 	add.w	r6, r0, r1
 8015d7a:	bf44      	itt	mi
 8015d7c:	5841      	ldrmi	r1, [r0, r1]
 8015d7e:	58cd      	ldrmi	r5, [r1, r3]
 8015d80:	9b05      	ldr	r3, [sp, #20]
 8015d82:	9301      	str	r3, [sp, #4]
 8015d84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015d86:	9300      	str	r3, [sp, #0]
 8015d88:	4621      	mov	r1, r4
 8015d8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015d8c:	4630      	mov	r0, r6
 8015d8e:	47a8      	blx	r5
 8015d90:	b006      	add	sp, #24
 8015d92:	bd70      	pop	{r4, r5, r6, pc}
 8015d94:	20000014 	.word	0x20000014

08015d98 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 8015d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d9c:	b09d      	sub	sp, #116	; 0x74
 8015d9e:	9114      	str	r1, [sp, #80]	; 0x50
 8015da0:	9315      	str	r3, [sp, #84]	; 0x54
 8015da2:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8015da4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8015da6:	8809      	ldrh	r1, [r1, #0]
 8015da8:	889b      	ldrh	r3, [r3, #4]
 8015daa:	9e28      	ldr	r6, [sp, #160]	; 0xa0
 8015dac:	9210      	str	r2, [sp, #64]	; 0x40
 8015dae:	440b      	add	r3, r1
 8015db0:	b21b      	sxth	r3, r3
 8015db2:	930e      	str	r3, [sp, #56]	; 0x38
 8015db4:	6833      	ldr	r3, [r6, #0]
 8015db6:	f89d 20b0 	ldrb.w	r2, [sp, #176]	; 0xb0
 8015dba:	7a59      	ldrb	r1, [r3, #9]
 8015dbc:	7a1b      	ldrb	r3, [r3, #8]
 8015dbe:	9312      	str	r3, [sp, #72]	; 0x48
 8015dc0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8015dc2:	900f      	str	r0, [sp, #60]	; 0x3c
 8015dc4:	f89d b0a4 	ldrb.w	fp, [sp, #164]	; 0xa4
 8015dc8:	9113      	str	r1, [sp, #76]	; 0x4c
 8015dca:	f9b3 4000 	ldrsh.w	r4, [r3]
 8015dce:	2a00      	cmp	r2, #0
 8015dd0:	d059      	beq.n	8015e86 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xee>
 8015dd2:	7c33      	ldrb	r3, [r6, #16]
 8015dd4:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8015dd6:	2b04      	cmp	r3, #4
 8015dd8:	bf14      	ite	ne
 8015dda:	2301      	movne	r3, #1
 8015ddc:	2302      	moveq	r3, #2
 8015dde:	4413      	add	r3, r2
 8015de0:	f04f 0800 	mov.w	r8, #0
 8015de4:	930d      	str	r3, [sp, #52]	; 0x34
 8015de6:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8015dea:	4645      	mov	r5, r8
 8015dec:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	; 0x30
 8015df0:	4293      	cmp	r3, r2
 8015df2:	da75      	bge.n	8015ee0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x148>
 8015df4:	2300      	movs	r3, #0
 8015df6:	931a      	str	r3, [sp, #104]	; 0x68
 8015df8:	992b      	ldr	r1, [sp, #172]	; 0xac
 8015dfa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015dfc:	6832      	ldr	r2, [r6, #0]
 8015dfe:	428b      	cmp	r3, r1
 8015e00:	db43      	blt.n	8015e8a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xf2>
 8015e02:	6813      	ldr	r3, [r2, #0]
 8015e04:	4610      	mov	r0, r2
 8015e06:	695b      	ldr	r3, [r3, #20]
 8015e08:	4798      	blx	r3
 8015e0a:	4681      	mov	r9, r0
 8015e0c:	6830      	ldr	r0, [r6, #0]
 8015e0e:	6803      	ldr	r3, [r0, #0]
 8015e10:	aa1b      	add	r2, sp, #108	; 0x6c
 8015e12:	689f      	ldr	r7, [r3, #8]
 8015e14:	4649      	mov	r1, r9
 8015e16:	f10d 0367 	add.w	r3, sp, #103	; 0x67
 8015e1a:	47b8      	blx	r7
 8015e1c:	901a      	str	r0, [sp, #104]	; 0x68
 8015e1e:	f64f 6aff 	movw	sl, #65279	; 0xfeff
 8015e22:	45d1      	cmp	r9, sl
 8015e24:	d045      	beq.n	8015eb2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 8015e26:	f242 070b 	movw	r7, #8203	; 0x200b
 8015e2a:	45b9      	cmp	r9, r7
 8015e2c:	d041      	beq.n	8015eb2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 8015e2e:	f1b9 0f00 	cmp.w	r9, #0
 8015e32:	f000 80ef 	beq.w	8016014 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27c>
 8015e36:	f1b9 0f0a 	cmp.w	r9, #10
 8015e3a:	d057      	beq.n	8015eec <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 8015e3c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8015e3e:	b383      	cbz	r3, 8015ea2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x10a>
 8015e40:	f8b3 9004 	ldrh.w	r9, [r3, #4]
 8015e44:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8015e46:	2a00      	cmp	r2, #0
 8015e48:	f000 80d3 	beq.w	8015ff2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x25a>
 8015e4c:	f1bb 0f00 	cmp.w	fp, #0
 8015e50:	d100      	bne.n	8015e54 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xbc>
 8015e52:	4444      	add	r4, r8
 8015e54:	f992 800d 	ldrsb.w	r8, [r2, #13]
 8015e58:	f408 7380 	and.w	r3, r8, #256	; 0x100
 8015e5c:	f892 800a 	ldrb.w	r8, [r2, #10]
 8015e60:	f1bb 0f01 	cmp.w	fp, #1
 8015e64:	ea48 0803 	orr.w	r8, r8, r3
 8015e68:	d128      	bne.n	8015ebc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x124>
 8015e6a:	eba4 0408 	sub.w	r4, r4, r8
 8015e6e:	2d00      	cmp	r5, #0
 8015e70:	d143      	bne.n	8015efa <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x162>
 8015e72:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8015e74:	eb08 0304 	add.w	r3, r8, r4
 8015e78:	4413      	add	r3, r2
 8015e7a:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8015e7c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015e80:	4293      	cmp	r3, r2
 8015e82:	da44      	bge.n	8015f0e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 8015e84:	e02b      	b.n	8015ede <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x146>
 8015e86:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8015e88:	e7aa      	b.n	8015de0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x48>
 8015e8a:	f10d 0367 	add.w	r3, sp, #103	; 0x67
 8015e8e:	9301      	str	r3, [sp, #4]
 8015e90:	ab1b      	add	r3, sp, #108	; 0x6c
 8015e92:	9300      	str	r3, [sp, #0]
 8015e94:	4659      	mov	r1, fp
 8015e96:	ab1a      	add	r3, sp, #104	; 0x68
 8015e98:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8015e9a:	f002 fb43 	bl	8018524 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 8015e9e:	4681      	mov	r9, r0
 8015ea0:	e7bd      	b.n	8015e1e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x86>
 8015ea2:	6830      	ldr	r0, [r6, #0]
 8015ea4:	6803      	ldr	r3, [r0, #0]
 8015ea6:	691b      	ldr	r3, [r3, #16]
 8015ea8:	4798      	blx	r3
 8015eaa:	4550      	cmp	r0, sl
 8015eac:	d001      	beq.n	8015eb2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 8015eae:	42b8      	cmp	r0, r7
 8015eb0:	d1c8      	bne.n	8015e44 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xac>
 8015eb2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015eb4:	3301      	adds	r3, #1
 8015eb6:	930c      	str	r3, [sp, #48]	; 0x30
 8015eb8:	464d      	mov	r5, r9
 8015eba:	e797      	b.n	8015dec <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x54>
 8015ebc:	2d00      	cmp	r5, #0
 8015ebe:	f000 80ab 	beq.w	8016018 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x280>
 8015ec2:	f1bb 0f00 	cmp.w	fp, #0
 8015ec6:	d118      	bne.n	8015efa <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x162>
 8015ec8:	6830      	ldr	r0, [r6, #0]
 8015eca:	6803      	ldr	r3, [r0, #0]
 8015ecc:	4629      	mov	r1, r5
 8015ece:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015ed0:	4798      	blx	r3
 8015ed2:	4404      	add	r4, r0
 8015ed4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015ed6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015ed8:	1ae3      	subs	r3, r4, r3
 8015eda:	4293      	cmp	r3, r2
 8015edc:	dd17      	ble.n	8015f0e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 8015ede:	464d      	mov	r5, r9
 8015ee0:	2d00      	cmp	r5, #0
 8015ee2:	f000 8097 	beq.w	8016014 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27c>
 8015ee6:	2d0a      	cmp	r5, #10
 8015ee8:	f040 8085 	bne.w	8015ff6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x25e>
 8015eec:	250a      	movs	r5, #10
 8015eee:	fab5 f085 	clz	r0, r5
 8015ef2:	0940      	lsrs	r0, r0, #5
 8015ef4:	b01d      	add	sp, #116	; 0x74
 8015ef6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015efa:	6830      	ldr	r0, [r6, #0]
 8015efc:	6803      	ldr	r3, [r0, #0]
 8015efe:	4629      	mov	r1, r5
 8015f00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015f02:	4798      	blx	r3
 8015f04:	f1bb 0f01 	cmp.w	fp, #1
 8015f08:	eba4 0400 	sub.w	r4, r4, r0
 8015f0c:	d0b1      	beq.n	8015e72 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 8015f0e:	981a      	ldr	r0, [sp, #104]	; 0x68
 8015f10:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8015f12:	f990 1009 	ldrsb.w	r1, [r0, #9]
 8015f16:	f9b3 5000 	ldrsh.w	r5, [r3]
 8015f1a:	7b43      	ldrb	r3, [r0, #13]
 8015f1c:	015b      	lsls	r3, r3, #5
 8015f1e:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8015f22:	7983      	ldrb	r3, [r0, #6]
 8015f24:	4421      	add	r1, r4
 8015f26:	4313      	orrs	r3, r2
 8015f28:	440b      	add	r3, r1
 8015f2a:	42ab      	cmp	r3, r5
 8015f2c:	dbc1      	blt.n	8015eb2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 8015f2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015f30:	4299      	cmp	r1, r3
 8015f32:	dabe      	bge.n	8015eb2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 8015f34:	6830      	ldr	r0, [r6, #0]
 8015f36:	6803      	ldr	r3, [r0, #0]
 8015f38:	42a5      	cmp	r5, r4
 8015f3a:	bfc8      	it	gt
 8015f3c:	1b2d      	subgt	r5, r5, r4
 8015f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015f40:	bfcc      	ite	gt
 8015f42:	b2ad      	uxthgt	r5, r5
 8015f44:	2500      	movle	r5, #0
 8015f46:	4798      	blx	r3
 8015f48:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8015f4a:	4936      	ldr	r1, [pc, #216]	; (8016024 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28c>)
 8015f4c:	7b5a      	ldrb	r2, [r3, #13]
 8015f4e:	f893 e008 	ldrb.w	lr, [r3, #8]
 8015f52:	f012 0f40 	tst.w	r2, #64	; 0x40
 8015f56:	bf18      	it	ne
 8015f58:	468c      	movne	ip, r1
 8015f5a:	9915      	ldr	r1, [sp, #84]	; 0x54
 8015f5c:	4408      	add	r0, r1
 8015f5e:	ea4f 01c2 	mov.w	r1, r2, lsl #3
 8015f62:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8015f66:	bf08      	it	eq
 8015f68:	f04f 0c00 	moveq.w	ip, #0
 8015f6c:	ea41 070e 	orr.w	r7, r1, lr
 8015f70:	ea4c 0707 	orr.w	r7, ip, r7
 8015f74:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8015f76:	1bc7      	subs	r7, r0, r7
 8015f78:	b2bf      	uxth	r7, r7
 8015f7a:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 8015f7e:	fa0f fa87 	sxth.w	sl, r7
 8015f82:	4551      	cmp	r1, sl
 8015f84:	dd33      	ble.n	8015fee <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x256>
 8015f86:	0112      	lsls	r2, r2, #4
 8015f88:	79d8      	ldrb	r0, [r3, #7]
 8015f8a:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8015f8e:	4302      	orrs	r2, r0
 8015f90:	4492      	add	sl, r2
 8015f92:	4551      	cmp	r1, sl
 8015f94:	dc8d      	bgt.n	8015eb2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 8015f96:	1bcf      	subs	r7, r1, r7
 8015f98:	b2bf      	uxth	r7, r7
 8015f9a:	468a      	mov	sl, r1
 8015f9c:	9317      	str	r3, [sp, #92]	; 0x5c
 8015f9e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015fa0:	6830      	ldr	r0, [r6, #0]
 8015fa2:	681a      	ldr	r2, [r3, #0]
 8015fa4:	6801      	ldr	r1, [r0, #0]
 8015fa6:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8015fa8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8015faa:	9311      	str	r3, [sp, #68]	; 0x44
 8015fac:	9216      	str	r2, [sp, #88]	; 0x58
 8015fae:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8015fb0:	4788      	blx	r1
 8015fb2:	79b1      	ldrb	r1, [r6, #6]
 8015fb4:	910b      	str	r1, [sp, #44]	; 0x2c
 8015fb6:	7bb1      	ldrb	r1, [r6, #14]
 8015fb8:	910a      	str	r1, [sp, #40]	; 0x28
 8015fba:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
 8015fbe:	9109      	str	r1, [sp, #36]	; 0x24
 8015fc0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015fc2:	68b1      	ldr	r1, [r6, #8]
 8015fc4:	9305      	str	r3, [sp, #20]
 8015fc6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8015fc8:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8015fca:	9206      	str	r2, [sp, #24]
 8015fcc:	e9cd 0107 	strd	r0, r1, [sp, #28]
 8015fd0:	e9cd 7303 	strd	r7, r3, [sp, #12]
 8015fd4:	e9cd a501 	strd	sl, r5, [sp, #4]
 8015fd8:	4425      	add	r5, r4
 8015fda:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015fdc:	9914      	ldr	r1, [sp, #80]	; 0x50
 8015fde:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8015fe0:	b22d      	sxth	r5, r5
 8015fe2:	9500      	str	r5, [sp, #0]
 8015fe4:	681a      	ldr	r2, [r3, #0]
 8015fe6:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8015fe8:	685b      	ldr	r3, [r3, #4]
 8015fea:	47a8      	blx	r5
 8015fec:	e761      	b.n	8015eb2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 8015fee:	2700      	movs	r7, #0
 8015ff0:	e7d4      	b.n	8015f9c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x204>
 8015ff2:	4690      	mov	r8, r2
 8015ff4:	e75d      	b.n	8015eb2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 8015ff6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8015ff8:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8015ffa:	3401      	adds	r4, #1
 8015ffc:	429c      	cmp	r4, r3
 8015ffe:	f6bf af76 	bge.w	8015eee <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x156>
 8016002:	4659      	mov	r1, fp
 8016004:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8016006:	f002 fa19 	bl	801843c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801600a:	4605      	mov	r5, r0
 801600c:	b110      	cbz	r0, 8016014 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27c>
 801600e:	280a      	cmp	r0, #10
 8016010:	d1f2      	bne.n	8015ff8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x260>
 8016012:	e76b      	b.n	8015eec <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 8016014:	2500      	movs	r5, #0
 8016016:	e76a      	b.n	8015eee <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x156>
 8016018:	f1bb 0f00 	cmp.w	fp, #0
 801601c:	f43f af5a 	beq.w	8015ed4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x13c>
 8016020:	e775      	b.n	8015f0e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 8016022:	bf00      	nop
 8016024:	fffffe00 	.word	0xfffffe00

08016028 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 8016028:	b530      	push	{r4, r5, lr}
 801602a:	8a44      	ldrh	r4, [r0, #18]
 801602c:	8ac5      	ldrh	r5, [r0, #22]
 801602e:	82c3      	strh	r3, [r0, #22]
 8016030:	442c      	add	r4, r5
 8016032:	1ae4      	subs	r4, r4, r3
 8016034:	8244      	strh	r4, [r0, #18]
 8016036:	8b03      	ldrh	r3, [r0, #24]
 8016038:	8a84      	ldrh	r4, [r0, #20]
 801603a:	4422      	add	r2, r4
 801603c:	440c      	add	r4, r1
 801603e:	1a59      	subs	r1, r3, r1
 8016040:	8342      	strh	r2, [r0, #26]
 8016042:	8284      	strh	r4, [r0, #20]
 8016044:	8301      	strh	r1, [r0, #24]
 8016046:	bd30      	pop	{r4, r5, pc}

08016048 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 8016048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801604c:	7a45      	ldrb	r5, [r0, #9]
 801604e:	1eeb      	subs	r3, r5, #3
 8016050:	b085      	sub	sp, #20
 8016052:	4604      	mov	r4, r0
 8016054:	b2db      	uxtb	r3, r3
 8016056:	4689      	mov	r9, r1
 8016058:	b329      	cbz	r1, 80160a6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x5e>
 801605a:	2b01      	cmp	r3, #1
 801605c:	d921      	bls.n	80160a2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x5a>
 801605e:	1e69      	subs	r1, r5, #1
 8016060:	f1d1 0b00 	rsbs	fp, r1, #0
 8016064:	eb4b 0b01 	adc.w	fp, fp, r1
 8016068:	1eaa      	subs	r2, r5, #2
 801606a:	4253      	negs	r3, r2
 801606c:	4153      	adcs	r3, r2
 801606e:	2500      	movs	r5, #0
 8016070:	9301      	str	r3, [sp, #4]
 8016072:	9500      	str	r5, [sp, #0]
 8016074:	2600      	movs	r6, #0
 8016076:	8266      	strh	r6, [r4, #18]
 8016078:	82a6      	strh	r6, [r4, #20]
 801607a:	f242 080b 	movw	r8, #8203	; 0x200b
 801607e:	2300      	movs	r3, #0
 8016080:	9303      	str	r3, [sp, #12]
 8016082:	68e2      	ldr	r2, [r4, #12]
 8016084:	7a21      	ldrb	r1, [r4, #8]
 8016086:	6860      	ldr	r0, [r4, #4]
 8016088:	8827      	ldrh	r7, [r4, #0]
 801608a:	ab03      	add	r3, sp, #12
 801608c:	f002 fa16 	bl	80184bc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8016090:	8020      	strh	r0, [r4, #0]
 8016092:	b9b0      	cbnz	r0, 80160c2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x7a>
 8016094:	8b22      	ldrh	r2, [r4, #24]
 8016096:	2300      	movs	r3, #0
 8016098:	4611      	mov	r1, r2
 801609a:	4620      	mov	r0, r4
 801609c:	f7ff ffc4 	bl	8016028 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 80160a0:	e062      	b.n	8016168 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x120>
 80160a2:	468b      	mov	fp, r1
 80160a4:	e7e0      	b.n	8016068 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x20>
 80160a6:	2b01      	cmp	r3, #1
 80160a8:	f105 35ff 	add.w	r5, r5, #4294967295
 80160ac:	bf8c      	ite	hi
 80160ae:	2300      	movhi	r3, #0
 80160b0:	2301      	movls	r3, #1
 80160b2:	2d01      	cmp	r5, #1
 80160b4:	9300      	str	r3, [sp, #0]
 80160b6:	bf8c      	ite	hi
 80160b8:	2500      	movhi	r5, #0
 80160ba:	2501      	movls	r5, #1
 80160bc:	9101      	str	r1, [sp, #4]
 80160be:	468b      	mov	fp, r1
 80160c0:	e7d8      	b.n	8016074 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x2c>
 80160c2:	8ae3      	ldrh	r3, [r4, #22]
 80160c4:	280a      	cmp	r0, #10
 80160c6:	f103 0301 	add.w	r3, r3, #1
 80160ca:	82e3      	strh	r3, [r4, #22]
 80160cc:	d0e2      	beq.n	8016094 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x4c>
 80160ce:	9a03      	ldr	r2, [sp, #12]
 80160d0:	b972      	cbnz	r2, 80160f0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa8>
 80160d2:	4540      	cmp	r0, r8
 80160d4:	d1d3      	bne.n	801607e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 80160d6:	8823      	ldrh	r3, [r4, #0]
 80160d8:	8b21      	ldrh	r1, [r4, #24]
 80160da:	2b20      	cmp	r3, #32
 80160dc:	d001      	beq.n	80160e2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x9a>
 80160de:	4543      	cmp	r3, r8
 80160e0:	d11d      	bne.n	801611e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd6>
 80160e2:	2f20      	cmp	r7, #32
 80160e4:	d002      	beq.n	80160ec <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa4>
 80160e6:	4547      	cmp	r7, r8
 80160e8:	bf18      	it	ne
 80160ea:	460e      	movne	r6, r1
 80160ec:	2001      	movs	r0, #1
 80160ee:	e017      	b.n	8016120 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd8>
 80160f0:	4540      	cmp	r0, r8
 80160f2:	d012      	beq.n	801611a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd2>
 80160f4:	8893      	ldrh	r3, [r2, #4]
 80160f6:	8023      	strh	r3, [r4, #0]
 80160f8:	f992 a00d 	ldrsb.w	sl, [r2, #13]
 80160fc:	f40a 7080 	and.w	r0, sl, #256	; 0x100
 8016100:	f892 a00a 	ldrb.w	sl, [r2, #10]
 8016104:	ea4a 0a00 	orr.w	sl, sl, r0
 8016108:	68e0      	ldr	r0, [r4, #12]
 801610a:	6803      	ldr	r3, [r0, #0]
 801610c:	4639      	mov	r1, r7
 801610e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016110:	4798      	blx	r3
 8016112:	eb0a 0200 	add.w	r2, sl, r0
 8016116:	b292      	uxth	r2, r2
 8016118:	e7dd      	b.n	80160d6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x8e>
 801611a:	2200      	movs	r2, #0
 801611c:	e7db      	b.n	80160d6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x8e>
 801611e:	2000      	movs	r0, #0
 8016120:	440a      	add	r2, r1
 8016122:	8aa3      	ldrh	r3, [r4, #20]
 8016124:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 8016128:	b292      	uxth	r2, r2
 801612a:	8322      	strh	r2, [r4, #24]
 801612c:	4413      	add	r3, r2
 801612e:	f1b9 0f00 	cmp.w	r9, #0
 8016132:	d022      	beq.n	801617a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x132>
 8016134:	f1bb 0f00 	cmp.w	fp, #0
 8016138:	d102      	bne.n	8016140 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf8>
 801613a:	9901      	ldr	r1, [sp, #4]
 801613c:	b149      	cbz	r1, 8016152 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x10a>
 801613e:	b140      	cbz	r0, 8016152 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x10a>
 8016140:	8ba1      	ldrh	r1, [r4, #28]
 8016142:	4419      	add	r1, r3
 8016144:	458c      	cmp	ip, r1
 8016146:	da12      	bge.n	801616e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x126>
 8016148:	8a61      	ldrh	r1, [r4, #18]
 801614a:	b181      	cbz	r1, 801616e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x126>
 801614c:	4563      	cmp	r3, ip
 801614e:	dd96      	ble.n	801607e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8016150:	e004      	b.n	801615c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x114>
 8016152:	4563      	cmp	r3, ip
 8016154:	dd93      	ble.n	801607e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8016156:	8a63      	ldrh	r3, [r4, #18]
 8016158:	2b00      	cmp	r3, #0
 801615a:	d090      	beq.n	801607e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801615c:	2301      	movs	r3, #1
 801615e:	77a3      	strb	r3, [r4, #30]
 8016160:	8ba2      	ldrh	r2, [r4, #28]
 8016162:	8b63      	ldrh	r3, [r4, #26]
 8016164:	4413      	add	r3, r2
 8016166:	8363      	strh	r3, [r4, #26]
 8016168:	b005      	add	sp, #20
 801616a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801616e:	2300      	movs	r3, #0
 8016170:	4611      	mov	r1, r2
 8016172:	4620      	mov	r0, r4
 8016174:	f7ff ff58 	bl	8016028 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8016178:	e781      	b.n	801607e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801617a:	4563      	cmp	r3, ip
 801617c:	dd16      	ble.n	80161ac <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x164>
 801617e:	9b00      	ldr	r3, [sp, #0]
 8016180:	b113      	cbz	r3, 8016188 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x140>
 8016182:	2301      	movs	r3, #1
 8016184:	460a      	mov	r2, r1
 8016186:	e787      	b.n	8016098 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x50>
 8016188:	2d00      	cmp	r5, #0
 801618a:	f43f af78 	beq.w	801607e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801618e:	2800      	cmp	r0, #0
 8016190:	f47f af75 	bne.w	801607e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8016194:	2f20      	cmp	r7, #32
 8016196:	d001      	beq.n	801619c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x154>
 8016198:	4547      	cmp	r7, r8
 801619a:	d102      	bne.n	80161a2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x15a>
 801619c:	2301      	movs	r3, #1
 801619e:	4632      	mov	r2, r6
 80161a0:	e77b      	b.n	801609a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x52>
 80161a2:	8a63      	ldrh	r3, [r4, #18]
 80161a4:	2b00      	cmp	r3, #0
 80161a6:	f43f af6a 	beq.w	801607e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 80161aa:	e7dd      	b.n	8016168 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x120>
 80161ac:	2800      	cmp	r0, #0
 80161ae:	f47f af66 	bne.w	801607e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 80161b2:	2f20      	cmp	r7, #32
 80161b4:	d002      	beq.n	80161bc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x174>
 80161b6:	4547      	cmp	r7, r8
 80161b8:	f47f af61 	bne.w	801607e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 80161bc:	2301      	movs	r3, #1
 80161be:	4632      	mov	r2, r6
 80161c0:	e7d7      	b.n	8016172 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x12a>

080161c2 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 80161c2:	b570      	push	{r4, r5, r6, lr}
 80161c4:	4606      	mov	r6, r0
 80161c6:	b08a      	sub	sp, #40	; 0x28
 80161c8:	4615      	mov	r5, r2
 80161ca:	b191      	cbz	r1, 80161f2 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x30>
 80161cc:	e9cd 3100 	strd	r3, r1, [sp]
 80161d0:	4613      	mov	r3, r2
 80161d2:	4601      	mov	r1, r0
 80161d4:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 80161d8:	a802      	add	r0, sp, #8
 80161da:	f7ff fd20 	bl	8015c1e <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 80161de:	2401      	movs	r4, #1
 80161e0:	2100      	movs	r1, #0
 80161e2:	a802      	add	r0, sp, #8
 80161e4:	f7ff ff30 	bl	8016048 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 80161e8:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80161ec:	b173      	cbz	r3, 801620c <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x4a>
 80161ee:	3401      	adds	r4, #1
 80161f0:	e7f6      	b.n	80161e0 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x1e>
 80161f2:	4611      	mov	r1, r2
 80161f4:	f002 f922 	bl	801843c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80161f8:	2401      	movs	r4, #1
 80161fa:	280a      	cmp	r0, #10
 80161fc:	4629      	mov	r1, r5
 80161fe:	4630      	mov	r0, r6
 8016200:	bf08      	it	eq
 8016202:	3401      	addeq	r4, #1
 8016204:	f002 f91a 	bl	801843c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8016208:	2800      	cmp	r0, #0
 801620a:	d1f6      	bne.n	80161fa <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x38>
 801620c:	b2a0      	uxth	r0, r4
 801620e:	b00a      	add	sp, #40	; 0x28
 8016210:	bd70      	pop	{r4, r5, r6, pc}

08016212 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 8016212:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016216:	b0db      	sub	sp, #364	; 0x16c
 8016218:	468a      	mov	sl, r1
 801621a:	f8dd b190 	ldr.w	fp, [sp, #400]	; 0x190
 801621e:	9009      	str	r0, [sp, #36]	; 0x24
 8016220:	461c      	mov	r4, r3
 8016222:	f1bb 0f00 	cmp.w	fp, #0
 8016226:	f000 80c7 	beq.w	80163b8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 801622a:	681b      	ldr	r3, [r3, #0]
 801622c:	2b00      	cmp	r3, #0
 801622e:	f000 80c3 	beq.w	80163b8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 8016232:	7ba3      	ldrb	r3, [r4, #14]
 8016234:	2b00      	cmp	r3, #0
 8016236:	f000 80bf 	beq.w	80163b8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 801623a:	6810      	ldr	r0, [r2, #0]
 801623c:	6851      	ldr	r1, [r2, #4]
 801623e:	f9ba 2004 	ldrsh.w	r2, [sl, #4]
 8016242:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 8016246:	af0c      	add	r7, sp, #48	; 0x30
 8016248:	463b      	mov	r3, r7
 801624a:	c303      	stmia	r3!, {r0, r1}
 801624c:	2100      	movs	r1, #0
 801624e:	f9ba 3006 	ldrsh.w	r3, [sl, #6]
 8016252:	910e      	str	r1, [sp, #56]	; 0x38
 8016254:	79a2      	ldrb	r2, [r4, #6]
 8016256:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801625a:	a90e      	add	r1, sp, #56	; 0x38
 801625c:	4638      	mov	r0, r7
 801625e:	f7ff fd4a 	bl	8015cf6 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8016262:	a90e      	add	r1, sp, #56	; 0x38
 8016264:	4608      	mov	r0, r1
 8016266:	79a2      	ldrb	r2, [r4, #6]
 8016268:	f10d 0960 	add.w	r9, sp, #96	; 0x60
 801626c:	f7ff fd43 	bl	8015cf6 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8016270:	4648      	mov	r0, r9
 8016272:	f001 ffa1 	bl	80181b8 <_ZN8touchgfx12TextProviderC1Ev>
 8016276:	6820      	ldr	r0, [r4, #0]
 8016278:	6803      	ldr	r3, [r0, #0]
 801627a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801627c:	4798      	blx	r3
 801627e:	9a65      	ldr	r2, [sp, #404]	; 0x194
 8016280:	4603      	mov	r3, r0
 8016282:	4659      	mov	r1, fp
 8016284:	4648      	mov	r0, r9
 8016286:	f001 ffb4 	bl	80181f2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801628a:	a82e      	add	r0, sp, #184	; 0xb8
 801628c:	f001 ff94 	bl	80181b8 <_ZN8touchgfx12TextProviderC1Ev>
 8016290:	f894 8004 	ldrb.w	r8, [r4, #4]
 8016294:	f1b8 0f00 	cmp.w	r8, #0
 8016298:	d009      	beq.n	80162ae <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x9c>
 801629a:	6820      	ldr	r0, [r4, #0]
 801629c:	6803      	ldr	r3, [r0, #0]
 801629e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80162a0:	4798      	blx	r3
 80162a2:	9a65      	ldr	r2, [sp, #404]	; 0x194
 80162a4:	4603      	mov	r3, r0
 80162a6:	4659      	mov	r1, fp
 80162a8:	a82e      	add	r0, sp, #184	; 0xb8
 80162aa:	f001 ffa2 	bl	80181f2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 80162ae:	6820      	ldr	r0, [r4, #0]
 80162b0:	6803      	ldr	r3, [r0, #0]
 80162b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80162b4:	4798      	blx	r3
 80162b6:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80162ba:	182e      	adds	r6, r5, r0
 80162bc:	2e00      	cmp	r6, #0
 80162be:	dd45      	ble.n	801634c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x13a>
 80162c0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80162c4:	4283      	cmp	r3, r0
 80162c6:	db41      	blt.n	801634c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x13a>
 80162c8:	441d      	add	r5, r3
 80162ca:	fb95 f5f6 	sdiv	r5, r5, r6
 80162ce:	a844      	add	r0, sp, #272	; 0x110
 80162d0:	f001 ff72 	bl	80181b8 <_ZN8touchgfx12TextProviderC1Ev>
 80162d4:	7c23      	ldrb	r3, [r4, #16]
 80162d6:	b14b      	cbz	r3, 80162ec <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xda>
 80162d8:	6820      	ldr	r0, [r4, #0]
 80162da:	6803      	ldr	r3, [r0, #0]
 80162dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80162de:	4798      	blx	r3
 80162e0:	9a65      	ldr	r2, [sp, #404]	; 0x194
 80162e2:	4603      	mov	r3, r0
 80162e4:	4659      	mov	r1, fp
 80162e6:	a844      	add	r0, sp, #272	; 0x110
 80162e8:	f001 ff83 	bl	80181f2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 80162ec:	7c21      	ldrb	r1, [r4, #16]
 80162ee:	9101      	str	r1, [sp, #4]
 80162f0:	6821      	ldr	r1, [r4, #0]
 80162f2:	7963      	ldrb	r3, [r4, #5]
 80162f4:	9100      	str	r1, [sp, #0]
 80162f6:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 80162fa:	a944      	add	r1, sp, #272	; 0x110
 80162fc:	a810      	add	r0, sp, #64	; 0x40
 80162fe:	f7ff fc8e 	bl	8015c1e <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 8016302:	7c23      	ldrb	r3, [r4, #16]
 8016304:	bb23      	cbnz	r3, 8016350 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x13e>
 8016306:	fa1f fb86 	uxth.w	fp, r6
 801630a:	2d00      	cmp	r5, #0
 801630c:	dd57      	ble.n	80163be <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ac>
 801630e:	7961      	ldrb	r1, [r4, #5]
 8016310:	4648      	mov	r0, r9
 8016312:	f002 f893 	bl	801843c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8016316:	4603      	mov	r3, r0
 8016318:	f1b8 0f00 	cmp.w	r8, #0
 801631c:	d005      	beq.n	801632a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x118>
 801631e:	9008      	str	r0, [sp, #32]
 8016320:	7961      	ldrb	r1, [r4, #5]
 8016322:	a82e      	add	r0, sp, #184	; 0xb8
 8016324:	f002 f88a 	bl	801843c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8016328:	9b08      	ldr	r3, [sp, #32]
 801632a:	2b00      	cmp	r3, #0
 801632c:	d044      	beq.n	80163b8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 801632e:	2b0a      	cmp	r3, #10
 8016330:	d1eb      	bne.n	801630a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf8>
 8016332:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 8016336:	445b      	add	r3, fp
 8016338:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801633c:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8016340:	eba3 030b 	sub.w	r3, r3, fp
 8016344:	3d01      	subs	r5, #1
 8016346:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801634a:	e7de      	b.n	801630a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf8>
 801634c:	2500      	movs	r5, #0
 801634e:	e7be      	b.n	80162ce <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xbc>
 8016350:	0073      	lsls	r3, r6, #1
 8016352:	9308      	str	r3, [sp, #32]
 8016354:	2d00      	cmp	r5, #0
 8016356:	dd32      	ble.n	80163be <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ac>
 8016358:	f9bd 103e 	ldrsh.w	r1, [sp, #62]	; 0x3e
 801635c:	9b08      	ldr	r3, [sp, #32]
 801635e:	428b      	cmp	r3, r1
 8016360:	bfd4      	ite	le
 8016362:	2100      	movle	r1, #0
 8016364:	2101      	movgt	r1, #1
 8016366:	a810      	add	r0, sp, #64	; 0x40
 8016368:	f7ff fe6e 	bl	8016048 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801636c:	f8bd b052 	ldrh.w	fp, [sp, #82]	; 0x52
 8016370:	f10b 33ff 	add.w	r3, fp, #4294967295
 8016374:	fa1f fb83 	uxth.w	fp, r3
 8016378:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801637c:	459b      	cmp	fp, r3
 801637e:	d00b      	beq.n	8016398 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 8016380:	7961      	ldrb	r1, [r4, #5]
 8016382:	4648      	mov	r0, r9
 8016384:	f002 f85a 	bl	801843c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8016388:	f1b8 0f00 	cmp.w	r8, #0
 801638c:	d0f0      	beq.n	8016370 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x15e>
 801638e:	7961      	ldrb	r1, [r4, #5]
 8016390:	a82e      	add	r0, sp, #184	; 0xb8
 8016392:	f002 f853 	bl	801843c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8016396:	e7eb      	b.n	8016370 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x15e>
 8016398:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801639c:	b2b3      	uxth	r3, r6
 801639e:	441a      	add	r2, r3
 80163a0:	f8ad 203a 	strh.w	r2, [sp, #58]	; 0x3a
 80163a4:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
 80163a8:	1ad3      	subs	r3, r2, r3
 80163aa:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 80163ae:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80163b2:	3d01      	subs	r5, #1
 80163b4:	2b00      	cmp	r3, #0
 80163b6:	d1cd      	bne.n	8016354 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x142>
 80163b8:	b05b      	add	sp, #364	; 0x16c
 80163ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80163be:	ea4f 0b46 	mov.w	fp, r6, lsl #1
 80163c2:	f10d 052e 	add.w	r5, sp, #46	; 0x2e
 80163c6:	7c23      	ldrb	r3, [r4, #16]
 80163c8:	2b00      	cmp	r3, #0
 80163ca:	d05f      	beq.n	801648c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x27a>
 80163cc:	f9bd 103e 	ldrsh.w	r1, [sp, #62]	; 0x3e
 80163d0:	458b      	cmp	fp, r1
 80163d2:	bfd4      	ite	le
 80163d4:	2100      	movle	r1, #0
 80163d6:	2101      	movgt	r1, #1
 80163d8:	a810      	add	r0, sp, #64	; 0x40
 80163da:	f7ff fe35 	bl	8016048 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 80163de:	f1b8 0f00 	cmp.w	r8, #0
 80163e2:	d04c      	beq.n	801647e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x26c>
 80163e4:	7c23      	ldrb	r3, [r4, #16]
 80163e6:	2b00      	cmp	r3, #0
 80163e8:	d053      	beq.n	8016492 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x280>
 80163ea:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
 80163ee:	7922      	ldrb	r2, [r4, #4]
 80163f0:	2a01      	cmp	r2, #1
 80163f2:	d13c      	bne.n	801646e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 80163f4:	f9bd 003c 	ldrsh.w	r0, [sp, #60]	; 0x3c
 80163f8:	1ac0      	subs	r0, r0, r3
 80163fa:	2302      	movs	r3, #2
 80163fc:	fb90 f0f3 	sdiv	r0, r0, r3
 8016400:	b200      	sxth	r0, r0
 8016402:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8016406:	4418      	add	r0, r3
 8016408:	7c23      	ldrb	r3, [r4, #16]
 801640a:	8028      	strh	r0, [r5, #0]
 801640c:	2b00      	cmp	r3, #0
 801640e:	d03a      	beq.n	8016486 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x274>
 8016410:	f8bd 2052 	ldrh.w	r2, [sp, #82]	; 0x52
 8016414:	f89d 105e 	ldrb.w	r1, [sp, #94]	; 0x5e
 8016418:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801641c:	f8cd 9010 	str.w	r9, [sp, #16]
 8016420:	e9cd 2105 	strd	r2, r1, [sp, #20]
 8016424:	2200      	movs	r2, #0
 8016426:	e9cd 4202 	strd	r4, r2, [sp, #8]
 801642a:	e9cd 5700 	strd	r5, r7, [sp]
 801642e:	4652      	mov	r2, sl
 8016430:	2100      	movs	r1, #0
 8016432:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016434:	f7ff fcb0 	bl	8015d98 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 8016438:	2800      	cmp	r0, #0
 801643a:	d1bd      	bne.n	80163b8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 801643c:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 8016440:	b2b2      	uxth	r2, r6
 8016442:	4611      	mov	r1, r2
 8016444:	4413      	add	r3, r2
 8016446:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
 801644a:	1a52      	subs	r2, r2, r1
 801644c:	7c21      	ldrb	r1, [r4, #16]
 801644e:	b21b      	sxth	r3, r3
 8016450:	b212      	sxth	r2, r2
 8016452:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8016456:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 801645a:	b109      	cbz	r1, 8016460 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24e>
 801645c:	42b2      	cmp	r2, r6
 801645e:	dbab      	blt.n	80163b8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 8016460:	887a      	ldrh	r2, [r7, #2]
 8016462:	88f9      	ldrh	r1, [r7, #6]
 8016464:	440a      	add	r2, r1
 8016466:	b212      	sxth	r2, r2
 8016468:	4293      	cmp	r3, r2
 801646a:	ddac      	ble.n	80163c6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1b4>
 801646c:	e7a4      	b.n	80163b8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 801646e:	2a02      	cmp	r2, #2
 8016470:	d107      	bne.n	8016482 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x270>
 8016472:	7be2      	ldrb	r2, [r4, #15]
 8016474:	f8bd 003c 	ldrh.w	r0, [sp, #60]	; 0x3c
 8016478:	1a80      	subs	r0, r0, r2
 801647a:	1ac0      	subs	r0, r0, r3
 801647c:	e7c0      	b.n	8016400 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ee>
 801647e:	7be0      	ldrb	r0, [r4, #15]
 8016480:	e7bf      	b.n	8016402 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1f0>
 8016482:	2000      	movs	r0, #0
 8016484:	e7bd      	b.n	8016402 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1f0>
 8016486:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801648a:	e7c3      	b.n	8016414 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x202>
 801648c:	f1b8 0f00 	cmp.w	r8, #0
 8016490:	d0f5      	beq.n	801647e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x26c>
 8016492:	2300      	movs	r3, #0
 8016494:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8016498:	6821      	ldr	r1, [r4, #0]
 801649a:	a82e      	add	r0, sp, #184	; 0xb8
 801649c:	f7ff fbf9 	bl	8015c92 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 80164a0:	b203      	sxth	r3, r0
 80164a2:	e7a4      	b.n	80163ee <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1dc>

080164a4 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 80164a4:	b510      	push	{r4, lr}
 80164a6:	2b02      	cmp	r3, #2
 80164a8:	f9b0 4000 	ldrsh.w	r4, [r0]
 80164ac:	d00b      	beq.n	80164c6 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
 80164ae:	2b03      	cmp	r3, #3
 80164b0:	d00e      	beq.n	80164d0 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2c>
 80164b2:	2b01      	cmp	r3, #1
 80164b4:	d001      	beq.n	80164ba <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x16>
 80164b6:	1860      	adds	r0, r4, r1
 80164b8:	bd10      	pop	{r4, pc}
 80164ba:	8880      	ldrh	r0, [r0, #4]
 80164bc:	4420      	add	r0, r4
 80164be:	b200      	sxth	r0, r0
 80164c0:	1a80      	subs	r0, r0, r2
 80164c2:	3801      	subs	r0, #1
 80164c4:	e7f8      	b.n	80164b8 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
 80164c6:	8880      	ldrh	r0, [r0, #4]
 80164c8:	4420      	add	r0, r4
 80164ca:	b200      	sxth	r0, r0
 80164cc:	1a40      	subs	r0, r0, r1
 80164ce:	e7f8      	b.n	80164c2 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 80164d0:	18a0      	adds	r0, r4, r2
 80164d2:	e7f1      	b.n	80164b8 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>

080164d4 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 80164d4:	b510      	push	{r4, lr}
 80164d6:	2b02      	cmp	r3, #2
 80164d8:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 80164dc:	d006      	beq.n	80164ec <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x18>
 80164de:	2b03      	cmp	r3, #3
 80164e0:	d00a      	beq.n	80164f8 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 80164e2:	2b01      	cmp	r3, #1
 80164e4:	bf14      	ite	ne
 80164e6:	18a0      	addne	r0, r4, r2
 80164e8:	1860      	addeq	r0, r4, r1
 80164ea:	bd10      	pop	{r4, pc}
 80164ec:	88c0      	ldrh	r0, [r0, #6]
 80164ee:	4420      	add	r0, r4
 80164f0:	b200      	sxth	r0, r0
 80164f2:	1a80      	subs	r0, r0, r2
 80164f4:	3801      	subs	r0, #1
 80164f6:	e7f8      	b.n	80164ea <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 80164f8:	88c0      	ldrh	r0, [r0, #6]
 80164fa:	4420      	add	r0, r4
 80164fc:	b200      	sxth	r0, r0
 80164fe:	1a40      	subs	r0, r0, r1
 8016500:	e7f8      	b.n	80164f4 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>
	...

08016504 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 8016504:	4b01      	ldr	r3, [pc, #4]	; (801650c <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 8016506:	2200      	movs	r2, #0
 8016508:	601a      	str	r2, [r3, #0]
 801650a:	4770      	bx	lr
 801650c:	2000d1cc 	.word	0x2000d1cc

08016510 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>:
 8016510:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016512:	e9dd e405 	ldrd	lr, r4, [sp, #20]
 8016516:	1e05      	subs	r5, r0, #0
 8016518:	bfba      	itte	lt
 801651a:	f04f 37ff 	movlt.w	r7, #4294967295
 801651e:	426d      	neglt	r5, r5
 8016520:	2701      	movge	r7, #1
 8016522:	f1be 0f00 	cmp.w	lr, #0
 8016526:	bfb8      	it	lt
 8016528:	f1ce 0e00 	rsblt	lr, lr, #0
 801652c:	f04f 0601 	mov.w	r6, #1
 8016530:	fa4e f001 	asr.w	r0, lr, r1
 8016534:	fa06 f101 	lsl.w	r1, r6, r1
 8016538:	f8dd c01c 	ldr.w	ip, [sp, #28]
 801653c:	f101 31ff 	add.w	r1, r1, #4294967295
 8016540:	ea01 010e 	and.w	r1, r1, lr
 8016544:	bfb8      	it	lt
 8016546:	427f      	neglt	r7, r7
 8016548:	434d      	muls	r5, r1
 801654a:	2c00      	cmp	r4, #0
 801654c:	f8dc 1000 	ldr.w	r1, [ip]
 8016550:	bfb8      	it	lt
 8016552:	4264      	neglt	r4, r4
 8016554:	fb03 1300 	mla	r3, r3, r0, r1
 8016558:	fb95 f1f4 	sdiv	r1, r5, r4
 801655c:	fb04 5511 	mls	r5, r4, r1, r5
 8016560:	441d      	add	r5, r3
 8016562:	fb95 f3f4 	sdiv	r3, r5, r4
 8016566:	fb04 5413 	mls	r4, r4, r3, r5
 801656a:	4419      	add	r1, r3
 801656c:	bfb8      	it	lt
 801656e:	427f      	neglt	r7, r7
 8016570:	fb02 1000 	mla	r0, r2, r0, r1
 8016574:	f8cc 4000 	str.w	r4, [ip]
 8016578:	4378      	muls	r0, r7
 801657a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801657c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 801657c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016580:	4c24      	ldr	r4, [pc, #144]	; (8016614 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x98>)
 8016582:	6807      	ldr	r7, [r0, #0]
 8016584:	69a3      	ldr	r3, [r4, #24]
 8016586:	b086      	sub	sp, #24
 8016588:	4605      	mov	r5, r0
 801658a:	b92b      	cbnz	r3, 8016598 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1c>
 801658c:	6840      	ldr	r0, [r0, #4]
 801658e:	e9c5 7000 	strd	r7, r0, [r5]
 8016592:	b006      	add	sp, #24
 8016594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016598:	68a2      	ldr	r2, [r4, #8]
 801659a:	6820      	ldr	r0, [r4, #0]
 801659c:	ae06      	add	r6, sp, #24
 801659e:	f04f 0802 	mov.w	r8, #2
 80165a2:	fb93 f1f8 	sdiv	r1, r3, r8
 80165a6:	440a      	add	r2, r1
 80165a8:	f846 2d04 	str.w	r2, [r6, #-4]!
 80165ac:	69e1      	ldr	r1, [r4, #28]
 80165ae:	9700      	str	r7, [sp, #0]
 80165b0:	e9cd 3601 	strd	r3, r6, [sp, #4]
 80165b4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80165b6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80165b8:	f7ff ffaa 	bl	8016510 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 80165bc:	69a3      	ldr	r3, [r4, #24]
 80165be:	9301      	str	r3, [sp, #4]
 80165c0:	686b      	ldr	r3, [r5, #4]
 80165c2:	9300      	str	r3, [sp, #0]
 80165c4:	4607      	mov	r7, r0
 80165c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80165c8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80165ca:	6a21      	ldr	r1, [r4, #32]
 80165cc:	9602      	str	r6, [sp, #8]
 80165ce:	6860      	ldr	r0, [r4, #4]
 80165d0:	f7ff ff9e 	bl	8016510 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 80165d4:	6963      	ldr	r3, [r4, #20]
 80165d6:	69a2      	ldr	r2, [r4, #24]
 80165d8:	fb92 f8f8 	sdiv	r8, r2, r8
 80165dc:	4443      	add	r3, r8
 80165de:	9305      	str	r3, [sp, #20]
 80165e0:	682b      	ldr	r3, [r5, #0]
 80165e2:	9300      	str	r3, [sp, #0]
 80165e4:	e9cd 2601 	strd	r2, r6, [sp, #4]
 80165e8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80165ea:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80165ec:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80165ee:	4407      	add	r7, r0
 80165f0:	68e0      	ldr	r0, [r4, #12]
 80165f2:	f7ff ff8d 	bl	8016510 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 80165f6:	69a3      	ldr	r3, [r4, #24]
 80165f8:	9301      	str	r3, [sp, #4]
 80165fa:	686b      	ldr	r3, [r5, #4]
 80165fc:	9300      	str	r3, [sp, #0]
 80165fe:	4680      	mov	r8, r0
 8016600:	9602      	str	r6, [sp, #8]
 8016602:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8016604:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8016606:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8016608:	6920      	ldr	r0, [r4, #16]
 801660a:	f7ff ff81 	bl	8016510 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 801660e:	4440      	add	r0, r8
 8016610:	e7bd      	b.n	801658e <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x12>
 8016612:	bf00      	nop
 8016614:	2000d1d0 	.word	0x2000d1d0

08016618 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 8016618:	b510      	push	{r4, lr}
 801661a:	4b07      	ldr	r3, [pc, #28]	; (8016638 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 801661c:	781b      	ldrb	r3, [r3, #0]
 801661e:	2b01      	cmp	r3, #1
 8016620:	d108      	bne.n	8016634 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 8016622:	4b06      	ldr	r3, [pc, #24]	; (801663c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 8016624:	880c      	ldrh	r4, [r1, #0]
 8016626:	881b      	ldrh	r3, [r3, #0]
 8016628:	f9b0 2000 	ldrsh.w	r2, [r0]
 801662c:	3b01      	subs	r3, #1
 801662e:	1b1b      	subs	r3, r3, r4
 8016630:	8003      	strh	r3, [r0, #0]
 8016632:	800a      	strh	r2, [r1, #0]
 8016634:	bd10      	pop	{r4, pc}
 8016636:	bf00      	nop
 8016638:	2000d19c 	.word	0x2000d19c
 801663c:	2000d1a0 	.word	0x2000d1a0

08016640 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 8016640:	b510      	push	{r4, lr}
 8016642:	4b0a      	ldr	r3, [pc, #40]	; (801666c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 8016644:	781b      	ldrb	r3, [r3, #0]
 8016646:	2b01      	cmp	r3, #1
 8016648:	d10e      	bne.n	8016668 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 801664a:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801664e:	8843      	ldrh	r3, [r0, #2]
 8016650:	f9b0 4000 	ldrsh.w	r4, [r0]
 8016654:	8044      	strh	r4, [r0, #2]
 8016656:	18ca      	adds	r2, r1, r3
 8016658:	4b05      	ldr	r3, [pc, #20]	; (8016670 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 801665a:	881b      	ldrh	r3, [r3, #0]
 801665c:	1a9b      	subs	r3, r3, r2
 801665e:	8003      	strh	r3, [r0, #0]
 8016660:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8016664:	80c3      	strh	r3, [r0, #6]
 8016666:	8081      	strh	r1, [r0, #4]
 8016668:	bd10      	pop	{r4, pc}
 801666a:	bf00      	nop
 801666c:	2000d19c 	.word	0x2000d19c
 8016670:	2000d198 	.word	0x2000d198

08016674 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 8016674:	b510      	push	{r4, lr}
 8016676:	4b07      	ldr	r3, [pc, #28]	; (8016694 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 8016678:	781b      	ldrb	r3, [r3, #0]
 801667a:	2b01      	cmp	r3, #1
 801667c:	d108      	bne.n	8016690 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 801667e:	f9b1 3000 	ldrsh.w	r3, [r1]
 8016682:	f9b0 4000 	ldrsh.w	r4, [r0]
 8016686:	8003      	strh	r3, [r0, #0]
 8016688:	8893      	ldrh	r3, [r2, #4]
 801668a:	3b01      	subs	r3, #1
 801668c:	1b1b      	subs	r3, r3, r4
 801668e:	800b      	strh	r3, [r1, #0]
 8016690:	bd10      	pop	{r4, pc}
 8016692:	bf00      	nop
 8016694:	2000d19c 	.word	0x2000d19c

08016698 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 8016698:	b513      	push	{r0, r1, r4, lr}
 801669a:	4b08      	ldr	r3, [pc, #32]	; (80166bc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 801669c:	f9b3 2000 	ldrsh.w	r2, [r3]
 80166a0:	4b07      	ldr	r3, [pc, #28]	; (80166c0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x28>)
 80166a2:	f8ad 2004 	strh.w	r2, [sp, #4]
 80166a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80166aa:	f8ad 3006 	strh.w	r3, [sp, #6]
 80166ae:	2400      	movs	r4, #0
 80166b0:	466a      	mov	r2, sp
 80166b2:	9400      	str	r4, [sp, #0]
 80166b4:	f7ff ffde 	bl	8016674 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 80166b8:	b002      	add	sp, #8
 80166ba:	bd10      	pop	{r4, pc}
 80166bc:	2000d198 	.word	0x2000d198
 80166c0:	2000d19a 	.word	0x2000d19a

080166c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 80166c4:	b510      	push	{r4, lr}
 80166c6:	4b0a      	ldr	r3, [pc, #40]	; (80166f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 80166c8:	781b      	ldrb	r3, [r3, #0]
 80166ca:	2b01      	cmp	r3, #1
 80166cc:	460a      	mov	r2, r1
 80166ce:	d10d      	bne.n	80166ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 80166d0:	8881      	ldrh	r1, [r0, #4]
 80166d2:	8803      	ldrh	r3, [r0, #0]
 80166d4:	440b      	add	r3, r1
 80166d6:	4601      	mov	r1, r0
 80166d8:	3b01      	subs	r3, #1
 80166da:	f821 3b02 	strh.w	r3, [r1], #2
 80166de:	f7ff ffc9 	bl	8016674 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 80166e2:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80166e6:	88c2      	ldrh	r2, [r0, #6]
 80166e8:	8082      	strh	r2, [r0, #4]
 80166ea:	80c3      	strh	r3, [r0, #6]
 80166ec:	bd10      	pop	{r4, pc}
 80166ee:	bf00      	nop
 80166f0:	2000d19c 	.word	0x2000d19c

080166f4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 80166f4:	b507      	push	{r0, r1, r2, lr}
 80166f6:	4b09      	ldr	r3, [pc, #36]	; (801671c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 80166f8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80166fc:	4b08      	ldr	r3, [pc, #32]	; (8016720 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x2c>)
 80166fe:	f8ad 2004 	strh.w	r2, [sp, #4]
 8016702:	2100      	movs	r1, #0
 8016704:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016708:	9100      	str	r1, [sp, #0]
 801670a:	4669      	mov	r1, sp
 801670c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8016710:	f7ff ffd8 	bl	80166c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8016714:	b003      	add	sp, #12
 8016716:	f85d fb04 	ldr.w	pc, [sp], #4
 801671a:	bf00      	nop
 801671c:	2000d198 	.word	0x2000d198
 8016720:	2000d19a 	.word	0x2000d19a

08016724 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 8016724:	4b03      	ldr	r3, [pc, #12]	; (8016734 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 8016726:	6818      	ldr	r0, [r3, #0]
 8016728:	b110      	cbz	r0, 8016730 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 801672a:	6803      	ldr	r3, [r0, #0]
 801672c:	699b      	ldr	r3, [r3, #24]
 801672e:	4718      	bx	r3
 8016730:	4770      	bx	lr
 8016732:	bf00      	nop
 8016734:	2000d220 	.word	0x2000d220

08016738 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 8016738:	4770      	bx	lr
	...

0801673c <_ZN8touchgfx11Application4drawEv>:
 801673c:	b507      	push	{r0, r1, r2, lr}
 801673e:	4b09      	ldr	r3, [pc, #36]	; (8016764 <_ZN8touchgfx11Application4drawEv+0x28>)
 8016740:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016744:	4b08      	ldr	r3, [pc, #32]	; (8016768 <_ZN8touchgfx11Application4drawEv+0x2c>)
 8016746:	f8ad 2004 	strh.w	r2, [sp, #4]
 801674a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801674e:	f8ad 3006 	strh.w	r3, [sp, #6]
 8016752:	6803      	ldr	r3, [r0, #0]
 8016754:	2100      	movs	r1, #0
 8016756:	9100      	str	r1, [sp, #0]
 8016758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801675a:	4669      	mov	r1, sp
 801675c:	4798      	blx	r3
 801675e:	b003      	add	sp, #12
 8016760:	f85d fb04 	ldr.w	pc, [sp], #4
 8016764:	2000d198 	.word	0x2000d198
 8016768:	2000d19a 	.word	0x2000d19a

0801676c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 801676c:	4b03      	ldr	r3, [pc, #12]	; (801677c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 801676e:	6818      	ldr	r0, [r3, #0]
 8016770:	b110      	cbz	r0, 8016778 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 8016772:	6803      	ldr	r3, [r0, #0]
 8016774:	69db      	ldr	r3, [r3, #28]
 8016776:	4718      	bx	r3
 8016778:	4770      	bx	lr
 801677a:	bf00      	nop
 801677c:	2000d220 	.word	0x2000d220

08016780 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 8016780:	4b03      	ldr	r3, [pc, #12]	; (8016790 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 8016782:	6818      	ldr	r0, [r3, #0]
 8016784:	b110      	cbz	r0, 801678c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 8016786:	6803      	ldr	r3, [r0, #0]
 8016788:	6a1b      	ldr	r3, [r3, #32]
 801678a:	4718      	bx	r3
 801678c:	4770      	bx	lr
 801678e:	bf00      	nop
 8016790:	2000d220 	.word	0x2000d220

08016794 <_ZN8touchgfx11Application14handleKeyEventEh>:
 8016794:	4b03      	ldr	r3, [pc, #12]	; (80167a4 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 8016796:	6818      	ldr	r0, [r3, #0]
 8016798:	b110      	cbz	r0, 80167a0 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 801679a:	6803      	ldr	r3, [r0, #0]
 801679c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801679e:	4718      	bx	r3
 80167a0:	4770      	bx	lr
 80167a2:	bf00      	nop
 80167a4:	2000d220 	.word	0x2000d220

080167a8 <_ZN8touchgfx11Application15handleTickEventEv>:
 80167a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80167ac:	4d3a      	ldr	r5, [pc, #232]	; (8016898 <_ZN8touchgfx11Application15handleTickEventEv+0xf0>)
 80167ae:	4604      	mov	r4, r0
 80167b0:	6828      	ldr	r0, [r5, #0]
 80167b2:	b140      	cbz	r0, 80167c6 <_ZN8touchgfx11Application15handleTickEventEv+0x1e>
 80167b4:	7a03      	ldrb	r3, [r0, #8]
 80167b6:	b933      	cbnz	r3, 80167c6 <_ZN8touchgfx11Application15handleTickEventEv+0x1e>
 80167b8:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
 80167bc:	6803      	ldr	r3, [r0, #0]
 80167be:	689b      	ldr	r3, [r3, #8]
 80167c0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80167c4:	4718      	bx	r3
 80167c6:	f894 312d 	ldrb.w	r3, [r4, #301]	; 0x12d
 80167ca:	b97b      	cbnz	r3, 80167ec <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 80167cc:	b170      	cbz	r0, 80167ec <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 80167ce:	7a03      	ldrb	r3, [r0, #8]
 80167d0:	b163      	cbz	r3, 80167ec <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 80167d2:	4b32      	ldr	r3, [pc, #200]	; (801689c <_ZN8touchgfx11Application15handleTickEventEv+0xf4>)
 80167d4:	6818      	ldr	r0, [r3, #0]
 80167d6:	b110      	cbz	r0, 80167de <_ZN8touchgfx11Application15handleTickEventEv+0x36>
 80167d8:	6803      	ldr	r3, [r0, #0]
 80167da:	691b      	ldr	r3, [r3, #16]
 80167dc:	4798      	blx	r3
 80167de:	6828      	ldr	r0, [r5, #0]
 80167e0:	6803      	ldr	r3, [r0, #0]
 80167e2:	68db      	ldr	r3, [r3, #12]
 80167e4:	4798      	blx	r3
 80167e6:	2301      	movs	r3, #1
 80167e8:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
 80167ec:	2500      	movs	r5, #0
 80167ee:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 80167f2:	42a8      	cmp	r0, r5
 80167f4:	dd0c      	ble.n	8016810 <_ZN8touchgfx11Application15handleTickEventEv+0x68>
 80167f6:	1963      	adds	r3, r4, r5
 80167f8:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 80167fc:	b132      	cbz	r2, 801680c <_ZN8touchgfx11Application15handleTickEventEv+0x64>
 80167fe:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 8016802:	4413      	add	r3, r2
 8016804:	6858      	ldr	r0, [r3, #4]
 8016806:	6803      	ldr	r3, [r0, #0]
 8016808:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801680a:	4798      	blx	r3
 801680c:	3501      	adds	r5, #1
 801680e:	e7ee      	b.n	80167ee <_ZN8touchgfx11Application15handleTickEventEv+0x46>
 8016810:	f5c4 467f 	rsb	r6, r4, #65280	; 0xff00
 8016814:	3801      	subs	r0, #1
 8016816:	3678      	adds	r6, #120	; 0x78
 8016818:	f04f 0c00 	mov.w	ip, #0
 801681c:	1c43      	adds	r3, r0, #1
 801681e:	d033      	beq.n	8016888 <_ZN8touchgfx11Application15handleTickEventEv+0xe0>
 8016820:	1823      	adds	r3, r4, r0
 8016822:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8016826:	bb6a      	cbnz	r2, 8016884 <_ZN8touchgfx11Application15handleTickEventEv+0xdc>
 8016828:	b281      	uxth	r1, r0
 801682a:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 801682e:	1d25      	adds	r5, r4, #4
 8016830:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8016834:	f8b4 3084 	ldrh.w	r3, [r4, #132]	; 0x84
 8016838:	4293      	cmp	r3, r2
 801683a:	dc0a      	bgt.n	8016852 <_ZN8touchgfx11Application15handleTickEventEv+0xaa>
 801683c:	f101 0288 	add.w	r2, r1, #136	; 0x88
 8016840:	4422      	add	r2, r4
 8016842:	18b1      	adds	r1, r6, r2
 8016844:	b289      	uxth	r1, r1
 8016846:	428b      	cmp	r3, r1
 8016848:	d919      	bls.n	801687e <_ZN8touchgfx11Application15handleTickEventEv+0xd6>
 801684a:	7851      	ldrb	r1, [r2, #1]
 801684c:	f802 1b01 	strb.w	r1, [r2], #1
 8016850:	e7f7      	b.n	8016842 <_ZN8touchgfx11Application15handleTickEventEv+0x9a>
 8016852:	682f      	ldr	r7, [r5, #0]
 8016854:	45b9      	cmp	r9, r7
 8016856:	f105 0804 	add.w	r8, r5, #4
 801685a:	d10d      	bne.n	8016878 <_ZN8touchgfx11Application15handleTickEventEv+0xd0>
 801685c:	4696      	mov	lr, r2
 801685e:	f1be 0f1e 	cmp.w	lr, #30
 8016862:	dc06      	bgt.n	8016872 <_ZN8touchgfx11Application15handleTickEventEv+0xca>
 8016864:	f10e 0e01 	add.w	lr, lr, #1
 8016868:	686f      	ldr	r7, [r5, #4]
 801686a:	f845 7b04 	str.w	r7, [r5], #4
 801686e:	4573      	cmp	r3, lr
 8016870:	dcf5      	bgt.n	801685e <_ZN8touchgfx11Application15handleTickEventEv+0xb6>
 8016872:	3b01      	subs	r3, #1
 8016874:	f8a4 3084 	strh.w	r3, [r4, #132]	; 0x84
 8016878:	3201      	adds	r2, #1
 801687a:	4645      	mov	r5, r8
 801687c:	e7da      	b.n	8016834 <_ZN8touchgfx11Application15handleTickEventEv+0x8c>
 801687e:	4423      	add	r3, r4
 8016880:	f883 c088 	strb.w	ip, [r3, #136]	; 0x88
 8016884:	3801      	subs	r0, #1
 8016886:	e7c9      	b.n	801681c <_ZN8touchgfx11Application15handleTickEventEv+0x74>
 8016888:	4b04      	ldr	r3, [pc, #16]	; (801689c <_ZN8touchgfx11Application15handleTickEventEv+0xf4>)
 801688a:	6818      	ldr	r0, [r3, #0]
 801688c:	b110      	cbz	r0, 8016894 <_ZN8touchgfx11Application15handleTickEventEv+0xec>
 801688e:	6803      	ldr	r3, [r0, #0]
 8016890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016892:	e795      	b.n	80167c0 <_ZN8touchgfx11Application15handleTickEventEv+0x18>
 8016894:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016898:	2000d224 	.word	0x2000d224
 801689c:	2000d220 	.word	0x2000d220

080168a0 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 80168a0:	b570      	push	{r4, r5, r6, lr}
 80168a2:	4606      	mov	r6, r0
 80168a4:	460c      	mov	r4, r1
 80168a6:	b929      	cbnz	r1, 80168b4 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x14>
 80168a8:	4b0c      	ldr	r3, [pc, #48]	; (80168dc <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x3c>)
 80168aa:	4a0d      	ldr	r2, [pc, #52]	; (80168e0 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x40>)
 80168ac:	480d      	ldr	r0, [pc, #52]	; (80168e4 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x44>)
 80168ae:	2164      	movs	r1, #100	; 0x64
 80168b0:	f00b ff9e 	bl	80227f0 <__assert_func>
 80168b4:	4d0c      	ldr	r5, [pc, #48]	; (80168e8 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x48>)
 80168b6:	2300      	movs	r3, #0
 80168b8:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 80168bc:	6828      	ldr	r0, [r5, #0]
 80168be:	b110      	cbz	r0, 80168c6 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x26>
 80168c0:	6803      	ldr	r3, [r0, #0]
 80168c2:	695b      	ldr	r3, [r3, #20]
 80168c4:	4798      	blx	r3
 80168c6:	602c      	str	r4, [r5, #0]
 80168c8:	6823      	ldr	r3, [r4, #0]
 80168ca:	4620      	mov	r0, r4
 80168cc:	68db      	ldr	r3, [r3, #12]
 80168ce:	4798      	blx	r3
 80168d0:	6833      	ldr	r3, [r6, #0]
 80168d2:	4630      	mov	r0, r6
 80168d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80168d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80168da:	4718      	bx	r3
 80168dc:	08026738 	.word	0x08026738
 80168e0:	08026828 	.word	0x08026828
 80168e4:	08026742 	.word	0x08026742
 80168e8:	2000d220 	.word	0x2000d220

080168ec <_ZNK8touchgfx4Rect9intersectERKS0_>:
 80168ec:	b510      	push	{r4, lr}
 80168ee:	f9b1 4000 	ldrsh.w	r4, [r1]
 80168f2:	888a      	ldrh	r2, [r1, #4]
 80168f4:	f9b0 3000 	ldrsh.w	r3, [r0]
 80168f8:	4422      	add	r2, r4
 80168fa:	b212      	sxth	r2, r2
 80168fc:	4293      	cmp	r3, r2
 80168fe:	da15      	bge.n	801692c <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8016900:	8882      	ldrh	r2, [r0, #4]
 8016902:	4413      	add	r3, r2
 8016904:	b21b      	sxth	r3, r3
 8016906:	429c      	cmp	r4, r3
 8016908:	da10      	bge.n	801692c <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801690a:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 801690e:	88c9      	ldrh	r1, [r1, #6]
 8016910:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8016914:	4419      	add	r1, r3
 8016916:	b209      	sxth	r1, r1
 8016918:	428a      	cmp	r2, r1
 801691a:	da07      	bge.n	801692c <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801691c:	88c0      	ldrh	r0, [r0, #6]
 801691e:	4410      	add	r0, r2
 8016920:	b200      	sxth	r0, r0
 8016922:	4283      	cmp	r3, r0
 8016924:	bfac      	ite	ge
 8016926:	2000      	movge	r0, #0
 8016928:	2001      	movlt	r0, #1
 801692a:	bd10      	pop	{r4, pc}
 801692c:	2000      	movs	r0, #0
 801692e:	e7fc      	b.n	801692a <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

08016930 <_ZNK8touchgfx4Rect8includesERKS0_>:
 8016930:	b570      	push	{r4, r5, r6, lr}
 8016932:	f9b1 4000 	ldrsh.w	r4, [r1]
 8016936:	f9b0 5000 	ldrsh.w	r5, [r0]
 801693a:	42ac      	cmp	r4, r5
 801693c:	db18      	blt.n	8016970 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801693e:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 8016942:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8016946:	429a      	cmp	r2, r3
 8016948:	db12      	blt.n	8016970 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801694a:	8886      	ldrh	r6, [r0, #4]
 801694c:	4435      	add	r5, r6
 801694e:	888e      	ldrh	r6, [r1, #4]
 8016950:	4434      	add	r4, r6
 8016952:	b22d      	sxth	r5, r5
 8016954:	b224      	sxth	r4, r4
 8016956:	42a5      	cmp	r5, r4
 8016958:	db0a      	blt.n	8016970 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801695a:	88c0      	ldrh	r0, [r0, #6]
 801695c:	4418      	add	r0, r3
 801695e:	88cb      	ldrh	r3, [r1, #6]
 8016960:	441a      	add	r2, r3
 8016962:	b200      	sxth	r0, r0
 8016964:	b212      	sxth	r2, r2
 8016966:	4290      	cmp	r0, r2
 8016968:	bfb4      	ite	lt
 801696a:	2000      	movlt	r0, #0
 801696c:	2001      	movge	r0, #1
 801696e:	bd70      	pop	{r4, r5, r6, pc}
 8016970:	2000      	movs	r0, #0
 8016972:	e7fc      	b.n	801696e <_ZNK8touchgfx4Rect8includesERKS0_+0x3e>

08016974 <_ZN8touchgfx11Application11getInstanceEv>:
 8016974:	4b01      	ldr	r3, [pc, #4]	; (801697c <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 8016976:	6818      	ldr	r0, [r3, #0]
 8016978:	4770      	bx	lr
 801697a:	bf00      	nop
 801697c:	2000d230 	.word	0x2000d230

08016980 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>:
 8016980:	b570      	push	{r4, r5, r6, lr}
 8016982:	f8b0 3084 	ldrh.w	r3, [r0, #132]	; 0x84
 8016986:	1d04      	adds	r4, r0, #4
 8016988:	2200      	movs	r2, #0
 801698a:	b295      	uxth	r5, r2
 801698c:	42ab      	cmp	r3, r5
 801698e:	d90f      	bls.n	80169b0 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x30>
 8016990:	f854 6b04 	ldr.w	r6, [r4], #4
 8016994:	428e      	cmp	r6, r1
 8016996:	4615      	mov	r5, r2
 8016998:	f102 0201 	add.w	r2, r2, #1
 801699c:	d1f5      	bne.n	801698a <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0xa>
 801699e:	4428      	add	r0, r5
 80169a0:	f890 3088 	ldrb.w	r3, [r0, #136]	; 0x88
 80169a4:	2bff      	cmp	r3, #255	; 0xff
 80169a6:	d002      	beq.n	80169ae <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x2e>
 80169a8:	3301      	adds	r3, #1
 80169aa:	f880 3088 	strb.w	r3, [r0, #136]	; 0x88
 80169ae:	bd70      	pop	{r4, r5, r6, pc}
 80169b0:	2b20      	cmp	r3, #32
 80169b2:	d106      	bne.n	80169c2 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x42>
 80169b4:	4b08      	ldr	r3, [pc, #32]	; (80169d8 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x58>)
 80169b6:	4a09      	ldr	r2, [pc, #36]	; (80169dc <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x5c>)
 80169b8:	4809      	ldr	r0, [pc, #36]	; (80169e0 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x60>)
 80169ba:	f44f 7193 	mov.w	r1, #294	; 0x126
 80169be:	f00b ff17 	bl	80227f0 <__assert_func>
 80169c2:	18c2      	adds	r2, r0, r3
 80169c4:	2401      	movs	r4, #1
 80169c6:	f882 4088 	strb.w	r4, [r2, #136]	; 0x88
 80169ca:	191a      	adds	r2, r3, r4
 80169cc:	f8a0 2084 	strh.w	r2, [r0, #132]	; 0x84
 80169d0:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80169d4:	6041      	str	r1, [r0, #4]
 80169d6:	e7ea      	b.n	80169ae <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x2e>
 80169d8:	0802676c 	.word	0x0802676c
 80169dc:	0802686c 	.word	0x0802686c
 80169e0:	08026742 	.word	0x08026742

080169e4 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>:
 80169e4:	b570      	push	{r4, r5, r6, lr}
 80169e6:	f8b0 6084 	ldrh.w	r6, [r0, #132]	; 0x84
 80169ea:	1d04      	adds	r4, r0, #4
 80169ec:	2300      	movs	r3, #0
 80169ee:	b29a      	uxth	r2, r3
 80169f0:	4296      	cmp	r6, r2
 80169f2:	d90a      	bls.n	8016a0a <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x26>
 80169f4:	f854 2b04 	ldr.w	r2, [r4], #4
 80169f8:	428a      	cmp	r2, r1
 80169fa:	d107      	bne.n	8016a0c <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x28>
 80169fc:	18c5      	adds	r5, r0, r3
 80169fe:	f895 2088 	ldrb.w	r2, [r5, #136]	; 0x88
 8016a02:	b11a      	cbz	r2, 8016a0c <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x28>
 8016a04:	3a01      	subs	r2, #1
 8016a06:	f885 2088 	strb.w	r2, [r5, #136]	; 0x88
 8016a0a:	bd70      	pop	{r4, r5, r6, pc}
 8016a0c:	3301      	adds	r3, #1
 8016a0e:	e7ee      	b.n	80169ee <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0xa>

08016a10 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 8016a10:	2300      	movs	r3, #0
 8016a12:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 8016a16:	f100 0288 	add.w	r2, r0, #136	; 0x88
 8016a1a:	30a8      	adds	r0, #168	; 0xa8
 8016a1c:	f802 3b01 	strb.w	r3, [r2], #1
 8016a20:	4282      	cmp	r2, r0
 8016a22:	d1fb      	bne.n	8016a1c <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 8016a24:	4770      	bx	lr

08016a26 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 8016a26:	4603      	mov	r3, r0
 8016a28:	f100 0140 	add.w	r1, r0, #64	; 0x40
 8016a2c:	2200      	movs	r2, #0
 8016a2e:	801a      	strh	r2, [r3, #0]
 8016a30:	805a      	strh	r2, [r3, #2]
 8016a32:	809a      	strh	r2, [r3, #4]
 8016a34:	80da      	strh	r2, [r3, #6]
 8016a36:	3308      	adds	r3, #8
 8016a38:	428b      	cmp	r3, r1
 8016a3a:	d1f8      	bne.n	8016a2e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 8016a3c:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 8016a40:	4770      	bx	lr
	...

08016a44 <_ZN8touchgfx11ApplicationC1Ev>:
 8016a44:	b570      	push	{r4, r5, r6, lr}
 8016a46:	4b16      	ldr	r3, [pc, #88]	; (8016aa0 <_ZN8touchgfx11ApplicationC1Ev+0x5c>)
 8016a48:	6003      	str	r3, [r0, #0]
 8016a4a:	2500      	movs	r5, #0
 8016a4c:	4604      	mov	r4, r0
 8016a4e:	f8a0 5084 	strh.w	r5, [r0, #132]	; 0x84
 8016a52:	30a8      	adds	r0, #168	; 0xa8
 8016a54:	f7ff ffe7 	bl	8016a26 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8016a58:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 8016a5c:	f7ff ffe3 	bl	8016a26 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8016a60:	f884 512c 	strb.w	r5, [r4, #300]	; 0x12c
 8016a64:	f884 512d 	strb.w	r5, [r4, #301]	; 0x12d
 8016a68:	490e      	ldr	r1, [pc, #56]	; (8016aa4 <_ZN8touchgfx11ApplicationC1Ev+0x60>)
 8016a6a:	480f      	ldr	r0, [pc, #60]	; (8016aa8 <_ZN8touchgfx11ApplicationC1Ev+0x64>)
 8016a6c:	4e0f      	ldr	r6, [pc, #60]	; (8016aac <_ZN8touchgfx11ApplicationC1Ev+0x68>)
 8016a6e:	f00a f993 	bl	8020d98 <CRC_Lock>
 8016a72:	4b0f      	ldr	r3, [pc, #60]	; (8016ab0 <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 8016a74:	b158      	cbz	r0, 8016a8e <_ZN8touchgfx11ApplicationC1Ev+0x4a>
 8016a76:	801d      	strh	r5, [r3, #0]
 8016a78:	4a0e      	ldr	r2, [pc, #56]	; (8016ab4 <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 8016a7a:	2300      	movs	r3, #0
 8016a7c:	6013      	str	r3, [r2, #0]
 8016a7e:	4a0e      	ldr	r2, [pc, #56]	; (8016ab8 <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 8016a80:	6033      	str	r3, [r6, #0]
 8016a82:	4620      	mov	r0, r4
 8016a84:	6013      	str	r3, [r2, #0]
 8016a86:	f7ff ffc3 	bl	8016a10 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 8016a8a:	4620      	mov	r0, r4
 8016a8c:	bd70      	pop	{r4, r5, r6, pc}
 8016a8e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8016a92:	2002      	movs	r0, #2
 8016a94:	801a      	strh	r2, [r3, #0]
 8016a96:	6030      	str	r0, [r6, #0]
 8016a98:	f000 ff7c 	bl	8017994 <_ZN8touchgfx6Screen4drawEv>
 8016a9c:	e7ec      	b.n	8016a78 <_ZN8touchgfx11ApplicationC1Ev+0x34>
 8016a9e:	bf00      	nop
 8016aa0:	080267f4 	.word	0x080267f4
 8016aa4:	b5e8b5cd 	.word	0xb5e8b5cd
 8016aa8:	f407a5c2 	.word	0xf407a5c2
 8016aac:	2000d220 	.word	0x2000d220
 8016ab0:	2000002c 	.word	0x2000002c
 8016ab4:	2000d230 	.word	0x2000d230
 8016ab8:	2000d224 	.word	0x2000d224

08016abc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 8016abc:	2300      	movs	r3, #0
 8016abe:	8003      	strh	r3, [r0, #0]
 8016ac0:	8043      	strh	r3, [r0, #2]
 8016ac2:	8083      	strh	r3, [r0, #4]
 8016ac4:	80c3      	strh	r3, [r0, #6]
 8016ac6:	f8b1 3040 	ldrh.w	r3, [r1, #64]	; 0x40
 8016aca:	4293      	cmp	r3, r2
 8016acc:	b530      	push	{r4, r5, lr}
 8016ace:	d912      	bls.n	8016af6 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3a>
 8016ad0:	eb01 04c2 	add.w	r4, r1, r2, lsl #3
 8016ad4:	3b01      	subs	r3, #1
 8016ad6:	6825      	ldr	r5, [r4, #0]
 8016ad8:	6005      	str	r5, [r0, #0]
 8016ada:	b29b      	uxth	r3, r3
 8016adc:	6865      	ldr	r5, [r4, #4]
 8016ade:	6045      	str	r5, [r0, #4]
 8016ae0:	4293      	cmp	r3, r2
 8016ae2:	f8a1 3040 	strh.w	r3, [r1, #64]	; 0x40
 8016ae6:	d906      	bls.n	8016af6 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3a>
 8016ae8:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 8016aec:	681d      	ldr	r5, [r3, #0]
 8016aee:	f841 5032 	str.w	r5, [r1, r2, lsl #3]
 8016af2:	685d      	ldr	r5, [r3, #4]
 8016af4:	6065      	str	r5, [r4, #4]
 8016af6:	bd30      	pop	{r4, r5, pc}

08016af8 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>:
 8016af8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016afa:	466b      	mov	r3, sp
 8016afc:	e883 0006 	stmia.w	r3, {r1, r2}
 8016b00:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 8016b04:	2a07      	cmp	r2, #7
 8016b06:	4604      	mov	r4, r0
 8016b08:	d906      	bls.n	8016b18 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x20>
 8016b0a:	4b09      	ldr	r3, [pc, #36]	; (8016b30 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x38>)
 8016b0c:	4a09      	ldr	r2, [pc, #36]	; (8016b34 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x3c>)
 8016b0e:	480a      	ldr	r0, [pc, #40]	; (8016b38 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x40>)
 8016b10:	f44f 7102 	mov.w	r1, #520	; 0x208
 8016b14:	f00b fe6c 	bl	80227f0 <__assert_func>
 8016b18:	1c51      	adds	r1, r2, #1
 8016b1a:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 8016b1e:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 8016b22:	cb03      	ldmia	r3!, {r0, r1}
 8016b24:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
 8016b28:	6069      	str	r1, [r5, #4]
 8016b2a:	b003      	add	sp, #12
 8016b2c:	bd30      	pop	{r4, r5, pc}
 8016b2e:	bf00      	nop
 8016b30:	08026794 	.word	0x08026794
 8016b34:	080268b1 	.word	0x080268b1
 8016b38:	080267c3 	.word	0x080267c3

08016b3c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 8016b3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016b40:	b089      	sub	sp, #36	; 0x24
 8016b42:	466c      	mov	r4, sp
 8016b44:	4606      	mov	r6, r0
 8016b46:	4620      	mov	r0, r4
 8016b48:	e884 0006 	stmia.w	r4, {r1, r2}
 8016b4c:	f7fc fdf4 	bl	8013738 <_ZNK8touchgfx4Rect7isEmptyEv>
 8016b50:	bbb0      	cbnz	r0, 8016bc0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x84>
 8016b52:	f8b6 50e8 	ldrh.w	r5, [r6, #232]	; 0xe8
 8016b56:	b1fd      	cbz	r5, 8016b98 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c>
 8016b58:	3d01      	subs	r5, #1
 8016b5a:	af04      	add	r7, sp, #16
 8016b5c:	f04f 090a 	mov.w	r9, #10
 8016b60:	eb06 02c5 	add.w	r2, r6, r5, lsl #3
 8016b64:	ab02      	add	r3, sp, #8
 8016b66:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8016b6a:	6851      	ldr	r1, [r2, #4]
 8016b6c:	c303      	stmia	r3!, {r0, r1}
 8016b6e:	4621      	mov	r1, r4
 8016b70:	a802      	add	r0, sp, #8
 8016b72:	fa1f f885 	uxth.w	r8, r5
 8016b76:	f7ff fedb 	bl	8016930 <_ZNK8touchgfx4Rect8includesERKS0_>
 8016b7a:	bb08      	cbnz	r0, 8016bc0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x84>
 8016b7c:	a902      	add	r1, sp, #8
 8016b7e:	4620      	mov	r0, r4
 8016b80:	f7ff fed6 	bl	8016930 <_ZNK8touchgfx4Rect8includesERKS0_>
 8016b84:	b1f8      	cbz	r0, 8016bc6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x8a>
 8016b86:	4642      	mov	r2, r8
 8016b88:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 8016b8c:	a806      	add	r0, sp, #24
 8016b8e:	f7ff ff95 	bl	8016abc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8016b92:	f115 35ff 	adds.w	r5, r5, #4294967295
 8016b96:	d2e3      	bcs.n	8016b60 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24>
 8016b98:	f8b6 30e8 	ldrh.w	r3, [r6, #232]	; 0xe8
 8016b9c:	2b08      	cmp	r3, #8
 8016b9e:	f106 05a8 	add.w	r5, r6, #168	; 0xa8
 8016ba2:	d108      	bne.n	8016bb6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 8016ba4:	4629      	mov	r1, r5
 8016ba6:	a806      	add	r0, sp, #24
 8016ba8:	2207      	movs	r2, #7
 8016baa:	f7ff ff87 	bl	8016abc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8016bae:	a906      	add	r1, sp, #24
 8016bb0:	4620      	mov	r0, r4
 8016bb2:	f7fd ffb4 	bl	8014b1e <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8016bb6:	e894 0006 	ldmia.w	r4, {r1, r2}
 8016bba:	4628      	mov	r0, r5
 8016bbc:	f7ff ff9c 	bl	8016af8 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 8016bc0:	b009      	add	sp, #36	; 0x24
 8016bc2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016bc6:	4621      	mov	r1, r4
 8016bc8:	a802      	add	r0, sp, #8
 8016bca:	f7ff fe8f 	bl	80168ec <_ZNK8touchgfx4Rect9intersectERKS0_>
 8016bce:	b150      	cbz	r0, 8016be6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xaa>
 8016bd0:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 8016bd4:	a806      	add	r0, sp, #24
 8016bd6:	4642      	mov	r2, r8
 8016bd8:	f7ff ff70 	bl	8016abc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8016bdc:	a902      	add	r1, sp, #8
 8016bde:	4620      	mov	r0, r4
 8016be0:	f7fd ff9d 	bl	8014b1e <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8016be4:	e7d5      	b.n	8016b92 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 8016be6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8016bea:	e887 0003 	stmia.w	r7, {r0, r1}
 8016bee:	a902      	add	r1, sp, #8
 8016bf0:	4638      	mov	r0, r7
 8016bf2:	f7fd ff94 	bl	8014b1e <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8016bf6:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8016bfa:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8016bfe:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8016c02:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8016c06:	fb13 f302 	smulbb	r3, r3, r2
 8016c0a:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 8016c0e:	fb11 f102 	smulbb	r1, r1, r2
 8016c12:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8016c16:	fb12 1100 	smlabb	r1, r2, r0, r1
 8016c1a:	220b      	movs	r2, #11
 8016c1c:	fb09 f303 	mul.w	r3, r9, r3
 8016c20:	434a      	muls	r2, r1
 8016c22:	4293      	cmp	r3, r2
 8016c24:	dab5      	bge.n	8016b92 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 8016c26:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 8016c2a:	a806      	add	r0, sp, #24
 8016c2c:	4642      	mov	r2, r8
 8016c2e:	f7ff ff45 	bl	8016abc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8016c32:	e897 0003 	ldmia.w	r7, {r0, r1}
 8016c36:	e884 0003 	stmia.w	r4, {r0, r1}
 8016c3a:	e7aa      	b.n	8016b92 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>

08016c3c <_ZN8touchgfx11Application4drawERNS_4RectE>:
 8016c3c:	b530      	push	{r4, r5, lr}
 8016c3e:	4b1d      	ldr	r3, [pc, #116]	; (8016cb4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x78>)
 8016c40:	b085      	sub	sp, #20
 8016c42:	460c      	mov	r4, r1
 8016c44:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016c48:	4b1b      	ldr	r3, [pc, #108]	; (8016cb8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x7c>)
 8016c4a:	f8ad 2004 	strh.w	r2, [sp, #4]
 8016c4e:	2100      	movs	r1, #0
 8016c50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016c54:	9100      	str	r1, [sp, #0]
 8016c56:	4605      	mov	r5, r0
 8016c58:	6861      	ldr	r1, [r4, #4]
 8016c5a:	6820      	ldr	r0, [r4, #0]
 8016c5c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8016c60:	ab02      	add	r3, sp, #8
 8016c62:	c303      	stmia	r3!, {r0, r1}
 8016c64:	4669      	mov	r1, sp
 8016c66:	a802      	add	r0, sp, #8
 8016c68:	f7fc fd22 	bl	80136b0 <_ZN8touchgfx4RectaNERKS0_>
 8016c6c:	ab02      	add	r3, sp, #8
 8016c6e:	cb03      	ldmia	r3!, {r0, r1}
 8016c70:	4b12      	ldr	r3, [pc, #72]	; (8016cbc <_ZN8touchgfx11Application4drawERNS_4RectE+0x80>)
 8016c72:	6020      	str	r0, [r4, #0]
 8016c74:	6818      	ldr	r0, [r3, #0]
 8016c76:	6061      	str	r1, [r4, #4]
 8016c78:	b138      	cbz	r0, 8016c8a <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 8016c7a:	f895 312c 	ldrb.w	r3, [r5, #300]	; 0x12c
 8016c7e:	b133      	cbz	r3, 8016c8e <_ZN8touchgfx11Application4drawERNS_4RectE+0x52>
 8016c80:	6821      	ldr	r1, [r4, #0]
 8016c82:	6862      	ldr	r2, [r4, #4]
 8016c84:	4628      	mov	r0, r5
 8016c86:	f7ff ff59 	bl	8016b3c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8016c8a:	b005      	add	sp, #20
 8016c8c:	bd30      	pop	{r4, r5, pc}
 8016c8e:	6803      	ldr	r3, [r0, #0]
 8016c90:	4621      	mov	r1, r4
 8016c92:	689b      	ldr	r3, [r3, #8]
 8016c94:	4798      	blx	r3
 8016c96:	4b0a      	ldr	r3, [pc, #40]	; (8016cc0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x84>)
 8016c98:	6818      	ldr	r0, [r3, #0]
 8016c9a:	b118      	cbz	r0, 8016ca4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x68>
 8016c9c:	6803      	ldr	r3, [r0, #0]
 8016c9e:	4621      	mov	r1, r4
 8016ca0:	689b      	ldr	r3, [r3, #8]
 8016ca2:	4798      	blx	r3
 8016ca4:	4b07      	ldr	r3, [pc, #28]	; (8016cc4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x88>)
 8016ca6:	6818      	ldr	r0, [r3, #0]
 8016ca8:	6803      	ldr	r3, [r0, #0]
 8016caa:	4621      	mov	r1, r4
 8016cac:	695b      	ldr	r3, [r3, #20]
 8016cae:	4798      	blx	r3
 8016cb0:	e7eb      	b.n	8016c8a <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 8016cb2:	bf00      	nop
 8016cb4:	2000d198 	.word	0x2000d198
 8016cb8:	2000d19a 	.word	0x2000d19a
 8016cbc:	2000d220 	.word	0x2000d220
 8016cc0:	2000d21c 	.word	0x2000d21c
 8016cc4:	2000d1a4 	.word	0x2000d1a4

08016cc8 <_ZN8touchgfx11Application19cacheDrawOperationsEb>:
 8016cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ccc:	4604      	mov	r4, r0
 8016cce:	b09b      	sub	sp, #108	; 0x6c
 8016cd0:	f880 112c 	strb.w	r1, [r0, #300]	; 0x12c
 8016cd4:	b129      	cbz	r1, 8016ce2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a>
 8016cd6:	2300      	movs	r3, #0
 8016cd8:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 8016cdc:	b01b      	add	sp, #108	; 0x6c
 8016cde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016ce2:	4baf      	ldr	r3, [pc, #700]	; (8016fa0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d8>)
 8016ce4:	681b      	ldr	r3, [r3, #0]
 8016ce6:	b33b      	cbz	r3, 8016d38 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 8016ce8:	4dae      	ldr	r5, [pc, #696]	; (8016fa4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2dc>)
 8016cea:	4628      	mov	r0, r5
 8016cec:	f7fc fd24 	bl	8013738 <_ZNK8touchgfx4Rect7isEmptyEv>
 8016cf0:	4606      	mov	r6, r0
 8016cf2:	bb08      	cbnz	r0, 8016d38 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 8016cf4:	4628      	mov	r0, r5
 8016cf6:	f7ff fca3 	bl	8016640 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8016cfa:	6829      	ldr	r1, [r5, #0]
 8016cfc:	686a      	ldr	r2, [r5, #4]
 8016cfe:	4620      	mov	r0, r4
 8016d00:	f7ff ff1c 	bl	8016b3c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8016d04:	802e      	strh	r6, [r5, #0]
 8016d06:	806e      	strh	r6, [r5, #2]
 8016d08:	80ae      	strh	r6, [r5, #4]
 8016d0a:	80ee      	strh	r6, [r5, #6]
 8016d0c:	4fa6      	ldr	r7, [pc, #664]	; (8016fa8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e0>)
 8016d0e:	a809      	add	r0, sp, #36	; 0x24
 8016d10:	f7ff fe89 	bl	8016a26 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8016d14:	883d      	ldrh	r5, [r7, #0]
 8016d16:	462e      	mov	r6, r5
 8016d18:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8016d1c:	42b3      	cmp	r3, r6
 8016d1e:	d910      	bls.n	8016d42 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x7a>
 8016d20:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8016d24:	a809      	add	r0, sp, #36	; 0x24
 8016d26:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 8016d2a:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8016d2e:	3601      	adds	r6, #1
 8016d30:	f7ff fee2 	bl	8016af8 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 8016d34:	b2b6      	uxth	r6, r6
 8016d36:	e7ef      	b.n	8016d18 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x50>
 8016d38:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8016d3c:	2b00      	cmp	r3, #0
 8016d3e:	d1e5      	bne.n	8016d0c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x44>
 8016d40:	e7cc      	b.n	8016cdc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 8016d42:	462e      	mov	r6, r5
 8016d44:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 8016d48:	42b3      	cmp	r3, r6
 8016d4a:	d90b      	bls.n	8016d64 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9c>
 8016d4c:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8016d50:	4620      	mov	r0, r4
 8016d52:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 8016d56:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 8016d5a:	3601      	adds	r6, #1
 8016d5c:	f7ff feee 	bl	8016b3c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8016d60:	b2b6      	uxth	r6, r6
 8016d62:	e7ef      	b.n	8016d44 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x7c>
 8016d64:	4e91      	ldr	r6, [pc, #580]	; (8016fac <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e4>)
 8016d66:	6833      	ldr	r3, [r6, #0]
 8016d68:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8016d6c:	2b01      	cmp	r3, #1
 8016d6e:	f040 8092 	bne.w	8016e96 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ce>
 8016d72:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 8016d76:	f8b4 00e8 	ldrh.w	r0, [r4, #232]	; 0xe8
 8016d7a:	33aa      	adds	r3, #170	; 0xaa
 8016d7c:	f04f 0900 	mov.w	r9, #0
 8016d80:	42a8      	cmp	r0, r5
 8016d82:	f103 0308 	add.w	r3, r3, #8
 8016d86:	dd0a      	ble.n	8016d9e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xd6>
 8016d88:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 8016d8c:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 8016d90:	440a      	add	r2, r1
 8016d92:	b212      	sxth	r2, r2
 8016d94:	4591      	cmp	r9, r2
 8016d96:	bfb8      	it	lt
 8016d98:	4691      	movlt	r9, r2
 8016d9a:	3501      	adds	r5, #1
 8016d9c:	e7f0      	b.n	8016d80 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xb8>
 8016d9e:	4b84      	ldr	r3, [pc, #528]	; (8016fb0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e8>)
 8016da0:	f8df 8214 	ldr.w	r8, [pc, #532]	; 8016fb8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f0>
 8016da4:	881d      	ldrh	r5, [r3, #0]
 8016da6:	2300      	movs	r3, #0
 8016da8:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8016dac:	2d0f      	cmp	r5, #15
 8016dae:	bf8c      	ite	hi
 8016db0:	08ed      	lsrhi	r5, r5, #3
 8016db2:	2501      	movls	r5, #1
 8016db4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8016db8:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 8016dbc:	6830      	ldr	r0, [r6, #0]
 8016dbe:	440b      	add	r3, r1
 8016dc0:	b21b      	sxth	r3, r3
 8016dc2:	4599      	cmp	r9, r3
 8016dc4:	6802      	ldr	r2, [r0, #0]
 8016dc6:	dd49      	ble.n	8016e5c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x194>
 8016dc8:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8016dcc:	4798      	blx	r3
 8016dce:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8016dd2:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8016dd6:	4413      	add	r3, r2
 8016dd8:	b21b      	sxth	r3, r3
 8016dda:	195a      	adds	r2, r3, r5
 8016ddc:	4290      	cmp	r0, r2
 8016dde:	da07      	bge.n	8016df0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x128>
 8016de0:	4581      	cmp	r9, r0
 8016de2:	dd05      	ble.n	8016df0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x128>
 8016de4:	4298      	cmp	r0, r3
 8016de6:	da33      	bge.n	8016e50 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x188>
 8016de8:	2b00      	cmp	r3, #0
 8016dea:	dd31      	ble.n	8016e50 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x188>
 8016dec:	4648      	mov	r0, r9
 8016dee:	e004      	b.n	8016dfa <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x132>
 8016df0:	4298      	cmp	r0, r3
 8016df2:	dbfb      	blt.n	8016dec <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x124>
 8016df4:	4548      	cmp	r0, r9
 8016df6:	bfa8      	it	ge
 8016df8:	4648      	movge	r0, r9
 8016dfa:	f9b8 2000 	ldrsh.w	r2, [r8]
 8016dfe:	f8b7 a000 	ldrh.w	sl, [r7]
 8016e02:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016e06:	2100      	movs	r1, #0
 8016e08:	1ac0      	subs	r0, r0, r3
 8016e0a:	f8ad 1014 	strh.w	r1, [sp, #20]
 8016e0e:	f8ad 2018 	strh.w	r2, [sp, #24]
 8016e12:	f8ad 001a 	strh.w	r0, [sp, #26]
 8016e16:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8016e1a:	4553      	cmp	r3, sl
 8016e1c:	d9ca      	bls.n	8016db4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xec>
 8016e1e:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 8016e22:	ab07      	add	r3, sp, #28
 8016e24:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8016e28:	6851      	ldr	r1, [r2, #4]
 8016e2a:	c303      	stmia	r3!, {r0, r1}
 8016e2c:	a807      	add	r0, sp, #28
 8016e2e:	a905      	add	r1, sp, #20
 8016e30:	f7fc fc3e 	bl	80136b0 <_ZN8touchgfx4RectaNERKS0_>
 8016e34:	a807      	add	r0, sp, #28
 8016e36:	f7fc fc7f 	bl	8013738 <_ZNK8touchgfx4Rect7isEmptyEv>
 8016e3a:	b920      	cbnz	r0, 8016e46 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x17e>
 8016e3c:	6823      	ldr	r3, [r4, #0]
 8016e3e:	a907      	add	r1, sp, #28
 8016e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016e42:	4620      	mov	r0, r4
 8016e44:	4798      	blx	r3
 8016e46:	f10a 0a01 	add.w	sl, sl, #1
 8016e4a:	fa1f fa8a 	uxth.w	sl, sl
 8016e4e:	e7e2      	b.n	8016e16 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14e>
 8016e50:	6830      	ldr	r0, [r6, #0]
 8016e52:	6803      	ldr	r3, [r0, #0]
 8016e54:	2101      	movs	r1, #1
 8016e56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8016e58:	4798      	blx	r3
 8016e5a:	e7ab      	b.n	8016db4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xec>
 8016e5c:	69d3      	ldr	r3, [r2, #28]
 8016e5e:	4798      	blx	r3
 8016e60:	4b54      	ldr	r3, [pc, #336]	; (8016fb4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ec>)
 8016e62:	781b      	ldrb	r3, [r3, #0]
 8016e64:	2b00      	cmp	r3, #0
 8016e66:	f43f af39 	beq.w	8016cdc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 8016e6a:	2300      	movs	r3, #0
 8016e6c:	883d      	ldrh	r5, [r7, #0]
 8016e6e:	f8a4 312a 	strh.w	r3, [r4, #298]	; 0x12a
 8016e72:	34ea      	adds	r4, #234	; 0xea
 8016e74:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 8016e78:	42ab      	cmp	r3, r5
 8016e7a:	f67f af2f 	bls.w	8016cdc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 8016e7e:	ab1a      	add	r3, sp, #104	; 0x68
 8016e80:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8016e84:	3b44      	subs	r3, #68	; 0x44
 8016e86:	e893 0006 	ldmia.w	r3, {r1, r2}
 8016e8a:	4620      	mov	r0, r4
 8016e8c:	3501      	adds	r5, #1
 8016e8e:	f7ff fe33 	bl	8016af8 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 8016e92:	b2ad      	uxth	r5, r5
 8016e94:	e7ee      	b.n	8016e74 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ac>
 8016e96:	2b02      	cmp	r3, #2
 8016e98:	d16a      	bne.n	8016f70 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a8>
 8016e9a:	f8df a120 	ldr.w	sl, [pc, #288]	; 8016fbc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f4>
 8016e9e:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8016ea2:	42ab      	cmp	r3, r5
 8016ea4:	d9dc      	bls.n	8016e60 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x198>
 8016ea6:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 8016eaa:	ab03      	add	r3, sp, #12
 8016eac:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8016eb0:	6851      	ldr	r1, [r2, #4]
 8016eb2:	c303      	stmia	r3!, {r0, r1}
 8016eb4:	f89a 3000 	ldrb.w	r3, [sl]
 8016eb8:	2b01      	cmp	r3, #1
 8016eba:	d102      	bne.n	8016ec2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1fa>
 8016ebc:	a803      	add	r0, sp, #12
 8016ebe:	f7ff fc19 	bl	80166f4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8016ec2:	a803      	add	r0, sp, #12
 8016ec4:	f7fc fc38 	bl	8013738 <_ZNK8touchgfx4Rect7isEmptyEv>
 8016ec8:	2800      	cmp	r0, #0
 8016eca:	d14a      	bne.n	8016f62 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x29a>
 8016ecc:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8016ed0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8016ed4:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8016ed8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016edc:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8016ee0:	f8ad 001a 	strh.w	r0, [sp, #26]
 8016ee4:	f8ad 3018 	strh.w	r3, [sp, #24]
 8016ee8:	f10d 0914 	add.w	r9, sp, #20
 8016eec:	f10d 081c 	add.w	r8, sp, #28
 8016ef0:	f8bd b012 	ldrh.w	fp, [sp, #18]
 8016ef4:	f8bd c00e 	ldrh.w	ip, [sp, #14]
 8016ef8:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8016efc:	6830      	ldr	r0, [r6, #0]
 8016efe:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8016f02:	f8d0 e000 	ldr.w	lr, [r0]
 8016f06:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8016f0a:	44dc      	add	ip, fp
 8016f0c:	ebac 0c02 	sub.w	ip, ip, r2
 8016f10:	fa1f fc8c 	uxth.w	ip, ip
 8016f14:	f8cd c000 	str.w	ip, [sp]
 8016f18:	f8de b078 	ldr.w	fp, [lr, #120]	; 0x78
 8016f1c:	47d8      	blx	fp
 8016f1e:	f89a 3000 	ldrb.w	r3, [sl]
 8016f22:	f8ad 001a 	strh.w	r0, [sp, #26]
 8016f26:	2b01      	cmp	r3, #1
 8016f28:	d11e      	bne.n	8016f68 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a0>
 8016f2a:	e899 0003 	ldmia.w	r9, {r0, r1}
 8016f2e:	e888 0003 	stmia.w	r8, {r0, r1}
 8016f32:	4640      	mov	r0, r8
 8016f34:	f7ff fb84 	bl	8016640 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8016f38:	6823      	ldr	r3, [r4, #0]
 8016f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016f3c:	4641      	mov	r1, r8
 8016f3e:	4620      	mov	r0, r4
 8016f40:	4798      	blx	r3
 8016f42:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8016f46:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8016f4a:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 8016f4e:	4413      	add	r3, r2
 8016f50:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 8016f54:	440a      	add	r2, r1
 8016f56:	b21b      	sxth	r3, r3
 8016f58:	b212      	sxth	r2, r2
 8016f5a:	4293      	cmp	r3, r2
 8016f5c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016f60:	dbc6      	blt.n	8016ef0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x228>
 8016f62:	3501      	adds	r5, #1
 8016f64:	b2ad      	uxth	r5, r5
 8016f66:	e79a      	b.n	8016e9e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d6>
 8016f68:	6823      	ldr	r3, [r4, #0]
 8016f6a:	4649      	mov	r1, r9
 8016f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016f6e:	e7e6      	b.n	8016f3e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x276>
 8016f70:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8016f74:	42ab      	cmp	r3, r5
 8016f76:	f67f af73 	bls.w	8016e60 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x198>
 8016f7a:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 8016f7e:	ab07      	add	r3, sp, #28
 8016f80:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8016f84:	6851      	ldr	r1, [r2, #4]
 8016f86:	c303      	stmia	r3!, {r0, r1}
 8016f88:	a807      	add	r0, sp, #28
 8016f8a:	f7fc fbd5 	bl	8013738 <_ZNK8touchgfx4Rect7isEmptyEv>
 8016f8e:	b920      	cbnz	r0, 8016f9a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d2>
 8016f90:	6823      	ldr	r3, [r4, #0]
 8016f92:	a907      	add	r1, sp, #28
 8016f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016f96:	4620      	mov	r0, r4
 8016f98:	4798      	blx	r3
 8016f9a:	3501      	adds	r5, #1
 8016f9c:	b2ad      	uxth	r5, r5
 8016f9e:	e7e7      	b.n	8016f70 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a8>
 8016fa0:	2000d21c 	.word	0x2000d21c
 8016fa4:	2000d228 	.word	0x2000d228
 8016fa8:	2000002c 	.word	0x2000002c
 8016fac:	2000d1a4 	.word	0x2000d1a4
 8016fb0:	2000d19a 	.word	0x2000d19a
 8016fb4:	2000d1a2 	.word	0x2000d1a2
 8016fb8:	2000d198 	.word	0x2000d198
 8016fbc:	2000d19c 	.word	0x2000d19c

08016fc0 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 8016fc0:	4b03      	ldr	r3, [pc, #12]	; (8016fd0 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 8016fc2:	2200      	movs	r2, #0
 8016fc4:	801a      	strh	r2, [r3, #0]
 8016fc6:	805a      	strh	r2, [r3, #2]
 8016fc8:	809a      	strh	r2, [r3, #4]
 8016fca:	80da      	strh	r2, [r3, #6]
 8016fcc:	4770      	bx	lr
 8016fce:	bf00      	nop
 8016fd0:	2000d228 	.word	0x2000d228

08016fd4 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
 8016fd4:	2000      	movs	r0, #0
 8016fd6:	4770      	bx	lr

08016fd8 <_ZNK8touchgfx4Font12getGSUBTableEv>:
 8016fd8:	2000      	movs	r0, #0
 8016fda:	4770      	bx	lr

08016fdc <_ZNK8touchgfx4Font12getCharWidthEt>:
 8016fdc:	b508      	push	{r3, lr}
 8016fde:	6803      	ldr	r3, [r0, #0]
 8016fe0:	68db      	ldr	r3, [r3, #12]
 8016fe2:	4798      	blx	r3
 8016fe4:	b128      	cbz	r0, 8016ff2 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 8016fe6:	f990 300d 	ldrsb.w	r3, [r0, #13]
 8016fea:	7a80      	ldrb	r0, [r0, #10]
 8016fec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016ff0:	4318      	orrs	r0, r3
 8016ff2:	bd08      	pop	{r3, pc}

08016ff4 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
 8016ff4:	b40e      	push	{r1, r2, r3}
 8016ff6:	b533      	push	{r0, r1, r4, r5, lr}
 8016ff8:	ab05      	add	r3, sp, #20
 8016ffa:	f853 2b04 	ldr.w	r2, [r3], #4
 8016ffe:	9301      	str	r3, [sp, #4]
 8017000:	4b09      	ldr	r3, [pc, #36]	; (8017028 <_ZNK8touchgfx4Font14getStringWidthEPKtz+0x34>)
 8017002:	685c      	ldr	r4, [r3, #4]
 8017004:	1061      	asrs	r1, r4, #1
 8017006:	07e4      	lsls	r4, r4, #31
 8017008:	eb00 0501 	add.w	r5, r0, r1
 801700c:	bf45      	ittet	mi
 801700e:	681b      	ldrmi	r3, [r3, #0]
 8017010:	5841      	ldrmi	r1, [r0, r1]
 8017012:	681c      	ldrpl	r4, [r3, #0]
 8017014:	58cc      	ldrmi	r4, [r1, r3]
 8017016:	9b01      	ldr	r3, [sp, #4]
 8017018:	2100      	movs	r1, #0
 801701a:	4628      	mov	r0, r5
 801701c:	47a0      	blx	r4
 801701e:	b002      	add	sp, #8
 8017020:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017024:	b003      	add	sp, #12
 8017026:	4770      	bx	lr
 8017028:	2000000c 	.word	0x2000000c

0801702c <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:
 801702c:	b40c      	push	{r2, r3}
 801702e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017030:	ab06      	add	r3, sp, #24
 8017032:	f853 2b04 	ldr.w	r2, [r3], #4
 8017036:	9301      	str	r3, [sp, #4]
 8017038:	4b09      	ldr	r3, [pc, #36]	; (8017060 <_ZNK8touchgfx4Font14getStringWidthEhPKtz+0x34>)
 801703a:	685d      	ldr	r5, [r3, #4]
 801703c:	106c      	asrs	r4, r5, #1
 801703e:	07ed      	lsls	r5, r5, #31
 8017040:	eb00 0604 	add.w	r6, r0, r4
 8017044:	bf45      	ittet	mi
 8017046:	681b      	ldrmi	r3, [r3, #0]
 8017048:	5900      	ldrmi	r0, [r0, r4]
 801704a:	681c      	ldrpl	r4, [r3, #0]
 801704c:	58c4      	ldrmi	r4, [r0, r3]
 801704e:	9b01      	ldr	r3, [sp, #4]
 8017050:	4630      	mov	r0, r6
 8017052:	47a0      	blx	r4
 8017054:	b002      	add	sp, #8
 8017056:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801705a:	b002      	add	sp, #8
 801705c:	4770      	bx	lr
 801705e:	bf00      	nop
 8017060:	2000000c 	.word	0x2000000c

08017064 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 8017064:	b40e      	push	{r1, r2, r3}
 8017066:	b530      	push	{r4, r5, lr}
 8017068:	b098      	sub	sp, #96	; 0x60
 801706a:	ab1b      	add	r3, sp, #108	; 0x6c
 801706c:	4604      	mov	r4, r0
 801706e:	f853 5b04 	ldr.w	r5, [r3], #4
 8017072:	9301      	str	r3, [sp, #4]
 8017074:	a802      	add	r0, sp, #8
 8017076:	f001 f89f 	bl	80181b8 <_ZN8touchgfx12TextProviderC1Ev>
 801707a:	6823      	ldr	r3, [r4, #0]
 801707c:	4620      	mov	r0, r4
 801707e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017080:	4798      	blx	r3
 8017082:	9a01      	ldr	r2, [sp, #4]
 8017084:	4603      	mov	r3, r0
 8017086:	4629      	mov	r1, r5
 8017088:	a802      	add	r0, sp, #8
 801708a:	f001 f8b2 	bl	80181f2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801708e:	a802      	add	r0, sp, #8
 8017090:	f001 f8e8 	bl	8018264 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8017094:	2401      	movs	r4, #1
 8017096:	b2a3      	uxth	r3, r4
 8017098:	b140      	cbz	r0, 80170ac <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x48>
 801709a:	280a      	cmp	r0, #10
 801709c:	bf08      	it	eq
 801709e:	3301      	addeq	r3, #1
 80170a0:	a802      	add	r0, sp, #8
 80170a2:	bf08      	it	eq
 80170a4:	b21c      	sxtheq	r4, r3
 80170a6:	f001 f8dd 	bl	8018264 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80170aa:	e7f4      	b.n	8017096 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x32>
 80170ac:	4618      	mov	r0, r3
 80170ae:	b018      	add	sp, #96	; 0x60
 80170b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80170b4:	b003      	add	sp, #12
 80170b6:	4770      	bx	lr

080170b8 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 80170b8:	b40e      	push	{r1, r2, r3}
 80170ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80170bc:	b098      	sub	sp, #96	; 0x60
 80170be:	ab1d      	add	r3, sp, #116	; 0x74
 80170c0:	4605      	mov	r5, r0
 80170c2:	f853 4b04 	ldr.w	r4, [r3], #4
 80170c6:	9300      	str	r3, [sp, #0]
 80170c8:	a802      	add	r0, sp, #8
 80170ca:	f001 f875 	bl	80181b8 <_ZN8touchgfx12TextProviderC1Ev>
 80170ce:	682b      	ldr	r3, [r5, #0]
 80170d0:	4f21      	ldr	r7, [pc, #132]	; (8017158 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0xa0>)
 80170d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80170d4:	4628      	mov	r0, r5
 80170d6:	4798      	blx	r3
 80170d8:	ae18      	add	r6, sp, #96	; 0x60
 80170da:	4603      	mov	r3, r0
 80170dc:	4621      	mov	r1, r4
 80170de:	9a00      	ldr	r2, [sp, #0]
 80170e0:	a802      	add	r0, sp, #8
 80170e2:	2400      	movs	r4, #0
 80170e4:	f001 f885 	bl	80181f2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 80170e8:	f846 4d5c 	str.w	r4, [r6, #-92]!
 80170ec:	462a      	mov	r2, r5
 80170ee:	4633      	mov	r3, r6
 80170f0:	4621      	mov	r1, r4
 80170f2:	a802      	add	r0, sp, #8
 80170f4:	f001 f9e2 	bl	80184bc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80170f8:	b338      	cbz	r0, 801714a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x92>
 80170fa:	280a      	cmp	r0, #10
 80170fc:	d01e      	beq.n	801713c <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x84>
 80170fe:	9901      	ldr	r1, [sp, #4]
 8017100:	b1e1      	cbz	r1, 801713c <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x84>
 8017102:	7b4b      	ldrb	r3, [r1, #13]
 8017104:	f891 c008 	ldrb.w	ip, [r1, #8]
 8017108:	79c9      	ldrb	r1, [r1, #7]
 801710a:	88aa      	ldrh	r2, [r5, #4]
 801710c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8017110:	ea4f 1e03 	mov.w	lr, r3, lsl #4
 8017114:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8017118:	f40e 7e80 	and.w	lr, lr, #256	; 0x100
 801711c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017120:	bf14      	ite	ne
 8017122:	4638      	movne	r0, r7
 8017124:	2000      	moveq	r0, #0
 8017126:	ea41 010e 	orr.w	r1, r1, lr
 801712a:	ea43 030c 	orr.w	r3, r3, ip
 801712e:	440a      	add	r2, r1
 8017130:	4303      	orrs	r3, r0
 8017132:	1ad3      	subs	r3, r2, r3
 8017134:	b29b      	uxth	r3, r3
 8017136:	42a3      	cmp	r3, r4
 8017138:	bfc8      	it	gt
 801713a:	b21c      	sxthgt	r4, r3
 801713c:	4633      	mov	r3, r6
 801713e:	462a      	mov	r2, r5
 8017140:	2100      	movs	r1, #0
 8017142:	a802      	add	r0, sp, #8
 8017144:	f001 f9ba 	bl	80184bc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8017148:	e7d6      	b.n	80170f8 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x40>
 801714a:	b2a0      	uxth	r0, r4
 801714c:	b018      	add	sp, #96	; 0x60
 801714e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8017152:	b003      	add	sp, #12
 8017154:	4770      	bx	lr
 8017156:	bf00      	nop
 8017158:	fffffe00 	.word	0xfffffe00

0801715c <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 801715c:	b40e      	push	{r1, r2, r3}
 801715e:	b570      	push	{r4, r5, r6, lr}
 8017160:	b099      	sub	sp, #100	; 0x64
 8017162:	ab1d      	add	r3, sp, #116	; 0x74
 8017164:	4604      	mov	r4, r0
 8017166:	f853 5b04 	ldr.w	r5, [r3], #4
 801716a:	9300      	str	r3, [sp, #0]
 801716c:	a802      	add	r0, sp, #8
 801716e:	f001 f823 	bl	80181b8 <_ZN8touchgfx12TextProviderC1Ev>
 8017172:	6823      	ldr	r3, [r4, #0]
 8017174:	4620      	mov	r0, r4
 8017176:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017178:	4798      	blx	r3
 801717a:	4629      	mov	r1, r5
 801717c:	4603      	mov	r3, r0
 801717e:	9a00      	ldr	r2, [sp, #0]
 8017180:	a802      	add	r0, sp, #8
 8017182:	ad18      	add	r5, sp, #96	; 0x60
 8017184:	f001 f835 	bl	80181f2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8017188:	2100      	movs	r1, #0
 801718a:	f845 1d5c 	str.w	r1, [r5, #-92]!
 801718e:	4622      	mov	r2, r4
 8017190:	462b      	mov	r3, r5
 8017192:	a802      	add	r0, sp, #8
 8017194:	f001 f992 	bl	80184bc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8017198:	26ff      	movs	r6, #255	; 0xff
 801719a:	b190      	cbz	r0, 80171c2 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x66>
 801719c:	280a      	cmp	r0, #10
 801719e:	d009      	beq.n	80171b4 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x58>
 80171a0:	9a01      	ldr	r2, [sp, #4]
 80171a2:	b13a      	cbz	r2, 80171b4 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x58>
 80171a4:	7923      	ldrb	r3, [r4, #4]
 80171a6:	7a12      	ldrb	r2, [r2, #8]
 80171a8:	1a9b      	subs	r3, r3, r2
 80171aa:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 80171ae:	429e      	cmp	r6, r3
 80171b0:	bf28      	it	cs
 80171b2:	461e      	movcs	r6, r3
 80171b4:	462b      	mov	r3, r5
 80171b6:	4622      	mov	r2, r4
 80171b8:	2100      	movs	r1, #0
 80171ba:	a802      	add	r0, sp, #8
 80171bc:	f001 f97e 	bl	80184bc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80171c0:	e7eb      	b.n	801719a <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x3e>
 80171c2:	4630      	mov	r0, r6
 80171c4:	b019      	add	sp, #100	; 0x64
 80171c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80171ca:	b003      	add	sp, #12
 80171cc:	4770      	bx	lr

080171ce <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 80171ce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80171d2:	4606      	mov	r6, r0
 80171d4:	b099      	sub	sp, #100	; 0x64
 80171d6:	a802      	add	r0, sp, #8
 80171d8:	4614      	mov	r4, r2
 80171da:	4688      	mov	r8, r1
 80171dc:	461d      	mov	r5, r3
 80171de:	f000 ffeb 	bl	80181b8 <_ZN8touchgfx12TextProviderC1Ev>
 80171e2:	6833      	ldr	r3, [r6, #0]
 80171e4:	4630      	mov	r0, r6
 80171e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80171e8:	4798      	blx	r3
 80171ea:	462a      	mov	r2, r5
 80171ec:	4603      	mov	r3, r0
 80171ee:	4621      	mov	r1, r4
 80171f0:	a802      	add	r0, sp, #8
 80171f2:	f000 fffe 	bl	80181f2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 80171f6:	f04f 0b00 	mov.w	fp, #0
 80171fa:	465f      	mov	r7, fp
 80171fc:	46da      	mov	sl, fp
 80171fe:	46d9      	mov	r9, fp
 8017200:	ab01      	add	r3, sp, #4
 8017202:	4632      	mov	r2, r6
 8017204:	4641      	mov	r1, r8
 8017206:	a802      	add	r0, sp, #8
 8017208:	f8cd 9004 	str.w	r9, [sp, #4]
 801720c:	f001 f956 	bl	80184bc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8017210:	4605      	mov	r5, r0
 8017212:	b108      	cbz	r0, 8017218 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x4a>
 8017214:	280a      	cmp	r0, #10
 8017216:	d10b      	bne.n	8017230 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x62>
 8017218:	4557      	cmp	r7, sl
 801721a:	bf38      	it	cc
 801721c:	4657      	movcc	r7, sl
 801721e:	f04f 0a00 	mov.w	sl, #0
 8017222:	b91d      	cbnz	r5, 801722c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x5e>
 8017224:	4638      	mov	r0, r7
 8017226:	b019      	add	sp, #100	; 0x64
 8017228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801722c:	46ab      	mov	fp, r5
 801722e:	e7e7      	b.n	8017200 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x32>
 8017230:	9a01      	ldr	r2, [sp, #4]
 8017232:	2a00      	cmp	r2, #0
 8017234:	d0fa      	beq.n	801722c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x5e>
 8017236:	f992 400d 	ldrsb.w	r4, [r2, #13]
 801723a:	6833      	ldr	r3, [r6, #0]
 801723c:	8895      	ldrh	r5, [r2, #4]
 801723e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017240:	f404 7080 	and.w	r0, r4, #256	; 0x100
 8017244:	7a94      	ldrb	r4, [r2, #10]
 8017246:	4659      	mov	r1, fp
 8017248:	4304      	orrs	r4, r0
 801724a:	4630      	mov	r0, r6
 801724c:	4798      	blx	r3
 801724e:	4420      	add	r0, r4
 8017250:	4450      	add	r0, sl
 8017252:	fa1f fa80 	uxth.w	sl, r0
 8017256:	e7e4      	b.n	8017222 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x54>

08017258 <_ZNK8touchgfx8Drawable10invalidateEv>:
 8017258:	b513      	push	{r0, r1, r4, lr}
 801725a:	1d01      	adds	r1, r0, #4
 801725c:	4603      	mov	r3, r0
 801725e:	c903      	ldmia	r1, {r0, r1}
 8017260:	466a      	mov	r2, sp
 8017262:	e882 0003 	stmia.w	r2, {r0, r1}
 8017266:	2100      	movs	r1, #0
 8017268:	9100      	str	r1, [sp, #0]
 801726a:	6819      	ldr	r1, [r3, #0]
 801726c:	4618      	mov	r0, r3
 801726e:	690c      	ldr	r4, [r1, #16]
 8017270:	4611      	mov	r1, r2
 8017272:	47a0      	blx	r4
 8017274:	b002      	add	sp, #8
 8017276:	bd10      	pop	{r4, pc}

08017278 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 8017278:	b538      	push	{r3, r4, r5, lr}
 801727a:	680b      	ldr	r3, [r1, #0]
 801727c:	460c      	mov	r4, r1
 801727e:	68db      	ldr	r3, [r3, #12]
 8017280:	4605      	mov	r5, r0
 8017282:	4798      	blx	r3
 8017284:	6823      	ldr	r3, [r4, #0]
 8017286:	4620      	mov	r0, r4
 8017288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801728a:	4629      	mov	r1, r5
 801728c:	4798      	blx	r3
 801728e:	4628      	mov	r0, r5
 8017290:	bd38      	pop	{r3, r4, r5, pc}

08017292 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 8017292:	b410      	push	{r4}
 8017294:	880a      	ldrh	r2, [r1, #0]
 8017296:	8884      	ldrh	r4, [r0, #4]
 8017298:	4422      	add	r2, r4
 801729a:	800a      	strh	r2, [r1, #0]
 801729c:	88c4      	ldrh	r4, [r0, #6]
 801729e:	884a      	ldrh	r2, [r1, #2]
 80172a0:	4422      	add	r2, r4
 80172a2:	804a      	strh	r2, [r1, #2]
 80172a4:	6940      	ldr	r0, [r0, #20]
 80172a6:	b120      	cbz	r0, 80172b2 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 80172a8:	6803      	ldr	r3, [r0, #0]
 80172aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80172ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80172b0:	4718      	bx	r3
 80172b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80172b6:	4770      	bx	lr

080172b8 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 80172b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80172ba:	460b      	mov	r3, r1
 80172bc:	b085      	sub	sp, #20
 80172be:	4604      	mov	r4, r0
 80172c0:	b901      	cbnz	r1, 80172c4 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 80172c2:	b1fa      	cbz	r2, 8017304 <_ZN8touchgfx8Drawable12moveRelativeEss+0x4c>
 80172c4:	1d27      	adds	r7, r4, #4
 80172c6:	e897 0003 	ldmia.w	r7, {r0, r1}
 80172ca:	466e      	mov	r6, sp
 80172cc:	e886 0003 	stmia.w	r6, {r0, r1}
 80172d0:	88e1      	ldrh	r1, [r4, #6]
 80172d2:	440a      	add	r2, r1
 80172d4:	88a1      	ldrh	r1, [r4, #4]
 80172d6:	4419      	add	r1, r3
 80172d8:	6823      	ldr	r3, [r4, #0]
 80172da:	b209      	sxth	r1, r1
 80172dc:	4620      	mov	r0, r4
 80172de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80172e0:	b212      	sxth	r2, r2
 80172e2:	4798      	blx	r3
 80172e4:	e897 0003 	ldmia.w	r7, {r0, r1}
 80172e8:	ad02      	add	r5, sp, #8
 80172ea:	e885 0003 	stmia.w	r5, {r0, r1}
 80172ee:	6960      	ldr	r0, [r4, #20]
 80172f0:	b150      	cbz	r0, 8017308 <_ZN8touchgfx8Drawable12moveRelativeEss+0x50>
 80172f2:	6803      	ldr	r3, [r0, #0]
 80172f4:	4631      	mov	r1, r6
 80172f6:	691b      	ldr	r3, [r3, #16]
 80172f8:	4798      	blx	r3
 80172fa:	6960      	ldr	r0, [r4, #20]
 80172fc:	6803      	ldr	r3, [r0, #0]
 80172fe:	691b      	ldr	r3, [r3, #16]
 8017300:	4629      	mov	r1, r5
 8017302:	4798      	blx	r3
 8017304:	b005      	add	sp, #20
 8017306:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017308:	f7ff fb34 	bl	8016974 <_ZN8touchgfx11Application11getInstanceEv>
 801730c:	6803      	ldr	r3, [r0, #0]
 801730e:	4631      	mov	r1, r6
 8017310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017312:	4798      	blx	r3
 8017314:	f7ff fb2e 	bl	8016974 <_ZN8touchgfx11Application11getInstanceEv>
 8017318:	6803      	ldr	r3, [r0, #0]
 801731a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801731c:	e7f0      	b.n	8017300 <_ZN8touchgfx8Drawable12moveRelativeEss+0x48>

0801731e <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 801731e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017320:	8882      	ldrh	r2, [r0, #4]
 8017322:	880b      	ldrh	r3, [r1, #0]
 8017324:	4413      	add	r3, r2
 8017326:	800b      	strh	r3, [r1, #0]
 8017328:	88c2      	ldrh	r2, [r0, #6]
 801732a:	884b      	ldrh	r3, [r1, #2]
 801732c:	4413      	add	r3, r2
 801732e:	4602      	mov	r2, r0
 8017330:	804b      	strh	r3, [r1, #2]
 8017332:	4605      	mov	r5, r0
 8017334:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8017338:	460c      	mov	r4, r1
 801733a:	6851      	ldr	r1, [r2, #4]
 801733c:	466b      	mov	r3, sp
 801733e:	c303      	stmia	r3!, {r0, r1}
 8017340:	4621      	mov	r1, r4
 8017342:	4668      	mov	r0, sp
 8017344:	f7fc f9b4 	bl	80136b0 <_ZN8touchgfx4RectaNERKS0_>
 8017348:	466b      	mov	r3, sp
 801734a:	cb03      	ldmia	r3!, {r0, r1}
 801734c:	6020      	str	r0, [r4, #0]
 801734e:	6061      	str	r1, [r4, #4]
 8017350:	6968      	ldr	r0, [r5, #20]
 8017352:	b128      	cbz	r0, 8017360 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x42>
 8017354:	6803      	ldr	r3, [r0, #0]
 8017356:	691b      	ldr	r3, [r3, #16]
 8017358:	4621      	mov	r1, r4
 801735a:	4798      	blx	r3
 801735c:	b003      	add	sp, #12
 801735e:	bd30      	pop	{r4, r5, pc}
 8017360:	f7ff fb08 	bl	8016974 <_ZN8touchgfx11Application11getInstanceEv>
 8017364:	6803      	ldr	r3, [r0, #0]
 8017366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017368:	e7f6      	b.n	8017358 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3a>

0801736a <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 801736a:	b570      	push	{r4, r5, r6, lr}
 801736c:	8882      	ldrh	r2, [r0, #4]
 801736e:	880b      	ldrh	r3, [r1, #0]
 8017370:	4413      	add	r3, r2
 8017372:	800b      	strh	r3, [r1, #0]
 8017374:	88c2      	ldrh	r2, [r0, #6]
 8017376:	884b      	ldrh	r3, [r1, #2]
 8017378:	460c      	mov	r4, r1
 801737a:	4413      	add	r3, r2
 801737c:	804b      	strh	r3, [r1, #2]
 801737e:	4605      	mov	r5, r0
 8017380:	1d01      	adds	r1, r0, #4
 8017382:	4620      	mov	r0, r4
 8017384:	f7fc f994 	bl	80136b0 <_ZN8touchgfx4RectaNERKS0_>
 8017388:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801738c:	b153      	cbz	r3, 80173a4 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3a>
 801738e:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8017392:	b13b      	cbz	r3, 80173a4 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3a>
 8017394:	6968      	ldr	r0, [r5, #20]
 8017396:	b128      	cbz	r0, 80173a4 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3a>
 8017398:	6803      	ldr	r3, [r0, #0]
 801739a:	4621      	mov	r1, r4
 801739c:	6a1b      	ldr	r3, [r3, #32]
 801739e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80173a2:	4718      	bx	r3
 80173a4:	bd70      	pop	{r4, r5, r6, pc}

080173a6 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 80173a6:	b510      	push	{r4, lr}
 80173a8:	4604      	mov	r4, r0
 80173aa:	4608      	mov	r0, r1
 80173ac:	2300      	movs	r3, #0
 80173ae:	8023      	strh	r3, [r4, #0]
 80173b0:	8063      	strh	r3, [r4, #2]
 80173b2:	6803      	ldr	r3, [r0, #0]
 80173b4:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80173b8:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 80173bc:	80a1      	strh	r1, [r4, #4]
 80173be:	80e2      	strh	r2, [r4, #6]
 80173c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80173c2:	4621      	mov	r1, r4
 80173c4:	4798      	blx	r3
 80173c6:	4620      	mov	r0, r4
 80173c8:	bd10      	pop	{r4, pc}
	...

080173cc <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 80173cc:	b530      	push	{r4, r5, lr}
 80173ce:	8083      	strh	r3, [r0, #4]
 80173d0:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80173d4:	f89d 5010 	ldrb.w	r5, [sp, #16]
 80173d8:	7183      	strb	r3, [r0, #6]
 80173da:	79c3      	ldrb	r3, [r0, #7]
 80173dc:	6101      	str	r1, [r0, #16]
 80173de:	f365 0306 	bfi	r3, r5, #0, #7
 80173e2:	f89d 5014 	ldrb.w	r5, [sp, #20]
 80173e6:	8282      	strh	r2, [r0, #20]
 80173e8:	f365 13c7 	bfi	r3, r5, #7, #1
 80173ec:	71c3      	strb	r3, [r0, #7]
 80173ee:	f89d 3018 	ldrb.w	r3, [sp, #24]
 80173f2:	7203      	strb	r3, [r0, #8]
 80173f4:	f89d 301c 	ldrb.w	r3, [sp, #28]
 80173f8:	7243      	strb	r3, [r0, #9]
 80173fa:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80173fe:	8143      	strh	r3, [r0, #10]
 8017400:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8017404:	8183      	strh	r3, [r0, #12]
 8017406:	4b01      	ldr	r3, [pc, #4]	; (801740c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 8017408:	6003      	str	r3, [r0, #0]
 801740a:	bd30      	pop	{r4, r5, pc}
 801740c:	080269d8 	.word	0x080269d8

08017410 <_ZNK8touchgfx9ConstFont4findEt>:
 8017410:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017412:	8a84      	ldrh	r4, [r0, #20]
 8017414:	2500      	movs	r5, #0
 8017416:	3c01      	subs	r4, #1
 8017418:	260e      	movs	r6, #14
 801741a:	42a5      	cmp	r5, r4
 801741c:	dc0c      	bgt.n	8017438 <_ZNK8touchgfx9ConstFont4findEt+0x28>
 801741e:	192a      	adds	r2, r5, r4
 8017420:	6903      	ldr	r3, [r0, #16]
 8017422:	1052      	asrs	r2, r2, #1
 8017424:	fb06 3302 	mla	r3, r6, r2, r3
 8017428:	889f      	ldrh	r7, [r3, #4]
 801742a:	428f      	cmp	r7, r1
 801742c:	d901      	bls.n	8017432 <_ZNK8touchgfx9ConstFont4findEt+0x22>
 801742e:	1e54      	subs	r4, r2, #1
 8017430:	e7f3      	b.n	801741a <_ZNK8touchgfx9ConstFont4findEt+0xa>
 8017432:	d202      	bcs.n	801743a <_ZNK8touchgfx9ConstFont4findEt+0x2a>
 8017434:	1c55      	adds	r5, r2, #1
 8017436:	e7f0      	b.n	801741a <_ZNK8touchgfx9ConstFont4findEt+0xa>
 8017438:	2300      	movs	r3, #0
 801743a:	4618      	mov	r0, r3
 801743c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801743e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801743e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017440:	4605      	mov	r5, r0
 8017442:	4617      	mov	r7, r2
 8017444:	461e      	mov	r6, r3
 8017446:	f7ff ffe3 	bl	8017410 <_ZNK8touchgfx9ConstFont4findEt>
 801744a:	b9e0      	cbnz	r0, 8017486 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x48>
 801744c:	b911      	cbnz	r1, 8017454 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x16>
 801744e:	2400      	movs	r4, #0
 8017450:	4620      	mov	r0, r4
 8017452:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017454:	290a      	cmp	r1, #10
 8017456:	d0fa      	beq.n	801744e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 8017458:	682b      	ldr	r3, [r5, #0]
 801745a:	4628      	mov	r0, r5
 801745c:	691b      	ldr	r3, [r3, #16]
 801745e:	4798      	blx	r3
 8017460:	4601      	mov	r1, r0
 8017462:	4628      	mov	r0, r5
 8017464:	f7ff ffd4 	bl	8017410 <_ZNK8touchgfx9ConstFont4findEt>
 8017468:	4604      	mov	r4, r0
 801746a:	2800      	cmp	r0, #0
 801746c:	d0ef      	beq.n	801744e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801746e:	682b      	ldr	r3, [r5, #0]
 8017470:	4621      	mov	r1, r4
 8017472:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017474:	4628      	mov	r0, r5
 8017476:	4798      	blx	r3
 8017478:	6038      	str	r0, [r7, #0]
 801747a:	682b      	ldr	r3, [r5, #0]
 801747c:	4628      	mov	r0, r5
 801747e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017480:	4798      	blx	r3
 8017482:	7030      	strb	r0, [r6, #0]
 8017484:	e7e4      	b.n	8017450 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x12>
 8017486:	4604      	mov	r4, r0
 8017488:	e7f1      	b.n	801746e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x30>

0801748a <_ZN8touchgfx6memsetEPvhm>:
 801748a:	4402      	add	r2, r0
 801748c:	4290      	cmp	r0, r2
 801748e:	d002      	beq.n	8017496 <_ZN8touchgfx6memsetEPvhm+0xc>
 8017490:	f800 1b01 	strb.w	r1, [r0], #1
 8017494:	e7fa      	b.n	801748c <_ZN8touchgfx6memsetEPvhm+0x2>
 8017496:	4770      	bx	lr

08017498 <_ZN8touchgfx3clzEl>:
 8017498:	b1e8      	cbz	r0, 80174d6 <_ZN8touchgfx3clzEl+0x3e>
 801749a:	2800      	cmp	r0, #0
 801749c:	bfb8      	it	lt
 801749e:	4240      	neglt	r0, r0
 80174a0:	0c03      	lsrs	r3, r0, #16
 80174a2:	041b      	lsls	r3, r3, #16
 80174a4:	b9ab      	cbnz	r3, 80174d2 <_ZN8touchgfx3clzEl+0x3a>
 80174a6:	0400      	lsls	r0, r0, #16
 80174a8:	2310      	movs	r3, #16
 80174aa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80174ae:	bf04      	itt	eq
 80174b0:	0200      	lsleq	r0, r0, #8
 80174b2:	3308      	addeq	r3, #8
 80174b4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80174b8:	bf04      	itt	eq
 80174ba:	0100      	lsleq	r0, r0, #4
 80174bc:	3304      	addeq	r3, #4
 80174be:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80174c2:	bf04      	itt	eq
 80174c4:	0080      	lsleq	r0, r0, #2
 80174c6:	3302      	addeq	r3, #2
 80174c8:	2800      	cmp	r0, #0
 80174ca:	bfa8      	it	ge
 80174cc:	3301      	addge	r3, #1
 80174ce:	1e58      	subs	r0, r3, #1
 80174d0:	4770      	bx	lr
 80174d2:	2300      	movs	r3, #0
 80174d4:	e7e9      	b.n	80174aa <_ZN8touchgfx3clzEl+0x12>
 80174d6:	201f      	movs	r0, #31
 80174d8:	4770      	bx	lr

080174da <_ZN8touchgfx6muldivElllRl>:
 80174da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80174de:	4604      	mov	r4, r0
 80174e0:	4698      	mov	r8, r3
 80174e2:	f7ff ffd9 	bl	8017498 <_ZN8touchgfx3clzEl>
 80174e6:	2601      	movs	r6, #1
 80174e8:	2c00      	cmp	r4, #0
 80174ea:	fa04 f500 	lsl.w	r5, r4, r0
 80174ee:	bfba      	itte	lt
 80174f0:	f04f 37ff 	movlt.w	r7, #4294967295
 80174f4:	4264      	neglt	r4, r4
 80174f6:	2701      	movge	r7, #1
 80174f8:	4086      	lsls	r6, r0
 80174fa:	2900      	cmp	r1, #0
 80174fc:	bfb8      	it	lt
 80174fe:	4249      	neglt	r1, r1
 8017500:	f106 36ff 	add.w	r6, r6, #4294967295
 8017504:	fa41 fc00 	asr.w	ip, r1, r0
 8017508:	bfb8      	it	lt
 801750a:	427f      	neglt	r7, r7
 801750c:	4031      	ands	r1, r6
 801750e:	2a00      	cmp	r2, #0
 8017510:	fb95 f3f2 	sdiv	r3, r5, r2
 8017514:	fb04 f401 	mul.w	r4, r4, r1
 8017518:	fb02 5513 	mls	r5, r2, r3, r5
 801751c:	bfb8      	it	lt
 801751e:	4252      	neglt	r2, r2
 8017520:	fb94 f0f2 	sdiv	r0, r4, r2
 8017524:	fb02 4410 	mls	r4, r2, r0, r4
 8017528:	fb0c 4405 	mla	r4, ip, r5, r4
 801752c:	fb94 f1f2 	sdiv	r1, r4, r2
 8017530:	4408      	add	r0, r1
 8017532:	bfb8      	it	lt
 8017534:	427f      	neglt	r7, r7
 8017536:	fb02 4211 	mls	r2, r2, r1, r4
 801753a:	fb0c 0003 	mla	r0, ip, r3, r0
 801753e:	f8c8 2000 	str.w	r2, [r8]
 8017542:	4378      	muls	r0, r7
 8017544:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017548 <_ZN8touchgfx10ClickEventD1Ev>:
 8017548:	4770      	bx	lr

0801754a <_ZN8touchgfx10ClickEvent12getEventTypeEv>:
 801754a:	2000      	movs	r0, #0
 801754c:	4770      	bx	lr

0801754e <_ZN8touchgfx9DragEventD1Ev>:
 801754e:	4770      	bx	lr

08017550 <_ZN8touchgfx9DragEvent12getEventTypeEv>:
 8017550:	2001      	movs	r0, #1
 8017552:	4770      	bx	lr

08017554 <_ZN8touchgfx12GestureEvent12getEventTypeEv>:
 8017554:	2002      	movs	r0, #2
 8017556:	4770      	bx	lr

08017558 <_ZN8touchgfx12GestureEventD1Ev>:
 8017558:	4770      	bx	lr

0801755a <_ZN8touchgfx10ClickEventD0Ev>:
 801755a:	b510      	push	{r4, lr}
 801755c:	210c      	movs	r1, #12
 801755e:	4604      	mov	r4, r0
 8017560:	f00b f91b 	bl	802279a <_ZdlPvj>
 8017564:	4620      	mov	r0, r4
 8017566:	bd10      	pop	{r4, pc}

08017568 <_ZN8touchgfx9DragEventD0Ev>:
 8017568:	b510      	push	{r4, lr}
 801756a:	2110      	movs	r1, #16
 801756c:	4604      	mov	r4, r0
 801756e:	f00b f914 	bl	802279a <_ZdlPvj>
 8017572:	4620      	mov	r0, r4
 8017574:	bd10      	pop	{r4, pc}

08017576 <_ZN8touchgfx12GestureEventD0Ev>:
 8017576:	b510      	push	{r4, lr}
 8017578:	210c      	movs	r1, #12
 801757a:	4604      	mov	r4, r0
 801757c:	f00b f90d 	bl	802279a <_ZdlPvj>
 8017580:	4620      	mov	r0, r4
 8017582:	bd10      	pop	{r4, pc}

08017584 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 8017584:	b530      	push	{r4, r5, lr}
 8017586:	460d      	mov	r5, r1
 8017588:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801758a:	b087      	sub	sp, #28
 801758c:	4604      	mov	r4, r0
 801758e:	b301      	cbz	r1, 80175d2 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 8017590:	a801      	add	r0, sp, #4
 8017592:	f7ff ff08 	bl	80173a6 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017596:	892a      	ldrh	r2, [r5, #8]
 8017598:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801759c:	7928      	ldrb	r0, [r5, #4]
 801759e:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 80175a2:	f88d 0010 	strb.w	r0, [sp, #16]
 80175a6:	1ad2      	subs	r2, r2, r3
 80175a8:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 80175aa:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80175ac:	f8ad 1012 	strh.w	r1, [sp, #18]
 80175b0:	441a      	add	r2, r3
 80175b2:	896b      	ldrh	r3, [r5, #10]
 80175b4:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 80175b8:	f8ad 2014 	strh.w	r2, [sp, #20]
 80175bc:	1b5b      	subs	r3, r3, r5
 80175be:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 80175c0:	442b      	add	r3, r5
 80175c2:	4d05      	ldr	r5, [pc, #20]	; (80175d8 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 80175c4:	9503      	str	r5, [sp, #12]
 80175c6:	f8ad 3016 	strh.w	r3, [sp, #22]
 80175ca:	6803      	ldr	r3, [r0, #0]
 80175cc:	a903      	add	r1, sp, #12
 80175ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80175d0:	4798      	blx	r3
 80175d2:	b007      	add	sp, #28
 80175d4:	bd30      	pop	{r4, r5, pc}
 80175d6:	bf00      	nop
 80175d8:	08026a54 	.word	0x08026a54

080175dc <_ZNK8touchgfx4Rect9intersectEss>:
 80175dc:	b510      	push	{r4, lr}
 80175de:	f9b0 3000 	ldrsh.w	r3, [r0]
 80175e2:	428b      	cmp	r3, r1
 80175e4:	dc10      	bgt.n	8017608 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 80175e6:	8884      	ldrh	r4, [r0, #4]
 80175e8:	4423      	add	r3, r4
 80175ea:	b21b      	sxth	r3, r3
 80175ec:	4299      	cmp	r1, r3
 80175ee:	da0b      	bge.n	8017608 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 80175f0:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 80175f4:	4293      	cmp	r3, r2
 80175f6:	dc07      	bgt.n	8017608 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 80175f8:	88c0      	ldrh	r0, [r0, #6]
 80175fa:	4418      	add	r0, r3
 80175fc:	b200      	sxth	r0, r0
 80175fe:	4282      	cmp	r2, r0
 8017600:	bfac      	ite	ge
 8017602:	2000      	movge	r0, #0
 8017604:	2001      	movlt	r0, #1
 8017606:	bd10      	pop	{r4, pc}
 8017608:	2000      	movs	r0, #0
 801760a:	e7fc      	b.n	8017606 <_ZNK8touchgfx4Rect9intersectEss+0x2a>

0801760c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 801760c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801760e:	460c      	mov	r4, r1
 8017610:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8017612:	b089      	sub	sp, #36	; 0x24
 8017614:	4605      	mov	r5, r0
 8017616:	2900      	cmp	r1, #0
 8017618:	d054      	beq.n	80176c4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xb8>
 801761a:	4668      	mov	r0, sp
 801761c:	f7ff fec3 	bl	80173a6 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017620:	8eae      	ldrh	r6, [r5, #52]	; 0x34
 8017622:	8eef      	ldrh	r7, [r5, #54]	; 0x36
 8017624:	8922      	ldrh	r2, [r4, #8]
 8017626:	88e1      	ldrh	r1, [r4, #6]
 8017628:	443a      	add	r2, r7
 801762a:	4431      	add	r1, r6
 801762c:	b212      	sxth	r2, r2
 801762e:	b209      	sxth	r1, r1
 8017630:	4668      	mov	r0, sp
 8017632:	f7ff ffd3 	bl	80175dc <_ZNK8touchgfx4Rect9intersectEss>
 8017636:	b1d0      	cbz	r0, 801766e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 8017638:	89a2      	ldrh	r2, [r4, #12]
 801763a:	8961      	ldrh	r1, [r4, #10]
 801763c:	443a      	add	r2, r7
 801763e:	4431      	add	r1, r6
 8017640:	b212      	sxth	r2, r2
 8017642:	b209      	sxth	r1, r1
 8017644:	4668      	mov	r0, sp
 8017646:	f7ff ffc9 	bl	80175dc <_ZNK8touchgfx4Rect9intersectEss>
 801764a:	4603      	mov	r3, r0
 801764c:	b978      	cbnz	r0, 801766e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 801764e:	4a1e      	ldr	r2, [pc, #120]	; (80176c8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xbc>)
 8017650:	9204      	str	r2, [sp, #16]
 8017652:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8017654:	f8ad 3016 	strh.w	r3, [sp, #22]
 8017658:	2202      	movs	r2, #2
 801765a:	f88d 2014 	strb.w	r2, [sp, #20]
 801765e:	f8ad 3018 	strh.w	r3, [sp, #24]
 8017662:	f8ad 301a 	strh.w	r3, [sp, #26]
 8017666:	6803      	ldr	r3, [r0, #0]
 8017668:	a904      	add	r1, sp, #16
 801766a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801766c:	4798      	blx	r3
 801766e:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8017670:	a802      	add	r0, sp, #8
 8017672:	f7ff fe98 	bl	80173a6 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017676:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801767a:	88e0      	ldrh	r0, [r4, #6]
 801767c:	8961      	ldrh	r1, [r4, #10]
 801767e:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 8017682:	f8bd e00a 	ldrh.w	lr, [sp, #10]
 8017686:	8923      	ldrh	r3, [r4, #8]
 8017688:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 801768a:	7927      	ldrb	r7, [r4, #4]
 801768c:	f88d 7014 	strb.w	r7, [sp, #20]
 8017690:	1a80      	subs	r0, r0, r2
 8017692:	1a89      	subs	r1, r1, r2
 8017694:	89a2      	ldrh	r2, [r4, #12]
 8017696:	4c0d      	ldr	r4, [pc, #52]	; (80176cc <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xc0>)
 8017698:	9404      	str	r4, [sp, #16]
 801769a:	4460      	add	r0, ip
 801769c:	eba3 030e 	sub.w	r3, r3, lr
 80176a0:	eba2 020e 	sub.w	r2, r2, lr
 80176a4:	f8ad 0016 	strh.w	r0, [sp, #22]
 80176a8:	4433      	add	r3, r6
 80176aa:	4461      	add	r1, ip
 80176ac:	4432      	add	r2, r6
 80176ae:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80176b0:	f8ad 101a 	strh.w	r1, [sp, #26]
 80176b4:	f8ad 3018 	strh.w	r3, [sp, #24]
 80176b8:	f8ad 201c 	strh.w	r2, [sp, #28]
 80176bc:	6803      	ldr	r3, [r0, #0]
 80176be:	a904      	add	r1, sp, #16
 80176c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80176c2:	4798      	blx	r3
 80176c4:	b009      	add	sp, #36	; 0x24
 80176c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80176c8:	08026a2c 	.word	0x08026a2c
 80176cc:	08026a40 	.word	0x08026a40

080176d0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 80176d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80176d4:	f8d0 9030 	ldr.w	r9, [r0, #48]	; 0x30
 80176d8:	790b      	ldrb	r3, [r1, #4]
 80176da:	b0a1      	sub	sp, #132	; 0x84
 80176dc:	4604      	mov	r4, r0
 80176de:	460d      	mov	r5, r1
 80176e0:	f1b9 0f00 	cmp.w	r9, #0
 80176e4:	d00f      	beq.n	8017706 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x36>
 80176e6:	2b00      	cmp	r3, #0
 80176e8:	f040 80a0 	bne.w	801782c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x15c>
 80176ec:	b021      	add	sp, #132	; 0x84
 80176ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80176f2:	f104 0330 	add.w	r3, r4, #48	; 0x30
 80176f6:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 80176fa:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 80176fe:	1d20      	adds	r0, r4, #4
 8017700:	f7fb ff25 	bl	801354e <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8017704:	e092      	b.n	801782c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x15c>
 8017706:	2b00      	cmp	r3, #0
 8017708:	d1f0      	bne.n	80176ec <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801770a:	4b5e      	ldr	r3, [pc, #376]	; (8017884 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1b4>)
 801770c:	681b      	ldr	r3, [r3, #0]
 801770e:	f893 a049 	ldrb.w	sl, [r3, #73]	; 0x49
 8017712:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
 8017716:	f1ba 0f03 	cmp.w	sl, #3
 801771a:	ddea      	ble.n	80176f2 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x22>
 801771c:	f1ba 0f0c 	cmp.w	sl, #12
 8017720:	f04f 0303 	mov.w	r3, #3
 8017724:	bfdc      	itt	le
 8017726:	f10a 32ff 	addle.w	r2, sl, #4294967295
 801772a:	fb92 f3f3 	sdivle	r3, r2, r3
 801772e:	9301      	str	r3, [sp, #4]
 8017730:	4b55      	ldr	r3, [pc, #340]	; (8017888 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1b8>)
 8017732:	4956      	ldr	r1, [pc, #344]	; (801788c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1bc>)
 8017734:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017738:	4b55      	ldr	r3, [pc, #340]	; (8017890 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c0>)
 801773a:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 801773e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017742:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8017746:	ab0e      	add	r3, sp, #56	; 0x38
 8017748:	2248      	movs	r2, #72	; 0x48
 801774a:	2600      	movs	r6, #0
 801774c:	4618      	mov	r0, r3
 801774e:	960a      	str	r6, [sp, #40]	; 0x28
 8017750:	f00b f8cc 	bl	80228ec <memcpy>
 8017754:	f04f 32ff 	mov.w	r2, #4294967295
 8017758:	e9cd 2006 	strd	r2, r0, [sp, #24]
 801775c:	f8cd a008 	str.w	sl, [sp, #8]
 8017760:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8017764:	fb93 f3f2 	sdiv	r3, r3, r2
 8017768:	b29b      	uxth	r3, r3
 801776a:	46b3      	mov	fp, r6
 801776c:	9303      	str	r3, [sp, #12]
 801776e:	2300      	movs	r3, #0
 8017770:	9309      	str	r3, [sp, #36]	; 0x24
 8017772:	9b07      	ldr	r3, [sp, #28]
 8017774:	9a03      	ldr	r2, [sp, #12]
 8017776:	f853 303b 	ldr.w	r3, [r3, fp, lsl #3]
 801777a:	88ef      	ldrh	r7, [r5, #6]
 801777c:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 8017780:	fb13 f302 	smulbb	r3, r3, r2
 8017784:	b29b      	uxth	r3, r3
 8017786:	9304      	str	r3, [sp, #16]
 8017788:	9b07      	ldr	r3, [sp, #28]
 801778a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801778e:	a80a      	add	r0, sp, #40	; 0x28
 8017790:	685b      	ldr	r3, [r3, #4]
 8017792:	fb13 f302 	smulbb	r3, r3, r2
 8017796:	b29b      	uxth	r3, r3
 8017798:	9305      	str	r3, [sp, #20]
 801779a:	9b04      	ldr	r3, [sp, #16]
 801779c:	441f      	add	r7, r3
 801779e:	9b05      	ldr	r3, [sp, #20]
 80177a0:	4498      	add	r8, r3
 80177a2:	b23f      	sxth	r7, r7
 80177a4:	fa0f f888 	sxth.w	r8, r8
 80177a8:	4642      	mov	r2, r8
 80177aa:	4639      	mov	r1, r7
 80177ac:	f7ff ff16 	bl	80175dc <_ZNK8touchgfx4Rect9intersectEss>
 80177b0:	b380      	cbz	r0, 8017814 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x144>
 80177b2:	4639      	mov	r1, r7
 80177b4:	ab09      	add	r3, sp, #36	; 0x24
 80177b6:	4642      	mov	r2, r8
 80177b8:	1d20      	adds	r0, r4, #4
 80177ba:	f7fb fec8 	bl	801354e <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 80177be:	9909      	ldr	r1, [sp, #36]	; 0x24
 80177c0:	b341      	cbz	r1, 8017814 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x144>
 80177c2:	4549      	cmp	r1, r9
 80177c4:	d026      	beq.n	8017814 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x144>
 80177c6:	a80c      	add	r0, sp, #48	; 0x30
 80177c8:	f7ff fded 	bl	80173a6 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80177cc:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 80177d0:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 80177d4:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 80177d8:	2002      	movs	r0, #2
 80177da:	fb92 f2f0 	sdiv	r2, r2, r0
 80177de:	440a      	add	r2, r1
 80177e0:	1a99      	subs	r1, r3, r2
 80177e2:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 80177e6:	fb93 f3f0 	sdiv	r3, r3, r0
 80177ea:	f9bd 0032 	ldrsh.w	r0, [sp, #50]	; 0x32
 80177ee:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 80177f2:	4403      	add	r3, r0
 80177f4:	1ad3      	subs	r3, r2, r3
 80177f6:	435b      	muls	r3, r3
 80177f8:	9a06      	ldr	r2, [sp, #24]
 80177fa:	fb01 3301 	mla	r3, r1, r1, r3
 80177fe:	4293      	cmp	r3, r2
 8017800:	d208      	bcs.n	8017814 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x144>
 8017802:	9a04      	ldr	r2, [sp, #16]
 8017804:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8017808:	86a2      	strh	r2, [r4, #52]	; 0x34
 801780a:	9a05      	ldr	r2, [sp, #20]
 801780c:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
 8017810:	86e2      	strh	r2, [r4, #54]	; 0x36
 8017812:	9306      	str	r3, [sp, #24]
 8017814:	f10b 0b02 	add.w	fp, fp, #2
 8017818:	f1bb 0f08 	cmp.w	fp, #8
 801781c:	dda7      	ble.n	801776e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801781e:	9b02      	ldr	r3, [sp, #8]
 8017820:	4453      	add	r3, sl
 8017822:	9302      	str	r3, [sp, #8]
 8017824:	9b01      	ldr	r3, [sp, #4]
 8017826:	3601      	adds	r6, #1
 8017828:	42b3      	cmp	r3, r6
 801782a:	d199      	bne.n	8017760 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x90>
 801782c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801782e:	2900      	cmp	r1, #0
 8017830:	f43f af5c 	beq.w	80176ec <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 8017834:	a80c      	add	r0, sp, #48	; 0x30
 8017836:	f7ff fdb6 	bl	80173a6 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801783a:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 801783e:	88ea      	ldrh	r2, [r5, #6]
 8017840:	f8bd 0032 	ldrh.w	r0, [sp, #50]	; 0x32
 8017844:	7929      	ldrb	r1, [r5, #4]
 8017846:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
 801784a:	1ad2      	subs	r2, r2, r3
 801784c:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801784e:	441a      	add	r2, r3
 8017850:	892b      	ldrh	r3, [r5, #8]
 8017852:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 8017856:	1a1b      	subs	r3, r3, r0
 8017858:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 801785a:	4403      	add	r3, r0
 801785c:	480d      	ldr	r0, [pc, #52]	; (8017894 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c4>)
 801785e:	900e      	str	r0, [sp, #56]	; 0x38
 8017860:	2600      	movs	r6, #0
 8017862:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8017864:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8017868:	f8ad 6042 	strh.w	r6, [sp, #66]	; 0x42
 801786c:	6803      	ldr	r3, [r0, #0]
 801786e:	a90e      	add	r1, sp, #56	; 0x38
 8017870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017872:	4798      	blx	r3
 8017874:	792b      	ldrb	r3, [r5, #4]
 8017876:	2b00      	cmp	r3, #0
 8017878:	f43f af38 	beq.w	80176ec <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801787c:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 8017880:	e734      	b.n	80176ec <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 8017882:	bf00      	nop
 8017884:	2000d1a4 	.word	0x2000d1a4
 8017888:	2000d198 	.word	0x2000d198
 801788c:	08023fb0 	.word	0x08023fb0
 8017890:	2000d19a 	.word	0x2000d19a
 8017894:	08026a2c 	.word	0x08026a2c

08017898 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 8017898:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801789a:	4604      	mov	r4, r0
 801789c:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 80178a0:	3201      	adds	r2, #1
 80178a2:	d112      	bne.n	80178ca <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 80178a4:	6803      	ldr	r3, [r0, #0]
 80178a6:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 80178aa:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80178ae:	f8ad 1004 	strh.w	r1, [sp, #4]
 80178b2:	2500      	movs	r5, #0
 80178b4:	9500      	str	r5, [sp, #0]
 80178b6:	466d      	mov	r5, sp
 80178b8:	4629      	mov	r1, r5
 80178ba:	f8ad 2006 	strh.w	r2, [sp, #6]
 80178be:	6a1b      	ldr	r3, [r3, #32]
 80178c0:	4798      	blx	r3
 80178c2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80178c6:	e884 0003 	stmia.w	r4, {r0, r1}
 80178ca:	4620      	mov	r0, r4
 80178cc:	b003      	add	sp, #12
 80178ce:	bd30      	pop	{r4, r5, pc}

080178d0 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 80178d0:	b513      	push	{r0, r1, r4, lr}
 80178d2:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 80178d6:	3301      	adds	r3, #1
 80178d8:	4604      	mov	r4, r0
 80178da:	d109      	bne.n	80178f0 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 80178dc:	4601      	mov	r1, r0
 80178de:	4668      	mov	r0, sp
 80178e0:	f7ff fd61 	bl	80173a6 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80178e4:	f8bd 3000 	ldrh.w	r3, [sp]
 80178e8:	8423      	strh	r3, [r4, #32]
 80178ea:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80178ee:	8463      	strh	r3, [r4, #34]	; 0x22
 80178f0:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 80178f4:	b002      	add	sp, #8
 80178f6:	bd10      	pop	{r4, pc}

080178f8 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 80178f8:	b513      	push	{r0, r1, r4, lr}
 80178fa:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 80178fe:	3301      	adds	r3, #1
 8017900:	4604      	mov	r4, r0
 8017902:	d109      	bne.n	8017918 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 8017904:	4601      	mov	r1, r0
 8017906:	4668      	mov	r0, sp
 8017908:	f7ff fd4d 	bl	80173a6 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801790c:	f8bd 3000 	ldrh.w	r3, [sp]
 8017910:	8423      	strh	r3, [r4, #32]
 8017912:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8017916:	8463      	strh	r3, [r4, #34]	; 0x22
 8017918:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 801791c:	b002      	add	sp, #8
 801791e:	bd10      	pop	{r4, pc}

08017920 <_ZN8touchgfx6ScreenC1Ev>:
 8017920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017922:	4605      	mov	r5, r0
 8017924:	4b17      	ldr	r3, [pc, #92]	; (8017984 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 8017926:	f845 3b04 	str.w	r3, [r5], #4
 801792a:	2301      	movs	r3, #1
 801792c:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
 8017930:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 8017934:	4b14      	ldr	r3, [pc, #80]	; (8017988 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 8017936:	4915      	ldr	r1, [pc, #84]	; (801798c <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 8017938:	f9b3 7000 	ldrsh.w	r7, [r3]
 801793c:	4b14      	ldr	r3, [pc, #80]	; (8017990 <_ZN8touchgfx6ScreenC1Ev+0x70>)
 801793e:	6041      	str	r1, [r0, #4]
 8017940:	2200      	movs	r2, #0
 8017942:	8102      	strh	r2, [r0, #8]
 8017944:	8142      	strh	r2, [r0, #10]
 8017946:	8182      	strh	r2, [r0, #12]
 8017948:	81c2      	strh	r2, [r0, #14]
 801794a:	8202      	strh	r2, [r0, #16]
 801794c:	8242      	strh	r2, [r0, #18]
 801794e:	8282      	strh	r2, [r0, #20]
 8017950:	82c2      	strh	r2, [r0, #22]
 8017952:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8017956:	6202      	str	r2, [r0, #32]
 8017958:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
 801795c:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
 8017960:	6342      	str	r2, [r0, #52]	; 0x34
 8017962:	f9b3 6000 	ldrsh.w	r6, [r3]
 8017966:	4611      	mov	r1, r2
 8017968:	4604      	mov	r4, r0
 801796a:	4628      	mov	r0, r5
 801796c:	f7ec fe01 	bl	8004572 <_ZN8touchgfx8Drawable5setXYEss>
 8017970:	4639      	mov	r1, r7
 8017972:	4628      	mov	r0, r5
 8017974:	f7ec fe1b 	bl	80045ae <_ZN8touchgfx8Drawable8setWidthEs>
 8017978:	4628      	mov	r0, r5
 801797a:	4631      	mov	r1, r6
 801797c:	f7ec fe26 	bl	80045cc <_ZN8touchgfx8Drawable9setHeightEs>
 8017980:	4620      	mov	r0, r4
 8017982:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017984:	08026a68 	.word	0x08026a68
 8017988:	2000d198 	.word	0x2000d198
 801798c:	08025570 	.word	0x08025570
 8017990:	2000d19a 	.word	0x2000d19a

08017994 <_ZN8touchgfx6Screen4drawEv>:
 8017994:	b507      	push	{r0, r1, r2, lr}
 8017996:	4b09      	ldr	r3, [pc, #36]	; (80179bc <_ZN8touchgfx6Screen4drawEv+0x28>)
 8017998:	f9b3 2000 	ldrsh.w	r2, [r3]
 801799c:	4b08      	ldr	r3, [pc, #32]	; (80179c0 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 801799e:	f8ad 2004 	strh.w	r2, [sp, #4]
 80179a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80179a6:	f8ad 3006 	strh.w	r3, [sp, #6]
 80179aa:	6803      	ldr	r3, [r0, #0]
 80179ac:	2100      	movs	r1, #0
 80179ae:	9100      	str	r1, [sp, #0]
 80179b0:	689b      	ldr	r3, [r3, #8]
 80179b2:	4669      	mov	r1, sp
 80179b4:	4798      	blx	r3
 80179b6:	b003      	add	sp, #12
 80179b8:	f85d fb04 	ldr.w	pc, [sp], #4
 80179bc:	2000d198 	.word	0x2000d198
 80179c0:	2000d19a 	.word	0x2000d19a

080179c4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 80179c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80179c8:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 80179cc:	b089      	sub	sp, #36	; 0x24
 80179ce:	4680      	mov	r8, r0
 80179d0:	460c      	mov	r4, r1
 80179d2:	4615      	mov	r5, r2
 80179d4:	b16b      	cbz	r3, 80179f2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 80179d6:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 80179da:	b153      	cbz	r3, 80179f2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 80179dc:	4628      	mov	r0, r5
 80179de:	f7ff ff5b 	bl	8017898 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 80179e2:	4621      	mov	r1, r4
 80179e4:	f7fe ff82 	bl	80168ec <_ZNK8touchgfx4Rect9intersectERKS0_>
 80179e8:	69eb      	ldr	r3, [r5, #28]
 80179ea:	b928      	cbnz	r0, 80179f8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x34>
 80179ec:	461d      	mov	r5, r3
 80179ee:	2b00      	cmp	r3, #0
 80179f0:	d1f4      	bne.n	80179dc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x18>
 80179f2:	b009      	add	sp, #36	; 0x24
 80179f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80179f8:	ae04      	add	r6, sp, #16
 80179fa:	2b00      	cmp	r3, #0
 80179fc:	d051      	beq.n	8017aa2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xde>
 80179fe:	682b      	ldr	r3, [r5, #0]
 8017a00:	4629      	mov	r1, r5
 8017a02:	68db      	ldr	r3, [r3, #12]
 8017a04:	a802      	add	r0, sp, #8
 8017a06:	4798      	blx	r3
 8017a08:	4628      	mov	r0, r5
 8017a0a:	f7ff ff61 	bl	80178d0 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8017a0e:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 8017a12:	4407      	add	r7, r0
 8017a14:	4628      	mov	r0, r5
 8017a16:	f7ff ff6f 	bl	80178f8 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8017a1a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8017a1e:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8017a22:	f8ad 2014 	strh.w	r2, [sp, #20]
 8017a26:	4418      	add	r0, r3
 8017a28:	4621      	mov	r1, r4
 8017a2a:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8017a2e:	f8ad 0012 	strh.w	r0, [sp, #18]
 8017a32:	b23f      	sxth	r7, r7
 8017a34:	4630      	mov	r0, r6
 8017a36:	f8ad 3016 	strh.w	r3, [sp, #22]
 8017a3a:	f8ad 7010 	strh.w	r7, [sp, #16]
 8017a3e:	f7fb fe37 	bl	80136b0 <_ZN8touchgfx4RectaNERKS0_>
 8017a42:	4628      	mov	r0, r5
 8017a44:	f7ff ff28 	bl	8017898 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8017a48:	4602      	mov	r2, r0
 8017a4a:	e896 0003 	ldmia.w	r6, {r0, r1}
 8017a4e:	ab06      	add	r3, sp, #24
 8017a50:	e883 0003 	stmia.w	r3, {r0, r1}
 8017a54:	4611      	mov	r1, r2
 8017a56:	4618      	mov	r0, r3
 8017a58:	f7fb fe2a 	bl	80136b0 <_ZN8touchgfx4RectaNERKS0_>
 8017a5c:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8017a60:	f9b4 1000 	ldrsh.w	r1, [r4]
 8017a64:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 8017a68:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 8017a6c:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 8017a70:	4299      	cmp	r1, r3
 8017a72:	d10b      	bne.n	8017a8c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xc8>
 8017a74:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8017a78:	4552      	cmp	r2, sl
 8017a7a:	d107      	bne.n	8017a8c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xc8>
 8017a7c:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8017a80:	455a      	cmp	r2, fp
 8017a82:	d103      	bne.n	8017a8c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xc8>
 8017a84:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8017a88:	454a      	cmp	r2, r9
 8017a8a:	d00a      	beq.n	8017aa2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xde>
 8017a8c:	f1bb 0f00 	cmp.w	fp, #0
 8017a90:	d002      	beq.n	8017a98 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd4>
 8017a92:	f1b9 0f00 	cmp.w	r9, #0
 8017a96:	d12e      	bne.n	8017af6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x132>
 8017a98:	69ea      	ldr	r2, [r5, #28]
 8017a9a:	4621      	mov	r1, r4
 8017a9c:	4640      	mov	r0, r8
 8017a9e:	f7ff ff91 	bl	80179c4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8017aa2:	4628      	mov	r0, r5
 8017aa4:	f7ff fef8 	bl	8017898 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8017aa8:	6861      	ldr	r1, [r4, #4]
 8017aaa:	4602      	mov	r2, r0
 8017aac:	6820      	ldr	r0, [r4, #0]
 8017aae:	4633      	mov	r3, r6
 8017ab0:	c303      	stmia	r3!, {r0, r1}
 8017ab2:	4611      	mov	r1, r2
 8017ab4:	4630      	mov	r0, r6
 8017ab6:	f7fb fdfb 	bl	80136b0 <_ZN8touchgfx4RectaNERKS0_>
 8017aba:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8017abe:	2b00      	cmp	r3, #0
 8017ac0:	d097      	beq.n	80179f2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 8017ac2:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8017ac6:	2b00      	cmp	r3, #0
 8017ac8:	d093      	beq.n	80179f2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 8017aca:	4628      	mov	r0, r5
 8017acc:	f7ff ff00 	bl	80178d0 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8017ad0:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8017ad4:	1a18      	subs	r0, r3, r0
 8017ad6:	f8ad 0010 	strh.w	r0, [sp, #16]
 8017ada:	4628      	mov	r0, r5
 8017adc:	f7ff ff0c 	bl	80178f8 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8017ae0:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8017ae4:	1a18      	subs	r0, r3, r0
 8017ae6:	f8ad 0012 	strh.w	r0, [sp, #18]
 8017aea:	682b      	ldr	r3, [r5, #0]
 8017aec:	4631      	mov	r1, r6
 8017aee:	689b      	ldr	r3, [r3, #8]
 8017af0:	4628      	mov	r0, r5
 8017af2:	4798      	blx	r3
 8017af4:	e77d      	b.n	80179f2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 8017af6:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8017afa:	fa1f f08a 	uxth.w	r0, sl
 8017afe:	4552      	cmp	r2, sl
 8017b00:	9000      	str	r0, [sp, #0]
 8017b02:	da12      	bge.n	8017b2a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x166>
 8017b04:	9301      	str	r3, [sp, #4]
 8017b06:	9b00      	ldr	r3, [sp, #0]
 8017b08:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8017b0c:	f8ad 2012 	strh.w	r2, [sp, #18]
 8017b10:	1a9a      	subs	r2, r3, r2
 8017b12:	f8ad 1010 	strh.w	r1, [sp, #16]
 8017b16:	f8ad 0014 	strh.w	r0, [sp, #20]
 8017b1a:	f8ad 2016 	strh.w	r2, [sp, #22]
 8017b1e:	69ea      	ldr	r2, [r5, #28]
 8017b20:	4631      	mov	r1, r6
 8017b22:	4640      	mov	r0, r8
 8017b24:	f7ff ff4e 	bl	80179c4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8017b28:	9b01      	ldr	r3, [sp, #4]
 8017b2a:	f9b4 2000 	ldrsh.w	r2, [r4]
 8017b2e:	429a      	cmp	r2, r3
 8017b30:	b29f      	uxth	r7, r3
 8017b32:	da0d      	bge.n	8017b50 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x18c>
 8017b34:	f8ad 2010 	strh.w	r2, [sp, #16]
 8017b38:	1aba      	subs	r2, r7, r2
 8017b3a:	f8ad a012 	strh.w	sl, [sp, #18]
 8017b3e:	f8ad 2014 	strh.w	r2, [sp, #20]
 8017b42:	f8ad 9016 	strh.w	r9, [sp, #22]
 8017b46:	69ea      	ldr	r2, [r5, #28]
 8017b48:	4631      	mov	r1, r6
 8017b4a:	4640      	mov	r0, r8
 8017b4c:	f7ff ff3a 	bl	80179c4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8017b50:	8822      	ldrh	r2, [r4, #0]
 8017b52:	88a3      	ldrh	r3, [r4, #4]
 8017b54:	445f      	add	r7, fp
 8017b56:	4413      	add	r3, r2
 8017b58:	b29b      	uxth	r3, r3
 8017b5a:	b2bf      	uxth	r7, r7
 8017b5c:	b23a      	sxth	r2, r7
 8017b5e:	b219      	sxth	r1, r3
 8017b60:	4291      	cmp	r1, r2
 8017b62:	dd0d      	ble.n	8017b80 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1bc>
 8017b64:	1bdb      	subs	r3, r3, r7
 8017b66:	f8ad 2010 	strh.w	r2, [sp, #16]
 8017b6a:	f8ad a012 	strh.w	sl, [sp, #18]
 8017b6e:	f8ad 3014 	strh.w	r3, [sp, #20]
 8017b72:	f8ad 9016 	strh.w	r9, [sp, #22]
 8017b76:	69ea      	ldr	r2, [r5, #28]
 8017b78:	4631      	mov	r1, r6
 8017b7a:	4640      	mov	r0, r8
 8017b7c:	f7ff ff22 	bl	80179c4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8017b80:	88e2      	ldrh	r2, [r4, #6]
 8017b82:	8863      	ldrh	r3, [r4, #2]
 8017b84:	4413      	add	r3, r2
 8017b86:	9a00      	ldr	r2, [sp, #0]
 8017b88:	444a      	add	r2, r9
 8017b8a:	b29b      	uxth	r3, r3
 8017b8c:	fa1f f982 	uxth.w	r9, r2
 8017b90:	fa0f f289 	sxth.w	r2, r9
 8017b94:	b219      	sxth	r1, r3
 8017b96:	428a      	cmp	r2, r1
 8017b98:	da83      	bge.n	8017aa2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xde>
 8017b9a:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8017b9e:	f9b4 0000 	ldrsh.w	r0, [r4]
 8017ba2:	f8ad 1014 	strh.w	r1, [sp, #20]
 8017ba6:	eba3 0309 	sub.w	r3, r3, r9
 8017baa:	f8ad 0010 	strh.w	r0, [sp, #16]
 8017bae:	f8ad 2012 	strh.w	r2, [sp, #18]
 8017bb2:	f8ad 3016 	strh.w	r3, [sp, #22]
 8017bb6:	69ea      	ldr	r2, [r5, #28]
 8017bb8:	4631      	mov	r1, r6
 8017bba:	e76f      	b.n	8017a9c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd8>

08017bbc <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 8017bbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017bbe:	aa02      	add	r2, sp, #8
 8017bc0:	2300      	movs	r3, #0
 8017bc2:	f842 3d04 	str.w	r3, [r2, #-4]!
 8017bc6:	4604      	mov	r4, r0
 8017bc8:	3004      	adds	r0, #4
 8017bca:	460d      	mov	r5, r1
 8017bcc:	f7fb fe47 	bl	801385e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 8017bd0:	9a01      	ldr	r2, [sp, #4]
 8017bd2:	b11a      	cbz	r2, 8017bdc <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x20>
 8017bd4:	4629      	mov	r1, r5
 8017bd6:	4620      	mov	r0, r4
 8017bd8:	f7ff fef4 	bl	80179c4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8017bdc:	b003      	add	sp, #12
 8017bde:	bd30      	pop	{r4, r5, pc}

08017be0 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 8017be0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017be2:	4602      	mov	r2, r0
 8017be4:	4604      	mov	r4, r0
 8017be6:	f852 0f08 	ldr.w	r0, [r2, #8]!
 8017bea:	460d      	mov	r5, r1
 8017bec:	6851      	ldr	r1, [r2, #4]
 8017bee:	466b      	mov	r3, sp
 8017bf0:	c303      	stmia	r3!, {r0, r1}
 8017bf2:	4629      	mov	r1, r5
 8017bf4:	4668      	mov	r0, sp
 8017bf6:	f7fb fd5b 	bl	80136b0 <_ZN8touchgfx4RectaNERKS0_>
 8017bfa:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8017bfe:	4669      	mov	r1, sp
 8017c00:	b123      	cbz	r3, 8017c0c <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2c>
 8017c02:	4620      	mov	r0, r4
 8017c04:	f7ff ffda 	bl	8017bbc <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 8017c08:	b003      	add	sp, #12
 8017c0a:	bd30      	pop	{r4, r5, pc}
 8017c0c:	1d20      	adds	r0, r4, #4
 8017c0e:	f7fb fded 	bl	80137ec <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 8017c12:	e7f9      	b.n	8017c08 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x28>

08017c14 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 8017c14:	680a      	ldr	r2, [r1, #0]
 8017c16:	460b      	mov	r3, r1
 8017c18:	6952      	ldr	r2, [r2, #20]
 8017c1a:	1d01      	adds	r1, r0, #4
 8017c1c:	4618      	mov	r0, r3
 8017c1e:	4710      	bx	r2

08017c20 <_ZN8touchgfx15EasingEquations16roundRespectSignEf>:
 8017c20:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8017c24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017c28:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8017c2c:	bfcc      	ite	gt
 8017c2e:	ee30 0a27 	vaddgt.f32	s0, s0, s15
 8017c32:	ee30 0a67 	vsuble.f32	s0, s0, s15
 8017c36:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8017c3a:	ee10 3a10 	vmov	r3, s0
 8017c3e:	b218      	sxth	r0, r3
 8017c40:	4770      	bx	lr
	...

08017c44 <_ZN8touchgfx15EasingEquations11backEaseOutEtsst>:
 8017c44:	b510      	push	{r4, lr}
 8017c46:	4298      	cmp	r0, r3
 8017c48:	eb01 0402 	add.w	r4, r1, r2
 8017c4c:	b224      	sxth	r4, r4
 8017c4e:	d225      	bcs.n	8017c9c <_ZN8touchgfx15EasingEquations11backEaseOutEtsst+0x58>
 8017c50:	b323      	cbz	r3, 8017c9c <_ZN8touchgfx15EasingEquations11backEaseOutEtsst+0x58>
 8017c52:	ee07 0a90 	vmov	s15, r0
 8017c56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8017c5a:	ee07 3a90 	vmov	s15, r3
 8017c5e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8017c62:	ee06 1a10 	vmov	s12, r1
 8017c66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8017c6a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8017c6e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8017c72:	eeb8 0ac6 	vcvt.f32.s32	s0, s12
 8017c76:	ed9f 5a0a 	vldr	s10, [pc, #40]	; 8017ca0 <_ZN8touchgfx15EasingEquations11backEaseOutEtsst+0x5c>
 8017c7a:	ed9f 6a0a 	vldr	s12, [pc, #40]	; 8017ca4 <_ZN8touchgfx15EasingEquations11backEaseOutEtsst+0x60>
 8017c7e:	eea7 6a85 	vfma.f32	s12, s15, s10
 8017c82:	ee67 5aa7 	vmul.f32	s11, s15, s15
 8017c86:	ee06 2a90 	vmov	s13, r2
 8017c8a:	eea5 7a86 	vfma.f32	s14, s11, s12
 8017c8e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8017c92:	eea6 0a87 	vfma.f32	s0, s13, s14
 8017c96:	f7ff ffc3 	bl	8017c20 <_ZN8touchgfx15EasingEquations16roundRespectSignEf>
 8017c9a:	4604      	mov	r4, r0
 8017c9c:	4620      	mov	r0, r4
 8017c9e:	bd10      	pop	{r4, pc}
 8017ca0:	402ce6b0 	.word	0x402ce6b0
 8017ca4:	3fd9cd60 	.word	0x3fd9cd60

08017ca8 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>:
 8017ca8:	b510      	push	{r4, lr}
 8017caa:	4298      	cmp	r0, r3
 8017cac:	eb01 0402 	add.w	r4, r1, r2
 8017cb0:	b224      	sxth	r4, r4
 8017cb2:	d21f      	bcs.n	8017cf4 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x4c>
 8017cb4:	b1f3      	cbz	r3, 8017cf4 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x4c>
 8017cb6:	ee07 0a90 	vmov	s15, r0
 8017cba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8017cbe:	ee07 3a90 	vmov	s15, r3
 8017cc2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8017cc6:	ee06 1a10 	vmov	s12, r1
 8017cca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8017cce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8017cd2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8017cd6:	eeb8 0ac6 	vcvt.f32.s32	s0, s12
 8017cda:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8017cde:	ee06 2a90 	vmov	s13, r2
 8017ce2:	eea6 7a27 	vfma.f32	s14, s12, s15
 8017ce6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8017cea:	eea6 0a87 	vfma.f32	s0, s13, s14
 8017cee:	f7ff ff97 	bl	8017c20 <_ZN8touchgfx15EasingEquations16roundRespectSignEf>
 8017cf2:	4604      	mov	r4, r0
 8017cf4:	4620      	mov	r0, r4
 8017cf6:	bd10      	pop	{r4, pc}

08017cf8 <_ZNK8touchgfx9GlyphNode3topEv.isra.2>:
 8017cf8:	f011 0f40 	tst.w	r1, #64	; 0x40
 8017cfc:	ea4f 01c1 	mov.w	r1, r1, lsl #3
 8017d00:	4b03      	ldr	r3, [pc, #12]	; (8017d10 <_ZNK8touchgfx9GlyphNode3topEv.isra.2+0x18>)
 8017d02:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8017d06:	bf08      	it	eq
 8017d08:	2300      	moveq	r3, #0
 8017d0a:	4308      	orrs	r0, r1
 8017d0c:	4318      	orrs	r0, r3
 8017d0e:	4770      	bx	lr
 8017d10:	fffffe00 	.word	0xfffffe00

08017d14 <_ZN8touchgfx9GlyphNode6setTopEs>:
 8017d14:	7b43      	ldrb	r3, [r0, #13]
 8017d16:	7201      	strb	r1, [r0, #8]
 8017d18:	b289      	uxth	r1, r1
 8017d1a:	f003 039f 	and.w	r3, r3, #159	; 0x9f
 8017d1e:	05ca      	lsls	r2, r1, #23
 8017d20:	bf48      	it	mi
 8017d22:	f043 0320 	orrmi.w	r3, r3, #32
 8017d26:	7343      	strb	r3, [r0, #13]
 8017d28:	058b      	lsls	r3, r1, #22
 8017d2a:	bf42      	ittt	mi
 8017d2c:	7b43      	ldrbmi	r3, [r0, #13]
 8017d2e:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 8017d32:	7343      	strbmi	r3, [r0, #13]
 8017d34:	4770      	bx	lr

08017d36 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 8017d36:	b530      	push	{r4, r5, lr}
 8017d38:	2500      	movs	r5, #0
 8017d3a:	2401      	movs	r4, #1
 8017d3c:	6843      	ldr	r3, [r0, #4]
 8017d3e:	b913      	cbnz	r3, 8017d46 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 8017d40:	6803      	ldr	r3, [r0, #0]
 8017d42:	b1f3      	cbz	r3, 8017d82 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 8017d44:	6043      	str	r3, [r0, #4]
 8017d46:	7c03      	ldrb	r3, [r0, #16]
 8017d48:	b143      	cbz	r3, 8017d5c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 8017d4a:	68c3      	ldr	r3, [r0, #12]
 8017d4c:	b12b      	cbz	r3, 8017d5a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8017d4e:	881a      	ldrh	r2, [r3, #0]
 8017d50:	b11a      	cbz	r2, 8017d5a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8017d52:	1c9a      	adds	r2, r3, #2
 8017d54:	60c2      	str	r2, [r0, #12]
 8017d56:	8818      	ldrh	r0, [r3, #0]
 8017d58:	bd30      	pop	{r4, r5, pc}
 8017d5a:	7405      	strb	r5, [r0, #16]
 8017d5c:	6843      	ldr	r3, [r0, #4]
 8017d5e:	8819      	ldrh	r1, [r3, #0]
 8017d60:	b179      	cbz	r1, 8017d82 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 8017d62:	1c9a      	adds	r2, r3, #2
 8017d64:	2902      	cmp	r1, #2
 8017d66:	6042      	str	r2, [r0, #4]
 8017d68:	d1f5      	bne.n	8017d56 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 8017d6a:	6883      	ldr	r3, [r0, #8]
 8017d6c:	1d1a      	adds	r2, r3, #4
 8017d6e:	6082      	str	r2, [r0, #8]
 8017d70:	681b      	ldr	r3, [r3, #0]
 8017d72:	60c3      	str	r3, [r0, #12]
 8017d74:	2b00      	cmp	r3, #0
 8017d76:	d0e1      	beq.n	8017d3c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8017d78:	881b      	ldrh	r3, [r3, #0]
 8017d7a:	2b00      	cmp	r3, #0
 8017d7c:	d0de      	beq.n	8017d3c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8017d7e:	7404      	strb	r4, [r0, #16]
 8017d80:	e7dc      	b.n	8017d3c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8017d82:	2000      	movs	r0, #0
 8017d84:	e7e8      	b.n	8017d58 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

08017d86 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 8017d86:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017d88:	4605      	mov	r5, r0
 8017d8a:	4608      	mov	r0, r1
 8017d8c:	b1e9      	cbz	r1, 8017dca <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x44>
 8017d8e:	f105 0440 	add.w	r4, r5, #64	; 0x40
 8017d92:	460b      	mov	r3, r1
 8017d94:	f101 0708 	add.w	r7, r1, #8
 8017d98:	4622      	mov	r2, r4
 8017d9a:	6818      	ldr	r0, [r3, #0]
 8017d9c:	6859      	ldr	r1, [r3, #4]
 8017d9e:	4626      	mov	r6, r4
 8017da0:	c603      	stmia	r6!, {r0, r1}
 8017da2:	3308      	adds	r3, #8
 8017da4:	42bb      	cmp	r3, r7
 8017da6:	4634      	mov	r4, r6
 8017da8:	d1f7      	bne.n	8017d9a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 8017daa:	6818      	ldr	r0, [r3, #0]
 8017dac:	6030      	str	r0, [r6, #0]
 8017dae:	889b      	ldrh	r3, [r3, #4]
 8017db0:	80b3      	strh	r3, [r6, #4]
 8017db2:	f895 304d 	ldrb.w	r3, [r5, #77]	; 0x4d
 8017db6:	015b      	lsls	r3, r3, #5
 8017db8:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8017dbc:	f895 3046 	ldrb.w	r3, [r5, #70]	; 0x46
 8017dc0:	430b      	orrs	r3, r1
 8017dc2:	425b      	negs	r3, r3
 8017dc4:	f885 3049 	strb.w	r3, [r5, #73]	; 0x49
 8017dc8:	4610      	mov	r0, r2
 8017dca:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017dcc <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 8017dcc:	b538      	push	{r3, r4, r5, lr}
 8017dce:	460c      	mov	r4, r1
 8017dd0:	6811      	ldr	r1, [r2, #0]
 8017dd2:	4610      	mov	r0, r2
 8017dd4:	68cd      	ldr	r5, [r1, #12]
 8017dd6:	4619      	mov	r1, r3
 8017dd8:	47a8      	blx	r5
 8017dda:	2800      	cmp	r0, #0
 8017ddc:	bf08      	it	eq
 8017dde:	4620      	moveq	r0, r4
 8017de0:	bd38      	pop	{r3, r4, r5, pc}

08017de2 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 8017de2:	b570      	push	{r4, r5, r6, lr}
 8017de4:	8810      	ldrh	r0, [r2, #0]
 8017de6:	4298      	cmp	r0, r3
 8017de8:	d817      	bhi.n	8017e1a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8017dea:	1e48      	subs	r0, r1, #1
 8017dec:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 8017df0:	4298      	cmp	r0, r3
 8017df2:	d312      	bcc.n	8017e1a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8017df4:	2400      	movs	r4, #0
 8017df6:	428c      	cmp	r4, r1
 8017df8:	d20f      	bcs.n	8017e1a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8017dfa:	1860      	adds	r0, r4, r1
 8017dfc:	1040      	asrs	r0, r0, #1
 8017dfe:	0085      	lsls	r5, r0, #2
 8017e00:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 8017e04:	42b3      	cmp	r3, r6
 8017e06:	d902      	bls.n	8017e0e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 8017e08:	3001      	adds	r0, #1
 8017e0a:	b284      	uxth	r4, r0
 8017e0c:	e7f3      	b.n	8017df6 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8017e0e:	d102      	bne.n	8017e16 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x34>
 8017e10:	442a      	add	r2, r5
 8017e12:	8850      	ldrh	r0, [r2, #2]
 8017e14:	bd70      	pop	{r4, r5, r6, pc}
 8017e16:	b281      	uxth	r1, r0
 8017e18:	e7ed      	b.n	8017df6 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8017e1a:	2000      	movs	r0, #0
 8017e1c:	e7fa      	b.n	8017e14 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
	...

08017e20 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>:
 8017e20:	b510      	push	{r4, lr}
 8017e22:	8ac3      	ldrh	r3, [r0, #22]
 8017e24:	428b      	cmp	r3, r1
 8017e26:	d805      	bhi.n	8017e34 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x14>
 8017e28:	4b07      	ldr	r3, [pc, #28]	; (8017e48 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x28>)
 8017e2a:	4a08      	ldr	r2, [pc, #32]	; (8017e4c <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x2c>)
 8017e2c:	4808      	ldr	r0, [pc, #32]	; (8017e50 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x30>)
 8017e2e:	21fd      	movs	r1, #253	; 0xfd
 8017e30:	f00a fcde 	bl	80227f0 <__assert_func>
 8017e34:	8a83      	ldrh	r3, [r0, #20]
 8017e36:	240a      	movs	r4, #10
 8017e38:	4419      	add	r1, r3
 8017e3a:	fbb1 f3f4 	udiv	r3, r1, r4
 8017e3e:	fb04 1113 	mls	r1, r4, r3, r1
 8017e42:	f820 2011 	strh.w	r2, [r0, r1, lsl #1]
 8017e46:	bd10      	pop	{r4, pc}
 8017e48:	08026ab5 	.word	0x08026ab5
 8017e4c:	08026ee4 	.word	0x08026ee4
 8017e50:	08026ac3 	.word	0x08026ac3

08017e54 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>:
 8017e54:	b508      	push	{r3, lr}
 8017e56:	8ac3      	ldrh	r3, [r0, #22]
 8017e58:	428b      	cmp	r3, r1
 8017e5a:	d805      	bhi.n	8017e68 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x14>
 8017e5c:	4b07      	ldr	r3, [pc, #28]	; (8017e7c <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x28>)
 8017e5e:	4a08      	ldr	r2, [pc, #32]	; (8017e80 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x2c>)
 8017e60:	4808      	ldr	r0, [pc, #32]	; (8017e84 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x30>)
 8017e62:	21d3      	movs	r1, #211	; 0xd3
 8017e64:	f00a fcc4 	bl	80227f0 <__assert_func>
 8017e68:	8a83      	ldrh	r3, [r0, #20]
 8017e6a:	220a      	movs	r2, #10
 8017e6c:	4419      	add	r1, r3
 8017e6e:	fbb1 f3f2 	udiv	r3, r1, r2
 8017e72:	fb02 1113 	mls	r1, r2, r3, r1
 8017e76:	f830 0011 	ldrh.w	r0, [r0, r1, lsl #1]
 8017e7a:	bd08      	pop	{r3, pc}
 8017e7c:	08026ab5 	.word	0x08026ab5
 8017e80:	08026c34 	.word	0x08026c34
 8017e84:	08026ac3 	.word	0x08026ac3

08017e88 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 8017e88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017e8c:	4604      	mov	r4, r0
 8017e8e:	4688      	mov	r8, r1
 8017e90:	4615      	mov	r5, r2
 8017e92:	b94a      	cbnz	r2, 8017ea8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20>
 8017e94:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
 8017e98:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
 8017e9c:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 8017ea0:	4691      	mov	r9, r2
 8017ea2:	4648      	mov	r0, r9
 8017ea4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017ea8:	f100 0640 	add.w	r6, r0, #64	; 0x40
 8017eac:	8892      	ldrh	r2, [r2, #4]
 8017eae:	462b      	mov	r3, r5
 8017eb0:	f105 0c08 	add.w	ip, r5, #8
 8017eb4:	46b3      	mov	fp, r6
 8017eb6:	6818      	ldr	r0, [r3, #0]
 8017eb8:	6859      	ldr	r1, [r3, #4]
 8017eba:	4637      	mov	r7, r6
 8017ebc:	c703      	stmia	r7!, {r0, r1}
 8017ebe:	3308      	adds	r3, #8
 8017ec0:	4563      	cmp	r3, ip
 8017ec2:	463e      	mov	r6, r7
 8017ec4:	d1f7      	bne.n	8017eb6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x2e>
 8017ec6:	6818      	ldr	r0, [r3, #0]
 8017ec8:	6038      	str	r0, [r7, #0]
 8017eca:	889b      	ldrh	r3, [r3, #4]
 8017ecc:	80bb      	strh	r3, [r7, #4]
 8017ece:	f894 704d 	ldrb.w	r7, [r4, #77]	; 0x4d
 8017ed2:	f46f 6363 	mvn.w	r3, #3632	; 0xe30
 8017ed6:	ea4f 1a07 	mov.w	sl, r7, lsl #4
 8017eda:	f40a 7180 	and.w	r1, sl, #256	; 0x100
 8017ede:	18d3      	adds	r3, r2, r3
 8017ee0:	f894 a047 	ldrb.w	sl, [r4, #71]	; 0x47
 8017ee4:	b298      	uxth	r0, r3
 8017ee6:	ea4a 0a01 	orr.w	sl, sl, r1
 8017eea:	281d      	cmp	r0, #29
 8017eec:	fa1f f68a 	uxth.w	r6, sl
 8017ef0:	46d9      	mov	r9, fp
 8017ef2:	d842      	bhi.n	8017f7a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf2>
 8017ef4:	2301      	movs	r3, #1
 8017ef6:	4950      	ldr	r1, [pc, #320]	; (8018038 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1b0>)
 8017ef8:	4083      	lsls	r3, r0
 8017efa:	420b      	tst	r3, r1
 8017efc:	ea4f 0aea 	mov.w	sl, sl, asr #3
 8017f00:	d114      	bne.n	8017f2c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 8017f02:	f413 7f60 	tst.w	r3, #896	; 0x380
 8017f06:	d03c      	beq.n	8017f82 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xfa>
 8017f08:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 8017f0c:	fa1f fa8a 	uxth.w	sl, sl
 8017f10:	eba1 010a 	sub.w	r1, r1, sl
 8017f14:	4658      	mov	r0, fp
 8017f16:	b209      	sxth	r1, r1
 8017f18:	f7ff fefc 	bl	8017d14 <_ZN8touchgfx9GlyphNode6setTopEs>
 8017f1c:	f8b4 0050 	ldrh.w	r0, [r4, #80]	; 0x50
 8017f20:	1b86      	subs	r6, r0, r6
 8017f22:	eba6 0a0a 	sub.w	sl, r6, sl
 8017f26:	f8a4 a050 	strh.w	sl, [r4, #80]	; 0x50
 8017f2a:	e7ba      	b.n	8017ea2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 8017f2c:	2100      	movs	r1, #0
 8017f2e:	f104 001a 	add.w	r0, r4, #26
 8017f32:	f7ff ff8f 	bl	8017e54 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 8017f36:	f640 6333 	movw	r3, #3635	; 0xe33
 8017f3a:	4298      	cmp	r0, r3
 8017f3c:	4601      	mov	r1, r0
 8017f3e:	d10a      	bne.n	8017f56 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xce>
 8017f40:	f8d8 3000 	ldr.w	r3, [r8]
 8017f44:	4640      	mov	r0, r8
 8017f46:	68db      	ldr	r3, [r3, #12]
 8017f48:	4798      	blx	r3
 8017f4a:	7b41      	ldrb	r1, [r0, #13]
 8017f4c:	7a00      	ldrb	r0, [r0, #8]
 8017f4e:	f7ff fed3 	bl	8017cf8 <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 8017f52:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
 8017f56:	f8b4 104e 	ldrh.w	r1, [r4, #78]	; 0x4e
 8017f5a:	4431      	add	r1, r6
 8017f5c:	4451      	add	r1, sl
 8017f5e:	b209      	sxth	r1, r1
 8017f60:	f8a4 104e 	strh.w	r1, [r4, #78]	; 0x4e
 8017f64:	4658      	mov	r0, fp
 8017f66:	f7ff fed5 	bl	8017d14 <_ZN8touchgfx9GlyphNode6setTopEs>
 8017f6a:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 8017f6e:	f894 2052 	ldrb.w	r2, [r4, #82]	; 0x52
 8017f72:	1a9b      	subs	r3, r3, r2
 8017f74:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
 8017f78:	e793      	b.n	8017ea2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 8017f7a:	f640 631b 	movw	r3, #3611	; 0xe1b
 8017f7e:	429a      	cmp	r2, r3
 8017f80:	d005      	beq.n	8017f8e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x106>
 8017f82:	f022 0302 	bic.w	r3, r2, #2
 8017f86:	f640 611d 	movw	r1, #3613	; 0xe1d
 8017f8a:	428b      	cmp	r3, r1
 8017f8c:	d119      	bne.n	8017fc2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x13a>
 8017f8e:	1e53      	subs	r3, r2, #1
 8017f90:	b29b      	uxth	r3, r3
 8017f92:	4642      	mov	r2, r8
 8017f94:	4629      	mov	r1, r5
 8017f96:	4620      	mov	r0, r4
 8017f98:	f7ff ff18 	bl	8017dcc <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8017f9c:	7b41      	ldrb	r1, [r0, #13]
 8017f9e:	7a00      	ldrb	r0, [r0, #8]
 8017fa0:	f7ff feaa 	bl	8017cf8 <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 8017fa4:	f994 304d 	ldrsb.w	r3, [r4, #77]	; 0x4d
 8017fa8:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
 8017fac:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8017fb0:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8017fb4:	4313      	orrs	r3, r2
 8017fb6:	115a      	asrs	r2, r3, #5
 8017fb8:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 8017fbc:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 8017fc0:	e02d      	b.n	801801e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x196>
 8017fc2:	4639      	mov	r1, r7
 8017fc4:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 8017fc8:	f7ff fe96 	bl	8017cf8 <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 8017fcc:	f640 6109 	movw	r1, #3593	; 0xe09
 8017fd0:	f022 0310 	bic.w	r3, r2, #16
 8017fd4:	428b      	cmp	r3, r1
 8017fd6:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
 8017fda:	d003      	beq.n	8017fe4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x15c>
 8017fdc:	f640 6313 	movw	r3, #3603	; 0xe13
 8017fe0:	429a      	cmp	r2, r3
 8017fe2:	d126      	bne.n	8018032 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1aa>
 8017fe4:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8017fe8:	b27f      	sxtb	r7, r7
 8017fea:	f407 7780 	and.w	r7, r7, #256	; 0x100
 8017fee:	431f      	orrs	r7, r3
 8017ff0:	f640 6313 	movw	r3, #3603	; 0xe13
 8017ff4:	429a      	cmp	r2, r3
 8017ff6:	bf1a      	itte	ne
 8017ff8:	f102 33ff 	addne.w	r3, r2, #4294967295
 8017ffc:	b29b      	uxthne	r3, r3
 8017ffe:	f640 630c 	movweq	r3, #3596	; 0xe0c
 8018002:	4642      	mov	r2, r8
 8018004:	4629      	mov	r1, r5
 8018006:	4620      	mov	r0, r4
 8018008:	f7ff fee0 	bl	8017dcc <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801800c:	f990 300d 	ldrsb.w	r3, [r0, #13]
 8018010:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8018014:	7a83      	ldrb	r3, [r0, #10]
 8018016:	4313      	orrs	r3, r2
 8018018:	1aff      	subs	r7, r7, r3
 801801a:	f8a4 7052 	strh.w	r7, [r4, #82]	; 0x52
 801801e:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 8018022:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 8018026:	f7ff fe67 	bl	8017cf8 <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 801802a:	1b80      	subs	r0, r0, r6
 801802c:	f8a4 0050 	strh.w	r0, [r4, #80]	; 0x50
 8018030:	e737      	b.n	8017ea2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 8018032:	2300      	movs	r3, #0
 8018034:	e7c2      	b.n	8017fbc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x134>
 8018036:	bf00      	nop
 8018038:	3fc00079 	.word	0x3fc00079

0801803c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801803c:	3a01      	subs	r2, #1
 801803e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018042:	b292      	uxth	r2, r2
 8018044:	460c      	mov	r4, r1
 8018046:	f64f 76ff 	movw	r6, #65535	; 0xffff
 801804a:	42b2      	cmp	r2, r6
 801804c:	d018      	beq.n	8018080 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x44>
 801804e:	8b01      	ldrh	r1, [r0, #24]
 8018050:	f834 5b02 	ldrh.w	r5, [r4], #2
 8018054:	4291      	cmp	r1, r2
 8018056:	d805      	bhi.n	8018064 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x28>
 8018058:	4b14      	ldr	r3, [pc, #80]	; (80180ac <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x70>)
 801805a:	4a15      	ldr	r2, [pc, #84]	; (80180b0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x74>)
 801805c:	4815      	ldr	r0, [pc, #84]	; (80180b4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x78>)
 801805e:	21d3      	movs	r1, #211	; 0xd3
 8018060:	f00a fbc6 	bl	80227f0 <__assert_func>
 8018064:	8ac1      	ldrh	r1, [r0, #22]
 8018066:	4411      	add	r1, r2
 8018068:	f001 0101 	and.w	r1, r1, #1
 801806c:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8018070:	3a01      	subs	r2, #1
 8018072:	8a49      	ldrh	r1, [r1, #18]
 8018074:	428d      	cmp	r5, r1
 8018076:	b292      	uxth	r2, r2
 8018078:	d0e7      	beq.n	801804a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0xe>
 801807a:	2000      	movs	r0, #0
 801807c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018080:	f8bd 7018 	ldrh.w	r7, [sp, #24]
 8018084:	2600      	movs	r6, #0
 8018086:	441f      	add	r7, r3
 8018088:	f100 051a 	add.w	r5, r0, #26
 801808c:	b2b1      	uxth	r1, r6
 801808e:	42b9      	cmp	r1, r7
 8018090:	da09      	bge.n	80180a6 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x6a>
 8018092:	4628      	mov	r0, r5
 8018094:	f7ff fede 	bl	8017e54 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 8018098:	f834 8016 	ldrh.w	r8, [r4, r6, lsl #1]
 801809c:	4540      	cmp	r0, r8
 801809e:	f106 0601 	add.w	r6, r6, #1
 80180a2:	d0f3      	beq.n	801808c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x50>
 80180a4:	e7e9      	b.n	801807a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x3e>
 80180a6:	2001      	movs	r0, #1
 80180a8:	e7e8      	b.n	801807c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x40>
 80180aa:	bf00      	nop
 80180ac:	08026ab5 	.word	0x08026ab5
 80180b0:	08027044 	.word	0x08027044
 80180b4:	08026ac3 	.word	0x08026ac3

080180b8 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt>:
 80180b8:	b538      	push	{r3, r4, r5, lr}
 80180ba:	8ac3      	ldrh	r3, [r0, #22]
 80180bc:	428b      	cmp	r3, r1
 80180be:	d205      	bcs.n	80180cc <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x14>
 80180c0:	4b08      	ldr	r3, [pc, #32]	; (80180e4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x2c>)
 80180c2:	4a09      	ldr	r2, [pc, #36]	; (80180e8 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x30>)
 80180c4:	4809      	ldr	r0, [pc, #36]	; (80180ec <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x34>)
 80180c6:	21d8      	movs	r1, #216	; 0xd8
 80180c8:	f00a fb92 	bl	80227f0 <__assert_func>
 80180cc:	8a82      	ldrh	r2, [r0, #20]
 80180ce:	250a      	movs	r5, #10
 80180d0:	440a      	add	r2, r1
 80180d2:	1a5b      	subs	r3, r3, r1
 80180d4:	fbb2 f4f5 	udiv	r4, r2, r5
 80180d8:	fb05 2214 	mls	r2, r5, r4, r2
 80180dc:	8282      	strh	r2, [r0, #20]
 80180de:	82c3      	strh	r3, [r0, #22]
 80180e0:	bd38      	pop	{r3, r4, r5, pc}
 80180e2:	bf00      	nop
 80180e4:	08026aa9 	.word	0x08026aa9
 80180e8:	08026e60 	.word	0x08026e60
 80180ec:	08026ac3 	.word	0x08026ac3

080180f0 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt>:
 80180f0:	b538      	push	{r3, r4, r5, lr}
 80180f2:	8ac3      	ldrh	r3, [r0, #22]
 80180f4:	2b09      	cmp	r3, #9
 80180f6:	d905      	bls.n	8018104 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x14>
 80180f8:	4b08      	ldr	r3, [pc, #32]	; (801811c <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x2c>)
 80180fa:	4a09      	ldr	r2, [pc, #36]	; (8018120 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x30>)
 80180fc:	4809      	ldr	r0, [pc, #36]	; (8018124 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x34>)
 80180fe:	21f7      	movs	r1, #247	; 0xf7
 8018100:	f00a fb76 	bl	80227f0 <__assert_func>
 8018104:	8a82      	ldrh	r2, [r0, #20]
 8018106:	250a      	movs	r5, #10
 8018108:	441a      	add	r2, r3
 801810a:	fbb2 f4f5 	udiv	r4, r2, r5
 801810e:	fb05 2214 	mls	r2, r5, r4, r2
 8018112:	3301      	adds	r3, #1
 8018114:	f820 1012 	strh.w	r1, [r0, r2, lsl #1]
 8018118:	82c3      	strh	r3, [r0, #22]
 801811a:	bd38      	pop	{r3, r4, r5, pc}
 801811c:	08026a9d 	.word	0x08026a9d
 8018120:	08026db1 	.word	0x08026db1
 8018124:	08026ac3 	.word	0x08026ac3

08018128 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 8018128:	b538      	push	{r3, r4, r5, lr}
 801812a:	4604      	mov	r4, r0
 801812c:	f100 051a 	add.w	r5, r0, #26
 8018130:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8018132:	2b0a      	cmp	r3, #10
 8018134:	d01c      	beq.n	8018170 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x48>
 8018136:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 8018138:	b962      	cbnz	r2, 8018154 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x2c>
 801813a:	f104 051a 	add.w	r5, r4, #26
 801813e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8018140:	2b0a      	cmp	r3, #10
 8018142:	d015      	beq.n	8018170 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x48>
 8018144:	4620      	mov	r0, r4
 8018146:	f7ff fdf6 	bl	8017d36 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801814a:	4601      	mov	r1, r0
 801814c:	4628      	mov	r0, r5
 801814e:	f7ff ffcf 	bl	80180f0 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt>
 8018152:	e7f4      	b.n	801813e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x16>
 8018154:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8018156:	eb04 0143 	add.w	r1, r4, r3, lsl #1
 801815a:	3301      	adds	r3, #1
 801815c:	f003 0301 	and.w	r3, r3, #1
 8018160:	3a01      	subs	r2, #1
 8018162:	8e49      	ldrh	r1, [r1, #50]	; 0x32
 8018164:	86e3      	strh	r3, [r4, #54]	; 0x36
 8018166:	8722      	strh	r2, [r4, #56]	; 0x38
 8018168:	4628      	mov	r0, r5
 801816a:	f7ff ffc1 	bl	80180f0 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt>
 801816e:	e7df      	b.n	8018130 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x8>
 8018170:	bd38      	pop	{r3, r4, r5, pc}
	...

08018174 <_ZN8touchgfx12TextProvider18initializeInternalEv>:
 8018174:	2300      	movs	r3, #0
 8018176:	b510      	push	{r4, lr}
 8018178:	6043      	str	r3, [r0, #4]
 801817a:	60c3      	str	r3, [r0, #12]
 801817c:	7403      	strb	r3, [r0, #16]
 801817e:	8603      	strh	r3, [r0, #48]	; 0x30
 8018180:	8303      	strh	r3, [r0, #24]
 8018182:	8703      	strh	r3, [r0, #56]	; 0x38
 8018184:	4604      	mov	r4, r0
 8018186:	f7ff ffcf 	bl	8018128 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801818a:	4a0a      	ldr	r2, [pc, #40]	; (80181b4 <_ZN8touchgfx12TextProvider18initializeInternalEv+0x40>)
 801818c:	6813      	ldr	r3, [r2, #0]
 801818e:	4611      	mov	r1, r2
 8018190:	b913      	cbnz	r3, 8018198 <_ZN8touchgfx12TextProvider18initializeInternalEv+0x24>
 8018192:	6852      	ldr	r2, [r2, #4]
 8018194:	07d0      	lsls	r0, r2, #31
 8018196:	d50b      	bpl.n	80181b0 <_ZN8touchgfx12TextProvider18initializeInternalEv+0x3c>
 8018198:	6849      	ldr	r1, [r1, #4]
 801819a:	104a      	asrs	r2, r1, #1
 801819c:	07c9      	lsls	r1, r1, #31
 801819e:	eb04 0002 	add.w	r0, r4, r2
 80181a2:	bf48      	it	mi
 80181a4:	58a2      	ldrmi	r2, [r4, r2]
 80181a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80181aa:	bf48      	it	mi
 80181ac:	58d3      	ldrmi	r3, [r2, r3]
 80181ae:	4718      	bx	r3
 80181b0:	bd10      	pop	{r4, pc}
 80181b2:	bf00      	nop
 80181b4:	20005020 	.word	0x20005020

080181b8 <_ZN8touchgfx12TextProviderC1Ev>:
 80181b8:	b510      	push	{r4, lr}
 80181ba:	2300      	movs	r3, #0
 80181bc:	2201      	movs	r2, #1
 80181be:	4604      	mov	r4, r0
 80181c0:	e9c0 3300 	strd	r3, r3, [r0]
 80181c4:	60c3      	str	r3, [r0, #12]
 80181c6:	7403      	strb	r3, [r0, #16]
 80181c8:	82c3      	strh	r3, [r0, #22]
 80181ca:	8303      	strh	r3, [r0, #24]
 80181cc:	85c3      	strh	r3, [r0, #46]	; 0x2e
 80181ce:	8603      	strh	r3, [r0, #48]	; 0x30
 80181d0:	86c3      	strh	r3, [r0, #54]	; 0x36
 80181d2:	8703      	strh	r3, [r0, #56]	; 0x38
 80181d4:	63c3      	str	r3, [r0, #60]	; 0x3c
 80181d6:	f8a0 304e 	strh.w	r3, [r0, #78]	; 0x4e
 80181da:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
 80181de:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
 80181e2:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
 80181e6:	f880 3055 	strb.w	r3, [r0, #85]	; 0x55
 80181ea:	f7ff ffc3 	bl	8018174 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 80181ee:	4620      	mov	r0, r4
 80181f0:	bd10      	pop	{r4, pc}

080181f2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>:
 80181f2:	b410      	push	{r4}
 80181f4:	6082      	str	r2, [r0, #8]
 80181f6:	6001      	str	r1, [r0, #0]
 80181f8:	63c3      	str	r3, [r0, #60]	; 0x3c
 80181fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80181fe:	f7ff bfb9 	b.w	8018174 <_ZN8touchgfx12TextProvider18initializeInternalEv>
	...

08018204 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt>:
 8018204:	b508      	push	{r3, lr}
 8018206:	88c2      	ldrh	r2, [r0, #6]
 8018208:	440a      	add	r2, r1
 801820a:	2a02      	cmp	r2, #2
 801820c:	dd05      	ble.n	801821a <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x16>
 801820e:	4b06      	ldr	r3, [pc, #24]	; (8018228 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x24>)
 8018210:	4a06      	ldr	r2, [pc, #24]	; (801822c <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x28>)
 8018212:	4807      	ldr	r0, [pc, #28]	; (8018230 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x2c>)
 8018214:	21ec      	movs	r1, #236	; 0xec
 8018216:	f00a faeb 	bl	80227f0 <__assert_func>
 801821a:	8883      	ldrh	r3, [r0, #4]
 801821c:	80c2      	strh	r2, [r0, #6]
 801821e:	1a59      	subs	r1, r3, r1
 8018220:	f001 0101 	and.w	r1, r1, #1
 8018224:	8081      	strh	r1, [r0, #4]
 8018226:	bd08      	pop	{r3, pc}
 8018228:	08026aef 	.word	0x08026aef
 801822c:	08026fbd 	.word	0x08026fbd
 8018230:	08026ac3 	.word	0x08026ac3

08018234 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt>:
 8018234:	b508      	push	{r3, lr}
 8018236:	88c3      	ldrh	r3, [r0, #6]
 8018238:	428b      	cmp	r3, r1
 801823a:	d805      	bhi.n	8018248 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x14>
 801823c:	4b06      	ldr	r3, [pc, #24]	; (8018258 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x24>)
 801823e:	4a07      	ldr	r2, [pc, #28]	; (801825c <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x28>)
 8018240:	4807      	ldr	r0, [pc, #28]	; (8018260 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x2c>)
 8018242:	21fd      	movs	r1, #253	; 0xfd
 8018244:	f00a fad4 	bl	80227f0 <__assert_func>
 8018248:	8883      	ldrh	r3, [r0, #4]
 801824a:	4419      	add	r1, r3
 801824c:	f001 0101 	and.w	r1, r1, #1
 8018250:	f820 2011 	strh.w	r2, [r0, r1, lsl #1]
 8018254:	bd08      	pop	{r3, pc}
 8018256:	bf00      	nop
 8018258:	08026ab5 	.word	0x08026ab5
 801825c:	08027115 	.word	0x08027115
 8018260:	08026ac3 	.word	0x08026ac3

08018264 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 8018264:	b570      	push	{r4, r5, r6, lr}
 8018266:	8e02      	ldrh	r2, [r0, #48]	; 0x30
 8018268:	4604      	mov	r4, r0
 801826a:	b92a      	cbnz	r2, 8018278 <_ZN8touchgfx12TextProvider11getNextCharEv+0x14>
 801826c:	4b12      	ldr	r3, [pc, #72]	; (80182b8 <_ZN8touchgfx12TextProvider11getNextCharEv+0x54>)
 801826e:	4a13      	ldr	r2, [pc, #76]	; (80182bc <_ZN8touchgfx12TextProvider11getNextCharEv+0x58>)
 8018270:	4813      	ldr	r0, [pc, #76]	; (80182c0 <_ZN8touchgfx12TextProvider11getNextCharEv+0x5c>)
 8018272:	21de      	movs	r1, #222	; 0xde
 8018274:	f00a fabc 	bl	80227f0 <__assert_func>
 8018278:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 801827a:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 801827e:	260a      	movs	r6, #10
 8018280:	3301      	adds	r3, #1
 8018282:	8b4d      	ldrh	r5, [r1, #26]
 8018284:	fbb3 f1f6 	udiv	r1, r3, r6
 8018288:	3a01      	subs	r2, #1
 801828a:	fb06 3311 	mls	r3, r6, r1, r3
 801828e:	8602      	strh	r2, [r0, #48]	; 0x30
 8018290:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8018292:	f7ff ff49 	bl	8018128 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8018296:	8b23      	ldrh	r3, [r4, #24]
 8018298:	2b02      	cmp	r3, #2
 801829a:	bf04      	itt	eq
 801829c:	2301      	moveq	r3, #1
 801829e:	8323      	strheq	r3, [r4, #24]
 80182a0:	3412      	adds	r4, #18
 80182a2:	4620      	mov	r0, r4
 80182a4:	2101      	movs	r1, #1
 80182a6:	f7ff ffad 	bl	8018204 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt>
 80182aa:	4620      	mov	r0, r4
 80182ac:	462a      	mov	r2, r5
 80182ae:	2100      	movs	r1, #0
 80182b0:	f7ff ffc0 	bl	8018234 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt>
 80182b4:	4628      	mov	r0, r5
 80182b6:	bd70      	pop	{r4, r5, r6, pc}
 80182b8:	08026a94 	.word	0x08026a94
 80182bc:	08026d06 	.word	0x08026d06
 80182c0:	08026ac3 	.word	0x08026ac3

080182c4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 80182c4:	428a      	cmp	r2, r1
 80182c6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80182ca:	4604      	mov	r4, r0
 80182cc:	460e      	mov	r6, r1
 80182ce:	4615      	mov	r5, r2
 80182d0:	469a      	mov	sl, r3
 80182d2:	d92b      	bls.n	801832c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x68>
 80182d4:	1a57      	subs	r7, r2, r1
 80182d6:	b2bf      	uxth	r7, r7
 80182d8:	f04f 0800 	mov.w	r8, #0
 80182dc:	f100 0932 	add.w	r9, r0, #50	; 0x32
 80182e0:	f04f 0b0a 	mov.w	fp, #10
 80182e4:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 80182e6:	b92b      	cbnz	r3, 80182f4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x30>
 80182e8:	4b24      	ldr	r3, [pc, #144]	; (801837c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xb8>)
 80182ea:	4a25      	ldr	r2, [pc, #148]	; (8018380 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xbc>)
 80182ec:	21e6      	movs	r1, #230	; 0xe6
 80182ee:	4825      	ldr	r0, [pc, #148]	; (8018384 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xc0>)
 80182f0:	f00a fa7e 	bl	80227f0 <__assert_func>
 80182f4:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 80182f6:	3b01      	subs	r3, #1
 80182f8:	b29b      	uxth	r3, r3
 80182fa:	441a      	add	r2, r3
 80182fc:	8623      	strh	r3, [r4, #48]	; 0x30
 80182fe:	fbb2 f3fb 	udiv	r3, r2, fp
 8018302:	fb0b 2313 	mls	r3, fp, r3, r2
 8018306:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801830a:	2101      	movs	r1, #1
 801830c:	8b5a      	ldrh	r2, [r3, #26]
 801830e:	9201      	str	r2, [sp, #4]
 8018310:	4648      	mov	r0, r9
 8018312:	f7ff ff77 	bl	8018204 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt>
 8018316:	f108 0801 	add.w	r8, r8, #1
 801831a:	9a01      	ldr	r2, [sp, #4]
 801831c:	2100      	movs	r1, #0
 801831e:	4648      	mov	r0, r9
 8018320:	f7ff ff88 	bl	8018234 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt>
 8018324:	fa1f f388 	uxth.w	r3, r8
 8018328:	429f      	cmp	r7, r3
 801832a:	d8db      	bhi.n	80182e4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x20>
 801832c:	f104 071a 	add.w	r7, r4, #26
 8018330:	4631      	mov	r1, r6
 8018332:	4638      	mov	r0, r7
 8018334:	f7ff fec0 	bl	80180b8 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt>
 8018338:	260a      	movs	r6, #10
 801833a:	b1c5      	cbz	r5, 801836e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 801833c:	3d01      	subs	r5, #1
 801833e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8018340:	b2ad      	uxth	r5, r5
 8018342:	2b09      	cmp	r3, #9
 8018344:	f83a 2015 	ldrh.w	r2, [sl, r5, lsl #1]
 8018348:	d903      	bls.n	8018352 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x8e>
 801834a:	4b0f      	ldr	r3, [pc, #60]	; (8018388 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xc4>)
 801834c:	4a0f      	ldr	r2, [pc, #60]	; (801838c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xc8>)
 801834e:	21ec      	movs	r1, #236	; 0xec
 8018350:	e7cd      	b.n	80182ee <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x2a>
 8018352:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 8018354:	3109      	adds	r1, #9
 8018356:	3301      	adds	r3, #1
 8018358:	fbb1 f0f6 	udiv	r0, r1, r6
 801835c:	fb06 1110 	mls	r1, r6, r0, r1
 8018360:	85e1      	strh	r1, [r4, #46]	; 0x2e
 8018362:	8623      	strh	r3, [r4, #48]	; 0x30
 8018364:	2100      	movs	r1, #0
 8018366:	4638      	mov	r0, r7
 8018368:	f7ff fd5a 	bl	8017e20 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 801836c:	e7e5      	b.n	801833a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x76>
 801836e:	4620      	mov	r0, r4
 8018370:	b003      	add	sp, #12
 8018372:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018376:	f7ff bed7 	b.w	8018128 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801837a:	bf00      	nop
 801837c:	08026a94 	.word	0x08026a94
 8018380:	08026b8a 	.word	0x08026b8a
 8018384:	08026ac3 	.word	0x08026ac3
 8018388:	08026aef 	.word	0x08026aef
 801838c:	08026b02 	.word	0x08026b02

08018390 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 8018390:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018394:	4605      	mov	r5, r0
 8018396:	4616      	mov	r6, r2
 8018398:	1c8c      	adds	r4, r1, #2
 801839a:	8809      	ldrh	r1, [r1, #0]
 801839c:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 80183a0:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 80183a4:	42b3      	cmp	r3, r6
 80183a6:	d124      	bne.n	80183f2 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 80183a8:	f3c1 2903 	ubfx	r9, r1, #8, #4
 80183ac:	f3c1 1803 	ubfx	r8, r1, #4, #4
 80183b0:	f001 070f 	and.w	r7, r1, #15
 80183b4:	f8cd 8000 	str.w	r8, [sp]
 80183b8:	464b      	mov	r3, r9
 80183ba:	4652      	mov	r2, sl
 80183bc:	4621      	mov	r1, r4
 80183be:	4628      	mov	r0, r5
 80183c0:	f7ff fe3c 	bl	801803c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 80183c4:	4683      	mov	fp, r0
 80183c6:	b168      	cbz	r0, 80183e4 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 80183c8:	eb0a 0109 	add.w	r1, sl, r9
 80183cc:	4441      	add	r1, r8
 80183ce:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 80183d2:	463a      	mov	r2, r7
 80183d4:	4649      	mov	r1, r9
 80183d6:	4628      	mov	r0, r5
 80183d8:	f7ff ff74 	bl	80182c4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 80183dc:	4658      	mov	r0, fp
 80183de:	b003      	add	sp, #12
 80183e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80183e4:	eb07 010a 	add.w	r1, r7, sl
 80183e8:	4449      	add	r1, r9
 80183ea:	4441      	add	r1, r8
 80183ec:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 80183f0:	e7d2      	b.n	8018398 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 80183f2:	f04f 0b00 	mov.w	fp, #0
 80183f6:	e7f1      	b.n	80183dc <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

080183f8 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 80183f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80183fc:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 80183fe:	886f      	ldrh	r7, [r5, #2]
 8018400:	4604      	mov	r4, r0
 8018402:	087f      	lsrs	r7, r7, #1
 8018404:	260b      	movs	r6, #11
 8018406:	f100 091a 	add.w	r9, r0, #26
 801840a:	3e01      	subs	r6, #1
 801840c:	d013      	beq.n	8018436 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3e>
 801840e:	2100      	movs	r1, #0
 8018410:	4648      	mov	r0, r9
 8018412:	f7ff fd1f 	bl	8017e54 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 8018416:	462a      	mov	r2, r5
 8018418:	4680      	mov	r8, r0
 801841a:	4603      	mov	r3, r0
 801841c:	4639      	mov	r1, r7
 801841e:	4620      	mov	r0, r4
 8018420:	f7ff fcdf 	bl	8017de2 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 8018424:	b138      	cbz	r0, 8018436 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3e>
 8018426:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801842a:	4642      	mov	r2, r8
 801842c:	4620      	mov	r0, r4
 801842e:	f7ff ffaf 	bl	8018390 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 8018432:	2800      	cmp	r0, #0
 8018434:	d1e9      	bne.n	801840a <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x12>
 8018436:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

0801843c <_ZN8touchgfx12TextProvider15getNextLigatureEh>:
 801843c:	b570      	push	{r4, r5, r6, lr}
 801843e:	4b1e      	ldr	r3, [pc, #120]	; (80184b8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>)
 8018440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018444:	4604      	mov	r4, r0
 8018446:	f003 0501 	and.w	r5, r3, #1
 801844a:	b902      	cbnz	r2, 801844e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12>
 801844c:	b165      	cbz	r5, 8018468 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2c>
 801844e:	105b      	asrs	r3, r3, #1
 8018450:	f104 061a 	add.w	r6, r4, #26
 8018454:	18e0      	adds	r0, r4, r3
 8018456:	b10d      	cbz	r5, 801845c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x20>
 8018458:	58e3      	ldr	r3, [r4, r3]
 801845a:	589a      	ldr	r2, [r3, r2]
 801845c:	4790      	blx	r2
 801845e:	2100      	movs	r1, #0
 8018460:	4602      	mov	r2, r0
 8018462:	4630      	mov	r0, r6
 8018464:	f7ff fcdc 	bl	8017e20 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 8018468:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801846a:	b303      	cbz	r3, 80184ae <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x72>
 801846c:	f104 051a 	add.w	r5, r4, #26
 8018470:	2100      	movs	r1, #0
 8018472:	4628      	mov	r0, r5
 8018474:	f7ff fcee 	bl	8017e54 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 8018478:	b1c8      	cbz	r0, 80184ae <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x72>
 801847a:	4620      	mov	r0, r4
 801847c:	f7ff ffbc 	bl	80183f8 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
 8018480:	2101      	movs	r1, #1
 8018482:	4628      	mov	r0, r5
 8018484:	f7ff fce6 	bl	8017e54 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 8018488:	f640 133f 	movw	r3, #2367	; 0x93f
 801848c:	4298      	cmp	r0, r3
 801848e:	4606      	mov	r6, r0
 8018490:	d10d      	bne.n	80184ae <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x72>
 8018492:	2100      	movs	r1, #0
 8018494:	4628      	mov	r0, r5
 8018496:	f7ff fcdd 	bl	8017e54 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801849a:	2101      	movs	r1, #1
 801849c:	4602      	mov	r2, r0
 801849e:	4628      	mov	r0, r5
 80184a0:	f7ff fcbe 	bl	8017e20 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 80184a4:	4632      	mov	r2, r6
 80184a6:	2100      	movs	r1, #0
 80184a8:	4628      	mov	r0, r5
 80184aa:	f7ff fcb9 	bl	8017e20 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 80184ae:	4620      	mov	r0, r4
 80184b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80184b4:	f7ff bed6 	b.w	8018264 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80184b8:	20005028 	.word	0x20005028

080184bc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 80184bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80184be:	4617      	mov	r7, r2
 80184c0:	461e      	mov	r6, r3
 80184c2:	4605      	mov	r5, r0
 80184c4:	f7ff ffba 	bl	801843c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80184c8:	683b      	ldr	r3, [r7, #0]
 80184ca:	4604      	mov	r4, r0
 80184cc:	68db      	ldr	r3, [r3, #12]
 80184ce:	4601      	mov	r1, r0
 80184d0:	4638      	mov	r0, r7
 80184d2:	4798      	blx	r3
 80184d4:	f5a4 6360 	sub.w	r3, r4, #3584	; 0xe00
 80184d8:	b29b      	uxth	r3, r3
 80184da:	2b7f      	cmp	r3, #127	; 0x7f
 80184dc:	4602      	mov	r2, r0
 80184de:	6030      	str	r0, [r6, #0]
 80184e0:	d813      	bhi.n	801850a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x4e>
 80184e2:	4639      	mov	r1, r7
 80184e4:	4628      	mov	r0, r5
 80184e6:	f7ff fccf 	bl	8017e88 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 80184ea:	6030      	str	r0, [r6, #0]
 80184ec:	6833      	ldr	r3, [r6, #0]
 80184ee:	b143      	cbz	r3, 8018502 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 80184f0:	f993 200d 	ldrsb.w	r2, [r3, #13]
 80184f4:	7a9b      	ldrb	r3, [r3, #10]
 80184f6:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80184fa:	4313      	orrs	r3, r2
 80184fc:	bf0c      	ite	eq
 80184fe:	2301      	moveq	r3, #1
 8018500:	2300      	movne	r3, #0
 8018502:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 8018506:	4620      	mov	r0, r4
 8018508:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801850a:	f895 3055 	ldrb.w	r3, [r5, #85]	; 0x55
 801850e:	2b00      	cmp	r3, #0
 8018510:	d0ec      	beq.n	80184ec <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x30>
 8018512:	f640 1302 	movw	r3, #2306	; 0x902
 8018516:	429c      	cmp	r4, r3
 8018518:	d1e8      	bne.n	80184ec <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x30>
 801851a:	4601      	mov	r1, r0
 801851c:	4628      	mov	r0, r5
 801851e:	f7ff fc32 	bl	8017d86 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8018522:	e7e2      	b.n	80184ea <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x2e>

08018524 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 8018524:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018528:	4617      	mov	r7, r2
 801852a:	461e      	mov	r6, r3
 801852c:	4605      	mov	r5, r0
 801852e:	f7ff ff85 	bl	801843c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8018532:	683b      	ldr	r3, [r7, #0]
 8018534:	4604      	mov	r4, r0
 8018536:	f8d3 8008 	ldr.w	r8, [r3, #8]
 801853a:	4601      	mov	r1, r0
 801853c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8018540:	4638      	mov	r0, r7
 8018542:	47c0      	blx	r8
 8018544:	f5a4 6360 	sub.w	r3, r4, #3584	; 0xe00
 8018548:	b29b      	uxth	r3, r3
 801854a:	2b7f      	cmp	r3, #127	; 0x7f
 801854c:	4602      	mov	r2, r0
 801854e:	6030      	str	r0, [r6, #0]
 8018550:	d814      	bhi.n	801857c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x58>
 8018552:	4639      	mov	r1, r7
 8018554:	4628      	mov	r0, r5
 8018556:	f7ff fc97 	bl	8017e88 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801855a:	6030      	str	r0, [r6, #0]
 801855c:	6833      	ldr	r3, [r6, #0]
 801855e:	b143      	cbz	r3, 8018572 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 8018560:	f993 200d 	ldrsb.w	r2, [r3, #13]
 8018564:	7a9b      	ldrb	r3, [r3, #10]
 8018566:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801856a:	4313      	orrs	r3, r2
 801856c:	bf0c      	ite	eq
 801856e:	2301      	moveq	r3, #1
 8018570:	2300      	movne	r3, #0
 8018572:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 8018576:	4620      	mov	r0, r4
 8018578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801857c:	f895 3055 	ldrb.w	r3, [r5, #85]	; 0x55
 8018580:	2b00      	cmp	r3, #0
 8018582:	d0eb      	beq.n	801855c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x38>
 8018584:	f640 1302 	movw	r3, #2306	; 0x902
 8018588:	429c      	cmp	r4, r3
 801858a:	d1e7      	bne.n	801855c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x38>
 801858c:	4601      	mov	r1, r0
 801858e:	4628      	mov	r0, r5
 8018590:	f7ff fbf9 	bl	8017d86 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8018594:	e7e1      	b.n	801855a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x36>

08018596 <_ZN8touchgfx7Unicode6strlenEPKt>:
 8018596:	4602      	mov	r2, r0
 8018598:	b148      	cbz	r0, 80185ae <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 801859a:	2300      	movs	r3, #0
 801859c:	b298      	uxth	r0, r3
 801859e:	3301      	adds	r3, #1
 80185a0:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 80185a4:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 80185a8:	2900      	cmp	r1, #0
 80185aa:	d1f7      	bne.n	801859c <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 80185ac:	4770      	bx	lr
 80185ae:	4770      	bx	lr

080185b0 <_ZN8touchgfx7Unicode6strlenEPKc>:
 80185b0:	b140      	cbz	r0, 80185c4 <_ZN8touchgfx7Unicode6strlenEPKc+0x14>
 80185b2:	4602      	mov	r2, r0
 80185b4:	1a13      	subs	r3, r2, r0
 80185b6:	f812 1b01 	ldrb.w	r1, [r2], #1
 80185ba:	b29b      	uxth	r3, r3
 80185bc:	2900      	cmp	r1, #0
 80185be:	d1f9      	bne.n	80185b4 <_ZN8touchgfx7Unicode6strlenEPKc+0x4>
 80185c0:	4618      	mov	r0, r3
 80185c2:	4770      	bx	lr
 80185c4:	4603      	mov	r3, r0
 80185c6:	e7fb      	b.n	80185c0 <_ZN8touchgfx7Unicode6strlenEPKc+0x10>

080185c8 <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 80185c8:	b530      	push	{r4, r5, lr}
 80185ca:	4604      	mov	r4, r0
 80185cc:	b159      	cbz	r1, 80185e6 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 80185ce:	b148      	cbz	r0, 80185e4 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 80185d0:	2300      	movs	r3, #0
 80185d2:	b298      	uxth	r0, r3
 80185d4:	4282      	cmp	r2, r0
 80185d6:	d905      	bls.n	80185e4 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 80185d8:	5ccd      	ldrb	r5, [r1, r3]
 80185da:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 80185de:	3301      	adds	r3, #1
 80185e0:	2d00      	cmp	r5, #0
 80185e2:	d1f6      	bne.n	80185d2 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 80185e4:	bd30      	pop	{r4, r5, pc}
 80185e6:	4608      	mov	r0, r1
 80185e8:	e7fc      	b.n	80185e4 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

080185ea <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>:
 80185ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80185ec:	b08b      	sub	sp, #44	; 0x2c
 80185ee:	468c      	mov	ip, r1
 80185f0:	2100      	movs	r1, #0
 80185f2:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80185f6:	ae01      	add	r6, sp, #4
 80185f8:	211f      	movs	r1, #31
 80185fa:	fbb0 f7f3 	udiv	r7, r0, r3
 80185fe:	fb03 0517 	mls	r5, r3, r7, r0
 8018602:	b2ec      	uxtb	r4, r5
 8018604:	2d09      	cmp	r5, #9
 8018606:	bfd4      	ite	le
 8018608:	3430      	addle	r4, #48	; 0x30
 801860a:	3457      	addgt	r4, #87	; 0x57
 801860c:	b2e4      	uxtb	r4, r4
 801860e:	558c      	strb	r4, [r1, r6]
 8018610:	4638      	mov	r0, r7
 8018612:	1e4c      	subs	r4, r1, #1
 8018614:	b92f      	cbnz	r7, 8018622 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x38>
 8018616:	4431      	add	r1, r6
 8018618:	4660      	mov	r0, ip
 801861a:	f7ff ffd5 	bl	80185c8 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801861e:	b00b      	add	sp, #44	; 0x2c
 8018620:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018622:	4621      	mov	r1, r4
 8018624:	e7e9      	b.n	80185fa <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x10>

08018626 <_ZN8touchgfx7Unicode4itoaElPtti>:
 8018626:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018628:	4607      	mov	r7, r0
 801862a:	b08b      	sub	sp, #44	; 0x2c
 801862c:	4608      	mov	r0, r1
 801862e:	b341      	cbz	r1, 8018682 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 8018630:	1e99      	subs	r1, r3, #2
 8018632:	290e      	cmp	r1, #14
 8018634:	d825      	bhi.n	8018682 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 8018636:	2100      	movs	r1, #0
 8018638:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801863c:	463c      	mov	r4, r7
 801863e:	261f      	movs	r6, #31
 8018640:	f10d 0c04 	add.w	ip, sp, #4
 8018644:	fb94 fef3 	sdiv	lr, r4, r3
 8018648:	fb03 441e 	mls	r4, r3, lr, r4
 801864c:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 8018650:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 8018654:	b2ec      	uxtb	r4, r5
 8018656:	2d09      	cmp	r5, #9
 8018658:	bfd4      	ite	le
 801865a:	3430      	addle	r4, #48	; 0x30
 801865c:	3457      	addgt	r4, #87	; 0x57
 801865e:	b2e4      	uxtb	r4, r4
 8018660:	f80c 4006 	strb.w	r4, [ip, r6]
 8018664:	4674      	mov	r4, lr
 8018666:	1e71      	subs	r1, r6, #1
 8018668:	b96c      	cbnz	r4, 8018686 <_ZN8touchgfx7Unicode4itoaElPtti+0x60>
 801866a:	2f00      	cmp	r7, #0
 801866c:	da05      	bge.n	801867a <_ZN8touchgfx7Unicode4itoaElPtti+0x54>
 801866e:	ab0a      	add	r3, sp, #40	; 0x28
 8018670:	4419      	add	r1, r3
 8018672:	232d      	movs	r3, #45	; 0x2d
 8018674:	f801 3c24 	strb.w	r3, [r1, #-36]
 8018678:	1eb1      	subs	r1, r6, #2
 801867a:	3101      	adds	r1, #1
 801867c:	4461      	add	r1, ip
 801867e:	f7ff ffa3 	bl	80185c8 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 8018682:	b00b      	add	sp, #44	; 0x2c
 8018684:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018686:	460e      	mov	r6, r1
 8018688:	e7dc      	b.n	8018644 <_ZN8touchgfx7Unicode4itoaElPtti+0x1e>

0801868a <_ZN8touchgfx7Unicode4atoiEPKt>:
 801868a:	b510      	push	{r4, lr}
 801868c:	b158      	cbz	r0, 80186a6 <_ZN8touchgfx7Unicode4atoiEPKt+0x1c>
 801868e:	1e82      	subs	r2, r0, #2
 8018690:	210a      	movs	r1, #10
 8018692:	2000      	movs	r0, #0
 8018694:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 8018698:	3b30      	subs	r3, #48	; 0x30
 801869a:	b29c      	uxth	r4, r3
 801869c:	2c09      	cmp	r4, #9
 801869e:	d802      	bhi.n	80186a6 <_ZN8touchgfx7Unicode4atoiEPKt+0x1c>
 80186a0:	fb01 3000 	mla	r0, r1, r0, r3
 80186a4:	e7f6      	b.n	8018694 <_ZN8touchgfx7Unicode4atoiEPKt+0xa>
 80186a6:	bd10      	pop	{r4, pc}

080186a8 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt>:
 80186a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80186ac:	b085      	sub	sp, #20
 80186ae:	f8d0 8000 	ldr.w	r8, [r0]
 80186b2:	9203      	str	r2, [sp, #12]
 80186b4:	468a      	mov	sl, r1
 80186b6:	4681      	mov	r9, r0
 80186b8:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 80186bc:	9102      	str	r1, [sp, #8]
 80186be:	461c      	mov	r4, r3
 80186c0:	4640      	mov	r0, r8
 80186c2:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 80186c6:	9301      	str	r3, [sp, #4]
 80186c8:	f7ff ff65 	bl	8018596 <_ZN8touchgfx7Unicode6strlenEPKt>
 80186cc:	9a03      	ldr	r2, [sp, #12]
 80186ce:	f89d b038 	ldrb.w	fp, [sp, #56]	; 0x38
 80186d2:	8812      	ldrh	r2, [r2, #0]
 80186d4:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80186d6:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80186d8:	9f15      	ldr	r7, [sp, #84]	; 0x54
 80186da:	f1ba 0f00 	cmp.w	sl, #0
 80186de:	bf0c      	ite	eq
 80186e0:	4684      	moveq	ip, r0
 80186e2:	f100 0c01 	addne.w	ip, r0, #1
 80186e6:	2a69      	cmp	r2, #105	; 0x69
 80186e8:	fa1f fc8c 	uxth.w	ip, ip
 80186ec:	e9dd 3101 	ldrd	r3, r1, [sp, #4]
 80186f0:	d004      	beq.n	80186fc <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x54>
 80186f2:	d844      	bhi.n	801877e <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xd6>
 80186f4:	2a58      	cmp	r2, #88	; 0x58
 80186f6:	d001      	beq.n	80186fc <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x54>
 80186f8:	2a64      	cmp	r2, #100	; 0x64
 80186fa:	d14b      	bne.n	8018794 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xec>
 80186fc:	b1a4      	cbz	r4, 8018728 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x80>
 80186fe:	b956      	cbnz	r6, 8018716 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x6e>
 8018700:	2801      	cmp	r0, #1
 8018702:	d108      	bne.n	8018716 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x6e>
 8018704:	f8b8 2000 	ldrh.w	r2, [r8]
 8018708:	2a30      	cmp	r2, #48	; 0x30
 801870a:	bf02      	ittt	eq
 801870c:	f108 0202 	addeq.w	r2, r8, #2
 8018710:	f8c9 2000 	streq.w	r2, [r9]
 8018714:	4630      	moveq	r0, r6
 8018716:	45b4      	cmp	ip, r6
 8018718:	da3e      	bge.n	8018798 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xf0>
 801871a:	b2b6      	uxth	r6, r6
 801871c:	eba6 040c 	sub.w	r4, r6, ip
 8018720:	b2a4      	uxth	r4, r4
 8018722:	46b4      	mov	ip, r6
 8018724:	f04f 0b00 	mov.w	fp, #0
 8018728:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 801872c:	3a01      	subs	r2, #1
 801872e:	b169      	cbz	r1, 801874c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa4>
 8018730:	9911      	ldr	r1, [sp, #68]	; 0x44
 8018732:	458c      	cmp	ip, r1
 8018734:	da09      	bge.n	801874a <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa2>
 8018736:	eba1 010c 	sub.w	r1, r1, ip
 801873a:	b289      	uxth	r1, r1
 801873c:	b933      	cbnz	r3, 801874c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa4>
 801873e:	f1bb 0f00 	cmp.w	fp, #0
 8018742:	d02b      	beq.n	801879c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xf4>
 8018744:	b350      	cbz	r0, 801879c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xf4>
 8018746:	440c      	add	r4, r1
 8018748:	b2a4      	uxth	r4, r4
 801874a:	2100      	movs	r1, #0
 801874c:	682b      	ldr	r3, [r5, #0]
 801874e:	4293      	cmp	r3, r2
 8018750:	da07      	bge.n	8018762 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xba>
 8018752:	f1ba 0f00 	cmp.w	sl, #0
 8018756:	d004      	beq.n	8018762 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xba>
 8018758:	f827 a013 	strh.w	sl, [r7, r3, lsl #1]
 801875c:	682b      	ldr	r3, [r5, #0]
 801875e:	3301      	adds	r3, #1
 8018760:	602b      	str	r3, [r5, #0]
 8018762:	f04f 0c30 	mov.w	ip, #48	; 0x30
 8018766:	b354      	cbz	r4, 80187be <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x116>
 8018768:	682e      	ldr	r6, [r5, #0]
 801876a:	3c01      	subs	r4, #1
 801876c:	42b2      	cmp	r2, r6
 801876e:	b2a4      	uxth	r4, r4
 8018770:	dd25      	ble.n	80187be <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x116>
 8018772:	f827 c016 	strh.w	ip, [r7, r6, lsl #1]
 8018776:	682b      	ldr	r3, [r5, #0]
 8018778:	3301      	adds	r3, #1
 801877a:	602b      	str	r3, [r5, #0]
 801877c:	e7f3      	b.n	8018766 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xbe>
 801877e:	2a73      	cmp	r2, #115	; 0x73
 8018780:	d003      	beq.n	801878a <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xe2>
 8018782:	2a78      	cmp	r2, #120	; 0x78
 8018784:	d0ba      	beq.n	80186fc <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x54>
 8018786:	2a6f      	cmp	r2, #111	; 0x6f
 8018788:	e7b7      	b.n	80186fa <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x52>
 801878a:	2c00      	cmp	r4, #0
 801878c:	d0cc      	beq.n	8018728 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x80>
 801878e:	42b0      	cmp	r0, r6
 8018790:	dd00      	ble.n	8018794 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xec>
 8018792:	b2b0      	uxth	r0, r6
 8018794:	2400      	movs	r4, #0
 8018796:	e7c7      	b.n	8018728 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x80>
 8018798:	2400      	movs	r4, #0
 801879a:	e7c3      	b.n	8018724 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x7c>
 801879c:	2900      	cmp	r1, #0
 801879e:	d0d5      	beq.n	801874c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa4>
 80187a0:	f04f 0c20 	mov.w	ip, #32
 80187a4:	682e      	ldr	r6, [r5, #0]
 80187a6:	2900      	cmp	r1, #0
 80187a8:	d0d0      	beq.n	801874c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa4>
 80187aa:	3901      	subs	r1, #1
 80187ac:	4296      	cmp	r6, r2
 80187ae:	b289      	uxth	r1, r1
 80187b0:	dacb      	bge.n	801874a <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa2>
 80187b2:	f827 c016 	strh.w	ip, [r7, r6, lsl #1]
 80187b6:	682b      	ldr	r3, [r5, #0]
 80187b8:	3301      	adds	r3, #1
 80187ba:	602b      	str	r3, [r5, #0]
 80187bc:	e7f2      	b.n	80187a4 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xfc>
 80187be:	b198      	cbz	r0, 80187e8 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x140>
 80187c0:	f8d9 3000 	ldr.w	r3, [r9]
 80187c4:	881c      	ldrh	r4, [r3, #0]
 80187c6:	b17c      	cbz	r4, 80187e8 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x140>
 80187c8:	682c      	ldr	r4, [r5, #0]
 80187ca:	3801      	subs	r0, #1
 80187cc:	42a2      	cmp	r2, r4
 80187ce:	b280      	uxth	r0, r0
 80187d0:	dd0a      	ble.n	80187e8 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x140>
 80187d2:	1c9c      	adds	r4, r3, #2
 80187d4:	f8c9 4000 	str.w	r4, [r9]
 80187d8:	881c      	ldrh	r4, [r3, #0]
 80187da:	682b      	ldr	r3, [r5, #0]
 80187dc:	f827 4013 	strh.w	r4, [r7, r3, lsl #1]
 80187e0:	682b      	ldr	r3, [r5, #0]
 80187e2:	3301      	adds	r3, #1
 80187e4:	602b      	str	r3, [r5, #0]
 80187e6:	e7ea      	b.n	80187be <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x116>
 80187e8:	2620      	movs	r6, #32
 80187ea:	b151      	cbz	r1, 8018802 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x15a>
 80187ec:	6828      	ldr	r0, [r5, #0]
 80187ee:	3901      	subs	r1, #1
 80187f0:	4282      	cmp	r2, r0
 80187f2:	b289      	uxth	r1, r1
 80187f4:	dd05      	ble.n	8018802 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x15a>
 80187f6:	f827 6010 	strh.w	r6, [r7, r0, lsl #1]
 80187fa:	682b      	ldr	r3, [r5, #0]
 80187fc:	3301      	adds	r3, #1
 80187fe:	602b      	str	r3, [r5, #0]
 8018800:	e7f3      	b.n	80187ea <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x142>
 8018802:	b005      	add	sp, #20
 8018804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018808 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_>:
 8018808:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801880c:	e9dd ce06 	ldrd	ip, lr, [sp, #24]
 8018810:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8018814:	4604      	mov	r4, r0
 8018816:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8018818:	2000      	movs	r0, #0
 801881a:	8008      	strh	r0, [r1, #0]
 801881c:	f04f 0801 	mov.w	r8, #1
 8018820:	7010      	strb	r0, [r2, #0]
 8018822:	7018      	strb	r0, [r3, #0]
 8018824:	f88c 0000 	strb.w	r0, [ip]
 8018828:	f88e 0000 	strb.w	r0, [lr]
 801882c:	7030      	strb	r0, [r6, #0]
 801882e:	6820      	ldr	r0, [r4, #0]
 8018830:	8800      	ldrh	r0, [r0, #0]
 8018832:	b190      	cbz	r0, 801885a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x52>
 8018834:	282b      	cmp	r0, #43	; 0x2b
 8018836:	d001      	beq.n	801883c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x34>
 8018838:	2820      	cmp	r0, #32
 801883a:	d104      	bne.n	8018846 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x3e>
 801883c:	8008      	strh	r0, [r1, #0]
 801883e:	6820      	ldr	r0, [r4, #0]
 8018840:	3002      	adds	r0, #2
 8018842:	6020      	str	r0, [r4, #0]
 8018844:	e7f3      	b.n	801882e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x26>
 8018846:	282d      	cmp	r0, #45	; 0x2d
 8018848:	d102      	bne.n	8018850 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x48>
 801884a:	f882 8000 	strb.w	r8, [r2]
 801884e:	e7f6      	b.n	801883e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x36>
 8018850:	2823      	cmp	r0, #35	; 0x23
 8018852:	d102      	bne.n	801885a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x52>
 8018854:	f883 8000 	strb.w	r8, [r3]
 8018858:	e7f1      	b.n	801883e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x36>
 801885a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801885e:	2b09      	cmp	r3, #9
 8018860:	d901      	bls.n	8018866 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x5e>
 8018862:	282a      	cmp	r0, #42	; 0x2a
 8018864:	d114      	bne.n	8018890 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x88>
 8018866:	2201      	movs	r2, #1
 8018868:	f88e 2000 	strb.w	r2, [lr]
 801886c:	6823      	ldr	r3, [r4, #0]
 801886e:	8819      	ldrh	r1, [r3, #0]
 8018870:	2930      	cmp	r1, #48	; 0x30
 8018872:	bf02      	ittt	eq
 8018874:	3302      	addeq	r3, #2
 8018876:	6023      	streq	r3, [r4, #0]
 8018878:	f88c 2000 	strbeq.w	r2, [ip]
 801887c:	6820      	ldr	r0, [r4, #0]
 801887e:	8803      	ldrh	r3, [r0, #0]
 8018880:	2b2a      	cmp	r3, #42	; 0x2a
 8018882:	d11e      	bne.n	80188c2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xba>
 8018884:	f04f 33ff 	mov.w	r3, #4294967295
 8018888:	603b      	str	r3, [r7, #0]
 801888a:	6823      	ldr	r3, [r4, #0]
 801888c:	3302      	adds	r3, #2
 801888e:	6023      	str	r3, [r4, #0]
 8018890:	6823      	ldr	r3, [r4, #0]
 8018892:	881b      	ldrh	r3, [r3, #0]
 8018894:	2b2e      	cmp	r3, #46	; 0x2e
 8018896:	d112      	bne.n	80188be <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xb6>
 8018898:	2301      	movs	r3, #1
 801889a:	7033      	strb	r3, [r6, #0]
 801889c:	6823      	ldr	r3, [r4, #0]
 801889e:	1c98      	adds	r0, r3, #2
 80188a0:	6020      	str	r0, [r4, #0]
 80188a2:	885b      	ldrh	r3, [r3, #2]
 80188a4:	2b2a      	cmp	r3, #42	; 0x2a
 80188a6:	d117      	bne.n	80188d8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xd0>
 80188a8:	f04f 33ff 	mov.w	r3, #4294967295
 80188ac:	602b      	str	r3, [r5, #0]
 80188ae:	6823      	ldr	r3, [r4, #0]
 80188b0:	3302      	adds	r3, #2
 80188b2:	6023      	str	r3, [r4, #0]
 80188b4:	682b      	ldr	r3, [r5, #0]
 80188b6:	2b06      	cmp	r3, #6
 80188b8:	bfa8      	it	ge
 80188ba:	2306      	movge	r3, #6
 80188bc:	602b      	str	r3, [r5, #0]
 80188be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80188c2:	f7ff fee2 	bl	801868a <_ZN8touchgfx7Unicode4atoiEPKt>
 80188c6:	6038      	str	r0, [r7, #0]
 80188c8:	6823      	ldr	r3, [r4, #0]
 80188ca:	881a      	ldrh	r2, [r3, #0]
 80188cc:	3a30      	subs	r2, #48	; 0x30
 80188ce:	2a09      	cmp	r2, #9
 80188d0:	d8de      	bhi.n	8018890 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x88>
 80188d2:	3302      	adds	r3, #2
 80188d4:	6023      	str	r3, [r4, #0]
 80188d6:	e7f7      	b.n	80188c8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xc0>
 80188d8:	f7ff fed7 	bl	801868a <_ZN8touchgfx7Unicode4atoiEPKt>
 80188dc:	6028      	str	r0, [r5, #0]
 80188de:	6823      	ldr	r3, [r4, #0]
 80188e0:	881a      	ldrh	r2, [r3, #0]
 80188e2:	3a30      	subs	r2, #48	; 0x30
 80188e4:	2a09      	cmp	r2, #9
 80188e6:	d8e5      	bhi.n	80188b4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xac>
 80188e8:	3302      	adds	r3, #2
 80188ea:	6023      	str	r3, [r4, #0]
 80188ec:	e7f7      	b.n	80188de <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xd6>

080188ee <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list>:
 80188ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80188f2:	b0a2      	sub	sp, #136	; 0x88
 80188f4:	2500      	movs	r5, #0
 80188f6:	f10d 0844 	add.w	r8, sp, #68	; 0x44
 80188fa:	4606      	mov	r6, r0
 80188fc:	460f      	mov	r7, r1
 80188fe:	9209      	str	r2, [sp, #36]	; 0x24
 8018900:	4629      	mov	r1, r5
 8018902:	2242      	movs	r2, #66	; 0x42
 8018904:	4640      	mov	r0, r8
 8018906:	461c      	mov	r4, r3
 8018908:	950d      	str	r5, [sp, #52]	; 0x34
 801890a:	f7fe fdbe 	bl	801748a <_ZN8touchgfx6memsetEPvhm>
 801890e:	b30e      	cbz	r6, 8018954 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x66>
 8018910:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018912:	b1f3      	cbz	r3, 8018952 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x64>
 8018914:	f107 3aff 	add.w	sl, r7, #4294967295
 8018918:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801891a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801891c:	8812      	ldrh	r2, [r2, #0]
 801891e:	2a00      	cmp	r2, #0
 8018920:	f000 80b3 	beq.w	8018a8a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x19c>
 8018924:	459a      	cmp	sl, r3
 8018926:	f340 80b0 	ble.w	8018a8a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x19c>
 801892a:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801892e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018930:	f8b9 2000 	ldrh.w	r2, [r9]
 8018934:	2a00      	cmp	r2, #0
 8018936:	d0ef      	beq.n	8018918 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2a>
 8018938:	2a25      	cmp	r2, #37	; 0x25
 801893a:	f000 80aa 	beq.w	8018a92 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x1a4>
 801893e:	459a      	cmp	sl, r3
 8018940:	ddea      	ble.n	8018918 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2a>
 8018942:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 8018946:	f109 0202 	add.w	r2, r9, #2
 801894a:	3301      	adds	r3, #1
 801894c:	9209      	str	r2, [sp, #36]	; 0x24
 801894e:	930d      	str	r3, [sp, #52]	; 0x34
 8018950:	e7eb      	b.n	801892a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x3c>
 8018952:	8033      	strh	r3, [r6, #0]
 8018954:	4630      	mov	r0, r6
 8018956:	b022      	add	sp, #136	; 0x88
 8018958:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801895c:	3b63      	subs	r3, #99	; 0x63
 801895e:	2b01      	cmp	r3, #1
 8018960:	f200 80e1 	bhi.w	8018b26 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x238>
 8018964:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8018968:	8813      	ldrh	r3, [r2, #0]
 801896a:	2b69      	cmp	r3, #105	; 0x69
 801896c:	d058      	beq.n	8018a20 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x132>
 801896e:	d81b      	bhi.n	80189a8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xba>
 8018970:	2b63      	cmp	r3, #99	; 0x63
 8018972:	d02e      	beq.n	80189d2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xe4>
 8018974:	2b64      	cmp	r3, #100	; 0x64
 8018976:	d053      	beq.n	8018a20 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x132>
 8018978:	2b58      	cmp	r3, #88	; 0x58
 801897a:	d06f      	beq.n	8018a5c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x16e>
 801897c:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 8018980:	46a1      	mov	r9, r4
 8018982:	e02d      	b.n	80189e0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 8018984:	2b73      	cmp	r3, #115	; 0x73
 8018986:	d0ed      	beq.n	8018964 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 8018988:	d803      	bhi.n	8018992 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xa4>
 801898a:	2b6f      	cmp	r3, #111	; 0x6f
 801898c:	f040 80cb 	bne.w	8018b26 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x238>
 8018990:	e7e8      	b.n	8018964 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 8018992:	2b75      	cmp	r3, #117	; 0x75
 8018994:	d0e6      	beq.n	8018964 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 8018996:	2b78      	cmp	r3, #120	; 0x78
 8018998:	e7f8      	b.n	801898c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x9e>
 801899a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801899c:	f826 3012 	strh.w	r3, [r6, r2, lsl #1]
 80189a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80189a2:	3302      	adds	r3, #2
 80189a4:	9309      	str	r3, [sp, #36]	; 0x24
 80189a6:	e7b7      	b.n	8018918 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2a>
 80189a8:	2b73      	cmp	r3, #115	; 0x73
 80189aa:	d034      	beq.n	8018a16 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x128>
 80189ac:	d807      	bhi.n	80189be <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xd0>
 80189ae:	2b6f      	cmp	r3, #111	; 0x6f
 80189b0:	d1e4      	bne.n	801897c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x8e>
 80189b2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80189b4:	f104 0904 	add.w	r9, r4, #4
 80189b8:	1aba      	subs	r2, r7, r2
 80189ba:	2308      	movs	r3, #8
 80189bc:	e048      	b.n	8018a50 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x162>
 80189be:	2b75      	cmp	r3, #117	; 0x75
 80189c0:	d041      	beq.n	8018a46 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x158>
 80189c2:	2b78      	cmp	r3, #120	; 0x78
 80189c4:	d1da      	bne.n	801897c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x8e>
 80189c6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80189c8:	f104 0904 	add.w	r9, r4, #4
 80189cc:	1aba      	subs	r2, r7, r2
 80189ce:	2310      	movs	r3, #16
 80189d0:	e03e      	b.n	8018a50 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x162>
 80189d2:	7823      	ldrb	r3, [r4, #0]
 80189d4:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 80189d8:	f104 0904 	add.w	r9, r4, #4
 80189dc:	f8ad 5046 	strh.w	r5, [sp, #70]	; 0x46
 80189e0:	aa0d      	add	r2, sp, #52	; 0x34
 80189e2:	9205      	str	r2, [sp, #20]
 80189e4:	f89d 202d 	ldrb.w	r2, [sp, #45]	; 0x2d
 80189e8:	9204      	str	r2, [sp, #16]
 80189ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80189ec:	9203      	str	r2, [sp, #12]
 80189ee:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 80189f2:	9202      	str	r2, [sp, #8]
 80189f4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80189f6:	9201      	str	r2, [sp, #4]
 80189f8:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
 80189fc:	9200      	str	r2, [sp, #0]
 80189fe:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 8018a02:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 8018a06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018a08:	e9cd 7606 	strd	r7, r6, [sp, #24]
 8018a0c:	a810      	add	r0, sp, #64	; 0x40
 8018a0e:	f7ff fe4b 	bl	80186a8 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt>
 8018a12:	464c      	mov	r4, r9
 8018a14:	e7c4      	b.n	80189a0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xb2>
 8018a16:	6823      	ldr	r3, [r4, #0]
 8018a18:	f104 0904 	add.w	r9, r4, #4
 8018a1c:	9310      	str	r3, [sp, #64]	; 0x40
 8018a1e:	e7df      	b.n	80189e0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 8018a20:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8018a22:	6820      	ldr	r0, [r4, #0]
 8018a24:	1aba      	subs	r2, r7, r2
 8018a26:	230a      	movs	r3, #10
 8018a28:	b292      	uxth	r2, r2
 8018a2a:	4641      	mov	r1, r8
 8018a2c:	f7ff fdfb 	bl	8018626 <_ZN8touchgfx7Unicode4itoaElPtti>
 8018a30:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8018a34:	2b2d      	cmp	r3, #45	; 0x2d
 8018a36:	f104 0904 	add.w	r9, r4, #4
 8018a3a:	d1d1      	bne.n	80189e0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 8018a3c:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8018a40:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018a42:	3302      	adds	r3, #2
 8018a44:	e7ea      	b.n	8018a1c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x12e>
 8018a46:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8018a48:	f104 0904 	add.w	r9, r4, #4
 8018a4c:	1aba      	subs	r2, r7, r2
 8018a4e:	230a      	movs	r3, #10
 8018a50:	b292      	uxth	r2, r2
 8018a52:	4641      	mov	r1, r8
 8018a54:	6820      	ldr	r0, [r4, #0]
 8018a56:	f7ff fdc8 	bl	80185ea <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 8018a5a:	e7c1      	b.n	80189e0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 8018a5c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8018a5e:	6820      	ldr	r0, [r4, #0]
 8018a60:	1aba      	subs	r2, r7, r2
 8018a62:	b292      	uxth	r2, r2
 8018a64:	2310      	movs	r3, #16
 8018a66:	4641      	mov	r1, r8
 8018a68:	f7ff fdbf 	bl	80185ea <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 8018a6c:	f104 0904 	add.w	r9, r4, #4
 8018a70:	f10d 0242 	add.w	r2, sp, #66	; 0x42
 8018a74:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 8018a78:	2b00      	cmp	r3, #0
 8018a7a:	d0b1      	beq.n	80189e0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 8018a7c:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 8018a80:	2919      	cmp	r1, #25
 8018a82:	d8f7      	bhi.n	8018a74 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x186>
 8018a84:	3b20      	subs	r3, #32
 8018a86:	8013      	strh	r3, [r2, #0]
 8018a88:	e7f4      	b.n	8018a74 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x186>
 8018a8a:	2200      	movs	r2, #0
 8018a8c:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 8018a90:	e760      	b.n	8018954 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x66>
 8018a92:	459a      	cmp	sl, r3
 8018a94:	f77f af40 	ble.w	8018918 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2a>
 8018a98:	f109 0302 	add.w	r3, r9, #2
 8018a9c:	9309      	str	r3, [sp, #36]	; 0x24
 8018a9e:	ab0f      	add	r3, sp, #60	; 0x3c
 8018aa0:	9304      	str	r3, [sp, #16]
 8018aa2:	f10d 0331 	add.w	r3, sp, #49	; 0x31
 8018aa6:	9303      	str	r3, [sp, #12]
 8018aa8:	ab0e      	add	r3, sp, #56	; 0x38
 8018aaa:	9302      	str	r3, [sp, #8]
 8018aac:	ab0c      	add	r3, sp, #48	; 0x30
 8018aae:	9301      	str	r3, [sp, #4]
 8018ab0:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 8018ab4:	9300      	str	r3, [sp, #0]
 8018ab6:	f10d 022d 	add.w	r2, sp, #45	; 0x2d
 8018aba:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 8018abe:	f10d 0132 	add.w	r1, sp, #50	; 0x32
 8018ac2:	a809      	add	r0, sp, #36	; 0x24
 8018ac4:	f8ad 5032 	strh.w	r5, [sp, #50]	; 0x32
 8018ac8:	f88d 502d 	strb.w	r5, [sp, #45]	; 0x2d
 8018acc:	f88d 502e 	strb.w	r5, [sp, #46]	; 0x2e
 8018ad0:	f88d 502f 	strb.w	r5, [sp, #47]	; 0x2f
 8018ad4:	f88d 5030 	strb.w	r5, [sp, #48]	; 0x30
 8018ad8:	950e      	str	r5, [sp, #56]	; 0x38
 8018ada:	f88d 5031 	strb.w	r5, [sp, #49]	; 0x31
 8018ade:	950f      	str	r5, [sp, #60]	; 0x3c
 8018ae0:	f7ff fe92 	bl	8018808 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_>
 8018ae4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018ae6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018ae8:	2b00      	cmp	r3, #0
 8018aea:	bfbe      	ittt	lt
 8018aec:	6823      	ldrlt	r3, [r4, #0]
 8018aee:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 8018af2:	930e      	strlt	r3, [sp, #56]	; 0x38
 8018af4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018af6:	bfb8      	it	lt
 8018af8:	3404      	addlt	r4, #4
 8018afa:	2b00      	cmp	r3, #0
 8018afc:	bfbe      	ittt	lt
 8018afe:	6823      	ldrlt	r3, [r4, #0]
 8018b00:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 8018b04:	930f      	strlt	r3, [sp, #60]	; 0x3c
 8018b06:	8813      	ldrh	r3, [r2, #0]
 8018b08:	bfb8      	it	lt
 8018b0a:	3404      	addlt	r4, #4
 8018b0c:	2b69      	cmp	r3, #105	; 0x69
 8018b0e:	f43f af29 	beq.w	8018964 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 8018b12:	f63f af37 	bhi.w	8018984 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x96>
 8018b16:	2b58      	cmp	r3, #88	; 0x58
 8018b18:	f43f af24 	beq.w	8018964 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 8018b1c:	f63f af1e 	bhi.w	801895c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x6e>
 8018b20:	2b25      	cmp	r3, #37	; 0x25
 8018b22:	f43f af3a 	beq.w	801899a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xac>
 8018b26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018b28:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8018b2c:	f8b9 2000 	ldrh.w	r2, [r9]
 8018b30:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 8018b34:	3301      	adds	r3, #1
 8018b36:	930d      	str	r3, [sp, #52]	; 0x34
 8018b38:	e732      	b.n	80189a0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xb2>
	...

08018b3c <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 8018b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018b3e:	4605      	mov	r5, r0
 8018b40:	b0a1      	sub	sp, #132	; 0x84
 8018b42:	4610      	mov	r0, r2
 8018b44:	460e      	mov	r6, r1
 8018b46:	4614      	mov	r4, r2
 8018b48:	461f      	mov	r7, r3
 8018b4a:	f7ff fd31 	bl	80185b0 <_ZN8touchgfx7Unicode6strlenEPKc>
 8018b4e:	283f      	cmp	r0, #63	; 0x3f
 8018b50:	d906      	bls.n	8018b60 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x24>
 8018b52:	4b0a      	ldr	r3, [pc, #40]	; (8018b7c <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x40>)
 8018b54:	4a0a      	ldr	r2, [pc, #40]	; (8018b80 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x44>)
 8018b56:	480b      	ldr	r0, [pc, #44]	; (8018b84 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x48>)
 8018b58:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8018b5c:	f009 fe48 	bl	80227f0 <__assert_func>
 8018b60:	4621      	mov	r1, r4
 8018b62:	2240      	movs	r2, #64	; 0x40
 8018b64:	4668      	mov	r0, sp
 8018b66:	f7ff fd2f 	bl	80185c8 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 8018b6a:	463b      	mov	r3, r7
 8018b6c:	466a      	mov	r2, sp
 8018b6e:	4631      	mov	r1, r6
 8018b70:	4628      	mov	r0, r5
 8018b72:	f7ff febc 	bl	80188ee <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list>
 8018b76:	b021      	add	sp, #132	; 0x84
 8018b78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018b7a:	bf00      	nop
 8018b7c:	080271ed 	.word	0x080271ed
 8018b80:	08027230 	.word	0x08027230
 8018b84:	0802720a 	.word	0x0802720a

08018b88 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 8018b88:	b40c      	push	{r2, r3}
 8018b8a:	b507      	push	{r0, r1, r2, lr}
 8018b8c:	ab04      	add	r3, sp, #16
 8018b8e:	f853 2b04 	ldr.w	r2, [r3], #4
 8018b92:	9301      	str	r3, [sp, #4]
 8018b94:	f7ff ffd2 	bl	8018b3c <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 8018b98:	b003      	add	sp, #12
 8018b9a:	f85d eb04 	ldr.w	lr, [sp], #4
 8018b9e:	b002      	add	sp, #8
 8018ba0:	4770      	bx	lr
	...

08018ba4 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 8018ba4:	4b01      	ldr	r3, [pc, #4]	; (8018bac <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 8018ba6:	6018      	str	r0, [r3, #0]
 8018ba8:	4770      	bx	lr
 8018baa:	bf00      	nop
 8018bac:	2000d244 	.word	0x2000d244

08018bb0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 8018bb0:	4b07      	ldr	r3, [pc, #28]	; (8018bd0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x20>)
 8018bb2:	881a      	ldrh	r2, [r3, #0]
 8018bb4:	4282      	cmp	r2, r0
 8018bb6:	d809      	bhi.n	8018bcc <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x1c>
 8018bb8:	4b06      	ldr	r3, [pc, #24]	; (8018bd4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x24>)
 8018bba:	881b      	ldrh	r3, [r3, #0]
 8018bbc:	4413      	add	r3, r2
 8018bbe:	4298      	cmp	r0, r3
 8018bc0:	da04      	bge.n	8018bcc <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x1c>
 8018bc2:	4b05      	ldr	r3, [pc, #20]	; (8018bd8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x28>)
 8018bc4:	681b      	ldr	r3, [r3, #0]
 8018bc6:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8018bca:	4770      	bx	lr
 8018bcc:	2000      	movs	r0, #0
 8018bce:	4770      	bx	lr
 8018bd0:	2000d264 	.word	0x2000d264
 8018bd4:	2000d268 	.word	0x2000d268
 8018bd8:	2000d248 	.word	0x2000d248

08018bdc <_ZN8touchgfx6Bitmap10clearCacheEv>:
 8018bdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018be0:	4d26      	ldr	r5, [pc, #152]	; (8018c7c <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 8018be2:	682b      	ldr	r3, [r5, #0]
 8018be4:	2b00      	cmp	r3, #0
 8018be6:	d046      	beq.n	8018c76 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9a>
 8018be8:	4a25      	ldr	r2, [pc, #148]	; (8018c80 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 8018bea:	4f26      	ldr	r7, [pc, #152]	; (8018c84 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 8018bec:	8810      	ldrh	r0, [r2, #0]
 8018bee:	883c      	ldrh	r4, [r7, #0]
 8018bf0:	4e25      	ldr	r6, [pc, #148]	; (8018c88 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 8018bf2:	4420      	add	r0, r4
 8018bf4:	1c42      	adds	r2, r0, #1
 8018bf6:	f022 0201 	bic.w	r2, r2, #1
 8018bfa:	0412      	lsls	r2, r2, #16
 8018bfc:	0c12      	lsrs	r2, r2, #16
 8018bfe:	0051      	lsls	r1, r2, #1
 8018c00:	220e      	movs	r2, #14
 8018c02:	fb02 fc04 	mul.w	ip, r2, r4
 8018c06:	ea4f 0880 	mov.w	r8, r0, lsl #2
 8018c0a:	4c20      	ldr	r4, [pc, #128]	; (8018c8c <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 8018c0c:	eb03 0208 	add.w	r2, r3, r8
 8018c10:	eb08 0e01 	add.w	lr, r8, r1
 8018c14:	6022      	str	r2, [r4, #0]
 8018c16:	eb03 020e 	add.w	r2, r3, lr
 8018c1a:	6032      	str	r2, [r6, #0]
 8018c1c:	44e6      	add	lr, ip
 8018c1e:	4a1c      	ldr	r2, [pc, #112]	; (8018c90 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 8018c20:	4473      	add	r3, lr
 8018c22:	6013      	str	r3, [r2, #0]
 8018c24:	4a1b      	ldr	r2, [pc, #108]	; (8018c94 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 8018c26:	2300      	movs	r3, #0
 8018c28:	8013      	strh	r3, [r2, #0]
 8018c2a:	4a1b      	ldr	r2, [pc, #108]	; (8018c98 <_ZN8touchgfx6Bitmap10clearCacheEv+0xbc>)
 8018c2c:	6812      	ldr	r2, [r2, #0]
 8018c2e:	eba2 0208 	sub.w	r2, r2, r8
 8018c32:	1a52      	subs	r2, r2, r1
 8018c34:	4919      	ldr	r1, [pc, #100]	; (8018c9c <_ZN8touchgfx6Bitmap10clearCacheEv+0xc0>)
 8018c36:	eba2 020c 	sub.w	r2, r2, ip
 8018c3a:	600a      	str	r2, [r1, #0]
 8018c3c:	4a18      	ldr	r2, [pc, #96]	; (8018ca0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc4>)
 8018c3e:	469c      	mov	ip, r3
 8018c40:	8013      	strh	r3, [r2, #0]
 8018c42:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8018c46:	4283      	cmp	r3, r0
 8018c48:	d10d      	bne.n	8018c66 <_ZN8touchgfx6Bitmap10clearCacheEv+0x8a>
 8018c4a:	883d      	ldrh	r5, [r7, #0]
 8018c4c:	6830      	ldr	r0, [r6, #0]
 8018c4e:	2300      	movs	r3, #0
 8018c50:	240e      	movs	r4, #14
 8018c52:	429d      	cmp	r5, r3
 8018c54:	d90f      	bls.n	8018c76 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9a>
 8018c56:	fb04 0203 	mla	r2, r4, r3, r0
 8018c5a:	3301      	adds	r3, #1
 8018c5c:	7b11      	ldrb	r1, [r2, #12]
 8018c5e:	f36f 1145 	bfc	r1, #5, #1
 8018c62:	7311      	strb	r1, [r2, #12]
 8018c64:	e7f5      	b.n	8018c52 <_ZN8touchgfx6Bitmap10clearCacheEv+0x76>
 8018c66:	682a      	ldr	r2, [r5, #0]
 8018c68:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 8018c6c:	6822      	ldr	r2, [r4, #0]
 8018c6e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8018c72:	3301      	adds	r3, #1
 8018c74:	e7e7      	b.n	8018c46 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6a>
 8018c76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018c7a:	bf00      	nop
 8018c7c:	2000d248 	.word	0x2000d248
 8018c80:	2000d264 	.word	0x2000d264
 8018c84:	2000d268 	.word	0x2000d268
 8018c88:	2000d24c 	.word	0x2000d24c
 8018c8c:	2000d25c 	.word	0x2000d25c
 8018c90:	2000d254 	.word	0x2000d254
 8018c94:	2000d266 	.word	0x2000d266
 8018c98:	2000d250 	.word	0x2000d250
 8018c9c:	2000d260 	.word	0x2000d260
 8018ca0:	2000d258 	.word	0x2000d258

08018ca4 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 8018ca4:	b510      	push	{r4, lr}
 8018ca6:	4b10      	ldr	r3, [pc, #64]	; (8018ce8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x44>)
 8018ca8:	681b      	ldr	r3, [r3, #0]
 8018caa:	b9db      	cbnz	r3, 8018ce4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 8018cac:	b1d1      	cbz	r1, 8018ce4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 8018cae:	4b0f      	ldr	r3, [pc, #60]	; (8018cec <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x48>)
 8018cb0:	801a      	strh	r2, [r3, #0]
 8018cb2:	4b0f      	ldr	r3, [pc, #60]	; (8018cf0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x4c>)
 8018cb4:	881b      	ldrh	r3, [r3, #0]
 8018cb6:	b292      	uxth	r2, r2
 8018cb8:	240e      	movs	r4, #14
 8018cba:	4413      	add	r3, r2
 8018cbc:	4362      	muls	r2, r4
 8018cbe:	2406      	movs	r4, #6
 8018cc0:	fb04 2203 	mla	r2, r4, r3, r2
 8018cc4:	428a      	cmp	r2, r1
 8018cc6:	d305      	bcc.n	8018cd4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x30>
 8018cc8:	4b0a      	ldr	r3, [pc, #40]	; (8018cf4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x50>)
 8018cca:	4a0b      	ldr	r2, [pc, #44]	; (8018cf8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x54>)
 8018ccc:	480b      	ldr	r0, [pc, #44]	; (8018cfc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x58>)
 8018cce:	2137      	movs	r1, #55	; 0x37
 8018cd0:	f009 fd8e 	bl	80227f0 <__assert_func>
 8018cd4:	4b0a      	ldr	r3, [pc, #40]	; (8018d00 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x5c>)
 8018cd6:	6019      	str	r1, [r3, #0]
 8018cd8:	4b0a      	ldr	r3, [pc, #40]	; (8018d04 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x60>)
 8018cda:	6018      	str	r0, [r3, #0]
 8018cdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018ce0:	f7ff bf7c 	b.w	8018bdc <_ZN8touchgfx6Bitmap10clearCacheEv>
 8018ce4:	bd10      	pop	{r4, pc}
 8018ce6:	bf00      	nop
 8018ce8:	2000d254 	.word	0x2000d254
 8018cec:	2000d268 	.word	0x2000d268
 8018cf0:	2000d264 	.word	0x2000d264
 8018cf4:	08027312 	.word	0x08027312
 8018cf8:	0802736b 	.word	0x0802736b
 8018cfc:	080272ed 	.word	0x080272ed
 8018d00:	2000d250 	.word	0x2000d250
 8018d04:	2000d248 	.word	0x2000d248

08018d08 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 8018d08:	b470      	push	{r4, r5, r6}
 8018d0a:	4c07      	ldr	r4, [pc, #28]	; (8018d28 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 8018d0c:	6826      	ldr	r6, [r4, #0]
 8018d0e:	4605      	mov	r5, r0
 8018d10:	4610      	mov	r0, r2
 8018d12:	9a03      	ldr	r2, [sp, #12]
 8018d14:	b936      	cbnz	r6, 8018d24 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 8018d16:	6025      	str	r5, [r4, #0]
 8018d18:	4c04      	ldr	r4, [pc, #16]	; (8018d2c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 8018d1a:	8021      	strh	r1, [r4, #0]
 8018d1c:	bc70      	pop	{r4, r5, r6}
 8018d1e:	4619      	mov	r1, r3
 8018d20:	f7ff bfc0 	b.w	8018ca4 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 8018d24:	bc70      	pop	{r4, r5, r6}
 8018d26:	4770      	bx	lr
 8018d28:	2000d26c 	.word	0x2000d26c
 8018d2c:	2000d264 	.word	0x2000d264

08018d30 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 8018d30:	b508      	push	{r3, lr}
 8018d32:	4b14      	ldr	r3, [pc, #80]	; (8018d84 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 8018d34:	6819      	ldr	r1, [r3, #0]
 8018d36:	b931      	cbnz	r1, 8018d46 <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
 8018d38:	4b13      	ldr	r3, [pc, #76]	; (8018d88 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 8018d3a:	4a14      	ldr	r2, [pc, #80]	; (8018d8c <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 8018d3c:	4814      	ldr	r0, [pc, #80]	; (8018d90 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 8018d3e:	f240 21e6 	movw	r1, #742	; 0x2e6
 8018d42:	f009 fd55 	bl	80227f0 <__assert_func>
 8018d46:	4a13      	ldr	r2, [pc, #76]	; (8018d94 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 8018d48:	8803      	ldrh	r3, [r0, #0]
 8018d4a:	8812      	ldrh	r2, [r2, #0]
 8018d4c:	4293      	cmp	r3, r2
 8018d4e:	d204      	bcs.n	8018d5a <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 8018d50:	2214      	movs	r2, #20
 8018d52:	fb02 1303 	mla	r3, r2, r3, r1
 8018d56:	8918      	ldrh	r0, [r3, #8]
 8018d58:	bd08      	pop	{r3, pc}
 8018d5a:	490f      	ldr	r1, [pc, #60]	; (8018d98 <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 8018d5c:	8809      	ldrh	r1, [r1, #0]
 8018d5e:	4411      	add	r1, r2
 8018d60:	428b      	cmp	r3, r1
 8018d62:	da06      	bge.n	8018d72 <_ZNK8touchgfx6Bitmap8getWidthEv+0x42>
 8018d64:	1a9b      	subs	r3, r3, r2
 8018d66:	4a0d      	ldr	r2, [pc, #52]	; (8018d9c <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 8018d68:	6812      	ldr	r2, [r2, #0]
 8018d6a:	210e      	movs	r1, #14
 8018d6c:	fb01 2303 	mla	r3, r1, r3, r2
 8018d70:	e7f1      	b.n	8018d56 <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
 8018d72:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8018d76:	4293      	cmp	r3, r2
 8018d78:	bf0a      	itet	eq
 8018d7a:	4b09      	ldreq	r3, [pc, #36]	; (8018da0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x70>)
 8018d7c:	2000      	movne	r0, #0
 8018d7e:	8818      	ldrheq	r0, [r3, #0]
 8018d80:	e7ea      	b.n	8018d58 <_ZNK8touchgfx6Bitmap8getWidthEv+0x28>
 8018d82:	bf00      	nop
 8018d84:	2000d26c 	.word	0x2000d26c
 8018d88:	08026374 	.word	0x08026374
 8018d8c:	08027418 	.word	0x08027418
 8018d90:	080272ed 	.word	0x080272ed
 8018d94:	2000d264 	.word	0x2000d264
 8018d98:	2000d268 	.word	0x2000d268
 8018d9c:	2000d24c 	.word	0x2000d24c
 8018da0:	2000d198 	.word	0x2000d198

08018da4 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 8018da4:	b508      	push	{r3, lr}
 8018da6:	4b14      	ldr	r3, [pc, #80]	; (8018df8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 8018da8:	6819      	ldr	r1, [r3, #0]
 8018daa:	b931      	cbnz	r1, 8018dba <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
 8018dac:	4b13      	ldr	r3, [pc, #76]	; (8018dfc <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 8018dae:	4a14      	ldr	r2, [pc, #80]	; (8018e00 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 8018db0:	4814      	ldr	r0, [pc, #80]	; (8018e04 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 8018db2:	f240 21fa 	movw	r1, #762	; 0x2fa
 8018db6:	f009 fd1b 	bl	80227f0 <__assert_func>
 8018dba:	4a13      	ldr	r2, [pc, #76]	; (8018e08 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 8018dbc:	8803      	ldrh	r3, [r0, #0]
 8018dbe:	8812      	ldrh	r2, [r2, #0]
 8018dc0:	4293      	cmp	r3, r2
 8018dc2:	d204      	bcs.n	8018dce <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 8018dc4:	2214      	movs	r2, #20
 8018dc6:	fb02 1303 	mla	r3, r2, r3, r1
 8018dca:	8958      	ldrh	r0, [r3, #10]
 8018dcc:	bd08      	pop	{r3, pc}
 8018dce:	490f      	ldr	r1, [pc, #60]	; (8018e0c <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 8018dd0:	8809      	ldrh	r1, [r1, #0]
 8018dd2:	4411      	add	r1, r2
 8018dd4:	428b      	cmp	r3, r1
 8018dd6:	da06      	bge.n	8018de6 <_ZNK8touchgfx6Bitmap9getHeightEv+0x42>
 8018dd8:	1a9b      	subs	r3, r3, r2
 8018dda:	4a0d      	ldr	r2, [pc, #52]	; (8018e10 <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 8018ddc:	6812      	ldr	r2, [r2, #0]
 8018dde:	210e      	movs	r1, #14
 8018de0:	fb01 2303 	mla	r3, r1, r3, r2
 8018de4:	e7f1      	b.n	8018dca <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
 8018de6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8018dea:	4293      	cmp	r3, r2
 8018dec:	bf0a      	itet	eq
 8018dee:	4b09      	ldreq	r3, [pc, #36]	; (8018e14 <_ZNK8touchgfx6Bitmap9getHeightEv+0x70>)
 8018df0:	2000      	movne	r0, #0
 8018df2:	8818      	ldrheq	r0, [r3, #0]
 8018df4:	e7ea      	b.n	8018dcc <_ZNK8touchgfx6Bitmap9getHeightEv+0x28>
 8018df6:	bf00      	nop
 8018df8:	2000d26c 	.word	0x2000d26c
 8018dfc:	08026374 	.word	0x08026374
 8018e00:	08027444 	.word	0x08027444
 8018e04:	080272ed 	.word	0x080272ed
 8018e08:	2000d264 	.word	0x2000d264
 8018e0c:	2000d268 	.word	0x2000d268
 8018e10:	2000d24c 	.word	0x2000d24c
 8018e14:	2000d19a 	.word	0x2000d19a

08018e18 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 8018e18:	b510      	push	{r4, lr}
 8018e1a:	4b23      	ldr	r3, [pc, #140]	; (8018ea8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 8018e1c:	681c      	ldr	r4, [r3, #0]
 8018e1e:	b934      	cbnz	r4, 8018e2e <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x16>
 8018e20:	4b22      	ldr	r3, [pc, #136]	; (8018eac <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 8018e22:	4a23      	ldr	r2, [pc, #140]	; (8018eb0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 8018e24:	4823      	ldr	r0, [pc, #140]	; (8018eb4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 8018e26:	f240 310e 	movw	r1, #782	; 0x30e
 8018e2a:	f009 fce1 	bl	80227f0 <__assert_func>
 8018e2e:	4a22      	ldr	r2, [pc, #136]	; (8018eb8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 8018e30:	880b      	ldrh	r3, [r1, #0]
 8018e32:	8812      	ldrh	r2, [r2, #0]
 8018e34:	4293      	cmp	r3, r2
 8018e36:	d211      	bcs.n	8018e5c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x44>
 8018e38:	2214      	movs	r2, #20
 8018e3a:	fb02 4303 	mla	r3, r2, r3, r4
 8018e3e:	8a1a      	ldrh	r2, [r3, #16]
 8018e40:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 8018e44:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8018e48:	8a5b      	ldrh	r3, [r3, #18]
 8018e4a:	8004      	strh	r4, [r0, #0]
 8018e4c:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8018e50:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018e54:	8041      	strh	r1, [r0, #2]
 8018e56:	8082      	strh	r2, [r0, #4]
 8018e58:	80c3      	strh	r3, [r0, #6]
 8018e5a:	e00e      	b.n	8018e7a <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 8018e5c:	4917      	ldr	r1, [pc, #92]	; (8018ebc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa4>)
 8018e5e:	8809      	ldrh	r1, [r1, #0]
 8018e60:	4411      	add	r1, r2
 8018e62:	428b      	cmp	r3, r1
 8018e64:	da0a      	bge.n	8018e7c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x64>
 8018e66:	1a9b      	subs	r3, r3, r2
 8018e68:	4a15      	ldr	r2, [pc, #84]	; (8018ec0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa8>)
 8018e6a:	6812      	ldr	r2, [r2, #0]
 8018e6c:	210e      	movs	r1, #14
 8018e6e:	fb01 2303 	mla	r3, r1, r3, r2
 8018e72:	681a      	ldr	r2, [r3, #0]
 8018e74:	6002      	str	r2, [r0, #0]
 8018e76:	685a      	ldr	r2, [r3, #4]
 8018e78:	6042      	str	r2, [r0, #4]
 8018e7a:	bd10      	pop	{r4, pc}
 8018e7c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8018e80:	4293      	cmp	r3, r2
 8018e82:	d10b      	bne.n	8018e9c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>
 8018e84:	4b0f      	ldr	r3, [pc, #60]	; (8018ec4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xac>)
 8018e86:	f9b3 1000 	ldrsh.w	r1, [r3]
 8018e8a:	4b0f      	ldr	r3, [pc, #60]	; (8018ec8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xb0>)
 8018e8c:	8081      	strh	r1, [r0, #4]
 8018e8e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018e92:	80c2      	strh	r2, [r0, #6]
 8018e94:	2300      	movs	r3, #0
 8018e96:	8003      	strh	r3, [r0, #0]
 8018e98:	8043      	strh	r3, [r0, #2]
 8018e9a:	e7ee      	b.n	8018e7a <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 8018e9c:	2300      	movs	r3, #0
 8018e9e:	8003      	strh	r3, [r0, #0]
 8018ea0:	8043      	strh	r3, [r0, #2]
 8018ea2:	8083      	strh	r3, [r0, #4]
 8018ea4:	e7d8      	b.n	8018e58 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x40>
 8018ea6:	bf00      	nop
 8018ea8:	2000d26c 	.word	0x2000d26c
 8018eac:	08026374 	.word	0x08026374
 8018eb0:	080273b1 	.word	0x080273b1
 8018eb4:	080272ed 	.word	0x080272ed
 8018eb8:	2000d264 	.word	0x2000d264
 8018ebc:	2000d268 	.word	0x2000d268
 8018ec0:	2000d24c 	.word	0x2000d24c
 8018ec4:	2000d198 	.word	0x2000d198
 8018ec8:	2000d19a 	.word	0x2000d19a

08018ecc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 8018ecc:	4b18      	ldr	r3, [pc, #96]	; (8018f30 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 8018ece:	681b      	ldr	r3, [r3, #0]
 8018ed0:	b34b      	cbz	r3, 8018f26 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 8018ed2:	4a18      	ldr	r2, [pc, #96]	; (8018f34 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 8018ed4:	8800      	ldrh	r0, [r0, #0]
 8018ed6:	8812      	ldrh	r2, [r2, #0]
 8018ed8:	4290      	cmp	r0, r2
 8018eda:	d211      	bcs.n	8018f00 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x34>
 8018edc:	2214      	movs	r2, #20
 8018ede:	fb02 3300 	mla	r3, r2, r0, r3
 8018ee2:	8a1a      	ldrh	r2, [r3, #16]
 8018ee4:	8919      	ldrh	r1, [r3, #8]
 8018ee6:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8018eea:	428a      	cmp	r2, r1
 8018eec:	db1d      	blt.n	8018f2a <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 8018eee:	8a58      	ldrh	r0, [r3, #18]
 8018ef0:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8018ef4:	895b      	ldrh	r3, [r3, #10]
 8018ef6:	4298      	cmp	r0, r3
 8018ef8:	bfac      	ite	ge
 8018efa:	2000      	movge	r0, #0
 8018efc:	2001      	movlt	r0, #1
 8018efe:	4770      	bx	lr
 8018f00:	4b0d      	ldr	r3, [pc, #52]	; (8018f38 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 8018f02:	881b      	ldrh	r3, [r3, #0]
 8018f04:	4413      	add	r3, r2
 8018f06:	4298      	cmp	r0, r3
 8018f08:	da0d      	bge.n	8018f26 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 8018f0a:	4b0c      	ldr	r3, [pc, #48]	; (8018f3c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x70>)
 8018f0c:	681b      	ldr	r3, [r3, #0]
 8018f0e:	1a80      	subs	r0, r0, r2
 8018f10:	220e      	movs	r2, #14
 8018f12:	fb02 3300 	mla	r3, r2, r0, r3
 8018f16:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 8018f1a:	891a      	ldrh	r2, [r3, #8]
 8018f1c:	4291      	cmp	r1, r2
 8018f1e:	db04      	blt.n	8018f2a <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 8018f20:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 8018f24:	e7e6      	b.n	8018ef4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x28>
 8018f26:	2000      	movs	r0, #0
 8018f28:	4770      	bx	lr
 8018f2a:	2001      	movs	r0, #1
 8018f2c:	4770      	bx	lr
 8018f2e:	bf00      	nop
 8018f30:	2000d26c 	.word	0x2000d26c
 8018f34:	2000d264 	.word	0x2000d264
 8018f38:	2000d268 	.word	0x2000d268
 8018f3c:	2000d24c 	.word	0x2000d24c

08018f40 <_ZNK8touchgfx6Bitmap7getDataEv>:
 8018f40:	b508      	push	{r3, lr}
 8018f42:	4b12      	ldr	r3, [pc, #72]	; (8018f8c <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 8018f44:	6819      	ldr	r1, [r3, #0]
 8018f46:	b931      	cbnz	r1, 8018f56 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 8018f48:	4b11      	ldr	r3, [pc, #68]	; (8018f90 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 8018f4a:	4a12      	ldr	r2, [pc, #72]	; (8018f94 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 8018f4c:	4812      	ldr	r0, [pc, #72]	; (8018f98 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 8018f4e:	f240 3132 	movw	r1, #818	; 0x332
 8018f52:	f009 fc4d 	bl	80227f0 <__assert_func>
 8018f56:	8803      	ldrh	r3, [r0, #0]
 8018f58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018f5c:	4293      	cmp	r3, r2
 8018f5e:	d012      	beq.n	8018f86 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 8018f60:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8018f64:	4293      	cmp	r3, r2
 8018f66:	d103      	bne.n	8018f70 <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 8018f68:	4b0c      	ldr	r3, [pc, #48]	; (8018f9c <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 8018f6a:	681b      	ldr	r3, [r3, #0]
 8018f6c:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8018f6e:	bd08      	pop	{r3, pc}
 8018f70:	4a0b      	ldr	r2, [pc, #44]	; (8018fa0 <_ZNK8touchgfx6Bitmap7getDataEv+0x60>)
 8018f72:	6812      	ldr	r2, [r2, #0]
 8018f74:	b11a      	cbz	r2, 8018f7e <_ZNK8touchgfx6Bitmap7getDataEv+0x3e>
 8018f76:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8018f7a:	2800      	cmp	r0, #0
 8018f7c:	d1f7      	bne.n	8018f6e <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 8018f7e:	2214      	movs	r2, #20
 8018f80:	4353      	muls	r3, r2
 8018f82:	58c8      	ldr	r0, [r1, r3]
 8018f84:	e7f3      	b.n	8018f6e <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 8018f86:	2000      	movs	r0, #0
 8018f88:	e7f1      	b.n	8018f6e <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 8018f8a:	bf00      	nop
 8018f8c:	2000d26c 	.word	0x2000d26c
 8018f90:	08026374 	.word	0x08026374
 8018f94:	080273e7 	.word	0x080273e7
 8018f98:	080272ed 	.word	0x080272ed
 8018f9c:	2000d1a4 	.word	0x2000d1a4
 8018fa0:	2000d248 	.word	0x2000d248

08018fa4 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 8018fa4:	8802      	ldrh	r2, [r0, #0]
 8018fa6:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 8018faa:	429a      	cmp	r2, r3
 8018fac:	d840      	bhi.n	8019030 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 8018fae:	4b21      	ldr	r3, [pc, #132]	; (8019034 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>)
 8018fb0:	881b      	ldrh	r3, [r3, #0]
 8018fb2:	429a      	cmp	r2, r3
 8018fb4:	d220      	bcs.n	8018ff8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x54>
 8018fb6:	4b20      	ldr	r3, [pc, #128]	; (8019038 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 8018fb8:	6819      	ldr	r1, [r3, #0]
 8018fba:	2314      	movs	r3, #20
 8018fbc:	fb03 1302 	mla	r3, r3, r2, r1
 8018fc0:	6858      	ldr	r0, [r3, #4]
 8018fc2:	2800      	cmp	r0, #0
 8018fc4:	d035      	beq.n	8019032 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8018fc6:	491d      	ldr	r1, [pc, #116]	; (801903c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 8018fc8:	6809      	ldr	r1, [r1, #0]
 8018fca:	2900      	cmp	r1, #0
 8018fcc:	d031      	beq.n	8019032 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8018fce:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8018fd2:	b371      	cbz	r1, 8019032 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8018fd4:	895a      	ldrh	r2, [r3, #10]
 8018fd6:	8918      	ldrh	r0, [r3, #8]
 8018fd8:	4350      	muls	r0, r2
 8018fda:	7c5a      	ldrb	r2, [r3, #17]
 8018fdc:	7cdb      	ldrb	r3, [r3, #19]
 8018fde:	0952      	lsrs	r2, r2, #5
 8018fe0:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8018fe4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8018fe8:	2b0b      	cmp	r3, #11
 8018fea:	bf18      	it	ne
 8018fec:	0040      	lslne	r0, r0, #1
 8018fee:	3003      	adds	r0, #3
 8018ff0:	f020 0003 	bic.w	r0, r0, #3
 8018ff4:	4408      	add	r0, r1
 8018ff6:	4770      	bx	lr
 8018ff8:	4911      	ldr	r1, [pc, #68]	; (8019040 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8018ffa:	8809      	ldrh	r1, [r1, #0]
 8018ffc:	4419      	add	r1, r3
 8018ffe:	428a      	cmp	r2, r1
 8019000:	da16      	bge.n	8019030 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 8019002:	4910      	ldr	r1, [pc, #64]	; (8019044 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 8019004:	6809      	ldr	r1, [r1, #0]
 8019006:	1ad3      	subs	r3, r2, r3
 8019008:	200e      	movs	r0, #14
 801900a:	fb00 1303 	mla	r3, r0, r3, r1
 801900e:	7b19      	ldrb	r1, [r3, #12]
 8019010:	f001 011f 	and.w	r1, r1, #31
 8019014:	290b      	cmp	r1, #11
 8019016:	d10b      	bne.n	8019030 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 8019018:	8919      	ldrh	r1, [r3, #8]
 801901a:	8958      	ldrh	r0, [r3, #10]
 801901c:	4b07      	ldr	r3, [pc, #28]	; (801903c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801901e:	4348      	muls	r0, r1
 8019020:	6819      	ldr	r1, [r3, #0]
 8019022:	3003      	adds	r0, #3
 8019024:	f020 0303 	bic.w	r3, r0, #3
 8019028:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801902c:	4418      	add	r0, r3
 801902e:	4770      	bx	lr
 8019030:	2000      	movs	r0, #0
 8019032:	4770      	bx	lr
 8019034:	2000d264 	.word	0x2000d264
 8019038:	2000d26c 	.word	0x2000d26c
 801903c:	2000d248 	.word	0x2000d248
 8019040:	2000d268 	.word	0x2000d268
 8019044:	2000d24c 	.word	0x2000d24c

08019048 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 8019048:	4b19      	ldr	r3, [pc, #100]	; (80190b0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 801904a:	6819      	ldr	r1, [r3, #0]
 801904c:	8803      	ldrh	r3, [r0, #0]
 801904e:	b1e9      	cbz	r1, 801908c <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 8019050:	4a18      	ldr	r2, [pc, #96]	; (80190b4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 8019052:	8812      	ldrh	r2, [r2, #0]
 8019054:	429a      	cmp	r2, r3
 8019056:	d90a      	bls.n	801906e <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 8019058:	2214      	movs	r2, #20
 801905a:	fb02 1303 	mla	r3, r2, r3, r1
 801905e:	7c58      	ldrb	r0, [r3, #17]
 8019060:	0942      	lsrs	r2, r0, #5
 8019062:	7cd8      	ldrb	r0, [r3, #19]
 8019064:	f3c0 1042 	ubfx	r0, r0, #5, #3
 8019068:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 801906c:	4770      	bx	lr
 801906e:	4912      	ldr	r1, [pc, #72]	; (80190b8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x70>)
 8019070:	8809      	ldrh	r1, [r1, #0]
 8019072:	4411      	add	r1, r2
 8019074:	428b      	cmp	r3, r1
 8019076:	da09      	bge.n	801908c <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 8019078:	1a9b      	subs	r3, r3, r2
 801907a:	4a10      	ldr	r2, [pc, #64]	; (80190bc <_ZNK8touchgfx6Bitmap9getFormatEv+0x74>)
 801907c:	6812      	ldr	r2, [r2, #0]
 801907e:	210e      	movs	r1, #14
 8019080:	fb01 2303 	mla	r3, r1, r3, r2
 8019084:	7b18      	ldrb	r0, [r3, #12]
 8019086:	f000 001f 	and.w	r0, r0, #31
 801908a:	4770      	bx	lr
 801908c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8019090:	4293      	cmp	r3, r2
 8019092:	d10a      	bne.n	80190aa <_ZNK8touchgfx6Bitmap9getFormatEv+0x62>
 8019094:	4b0a      	ldr	r3, [pc, #40]	; (80190c0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x78>)
 8019096:	681b      	ldr	r3, [r3, #0]
 8019098:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801909c:	b10a      	cbz	r2, 80190a2 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 801909e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80190a0:	b900      	cbnz	r0, 80190a4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5c>
 80190a2:	6898      	ldr	r0, [r3, #8]
 80190a4:	6803      	ldr	r3, [r0, #0]
 80190a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80190a8:	4718      	bx	r3
 80190aa:	2000      	movs	r0, #0
 80190ac:	4770      	bx	lr
 80190ae:	bf00      	nop
 80190b0:	2000d26c 	.word	0x2000d26c
 80190b4:	2000d264 	.word	0x2000d264
 80190b8:	2000d268 	.word	0x2000d268
 80190bc:	2000d24c 	.word	0x2000d24c
 80190c0:	2000d1a4 	.word	0x2000d1a4

080190c4 <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 80190c4:	2018      	movs	r0, #24
 80190c6:	4770      	bx	lr

080190c8 <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 80190c8:	2001      	movs	r0, #1
 80190ca:	4770      	bx	lr

080190cc <_ZNK8touchgfx8LCD24bpp20getColorFrom24BitRGBEhhh>:
 80190cc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80190d0:	ea43 4001 	orr.w	r0, r3, r1, lsl #16
 80190d4:	4770      	bx	lr

080190d6 <_ZNK8touchgfx8LCD24bpp11getRedColorENS_9colortypeE>:
 80190d6:	f3c1 4007 	ubfx	r0, r1, #16, #8
 80190da:	4770      	bx	lr

080190dc <_ZNK8touchgfx8LCD24bpp13getGreenColorENS_9colortypeE>:
 80190dc:	f3c1 2007 	ubfx	r0, r1, #8, #8
 80190e0:	4770      	bx	lr

080190e2 <_ZNK8touchgfx8LCD24bpp12getBlueColorENS_9colortypeE>:
 80190e2:	b2c8      	uxtb	r0, r1
 80190e4:	4770      	bx	lr

080190e6 <_ZN8touchgfx8LCD24bpp4initEv>:
 80190e6:	4770      	bx	lr

080190e8 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80190e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80190ec:	b085      	sub	sp, #20
 80190ee:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 80190f0:	9203      	str	r2, [sp, #12]
 80190f2:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 80190f6:	9201      	str	r2, [sp, #4]
 80190f8:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 80190fc:	6878      	ldr	r0, [r7, #4]
 80190fe:	9e18      	ldr	r6, [sp, #96]	; 0x60
 8019100:	f89d 4064 	ldrb.w	r4, [sp, #100]	; 0x64
 8019104:	f9bd 8058 	ldrsh.w	r8, [sp, #88]	; 0x58
 8019108:	9100      	str	r1, [sp, #0]
 801910a:	fb00 2505 	mla	r5, r0, r5, r2
 801910e:	683a      	ldr	r2, [r7, #0]
 8019110:	6877      	ldr	r7, [r6, #4]
 8019112:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019116:	4415      	add	r5, r2
 8019118:	fa1f fc84 	uxth.w	ip, r4
 801911c:	6832      	ldr	r2, [r6, #0]
 801911e:	9202      	str	r2, [sp, #8]
 8019120:	43e4      	mvns	r4, r4
 8019122:	3704      	adds	r7, #4
 8019124:	b2e4      	uxtb	r4, r4
 8019126:	9a00      	ldr	r2, [sp, #0]
 8019128:	2a00      	cmp	r2, #0
 801912a:	dc03      	bgt.n	8019134 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c>
 801912c:	9a03      	ldr	r2, [sp, #12]
 801912e:	2a00      	cmp	r2, #0
 8019130:	f340 8116 	ble.w	8019360 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 8019134:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8019136:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801913a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801913c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8019140:	2b00      	cmp	r3, #0
 8019142:	dd0f      	ble.n	8019164 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 8019144:	1406      	asrs	r6, r0, #16
 8019146:	d406      	bmi.n	8019156 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 8019148:	4546      	cmp	r6, r8
 801914a:	da04      	bge.n	8019156 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801914c:	1416      	asrs	r6, r2, #16
 801914e:	d402      	bmi.n	8019156 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 8019150:	9901      	ldr	r1, [sp, #4]
 8019152:	428e      	cmp	r6, r1
 8019154:	db07      	blt.n	8019166 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 8019156:	9911      	ldr	r1, [sp, #68]	; 0x44
 8019158:	4408      	add	r0, r1
 801915a:	9912      	ldr	r1, [sp, #72]	; 0x48
 801915c:	3b01      	subs	r3, #1
 801915e:	440a      	add	r2, r1
 8019160:	3503      	adds	r5, #3
 8019162:	e7ed      	b.n	8019140 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x58>
 8019164:	d011      	beq.n	801918a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa2>
 8019166:	9911      	ldr	r1, [sp, #68]	; 0x44
 8019168:	1e5e      	subs	r6, r3, #1
 801916a:	fb01 0e06 	mla	lr, r1, r6, r0
 801916e:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 8019172:	d548      	bpl.n	8019206 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x11e>
 8019174:	4699      	mov	r9, r3
 8019176:	462e      	mov	r6, r5
 8019178:	f1b9 0f00 	cmp.w	r9, #0
 801917c:	f300 809e 	bgt.w	80192bc <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d4>
 8019180:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019184:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019188:	441d      	add	r5, r3
 801918a:	9b00      	ldr	r3, [sp, #0]
 801918c:	2b00      	cmp	r3, #0
 801918e:	f340 80e7 	ble.w	8019360 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 8019192:	ee30 0a04 	vadd.f32	s0, s0, s8
 8019196:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801919a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801919e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80191a0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80191a4:	ee31 1a05 	vadd.f32	s2, s2, s10
 80191a8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80191ac:	eef0 6a62 	vmov.f32	s13, s5
 80191b0:	ee61 7a27 	vmul.f32	s15, s2, s15
 80191b4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80191b8:	ee77 2a62 	vsub.f32	s5, s14, s5
 80191bc:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 80191c0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80191c4:	eef0 6a43 	vmov.f32	s13, s6
 80191c8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80191cc:	ee12 2a90 	vmov	r2, s5
 80191d0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80191d4:	fb92 f3f3 	sdiv	r3, r2, r3
 80191d8:	ee13 2a10 	vmov	r2, s6
 80191dc:	9311      	str	r3, [sp, #68]	; 0x44
 80191de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80191e0:	fb92 f3f3 	sdiv	r3, r2, r3
 80191e4:	9312      	str	r3, [sp, #72]	; 0x48
 80191e6:	9b00      	ldr	r3, [sp, #0]
 80191e8:	9a03      	ldr	r2, [sp, #12]
 80191ea:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80191ee:	3b01      	subs	r3, #1
 80191f0:	9300      	str	r3, [sp, #0]
 80191f2:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 80191f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80191f8:	eeb0 3a67 	vmov.f32	s6, s15
 80191fc:	bf08      	it	eq
 80191fe:	4613      	moveq	r3, r2
 8019200:	eef0 2a47 	vmov.f32	s5, s14
 8019204:	e78f      	b.n	8019126 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3e>
 8019206:	45c6      	cmp	lr, r8
 8019208:	dab4      	bge.n	8019174 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 801920a:	9912      	ldr	r1, [sp, #72]	; 0x48
 801920c:	fb01 2606 	mla	r6, r1, r6, r2
 8019210:	1436      	asrs	r6, r6, #16
 8019212:	d4af      	bmi.n	8019174 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 8019214:	9901      	ldr	r1, [sp, #4]
 8019216:	428e      	cmp	r6, r1
 8019218:	daac      	bge.n	8019174 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 801921a:	1cee      	adds	r6, r5, #3
 801921c:	4699      	mov	r9, r3
 801921e:	f1b9 0f00 	cmp.w	r9, #0
 8019222:	f106 0603 	add.w	r6, r6, #3
 8019226:	ddab      	ble.n	8019180 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 8019228:	9902      	ldr	r1, [sp, #8]
 801922a:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801922e:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8019232:	ea4f 4a20 	mov.w	sl, r0, asr #16
 8019236:	fb08 1e0e 	mla	lr, r8, lr, r1
 801923a:	fb1b fb04 	smulbb	fp, fp, r4
 801923e:	f81e e00a 	ldrb.w	lr, [lr, sl]
 8019242:	9911      	ldr	r1, [sp, #68]	; 0x44
 8019244:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8019248:	eb07 0a0e 	add.w	sl, r7, lr
 801924c:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8019250:	fb0e be0c 	mla	lr, lr, ip, fp
 8019254:	fa1f fe8e 	uxth.w	lr, lr
 8019258:	f10e 0b01 	add.w	fp, lr, #1
 801925c:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 8019260:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8019264:	f806 ec06 	strb.w	lr, [r6, #-6]
 8019268:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801926c:	f89a e001 	ldrb.w	lr, [sl, #1]
 8019270:	fb1b fb04 	smulbb	fp, fp, r4
 8019274:	fb0e be0c 	mla	lr, lr, ip, fp
 8019278:	fa1f fe8e 	uxth.w	lr, lr
 801927c:	f10e 0b01 	add.w	fp, lr, #1
 8019280:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 8019284:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8019288:	f806 ec05 	strb.w	lr, [r6, #-5]
 801928c:	f89a e002 	ldrb.w	lr, [sl, #2]
 8019290:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 8019294:	fb1a fa04 	smulbb	sl, sl, r4
 8019298:	fb0e ae0c 	mla	lr, lr, ip, sl
 801929c:	fa1f fe8e 	uxth.w	lr, lr
 80192a0:	f10e 0a01 	add.w	sl, lr, #1
 80192a4:	eb0a 2e1e 	add.w	lr, sl, lr, lsr #8
 80192a8:	4408      	add	r0, r1
 80192aa:	9912      	ldr	r1, [sp, #72]	; 0x48
 80192ac:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80192b0:	f806 ec04 	strb.w	lr, [r6, #-4]
 80192b4:	440a      	add	r2, r1
 80192b6:	f109 39ff 	add.w	r9, r9, #4294967295
 80192ba:	e7b0      	b.n	801921e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 80192bc:	ea5f 4a20 	movs.w	sl, r0, asr #16
 80192c0:	d446      	bmi.n	8019350 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 80192c2:	45c2      	cmp	sl, r8
 80192c4:	da44      	bge.n	8019350 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 80192c6:	ea5f 4e22 	movs.w	lr, r2, asr #16
 80192ca:	d441      	bmi.n	8019350 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 80192cc:	9901      	ldr	r1, [sp, #4]
 80192ce:	458e      	cmp	lr, r1
 80192d0:	da3e      	bge.n	8019350 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 80192d2:	9902      	ldr	r1, [sp, #8]
 80192d4:	f896 b000 	ldrb.w	fp, [r6]
 80192d8:	fb08 1e0e 	mla	lr, r8, lr, r1
 80192dc:	fb1b fb04 	smulbb	fp, fp, r4
 80192e0:	f81e e00a 	ldrb.w	lr, [lr, sl]
 80192e4:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 80192e8:	eb07 0a0e 	add.w	sl, r7, lr
 80192ec:	f817 e00e 	ldrb.w	lr, [r7, lr]
 80192f0:	fb0e be0c 	mla	lr, lr, ip, fp
 80192f4:	fa1f fe8e 	uxth.w	lr, lr
 80192f8:	f10e 0b01 	add.w	fp, lr, #1
 80192fc:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 8019300:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8019304:	f886 e000 	strb.w	lr, [r6]
 8019308:	f896 b001 	ldrb.w	fp, [r6, #1]
 801930c:	f89a e001 	ldrb.w	lr, [sl, #1]
 8019310:	fb1b fb04 	smulbb	fp, fp, r4
 8019314:	fb0e be0c 	mla	lr, lr, ip, fp
 8019318:	fa1f fe8e 	uxth.w	lr, lr
 801931c:	f10e 0b01 	add.w	fp, lr, #1
 8019320:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 8019324:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8019328:	f886 e001 	strb.w	lr, [r6, #1]
 801932c:	f89a e002 	ldrb.w	lr, [sl, #2]
 8019330:	f896 a002 	ldrb.w	sl, [r6, #2]
 8019334:	fb1a fa04 	smulbb	sl, sl, r4
 8019338:	fb0e ae0c 	mla	lr, lr, ip, sl
 801933c:	fa1f fe8e 	uxth.w	lr, lr
 8019340:	f10e 0a01 	add.w	sl, lr, #1
 8019344:	eb0a 2e1e 	add.w	lr, sl, lr, lsr #8
 8019348:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801934c:	f886 e002 	strb.w	lr, [r6, #2]
 8019350:	9911      	ldr	r1, [sp, #68]	; 0x44
 8019352:	4408      	add	r0, r1
 8019354:	9912      	ldr	r1, [sp, #72]	; 0x48
 8019356:	3603      	adds	r6, #3
 8019358:	440a      	add	r2, r1
 801935a:	f109 39ff 	add.w	r9, r9, #4294967295
 801935e:	e70b      	b.n	8019178 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x90>
 8019360:	b005      	add	sp, #20
 8019362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019366 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8019366:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801936a:	b085      	sub	sp, #20
 801936c:	e9dd c711 	ldrd	ip, r7, [sp, #68]	; 0x44
 8019370:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8019372:	9203      	str	r2, [sp, #12]
 8019374:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8019378:	6870      	ldr	r0, [r6, #4]
 801937a:	9d18      	ldr	r5, [sp, #96]	; 0x60
 801937c:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 8019380:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 8019384:	9101      	str	r1, [sp, #4]
 8019386:	fb00 2404 	mla	r4, r0, r4, r2
 801938a:	6832      	ldr	r2, [r6, #0]
 801938c:	686e      	ldr	r6, [r5, #4]
 801938e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8019392:	4414      	add	r4, r2
 8019394:	682a      	ldr	r2, [r5, #0]
 8019396:	9202      	str	r2, [sp, #8]
 8019398:	3604      	adds	r6, #4
 801939a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801939e:	9a01      	ldr	r2, [sp, #4]
 80193a0:	2a00      	cmp	r2, #0
 80193a2:	dc03      	bgt.n	80193ac <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x46>
 80193a4:	9a03      	ldr	r2, [sp, #12]
 80193a6:	2a00      	cmp	r2, #0
 80193a8:	f340 80b2 	ble.w	8019510 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1aa>
 80193ac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80193ae:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80193b2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80193b4:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80193b8:	2b00      	cmp	r3, #0
 80193ba:	dd0c      	ble.n	80193d6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 80193bc:	1405      	asrs	r5, r0, #16
 80193be:	d405      	bmi.n	80193cc <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 80193c0:	4575      	cmp	r5, lr
 80193c2:	da03      	bge.n	80193cc <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 80193c4:	1415      	asrs	r5, r2, #16
 80193c6:	d401      	bmi.n	80193cc <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 80193c8:	4545      	cmp	r5, r8
 80193ca:	db05      	blt.n	80193d8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 80193cc:	4460      	add	r0, ip
 80193ce:	443a      	add	r2, r7
 80193d0:	3b01      	subs	r3, #1
 80193d2:	3403      	adds	r4, #3
 80193d4:	e7f0      	b.n	80193b8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x52>
 80193d6:	d03d      	beq.n	8019454 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xee>
 80193d8:	1e5d      	subs	r5, r3, #1
 80193da:	fb0c 0905 	mla	r9, ip, r5, r0
 80193de:	ea5f 4929 	movs.w	r9, r9, asr #16
 80193e2:	d42c      	bmi.n	801943e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 80193e4:	45f1      	cmp	r9, lr
 80193e6:	da2a      	bge.n	801943e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 80193e8:	fb07 2505 	mla	r5, r7, r5, r2
 80193ec:	142d      	asrs	r5, r5, #16
 80193ee:	d426      	bmi.n	801943e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 80193f0:	4545      	cmp	r5, r8
 80193f2:	da24      	bge.n	801943e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 80193f4:	1ce5      	adds	r5, r4, #3
 80193f6:	469a      	mov	sl, r3
 80193f8:	f1ba 0f00 	cmp.w	sl, #0
 80193fc:	f105 0503 	add.w	r5, r5, #3
 8019400:	dd23      	ble.n	801944a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 8019402:	9902      	ldr	r1, [sp, #8]
 8019404:	ea4f 4922 	mov.w	r9, r2, asr #16
 8019408:	ea4f 4b20 	mov.w	fp, r0, asr #16
 801940c:	fb0e 1909 	mla	r9, lr, r9, r1
 8019410:	4460      	add	r0, ip
 8019412:	f819 900b 	ldrb.w	r9, [r9, fp]
 8019416:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801941a:	eb06 0b09 	add.w	fp, r6, r9
 801941e:	f816 9009 	ldrb.w	r9, [r6, r9]
 8019422:	f805 9c06 	strb.w	r9, [r5, #-6]
 8019426:	f89b 9001 	ldrb.w	r9, [fp, #1]
 801942a:	f805 9c05 	strb.w	r9, [r5, #-5]
 801942e:	f89b 9002 	ldrb.w	r9, [fp, #2]
 8019432:	f805 9c04 	strb.w	r9, [r5, #-4]
 8019436:	443a      	add	r2, r7
 8019438:	f10a 3aff 	add.w	sl, sl, #4294967295
 801943c:	e7dc      	b.n	80193f8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801943e:	2500      	movs	r5, #0
 8019440:	eba3 0905 	sub.w	r9, r3, r5
 8019444:	f1b9 0f00 	cmp.w	r9, #0
 8019448:	dc3c      	bgt.n	80194c4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15e>
 801944a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801944e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019452:	441c      	add	r4, r3
 8019454:	9b01      	ldr	r3, [sp, #4]
 8019456:	2b00      	cmp	r3, #0
 8019458:	dd5a      	ble.n	8019510 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1aa>
 801945a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801945e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8019462:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8019466:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019468:	ee31 1a05 	vadd.f32	s2, s2, s10
 801946c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019470:	eeb0 6a62 	vmov.f32	s12, s5
 8019474:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019478:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801947c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019480:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8019484:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019488:	eeb0 6a43 	vmov.f32	s12, s6
 801948c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019490:	ee12 2a90 	vmov	r2, s5
 8019494:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8019498:	fb92 fcf3 	sdiv	ip, r2, r3
 801949c:	ee13 2a10 	vmov	r2, s6
 80194a0:	fb92 f7f3 	sdiv	r7, r2, r3
 80194a4:	9b01      	ldr	r3, [sp, #4]
 80194a6:	9a03      	ldr	r2, [sp, #12]
 80194a8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80194ac:	3b01      	subs	r3, #1
 80194ae:	9301      	str	r3, [sp, #4]
 80194b0:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 80194b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80194b6:	eeb0 3a67 	vmov.f32	s6, s15
 80194ba:	bf08      	it	eq
 80194bc:	4613      	moveq	r3, r2
 80194be:	eef0 2a47 	vmov.f32	s5, s14
 80194c2:	e76c      	b.n	801939e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x38>
 80194c4:	ea5f 4a20 	movs.w	sl, r0, asr #16
 80194c8:	d41e      	bmi.n	8019508 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 80194ca:	45f2      	cmp	sl, lr
 80194cc:	da1c      	bge.n	8019508 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 80194ce:	ea5f 4922 	movs.w	r9, r2, asr #16
 80194d2:	d419      	bmi.n	8019508 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 80194d4:	45c1      	cmp	r9, r8
 80194d6:	da17      	bge.n	8019508 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 80194d8:	9902      	ldr	r1, [sp, #8]
 80194da:	fb0e 1909 	mla	r9, lr, r9, r1
 80194de:	f819 900a 	ldrb.w	r9, [r9, sl]
 80194e2:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 80194e6:	eb06 0a09 	add.w	sl, r6, r9
 80194ea:	f816 b009 	ldrb.w	fp, [r6, r9]
 80194ee:	eb05 0945 	add.w	r9, r5, r5, lsl #1
 80194f2:	f804 b009 	strb.w	fp, [r4, r9]
 80194f6:	44a1      	add	r9, r4
 80194f8:	f89a b001 	ldrb.w	fp, [sl, #1]
 80194fc:	f889 b001 	strb.w	fp, [r9, #1]
 8019500:	f89a a002 	ldrb.w	sl, [sl, #2]
 8019504:	f889 a002 	strb.w	sl, [r9, #2]
 8019508:	4460      	add	r0, ip
 801950a:	443a      	add	r2, r7
 801950c:	3501      	adds	r5, #1
 801950e:	e797      	b.n	8019440 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xda>
 8019510:	b005      	add	sp, #20
 8019512:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019516 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8019516:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801951a:	b087      	sub	sp, #28
 801951c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8019520:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8019522:	9204      	str	r2, [sp, #16]
 8019524:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 8019528:	9205      	str	r2, [sp, #20]
 801952a:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 801952e:	6870      	ldr	r0, [r6, #4]
 8019530:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8019532:	f9bd e060 	ldrsh.w	lr, [sp, #96]	; 0x60
 8019536:	f9bd 8064 	ldrsh.w	r8, [sp, #100]	; 0x64
 801953a:	9101      	str	r1, [sp, #4]
 801953c:	fb00 2505 	mla	r5, r0, r5, r2
 8019540:	6832      	ldr	r2, [r6, #0]
 8019542:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019546:	4415      	add	r5, r2
 8019548:	6822      	ldr	r2, [r4, #0]
 801954a:	9202      	str	r2, [sp, #8]
 801954c:	6862      	ldr	r2, [r4, #4]
 801954e:	3204      	adds	r2, #4
 8019550:	9203      	str	r2, [sp, #12]
 8019552:	9a01      	ldr	r2, [sp, #4]
 8019554:	2a00      	cmp	r2, #0
 8019556:	dc03      	bgt.n	8019560 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a>
 8019558:	9a04      	ldr	r2, [sp, #16]
 801955a:	2a00      	cmp	r2, #0
 801955c:	f340 8124 	ble.w	80197a8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 8019560:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8019562:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8019566:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8019568:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801956c:	2b00      	cmp	r3, #0
 801956e:	dd0e      	ble.n	801958e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 8019570:	1422      	asrs	r2, r4, #16
 8019572:	d405      	bmi.n	8019580 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 8019574:	4572      	cmp	r2, lr
 8019576:	da03      	bge.n	8019580 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 8019578:	1402      	asrs	r2, r0, #16
 801957a:	d401      	bmi.n	8019580 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801957c:	4542      	cmp	r2, r8
 801957e:	db07      	blt.n	8019590 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 8019580:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8019582:	4414      	add	r4, r2
 8019584:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8019586:	3b01      	subs	r3, #1
 8019588:	4410      	add	r0, r2
 801958a:	3503      	adds	r5, #3
 801958c:	e7ee      	b.n	801956c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56>
 801958e:	d010      	beq.n	80195b2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9c>
 8019590:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8019592:	1e5a      	subs	r2, r3, #1
 8019594:	fb06 4602 	mla	r6, r6, r2, r4
 8019598:	1436      	asrs	r6, r6, #16
 801959a:	d546      	bpl.n	801962a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x114>
 801959c:	4699      	mov	r9, r3
 801959e:	462f      	mov	r7, r5
 80195a0:	f1b9 0f00 	cmp.w	r9, #0
 80195a4:	f300 80a5 	bgt.w	80196f2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1dc>
 80195a8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80195ac:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80195b0:	441d      	add	r5, r3
 80195b2:	9b01      	ldr	r3, [sp, #4]
 80195b4:	2b00      	cmp	r3, #0
 80195b6:	f340 80f7 	ble.w	80197a8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 80195ba:	ee30 0a04 	vadd.f32	s0, s0, s8
 80195be:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80195c2:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80195c6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80195c8:	ee31 1a05 	vadd.f32	s2, s2, s10
 80195cc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80195d0:	eeb0 6a62 	vmov.f32	s12, s5
 80195d4:	ee61 7a27 	vmul.f32	s15, s2, s15
 80195d8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80195dc:	ee77 2a62 	vsub.f32	s5, s14, s5
 80195e0:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 80195e4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80195e8:	eeb0 6a43 	vmov.f32	s12, s6
 80195ec:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80195f0:	ee12 2a90 	vmov	r2, s5
 80195f4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80195f8:	fb92 f3f3 	sdiv	r3, r2, r3
 80195fc:	ee13 2a10 	vmov	r2, s6
 8019600:	9313      	str	r3, [sp, #76]	; 0x4c
 8019602:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019604:	fb92 f3f3 	sdiv	r3, r2, r3
 8019608:	9314      	str	r3, [sp, #80]	; 0x50
 801960a:	9b01      	ldr	r3, [sp, #4]
 801960c:	9a04      	ldr	r2, [sp, #16]
 801960e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019612:	3b01      	subs	r3, #1
 8019614:	9301      	str	r3, [sp, #4]
 8019616:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801961a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801961c:	eeb0 3a67 	vmov.f32	s6, s15
 8019620:	bf08      	it	eq
 8019622:	4613      	moveq	r3, r2
 8019624:	eef0 2a47 	vmov.f32	s5, s14
 8019628:	e793      	b.n	8019552 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 801962a:	4576      	cmp	r6, lr
 801962c:	dab6      	bge.n	801959c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 801962e:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8019630:	fb06 0202 	mla	r2, r6, r2, r0
 8019634:	1412      	asrs	r2, r2, #16
 8019636:	d4b1      	bmi.n	801959c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 8019638:	4542      	cmp	r2, r8
 801963a:	daaf      	bge.n	801959c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 801963c:	1cef      	adds	r7, r5, #3
 801963e:	4699      	mov	r9, r3
 8019640:	f1b9 0f00 	cmp.w	r9, #0
 8019644:	ddb0      	ble.n	80195a8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 8019646:	9902      	ldr	r1, [sp, #8]
 8019648:	1402      	asrs	r2, r0, #16
 801964a:	1426      	asrs	r6, r4, #16
 801964c:	fb0e 1202 	mla	r2, lr, r2, r1
 8019650:	9903      	ldr	r1, [sp, #12]
 8019652:	5d92      	ldrb	r2, [r2, r6]
 8019654:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 8019658:	ea5f 6c16 	movs.w	ip, r6, lsr #24
 801965c:	d041      	beq.n	80196e2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1cc>
 801965e:	9a05      	ldr	r2, [sp, #20]
 8019660:	fb02 fc0c 	mul.w	ip, r2, ip
 8019664:	f10c 0201 	add.w	r2, ip, #1
 8019668:	eb02 222c 	add.w	r2, r2, ip, asr #8
 801966c:	1212      	asrs	r2, r2, #8
 801966e:	fa1f fa82 	uxth.w	sl, r2
 8019672:	f817 cc03 	ldrb.w	ip, [r7, #-3]
 8019676:	fa5f fb86 	uxtb.w	fp, r6
 801967a:	43d2      	mvns	r2, r2
 801967c:	b2d2      	uxtb	r2, r2
 801967e:	fb1b fb0a 	smulbb	fp, fp, sl
 8019682:	fb0c bc02 	mla	ip, ip, r2, fp
 8019686:	fa1f fc8c 	uxth.w	ip, ip
 801968a:	f10c 0b01 	add.w	fp, ip, #1
 801968e:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 8019692:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8019696:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801969a:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801969e:	fb1b fb0a 	smulbb	fp, fp, sl
 80196a2:	f807 cc03 	strb.w	ip, [r7, #-3]
 80196a6:	fb16 fa0a 	smulbb	sl, r6, sl
 80196aa:	f817 cc02 	ldrb.w	ip, [r7, #-2]
 80196ae:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 80196b2:	fb0c bc02 	mla	ip, ip, r2, fp
 80196b6:	fb06 aa02 	mla	sl, r6, r2, sl
 80196ba:	fa1f fc8c 	uxth.w	ip, ip
 80196be:	fa1f fa8a 	uxth.w	sl, sl
 80196c2:	f10c 0b01 	add.w	fp, ip, #1
 80196c6:	f10a 0601 	add.w	r6, sl, #1
 80196ca:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 80196ce:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 80196d2:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80196d6:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80196da:	f807 cc02 	strb.w	ip, [r7, #-2]
 80196de:	f807 ac01 	strb.w	sl, [r7, #-1]
 80196e2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80196e4:	4414      	add	r4, r2
 80196e6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80196e8:	3703      	adds	r7, #3
 80196ea:	4410      	add	r0, r2
 80196ec:	f109 39ff 	add.w	r9, r9, #4294967295
 80196f0:	e7a6      	b.n	8019640 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12a>
 80196f2:	1426      	asrs	r6, r4, #16
 80196f4:	d450      	bmi.n	8019798 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 80196f6:	4576      	cmp	r6, lr
 80196f8:	da4e      	bge.n	8019798 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 80196fa:	1402      	asrs	r2, r0, #16
 80196fc:	d44c      	bmi.n	8019798 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 80196fe:	4542      	cmp	r2, r8
 8019700:	da4a      	bge.n	8019798 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8019702:	9902      	ldr	r1, [sp, #8]
 8019704:	fb0e 1202 	mla	r2, lr, r2, r1
 8019708:	9903      	ldr	r1, [sp, #12]
 801970a:	5d92      	ldrb	r2, [r2, r6]
 801970c:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 8019710:	ea5f 6c16 	movs.w	ip, r6, lsr #24
 8019714:	d040      	beq.n	8019798 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8019716:	9a05      	ldr	r2, [sp, #20]
 8019718:	fb02 fc0c 	mul.w	ip, r2, ip
 801971c:	f10c 0201 	add.w	r2, ip, #1
 8019720:	eb02 222c 	add.w	r2, r2, ip, asr #8
 8019724:	1212      	asrs	r2, r2, #8
 8019726:	fa1f fa82 	uxth.w	sl, r2
 801972a:	f897 c000 	ldrb.w	ip, [r7]
 801972e:	fa5f fb86 	uxtb.w	fp, r6
 8019732:	43d2      	mvns	r2, r2
 8019734:	b2d2      	uxtb	r2, r2
 8019736:	fb1b fb0a 	smulbb	fp, fp, sl
 801973a:	fb0c bc02 	mla	ip, ip, r2, fp
 801973e:	fa1f fc8c 	uxth.w	ip, ip
 8019742:	f10c 0b01 	add.w	fp, ip, #1
 8019746:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801974a:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801974e:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 8019752:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8019756:	fb1b fb0a 	smulbb	fp, fp, sl
 801975a:	f887 c000 	strb.w	ip, [r7]
 801975e:	fb16 fa0a 	smulbb	sl, r6, sl
 8019762:	f897 c001 	ldrb.w	ip, [r7, #1]
 8019766:	78be      	ldrb	r6, [r7, #2]
 8019768:	fb0c bc02 	mla	ip, ip, r2, fp
 801976c:	fb06 aa02 	mla	sl, r6, r2, sl
 8019770:	fa1f fc8c 	uxth.w	ip, ip
 8019774:	fa1f fa8a 	uxth.w	sl, sl
 8019778:	f10c 0b01 	add.w	fp, ip, #1
 801977c:	f10a 0601 	add.w	r6, sl, #1
 8019780:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 8019784:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 8019788:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801978c:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8019790:	f887 c001 	strb.w	ip, [r7, #1]
 8019794:	f887 a002 	strb.w	sl, [r7, #2]
 8019798:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801979a:	4414      	add	r4, r2
 801979c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801979e:	3703      	adds	r7, #3
 80197a0:	4410      	add	r0, r2
 80197a2:	f109 39ff 	add.w	r9, r9, #4294967295
 80197a6:	e6fb      	b.n	80195a0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 80197a8:	b007      	add	sp, #28
 80197aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080197ae <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80197ae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80197b2:	b085      	sub	sp, #20
 80197b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80197b8:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 80197ba:	9203      	str	r2, [sp, #12]
 80197bc:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 80197c0:	6870      	ldr	r0, [r6, #4]
 80197c2:	9d18      	ldr	r5, [sp, #96]	; 0x60
 80197c4:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 80197c8:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 80197cc:	9100      	str	r1, [sp, #0]
 80197ce:	fb00 2404 	mla	r4, r0, r4, r2
 80197d2:	6832      	ldr	r2, [r6, #0]
 80197d4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80197d8:	4414      	add	r4, r2
 80197da:	682a      	ldr	r2, [r5, #0]
 80197dc:	9201      	str	r2, [sp, #4]
 80197de:	686a      	ldr	r2, [r5, #4]
 80197e0:	3204      	adds	r2, #4
 80197e2:	9202      	str	r2, [sp, #8]
 80197e4:	9a00      	ldr	r2, [sp, #0]
 80197e6:	2a00      	cmp	r2, #0
 80197e8:	dc03      	bgt.n	80197f2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44>
 80197ea:	9a03      	ldr	r2, [sp, #12]
 80197ec:	2a00      	cmp	r2, #0
 80197ee:	f340 8131 	ble.w	8019a54 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a6>
 80197f2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80197f4:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80197f8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80197fa:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80197fe:	2b00      	cmp	r3, #0
 8019800:	dd0e      	ble.n	8019820 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 8019802:	1405      	asrs	r5, r0, #16
 8019804:	d405      	bmi.n	8019812 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 8019806:	4575      	cmp	r5, lr
 8019808:	da03      	bge.n	8019812 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801980a:	1415      	asrs	r5, r2, #16
 801980c:	d401      	bmi.n	8019812 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801980e:	4545      	cmp	r5, r8
 8019810:	db07      	blt.n	8019822 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 8019812:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8019814:	4428      	add	r0, r5
 8019816:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8019818:	3b01      	subs	r3, #1
 801981a:	442a      	add	r2, r5
 801981c:	3403      	adds	r4, #3
 801981e:	e7ee      	b.n	80197fe <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x50>
 8019820:	d06f      	beq.n	8019902 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x154>
 8019822:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8019824:	1e5d      	subs	r5, r3, #1
 8019826:	fb06 0605 	mla	r6, r6, r5, r0
 801982a:	1436      	asrs	r6, r6, #16
 801982c:	d460      	bmi.n	80198f0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801982e:	4576      	cmp	r6, lr
 8019830:	da5e      	bge.n	80198f0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 8019832:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8019834:	fb06 2505 	mla	r5, r6, r5, r2
 8019838:	142d      	asrs	r5, r5, #16
 801983a:	d459      	bmi.n	80198f0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801983c:	4545      	cmp	r5, r8
 801983e:	da57      	bge.n	80198f0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 8019840:	1ce5      	adds	r5, r4, #3
 8019842:	469a      	mov	sl, r3
 8019844:	f1ba 0f00 	cmp.w	sl, #0
 8019848:	dd56      	ble.n	80198f8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x14a>
 801984a:	9901      	ldr	r1, [sp, #4]
 801984c:	1416      	asrs	r6, r2, #16
 801984e:	1407      	asrs	r7, r0, #16
 8019850:	fb0e 1606 	mla	r6, lr, r6, r1
 8019854:	9902      	ldr	r1, [sp, #8]
 8019856:	5df6      	ldrb	r6, [r6, r7]
 8019858:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 801985c:	0e37      	lsrs	r7, r6, #24
 801985e:	2fff      	cmp	r7, #255	; 0xff
 8019860:	f000 80ef 	beq.w	8019a42 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x294>
 8019864:	fa5f fc87 	uxtb.w	ip, r7
 8019868:	b3d7      	cbz	r7, 80198e0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x132>
 801986a:	fa1f f78c 	uxth.w	r7, ip
 801986e:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 8019872:	fa5f fb86 	uxtb.w	fp, r6
 8019876:	ea6f 0c0c 	mvn.w	ip, ip
 801987a:	fa5f fc8c 	uxtb.w	ip, ip
 801987e:	fb1b fb07 	smulbb	fp, fp, r7
 8019882:	fb09 b90c 	mla	r9, r9, ip, fp
 8019886:	fa1f f989 	uxth.w	r9, r9
 801988a:	f109 0b01 	add.w	fp, r9, #1
 801988e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8019892:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 8019896:	ea4f 2929 	mov.w	r9, r9, asr #8
 801989a:	fb1b fb0c 	smulbb	fp, fp, ip
 801989e:	f805 9c03 	strb.w	r9, [r5, #-3]
 80198a2:	f3c6 2907 	ubfx	r9, r6, #8, #8
 80198a6:	fb09 b907 	mla	r9, r9, r7, fp
 80198aa:	fa1f f989 	uxth.w	r9, r9
 80198ae:	f109 0b01 	add.w	fp, r9, #1
 80198b2:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80198b6:	ea4f 2929 	mov.w	r9, r9, asr #8
 80198ba:	f805 9c02 	strb.w	r9, [r5, #-2]
 80198be:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 80198c2:	f3c6 4607 	ubfx	r6, r6, #16, #8
 80198c6:	fb19 fc0c 	smulbb	ip, r9, ip
 80198ca:	fb06 c607 	mla	r6, r6, r7, ip
 80198ce:	b2b6      	uxth	r6, r6
 80198d0:	f106 0c01 	add.w	ip, r6, #1
 80198d4:	eb0c 2c16 	add.w	ip, ip, r6, lsr #8
 80198d8:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80198dc:	f805 cc01 	strb.w	ip, [r5, #-1]
 80198e0:	9911      	ldr	r1, [sp, #68]	; 0x44
 80198e2:	4408      	add	r0, r1
 80198e4:	9912      	ldr	r1, [sp, #72]	; 0x48
 80198e6:	3503      	adds	r5, #3
 80198e8:	440a      	add	r2, r1
 80198ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 80198ee:	e7a9      	b.n	8019844 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 80198f0:	2600      	movs	r6, #0
 80198f2:	1b9d      	subs	r5, r3, r6
 80198f4:	2d00      	cmp	r5, #0
 80198f6:	dc40      	bgt.n	801997a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1cc>
 80198f8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80198fc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019900:	441c      	add	r4, r3
 8019902:	9b00      	ldr	r3, [sp, #0]
 8019904:	2b00      	cmp	r3, #0
 8019906:	f340 80a5 	ble.w	8019a54 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a6>
 801990a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801990e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8019912:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8019916:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019918:	ee31 1a05 	vadd.f32	s2, s2, s10
 801991c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019920:	eeb0 6a62 	vmov.f32	s12, s5
 8019924:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019928:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801992c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019930:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8019934:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019938:	eeb0 6a43 	vmov.f32	s12, s6
 801993c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019940:	ee12 2a90 	vmov	r2, s5
 8019944:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8019948:	fb92 f3f3 	sdiv	r3, r2, r3
 801994c:	ee13 2a10 	vmov	r2, s6
 8019950:	9311      	str	r3, [sp, #68]	; 0x44
 8019952:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019954:	fb92 f3f3 	sdiv	r3, r2, r3
 8019958:	9312      	str	r3, [sp, #72]	; 0x48
 801995a:	9b00      	ldr	r3, [sp, #0]
 801995c:	9a03      	ldr	r2, [sp, #12]
 801995e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019962:	3b01      	subs	r3, #1
 8019964:	9300      	str	r3, [sp, #0]
 8019966:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801996a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801996c:	eeb0 3a67 	vmov.f32	s6, s15
 8019970:	bf08      	it	eq
 8019972:	4613      	moveq	r3, r2
 8019974:	eef0 2a47 	vmov.f32	s5, s14
 8019978:	e734      	b.n	80197e4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36>
 801997a:	1407      	asrs	r7, r0, #16
 801997c:	d450      	bmi.n	8019a20 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801997e:	4577      	cmp	r7, lr
 8019980:	da4e      	bge.n	8019a20 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 8019982:	1415      	asrs	r5, r2, #16
 8019984:	d44c      	bmi.n	8019a20 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 8019986:	4545      	cmp	r5, r8
 8019988:	da4a      	bge.n	8019a20 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801998a:	9901      	ldr	r1, [sp, #4]
 801998c:	fb0e 1505 	mla	r5, lr, r5, r1
 8019990:	9902      	ldr	r1, [sp, #8]
 8019992:	5ded      	ldrb	r5, [r5, r7]
 8019994:	f851 5025 	ldr.w	r5, [r1, r5, lsl #2]
 8019998:	0e2f      	lsrs	r7, r5, #24
 801999a:	2fff      	cmp	r7, #255	; 0xff
 801999c:	d046      	beq.n	8019a2c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27e>
 801999e:	fa5f f987 	uxtb.w	r9, r7
 80199a2:	b3ef      	cbz	r7, 8019a20 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 80199a4:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 80199a8:	fa1f fc89 	uxth.w	ip, r9
 80199ac:	f814 a007 	ldrb.w	sl, [r4, r7]
 80199b0:	fa5f fb85 	uxtb.w	fp, r5
 80199b4:	ea6f 0909 	mvn.w	r9, r9
 80199b8:	fa5f f989 	uxtb.w	r9, r9
 80199bc:	fb1b fb0c 	smulbb	fp, fp, ip
 80199c0:	fb0a ba09 	mla	sl, sl, r9, fp
 80199c4:	fa1f fa8a 	uxth.w	sl, sl
 80199c8:	f10a 0b01 	add.w	fp, sl, #1
 80199cc:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 80199d0:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80199d4:	f804 a007 	strb.w	sl, [r4, r7]
 80199d8:	4427      	add	r7, r4
 80199da:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 80199de:	f897 b001 	ldrb.w	fp, [r7, #1]
 80199e2:	fb1b fb09 	smulbb	fp, fp, r9
 80199e6:	fb0a ba0c 	mla	sl, sl, ip, fp
 80199ea:	fa1f fa8a 	uxth.w	sl, sl
 80199ee:	f10a 0b01 	add.w	fp, sl, #1
 80199f2:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 80199f6:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80199fa:	f887 a001 	strb.w	sl, [r7, #1]
 80199fe:	f897 a002 	ldrb.w	sl, [r7, #2]
 8019a02:	f3c5 4507 	ubfx	r5, r5, #16, #8
 8019a06:	fb1a f909 	smulbb	r9, sl, r9
 8019a0a:	fb05 950c 	mla	r5, r5, ip, r9
 8019a0e:	b2ad      	uxth	r5, r5
 8019a10:	f105 0901 	add.w	r9, r5, #1
 8019a14:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 8019a18:	ea4f 2929 	mov.w	r9, r9, asr #8
 8019a1c:	f887 9002 	strb.w	r9, [r7, #2]
 8019a20:	9911      	ldr	r1, [sp, #68]	; 0x44
 8019a22:	4408      	add	r0, r1
 8019a24:	9912      	ldr	r1, [sp, #72]	; 0x48
 8019a26:	3601      	adds	r6, #1
 8019a28:	440a      	add	r2, r1
 8019a2a:	e762      	b.n	80198f2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x144>
 8019a2c:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 8019a30:	ea4f 2c15 	mov.w	ip, r5, lsr #8
 8019a34:	55e5      	strb	r5, [r4, r7]
 8019a36:	4427      	add	r7, r4
 8019a38:	0c2d      	lsrs	r5, r5, #16
 8019a3a:	f887 c001 	strb.w	ip, [r7, #1]
 8019a3e:	70bd      	strb	r5, [r7, #2]
 8019a40:	e7ee      	b.n	8019a20 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 8019a42:	0a37      	lsrs	r7, r6, #8
 8019a44:	f805 6c03 	strb.w	r6, [r5, #-3]
 8019a48:	0c36      	lsrs	r6, r6, #16
 8019a4a:	f805 7c02 	strb.w	r7, [r5, #-2]
 8019a4e:	f805 6c01 	strb.w	r6, [r5, #-1]
 8019a52:	e745      	b.n	80198e0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x132>
 8019a54:	b005      	add	sp, #20
 8019a56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019a5a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8019a5a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019a5e:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8019a60:	9201      	str	r2, [sp, #4]
 8019a62:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 8019a66:	9200      	str	r2, [sp, #0]
 8019a68:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 8019a6c:	6870      	ldr	r0, [r6, #4]
 8019a6e:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 8019a72:	f9bd e050 	ldrsh.w	lr, [sp, #80]	; 0x50
 8019a76:	fb00 2404 	mla	r4, r0, r4, r2
 8019a7a:	6832      	ldr	r2, [r6, #0]
 8019a7c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8019a80:	4414      	add	r4, r2
 8019a82:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8019a84:	fa1f fc85 	uxth.w	ip, r5
 8019a88:	f8d2 8000 	ldr.w	r8, [r2]
 8019a8c:	43ed      	mvns	r5, r5
 8019a8e:	b2ed      	uxtb	r5, r5
 8019a90:	2900      	cmp	r1, #0
 8019a92:	dc03      	bgt.n	8019a9c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42>
 8019a94:	9a01      	ldr	r2, [sp, #4]
 8019a96:	2a00      	cmp	r2, #0
 8019a98:	f340 8104 	ble.w	8019ca4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24a>
 8019a9c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8019a9e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8019aa2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8019aa4:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8019aa8:	2b00      	cmp	r3, #0
 8019aaa:	dd0f      	ble.n	8019acc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 8019aac:	1406      	asrs	r6, r0, #16
 8019aae:	d406      	bmi.n	8019abe <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 8019ab0:	4576      	cmp	r6, lr
 8019ab2:	da04      	bge.n	8019abe <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 8019ab4:	1416      	asrs	r6, r2, #16
 8019ab6:	d402      	bmi.n	8019abe <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 8019ab8:	9f00      	ldr	r7, [sp, #0]
 8019aba:	42be      	cmp	r6, r7
 8019abc:	db07      	blt.n	8019ace <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 8019abe:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8019ac0:	4430      	add	r0, r6
 8019ac2:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8019ac4:	3b01      	subs	r3, #1
 8019ac6:	4432      	add	r2, r6
 8019ac8:	3403      	adds	r4, #3
 8019aca:	e7ed      	b.n	8019aa8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e>
 8019acc:	d05f      	beq.n	8019b8e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x134>
 8019ace:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8019ad0:	1e5e      	subs	r6, r3, #1
 8019ad2:	fb07 0706 	mla	r7, r7, r6, r0
 8019ad6:	143f      	asrs	r7, r7, #16
 8019ad8:	d450      	bmi.n	8019b7c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 8019ada:	4577      	cmp	r7, lr
 8019adc:	da4e      	bge.n	8019b7c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 8019ade:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8019ae0:	fb07 2606 	mla	r6, r7, r6, r2
 8019ae4:	1436      	asrs	r6, r6, #16
 8019ae6:	d449      	bmi.n	8019b7c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 8019ae8:	9f00      	ldr	r7, [sp, #0]
 8019aea:	42be      	cmp	r6, r7
 8019aec:	da46      	bge.n	8019b7c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 8019aee:	1ce6      	adds	r6, r4, #3
 8019af0:	4699      	mov	r9, r3
 8019af2:	f1b9 0f00 	cmp.w	r9, #0
 8019af6:	f106 0603 	add.w	r6, r6, #3
 8019afa:	dd43      	ble.n	8019b84 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12a>
 8019afc:	ea4f 4a20 	mov.w	sl, r0, asr #16
 8019b00:	1417      	asrs	r7, r2, #16
 8019b02:	fb0e a707 	mla	r7, lr, r7, sl
 8019b06:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8019b0a:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 8019b0e:	eb08 0a07 	add.w	sl, r8, r7
 8019b12:	f818 7007 	ldrb.w	r7, [r8, r7]
 8019b16:	fb1b fb05 	smulbb	fp, fp, r5
 8019b1a:	fb07 b70c 	mla	r7, r7, ip, fp
 8019b1e:	b2bf      	uxth	r7, r7
 8019b20:	f107 0b01 	add.w	fp, r7, #1
 8019b24:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8019b28:	123f      	asrs	r7, r7, #8
 8019b2a:	f806 7c06 	strb.w	r7, [r6, #-6]
 8019b2e:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 8019b32:	f89a 7001 	ldrb.w	r7, [sl, #1]
 8019b36:	fb1b fb05 	smulbb	fp, fp, r5
 8019b3a:	fb07 b70c 	mla	r7, r7, ip, fp
 8019b3e:	b2bf      	uxth	r7, r7
 8019b40:	f107 0b01 	add.w	fp, r7, #1
 8019b44:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8019b48:	123f      	asrs	r7, r7, #8
 8019b4a:	f806 7c05 	strb.w	r7, [r6, #-5]
 8019b4e:	f89a 7002 	ldrb.w	r7, [sl, #2]
 8019b52:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 8019b56:	fb1a fa05 	smulbb	sl, sl, r5
 8019b5a:	fb07 a70c 	mla	r7, r7, ip, sl
 8019b5e:	b2bf      	uxth	r7, r7
 8019b60:	f107 0a01 	add.w	sl, r7, #1
 8019b64:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 8019b68:	123f      	asrs	r7, r7, #8
 8019b6a:	f806 7c04 	strb.w	r7, [r6, #-4]
 8019b6e:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8019b70:	4438      	add	r0, r7
 8019b72:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8019b74:	f109 39ff 	add.w	r9, r9, #4294967295
 8019b78:	443a      	add	r2, r7
 8019b7a:	e7ba      	b.n	8019af2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 8019b7c:	2700      	movs	r7, #0
 8019b7e:	1bde      	subs	r6, r3, r7
 8019b80:	2e00      	cmp	r6, #0
 8019b82:	dc3f      	bgt.n	8019c04 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1aa>
 8019b84:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019b88:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019b8c:	441c      	add	r4, r3
 8019b8e:	2900      	cmp	r1, #0
 8019b90:	f340 8088 	ble.w	8019ca4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24a>
 8019b94:	ee30 0a04 	vadd.f32	s0, s0, s8
 8019b98:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8019b9c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8019ba0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019ba2:	3901      	subs	r1, #1
 8019ba4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8019ba8:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019bac:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019bb0:	eef0 6a62 	vmov.f32	s13, s5
 8019bb4:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019bb8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019bbc:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019bc0:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 8019bc4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019bc8:	eef0 6a43 	vmov.f32	s13, s6
 8019bcc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019bd0:	ee12 2a90 	vmov	r2, s5
 8019bd4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8019bd8:	fb92 f3f3 	sdiv	r3, r2, r3
 8019bdc:	ee13 2a10 	vmov	r2, s6
 8019be0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019be4:	930f      	str	r3, [sp, #60]	; 0x3c
 8019be6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019be8:	fb92 f3f3 	sdiv	r3, r2, r3
 8019bec:	9a01      	ldr	r2, [sp, #4]
 8019bee:	9310      	str	r3, [sp, #64]	; 0x40
 8019bf0:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 8019bf4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019bf6:	eeb0 3a67 	vmov.f32	s6, s15
 8019bfa:	bf08      	it	eq
 8019bfc:	4613      	moveq	r3, r2
 8019bfe:	eef0 2a47 	vmov.f32	s5, s14
 8019c02:	e745      	b.n	8019a90 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36>
 8019c04:	ea5f 4a20 	movs.w	sl, r0, asr #16
 8019c08:	d446      	bmi.n	8019c98 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 8019c0a:	45f2      	cmp	sl, lr
 8019c0c:	da44      	bge.n	8019c98 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 8019c0e:	ea5f 4922 	movs.w	r9, r2, asr #16
 8019c12:	d441      	bmi.n	8019c98 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 8019c14:	9e00      	ldr	r6, [sp, #0]
 8019c16:	45b1      	cmp	r9, r6
 8019c18:	da3e      	bge.n	8019c98 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 8019c1a:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 8019c1e:	fb0e a909 	mla	r9, lr, r9, sl
 8019c22:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8019c26:	f814 b006 	ldrb.w	fp, [r4, r6]
 8019c2a:	eb08 0a09 	add.w	sl, r8, r9
 8019c2e:	f818 9009 	ldrb.w	r9, [r8, r9]
 8019c32:	fb1b fb05 	smulbb	fp, fp, r5
 8019c36:	fb09 b90c 	mla	r9, r9, ip, fp
 8019c3a:	fa1f f989 	uxth.w	r9, r9
 8019c3e:	f109 0b01 	add.w	fp, r9, #1
 8019c42:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8019c46:	ea4f 2929 	mov.w	r9, r9, asr #8
 8019c4a:	f804 9006 	strb.w	r9, [r4, r6]
 8019c4e:	4426      	add	r6, r4
 8019c50:	f89a 9001 	ldrb.w	r9, [sl, #1]
 8019c54:	f896 b001 	ldrb.w	fp, [r6, #1]
 8019c58:	fb1b fb05 	smulbb	fp, fp, r5
 8019c5c:	fb09 b90c 	mla	r9, r9, ip, fp
 8019c60:	fa1f f989 	uxth.w	r9, r9
 8019c64:	f109 0b01 	add.w	fp, r9, #1
 8019c68:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8019c6c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8019c70:	f886 9001 	strb.w	r9, [r6, #1]
 8019c74:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8019c78:	f896 a002 	ldrb.w	sl, [r6, #2]
 8019c7c:	fb1a fa05 	smulbb	sl, sl, r5
 8019c80:	fb09 a90c 	mla	r9, r9, ip, sl
 8019c84:	fa1f f989 	uxth.w	r9, r9
 8019c88:	f109 0a01 	add.w	sl, r9, #1
 8019c8c:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 8019c90:	ea4f 2929 	mov.w	r9, r9, asr #8
 8019c94:	f886 9002 	strb.w	r9, [r6, #2]
 8019c98:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8019c9a:	4430      	add	r0, r6
 8019c9c:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8019c9e:	3701      	adds	r7, #1
 8019ca0:	4432      	add	r2, r6
 8019ca2:	e76c      	b.n	8019b7e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x124>
 8019ca4:	b003      	add	sp, #12
 8019ca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019caa <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8019caa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019cae:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8019cb0:	9201      	str	r2, [sp, #4]
 8019cb2:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 8019cb6:	6868      	ldr	r0, [r5, #4]
 8019cb8:	f9bd c050 	ldrsh.w	ip, [sp, #80]	; 0x50
 8019cbc:	f9bd e054 	ldrsh.w	lr, [sp, #84]	; 0x54
 8019cc0:	fb00 2404 	mla	r4, r0, r4, r2
 8019cc4:	682a      	ldr	r2, [r5, #0]
 8019cc6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8019cca:	4414      	add	r4, r2
 8019ccc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8019cce:	e9dd 760f 	ldrd	r7, r6, [sp, #60]	; 0x3c
 8019cd2:	f8d2 9000 	ldr.w	r9, [r2]
 8019cd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8019cda:	2900      	cmp	r1, #0
 8019cdc:	dc03      	bgt.n	8019ce6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 8019cde:	9a01      	ldr	r2, [sp, #4]
 8019ce0:	2a00      	cmp	r2, #0
 8019ce2:	f340 80a8 	ble.w	8019e36 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18c>
 8019ce6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8019ce8:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8019cec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8019cee:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8019cf2:	2b00      	cmp	r3, #0
 8019cf4:	dd0c      	ble.n	8019d10 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 8019cf6:	1405      	asrs	r5, r0, #16
 8019cf8:	d405      	bmi.n	8019d06 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 8019cfa:	4565      	cmp	r5, ip
 8019cfc:	da03      	bge.n	8019d06 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 8019cfe:	1415      	asrs	r5, r2, #16
 8019d00:	d401      	bmi.n	8019d06 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 8019d02:	4575      	cmp	r5, lr
 8019d04:	db05      	blt.n	8019d12 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 8019d06:	4438      	add	r0, r7
 8019d08:	4432      	add	r2, r6
 8019d0a:	3b01      	subs	r3, #1
 8019d0c:	3403      	adds	r4, #3
 8019d0e:	e7f0      	b.n	8019cf2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x48>
 8019d10:	d03a      	beq.n	8019d88 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 8019d12:	1e5d      	subs	r5, r3, #1
 8019d14:	fb07 0805 	mla	r8, r7, r5, r0
 8019d18:	ea5f 4828 	movs.w	r8, r8, asr #16
 8019d1c:	d429      	bmi.n	8019d72 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 8019d1e:	45e0      	cmp	r8, ip
 8019d20:	da27      	bge.n	8019d72 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 8019d22:	fb06 2505 	mla	r5, r6, r5, r2
 8019d26:	142d      	asrs	r5, r5, #16
 8019d28:	d423      	bmi.n	8019d72 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 8019d2a:	4575      	cmp	r5, lr
 8019d2c:	da21      	bge.n	8019d72 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 8019d2e:	f104 0803 	add.w	r8, r4, #3
 8019d32:	469a      	mov	sl, r3
 8019d34:	f1ba 0f00 	cmp.w	sl, #0
 8019d38:	f108 0803 	add.w	r8, r8, #3
 8019d3c:	dd1f      	ble.n	8019d7e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd4>
 8019d3e:	ea4f 4b20 	mov.w	fp, r0, asr #16
 8019d42:	1415      	asrs	r5, r2, #16
 8019d44:	fb0c b505 	mla	r5, ip, r5, fp
 8019d48:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019d4c:	eb09 0b05 	add.w	fp, r9, r5
 8019d50:	f819 5005 	ldrb.w	r5, [r9, r5]
 8019d54:	f808 5c06 	strb.w	r5, [r8, #-6]
 8019d58:	f89b 5001 	ldrb.w	r5, [fp, #1]
 8019d5c:	f808 5c05 	strb.w	r5, [r8, #-5]
 8019d60:	f89b 5002 	ldrb.w	r5, [fp, #2]
 8019d64:	f808 5c04 	strb.w	r5, [r8, #-4]
 8019d68:	4438      	add	r0, r7
 8019d6a:	4432      	add	r2, r6
 8019d6c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8019d70:	e7e0      	b.n	8019d34 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 8019d72:	2500      	movs	r5, #0
 8019d74:	eba3 0805 	sub.w	r8, r3, r5
 8019d78:	f1b8 0f00 	cmp.w	r8, #0
 8019d7c:	dc38      	bgt.n	8019df0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x146>
 8019d7e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019d82:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019d86:	441c      	add	r4, r3
 8019d88:	2900      	cmp	r1, #0
 8019d8a:	dd54      	ble.n	8019e36 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18c>
 8019d8c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8019d90:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8019d94:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8019d98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019d9a:	3901      	subs	r1, #1
 8019d9c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019da0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019da4:	eeb0 6a62 	vmov.f32	s12, s5
 8019da8:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019dac:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019db0:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019db4:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 8019db8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019dbc:	eeb0 6a43 	vmov.f32	s12, s6
 8019dc0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019dc4:	ee12 2a90 	vmov	r2, s5
 8019dc8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8019dcc:	fb92 f7f3 	sdiv	r7, r2, r3
 8019dd0:	ee13 2a10 	vmov	r2, s6
 8019dd4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019dd8:	fb92 f6f3 	sdiv	r6, r2, r3
 8019ddc:	9a01      	ldr	r2, [sp, #4]
 8019dde:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 8019de2:	bf08      	it	eq
 8019de4:	4613      	moveq	r3, r2
 8019de6:	eeb0 3a67 	vmov.f32	s6, s15
 8019dea:	eef0 2a47 	vmov.f32	s5, s14
 8019dee:	e774      	b.n	8019cda <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30>
 8019df0:	ea5f 4a20 	movs.w	sl, r0, asr #16
 8019df4:	d41b      	bmi.n	8019e2e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 8019df6:	45e2      	cmp	sl, ip
 8019df8:	da19      	bge.n	8019e2e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 8019dfa:	ea5f 4822 	movs.w	r8, r2, asr #16
 8019dfe:	d416      	bmi.n	8019e2e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 8019e00:	45f0      	cmp	r8, lr
 8019e02:	da14      	bge.n	8019e2e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 8019e04:	fb0c a808 	mla	r8, ip, r8, sl
 8019e08:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8019e0c:	eb09 0a08 	add.w	sl, r9, r8
 8019e10:	f819 b008 	ldrb.w	fp, [r9, r8]
 8019e14:	eb05 0845 	add.w	r8, r5, r5, lsl #1
 8019e18:	f804 b008 	strb.w	fp, [r4, r8]
 8019e1c:	44a0      	add	r8, r4
 8019e1e:	f89a b001 	ldrb.w	fp, [sl, #1]
 8019e22:	f888 b001 	strb.w	fp, [r8, #1]
 8019e26:	f89a a002 	ldrb.w	sl, [sl, #2]
 8019e2a:	f888 a002 	strb.w	sl, [r8, #2]
 8019e2e:	4438      	add	r0, r7
 8019e30:	4432      	add	r2, r6
 8019e32:	3501      	adds	r5, #1
 8019e34:	e79e      	b.n	8019d74 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xca>
 8019e36:	b003      	add	sp, #12
 8019e38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019e3c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8019e3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019e40:	b085      	sub	sp, #20
 8019e42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8019e46:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8019e48:	9202      	str	r2, [sp, #8]
 8019e4a:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8019e4e:	9203      	str	r2, [sp, #12]
 8019e50:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 8019e54:	6860      	ldr	r0, [r4, #4]
 8019e56:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 8019e5a:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 8019e5e:	fb00 2505 	mla	r5, r0, r5, r2
 8019e62:	6822      	ldr	r2, [r4, #0]
 8019e64:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019e68:	4415      	add	r5, r2
 8019e6a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8019e6c:	6812      	ldr	r2, [r2, #0]
 8019e6e:	9201      	str	r2, [sp, #4]
 8019e70:	2900      	cmp	r1, #0
 8019e72:	dc03      	bgt.n	8019e7c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40>
 8019e74:	9a02      	ldr	r2, [sp, #8]
 8019e76:	2a00      	cmp	r2, #0
 8019e78:	f340 811c 	ble.w	801a0b4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 8019e7c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8019e7e:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8019e82:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8019e84:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8019e88:	2b00      	cmp	r3, #0
 8019e8a:	dd0e      	ble.n	8019eaa <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 8019e8c:	1422      	asrs	r2, r4, #16
 8019e8e:	d405      	bmi.n	8019e9c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 8019e90:	4572      	cmp	r2, lr
 8019e92:	da03      	bge.n	8019e9c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 8019e94:	1402      	asrs	r2, r0, #16
 8019e96:	d401      	bmi.n	8019e9c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 8019e98:	4542      	cmp	r2, r8
 8019e9a:	db07      	blt.n	8019eac <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 8019e9c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8019e9e:	4414      	add	r4, r2
 8019ea0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8019ea2:	3b01      	subs	r3, #1
 8019ea4:	4410      	add	r0, r2
 8019ea6:	3503      	adds	r5, #3
 8019ea8:	e7ee      	b.n	8019e88 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c>
 8019eaa:	d072      	beq.n	8019f92 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x156>
 8019eac:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8019eae:	1e5a      	subs	r2, r3, #1
 8019eb0:	fb06 4602 	mla	r6, r6, r2, r4
 8019eb4:	1436      	asrs	r6, r6, #16
 8019eb6:	d461      	bmi.n	8019f7c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 8019eb8:	4576      	cmp	r6, lr
 8019eba:	da5f      	bge.n	8019f7c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 8019ebc:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8019ebe:	fb06 0202 	mla	r2, r6, r2, r0
 8019ec2:	1412      	asrs	r2, r2, #16
 8019ec4:	d45a      	bmi.n	8019f7c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 8019ec6:	4542      	cmp	r2, r8
 8019ec8:	da58      	bge.n	8019f7c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 8019eca:	1cef      	adds	r7, r5, #3
 8019ecc:	4699      	mov	r9, r3
 8019ece:	f1b9 0f00 	cmp.w	r9, #0
 8019ed2:	dd59      	ble.n	8019f88 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x14c>
 8019ed4:	1426      	asrs	r6, r4, #16
 8019ed6:	1402      	asrs	r2, r0, #16
 8019ed8:	fb0e 6202 	mla	r2, lr, r2, r6
 8019edc:	9e01      	ldr	r6, [sp, #4]
 8019ede:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 8019ee2:	ea5f 6c16 	movs.w	ip, r6, lsr #24
 8019ee6:	d041      	beq.n	8019f6c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x130>
 8019ee8:	9a03      	ldr	r2, [sp, #12]
 8019eea:	fb02 fc0c 	mul.w	ip, r2, ip
 8019eee:	f10c 0201 	add.w	r2, ip, #1
 8019ef2:	eb02 222c 	add.w	r2, r2, ip, asr #8
 8019ef6:	1212      	asrs	r2, r2, #8
 8019ef8:	fa1f fa82 	uxth.w	sl, r2
 8019efc:	f817 cc03 	ldrb.w	ip, [r7, #-3]
 8019f00:	fa5f fb86 	uxtb.w	fp, r6
 8019f04:	43d2      	mvns	r2, r2
 8019f06:	b2d2      	uxtb	r2, r2
 8019f08:	fb1b fb0a 	smulbb	fp, fp, sl
 8019f0c:	fb0c bc02 	mla	ip, ip, r2, fp
 8019f10:	fa1f fc8c 	uxth.w	ip, ip
 8019f14:	f10c 0b01 	add.w	fp, ip, #1
 8019f18:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 8019f1c:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8019f20:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 8019f24:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8019f28:	fb1b fb0a 	smulbb	fp, fp, sl
 8019f2c:	f807 cc03 	strb.w	ip, [r7, #-3]
 8019f30:	fb16 fa0a 	smulbb	sl, r6, sl
 8019f34:	f817 cc02 	ldrb.w	ip, [r7, #-2]
 8019f38:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 8019f3c:	fb0c bc02 	mla	ip, ip, r2, fp
 8019f40:	fb06 aa02 	mla	sl, r6, r2, sl
 8019f44:	fa1f fc8c 	uxth.w	ip, ip
 8019f48:	fa1f fa8a 	uxth.w	sl, sl
 8019f4c:	f10c 0b01 	add.w	fp, ip, #1
 8019f50:	f10a 0601 	add.w	r6, sl, #1
 8019f54:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 8019f58:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 8019f5c:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8019f60:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8019f64:	f807 cc02 	strb.w	ip, [r7, #-2]
 8019f68:	f807 ac01 	strb.w	sl, [r7, #-1]
 8019f6c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8019f6e:	4414      	add	r4, r2
 8019f70:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8019f72:	3703      	adds	r7, #3
 8019f74:	4410      	add	r0, r2
 8019f76:	f109 39ff 	add.w	r9, r9, #4294967295
 8019f7a:	e7a8      	b.n	8019ece <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 8019f7c:	f04f 0c00 	mov.w	ip, #0
 8019f80:	eba3 020c 	sub.w	r2, r3, ip
 8019f84:	2a00      	cmp	r2, #0
 8019f86:	dc3d      	bgt.n	801a004 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c8>
 8019f88:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019f8c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019f90:	441d      	add	r5, r3
 8019f92:	2900      	cmp	r1, #0
 8019f94:	f340 808e 	ble.w	801a0b4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 8019f98:	ee30 0a04 	vadd.f32	s0, s0, s8
 8019f9c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8019fa0:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8019fa4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019fa6:	3901      	subs	r1, #1
 8019fa8:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019fac:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019fb0:	eeb0 6a62 	vmov.f32	s12, s5
 8019fb4:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019fb8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019fbc:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019fc0:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8019fc4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019fc8:	eeb0 6a43 	vmov.f32	s12, s6
 8019fcc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019fd0:	ee12 2a90 	vmov	r2, s5
 8019fd4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8019fd8:	fb92 f3f3 	sdiv	r3, r2, r3
 8019fdc:	ee13 2a10 	vmov	r2, s6
 8019fe0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019fe4:	9311      	str	r3, [sp, #68]	; 0x44
 8019fe6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019fe8:	fb92 f3f3 	sdiv	r3, r2, r3
 8019fec:	9a02      	ldr	r2, [sp, #8]
 8019fee:	9312      	str	r3, [sp, #72]	; 0x48
 8019ff0:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8019ff4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019ff6:	eeb0 3a67 	vmov.f32	s6, s15
 8019ffa:	bf08      	it	eq
 8019ffc:	4613      	moveq	r3, r2
 8019ffe:	eef0 2a47 	vmov.f32	s5, s14
 801a002:	e735      	b.n	8019e70 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34>
 801a004:	1426      	asrs	r6, r4, #16
 801a006:	d44e      	bmi.n	801a0a6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801a008:	4576      	cmp	r6, lr
 801a00a:	da4c      	bge.n	801a0a6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801a00c:	1402      	asrs	r2, r0, #16
 801a00e:	d44a      	bmi.n	801a0a6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801a010:	4542      	cmp	r2, r8
 801a012:	da48      	bge.n	801a0a6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801a014:	fb0e 6202 	mla	r2, lr, r2, r6
 801a018:	9e01      	ldr	r6, [sp, #4]
 801a01a:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 801a01e:	0e3a      	lsrs	r2, r7, #24
 801a020:	d041      	beq.n	801a0a6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801a022:	9e03      	ldr	r6, [sp, #12]
 801a024:	4372      	muls	r2, r6
 801a026:	1c56      	adds	r6, r2, #1
 801a028:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801a02c:	eb0c 064c 	add.w	r6, ip, ip, lsl #1
 801a030:	1212      	asrs	r2, r2, #8
 801a032:	f815 9006 	ldrb.w	r9, [r5, r6]
 801a036:	fa1f fa82 	uxth.w	sl, r2
 801a03a:	fa5f fb87 	uxtb.w	fp, r7
 801a03e:	43d2      	mvns	r2, r2
 801a040:	b2d2      	uxtb	r2, r2
 801a042:	fb1b fb0a 	smulbb	fp, fp, sl
 801a046:	fb09 b902 	mla	r9, r9, r2, fp
 801a04a:	fa1f f989 	uxth.w	r9, r9
 801a04e:	f109 0b01 	add.w	fp, r9, #1
 801a052:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801a056:	ea4f 2929 	mov.w	r9, r9, asr #8
 801a05a:	f805 9006 	strb.w	r9, [r5, r6]
 801a05e:	442e      	add	r6, r5
 801a060:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801a064:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801a068:	fb1b fb0a 	smulbb	fp, fp, sl
 801a06c:	f896 9001 	ldrb.w	r9, [r6, #1]
 801a070:	fb17 fa0a 	smulbb	sl, r7, sl
 801a074:	78b7      	ldrb	r7, [r6, #2]
 801a076:	fb09 b902 	mla	r9, r9, r2, fp
 801a07a:	fb07 aa02 	mla	sl, r7, r2, sl
 801a07e:	fa1f f989 	uxth.w	r9, r9
 801a082:	fa1f fa8a 	uxth.w	sl, sl
 801a086:	f109 0b01 	add.w	fp, r9, #1
 801a08a:	f10a 0701 	add.w	r7, sl, #1
 801a08e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801a092:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801a096:	ea4f 2929 	mov.w	r9, r9, asr #8
 801a09a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801a09e:	f886 9001 	strb.w	r9, [r6, #1]
 801a0a2:	f886 a002 	strb.w	sl, [r6, #2]
 801a0a6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801a0a8:	4414      	add	r4, r2
 801a0aa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801a0ac:	f10c 0c01 	add.w	ip, ip, #1
 801a0b0:	4410      	add	r0, r2
 801a0b2:	e765      	b.n	8019f80 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x144>
 801a0b4:	b005      	add	sp, #20
 801a0b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a0ba <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801a0ba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a0be:	b085      	sub	sp, #20
 801a0c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801a0c4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801a0c6:	9203      	str	r2, [sp, #12]
 801a0c8:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801a0cc:	9201      	str	r2, [sp, #4]
 801a0ce:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801a0d2:	6860      	ldr	r0, [r4, #4]
 801a0d4:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801a0d8:	fb00 2505 	mla	r5, r0, r5, r2
 801a0dc:	6822      	ldr	r2, [r4, #0]
 801a0de:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a0e2:	4415      	add	r5, r2
 801a0e4:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801a0e6:	6812      	ldr	r2, [r2, #0]
 801a0e8:	9202      	str	r2, [sp, #8]
 801a0ea:	2900      	cmp	r1, #0
 801a0ec:	dc03      	bgt.n	801a0f6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 801a0ee:	9a03      	ldr	r2, [sp, #12]
 801a0f0:	2a00      	cmp	r2, #0
 801a0f2:	f340 8122 	ble.w	801a33a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x280>
 801a0f6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a0f8:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801a0fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801a0fe:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801a102:	2b00      	cmp	r3, #0
 801a104:	dd0f      	ble.n	801a126 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801a106:	1422      	asrs	r2, r4, #16
 801a108:	d406      	bmi.n	801a118 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 801a10a:	4572      	cmp	r2, lr
 801a10c:	da04      	bge.n	801a118 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 801a10e:	1402      	asrs	r2, r0, #16
 801a110:	d402      	bmi.n	801a118 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 801a112:	9e01      	ldr	r6, [sp, #4]
 801a114:	42b2      	cmp	r2, r6
 801a116:	db07      	blt.n	801a128 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801a118:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801a11a:	4414      	add	r4, r2
 801a11c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801a11e:	3b01      	subs	r3, #1
 801a120:	4410      	add	r0, r2
 801a122:	3503      	adds	r5, #3
 801a124:	e7ed      	b.n	801a102 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x48>
 801a126:	d06e      	beq.n	801a206 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x14c>
 801a128:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801a12a:	1e5a      	subs	r2, r3, #1
 801a12c:	fb06 4602 	mla	r6, r6, r2, r4
 801a130:	1436      	asrs	r6, r6, #16
 801a132:	d45d      	bmi.n	801a1f0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801a134:	4576      	cmp	r6, lr
 801a136:	da5b      	bge.n	801a1f0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801a138:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801a13a:	fb06 0202 	mla	r2, r6, r2, r0
 801a13e:	1412      	asrs	r2, r2, #16
 801a140:	d456      	bmi.n	801a1f0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801a142:	9e01      	ldr	r6, [sp, #4]
 801a144:	42b2      	cmp	r2, r6
 801a146:	da53      	bge.n	801a1f0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801a148:	1cee      	adds	r6, r5, #3
 801a14a:	469a      	mov	sl, r3
 801a14c:	f1ba 0f00 	cmp.w	sl, #0
 801a150:	dd54      	ble.n	801a1fc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801a152:	1427      	asrs	r7, r4, #16
 801a154:	1402      	asrs	r2, r0, #16
 801a156:	fb0e 7202 	mla	r2, lr, r2, r7
 801a15a:	9f02      	ldr	r7, [sp, #8]
 801a15c:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 801a160:	ea5f 6c17 	movs.w	ip, r7, lsr #24
 801a164:	d03c      	beq.n	801a1e0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x126>
 801a166:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801a16a:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801a16e:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801a172:	fa5f f28c 	uxtb.w	r2, ip
 801a176:	b2ff      	uxtb	r7, r7
 801a178:	f000 80d8 	beq.w	801a32c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801a17c:	fa1f f882 	uxth.w	r8, r2
 801a180:	f816 cc03 	ldrb.w	ip, [r6, #-3]
 801a184:	43d2      	mvns	r2, r2
 801a186:	b2d2      	uxtb	r2, r2
 801a188:	fb17 f708 	smulbb	r7, r7, r8
 801a18c:	fb0c 7702 	mla	r7, ip, r2, r7
 801a190:	b2bf      	uxth	r7, r7
 801a192:	f107 0c01 	add.w	ip, r7, #1
 801a196:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 801a19a:	123f      	asrs	r7, r7, #8
 801a19c:	f806 7c03 	strb.w	r7, [r6, #-3]
 801a1a0:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 801a1a4:	fb19 f908 	smulbb	r9, r9, r8
 801a1a8:	fb07 9902 	mla	r9, r7, r2, r9
 801a1ac:	fa1f f989 	uxth.w	r9, r9
 801a1b0:	f109 0701 	add.w	r7, r9, #1
 801a1b4:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801a1b8:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801a1bc:	fb1b f808 	smulbb	r8, fp, r8
 801a1c0:	fb07 8802 	mla	r8, r7, r2, r8
 801a1c4:	fa1f f888 	uxth.w	r8, r8
 801a1c8:	f108 0201 	add.w	r2, r8, #1
 801a1cc:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801a1d0:	ea4f 2929 	mov.w	r9, r9, asr #8
 801a1d4:	ea4f 2828 	mov.w	r8, r8, asr #8
 801a1d8:	f806 9c02 	strb.w	r9, [r6, #-2]
 801a1dc:	f806 8c01 	strb.w	r8, [r6, #-1]
 801a1e0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801a1e2:	4414      	add	r4, r2
 801a1e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801a1e6:	3603      	adds	r6, #3
 801a1e8:	4410      	add	r0, r2
 801a1ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 801a1ee:	e7ad      	b.n	801a14c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801a1f0:	f04f 0c00 	mov.w	ip, #0
 801a1f4:	eba3 020c 	sub.w	r2, r3, ip
 801a1f8:	2a00      	cmp	r2, #0
 801a1fa:	dc3d      	bgt.n	801a278 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 801a1fc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a200:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a204:	441d      	add	r5, r3
 801a206:	2900      	cmp	r1, #0
 801a208:	f340 8097 	ble.w	801a33a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x280>
 801a20c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a210:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a214:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801a218:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a21a:	3901      	subs	r1, #1
 801a21c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a220:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a224:	eeb0 6a62 	vmov.f32	s12, s5
 801a228:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a22c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a230:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a234:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801a238:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a23c:	eeb0 6a43 	vmov.f32	s12, s6
 801a240:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a244:	ee12 2a90 	vmov	r2, s5
 801a248:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a24c:	fb92 f3f3 	sdiv	r3, r2, r3
 801a250:	ee13 2a10 	vmov	r2, s6
 801a254:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a258:	9311      	str	r3, [sp, #68]	; 0x44
 801a25a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a25c:	fb92 f3f3 	sdiv	r3, r2, r3
 801a260:	9a03      	ldr	r2, [sp, #12]
 801a262:	9312      	str	r3, [sp, #72]	; 0x48
 801a264:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801a268:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a26a:	eeb0 3a67 	vmov.f32	s6, s15
 801a26e:	bf08      	it	eq
 801a270:	4613      	moveq	r3, r2
 801a272:	eef0 2a47 	vmov.f32	s5, s14
 801a276:	e738      	b.n	801a0ea <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30>
 801a278:	1426      	asrs	r6, r4, #16
 801a27a:	d448      	bmi.n	801a30e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801a27c:	4576      	cmp	r6, lr
 801a27e:	da46      	bge.n	801a30e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801a280:	1402      	asrs	r2, r0, #16
 801a282:	d444      	bmi.n	801a30e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801a284:	9f01      	ldr	r7, [sp, #4]
 801a286:	42ba      	cmp	r2, r7
 801a288:	da41      	bge.n	801a30e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801a28a:	fb0e 6202 	mla	r2, lr, r2, r6
 801a28e:	9e02      	ldr	r6, [sp, #8]
 801a290:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 801a294:	0e3a      	lsrs	r2, r7, #24
 801a296:	d03a      	beq.n	801a30e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801a298:	2aff      	cmp	r2, #255	; 0xff
 801a29a:	b2d6      	uxtb	r6, r2
 801a29c:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801a2a0:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 801a2a4:	ea4f 024c 	mov.w	r2, ip, lsl #1
 801a2a8:	b2ff      	uxtb	r7, r7
 801a2aa:	d037      	beq.n	801a31c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x262>
 801a2ac:	4462      	add	r2, ip
 801a2ae:	fa1f f986 	uxth.w	r9, r6
 801a2b2:	f815 8002 	ldrb.w	r8, [r5, r2]
 801a2b6:	43f6      	mvns	r6, r6
 801a2b8:	b2f6      	uxtb	r6, r6
 801a2ba:	fb17 f709 	smulbb	r7, r7, r9
 801a2be:	fb08 7706 	mla	r7, r8, r6, r7
 801a2c2:	b2bf      	uxth	r7, r7
 801a2c4:	f107 0801 	add.w	r8, r7, #1
 801a2c8:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 801a2cc:	123f      	asrs	r7, r7, #8
 801a2ce:	54af      	strb	r7, [r5, r2]
 801a2d0:	442a      	add	r2, r5
 801a2d2:	fb1a fa09 	smulbb	sl, sl, r9
 801a2d6:	7857      	ldrb	r7, [r2, #1]
 801a2d8:	fb07 aa06 	mla	sl, r7, r6, sl
 801a2dc:	fa1f fa8a 	uxth.w	sl, sl
 801a2e0:	f10a 0701 	add.w	r7, sl, #1
 801a2e4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801a2e8:	7897      	ldrb	r7, [r2, #2]
 801a2ea:	fb1b f909 	smulbb	r9, fp, r9
 801a2ee:	fb07 9906 	mla	r9, r7, r6, r9
 801a2f2:	fa1f f989 	uxth.w	r9, r9
 801a2f6:	f109 0601 	add.w	r6, r9, #1
 801a2fa:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 801a2fe:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801a302:	ea4f 2929 	mov.w	r9, r9, asr #8
 801a306:	f882 a001 	strb.w	sl, [r2, #1]
 801a30a:	f882 9002 	strb.w	r9, [r2, #2]
 801a30e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801a310:	4414      	add	r4, r2
 801a312:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801a314:	f10c 0c01 	add.w	ip, ip, #1
 801a318:	4410      	add	r0, r2
 801a31a:	e76b      	b.n	801a1f4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x13a>
 801a31c:	4462      	add	r2, ip
 801a31e:	54af      	strb	r7, [r5, r2]
 801a320:	442a      	add	r2, r5
 801a322:	f882 a001 	strb.w	sl, [r2, #1]
 801a326:	f882 b002 	strb.w	fp, [r2, #2]
 801a32a:	e7f0      	b.n	801a30e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801a32c:	f806 7c03 	strb.w	r7, [r6, #-3]
 801a330:	f806 9c02 	strb.w	r9, [r6, #-2]
 801a334:	f806 bc01 	strb.w	fp, [r6, #-1]
 801a338:	e752      	b.n	801a1e0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x126>
 801a33a:	b005      	add	sp, #20
 801a33c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a340 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801a340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a344:	b087      	sub	sp, #28
 801a346:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801a34a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801a34c:	9204      	str	r2, [sp, #16]
 801a34e:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 801a352:	9205      	str	r2, [sp, #20]
 801a354:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 801a358:	6860      	ldr	r0, [r4, #4]
 801a35a:	f9bd e060 	ldrsh.w	lr, [sp, #96]	; 0x60
 801a35e:	f9bd 8064 	ldrsh.w	r8, [sp, #100]	; 0x64
 801a362:	9101      	str	r1, [sp, #4]
 801a364:	fb00 2505 	mla	r5, r0, r5, r2
 801a368:	6822      	ldr	r2, [r4, #0]
 801a36a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a36e:	4415      	add	r5, r2
 801a370:	f10e 0201 	add.w	r2, lr, #1
 801a374:	f022 0201 	bic.w	r2, r2, #1
 801a378:	9202      	str	r2, [sp, #8]
 801a37a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801a37c:	6812      	ldr	r2, [r2, #0]
 801a37e:	9203      	str	r2, [sp, #12]
 801a380:	9a01      	ldr	r2, [sp, #4]
 801a382:	2a00      	cmp	r2, #0
 801a384:	dc03      	bgt.n	801a38e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e>
 801a386:	9a04      	ldr	r2, [sp, #16]
 801a388:	2a00      	cmp	r2, #0
 801a38a:	f340 8132 	ble.w	801a5f2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b2>
 801a38e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801a390:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801a394:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801a396:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801a39a:	2b00      	cmp	r3, #0
 801a39c:	dd0e      	ble.n	801a3bc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 801a39e:	1422      	asrs	r2, r4, #16
 801a3a0:	d405      	bmi.n	801a3ae <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801a3a2:	4596      	cmp	lr, r2
 801a3a4:	dd03      	ble.n	801a3ae <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801a3a6:	1402      	asrs	r2, r0, #16
 801a3a8:	d401      	bmi.n	801a3ae <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801a3aa:	4542      	cmp	r2, r8
 801a3ac:	db07      	blt.n	801a3be <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 801a3ae:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801a3b0:	4414      	add	r4, r2
 801a3b2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801a3b4:	3b01      	subs	r3, #1
 801a3b6:	4410      	add	r0, r2
 801a3b8:	3503      	adds	r5, #3
 801a3ba:	e7ee      	b.n	801a39a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5a>
 801a3bc:	d010      	beq.n	801a3e0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 801a3be:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801a3c0:	1e5a      	subs	r2, r3, #1
 801a3c2:	fb06 4602 	mla	r6, r6, r2, r4
 801a3c6:	1436      	asrs	r6, r6, #16
 801a3c8:	d546      	bpl.n	801a458 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 801a3ca:	4699      	mov	r9, r3
 801a3cc:	462e      	mov	r6, r5
 801a3ce:	f1b9 0f00 	cmp.w	r9, #0
 801a3d2:	f300 80ac 	bgt.w	801a52e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1ee>
 801a3d6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a3da:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a3de:	441d      	add	r5, r3
 801a3e0:	9b01      	ldr	r3, [sp, #4]
 801a3e2:	2b00      	cmp	r3, #0
 801a3e4:	f340 8105 	ble.w	801a5f2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b2>
 801a3e8:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a3ec:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a3f0:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801a3f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a3f6:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a3fa:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a3fe:	eeb0 6a62 	vmov.f32	s12, s5
 801a402:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a406:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a40a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a40e:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801a412:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a416:	eeb0 6a43 	vmov.f32	s12, s6
 801a41a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a41e:	ee12 2a90 	vmov	r2, s5
 801a422:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a426:	fb92 f3f3 	sdiv	r3, r2, r3
 801a42a:	ee13 2a10 	vmov	r2, s6
 801a42e:	9313      	str	r3, [sp, #76]	; 0x4c
 801a430:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a432:	fb92 f3f3 	sdiv	r3, r2, r3
 801a436:	9314      	str	r3, [sp, #80]	; 0x50
 801a438:	9b01      	ldr	r3, [sp, #4]
 801a43a:	9a04      	ldr	r2, [sp, #16]
 801a43c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a440:	3b01      	subs	r3, #1
 801a442:	9301      	str	r3, [sp, #4]
 801a444:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801a448:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a44a:	eeb0 3a67 	vmov.f32	s6, s15
 801a44e:	bf08      	it	eq
 801a450:	4613      	moveq	r3, r2
 801a452:	eef0 2a47 	vmov.f32	s5, s14
 801a456:	e793      	b.n	801a380 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40>
 801a458:	45b6      	cmp	lr, r6
 801a45a:	ddb6      	ble.n	801a3ca <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801a45c:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801a45e:	fb06 0202 	mla	r2, r6, r2, r0
 801a462:	1412      	asrs	r2, r2, #16
 801a464:	d4b1      	bmi.n	801a3ca <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801a466:	4542      	cmp	r2, r8
 801a468:	daaf      	bge.n	801a3ca <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801a46a:	1cee      	adds	r6, r5, #3
 801a46c:	4699      	mov	r9, r3
 801a46e:	f1b9 0f00 	cmp.w	r9, #0
 801a472:	ddb0      	ble.n	801a3d6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 801a474:	9902      	ldr	r1, [sp, #8]
 801a476:	1422      	asrs	r2, r4, #16
 801a478:	1407      	asrs	r7, r0, #16
 801a47a:	fb01 2707 	mla	r7, r1, r7, r2
 801a47e:	087a      	lsrs	r2, r7, #1
 801a480:	9903      	ldr	r1, [sp, #12]
 801a482:	5c8a      	ldrb	r2, [r1, r2]
 801a484:	07f9      	lsls	r1, r7, #31
 801a486:	bf54      	ite	pl
 801a488:	f002 020f 	andpl.w	r2, r2, #15
 801a48c:	1112      	asrmi	r2, r2, #4
 801a48e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801a492:	b2d2      	uxtb	r2, r2
 801a494:	2a00      	cmp	r2, #0
 801a496:	d042      	beq.n	801a51e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1de>
 801a498:	4957      	ldr	r1, [pc, #348]	; (801a5f8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b8>)
 801a49a:	680f      	ldr	r7, [r1, #0]
 801a49c:	9905      	ldr	r1, [sp, #20]
 801a49e:	434a      	muls	r2, r1
 801a4a0:	f102 0c01 	add.w	ip, r2, #1
 801a4a4:	eb0c 2222 	add.w	r2, ip, r2, asr #8
 801a4a8:	1212      	asrs	r2, r2, #8
 801a4aa:	fa1f fa82 	uxth.w	sl, r2
 801a4ae:	f816 cc03 	ldrb.w	ip, [r6, #-3]
 801a4b2:	fa5f fb87 	uxtb.w	fp, r7
 801a4b6:	43d2      	mvns	r2, r2
 801a4b8:	b2d2      	uxtb	r2, r2
 801a4ba:	fb1b fb0a 	smulbb	fp, fp, sl
 801a4be:	fb0c bc02 	mla	ip, ip, r2, fp
 801a4c2:	fa1f fc8c 	uxth.w	ip, ip
 801a4c6:	f10c 0b01 	add.w	fp, ip, #1
 801a4ca:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801a4ce:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801a4d2:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801a4d6:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801a4da:	fb1b fb0a 	smulbb	fp, fp, sl
 801a4de:	f806 cc03 	strb.w	ip, [r6, #-3]
 801a4e2:	fb17 fa0a 	smulbb	sl, r7, sl
 801a4e6:	f816 cc02 	ldrb.w	ip, [r6, #-2]
 801a4ea:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801a4ee:	fb0c bc02 	mla	ip, ip, r2, fp
 801a4f2:	fb07 aa02 	mla	sl, r7, r2, sl
 801a4f6:	fa1f fc8c 	uxth.w	ip, ip
 801a4fa:	fa1f fa8a 	uxth.w	sl, sl
 801a4fe:	f10c 0b01 	add.w	fp, ip, #1
 801a502:	f10a 0701 	add.w	r7, sl, #1
 801a506:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801a50a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801a50e:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801a512:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801a516:	f806 cc02 	strb.w	ip, [r6, #-2]
 801a51a:	f806 ac01 	strb.w	sl, [r6, #-1]
 801a51e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801a520:	4414      	add	r4, r2
 801a522:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801a524:	3603      	adds	r6, #3
 801a526:	4410      	add	r0, r2
 801a528:	f109 39ff 	add.w	r9, r9, #4294967295
 801a52c:	e79f      	b.n	801a46e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12e>
 801a52e:	1422      	asrs	r2, r4, #16
 801a530:	d457      	bmi.n	801a5e2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801a532:	4596      	cmp	lr, r2
 801a534:	dd55      	ble.n	801a5e2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801a536:	1407      	asrs	r7, r0, #16
 801a538:	d453      	bmi.n	801a5e2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801a53a:	4547      	cmp	r7, r8
 801a53c:	da51      	bge.n	801a5e2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801a53e:	9902      	ldr	r1, [sp, #8]
 801a540:	fb07 2701 	mla	r7, r7, r1, r2
 801a544:	087a      	lsrs	r2, r7, #1
 801a546:	9903      	ldr	r1, [sp, #12]
 801a548:	5c8a      	ldrb	r2, [r1, r2]
 801a54a:	07ff      	lsls	r7, r7, #31
 801a54c:	bf54      	ite	pl
 801a54e:	f002 020f 	andpl.w	r2, r2, #15
 801a552:	1112      	asrmi	r2, r2, #4
 801a554:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801a558:	b2d2      	uxtb	r2, r2
 801a55a:	2a00      	cmp	r2, #0
 801a55c:	d041      	beq.n	801a5e2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801a55e:	4926      	ldr	r1, [pc, #152]	; (801a5f8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b8>)
 801a560:	680f      	ldr	r7, [r1, #0]
 801a562:	9905      	ldr	r1, [sp, #20]
 801a564:	434a      	muls	r2, r1
 801a566:	f102 0c01 	add.w	ip, r2, #1
 801a56a:	eb0c 2222 	add.w	r2, ip, r2, asr #8
 801a56e:	1212      	asrs	r2, r2, #8
 801a570:	fa1f fa82 	uxth.w	sl, r2
 801a574:	f896 c000 	ldrb.w	ip, [r6]
 801a578:	fa5f fb87 	uxtb.w	fp, r7
 801a57c:	43d2      	mvns	r2, r2
 801a57e:	b2d2      	uxtb	r2, r2
 801a580:	fb1b fb0a 	smulbb	fp, fp, sl
 801a584:	fb0c bc02 	mla	ip, ip, r2, fp
 801a588:	fa1f fc8c 	uxth.w	ip, ip
 801a58c:	f10c 0b01 	add.w	fp, ip, #1
 801a590:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801a594:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801a598:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801a59c:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801a5a0:	fb1b fb0a 	smulbb	fp, fp, sl
 801a5a4:	f886 c000 	strb.w	ip, [r6]
 801a5a8:	fb17 fa0a 	smulbb	sl, r7, sl
 801a5ac:	f896 c001 	ldrb.w	ip, [r6, #1]
 801a5b0:	78b7      	ldrb	r7, [r6, #2]
 801a5b2:	fb0c bc02 	mla	ip, ip, r2, fp
 801a5b6:	fb07 aa02 	mla	sl, r7, r2, sl
 801a5ba:	fa1f fc8c 	uxth.w	ip, ip
 801a5be:	fa1f fa8a 	uxth.w	sl, sl
 801a5c2:	f10c 0b01 	add.w	fp, ip, #1
 801a5c6:	f10a 0701 	add.w	r7, sl, #1
 801a5ca:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801a5ce:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801a5d2:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801a5d6:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801a5da:	f886 c001 	strb.w	ip, [r6, #1]
 801a5de:	f886 a002 	strb.w	sl, [r6, #2]
 801a5e2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801a5e4:	4414      	add	r4, r2
 801a5e6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801a5e8:	3603      	adds	r6, #3
 801a5ea:	4410      	add	r0, r2
 801a5ec:	f109 39ff 	add.w	r9, r9, #4294967295
 801a5f0:	e6ed      	b.n	801a3ce <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8e>
 801a5f2:	b007      	add	sp, #28
 801a5f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a5f8:	2000d1cc 	.word	0x2000d1cc

0801a5fc <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801a5fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a600:	b087      	sub	sp, #28
 801a602:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801a606:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801a608:	9205      	str	r2, [sp, #20]
 801a60a:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 801a60e:	9202      	str	r2, [sp, #8]
 801a610:	e9dd 2616 	ldrd	r2, r6, [sp, #88]	; 0x58
 801a614:	6860      	ldr	r0, [r4, #4]
 801a616:	f9bd 8060 	ldrsh.w	r8, [sp, #96]	; 0x60
 801a61a:	9101      	str	r1, [sp, #4]
 801a61c:	fb00 2606 	mla	r6, r0, r6, r2
 801a620:	6822      	ldr	r2, [r4, #0]
 801a622:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801a626:	4416      	add	r6, r2
 801a628:	f108 0201 	add.w	r2, r8, #1
 801a62c:	f022 0201 	bic.w	r2, r2, #1
 801a630:	9203      	str	r2, [sp, #12]
 801a632:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801a634:	6812      	ldr	r2, [r2, #0]
 801a636:	9204      	str	r2, [sp, #16]
 801a638:	9a01      	ldr	r2, [sp, #4]
 801a63a:	2a00      	cmp	r2, #0
 801a63c:	dc03      	bgt.n	801a646 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a>
 801a63e:	9a05      	ldr	r2, [sp, #20]
 801a640:	2a00      	cmp	r2, #0
 801a642:	f340 813a 	ble.w	801a8ba <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2be>
 801a646:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801a648:	f502 4500 	add.w	r5, r2, #32768	; 0x8000
 801a64c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801a64e:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801a652:	2b00      	cmp	r3, #0
 801a654:	dd0f      	ble.n	801a676 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 801a656:	142a      	asrs	r2, r5, #16
 801a658:	d406      	bmi.n	801a668 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801a65a:	4590      	cmp	r8, r2
 801a65c:	dd04      	ble.n	801a668 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801a65e:	1422      	asrs	r2, r4, #16
 801a660:	d402      	bmi.n	801a668 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801a662:	9802      	ldr	r0, [sp, #8]
 801a664:	4282      	cmp	r2, r0
 801a666:	db07      	blt.n	801a678 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 801a668:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801a66a:	4415      	add	r5, r2
 801a66c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801a66e:	3b01      	subs	r3, #1
 801a670:	4414      	add	r4, r2
 801a672:	3603      	adds	r6, #3
 801a674:	e7ed      	b.n	801a652 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56>
 801a676:	d073      	beq.n	801a760 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x164>
 801a678:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801a67a:	1e5a      	subs	r2, r3, #1
 801a67c:	fb00 5002 	mla	r0, r0, r2, r5
 801a680:	1400      	asrs	r0, r0, #16
 801a682:	d464      	bmi.n	801a74e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 801a684:	4580      	cmp	r8, r0
 801a686:	dd62      	ble.n	801a74e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 801a688:	9814      	ldr	r0, [sp, #80]	; 0x50
 801a68a:	fb00 4202 	mla	r2, r0, r2, r4
 801a68e:	1412      	asrs	r2, r2, #16
 801a690:	d45d      	bmi.n	801a74e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 801a692:	9802      	ldr	r0, [sp, #8]
 801a694:	4282      	cmp	r2, r0
 801a696:	da5a      	bge.n	801a74e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 801a698:	1cf0      	adds	r0, r6, #3
 801a69a:	469a      	mov	sl, r3
 801a69c:	f1ba 0f00 	cmp.w	sl, #0
 801a6a0:	dd59      	ble.n	801a756 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15a>
 801a6a2:	9903      	ldr	r1, [sp, #12]
 801a6a4:	142a      	asrs	r2, r5, #16
 801a6a6:	1427      	asrs	r7, r4, #16
 801a6a8:	fb01 2707 	mla	r7, r1, r7, r2
 801a6ac:	087a      	lsrs	r2, r7, #1
 801a6ae:	9904      	ldr	r1, [sp, #16]
 801a6b0:	5c8a      	ldrb	r2, [r1, r2]
 801a6b2:	07f9      	lsls	r1, r7, #31
 801a6b4:	bf54      	ite	pl
 801a6b6:	f002 020f 	andpl.w	r2, r2, #15
 801a6ba:	1112      	asrmi	r2, r2, #4
 801a6bc:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801a6c0:	b2d2      	uxtb	r2, r2
 801a6c2:	2a00      	cmp	r2, #0
 801a6c4:	d03b      	beq.n	801a73e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801a6c6:	497e      	ldr	r1, [pc, #504]	; (801a8c0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c4>)
 801a6c8:	680f      	ldr	r7, [r1, #0]
 801a6ca:	2aff      	cmp	r2, #255	; 0xff
 801a6cc:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801a6d0:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801a6d4:	b2ff      	uxtb	r7, r7
 801a6d6:	f000 80e9 	beq.w	801a8ac <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 801a6da:	fa1f fe82 	uxth.w	lr, r2
 801a6de:	f810 cc03 	ldrb.w	ip, [r0, #-3]
 801a6e2:	43d2      	mvns	r2, r2
 801a6e4:	b2d2      	uxtb	r2, r2
 801a6e6:	fb17 f70e 	smulbb	r7, r7, lr
 801a6ea:	fb0c 7702 	mla	r7, ip, r2, r7
 801a6ee:	b2bf      	uxth	r7, r7
 801a6f0:	f107 0c01 	add.w	ip, r7, #1
 801a6f4:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 801a6f8:	123f      	asrs	r7, r7, #8
 801a6fa:	f800 7c03 	strb.w	r7, [r0, #-3]
 801a6fe:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 801a702:	fb19 f90e 	smulbb	r9, r9, lr
 801a706:	fb07 9902 	mla	r9, r7, r2, r9
 801a70a:	fa1f f989 	uxth.w	r9, r9
 801a70e:	f109 0701 	add.w	r7, r9, #1
 801a712:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801a716:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 801a71a:	fb1b fe0e 	smulbb	lr, fp, lr
 801a71e:	fb07 ee02 	mla	lr, r7, r2, lr
 801a722:	fa1f fe8e 	uxth.w	lr, lr
 801a726:	f10e 0201 	add.w	r2, lr, #1
 801a72a:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 801a72e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801a732:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801a736:	f800 9c02 	strb.w	r9, [r0, #-2]
 801a73a:	f800 ec01 	strb.w	lr, [r0, #-1]
 801a73e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801a740:	4415      	add	r5, r2
 801a742:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801a744:	3003      	adds	r0, #3
 801a746:	4414      	add	r4, r2
 801a748:	f10a 3aff 	add.w	sl, sl, #4294967295
 801a74c:	e7a6      	b.n	801a69c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 801a74e:	2700      	movs	r7, #0
 801a750:	1bda      	subs	r2, r3, r7
 801a752:	2a00      	cmp	r2, #0
 801a754:	dc40      	bgt.n	801a7d8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1dc>
 801a756:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a75a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a75e:	441e      	add	r6, r3
 801a760:	9b01      	ldr	r3, [sp, #4]
 801a762:	2b00      	cmp	r3, #0
 801a764:	f340 80a9 	ble.w	801a8ba <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2be>
 801a768:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a76c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a770:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801a774:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a776:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a77a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a77e:	eeb0 6a62 	vmov.f32	s12, s5
 801a782:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a786:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a78a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a78e:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801a792:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a796:	eeb0 6a43 	vmov.f32	s12, s6
 801a79a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a79e:	ee12 2a90 	vmov	r2, s5
 801a7a2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a7a6:	fb92 f3f3 	sdiv	r3, r2, r3
 801a7aa:	ee13 2a10 	vmov	r2, s6
 801a7ae:	9313      	str	r3, [sp, #76]	; 0x4c
 801a7b0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a7b2:	fb92 f3f3 	sdiv	r3, r2, r3
 801a7b6:	9314      	str	r3, [sp, #80]	; 0x50
 801a7b8:	9b01      	ldr	r3, [sp, #4]
 801a7ba:	9a05      	ldr	r2, [sp, #20]
 801a7bc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a7c0:	3b01      	subs	r3, #1
 801a7c2:	9301      	str	r3, [sp, #4]
 801a7c4:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801a7c8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a7ca:	eeb0 3a67 	vmov.f32	s6, s15
 801a7ce:	bf08      	it	eq
 801a7d0:	4613      	moveq	r3, r2
 801a7d2:	eef0 2a47 	vmov.f32	s5, s14
 801a7d6:	e72f      	b.n	801a638 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 801a7d8:	142a      	asrs	r2, r5, #16
 801a7da:	d458      	bmi.n	801a88e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801a7dc:	4590      	cmp	r8, r2
 801a7de:	dd56      	ble.n	801a88e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801a7e0:	1420      	asrs	r0, r4, #16
 801a7e2:	d454      	bmi.n	801a88e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801a7e4:	9902      	ldr	r1, [sp, #8]
 801a7e6:	4288      	cmp	r0, r1
 801a7e8:	da51      	bge.n	801a88e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801a7ea:	9903      	ldr	r1, [sp, #12]
 801a7ec:	fb00 2001 	mla	r0, r0, r1, r2
 801a7f0:	0842      	lsrs	r2, r0, #1
 801a7f2:	9904      	ldr	r1, [sp, #16]
 801a7f4:	5c8a      	ldrb	r2, [r1, r2]
 801a7f6:	07c0      	lsls	r0, r0, #31
 801a7f8:	bf54      	ite	pl
 801a7fa:	f002 020f 	andpl.w	r2, r2, #15
 801a7fe:	1112      	asrmi	r2, r2, #4
 801a800:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801a804:	b2d2      	uxtb	r2, r2
 801a806:	2a00      	cmp	r2, #0
 801a808:	d041      	beq.n	801a88e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801a80a:	492d      	ldr	r1, [pc, #180]	; (801a8c0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c4>)
 801a80c:	6808      	ldr	r0, [r1, #0]
 801a80e:	2aff      	cmp	r2, #255	; 0xff
 801a810:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 801a814:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801a818:	fa5f fc80 	uxtb.w	ip, r0
 801a81c:	ea4f 0047 	mov.w	r0, r7, lsl #1
 801a820:	d03b      	beq.n	801a89a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x29e>
 801a822:	4438      	add	r0, r7
 801a824:	fa1f f982 	uxth.w	r9, r2
 801a828:	f816 e000 	ldrb.w	lr, [r6, r0]
 801a82c:	43d2      	mvns	r2, r2
 801a82e:	b2d2      	uxtb	r2, r2
 801a830:	fb1c fc09 	smulbb	ip, ip, r9
 801a834:	fb0e cc02 	mla	ip, lr, r2, ip
 801a838:	fa1f fc8c 	uxth.w	ip, ip
 801a83c:	f10c 0e01 	add.w	lr, ip, #1
 801a840:	eb0e 2c1c 	add.w	ip, lr, ip, lsr #8
 801a844:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801a848:	f806 c000 	strb.w	ip, [r6, r0]
 801a84c:	4430      	add	r0, r6
 801a84e:	fb1a fa09 	smulbb	sl, sl, r9
 801a852:	f890 c001 	ldrb.w	ip, [r0, #1]
 801a856:	fb0c aa02 	mla	sl, ip, r2, sl
 801a85a:	fa1f fa8a 	uxth.w	sl, sl
 801a85e:	f10a 0c01 	add.w	ip, sl, #1
 801a862:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801a866:	f890 c002 	ldrb.w	ip, [r0, #2]
 801a86a:	fb1b f909 	smulbb	r9, fp, r9
 801a86e:	fb0c 9902 	mla	r9, ip, r2, r9
 801a872:	fa1f f989 	uxth.w	r9, r9
 801a876:	f109 0201 	add.w	r2, r9, #1
 801a87a:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 801a87e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801a882:	ea4f 2929 	mov.w	r9, r9, asr #8
 801a886:	f880 a001 	strb.w	sl, [r0, #1]
 801a88a:	f880 9002 	strb.w	r9, [r0, #2]
 801a88e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801a890:	4415      	add	r5, r2
 801a892:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801a894:	3701      	adds	r7, #1
 801a896:	4414      	add	r4, r2
 801a898:	e75a      	b.n	801a750 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x154>
 801a89a:	4438      	add	r0, r7
 801a89c:	f806 c000 	strb.w	ip, [r6, r0]
 801a8a0:	4430      	add	r0, r6
 801a8a2:	f880 a001 	strb.w	sl, [r0, #1]
 801a8a6:	f880 b002 	strb.w	fp, [r0, #2]
 801a8aa:	e7f0      	b.n	801a88e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801a8ac:	f800 7c03 	strb.w	r7, [r0, #-3]
 801a8b0:	f800 9c02 	strb.w	r9, [r0, #-2]
 801a8b4:	f800 bc01 	strb.w	fp, [r0, #-1]
 801a8b8:	e741      	b.n	801a73e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801a8ba:	b007      	add	sp, #28
 801a8bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a8c0:	2000d1cc 	.word	0x2000d1cc

0801a8c4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 801a8c4:	4770      	bx	lr

0801a8c6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 801a8c6:	4770      	bx	lr

0801a8c8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 801a8c8:	4770      	bx	lr

0801a8ca <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 801a8ca:	4770      	bx	lr

0801a8cc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801a8cc:	4770      	bx	lr

0801a8ce <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801a8ce:	4770      	bx	lr

0801a8d0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801a8d0:	4770      	bx	lr

0801a8d2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801a8d2:	4770      	bx	lr

0801a8d4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801a8d4:	4770      	bx	lr

0801a8d6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801a8d6:	4770      	bx	lr

0801a8d8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801a8d8:	4770      	bx	lr

0801a8da <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801a8da:	4770      	bx	lr

0801a8dc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801a8dc:	4770      	bx	lr

0801a8de <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801a8de:	4770      	bx	lr

0801a8e0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801a8e0:	4770      	bx	lr

0801a8e2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801a8e2:	4770      	bx	lr

0801a8e4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801a8e4:	4770      	bx	lr

0801a8e6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801a8e6:	4770      	bx	lr

0801a8e8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801a8e8:	4770      	bx	lr

0801a8ea <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801a8ea:	4770      	bx	lr

0801a8ec <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801a8ec:	2bff      	cmp	r3, #255	; 0xff
 801a8ee:	b508      	push	{r3, lr}
 801a8f0:	d04f      	beq.n	801a992 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 801a8f2:	2a2c      	cmp	r2, #44	; 0x2c
 801a8f4:	d032      	beq.n	801a95c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x70>
 801a8f6:	d80f      	bhi.n	801a918 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2c>
 801a8f8:	2a08      	cmp	r2, #8
 801a8fa:	d046      	beq.n	801a98a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801a8fc:	d805      	bhi.n	801a90a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1e>
 801a8fe:	2a04      	cmp	r2, #4
 801a900:	d041      	beq.n	801a986 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801a902:	2a05      	cmp	r2, #5
 801a904:	d03d      	beq.n	801a982 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 801a906:	2000      	movs	r0, #0
 801a908:	e027      	b.n	801a95a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801a90a:	2a0a      	cmp	r2, #10
 801a90c:	d03d      	beq.n	801a98a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801a90e:	d301      	bcc.n	801a914 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 801a910:	2a0b      	cmp	r2, #11
 801a912:	d1f8      	bne.n	801a906 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801a914:	6c00      	ldr	r0, [r0, #64]	; 0x40
 801a916:	e020      	b.n	801a95a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801a918:	2a30      	cmp	r2, #48	; 0x30
 801a91a:	d038      	beq.n	801a98e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801a91c:	d808      	bhi.n	801a930 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x44>
 801a91e:	2a2e      	cmp	r2, #46	; 0x2e
 801a920:	684b      	ldr	r3, [r1, #4]
 801a922:	d029      	beq.n	801a978 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8c>
 801a924:	d90b      	bls.n	801a93e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x52>
 801a926:	781b      	ldrb	r3, [r3, #0]
 801a928:	2b00      	cmp	r3, #0
 801a92a:	d1ec      	bne.n	801a906 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801a92c:	6a00      	ldr	r0, [r0, #32]
 801a92e:	e014      	b.n	801a95a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801a930:	2a32      	cmp	r2, #50	; 0x32
 801a932:	d02c      	beq.n	801a98e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801a934:	d301      	bcc.n	801a93a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4e>
 801a936:	2a33      	cmp	r2, #51	; 0x33
 801a938:	d1e5      	bne.n	801a906 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801a93a:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801a93c:	e00d      	b.n	801a95a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801a93e:	781b      	ldrb	r3, [r3, #0]
 801a940:	2b01      	cmp	r3, #1
 801a942:	d009      	beq.n	801a958 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6c>
 801a944:	d3f2      	bcc.n	801a92c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x40>
 801a946:	2b02      	cmp	r3, #2
 801a948:	d1dd      	bne.n	801a906 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801a94a:	4b39      	ldr	r3, [pc, #228]	; (801aa30 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801a94c:	4a39      	ldr	r2, [pc, #228]	; (801aa34 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801a94e:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 801a952:	4839      	ldr	r0, [pc, #228]	; (801aa38 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x14c>)
 801a954:	f007 ff4c 	bl	80227f0 <__assert_func>
 801a958:	6900      	ldr	r0, [r0, #16]
 801a95a:	bd08      	pop	{r3, pc}
 801a95c:	684b      	ldr	r3, [r1, #4]
 801a95e:	781b      	ldrb	r3, [r3, #0]
 801a960:	2b01      	cmp	r3, #1
 801a962:	d007      	beq.n	801a974 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x88>
 801a964:	d30b      	bcc.n	801a97e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 801a966:	2b02      	cmp	r3, #2
 801a968:	d1cd      	bne.n	801a906 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801a96a:	4b31      	ldr	r3, [pc, #196]	; (801aa30 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801a96c:	4a31      	ldr	r2, [pc, #196]	; (801aa34 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801a96e:	f44f 716c 	mov.w	r1, #944	; 0x3b0
 801a972:	e7ee      	b.n	801a952 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801a974:	6880      	ldr	r0, [r0, #8]
 801a976:	e7f0      	b.n	801a95a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801a978:	781b      	ldrb	r3, [r3, #0]
 801a97a:	2b00      	cmp	r3, #0
 801a97c:	d1c3      	bne.n	801a906 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801a97e:	6980      	ldr	r0, [r0, #24]
 801a980:	e7eb      	b.n	801a95a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801a982:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801a984:	e7e9      	b.n	801a95a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801a986:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801a988:	e7e7      	b.n	801a95a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801a98a:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801a98c:	e7e5      	b.n	801a95a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801a98e:	6c80      	ldr	r0, [r0, #72]	; 0x48
 801a990:	e7e3      	b.n	801a95a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801a992:	2a2c      	cmp	r2, #44	; 0x2c
 801a994:	d030      	beq.n	801a9f8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x10c>
 801a996:	d80f      	bhi.n	801a9b8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xcc>
 801a998:	2a08      	cmp	r2, #8
 801a99a:	d044      	beq.n	801aa26 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801a99c:	d805      	bhi.n	801a9aa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbe>
 801a99e:	2a04      	cmp	r2, #4
 801a9a0:	d03f      	beq.n	801aa22 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 801a9a2:	2a05      	cmp	r2, #5
 801a9a4:	d1af      	bne.n	801a906 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801a9a6:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801a9a8:	e7d7      	b.n	801a95a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801a9aa:	2a0a      	cmp	r2, #10
 801a9ac:	d03b      	beq.n	801aa26 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801a9ae:	d301      	bcc.n	801a9b4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc8>
 801a9b0:	2a0b      	cmp	r2, #11
 801a9b2:	d1a8      	bne.n	801a906 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801a9b4:	6c40      	ldr	r0, [r0, #68]	; 0x44
 801a9b6:	e7d0      	b.n	801a95a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801a9b8:	2a30      	cmp	r2, #48	; 0x30
 801a9ba:	d036      	beq.n	801aa2a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801a9bc:	d808      	bhi.n	801a9d0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe4>
 801a9be:	2a2e      	cmp	r2, #46	; 0x2e
 801a9c0:	684b      	ldr	r3, [r1, #4]
 801a9c2:	d028      	beq.n	801aa16 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12a>
 801a9c4:	d90b      	bls.n	801a9de <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf2>
 801a9c6:	781b      	ldrb	r3, [r3, #0]
 801a9c8:	2b00      	cmp	r3, #0
 801a9ca:	d19c      	bne.n	801a906 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801a9cc:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801a9ce:	e7c4      	b.n	801a95a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801a9d0:	2a32      	cmp	r2, #50	; 0x32
 801a9d2:	d02a      	beq.n	801aa2a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801a9d4:	d301      	bcc.n	801a9da <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xee>
 801a9d6:	2a33      	cmp	r2, #51	; 0x33
 801a9d8:	d195      	bne.n	801a906 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801a9da:	6d40      	ldr	r0, [r0, #84]	; 0x54
 801a9dc:	e7bd      	b.n	801a95a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801a9de:	781b      	ldrb	r3, [r3, #0]
 801a9e0:	2b01      	cmp	r3, #1
 801a9e2:	d007      	beq.n	801a9f4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x108>
 801a9e4:	d3f2      	bcc.n	801a9cc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe0>
 801a9e6:	2b02      	cmp	r3, #2
 801a9e8:	d18d      	bne.n	801a906 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801a9ea:	4b11      	ldr	r3, [pc, #68]	; (801aa30 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801a9ec:	4a11      	ldr	r2, [pc, #68]	; (801aa34 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801a9ee:	f240 31e1 	movw	r1, #993	; 0x3e1
 801a9f2:	e7ae      	b.n	801a952 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801a9f4:	6940      	ldr	r0, [r0, #20]
 801a9f6:	e7b0      	b.n	801a95a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801a9f8:	684b      	ldr	r3, [r1, #4]
 801a9fa:	781b      	ldrb	r3, [r3, #0]
 801a9fc:	2b01      	cmp	r3, #1
 801a9fe:	d008      	beq.n	801aa12 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x126>
 801aa00:	d30d      	bcc.n	801aa1e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 801aa02:	2b02      	cmp	r3, #2
 801aa04:	f47f af7f 	bne.w	801a906 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801aa08:	4b09      	ldr	r3, [pc, #36]	; (801aa30 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801aa0a:	4a0a      	ldr	r2, [pc, #40]	; (801aa34 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801aa0c:	f240 31ed 	movw	r1, #1005	; 0x3ed
 801aa10:	e79f      	b.n	801a952 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801aa12:	68c0      	ldr	r0, [r0, #12]
 801aa14:	e7a1      	b.n	801a95a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801aa16:	781b      	ldrb	r3, [r3, #0]
 801aa18:	2b00      	cmp	r3, #0
 801aa1a:	f47f af74 	bne.w	801a906 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801aa1e:	69c0      	ldr	r0, [r0, #28]
 801aa20:	e79b      	b.n	801a95a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801aa22:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801aa24:	e799      	b.n	801a95a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801aa26:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 801aa28:	e797      	b.n	801a95a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801aa2a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 801aa2c:	e795      	b.n	801a95a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801aa2e:	bf00      	nop
 801aa30:	08027600 	.word	0x08027600
 801aa34:	08027db3 	.word	0x08027db3
 801aa38:	0802764c 	.word	0x0802764c

0801aa3c <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 801aa3c:	b508      	push	{r3, lr}
 801aa3e:	4b06      	ldr	r3, [pc, #24]	; (801aa58 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x1c>)
 801aa40:	8818      	ldrh	r0, [r3, #0]
 801aa42:	b928      	cbnz	r0, 801aa50 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x14>
 801aa44:	4b05      	ldr	r3, [pc, #20]	; (801aa5c <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x20>)
 801aa46:	4a06      	ldr	r2, [pc, #24]	; (801aa60 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x24>)
 801aa48:	4806      	ldr	r0, [pc, #24]	; (801aa64 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x28>)
 801aa4a:	21d7      	movs	r1, #215	; 0xd7
 801aa4c:	f007 fed0 	bl	80227f0 <__assert_func>
 801aa50:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801aa54:	b280      	uxth	r0, r0
 801aa56:	bd08      	pop	{r3, pc}
 801aa58:	2000d19e 	.word	0x2000d19e
 801aa5c:	0802789b 	.word	0x0802789b
 801aa60:	08027d78 	.word	0x08027d78
 801aa64:	080278dd 	.word	0x080278dd

0801aa68 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 801aa68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aa6c:	4616      	mov	r6, r2
 801aa6e:	b087      	sub	sp, #28
 801aa70:	461f      	mov	r7, r3
 801aa72:	b33b      	cbz	r3, 801aac4 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801aa74:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801aa78:	b323      	cbz	r3, 801aac4 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801aa7a:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801aa7e:	b30b      	cbz	r3, 801aac4 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801aa80:	6808      	ldr	r0, [r1, #0]
 801aa82:	6849      	ldr	r1, [r1, #4]
 801aa84:	4c5a      	ldr	r4, [pc, #360]	; (801abf0 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x188>)
 801aa86:	ab04      	add	r3, sp, #16
 801aa88:	c303      	stmia	r3!, {r0, r1}
 801aa8a:	a804      	add	r0, sp, #16
 801aa8c:	f7fb fe32 	bl	80166f4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801aa90:	6820      	ldr	r0, [r4, #0]
 801aa92:	6803      	ldr	r3, [r0, #0]
 801aa94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801aa96:	4798      	blx	r3
 801aa98:	2fff      	cmp	r7, #255	; 0xff
 801aa9a:	4623      	mov	r3, r4
 801aa9c:	d015      	beq.n	801aaca <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801aa9e:	f010 0f08 	tst.w	r0, #8
 801aaa2:	d015      	beq.n	801aad0 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x68>
 801aaa4:	6818      	ldr	r0, [r3, #0]
 801aaa6:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 801aaaa:	6801      	ldr	r1, [r0, #0]
 801aaac:	9401      	str	r4, [sp, #4]
 801aaae:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 801aab2:	9702      	str	r7, [sp, #8]
 801aab4:	9400      	str	r4, [sp, #0]
 801aab6:	6c8c      	ldr	r4, [r1, #72]	; 0x48
 801aab8:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801aabc:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801aac0:	4631      	mov	r1, r6
 801aac2:	47a0      	blx	r4
 801aac4:	b007      	add	sp, #28
 801aac6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aaca:	f010 0f02 	tst.w	r0, #2
 801aace:	e7e8      	b.n	801aaa2 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3a>
 801aad0:	6818      	ldr	r0, [r3, #0]
 801aad2:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
 801aad6:	6803      	ldr	r3, [r0, #0]
 801aad8:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 801aadc:	6a1b      	ldr	r3, [r3, #32]
 801aade:	4798      	blx	r3
 801aae0:	4944      	ldr	r1, [pc, #272]	; (801abf4 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x18c>)
 801aae2:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801aae6:	f8b1 c000 	ldrh.w	ip, [r1]
 801aaea:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801aaee:	fb0c 2303 	mla	r3, ip, r3, r2
 801aaf2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801aaf6:	2fff      	cmp	r7, #255	; 0xff
 801aaf8:	f3c6 4c07 	ubfx	ip, r6, #16, #8
 801aafc:	f3c6 2e07 	ubfx	lr, r6, #8, #8
 801ab00:	b2f2      	uxtb	r2, r6
 801ab02:	4418      	add	r0, r3
 801ab04:	4688      	mov	r8, r1
 801ab06:	ea24 76e4 	bic.w	r6, r4, r4, asr #31
 801ab0a:	d112      	bne.n	801ab32 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xca>
 801ab0c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801ab10:	2100      	movs	r1, #0
 801ab12:	42a9      	cmp	r1, r5
 801ab14:	da66      	bge.n	801abe4 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x17c>
 801ab16:	4603      	mov	r3, r0
 801ab18:	2700      	movs	r7, #0
 801ab1a:	42a7      	cmp	r7, r4
 801ab1c:	f103 0303 	add.w	r3, r3, #3
 801ab20:	da57      	bge.n	801abd2 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x16a>
 801ab22:	f803 2c03 	strb.w	r2, [r3, #-3]
 801ab26:	f803 ec02 	strb.w	lr, [r3, #-2]
 801ab2a:	f803 cc01 	strb.w	ip, [r3, #-1]
 801ab2e:	3701      	adds	r7, #1
 801ab30:	e7f3      	b.n	801ab1a <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xb2>
 801ab32:	b2bb      	uxth	r3, r7
 801ab34:	fb0c fc03 	mul.w	ip, ip, r3
 801ab38:	fb0e fe03 	mul.w	lr, lr, r3
 801ab3c:	435a      	muls	r2, r3
 801ab3e:	f1c7 03ff 	rsb	r3, r7, #255	; 0xff
 801ab42:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801ab46:	f04f 0800 	mov.w	r8, #0
 801ab4a:	b29b      	uxth	r3, r3
 801ab4c:	460f      	mov	r7, r1
 801ab4e:	45a8      	cmp	r8, r5
 801ab50:	da48      	bge.n	801abe4 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x17c>
 801ab52:	4601      	mov	r1, r0
 801ab54:	f04f 0a00 	mov.w	sl, #0
 801ab58:	45a2      	cmp	sl, r4
 801ab5a:	f101 0103 	add.w	r1, r1, #3
 801ab5e:	da2f      	bge.n	801abc0 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x158>
 801ab60:	f811 9c03 	ldrb.w	r9, [r1, #-3]
 801ab64:	fb19 f903 	smulbb	r9, r9, r3
 801ab68:	4491      	add	r9, r2
 801ab6a:	fa1f f989 	uxth.w	r9, r9
 801ab6e:	f109 0b01 	add.w	fp, r9, #1
 801ab72:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801ab76:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ab7a:	f801 9c03 	strb.w	r9, [r1, #-3]
 801ab7e:	f811 9c02 	ldrb.w	r9, [r1, #-2]
 801ab82:	fb19 f903 	smulbb	r9, r9, r3
 801ab86:	44f1      	add	r9, lr
 801ab88:	fa1f f989 	uxth.w	r9, r9
 801ab8c:	f109 0b01 	add.w	fp, r9, #1
 801ab90:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801ab94:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ab98:	f801 9c02 	strb.w	r9, [r1, #-2]
 801ab9c:	f811 9c01 	ldrb.w	r9, [r1, #-1]
 801aba0:	fb19 f903 	smulbb	r9, r9, r3
 801aba4:	44e1      	add	r9, ip
 801aba6:	fa1f f989 	uxth.w	r9, r9
 801abaa:	f109 0b01 	add.w	fp, r9, #1
 801abae:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801abb2:	ea4f 2929 	mov.w	r9, r9, asr #8
 801abb6:	f801 9c01 	strb.w	r9, [r1, #-1]
 801abba:	f10a 0a01 	add.w	sl, sl, #1
 801abbe:	e7cb      	b.n	801ab58 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xf0>
 801abc0:	8839      	ldrh	r1, [r7, #0]
 801abc2:	1b09      	subs	r1, r1, r4
 801abc4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801abc8:	4431      	add	r1, r6
 801abca:	4408      	add	r0, r1
 801abcc:	f108 0801 	add.w	r8, r8, #1
 801abd0:	e7bd      	b.n	801ab4e <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xe6>
 801abd2:	f8b8 3000 	ldrh.w	r3, [r8]
 801abd6:	1b1b      	subs	r3, r3, r4
 801abd8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801abdc:	4433      	add	r3, r6
 801abde:	4418      	add	r0, r3
 801abe0:	3101      	adds	r1, #1
 801abe2:	e796      	b.n	801ab12 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xaa>
 801abe4:	4b02      	ldr	r3, [pc, #8]	; (801abf0 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x188>)
 801abe6:	6818      	ldr	r0, [r3, #0]
 801abe8:	6803      	ldr	r3, [r0, #0]
 801abea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801abec:	4798      	blx	r3
 801abee:	e769      	b.n	801aac4 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801abf0:	2000d1a4 	.word	0x2000d1a4
 801abf4:	2000d19e 	.word	0x2000d19e

0801abf8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801abf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801abfc:	b08d      	sub	sp, #52	; 0x34
 801abfe:	460c      	mov	r4, r1
 801ac00:	f89d 6058 	ldrb.w	r6, [sp, #88]	; 0x58
 801ac04:	f89d 905c 	ldrb.w	r9, [sp, #92]	; 0x5c
 801ac08:	4617      	mov	r7, r2
 801ac0a:	2e00      	cmp	r6, #0
 801ac0c:	d04a      	beq.n	801aca4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801ac0e:	6810      	ldr	r0, [r2, #0]
 801ac10:	6851      	ldr	r1, [r2, #4]
 801ac12:	ad08      	add	r5, sp, #32
 801ac14:	c503      	stmia	r5!, {r0, r1}
 801ac16:	6818      	ldr	r0, [r3, #0]
 801ac18:	6859      	ldr	r1, [r3, #4]
 801ac1a:	ad0a      	add	r5, sp, #40	; 0x28
 801ac1c:	c503      	stmia	r5!, {r0, r1}
 801ac1e:	a808      	add	r0, sp, #32
 801ac20:	f7fb fd68 	bl	80166f4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ac24:	4639      	mov	r1, r7
 801ac26:	a80a      	add	r0, sp, #40	; 0x28
 801ac28:	f7fb fd4c 	bl	80166c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801ac2c:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801ac30:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 801ac34:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 801ac38:	4f55      	ldr	r7, [pc, #340]	; (801ad90 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x198>)
 801ac3a:	f9bd 502c 	ldrsh.w	r5, [sp, #44]	; 0x2c
 801ac3e:	6838      	ldr	r0, [r7, #0]
 801ac40:	f9bd 802e 	ldrsh.w	r8, [sp, #46]	; 0x2e
 801ac44:	fb11 2103 	smlabb	r1, r1, r3, r2
 801ac48:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801ac4c:	440c      	add	r4, r1
 801ac4e:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 801ac52:	440a      	add	r2, r1
 801ac54:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801ac58:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 801ac5c:	4413      	add	r3, r2
 801ac5e:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801ac62:	6803      	ldr	r3, [r0, #0]
 801ac64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ac66:	4798      	blx	r3
 801ac68:	2eff      	cmp	r6, #255	; 0xff
 801ac6a:	f000 8089 	beq.w	801ad80 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x188>
 801ac6e:	0743      	lsls	r3, r0, #29
 801ac70:	d405      	bmi.n	801ac7e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x86>
 801ac72:	f1b9 0f00 	cmp.w	r9, #0
 801ac76:	d018      	beq.n	801acaa <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 801ac78:	f010 0f10 	tst.w	r0, #16
 801ac7c:	d015      	beq.n	801acaa <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 801ac7e:	6838      	ldr	r0, [r7, #0]
 801ac80:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 801ac84:	6801      	ldr	r1, [r0, #0]
 801ac86:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801ac8a:	e9cd 6903 	strd	r6, r9, [sp, #12]
 801ac8e:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
 801ac92:	9602      	str	r6, [sp, #8]
 801ac94:	b2ad      	uxth	r5, r5
 801ac96:	fa1f f688 	uxth.w	r6, r8
 801ac9a:	9601      	str	r6, [sp, #4]
 801ac9c:	9500      	str	r5, [sp, #0]
 801ac9e:	6b8d      	ldr	r5, [r1, #56]	; 0x38
 801aca0:	4621      	mov	r1, r4
 801aca2:	47a8      	blx	r5
 801aca4:	b00d      	add	sp, #52	; 0x34
 801aca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801acaa:	6838      	ldr	r0, [r7, #0]
 801acac:	6803      	ldr	r3, [r0, #0]
 801acae:	6a1b      	ldr	r3, [r3, #32]
 801acb0:	4798      	blx	r3
 801acb2:	4a38      	ldr	r2, [pc, #224]	; (801ad94 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>)
 801acb4:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 801acb8:	8813      	ldrh	r3, [r2, #0]
 801acba:	f9bd c02a 	ldrsh.w	ip, [sp, #42]	; 0x2a
 801acbe:	fb0c 1303 	mla	r3, ip, r3, r1
 801acc2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801acc6:	2eff      	cmp	r6, #255	; 0xff
 801acc8:	4418      	add	r0, r3
 801acca:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 801acce:	d032      	beq.n	801ad36 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13e>
 801acd0:	f1c6 03ff 	rsb	r3, r6, #255	; 0xff
 801acd4:	9306      	str	r3, [sp, #24]
 801acd6:	f04f 0c00 	mov.w	ip, #0
 801acda:	ea21 7ae1 	bic.w	sl, r1, r1, asr #31
 801acde:	45c4      	cmp	ip, r8
 801ace0:	da49      	bge.n	801ad76 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x17e>
 801ace2:	4686      	mov	lr, r0
 801ace4:	46a1      	mov	r9, r4
 801ace6:	eba9 0304 	sub.w	r3, r9, r4
 801acea:	428b      	cmp	r3, r1
 801acec:	da13      	bge.n	801ad16 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x11e>
 801acee:	f819 3b01 	ldrb.w	r3, [r9], #1
 801acf2:	9307      	str	r3, [sp, #28]
 801acf4:	f89e b000 	ldrb.w	fp, [lr]
 801acf8:	9b06      	ldr	r3, [sp, #24]
 801acfa:	fb1b fb03 	smulbb	fp, fp, r3
 801acfe:	9b07      	ldr	r3, [sp, #28]
 801ad00:	fb03 b306 	mla	r3, r3, r6, fp
 801ad04:	b29b      	uxth	r3, r3
 801ad06:	f103 0b01 	add.w	fp, r3, #1
 801ad0a:	eb0b 2313 	add.w	r3, fp, r3, lsr #8
 801ad0e:	121b      	asrs	r3, r3, #8
 801ad10:	f80e 3b01 	strb.w	r3, [lr], #1
 801ad14:	e7e7      	b.n	801ace6 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xee>
 801ad16:	8813      	ldrh	r3, [r2, #0]
 801ad18:	1b5b      	subs	r3, r3, r5
 801ad1a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ad1e:	4453      	add	r3, sl
 801ad20:	4418      	add	r0, r3
 801ad22:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 801ad26:	1b5b      	subs	r3, r3, r5
 801ad28:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ad2c:	4453      	add	r3, sl
 801ad2e:	441c      	add	r4, r3
 801ad30:	f10c 0c01 	add.w	ip, ip, #1
 801ad34:	e7d3      	b.n	801acde <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xe6>
 801ad36:	2600      	movs	r6, #0
 801ad38:	ea21 7ce1 	bic.w	ip, r1, r1, asr #31
 801ad3c:	4546      	cmp	r6, r8
 801ad3e:	da1a      	bge.n	801ad76 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x17e>
 801ad40:	f100 3eff 	add.w	lr, r0, #4294967295
 801ad44:	4623      	mov	r3, r4
 801ad46:	eba3 0904 	sub.w	r9, r3, r4
 801ad4a:	4589      	cmp	r9, r1
 801ad4c:	da04      	bge.n	801ad58 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>
 801ad4e:	f813 9b01 	ldrb.w	r9, [r3], #1
 801ad52:	f80e 9f01 	strb.w	r9, [lr, #1]!
 801ad56:	e7f6      	b.n	801ad46 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x14e>
 801ad58:	8813      	ldrh	r3, [r2, #0]
 801ad5a:	1b5b      	subs	r3, r3, r5
 801ad5c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ad60:	4463      	add	r3, ip
 801ad62:	4418      	add	r0, r3
 801ad64:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 801ad68:	1b5b      	subs	r3, r3, r5
 801ad6a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ad6e:	4463      	add	r3, ip
 801ad70:	441c      	add	r4, r3
 801ad72:	3601      	adds	r6, #1
 801ad74:	e7e2      	b.n	801ad3c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x144>
 801ad76:	6838      	ldr	r0, [r7, #0]
 801ad78:	6803      	ldr	r3, [r0, #0]
 801ad7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ad7c:	4798      	blx	r3
 801ad7e:	e791      	b.n	801aca4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801ad80:	f1b9 0f00 	cmp.w	r9, #0
 801ad84:	f47f af78 	bne.w	801ac78 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x80>
 801ad88:	f010 0f01 	tst.w	r0, #1
 801ad8c:	e776      	b.n	801ac7c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x84>
 801ad8e:	bf00      	nop
 801ad90:	2000d1a4 	.word	0x2000d1a4
 801ad94:	2000d19e 	.word	0x2000d19e

0801ad98 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801ad98:	b510      	push	{r4, lr}
 801ad9a:	2104      	movs	r1, #4
 801ad9c:	4604      	mov	r4, r0
 801ad9e:	f007 fcfc 	bl	802279a <_ZdlPvj>
 801ada2:	4620      	mov	r0, r4
 801ada4:	bd10      	pop	{r4, pc}

0801ada6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801ada6:	b510      	push	{r4, lr}
 801ada8:	2104      	movs	r1, #4
 801adaa:	4604      	mov	r4, r0
 801adac:	f007 fcf5 	bl	802279a <_ZdlPvj>
 801adb0:	4620      	mov	r0, r4
 801adb2:	bd10      	pop	{r4, pc}

0801adb4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801adb4:	b510      	push	{r4, lr}
 801adb6:	2104      	movs	r1, #4
 801adb8:	4604      	mov	r4, r0
 801adba:	f007 fcee 	bl	802279a <_ZdlPvj>
 801adbe:	4620      	mov	r0, r4
 801adc0:	bd10      	pop	{r4, pc}

0801adc2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801adc2:	b510      	push	{r4, lr}
 801adc4:	2104      	movs	r1, #4
 801adc6:	4604      	mov	r4, r0
 801adc8:	f007 fce7 	bl	802279a <_ZdlPvj>
 801adcc:	4620      	mov	r0, r4
 801adce:	bd10      	pop	{r4, pc}

0801add0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801add0:	b510      	push	{r4, lr}
 801add2:	2104      	movs	r1, #4
 801add4:	4604      	mov	r4, r0
 801add6:	f007 fce0 	bl	802279a <_ZdlPvj>
 801adda:	4620      	mov	r0, r4
 801addc:	bd10      	pop	{r4, pc}

0801adde <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801adde:	b510      	push	{r4, lr}
 801ade0:	2104      	movs	r1, #4
 801ade2:	4604      	mov	r4, r0
 801ade4:	f007 fcd9 	bl	802279a <_ZdlPvj>
 801ade8:	4620      	mov	r0, r4
 801adea:	bd10      	pop	{r4, pc}

0801adec <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801adec:	b510      	push	{r4, lr}
 801adee:	2104      	movs	r1, #4
 801adf0:	4604      	mov	r4, r0
 801adf2:	f007 fcd2 	bl	802279a <_ZdlPvj>
 801adf6:	4620      	mov	r0, r4
 801adf8:	bd10      	pop	{r4, pc}

0801adfa <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801adfa:	b510      	push	{r4, lr}
 801adfc:	2104      	movs	r1, #4
 801adfe:	4604      	mov	r4, r0
 801ae00:	f007 fccb 	bl	802279a <_ZdlPvj>
 801ae04:	4620      	mov	r0, r4
 801ae06:	bd10      	pop	{r4, pc}

0801ae08 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801ae08:	b510      	push	{r4, lr}
 801ae0a:	2104      	movs	r1, #4
 801ae0c:	4604      	mov	r4, r0
 801ae0e:	f007 fcc4 	bl	802279a <_ZdlPvj>
 801ae12:	4620      	mov	r0, r4
 801ae14:	bd10      	pop	{r4, pc}

0801ae16 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801ae16:	b510      	push	{r4, lr}
 801ae18:	2104      	movs	r1, #4
 801ae1a:	4604      	mov	r4, r0
 801ae1c:	f007 fcbd 	bl	802279a <_ZdlPvj>
 801ae20:	4620      	mov	r0, r4
 801ae22:	bd10      	pop	{r4, pc}

0801ae24 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801ae24:	b510      	push	{r4, lr}
 801ae26:	2104      	movs	r1, #4
 801ae28:	4604      	mov	r4, r0
 801ae2a:	f007 fcb6 	bl	802279a <_ZdlPvj>
 801ae2e:	4620      	mov	r0, r4
 801ae30:	bd10      	pop	{r4, pc}

0801ae32 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801ae32:	b510      	push	{r4, lr}
 801ae34:	2104      	movs	r1, #4
 801ae36:	4604      	mov	r4, r0
 801ae38:	f007 fcaf 	bl	802279a <_ZdlPvj>
 801ae3c:	4620      	mov	r0, r4
 801ae3e:	bd10      	pop	{r4, pc}

0801ae40 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801ae40:	b510      	push	{r4, lr}
 801ae42:	2104      	movs	r1, #4
 801ae44:	4604      	mov	r4, r0
 801ae46:	f007 fca8 	bl	802279a <_ZdlPvj>
 801ae4a:	4620      	mov	r0, r4
 801ae4c:	bd10      	pop	{r4, pc}

0801ae4e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801ae4e:	b510      	push	{r4, lr}
 801ae50:	2104      	movs	r1, #4
 801ae52:	4604      	mov	r4, r0
 801ae54:	f007 fca1 	bl	802279a <_ZdlPvj>
 801ae58:	4620      	mov	r0, r4
 801ae5a:	bd10      	pop	{r4, pc}

0801ae5c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801ae5c:	b510      	push	{r4, lr}
 801ae5e:	2104      	movs	r1, #4
 801ae60:	4604      	mov	r4, r0
 801ae62:	f007 fc9a 	bl	802279a <_ZdlPvj>
 801ae66:	4620      	mov	r0, r4
 801ae68:	bd10      	pop	{r4, pc}

0801ae6a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801ae6a:	b510      	push	{r4, lr}
 801ae6c:	2104      	movs	r1, #4
 801ae6e:	4604      	mov	r4, r0
 801ae70:	f007 fc93 	bl	802279a <_ZdlPvj>
 801ae74:	4620      	mov	r0, r4
 801ae76:	bd10      	pop	{r4, pc}

0801ae78 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 801ae78:	b510      	push	{r4, lr}
 801ae7a:	2104      	movs	r1, #4
 801ae7c:	4604      	mov	r4, r0
 801ae7e:	f007 fc8c 	bl	802279a <_ZdlPvj>
 801ae82:	4620      	mov	r0, r4
 801ae84:	bd10      	pop	{r4, pc}

0801ae86 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 801ae86:	b510      	push	{r4, lr}
 801ae88:	2104      	movs	r1, #4
 801ae8a:	4604      	mov	r4, r0
 801ae8c:	f007 fc85 	bl	802279a <_ZdlPvj>
 801ae90:	4620      	mov	r0, r4
 801ae92:	bd10      	pop	{r4, pc}

0801ae94 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 801ae94:	b510      	push	{r4, lr}
 801ae96:	2104      	movs	r1, #4
 801ae98:	4604      	mov	r4, r0
 801ae9a:	f007 fc7e 	bl	802279a <_ZdlPvj>
 801ae9e:	4620      	mov	r0, r4
 801aea0:	bd10      	pop	{r4, pc}

0801aea2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 801aea2:	b510      	push	{r4, lr}
 801aea4:	2104      	movs	r1, #4
 801aea6:	4604      	mov	r4, r0
 801aea8:	f007 fc77 	bl	802279a <_ZdlPvj>
 801aeac:	4620      	mov	r0, r4
 801aeae:	bd10      	pop	{r4, pc}

0801aeb0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 801aeb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aeb4:	4d9e      	ldr	r5, [pc, #632]	; (801b130 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>)
 801aeb6:	4690      	mov	r8, r2
 801aeb8:	682a      	ldr	r2, [r5, #0]
 801aeba:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 801aebe:	2a02      	cmp	r2, #2
 801aec0:	b08f      	sub	sp, #60	; 0x3c
 801aec2:	4604      	mov	r4, r0
 801aec4:	4689      	mov	r9, r1
 801aec6:	d106      	bne.n	801aed6 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26>
 801aec8:	4b9a      	ldr	r3, [pc, #616]	; (801b134 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x284>)
 801aeca:	4a9b      	ldr	r2, [pc, #620]	; (801b138 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 801aecc:	f44f 71cc 	mov.w	r1, #408	; 0x198
 801aed0:	489a      	ldr	r0, [pc, #616]	; (801b13c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x28c>)
 801aed2:	f007 fc8d 	bl	80227f0 <__assert_func>
 801aed6:	ae0e      	add	r6, sp, #56	; 0x38
 801aed8:	f826 3d24 	strh.w	r3, [r6, #-36]!
 801aedc:	4630      	mov	r0, r6
 801aede:	f7fe f8b3 	bl	8019048 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801aee2:	6823      	ldr	r3, [r4, #0]
 801aee4:	4607      	mov	r7, r0
 801aee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801aee8:	4620      	mov	r0, r4
 801aeea:	4798      	blx	r3
 801aeec:	4287      	cmp	r7, r0
 801aeee:	d004      	beq.n	801aefa <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x4a>
 801aef0:	4b93      	ldr	r3, [pc, #588]	; (801b140 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x290>)
 801aef2:	4a91      	ldr	r2, [pc, #580]	; (801b138 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 801aef4:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 801aef8:	e7ea      	b.n	801aed0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801aefa:	4630      	mov	r0, r6
 801aefc:	f7fe f820 	bl	8018f40 <_ZNK8touchgfx6Bitmap7getDataEv>
 801af00:	4607      	mov	r7, r0
 801af02:	b920      	cbnz	r0, 801af0e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x5e>
 801af04:	4b8f      	ldr	r3, [pc, #572]	; (801b144 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x294>)
 801af06:	4a8c      	ldr	r2, [pc, #560]	; (801b138 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 801af08:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 801af0c:	e7e0      	b.n	801aed0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801af0e:	f8d8 0000 	ldr.w	r0, [r8]
 801af12:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801af16:	f9b8 a000 	ldrsh.w	sl, [r8]
 801af1a:	ab06      	add	r3, sp, #24
 801af1c:	c303      	stmia	r3!, {r0, r1}
 801af1e:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801af22:	f8d9 0000 	ldr.w	r0, [r9]
 801af26:	f9b8 9002 	ldrsh.w	r9, [r8, #2]
 801af2a:	ab08      	add	r3, sp, #32
 801af2c:	c303      	stmia	r3!, {r0, r1}
 801af2e:	4630      	mov	r0, r6
 801af30:	f7fd fefe 	bl	8018d30 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801af34:	4680      	mov	r8, r0
 801af36:	4630      	mov	r0, r6
 801af38:	f7fd ff34 	bl	8018da4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801af3c:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 801af40:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
 801af44:	f10d 0920 	add.w	r9, sp, #32
 801af48:	a806      	add	r0, sp, #24
 801af4a:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 801af4e:	f8ad 802c 	strh.w	r8, [sp, #44]	; 0x2c
 801af52:	f7fb fbcf 	bl	80166f4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801af56:	4648      	mov	r0, r9
 801af58:	f7fb fbcc 	bl	80166f4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801af5c:	a80a      	add	r0, sp, #40	; 0x28
 801af5e:	f7fb fbc9 	bl	80166f4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801af62:	4e79      	ldr	r6, [pc, #484]	; (801b148 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x298>)
 801af64:	4b79      	ldr	r3, [pc, #484]	; (801b14c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x29c>)
 801af66:	f9b6 2000 	ldrsh.w	r2, [r6]
 801af6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801af6e:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 801af72:	2100      	movs	r1, #0
 801af74:	910c      	str	r1, [sp, #48]	; 0x30
 801af76:	4648      	mov	r0, r9
 801af78:	a90c      	add	r1, sp, #48	; 0x30
 801af7a:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801af7e:	f7f8 fb97 	bl	80136b0 <_ZN8touchgfx4RectaNERKS0_>
 801af82:	f9bd c024 	ldrsh.w	ip, [sp, #36]	; 0x24
 801af86:	9602      	str	r6, [sp, #8]
 801af88:	f1bc 0f00 	cmp.w	ip, #0
 801af8c:	f000 80a3 	beq.w	801b0d6 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x226>
 801af90:	f9bd 6026 	ldrsh.w	r6, [sp, #38]	; 0x26
 801af94:	2e00      	cmp	r6, #0
 801af96:	f000 809e 	beq.w	801b0d6 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x226>
 801af9a:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 801af9e:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 801afa2:	4288      	cmp	r0, r1
 801afa4:	db36      	blt.n	801b014 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801afa6:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 801afaa:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 801afae:	429a      	cmp	r2, r3
 801afb0:	db30      	blt.n	801b014 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801afb2:	4460      	add	r0, ip
 801afb4:	f8bd c01c 	ldrh.w	ip, [sp, #28]
 801afb8:	4461      	add	r1, ip
 801afba:	b200      	sxth	r0, r0
 801afbc:	b209      	sxth	r1, r1
 801afbe:	4288      	cmp	r0, r1
 801afc0:	dc28      	bgt.n	801b014 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801afc2:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 801afc6:	4432      	add	r2, r6
 801afc8:	440b      	add	r3, r1
 801afca:	b212      	sxth	r2, r2
 801afcc:	b21b      	sxth	r3, r3
 801afce:	429a      	cmp	r2, r3
 801afd0:	dc20      	bgt.n	801b014 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801afd2:	6823      	ldr	r3, [r4, #0]
 801afd4:	4620      	mov	r0, r4
 801afd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801afd8:	4798      	blx	r3
 801afda:	4682      	mov	sl, r0
 801afdc:	6828      	ldr	r0, [r5, #0]
 801afde:	6803      	ldr	r3, [r0, #0]
 801afe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801afe2:	4798      	blx	r3
 801afe4:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
 801afe8:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801afec:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 801aff0:	9303      	str	r3, [sp, #12]
 801aff2:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801aff6:	1a9b      	subs	r3, r3, r2
 801aff8:	b29b      	uxth	r3, r3
 801affa:	b21c      	sxth	r4, r3
 801affc:	2c00      	cmp	r4, #0
 801affe:	dc0e      	bgt.n	801b01e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x16e>
 801b000:	b134      	cbz	r4, 801b010 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x160>
 801b002:	f8ad 2020 	strh.w	r2, [sp, #32]
 801b006:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801b00a:	4413      	add	r3, r2
 801b00c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 801b010:	463c      	mov	r4, r7
 801b012:	e00b      	b.n	801b02c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x17c>
 801b014:	4b4e      	ldr	r3, [pc, #312]	; (801b150 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2a0>)
 801b016:	4a48      	ldr	r2, [pc, #288]	; (801b138 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 801b018:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801b01c:	e758      	b.n	801aed0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801b01e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801b022:	ebab 0303 	sub.w	r3, fp, r3
 801b026:	443c      	add	r4, r7
 801b028:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 801b02c:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801b030:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801b034:	1a9b      	subs	r3, r3, r2
 801b036:	b29b      	uxth	r3, r3
 801b038:	b219      	sxth	r1, r3
 801b03a:	2900      	cmp	r1, #0
 801b03c:	dd4f      	ble.n	801b0de <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x22e>
 801b03e:	9a03      	ldr	r2, [sp, #12]
 801b040:	fb02 4401 	mla	r4, r2, r1, r4
 801b044:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 801b048:	1ad3      	subs	r3, r2, r3
 801b04a:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801b04e:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 801b052:	f1bc 0f00 	cmp.w	ip, #0
 801b056:	dd3e      	ble.n	801b0d6 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x226>
 801b058:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 801b05c:	2e00      	cmp	r6, #0
 801b05e:	dd3a      	ble.n	801b0d6 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x226>
 801b060:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
 801b064:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801b068:	fb0a f801 	mul.w	r8, sl, r1
 801b06c:	2203      	movs	r2, #3
 801b06e:	fb13 8802 	smlabb	r8, r3, r2, r8
 801b072:	9a02      	ldr	r2, [sp, #8]
 801b074:	4480      	add	r8, r0
 801b076:	f9bd 0024 	ldrsh.w	r0, [sp, #36]	; 0x24
 801b07a:	8812      	ldrh	r2, [r2, #0]
 801b07c:	4584      	cmp	ip, r0
 801b07e:	bfa8      	it	ge
 801b080:	4684      	movge	ip, r0
 801b082:	1ad3      	subs	r3, r2, r3
 801b084:	459c      	cmp	ip, r3
 801b086:	bfa8      	it	ge
 801b088:	469c      	movge	ip, r3
 801b08a:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
 801b08e:	429e      	cmp	r6, r3
 801b090:	bfa8      	it	ge
 801b092:	461e      	movge	r6, r3
 801b094:	4b2d      	ldr	r3, [pc, #180]	; (801b14c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x29c>)
 801b096:	881b      	ldrh	r3, [r3, #0]
 801b098:	1a59      	subs	r1, r3, r1
 801b09a:	428e      	cmp	r6, r1
 801b09c:	4633      	mov	r3, r6
 801b09e:	bfa8      	it	ge
 801b0a0:	460b      	movge	r3, r1
 801b0a2:	4562      	cmp	r2, ip
 801b0a4:	9302      	str	r3, [sp, #8]
 801b0a6:	d12d      	bne.n	801b104 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x254>
 801b0a8:	455a      	cmp	r2, fp
 801b0aa:	d12b      	bne.n	801b104 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x254>
 801b0ac:	6828      	ldr	r0, [r5, #0]
 801b0ae:	6803      	ldr	r3, [r0, #0]
 801b0b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b0b2:	4798      	blx	r3
 801b0b4:	07c3      	lsls	r3, r0, #31
 801b0b6:	d51b      	bpl.n	801b0f0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x240>
 801b0b8:	6828      	ldr	r0, [r5, #0]
 801b0ba:	9b02      	ldr	r3, [sp, #8]
 801b0bc:	f8ad b024 	strh.w	fp, [sp, #36]	; 0x24
 801b0c0:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801b0c4:	6803      	ldr	r3, [r0, #0]
 801b0c6:	f8cd b000 	str.w	fp, [sp]
 801b0ca:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 801b0cc:	e899 0006 	ldmia.w	r9, {r1, r2}
 801b0d0:	4623      	mov	r3, r4
 801b0d2:	47a8      	blx	r5
 801b0d4:	4607      	mov	r7, r0
 801b0d6:	4638      	mov	r0, r7
 801b0d8:	b00f      	add	sp, #60	; 0x3c
 801b0da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b0de:	bf1f      	itttt	ne
 801b0e0:	f8ad 2022 	strhne.w	r2, [sp, #34]	; 0x22
 801b0e4:	f8bd 2026 	ldrhne.w	r2, [sp, #38]	; 0x26
 801b0e8:	189b      	addne	r3, r3, r2
 801b0ea:	f8ad 3026 	strhne.w	r3, [sp, #38]	; 0x26
 801b0ee:	e7ae      	b.n	801b04e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x19e>
 801b0f0:	6828      	ldr	r0, [r5, #0]
 801b0f2:	6803      	ldr	r3, [r0, #0]
 801b0f4:	6add      	ldr	r5, [r3, #44]	; 0x2c
 801b0f6:	9b02      	ldr	r3, [sp, #8]
 801b0f8:	4642      	mov	r2, r8
 801b0fa:	fb03 f30a 	mul.w	r3, r3, sl
 801b0fe:	4621      	mov	r1, r4
 801b100:	47a8      	blx	r5
 801b102:	e7e8      	b.n	801b0d6 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x226>
 801b104:	eb0c 0b4c 	add.w	fp, ip, ip, lsl #1
 801b108:	f04f 0900 	mov.w	r9, #0
 801b10c:	9b02      	ldr	r3, [sp, #8]
 801b10e:	454b      	cmp	r3, r9
 801b110:	dde1      	ble.n	801b0d6 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x226>
 801b112:	6828      	ldr	r0, [r5, #0]
 801b114:	6803      	ldr	r3, [r0, #0]
 801b116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b118:	4642      	mov	r2, r8
 801b11a:	461e      	mov	r6, r3
 801b11c:	4621      	mov	r1, r4
 801b11e:	465b      	mov	r3, fp
 801b120:	47b0      	blx	r6
 801b122:	9b03      	ldr	r3, [sp, #12]
 801b124:	44d0      	add	r8, sl
 801b126:	441c      	add	r4, r3
 801b128:	f109 0901 	add.w	r9, r9, #1
 801b12c:	e7ee      	b.n	801b10c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x25c>
 801b12e:	bf00      	nop
 801b130:	2000d1a4 	.word	0x2000d1a4
 801b134:	0802767e 	.word	0x0802767e
 801b138:	08027e5d 	.word	0x08027e5d
 801b13c:	0802764c 	.word	0x0802764c
 801b140:	08027732 	.word	0x08027732
 801b144:	08027787 	.word	0x08027787
 801b148:	2000d19e 	.word	0x2000d19e
 801b14c:	2000d1a0 	.word	0x2000d1a0
 801b150:	080277c5 	.word	0x080277c5

0801b154 <_ZN8touchgfx8LCD24bppC1Ev>:
 801b154:	4a0b      	ldr	r2, [pc, #44]	; (801b184 <_ZN8touchgfx8LCD24bppC1Ev+0x30>)
 801b156:	6002      	str	r2, [r0, #0]
 801b158:	2200      	movs	r2, #0
 801b15a:	e9c0 2202 	strd	r2, r2, [r0, #8]
 801b15e:	e9c0 2204 	strd	r2, r2, [r0, #16]
 801b162:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801b166:	e9c0 2208 	strd	r2, r2, [r0, #32]
 801b16a:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 801b16e:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 801b172:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 801b176:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 801b17a:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 801b17e:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 801b182:	4770      	bx	lr
 801b184:	08027aa8 	.word	0x08027aa8

0801b188 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 801b188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b18c:	b093      	sub	sp, #76	; 0x4c
 801b18e:	880c      	ldrh	r4, [r1, #0]
 801b190:	f89d 8070 	ldrb.w	r8, [sp, #112]	; 0x70
 801b194:	4605      	mov	r5, r0
 801b196:	460f      	mov	r7, r1
 801b198:	4691      	mov	r9, r2
 801b19a:	b12c      	cbz	r4, 801b1a8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x20>
 801b19c:	4b71      	ldr	r3, [pc, #452]	; (801b364 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 801b19e:	4a72      	ldr	r2, [pc, #456]	; (801b368 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e0>)
 801b1a0:	4872      	ldr	r0, [pc, #456]	; (801b36c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>)
 801b1a2:	2167      	movs	r1, #103	; 0x67
 801b1a4:	f007 fb24 	bl	80227f0 <__assert_func>
 801b1a8:	6810      	ldr	r0, [r2, #0]
 801b1aa:	6851      	ldr	r1, [r2, #4]
 801b1ac:	f8df a1c4 	ldr.w	sl, [pc, #452]	; 801b374 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ec>
 801b1b0:	ae0e      	add	r6, sp, #56	; 0x38
 801b1b2:	c603      	stmia	r6!, {r0, r1}
 801b1b4:	6818      	ldr	r0, [r3, #0]
 801b1b6:	6859      	ldr	r1, [r3, #4]
 801b1b8:	ae10      	add	r6, sp, #64	; 0x40
 801b1ba:	c603      	stmia	r6!, {r0, r1}
 801b1bc:	a80e      	add	r0, sp, #56	; 0x38
 801b1be:	f7fb fa99 	bl	80166f4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b1c2:	4649      	mov	r1, r9
 801b1c4:	a810      	add	r0, sp, #64	; 0x40
 801b1c6:	f7fb fa7d 	bl	80166c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801b1ca:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 801b1ce:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 801b1d2:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 801b1d6:	f8df 9198 	ldr.w	r9, [pc, #408]	; 801b370 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e8>
 801b1da:	f9bd 6044 	ldrsh.w	r6, [sp, #68]	; 0x44
 801b1de:	f8d9 0000 	ldr.w	r0, [r9]
 801b1e2:	fb11 2103 	smlabb	r1, r1, r3, r2
 801b1e6:	440d      	add	r5, r1
 801b1e8:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 801b1ec:	440a      	add	r2, r1
 801b1ee:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801b1f2:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801b1f6:	4413      	add	r3, r2
 801b1f8:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801b1fc:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
 801b200:	930b      	str	r3, [sp, #44]	; 0x2c
 801b202:	6803      	ldr	r3, [r0, #0]
 801b204:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b208:	4798      	blx	r3
 801b20a:	2801      	cmp	r0, #1
 801b20c:	d11e      	bne.n	801b24c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xc4>
 801b20e:	220b      	movs	r2, #11
 801b210:	9008      	str	r0, [sp, #32]
 801b212:	9207      	str	r2, [sp, #28]
 801b214:	f8ba 2000 	ldrh.w	r2, [sl]
 801b218:	f8cd 8010 	str.w	r8, [sp, #16]
 801b21c:	e9cd 0205 	strd	r0, r2, [sp, #20]
 801b220:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 801b224:	9203      	str	r2, [sp, #12]
 801b226:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 801b22a:	9202      	str	r2, [sp, #8]
 801b22c:	b2b6      	uxth	r6, r6
 801b22e:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801b232:	9200      	str	r2, [sp, #0]
 801b234:	9601      	str	r6, [sp, #4]
 801b236:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801b23a:	f8d9 0000 	ldr.w	r0, [r9]
 801b23e:	463a      	mov	r2, r7
 801b240:	4629      	mov	r1, r5
 801b242:	f7f8 fe7f 	bl	8013f44 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801b246:	b013      	add	sp, #76	; 0x4c
 801b248:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b24c:	f8d9 0000 	ldr.w	r0, [r9]
 801b250:	6803      	ldr	r3, [r0, #0]
 801b252:	6a1b      	ldr	r3, [r3, #32]
 801b254:	4798      	blx	r3
 801b256:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 801b25a:	f8ba 3000 	ldrh.w	r3, [sl]
 801b25e:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 801b262:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801b266:	fb01 2303 	mla	r3, r1, r3, r2
 801b26a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b26e:	ea26 79e6 	bic.w	r9, r6, r6, asr #31
 801b272:	4418      	add	r0, r3
 801b274:	eb09 0349 	add.w	r3, r9, r9, lsl #1
 801b278:	930c      	str	r3, [sp, #48]	; 0x30
 801b27a:	4621      	mov	r1, r4
 801b27c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b27e:	4299      	cmp	r1, r3
 801b280:	da6a      	bge.n	801b358 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1d0>
 801b282:	1cc2      	adds	r2, r0, #3
 801b284:	46aa      	mov	sl, r5
 801b286:	ebaa 0305 	sub.w	r3, sl, r5
 801b28a:	429e      	cmp	r6, r3
 801b28c:	dd55      	ble.n	801b33a <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b2>
 801b28e:	f81a 3b01 	ldrb.w	r3, [sl], #1
 801b292:	2404      	movs	r4, #4
 801b294:	fb14 4303 	smlabb	r3, r4, r3, r4
 801b298:	eb07 0e03 	add.w	lr, r7, r3
 801b29c:	f89e 4003 	ldrb.w	r4, [lr, #3]
 801b2a0:	b184      	cbz	r4, 801b2c4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13c>
 801b2a2:	2cff      	cmp	r4, #255	; 0xff
 801b2a4:	f817 b003 	ldrb.w	fp, [r7, r3]
 801b2a8:	d10e      	bne.n	801b2c8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x140>
 801b2aa:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801b2ae:	d10b      	bne.n	801b2c8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x140>
 801b2b0:	f802 bc03 	strb.w	fp, [r2, #-3]
 801b2b4:	f89e 3001 	ldrb.w	r3, [lr, #1]
 801b2b8:	f802 3c02 	strb.w	r3, [r2, #-2]
 801b2bc:	f89e 3002 	ldrb.w	r3, [lr, #2]
 801b2c0:	f802 3c01 	strb.w	r3, [r2, #-1]
 801b2c4:	3203      	adds	r2, #3
 801b2c6:	e7de      	b.n	801b286 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xfe>
 801b2c8:	fb08 f404 	mul.w	r4, r8, r4
 801b2cc:	1c63      	adds	r3, r4, #1
 801b2ce:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 801b2d2:	121b      	asrs	r3, r3, #8
 801b2d4:	b29c      	uxth	r4, r3
 801b2d6:	f812 cc03 	ldrb.w	ip, [r2, #-3]
 801b2da:	43db      	mvns	r3, r3
 801b2dc:	b2db      	uxtb	r3, r3
 801b2de:	fb1b fb04 	smulbb	fp, fp, r4
 801b2e2:	fb0c bc03 	mla	ip, ip, r3, fp
 801b2e6:	fa1f fc8c 	uxth.w	ip, ip
 801b2ea:	f10c 0b01 	add.w	fp, ip, #1
 801b2ee:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801b2f2:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801b2f6:	f802 cc03 	strb.w	ip, [r2, #-3]
 801b2fa:	f812 bc02 	ldrb.w	fp, [r2, #-2]
 801b2fe:	f89e c001 	ldrb.w	ip, [lr, #1]
 801b302:	fb1b fb03 	smulbb	fp, fp, r3
 801b306:	fb0c bc04 	mla	ip, ip, r4, fp
 801b30a:	fa1f fc8c 	uxth.w	ip, ip
 801b30e:	f10c 0b01 	add.w	fp, ip, #1
 801b312:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801b316:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801b31a:	f802 cc02 	strb.w	ip, [r2, #-2]
 801b31e:	f812 cc01 	ldrb.w	ip, [r2, #-1]
 801b322:	f89e e002 	ldrb.w	lr, [lr, #2]
 801b326:	fb1c f303 	smulbb	r3, ip, r3
 801b32a:	fb0e 3304 	mla	r3, lr, r4, r3
 801b32e:	b29b      	uxth	r3, r3
 801b330:	1c5c      	adds	r4, r3, #1
 801b332:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 801b336:	121b      	asrs	r3, r3, #8
 801b338:	e7c2      	b.n	801b2c0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x138>
 801b33a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b33c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801b33e:	881b      	ldrh	r3, [r3, #0]
 801b340:	1b9b      	subs	r3, r3, r6
 801b342:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b346:	4413      	add	r3, r2
 801b348:	4418      	add	r0, r3
 801b34a:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 801b34e:	1b9b      	subs	r3, r3, r6
 801b350:	444b      	add	r3, r9
 801b352:	441d      	add	r5, r3
 801b354:	3101      	adds	r1, #1
 801b356:	e791      	b.n	801b27c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf4>
 801b358:	4b05      	ldr	r3, [pc, #20]	; (801b370 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e8>)
 801b35a:	6818      	ldr	r0, [r3, #0]
 801b35c:	6803      	ldr	r3, [r0, #0]
 801b35e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b360:	4798      	blx	r3
 801b362:	e770      	b.n	801b246 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xbe>
 801b364:	080275b0 	.word	0x080275b0
 801b368:	08027c7f 	.word	0x08027c7f
 801b36c:	0802764c 	.word	0x0802764c
 801b370:	2000d1a4 	.word	0x2000d1a4
 801b374:	2000d19e 	.word	0x2000d19e

0801b378 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 801b378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b37c:	4614      	mov	r4, r2
 801b37e:	880a      	ldrh	r2, [r1, #0]
 801b380:	b091      	sub	sp, #68	; 0x44
 801b382:	2a01      	cmp	r2, #1
 801b384:	4680      	mov	r8, r0
 801b386:	460e      	mov	r6, r1
 801b388:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 801b38c:	d005      	beq.n	801b39a <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x22>
 801b38e:	4b6d      	ldr	r3, [pc, #436]	; (801b544 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1cc>)
 801b390:	4a6d      	ldr	r2, [pc, #436]	; (801b548 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d0>)
 801b392:	486e      	ldr	r0, [pc, #440]	; (801b54c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d4>)
 801b394:	21b5      	movs	r1, #181	; 0xb5
 801b396:	f007 fa2b 	bl	80227f0 <__assert_func>
 801b39a:	6820      	ldr	r0, [r4, #0]
 801b39c:	6861      	ldr	r1, [r4, #4]
 801b39e:	f8df 91b0 	ldr.w	r9, [pc, #432]	; 801b550 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d8>
 801b3a2:	ad0c      	add	r5, sp, #48	; 0x30
 801b3a4:	c503      	stmia	r5!, {r0, r1}
 801b3a6:	6818      	ldr	r0, [r3, #0]
 801b3a8:	6859      	ldr	r1, [r3, #4]
 801b3aa:	ad0e      	add	r5, sp, #56	; 0x38
 801b3ac:	c503      	stmia	r5!, {r0, r1}
 801b3ae:	a80c      	add	r0, sp, #48	; 0x30
 801b3b0:	f7fb f9a0 	bl	80166f4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b3b4:	4621      	mov	r1, r4
 801b3b6:	a80e      	add	r0, sp, #56	; 0x38
 801b3b8:	f7fb f984 	bl	80166c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801b3bc:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801b3c0:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801b3c4:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801b3c8:	f9bd 503c 	ldrsh.w	r5, [sp, #60]	; 0x3c
 801b3cc:	fb11 2103 	smlabb	r1, r1, r3, r2
 801b3d0:	eb08 0401 	add.w	r4, r8, r1
 801b3d4:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 801b3d8:	f8df 8178 	ldr.w	r8, [pc, #376]	; 801b554 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1dc>
 801b3dc:	440a      	add	r2, r1
 801b3de:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 801b3e2:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801b3e6:	f8d8 0000 	ldr.w	r0, [r8]
 801b3ea:	4413      	add	r3, r2
 801b3ec:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801b3f0:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 801b3f4:	930a      	str	r3, [sp, #40]	; 0x28
 801b3f6:	6803      	ldr	r3, [r0, #0]
 801b3f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b3fc:	4798      	blx	r3
 801b3fe:	2801      	cmp	r0, #1
 801b400:	d11e      	bne.n	801b440 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc8>
 801b402:	220b      	movs	r2, #11
 801b404:	9008      	str	r0, [sp, #32]
 801b406:	9207      	str	r2, [sp, #28]
 801b408:	f8b9 2000 	ldrh.w	r2, [r9]
 801b40c:	9206      	str	r2, [sp, #24]
 801b40e:	2200      	movs	r2, #0
 801b410:	e9cd 7204 	strd	r7, r2, [sp, #16]
 801b414:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801b418:	9203      	str	r2, [sp, #12]
 801b41a:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801b41e:	9202      	str	r2, [sp, #8]
 801b420:	b2ad      	uxth	r5, r5
 801b422:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801b426:	9200      	str	r2, [sp, #0]
 801b428:	9501      	str	r5, [sp, #4]
 801b42a:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801b42e:	f8d8 0000 	ldr.w	r0, [r8]
 801b432:	4632      	mov	r2, r6
 801b434:	4621      	mov	r1, r4
 801b436:	f7f8 fd85 	bl	8013f44 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801b43a:	b011      	add	sp, #68	; 0x44
 801b43c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b440:	f8d8 0000 	ldr.w	r0, [r8]
 801b444:	6803      	ldr	r3, [r0, #0]
 801b446:	6a1b      	ldr	r3, [r3, #32]
 801b448:	4798      	blx	r3
 801b44a:	f8b9 3000 	ldrh.w	r3, [r9]
 801b44e:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 801b452:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801b456:	fb01 2303 	mla	r3, r1, r3, r2
 801b45a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b45e:	ea25 78e5 	bic.w	r8, r5, r5, asr #31
 801b462:	4418      	add	r0, r3
 801b464:	f1c7 01ff 	rsb	r1, r7, #255	; 0xff
 801b468:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 801b46c:	930b      	str	r3, [sp, #44]	; 0x2c
 801b46e:	f04f 0e00 	mov.w	lr, #0
 801b472:	fa1f f987 	uxth.w	r9, r7
 801b476:	b289      	uxth	r1, r1
 801b478:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b47a:	459e      	cmp	lr, r3
 801b47c:	da5c      	bge.n	801b538 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c0>
 801b47e:	1cc3      	adds	r3, r0, #3
 801b480:	46a2      	mov	sl, r4
 801b482:	ebaa 0204 	sub.w	r2, sl, r4
 801b486:	4295      	cmp	r5, r2
 801b488:	dd46      	ble.n	801b518 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a0>
 801b48a:	f81a 2b01 	ldrb.w	r2, [sl], #1
 801b48e:	f04f 0c03 	mov.w	ip, #3
 801b492:	f04f 0b04 	mov.w	fp, #4
 801b496:	fb1c b202 	smlabb	r2, ip, r2, fp
 801b49a:	2fff      	cmp	r7, #255	; 0xff
 801b49c:	eb06 0c02 	add.w	ip, r6, r2
 801b4a0:	f816 b002 	ldrb.w	fp, [r6, r2]
 801b4a4:	d02f      	beq.n	801b506 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x18e>
 801b4a6:	f813 2c03 	ldrb.w	r2, [r3, #-3]
 801b4aa:	fb12 f201 	smulbb	r2, r2, r1
 801b4ae:	fb0b 2209 	mla	r2, fp, r9, r2
 801b4b2:	b292      	uxth	r2, r2
 801b4b4:	f102 0b01 	add.w	fp, r2, #1
 801b4b8:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 801b4bc:	1212      	asrs	r2, r2, #8
 801b4be:	f803 2c03 	strb.w	r2, [r3, #-3]
 801b4c2:	f813 bc02 	ldrb.w	fp, [r3, #-2]
 801b4c6:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801b4ca:	fb1b fb01 	smulbb	fp, fp, r1
 801b4ce:	fb02 b209 	mla	r2, r2, r9, fp
 801b4d2:	b292      	uxth	r2, r2
 801b4d4:	f102 0b01 	add.w	fp, r2, #1
 801b4d8:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 801b4dc:	1212      	asrs	r2, r2, #8
 801b4de:	f803 2c02 	strb.w	r2, [r3, #-2]
 801b4e2:	f89c 2002 	ldrb.w	r2, [ip, #2]
 801b4e6:	f813 cc01 	ldrb.w	ip, [r3, #-1]
 801b4ea:	fb1c fc01 	smulbb	ip, ip, r1
 801b4ee:	fb02 c209 	mla	r2, r2, r9, ip
 801b4f2:	b292      	uxth	r2, r2
 801b4f4:	f102 0c01 	add.w	ip, r2, #1
 801b4f8:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801b4fc:	1212      	asrs	r2, r2, #8
 801b4fe:	f803 2c01 	strb.w	r2, [r3, #-1]
 801b502:	3303      	adds	r3, #3
 801b504:	e7bd      	b.n	801b482 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x10a>
 801b506:	f803 bc03 	strb.w	fp, [r3, #-3]
 801b50a:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801b50e:	f803 2c02 	strb.w	r2, [r3, #-2]
 801b512:	f89c 2002 	ldrb.w	r2, [ip, #2]
 801b516:	e7f2      	b.n	801b4fe <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x186>
 801b518:	4b0d      	ldr	r3, [pc, #52]	; (801b550 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d8>)
 801b51a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801b51c:	881b      	ldrh	r3, [r3, #0]
 801b51e:	1b5b      	subs	r3, r3, r5
 801b520:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b524:	4413      	add	r3, r2
 801b526:	4418      	add	r0, r3
 801b528:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801b52c:	1b5b      	subs	r3, r3, r5
 801b52e:	4443      	add	r3, r8
 801b530:	441c      	add	r4, r3
 801b532:	f10e 0e01 	add.w	lr, lr, #1
 801b536:	e79f      	b.n	801b478 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x100>
 801b538:	4b06      	ldr	r3, [pc, #24]	; (801b554 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 801b53a:	6818      	ldr	r0, [r3, #0]
 801b53c:	6803      	ldr	r3, [r0, #0]
 801b53e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b540:	4798      	blx	r3
 801b542:	e77a      	b.n	801b43a <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc2>
 801b544:	080274bc 	.word	0x080274bc
 801b548:	08027b72 	.word	0x08027b72
 801b54c:	0802764c 	.word	0x0802764c
 801b550:	2000d19e 	.word	0x2000d19e
 801b554:	2000d1a4 	.word	0x2000d1a4

0801b558 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 801b558:	b570      	push	{r4, r5, r6, lr}
 801b55a:	780d      	ldrb	r5, [r1, #0]
 801b55c:	f89d 4010 	ldrb.w	r4, [sp, #16]
 801b560:	2d01      	cmp	r5, #1
 801b562:	d00d      	beq.n	801b580 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x28>
 801b564:	d307      	bcc.n	801b576 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1e>
 801b566:	2d02      	cmp	r5, #2
 801b568:	d10f      	bne.n	801b58a <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x32>
 801b56a:	4b08      	ldr	r3, [pc, #32]	; (801b58c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>)
 801b56c:	4a08      	ldr	r2, [pc, #32]	; (801b590 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x38>)
 801b56e:	4809      	ldr	r0, [pc, #36]	; (801b594 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x3c>)
 801b570:	215a      	movs	r1, #90	; 0x5a
 801b572:	f007 f93d 	bl	80227f0 <__assert_func>
 801b576:	9404      	str	r4, [sp, #16]
 801b578:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b57c:	f7ff be04 	b.w	801b188 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 801b580:	9404      	str	r4, [sp, #16]
 801b582:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b586:	f7ff bef7 	b.w	801b378 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 801b58a:	bd70      	pop	{r4, r5, r6, pc}
 801b58c:	08027471 	.word	0x08027471
 801b590:	08027af0 	.word	0x08027af0
 801b594:	0802764c 	.word	0x0802764c

0801b598 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 801b598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b59c:	460c      	mov	r4, r1
 801b59e:	b08b      	sub	sp, #44	; 0x2c
 801b5a0:	4680      	mov	r8, r0
 801b5a2:	6808      	ldr	r0, [r1, #0]
 801b5a4:	6849      	ldr	r1, [r1, #4]
 801b5a6:	469a      	mov	sl, r3
 801b5a8:	ab06      	add	r3, sp, #24
 801b5aa:	c303      	stmia	r3!, {r0, r1}
 801b5ac:	6810      	ldr	r0, [r2, #0]
 801b5ae:	6851      	ldr	r1, [r2, #4]
 801b5b0:	ab08      	add	r3, sp, #32
 801b5b2:	c303      	stmia	r3!, {r0, r1}
 801b5b4:	a806      	add	r0, sp, #24
 801b5b6:	f7fb f89d 	bl	80166f4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b5ba:	4621      	mov	r1, r4
 801b5bc:	a808      	add	r0, sp, #32
 801b5be:	f7fb f881 	bl	80166c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801b5c2:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801b5c6:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801b5ca:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801b5ce:	4c5d      	ldr	r4, [pc, #372]	; (801b744 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1ac>)
 801b5d0:	f9bd 7024 	ldrsh.w	r7, [sp, #36]	; 0x24
 801b5d4:	6820      	ldr	r0, [r4, #0]
 801b5d6:	f9bd 9026 	ldrsh.w	r9, [sp, #38]	; 0x26
 801b5da:	fb11 2103 	smlabb	r1, r1, r3, r2
 801b5de:	eb08 0881 	add.w	r8, r8, r1, lsl #2
 801b5e2:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801b5e6:	440a      	add	r2, r1
 801b5e8:	f8ad 2020 	strh.w	r2, [sp, #32]
 801b5ec:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801b5f0:	4413      	add	r3, r2
 801b5f2:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801b5f6:	6803      	ldr	r3, [r0, #0]
 801b5f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b5fa:	4798      	blx	r3
 801b5fc:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801b600:	d118      	bne.n	801b634 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 801b602:	f010 0f20 	tst.w	r0, #32
 801b606:	6820      	ldr	r0, [r4, #0]
 801b608:	d017      	beq.n	801b63a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 801b60a:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 801b60e:	6801      	ldr	r1, [r0, #0]
 801b610:	9402      	str	r4, [sp, #8]
 801b612:	b2bf      	uxth	r7, r7
 801b614:	fa1f f489 	uxth.w	r4, r9
 801b618:	f8cd a00c 	str.w	sl, [sp, #12]
 801b61c:	9401      	str	r4, [sp, #4]
 801b61e:	9700      	str	r7, [sp, #0]
 801b620:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 801b622:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801b626:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801b62a:	4641      	mov	r1, r8
 801b62c:	47a0      	blx	r4
 801b62e:	b00b      	add	sp, #44	; 0x2c
 801b630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b634:	f010 0f40 	tst.w	r0, #64	; 0x40
 801b638:	e7e5      	b.n	801b606 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 801b63a:	6803      	ldr	r3, [r0, #0]
 801b63c:	6a1b      	ldr	r3, [r3, #32]
 801b63e:	4798      	blx	r3
 801b640:	4b41      	ldr	r3, [pc, #260]	; (801b748 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b0>)
 801b642:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 801b646:	881a      	ldrh	r2, [r3, #0]
 801b648:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 801b64c:	fb04 1202 	mla	r2, r4, r2, r1
 801b650:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801b654:	4410      	add	r0, r2
 801b656:	ea27 72e7 	bic.w	r2, r7, r7, asr #31
 801b65a:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 801b65e:	0092      	lsls	r2, r2, #2
 801b660:	9105      	str	r1, [sp, #20]
 801b662:	9204      	str	r2, [sp, #16]
 801b664:	f04f 0c00 	mov.w	ip, #0
 801b668:	45cc      	cmp	ip, r9
 801b66a:	da65      	bge.n	801b738 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1a0>
 801b66c:	1cc4      	adds	r4, r0, #3
 801b66e:	f108 0504 	add.w	r5, r8, #4
 801b672:	f04f 0e00 	mov.w	lr, #0
 801b676:	45be      	cmp	lr, r7
 801b678:	da4d      	bge.n	801b716 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17e>
 801b67a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801b67e:	b181      	cbz	r1, 801b6a2 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 801b680:	29ff      	cmp	r1, #255	; 0xff
 801b682:	f815 bc04 	ldrb.w	fp, [r5, #-4]
 801b686:	d111      	bne.n	801b6ac <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x114>
 801b688:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801b68c:	d10e      	bne.n	801b6ac <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x114>
 801b68e:	f804 bc03 	strb.w	fp, [r4, #-3]
 801b692:	f815 2c03 	ldrb.w	r2, [r5, #-3]
 801b696:	f804 2c02 	strb.w	r2, [r4, #-2]
 801b69a:	f815 2c02 	ldrb.w	r2, [r5, #-2]
 801b69e:	f804 2c01 	strb.w	r2, [r4, #-1]
 801b6a2:	f10e 0e01 	add.w	lr, lr, #1
 801b6a6:	3403      	adds	r4, #3
 801b6a8:	3504      	adds	r5, #4
 801b6aa:	e7e4      	b.n	801b676 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xde>
 801b6ac:	fb0a f101 	mul.w	r1, sl, r1
 801b6b0:	1c4a      	adds	r2, r1, #1
 801b6b2:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 801b6b6:	1212      	asrs	r2, r2, #8
 801b6b8:	b296      	uxth	r6, r2
 801b6ba:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 801b6be:	43d2      	mvns	r2, r2
 801b6c0:	b2d2      	uxtb	r2, r2
 801b6c2:	fb1b fb06 	smulbb	fp, fp, r6
 801b6c6:	fb01 b102 	mla	r1, r1, r2, fp
 801b6ca:	b289      	uxth	r1, r1
 801b6cc:	f101 0b01 	add.w	fp, r1, #1
 801b6d0:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801b6d4:	1209      	asrs	r1, r1, #8
 801b6d6:	f804 1c03 	strb.w	r1, [r4, #-3]
 801b6da:	f814 bc02 	ldrb.w	fp, [r4, #-2]
 801b6de:	f815 1c03 	ldrb.w	r1, [r5, #-3]
 801b6e2:	fb1b fb02 	smulbb	fp, fp, r2
 801b6e6:	fb01 b106 	mla	r1, r1, r6, fp
 801b6ea:	b289      	uxth	r1, r1
 801b6ec:	f101 0b01 	add.w	fp, r1, #1
 801b6f0:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801b6f4:	1209      	asrs	r1, r1, #8
 801b6f6:	f804 1c02 	strb.w	r1, [r4, #-2]
 801b6fa:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 801b6fe:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 801b702:	fb11 f202 	smulbb	r2, r1, r2
 801b706:	fb0b 2206 	mla	r2, fp, r6, r2
 801b70a:	b292      	uxth	r2, r2
 801b70c:	1c56      	adds	r6, r2, #1
 801b70e:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 801b712:	1212      	asrs	r2, r2, #8
 801b714:	e7c3      	b.n	801b69e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x106>
 801b716:	881a      	ldrh	r2, [r3, #0]
 801b718:	9905      	ldr	r1, [sp, #20]
 801b71a:	1bd2      	subs	r2, r2, r7
 801b71c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801b720:	440a      	add	r2, r1
 801b722:	4410      	add	r0, r2
 801b724:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 801b728:	9904      	ldr	r1, [sp, #16]
 801b72a:	1bd2      	subs	r2, r2, r7
 801b72c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 801b730:	4490      	add	r8, r2
 801b732:	f10c 0c01 	add.w	ip, ip, #1
 801b736:	e797      	b.n	801b668 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xd0>
 801b738:	4b02      	ldr	r3, [pc, #8]	; (801b744 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1ac>)
 801b73a:	6818      	ldr	r0, [r3, #0]
 801b73c:	6803      	ldr	r3, [r0, #0]
 801b73e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b740:	4798      	blx	r3
 801b742:	e774      	b.n	801b62e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 801b744:	2000d1a4 	.word	0x2000d1a4
 801b748:	2000d19e 	.word	0x2000d19e

0801b74c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 801b74c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b750:	b085      	sub	sp, #20
 801b752:	4606      	mov	r6, r0
 801b754:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 801b758:	460c      	mov	r4, r1
 801b75a:	4691      	mov	r9, r2
 801b75c:	4698      	mov	r8, r3
 801b75e:	b385      	cbz	r5, 801b7c2 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x76>
 801b760:	4608      	mov	r0, r1
 801b762:	f7fd fae5 	bl	8018d30 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801b766:	4607      	mov	r7, r0
 801b768:	4620      	mov	r0, r4
 801b76a:	f7fd fb1b 	bl	8018da4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801b76e:	f8ad 000e 	strh.w	r0, [sp, #14]
 801b772:	4620      	mov	r0, r4
 801b774:	f8ad 9008 	strh.w	r9, [sp, #8]
 801b778:	f8ad 800a 	strh.w	r8, [sp, #10]
 801b77c:	f8ad 700c 	strh.w	r7, [sp, #12]
 801b780:	f7fd fc62 	bl	8019048 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801b784:	2801      	cmp	r0, #1
 801b786:	d00f      	beq.n	801b7a8 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801b788:	4620      	mov	r0, r4
 801b78a:	f7fd fc5d 	bl	8019048 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801b78e:	2802      	cmp	r0, #2
 801b790:	d00a      	beq.n	801b7a8 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801b792:	4620      	mov	r0, r4
 801b794:	f7fd fc58 	bl	8019048 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801b798:	280b      	cmp	r0, #11
 801b79a:	d005      	beq.n	801b7a8 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801b79c:	4b1b      	ldr	r3, [pc, #108]	; (801b80c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>)
 801b79e:	4a1c      	ldr	r2, [pc, #112]	; (801b810 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>)
 801b7a0:	481c      	ldr	r0, [pc, #112]	; (801b814 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc8>)
 801b7a2:	2142      	movs	r1, #66	; 0x42
 801b7a4:	f007 f824 	bl	80227f0 <__assert_func>
 801b7a8:	4620      	mov	r0, r4
 801b7aa:	f7fd fc4d 	bl	8019048 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801b7ae:	2802      	cmp	r0, #2
 801b7b0:	4620      	mov	r0, r4
 801b7b2:	d109      	bne.n	801b7c8 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x7c>
 801b7b4:	f7fd fbc4 	bl	8018f40 <_ZNK8touchgfx6Bitmap7getDataEv>
 801b7b8:	462b      	mov	r3, r5
 801b7ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801b7bc:	a902      	add	r1, sp, #8
 801b7be:	f7ff feeb 	bl	801b598 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801b7c2:	b005      	add	sp, #20
 801b7c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b7c8:	f7fd fc3e 	bl	8019048 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801b7cc:	280b      	cmp	r0, #11
 801b7ce:	d10e      	bne.n	801b7ee <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xa2>
 801b7d0:	4620      	mov	r0, r4
 801b7d2:	f7fd fbb5 	bl	8018f40 <_ZNK8touchgfx6Bitmap7getDataEv>
 801b7d6:	4606      	mov	r6, r0
 801b7d8:	4620      	mov	r0, r4
 801b7da:	f7fd fbe3 	bl	8018fa4 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801b7de:	9500      	str	r5, [sp, #0]
 801b7e0:	4601      	mov	r1, r0
 801b7e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b7e4:	aa02      	add	r2, sp, #8
 801b7e6:	4630      	mov	r0, r6
 801b7e8:	f7ff feb6 	bl	801b558 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 801b7ec:	e7e9      	b.n	801b7c2 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x76>
 801b7ee:	6833      	ldr	r3, [r6, #0]
 801b7f0:	4620      	mov	r0, r4
 801b7f2:	691f      	ldr	r7, [r3, #16]
 801b7f4:	f7fd fba4 	bl	8018f40 <_ZNK8touchgfx6Bitmap7getDataEv>
 801b7f8:	2300      	movs	r3, #0
 801b7fa:	e9cd 5300 	strd	r5, r3, [sp]
 801b7fe:	4601      	mov	r1, r0
 801b800:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b802:	aa02      	add	r2, sp, #8
 801b804:	4630      	mov	r0, r6
 801b806:	47b8      	blx	r7
 801b808:	e7db      	b.n	801b7c2 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x76>
 801b80a:	bf00      	nop
 801b80c:	0802750a 	.word	0x0802750a
 801b810:	08027bfb 	.word	0x08027bfb
 801b814:	0802764c 	.word	0x0802764c

0801b818 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801b818:	b570      	push	{r4, r5, r6, lr}
 801b81a:	9d04      	ldr	r5, [sp, #16]
 801b81c:	460c      	mov	r4, r1
 801b81e:	4619      	mov	r1, r3
 801b820:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801b824:	2a0c      	cmp	r2, #12
 801b826:	d826      	bhi.n	801b876 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x5e>
 801b828:	e8df f002 	tbb	[pc, r2]
 801b82c:	200e1407 	.word	0x200e1407
 801b830:	20202020 	.word	0x20202020
 801b834:	20202020 	.word	0x20202020
 801b838:	20          	.byte	0x20
 801b839:	00          	.byte	0x00
 801b83a:	4b0f      	ldr	r3, [pc, #60]	; (801b878 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x60>)
 801b83c:	4a0f      	ldr	r2, [pc, #60]	; (801b87c <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 801b83e:	f240 117f 	movw	r1, #383	; 0x17f
 801b842:	480f      	ldr	r0, [pc, #60]	; (801b880 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x68>)
 801b844:	f006 ffd4 	bl	80227f0 <__assert_func>
 801b848:	462a      	mov	r2, r5
 801b84a:	4620      	mov	r0, r4
 801b84c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b850:	f7ff bea2 	b.w	801b598 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801b854:	2600      	movs	r6, #0
 801b856:	6802      	ldr	r2, [r0, #0]
 801b858:	e9cd 3604 	strd	r3, r6, [sp, #16]
 801b85c:	6916      	ldr	r6, [r2, #16]
 801b85e:	462b      	mov	r3, r5
 801b860:	460a      	mov	r2, r1
 801b862:	46b4      	mov	ip, r6
 801b864:	4621      	mov	r1, r4
 801b866:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b86a:	4760      	bx	ip
 801b86c:	4b05      	ldr	r3, [pc, #20]	; (801b884 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x6c>)
 801b86e:	4a03      	ldr	r2, [pc, #12]	; (801b87c <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 801b870:	f240 1191 	movw	r1, #401	; 0x191
 801b874:	e7e5      	b.n	801b842 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x2a>
 801b876:	bd70      	pop	{r4, r5, r6, pc}
 801b878:	08027825 	.word	0x08027825
 801b87c:	08027ee3 	.word	0x08027ee3
 801b880:	0802764c 	.word	0x0802764c
 801b884:	08027866 	.word	0x08027866

0801b888 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 801b888:	b158      	cbz	r0, 801b8a2 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1a>
 801b88a:	2902      	cmp	r1, #2
 801b88c:	d00f      	beq.n	801b8ae <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x26>
 801b88e:	2903      	cmp	r1, #3
 801b890:	d010      	beq.n	801b8b4 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 801b892:	2901      	cmp	r1, #1
 801b894:	d101      	bne.n	801b89a <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 801b896:	2001      	movs	r0, #1
 801b898:	4770      	bx	lr
 801b89a:	4b08      	ldr	r3, [pc, #32]	; (801b8bc <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 801b89c:	8819      	ldrh	r1, [r3, #0]
 801b89e:	4248      	negs	r0, r1
 801b8a0:	4770      	bx	lr
 801b8a2:	2902      	cmp	r1, #2
 801b8a4:	d006      	beq.n	801b8b4 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 801b8a6:	2903      	cmp	r1, #3
 801b8a8:	d0f7      	beq.n	801b89a <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 801b8aa:	2901      	cmp	r1, #1
 801b8ac:	d1f3      	bne.n	801b896 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0xe>
 801b8ae:	4b03      	ldr	r3, [pc, #12]	; (801b8bc <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 801b8b0:	8818      	ldrh	r0, [r3, #0]
 801b8b2:	4770      	bx	lr
 801b8b4:	f04f 30ff 	mov.w	r0, #4294967295
 801b8b8:	4770      	bx	lr
 801b8ba:	bf00      	nop
 801b8bc:	2000d19e 	.word	0x2000d19e

0801b8c0 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 801b8c0:	b170      	cbz	r0, 801b8e0 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x20>
 801b8c2:	2902      	cmp	r1, #2
 801b8c4:	d012      	beq.n	801b8ec <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x2c>
 801b8c6:	2903      	cmp	r1, #3
 801b8c8:	d006      	beq.n	801b8d8 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 801b8ca:	2901      	cmp	r1, #1
 801b8cc:	d001      	beq.n	801b8d2 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 801b8ce:	2001      	movs	r0, #1
 801b8d0:	4770      	bx	lr
 801b8d2:	4b08      	ldr	r3, [pc, #32]	; (801b8f4 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 801b8d4:	8818      	ldrh	r0, [r3, #0]
 801b8d6:	4770      	bx	lr
 801b8d8:	4b06      	ldr	r3, [pc, #24]	; (801b8f4 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 801b8da:	8818      	ldrh	r0, [r3, #0]
 801b8dc:	4240      	negs	r0, r0
 801b8de:	4770      	bx	lr
 801b8e0:	2902      	cmp	r1, #2
 801b8e2:	d0f9      	beq.n	801b8d8 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 801b8e4:	2903      	cmp	r1, #3
 801b8e6:	d0f2      	beq.n	801b8ce <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0xe>
 801b8e8:	2901      	cmp	r1, #1
 801b8ea:	d1f2      	bne.n	801b8d2 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 801b8ec:	f04f 30ff 	mov.w	r0, #4294967295
 801b8f0:	4770      	bx	lr
 801b8f2:	bf00      	nop
 801b8f4:	2000d19e 	.word	0x2000d19e

0801b8f8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 801b8f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b8fc:	b095      	sub	sp, #84	; 0x54
 801b8fe:	9109      	str	r1, [sp, #36]	; 0x24
 801b900:	a910      	add	r1, sp, #64	; 0x40
 801b902:	e881 000c 	stmia.w	r1, {r2, r3}
 801b906:	f9bd 307c 	ldrsh.w	r3, [sp, #124]	; 0x7c
 801b90a:	9306      	str	r3, [sp, #24]
 801b90c:	e9dd 2122 	ldrd	r2, r1, [sp, #136]	; 0x88
 801b910:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 801b914:	930e      	str	r3, [sp, #56]	; 0x38
 801b916:	f89d 30a0 	ldrb.w	r3, [sp, #160]	; 0xa0
 801b91a:	930a      	str	r3, [sp, #40]	; 0x28
 801b91c:	7b4b      	ldrb	r3, [r1, #13]
 801b91e:	798f      	ldrb	r7, [r1, #6]
 801b920:	f9bd 5078 	ldrsh.w	r5, [sp, #120]	; 0x78
 801b924:	f8bd 6080 	ldrh.w	r6, [sp, #128]	; 0x80
 801b928:	f8bd 4084 	ldrh.w	r4, [sp, #132]	; 0x84
 801b92c:	f89d 809c 	ldrb.w	r8, [sp, #156]	; 0x9c
 801b930:	f89d 90a4 	ldrb.w	r9, [sp, #164]	; 0xa4
 801b934:	0158      	lsls	r0, r3, #5
 801b936:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801b93a:	4338      	orrs	r0, r7
 801b93c:	9008      	str	r0, [sp, #32]
 801b93e:	f000 8173 	beq.w	801bc28 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x330>
 801b942:	011b      	lsls	r3, r3, #4
 801b944:	79c8      	ldrb	r0, [r1, #7]
 801b946:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b94a:	4303      	orrs	r3, r0
 801b94c:	9307      	str	r3, [sp, #28]
 801b94e:	f000 816b 	beq.w	801bc28 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x330>
 801b952:	f991 3009 	ldrsb.w	r3, [r1, #9]
 801b956:	b29b      	uxth	r3, r3
 801b958:	2e00      	cmp	r6, #0
 801b95a:	f000 8111 	beq.w	801bb80 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x288>
 801b95e:	1af6      	subs	r6, r6, r3
 801b960:	b2b6      	uxth	r6, r6
 801b962:	0433      	lsls	r3, r6, #16
 801b964:	d502      	bpl.n	801b96c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801b966:	1bad      	subs	r5, r5, r6
 801b968:	b22d      	sxth	r5, r5
 801b96a:	2600      	movs	r6, #0
 801b96c:	f9b2 1000 	ldrsh.w	r1, [r2]
 801b970:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 801b974:	f8bd 7020 	ldrh.w	r7, [sp, #32]
 801b978:	428d      	cmp	r5, r1
 801b97a:	b28b      	uxth	r3, r1
 801b97c:	bfbf      	itttt	lt
 801b97e:	18f6      	addlt	r6, r6, r3
 801b980:	1b75      	sublt	r5, r6, r5
 801b982:	b2ae      	uxthlt	r6, r5
 801b984:	460d      	movlt	r5, r1
 801b986:	8891      	ldrh	r1, [r2, #4]
 801b988:	440b      	add	r3, r1
 801b98a:	b21b      	sxth	r3, r3
 801b98c:	930d      	str	r3, [sp, #52]	; 0x34
 801b98e:	88d3      	ldrh	r3, [r2, #6]
 801b990:	9a06      	ldr	r2, [sp, #24]
 801b992:	449a      	add	sl, r3
 801b994:	fa0f f38a 	sxth.w	r3, sl
 801b998:	930c      	str	r3, [sp, #48]	; 0x30
 801b99a:	4bb5      	ldr	r3, [pc, #724]	; (801bc70 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>)
 801b99c:	f8bd a01c 	ldrh.w	sl, [sp, #28]
 801b9a0:	f893 b000 	ldrb.w	fp, [r3]
 801b9a4:	f10b 3cff 	add.w	ip, fp, #4294967295
 801b9a8:	f1dc 0300 	rsbs	r3, ip, #0
 801b9ac:	eb43 030c 	adc.w	r3, r3, ip
 801b9b0:	930b      	str	r3, [sp, #44]	; 0x2c
 801b9b2:	4629      	mov	r1, r5
 801b9b4:	464b      	mov	r3, r9
 801b9b6:	a810      	add	r0, sp, #64	; 0x40
 801b9b8:	f7fa fd74 	bl	80164a4 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 801b9bc:	4629      	mov	r1, r5
 801b9be:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
 801b9c2:	464b      	mov	r3, r9
 801b9c4:	9a06      	ldr	r2, [sp, #24]
 801b9c6:	a810      	add	r0, sp, #64	; 0x40
 801b9c8:	f7fa fd84 	bl	80164d4 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 801b9cc:	a914      	add	r1, sp, #80	; 0x50
 801b9ce:	f821 0d02 	strh.w	r0, [r1, #-2]!
 801b9d2:	a813      	add	r0, sp, #76	; 0x4c
 801b9d4:	f7fa fe60 	bl	8016698 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 801b9d8:	f1b9 0f00 	cmp.w	r9, #0
 801b9dc:	f040 80d3 	bne.w	801bb86 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x28e>
 801b9e0:	f1bb 0f01 	cmp.w	fp, #1
 801b9e4:	f040 80d7 	bne.w	801bb96 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x29e>
 801b9e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b9ea:	2b00      	cmp	r3, #0
 801b9ec:	f040 8121 	bne.w	801bc32 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x33a>
 801b9f0:	4ba0      	ldr	r3, [pc, #640]	; (801bc74 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>)
 801b9f2:	6818      	ldr	r0, [r3, #0]
 801b9f4:	6803      	ldr	r3, [r0, #0]
 801b9f6:	6a1b      	ldr	r3, [r3, #32]
 801b9f8:	4798      	blx	r3
 801b9fa:	4a9f      	ldr	r2, [pc, #636]	; (801bc78 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>)
 801b9fc:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
 801ba00:	8811      	ldrh	r1, [r2, #0]
 801ba02:	f9bd 204c 	ldrsh.w	r2, [sp, #76]	; 0x4c
 801ba06:	fb01 2303 	mla	r3, r1, r3, r2
 801ba0a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ba0e:	18c3      	adds	r3, r0, r3
 801ba10:	2201      	movs	r2, #1
 801ba12:	9307      	str	r3, [sp, #28]
 801ba14:	fa02 f308 	lsl.w	r3, r2, r8
 801ba18:	3b01      	subs	r3, #1
 801ba1a:	b2db      	uxtb	r3, r3
 801ba1c:	4590      	cmp	r8, r2
 801ba1e:	930f      	str	r3, [sp, #60]	; 0x3c
 801ba20:	f000 8109 	beq.w	801bc36 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x33e>
 801ba24:	f1b8 0f02 	cmp.w	r8, #2
 801ba28:	f000 813e 	beq.w	801bca8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b0>
 801ba2c:	f1b8 0f04 	cmp.w	r8, #4
 801ba30:	f000 8132 	beq.w	801bc98 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>
 801ba34:	b906      	cbnz	r6, 801ba38 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x140>
 801ba36:	b174      	cbz	r4, 801ba56 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x15e>
 801ba38:	fb17 6304 	smlabb	r3, r7, r4, r6
 801ba3c:	9924      	ldr	r1, [sp, #144]	; 0x90
 801ba3e:	fb13 f308 	smulbb	r3, r3, r8
 801ba42:	b29b      	uxth	r3, r3
 801ba44:	ebaa 0a04 	sub.w	sl, sl, r4
 801ba48:	eb01 01d3 	add.w	r1, r1, r3, lsr #3
 801ba4c:	9124      	str	r1, [sp, #144]	; 0x90
 801ba4e:	fa1f fa8a 	uxth.w	sl, sl
 801ba52:	f003 0407 	and.w	r4, r3, #7
 801ba56:	4649      	mov	r1, r9
 801ba58:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801ba5a:	f7ff ff15 	bl	801b888 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 801ba5e:	4649      	mov	r1, r9
 801ba60:	4683      	mov	fp, r0
 801ba62:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801ba64:	f7ff ff2c 	bl	801b8c0 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 801ba68:	9906      	ldr	r1, [sp, #24]
 801ba6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ba6c:	1a5b      	subs	r3, r3, r1
 801ba6e:	459a      	cmp	sl, r3
 801ba70:	bfa8      	it	ge
 801ba72:	469a      	movge	sl, r3
 801ba74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ba76:	1bad      	subs	r5, r5, r6
 801ba78:	1b5d      	subs	r5, r3, r5
 801ba7a:	9b08      	ldr	r3, [sp, #32]
 801ba7c:	429d      	cmp	r5, r3
 801ba7e:	bfd4      	ite	le
 801ba80:	ebc6 0605 	rsble	r6, r6, r5
 801ba84:	ebc6 0603 	rsbgt	r6, r6, r3
 801ba88:	1bbf      	subs	r7, r7, r6
 801ba8a:	fb08 f307 	mul.w	r3, r8, r7
 801ba8e:	9308      	str	r3, [sp, #32]
 801ba90:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801ba92:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801ba96:	930b      	str	r3, [sp, #44]	; 0x2c
 801ba98:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801ba9a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801ba9e:	930c      	str	r3, [sp, #48]	; 0x30
 801baa0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801baa2:	b2db      	uxtb	r3, r3
 801baa4:	930d      	str	r3, [sp, #52]	; 0x34
 801baa6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801baa8:	7819      	ldrb	r1, [r3, #0]
 801baaa:	fb0b 0016 	mls	r0, fp, r6, r0
 801baae:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 801bab2:	4121      	asrs	r1, r4
 801bab4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801bab8:	ea26 7be6 	bic.w	fp, r6, r6, asr #31
 801babc:	b2c9      	uxtb	r1, r1
 801babe:	9306      	str	r3, [sp, #24]
 801bac0:	fb03 0b0b 	mla	fp, r3, fp, r0
 801bac4:	f1ba 0f00 	cmp.w	sl, #0
 801bac8:	f340 80d8 	ble.w	801bc7c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>
 801bacc:	9807      	ldr	r0, [sp, #28]
 801bace:	46b6      	mov	lr, r6
 801bad0:	f1be 0f00 	cmp.w	lr, #0
 801bad4:	f340 80b8 	ble.w	801bc48 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x350>
 801bad8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801bada:	400b      	ands	r3, r1
 801badc:	d03e      	beq.n	801bb5c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x264>
 801bade:	fb13 f302 	smulbb	r3, r3, r2
 801bae2:	2bfe      	cmp	r3, #254	; 0xfe
 801bae4:	dd03      	ble.n	801baee <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1f6>
 801bae6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801bae8:	2dff      	cmp	r5, #255	; 0xff
 801baea:	f000 80a6 	beq.w	801bc3a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801baee:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801baf0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801baf2:	fb15 f303 	smulbb	r3, r5, r3
 801baf6:	b29b      	uxth	r3, r3
 801baf8:	1c5d      	adds	r5, r3, #1
 801bafa:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 801bafe:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801bb02:	fa1f fc83 	uxth.w	ip, r3
 801bb06:	7805      	ldrb	r5, [r0, #0]
 801bb08:	43db      	mvns	r3, r3
 801bb0a:	b2db      	uxtb	r3, r3
 801bb0c:	fb17 f90c 	smulbb	r9, r7, ip
 801bb10:	fb05 9503 	mla	r5, r5, r3, r9
 801bb14:	b2ad      	uxth	r5, r5
 801bb16:	f105 0901 	add.w	r9, r5, #1
 801bb1a:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801bb1e:	122d      	asrs	r5, r5, #8
 801bb20:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801bb22:	7005      	strb	r5, [r0, #0]
 801bb24:	7845      	ldrb	r5, [r0, #1]
 801bb26:	fb17 f90c 	smulbb	r9, r7, ip
 801bb2a:	fb05 9503 	mla	r5, r5, r3, r9
 801bb2e:	b2ad      	uxth	r5, r5
 801bb30:	f105 0901 	add.w	r9, r5, #1
 801bb34:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801bb38:	122d      	asrs	r5, r5, #8
 801bb3a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801bb3c:	7045      	strb	r5, [r0, #1]
 801bb3e:	7885      	ldrb	r5, [r0, #2]
 801bb40:	fb17 fc0c 	smulbb	ip, r7, ip
 801bb44:	fb05 cc03 	mla	ip, r5, r3, ip
 801bb48:	fa1f fc8c 	uxth.w	ip, ip
 801bb4c:	f10c 0301 	add.w	r3, ip, #1
 801bb50:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801bb54:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801bb58:	f880 c002 	strb.w	ip, [r0, #2]
 801bb5c:	4444      	add	r4, r8
 801bb5e:	b2a4      	uxth	r4, r4
 801bb60:	2c07      	cmp	r4, #7
 801bb62:	bf81      	itttt	hi
 801bb64:	9b24      	ldrhi	r3, [sp, #144]	; 0x90
 801bb66:	7859      	ldrbhi	r1, [r3, #1]
 801bb68:	3301      	addhi	r3, #1
 801bb6a:	9324      	strhi	r3, [sp, #144]	; 0x90
 801bb6c:	9b06      	ldr	r3, [sp, #24]
 801bb6e:	bf9a      	itte	ls
 801bb70:	fa41 f108 	asrls.w	r1, r1, r8
 801bb74:	b2c9      	uxtbls	r1, r1
 801bb76:	2400      	movhi	r4, #0
 801bb78:	4418      	add	r0, r3
 801bb7a:	f10e 3eff 	add.w	lr, lr, #4294967295
 801bb7e:	e7a7      	b.n	801bad0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d8>
 801bb80:	441d      	add	r5, r3
 801bb82:	b22d      	sxth	r5, r5
 801bb84:	e6f2      	b.n	801b96c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801bb86:	f1b9 0f01 	cmp.w	r9, #1
 801bb8a:	f47f af2d 	bne.w	801b9e8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801bb8e:	f1bb 0f01 	cmp.w	fp, #1
 801bb92:	f47f af29 	bne.w	801b9e8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801bb96:	f8df b0dc 	ldr.w	fp, [pc, #220]	; 801bc74 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>
 801bb9a:	f8db 0000 	ldr.w	r0, [fp]
 801bb9e:	6803      	ldr	r3, [r0, #0]
 801bba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bba2:	4798      	blx	r3
 801bba4:	f010 0380 	ands.w	r3, r0, #128	; 0x80
 801bba8:	465a      	mov	r2, fp
 801bbaa:	d006      	beq.n	801bbba <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c2>
 801bbac:	f1b8 0f04 	cmp.w	r8, #4
 801bbb0:	d13d      	bne.n	801bc2e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x336>
 801bbb2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bbb4:	3300      	adds	r3, #0
 801bbb6:	bf18      	it	ne
 801bbb8:	2301      	movne	r3, #1
 801bbba:	05c0      	lsls	r0, r0, #23
 801bbbc:	d567      	bpl.n	801bc8e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x396>
 801bbbe:	f1b8 0f08 	cmp.w	r8, #8
 801bbc2:	d164      	bne.n	801bc8e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x396>
 801bbc4:	2b00      	cmp	r3, #0
 801bbc6:	bf0c      	ite	eq
 801bbc8:	f44f 7180 	moveq.w	r1, #256	; 0x100
 801bbcc:	2180      	movne	r1, #128	; 0x80
 801bbce:	2e00      	cmp	r6, #0
 801bbd0:	f47f af0a 	bne.w	801b9e8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801bbd4:	2c00      	cmp	r4, #0
 801bbd6:	f47f af07 	bne.w	801b9e8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801bbda:	9b08      	ldr	r3, [sp, #32]
 801bbdc:	980d      	ldr	r0, [sp, #52]	; 0x34
 801bbde:	442b      	add	r3, r5
 801bbe0:	4283      	cmp	r3, r0
 801bbe2:	f73f af01 	bgt.w	801b9e8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801bbe6:	e9dd 0306 	ldrd	r0, r3, [sp, #24]
 801bbea:	4403      	add	r3, r0
 801bbec:	980c      	ldr	r0, [sp, #48]	; 0x30
 801bbee:	4283      	cmp	r3, r0
 801bbf0:	f73f aefa 	bgt.w	801b9e8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801bbf4:	6810      	ldr	r0, [r2, #0]
 801bbf6:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 801bbfa:	6804      	ldr	r4, [r0, #0]
 801bbfc:	9105      	str	r1, [sp, #20]
 801bbfe:	f1b8 0f08 	cmp.w	r8, #8
 801bc02:	bf18      	it	ne
 801bc04:	3701      	addne	r7, #1
 801bc06:	990a      	ldr	r1, [sp, #40]	; 0x28
 801bc08:	9104      	str	r1, [sp, #16]
 801bc0a:	bf18      	it	ne
 801bc0c:	f027 0701 	bicne.w	r7, r7, #1
 801bc10:	9926      	ldr	r1, [sp, #152]	; 0x98
 801bc12:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
 801bc16:	bf18      	it	ne
 801bc18:	b2bf      	uxthne	r7, r7
 801bc1a:	e9cd 7102 	strd	r7, r1, [sp, #8]
 801bc1e:	e9cd 7a00 	strd	r7, sl, [sp]
 801bc22:	9924      	ldr	r1, [sp, #144]	; 0x90
 801bc24:	6c24      	ldr	r4, [r4, #64]	; 0x40
 801bc26:	47a0      	blx	r4
 801bc28:	b015      	add	sp, #84	; 0x54
 801bc2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bc2e:	2300      	movs	r3, #0
 801bc30:	e7c3      	b.n	801bbba <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c2>
 801bc32:	9809      	ldr	r0, [sp, #36]	; 0x24
 801bc34:	e6e1      	b.n	801b9fa <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x102>
 801bc36:	22ff      	movs	r2, #255	; 0xff
 801bc38:	e6fc      	b.n	801ba34 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13c>
 801bc3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bc3c:	7003      	strb	r3, [r0, #0]
 801bc3e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801bc40:	7043      	strb	r3, [r0, #1]
 801bc42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801bc44:	7083      	strb	r3, [r0, #2]
 801bc46:	e789      	b.n	801bb5c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x264>
 801bc48:	9b08      	ldr	r3, [sp, #32]
 801bc4a:	b153      	cbz	r3, 801bc62 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x36a>
 801bc4c:	441c      	add	r4, r3
 801bc4e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801bc50:	b2a4      	uxth	r4, r4
 801bc52:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 801bc56:	f004 0407 	and.w	r4, r4, #7
 801bc5a:	7819      	ldrb	r1, [r3, #0]
 801bc5c:	9324      	str	r3, [sp, #144]	; 0x90
 801bc5e:	4121      	asrs	r1, r4
 801bc60:	b2c9      	uxtb	r1, r1
 801bc62:	9b07      	ldr	r3, [sp, #28]
 801bc64:	445b      	add	r3, fp
 801bc66:	9307      	str	r3, [sp, #28]
 801bc68:	f10a 3aff 	add.w	sl, sl, #4294967295
 801bc6c:	e72a      	b.n	801bac4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1cc>
 801bc6e:	bf00      	nop
 801bc70:	2000d19c 	.word	0x2000d19c
 801bc74:	2000d1a4 	.word	0x2000d1a4
 801bc78:	2000d19e 	.word	0x2000d19e
 801bc7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bc7e:	2b00      	cmp	r3, #0
 801bc80:	d1d2      	bne.n	801bc28 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x330>
 801bc82:	4b0a      	ldr	r3, [pc, #40]	; (801bcac <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b4>)
 801bc84:	6818      	ldr	r0, [r3, #0]
 801bc86:	6803      	ldr	r3, [r0, #0]
 801bc88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bc8a:	4798      	blx	r3
 801bc8c:	e7cc      	b.n	801bc28 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x330>
 801bc8e:	2b00      	cmp	r3, #0
 801bc90:	f43f aeaa 	beq.w	801b9e8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801bc94:	2180      	movs	r1, #128	; 0x80
 801bc96:	e79a      	b.n	801bbce <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2d6>
 801bc98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bc9a:	b11b      	cbz	r3, 801bca4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>
 801bc9c:	07fb      	lsls	r3, r7, #31
 801bc9e:	d501      	bpl.n	801bca4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>
 801bca0:	3701      	adds	r7, #1
 801bca2:	b2bf      	uxth	r7, r7
 801bca4:	2211      	movs	r2, #17
 801bca6:	e6c5      	b.n	801ba34 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13c>
 801bca8:	2255      	movs	r2, #85	; 0x55
 801bcaa:	e6c3      	b.n	801ba34 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13c>
 801bcac:	2000d1a4 	.word	0x2000d1a4

0801bcb0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 801bcb0:	b538      	push	{r3, r4, r5, lr}
 801bcb2:	4c15      	ldr	r4, [pc, #84]	; (801bd08 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 801bcb4:	7823      	ldrb	r3, [r4, #0]
 801bcb6:	f3bf 8f5b 	dmb	ish
 801bcba:	07da      	lsls	r2, r3, #31
 801bcbc:	4605      	mov	r5, r0
 801bcbe:	d40b      	bmi.n	801bcd8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801bcc0:	4620      	mov	r0, r4
 801bcc2:	f006 fd6c 	bl	802279e <__cxa_guard_acquire>
 801bcc6:	b138      	cbz	r0, 801bcd8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801bcc8:	4620      	mov	r0, r4
 801bcca:	f006 fd74 	bl	80227b6 <__cxa_guard_release>
 801bcce:	4a0f      	ldr	r2, [pc, #60]	; (801bd0c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801bcd0:	490f      	ldr	r1, [pc, #60]	; (801bd10 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 801bcd2:	4810      	ldr	r0, [pc, #64]	; (801bd14 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801bcd4:	f006 fd59 	bl	802278a <__aeabi_atexit>
 801bcd8:	4c0f      	ldr	r4, [pc, #60]	; (801bd18 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 801bcda:	7823      	ldrb	r3, [r4, #0]
 801bcdc:	f3bf 8f5b 	dmb	ish
 801bce0:	07db      	lsls	r3, r3, #31
 801bce2:	d40b      	bmi.n	801bcfc <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801bce4:	4620      	mov	r0, r4
 801bce6:	f006 fd5a 	bl	802279e <__cxa_guard_acquire>
 801bcea:	b138      	cbz	r0, 801bcfc <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801bcec:	4620      	mov	r0, r4
 801bcee:	f006 fd62 	bl	80227b6 <__cxa_guard_release>
 801bcf2:	4a06      	ldr	r2, [pc, #24]	; (801bd0c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801bcf4:	4909      	ldr	r1, [pc, #36]	; (801bd1c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 801bcf6:	480a      	ldr	r0, [pc, #40]	; (801bd20 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801bcf8:	f006 fd47 	bl	802278a <__aeabi_atexit>
 801bcfc:	4b05      	ldr	r3, [pc, #20]	; (801bd14 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801bcfe:	612b      	str	r3, [r5, #16]
 801bd00:	4b07      	ldr	r3, [pc, #28]	; (801bd20 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801bd02:	616b      	str	r3, [r5, #20]
 801bd04:	bd38      	pop	{r3, r4, r5, pc}
 801bd06:	bf00      	nop
 801bd08:	2000d2b0 	.word	0x2000d2b0
 801bd0c:	20000000 	.word	0x20000000
 801bd10:	0801a8e7 	.word	0x0801a8e7
 801bd14:	20000070 	.word	0x20000070
 801bd18:	2000d2b4 	.word	0x2000d2b4
 801bd1c:	0801a8e5 	.word	0x0801a8e5
 801bd20:	20000074 	.word	0x20000074

0801bd24 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 801bd24:	b538      	push	{r3, r4, r5, lr}
 801bd26:	4c15      	ldr	r4, [pc, #84]	; (801bd7c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 801bd28:	7823      	ldrb	r3, [r4, #0]
 801bd2a:	f3bf 8f5b 	dmb	ish
 801bd2e:	07da      	lsls	r2, r3, #31
 801bd30:	4605      	mov	r5, r0
 801bd32:	d40b      	bmi.n	801bd4c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801bd34:	4620      	mov	r0, r4
 801bd36:	f006 fd32 	bl	802279e <__cxa_guard_acquire>
 801bd3a:	b138      	cbz	r0, 801bd4c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801bd3c:	4620      	mov	r0, r4
 801bd3e:	f006 fd3a 	bl	80227b6 <__cxa_guard_release>
 801bd42:	4a0f      	ldr	r2, [pc, #60]	; (801bd80 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801bd44:	490f      	ldr	r1, [pc, #60]	; (801bd84 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 801bd46:	4810      	ldr	r0, [pc, #64]	; (801bd88 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801bd48:	f006 fd1f 	bl	802278a <__aeabi_atexit>
 801bd4c:	4c0f      	ldr	r4, [pc, #60]	; (801bd8c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 801bd4e:	7823      	ldrb	r3, [r4, #0]
 801bd50:	f3bf 8f5b 	dmb	ish
 801bd54:	07db      	lsls	r3, r3, #31
 801bd56:	d40b      	bmi.n	801bd70 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801bd58:	4620      	mov	r0, r4
 801bd5a:	f006 fd20 	bl	802279e <__cxa_guard_acquire>
 801bd5e:	b138      	cbz	r0, 801bd70 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801bd60:	4620      	mov	r0, r4
 801bd62:	f006 fd28 	bl	80227b6 <__cxa_guard_release>
 801bd66:	4a06      	ldr	r2, [pc, #24]	; (801bd80 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801bd68:	4909      	ldr	r1, [pc, #36]	; (801bd90 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 801bd6a:	480a      	ldr	r0, [pc, #40]	; (801bd94 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801bd6c:	f006 fd0d 	bl	802278a <__aeabi_atexit>
 801bd70:	4b05      	ldr	r3, [pc, #20]	; (801bd88 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801bd72:	60ab      	str	r3, [r5, #8]
 801bd74:	4b07      	ldr	r3, [pc, #28]	; (801bd94 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801bd76:	60eb      	str	r3, [r5, #12]
 801bd78:	bd38      	pop	{r3, r4, r5, pc}
 801bd7a:	bf00      	nop
 801bd7c:	2000d290 	.word	0x2000d290
 801bd80:	20000000 	.word	0x20000000
 801bd84:	0801a8eb 	.word	0x0801a8eb
 801bd88:	20000050 	.word	0x20000050
 801bd8c:	2000d294 	.word	0x2000d294
 801bd90:	0801a8e9 	.word	0x0801a8e9
 801bd94:	20000054 	.word	0x20000054

0801bd98 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 801bd98:	b510      	push	{r4, lr}
 801bd9a:	4604      	mov	r4, r0
 801bd9c:	f7ff ff88 	bl	801bcb0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 801bda0:	4620      	mov	r0, r4
 801bda2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bda6:	f7ff bfbd 	b.w	801bd24 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

0801bdac <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 801bdac:	b538      	push	{r3, r4, r5, lr}
 801bdae:	4c15      	ldr	r4, [pc, #84]	; (801be04 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 801bdb0:	7823      	ldrb	r3, [r4, #0]
 801bdb2:	f3bf 8f5b 	dmb	ish
 801bdb6:	07da      	lsls	r2, r3, #31
 801bdb8:	4605      	mov	r5, r0
 801bdba:	d40b      	bmi.n	801bdd4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801bdbc:	4620      	mov	r0, r4
 801bdbe:	f006 fcee 	bl	802279e <__cxa_guard_acquire>
 801bdc2:	b138      	cbz	r0, 801bdd4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801bdc4:	4620      	mov	r0, r4
 801bdc6:	f006 fcf6 	bl	80227b6 <__cxa_guard_release>
 801bdca:	4a0f      	ldr	r2, [pc, #60]	; (801be08 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801bdcc:	490f      	ldr	r1, [pc, #60]	; (801be0c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 801bdce:	4810      	ldr	r0, [pc, #64]	; (801be10 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801bdd0:	f006 fcdb 	bl	802278a <__aeabi_atexit>
 801bdd4:	4c0f      	ldr	r4, [pc, #60]	; (801be14 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 801bdd6:	7823      	ldrb	r3, [r4, #0]
 801bdd8:	f3bf 8f5b 	dmb	ish
 801bddc:	07db      	lsls	r3, r3, #31
 801bdde:	d40b      	bmi.n	801bdf8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801bde0:	4620      	mov	r0, r4
 801bde2:	f006 fcdc 	bl	802279e <__cxa_guard_acquire>
 801bde6:	b138      	cbz	r0, 801bdf8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801bde8:	4620      	mov	r0, r4
 801bdea:	f006 fce4 	bl	80227b6 <__cxa_guard_release>
 801bdee:	4a06      	ldr	r2, [pc, #24]	; (801be08 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801bdf0:	4909      	ldr	r1, [pc, #36]	; (801be18 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 801bdf2:	480a      	ldr	r0, [pc, #40]	; (801be1c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801bdf4:	f006 fcc9 	bl	802278a <__aeabi_atexit>
 801bdf8:	4b05      	ldr	r3, [pc, #20]	; (801be10 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801bdfa:	622b      	str	r3, [r5, #32]
 801bdfc:	4b07      	ldr	r3, [pc, #28]	; (801be1c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801bdfe:	626b      	str	r3, [r5, #36]	; 0x24
 801be00:	bd38      	pop	{r3, r4, r5, pc}
 801be02:	bf00      	nop
 801be04:	2000d2b8 	.word	0x2000d2b8
 801be08:	20000000 	.word	0x20000000
 801be0c:	0801a8df 	.word	0x0801a8df
 801be10:	20000078 	.word	0x20000078
 801be14:	2000d2bc 	.word	0x2000d2bc
 801be18:	0801a8dd 	.word	0x0801a8dd
 801be1c:	2000007c 	.word	0x2000007c

0801be20 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 801be20:	b538      	push	{r3, r4, r5, lr}
 801be22:	4c15      	ldr	r4, [pc, #84]	; (801be78 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 801be24:	7823      	ldrb	r3, [r4, #0]
 801be26:	f3bf 8f5b 	dmb	ish
 801be2a:	07da      	lsls	r2, r3, #31
 801be2c:	4605      	mov	r5, r0
 801be2e:	d40b      	bmi.n	801be48 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801be30:	4620      	mov	r0, r4
 801be32:	f006 fcb4 	bl	802279e <__cxa_guard_acquire>
 801be36:	b138      	cbz	r0, 801be48 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801be38:	4620      	mov	r0, r4
 801be3a:	f006 fcbc 	bl	80227b6 <__cxa_guard_release>
 801be3e:	4a0f      	ldr	r2, [pc, #60]	; (801be7c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801be40:	490f      	ldr	r1, [pc, #60]	; (801be80 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 801be42:	4810      	ldr	r0, [pc, #64]	; (801be84 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801be44:	f006 fca1 	bl	802278a <__aeabi_atexit>
 801be48:	4c0f      	ldr	r4, [pc, #60]	; (801be88 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 801be4a:	7823      	ldrb	r3, [r4, #0]
 801be4c:	f3bf 8f5b 	dmb	ish
 801be50:	07db      	lsls	r3, r3, #31
 801be52:	d40b      	bmi.n	801be6c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801be54:	4620      	mov	r0, r4
 801be56:	f006 fca2 	bl	802279e <__cxa_guard_acquire>
 801be5a:	b138      	cbz	r0, 801be6c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801be5c:	4620      	mov	r0, r4
 801be5e:	f006 fcaa 	bl	80227b6 <__cxa_guard_release>
 801be62:	4a06      	ldr	r2, [pc, #24]	; (801be7c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801be64:	4909      	ldr	r1, [pc, #36]	; (801be8c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 801be66:	480a      	ldr	r0, [pc, #40]	; (801be90 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801be68:	f006 fc8f 	bl	802278a <__aeabi_atexit>
 801be6c:	4b05      	ldr	r3, [pc, #20]	; (801be84 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801be6e:	61ab      	str	r3, [r5, #24]
 801be70:	4b07      	ldr	r3, [pc, #28]	; (801be90 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801be72:	61eb      	str	r3, [r5, #28]
 801be74:	bd38      	pop	{r3, r4, r5, pc}
 801be76:	bf00      	nop
 801be78:	2000d298 	.word	0x2000d298
 801be7c:	20000000 	.word	0x20000000
 801be80:	0801a8e3 	.word	0x0801a8e3
 801be84:	20000058 	.word	0x20000058
 801be88:	2000d29c 	.word	0x2000d29c
 801be8c:	0801a8e1 	.word	0x0801a8e1
 801be90:	2000005c 	.word	0x2000005c

0801be94 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 801be94:	b510      	push	{r4, lr}
 801be96:	4604      	mov	r4, r0
 801be98:	f7ff ff88 	bl	801bdac <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 801be9c:	4620      	mov	r0, r4
 801be9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bea2:	f7ff bfbd 	b.w	801be20 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

0801bea8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 801bea8:	b538      	push	{r3, r4, r5, lr}
 801beaa:	4c15      	ldr	r4, [pc, #84]	; (801bf00 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 801beac:	7823      	ldrb	r3, [r4, #0]
 801beae:	f3bf 8f5b 	dmb	ish
 801beb2:	07da      	lsls	r2, r3, #31
 801beb4:	4605      	mov	r5, r0
 801beb6:	d40b      	bmi.n	801bed0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801beb8:	4620      	mov	r0, r4
 801beba:	f006 fc70 	bl	802279e <__cxa_guard_acquire>
 801bebe:	b138      	cbz	r0, 801bed0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801bec0:	4620      	mov	r0, r4
 801bec2:	f006 fc78 	bl	80227b6 <__cxa_guard_release>
 801bec6:	4a0f      	ldr	r2, [pc, #60]	; (801bf04 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801bec8:	490f      	ldr	r1, [pc, #60]	; (801bf08 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 801beca:	4810      	ldr	r0, [pc, #64]	; (801bf0c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801becc:	f006 fc5d 	bl	802278a <__aeabi_atexit>
 801bed0:	4c0f      	ldr	r4, [pc, #60]	; (801bf10 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 801bed2:	7823      	ldrb	r3, [r4, #0]
 801bed4:	f3bf 8f5b 	dmb	ish
 801bed8:	07db      	lsls	r3, r3, #31
 801beda:	d40b      	bmi.n	801bef4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801bedc:	4620      	mov	r0, r4
 801bede:	f006 fc5e 	bl	802279e <__cxa_guard_acquire>
 801bee2:	b138      	cbz	r0, 801bef4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801bee4:	4620      	mov	r0, r4
 801bee6:	f006 fc66 	bl	80227b6 <__cxa_guard_release>
 801beea:	4a06      	ldr	r2, [pc, #24]	; (801bf04 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801beec:	4909      	ldr	r1, [pc, #36]	; (801bf14 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 801beee:	480a      	ldr	r0, [pc, #40]	; (801bf18 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801bef0:	f006 fc4b 	bl	802278a <__aeabi_atexit>
 801bef4:	4b05      	ldr	r3, [pc, #20]	; (801bf0c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801bef6:	632b      	str	r3, [r5, #48]	; 0x30
 801bef8:	4b07      	ldr	r3, [pc, #28]	; (801bf18 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801befa:	636b      	str	r3, [r5, #52]	; 0x34
 801befc:	bd38      	pop	{r3, r4, r5, pc}
 801befe:	bf00      	nop
 801bf00:	2000d2a0 	.word	0x2000d2a0
 801bf04:	20000000 	.word	0x20000000
 801bf08:	0801a8d7 	.word	0x0801a8d7
 801bf0c:	20000060 	.word	0x20000060
 801bf10:	2000d2a4 	.word	0x2000d2a4
 801bf14:	0801a8d5 	.word	0x0801a8d5
 801bf18:	20000064 	.word	0x20000064

0801bf1c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 801bf1c:	b538      	push	{r3, r4, r5, lr}
 801bf1e:	4c15      	ldr	r4, [pc, #84]	; (801bf74 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 801bf20:	7823      	ldrb	r3, [r4, #0]
 801bf22:	f3bf 8f5b 	dmb	ish
 801bf26:	07da      	lsls	r2, r3, #31
 801bf28:	4605      	mov	r5, r0
 801bf2a:	d40b      	bmi.n	801bf44 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801bf2c:	4620      	mov	r0, r4
 801bf2e:	f006 fc36 	bl	802279e <__cxa_guard_acquire>
 801bf32:	b138      	cbz	r0, 801bf44 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801bf34:	4620      	mov	r0, r4
 801bf36:	f006 fc3e 	bl	80227b6 <__cxa_guard_release>
 801bf3a:	4a0f      	ldr	r2, [pc, #60]	; (801bf78 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801bf3c:	490f      	ldr	r1, [pc, #60]	; (801bf7c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 801bf3e:	4810      	ldr	r0, [pc, #64]	; (801bf80 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801bf40:	f006 fc23 	bl	802278a <__aeabi_atexit>
 801bf44:	4c0f      	ldr	r4, [pc, #60]	; (801bf84 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 801bf46:	7823      	ldrb	r3, [r4, #0]
 801bf48:	f3bf 8f5b 	dmb	ish
 801bf4c:	07db      	lsls	r3, r3, #31
 801bf4e:	d40b      	bmi.n	801bf68 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801bf50:	4620      	mov	r0, r4
 801bf52:	f006 fc24 	bl	802279e <__cxa_guard_acquire>
 801bf56:	b138      	cbz	r0, 801bf68 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801bf58:	4620      	mov	r0, r4
 801bf5a:	f006 fc2c 	bl	80227b6 <__cxa_guard_release>
 801bf5e:	4a06      	ldr	r2, [pc, #24]	; (801bf78 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801bf60:	4909      	ldr	r1, [pc, #36]	; (801bf88 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 801bf62:	480a      	ldr	r0, [pc, #40]	; (801bf8c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801bf64:	f006 fc11 	bl	802278a <__aeabi_atexit>
 801bf68:	4b05      	ldr	r3, [pc, #20]	; (801bf80 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801bf6a:	62ab      	str	r3, [r5, #40]	; 0x28
 801bf6c:	4b07      	ldr	r3, [pc, #28]	; (801bf8c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801bf6e:	62eb      	str	r3, [r5, #44]	; 0x2c
 801bf70:	bd38      	pop	{r3, r4, r5, pc}
 801bf72:	bf00      	nop
 801bf74:	2000d278 	.word	0x2000d278
 801bf78:	20000000 	.word	0x20000000
 801bf7c:	0801a8db 	.word	0x0801a8db
 801bf80:	20000038 	.word	0x20000038
 801bf84:	2000d27c 	.word	0x2000d27c
 801bf88:	0801a8d9 	.word	0x0801a8d9
 801bf8c:	2000003c 	.word	0x2000003c

0801bf90 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 801bf90:	b510      	push	{r4, lr}
 801bf92:	4604      	mov	r4, r0
 801bf94:	f7ff ff88 	bl	801bea8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 801bf98:	4620      	mov	r0, r4
 801bf9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bf9e:	f7ff bfbd 	b.w	801bf1c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

0801bfa4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 801bfa4:	b538      	push	{r3, r4, r5, lr}
 801bfa6:	4c15      	ldr	r4, [pc, #84]	; (801bffc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 801bfa8:	7823      	ldrb	r3, [r4, #0]
 801bfaa:	f3bf 8f5b 	dmb	ish
 801bfae:	07da      	lsls	r2, r3, #31
 801bfb0:	4605      	mov	r5, r0
 801bfb2:	d40b      	bmi.n	801bfcc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801bfb4:	4620      	mov	r0, r4
 801bfb6:	f006 fbf2 	bl	802279e <__cxa_guard_acquire>
 801bfba:	b138      	cbz	r0, 801bfcc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801bfbc:	4620      	mov	r0, r4
 801bfbe:	f006 fbfa 	bl	80227b6 <__cxa_guard_release>
 801bfc2:	4a0f      	ldr	r2, [pc, #60]	; (801c000 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801bfc4:	490f      	ldr	r1, [pc, #60]	; (801c004 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 801bfc6:	4810      	ldr	r0, [pc, #64]	; (801c008 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801bfc8:	f006 fbdf 	bl	802278a <__aeabi_atexit>
 801bfcc:	4c0f      	ldr	r4, [pc, #60]	; (801c00c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 801bfce:	7823      	ldrb	r3, [r4, #0]
 801bfd0:	f3bf 8f5b 	dmb	ish
 801bfd4:	07db      	lsls	r3, r3, #31
 801bfd6:	d40b      	bmi.n	801bff0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801bfd8:	4620      	mov	r0, r4
 801bfda:	f006 fbe0 	bl	802279e <__cxa_guard_acquire>
 801bfde:	b138      	cbz	r0, 801bff0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801bfe0:	4620      	mov	r0, r4
 801bfe2:	f006 fbe8 	bl	80227b6 <__cxa_guard_release>
 801bfe6:	4a06      	ldr	r2, [pc, #24]	; (801c000 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801bfe8:	4909      	ldr	r1, [pc, #36]	; (801c010 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 801bfea:	480a      	ldr	r0, [pc, #40]	; (801c014 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801bfec:	f006 fbcd 	bl	802278a <__aeabi_atexit>
 801bff0:	4b05      	ldr	r3, [pc, #20]	; (801c008 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801bff2:	642b      	str	r3, [r5, #64]	; 0x40
 801bff4:	4b07      	ldr	r3, [pc, #28]	; (801c014 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801bff6:	646b      	str	r3, [r5, #68]	; 0x44
 801bff8:	bd38      	pop	{r3, r4, r5, pc}
 801bffa:	bf00      	nop
 801bffc:	2000d2a8 	.word	0x2000d2a8
 801c000:	20000000 	.word	0x20000000
 801c004:	0801a8cf 	.word	0x0801a8cf
 801c008:	20000068 	.word	0x20000068
 801c00c:	2000d2ac 	.word	0x2000d2ac
 801c010:	0801a8cd 	.word	0x0801a8cd
 801c014:	2000006c 	.word	0x2000006c

0801c018 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 801c018:	b538      	push	{r3, r4, r5, lr}
 801c01a:	4c15      	ldr	r4, [pc, #84]	; (801c070 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 801c01c:	7823      	ldrb	r3, [r4, #0]
 801c01e:	f3bf 8f5b 	dmb	ish
 801c022:	07da      	lsls	r2, r3, #31
 801c024:	4605      	mov	r5, r0
 801c026:	d40b      	bmi.n	801c040 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801c028:	4620      	mov	r0, r4
 801c02a:	f006 fbb8 	bl	802279e <__cxa_guard_acquire>
 801c02e:	b138      	cbz	r0, 801c040 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801c030:	4620      	mov	r0, r4
 801c032:	f006 fbc0 	bl	80227b6 <__cxa_guard_release>
 801c036:	4a0f      	ldr	r2, [pc, #60]	; (801c074 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801c038:	490f      	ldr	r1, [pc, #60]	; (801c078 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 801c03a:	4810      	ldr	r0, [pc, #64]	; (801c07c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801c03c:	f006 fba5 	bl	802278a <__aeabi_atexit>
 801c040:	4c0f      	ldr	r4, [pc, #60]	; (801c080 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 801c042:	7823      	ldrb	r3, [r4, #0]
 801c044:	f3bf 8f5b 	dmb	ish
 801c048:	07db      	lsls	r3, r3, #31
 801c04a:	d40b      	bmi.n	801c064 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801c04c:	4620      	mov	r0, r4
 801c04e:	f006 fba6 	bl	802279e <__cxa_guard_acquire>
 801c052:	b138      	cbz	r0, 801c064 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801c054:	4620      	mov	r0, r4
 801c056:	f006 fbae 	bl	80227b6 <__cxa_guard_release>
 801c05a:	4a06      	ldr	r2, [pc, #24]	; (801c074 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801c05c:	4909      	ldr	r1, [pc, #36]	; (801c084 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 801c05e:	480a      	ldr	r0, [pc, #40]	; (801c088 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801c060:	f006 fb93 	bl	802278a <__aeabi_atexit>
 801c064:	4b05      	ldr	r3, [pc, #20]	; (801c07c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801c066:	63ab      	str	r3, [r5, #56]	; 0x38
 801c068:	4b07      	ldr	r3, [pc, #28]	; (801c088 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801c06a:	63eb      	str	r3, [r5, #60]	; 0x3c
 801c06c:	bd38      	pop	{r3, r4, r5, pc}
 801c06e:	bf00      	nop
 801c070:	2000d288 	.word	0x2000d288
 801c074:	20000000 	.word	0x20000000
 801c078:	0801a8d3 	.word	0x0801a8d3
 801c07c:	20000048 	.word	0x20000048
 801c080:	2000d28c 	.word	0x2000d28c
 801c084:	0801a8d1 	.word	0x0801a8d1
 801c088:	2000004c 	.word	0x2000004c

0801c08c <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 801c08c:	b510      	push	{r4, lr}
 801c08e:	4604      	mov	r4, r0
 801c090:	f7ff ff88 	bl	801bfa4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 801c094:	4620      	mov	r0, r4
 801c096:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c09a:	f7ff bfbd 	b.w	801c018 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

0801c0a0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 801c0a0:	b538      	push	{r3, r4, r5, lr}
 801c0a2:	4c15      	ldr	r4, [pc, #84]	; (801c0f8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 801c0a4:	7823      	ldrb	r3, [r4, #0]
 801c0a6:	f3bf 8f5b 	dmb	ish
 801c0aa:	07da      	lsls	r2, r3, #31
 801c0ac:	4605      	mov	r5, r0
 801c0ae:	d40b      	bmi.n	801c0c8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801c0b0:	4620      	mov	r0, r4
 801c0b2:	f006 fb74 	bl	802279e <__cxa_guard_acquire>
 801c0b6:	b138      	cbz	r0, 801c0c8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801c0b8:	4620      	mov	r0, r4
 801c0ba:	f006 fb7c 	bl	80227b6 <__cxa_guard_release>
 801c0be:	4a0f      	ldr	r2, [pc, #60]	; (801c0fc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801c0c0:	490f      	ldr	r1, [pc, #60]	; (801c100 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 801c0c2:	4810      	ldr	r0, [pc, #64]	; (801c104 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801c0c4:	f006 fb61 	bl	802278a <__aeabi_atexit>
 801c0c8:	4c0f      	ldr	r4, [pc, #60]	; (801c108 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 801c0ca:	7823      	ldrb	r3, [r4, #0]
 801c0cc:	f3bf 8f5b 	dmb	ish
 801c0d0:	07db      	lsls	r3, r3, #31
 801c0d2:	d40b      	bmi.n	801c0ec <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801c0d4:	4620      	mov	r0, r4
 801c0d6:	f006 fb62 	bl	802279e <__cxa_guard_acquire>
 801c0da:	b138      	cbz	r0, 801c0ec <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801c0dc:	4620      	mov	r0, r4
 801c0de:	f006 fb6a 	bl	80227b6 <__cxa_guard_release>
 801c0e2:	4a06      	ldr	r2, [pc, #24]	; (801c0fc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801c0e4:	4909      	ldr	r1, [pc, #36]	; (801c10c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 801c0e6:	480a      	ldr	r0, [pc, #40]	; (801c110 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801c0e8:	f006 fb4f 	bl	802278a <__aeabi_atexit>
 801c0ec:	4b05      	ldr	r3, [pc, #20]	; (801c104 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801c0ee:	652b      	str	r3, [r5, #80]	; 0x50
 801c0f0:	4b07      	ldr	r3, [pc, #28]	; (801c110 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801c0f2:	656b      	str	r3, [r5, #84]	; 0x54
 801c0f4:	bd38      	pop	{r3, r4, r5, pc}
 801c0f6:	bf00      	nop
 801c0f8:	2000d280 	.word	0x2000d280
 801c0fc:	20000000 	.word	0x20000000
 801c100:	0801a8c7 	.word	0x0801a8c7
 801c104:	20000040 	.word	0x20000040
 801c108:	2000d284 	.word	0x2000d284
 801c10c:	0801a8c5 	.word	0x0801a8c5
 801c110:	20000044 	.word	0x20000044

0801c114 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 801c114:	b538      	push	{r3, r4, r5, lr}
 801c116:	4c15      	ldr	r4, [pc, #84]	; (801c16c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 801c118:	7823      	ldrb	r3, [r4, #0]
 801c11a:	f3bf 8f5b 	dmb	ish
 801c11e:	07da      	lsls	r2, r3, #31
 801c120:	4605      	mov	r5, r0
 801c122:	d40b      	bmi.n	801c13c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801c124:	4620      	mov	r0, r4
 801c126:	f006 fb3a 	bl	802279e <__cxa_guard_acquire>
 801c12a:	b138      	cbz	r0, 801c13c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801c12c:	4620      	mov	r0, r4
 801c12e:	f006 fb42 	bl	80227b6 <__cxa_guard_release>
 801c132:	4a0f      	ldr	r2, [pc, #60]	; (801c170 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801c134:	490f      	ldr	r1, [pc, #60]	; (801c174 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 801c136:	4810      	ldr	r0, [pc, #64]	; (801c178 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801c138:	f006 fb27 	bl	802278a <__aeabi_atexit>
 801c13c:	4c0f      	ldr	r4, [pc, #60]	; (801c17c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 801c13e:	7823      	ldrb	r3, [r4, #0]
 801c140:	f3bf 8f5b 	dmb	ish
 801c144:	07db      	lsls	r3, r3, #31
 801c146:	d40b      	bmi.n	801c160 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801c148:	4620      	mov	r0, r4
 801c14a:	f006 fb28 	bl	802279e <__cxa_guard_acquire>
 801c14e:	b138      	cbz	r0, 801c160 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801c150:	4620      	mov	r0, r4
 801c152:	f006 fb30 	bl	80227b6 <__cxa_guard_release>
 801c156:	4a06      	ldr	r2, [pc, #24]	; (801c170 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801c158:	4909      	ldr	r1, [pc, #36]	; (801c180 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 801c15a:	480a      	ldr	r0, [pc, #40]	; (801c184 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801c15c:	f006 fb15 	bl	802278a <__aeabi_atexit>
 801c160:	4b05      	ldr	r3, [pc, #20]	; (801c178 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801c162:	64ab      	str	r3, [r5, #72]	; 0x48
 801c164:	4b07      	ldr	r3, [pc, #28]	; (801c184 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801c166:	64eb      	str	r3, [r5, #76]	; 0x4c
 801c168:	bd38      	pop	{r3, r4, r5, pc}
 801c16a:	bf00      	nop
 801c16c:	2000d270 	.word	0x2000d270
 801c170:	20000000 	.word	0x20000000
 801c174:	0801a8cb 	.word	0x0801a8cb
 801c178:	20000030 	.word	0x20000030
 801c17c:	2000d274 	.word	0x2000d274
 801c180:	0801a8c9 	.word	0x0801a8c9
 801c184:	20000034 	.word	0x20000034

0801c188 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 801c188:	b510      	push	{r4, lr}
 801c18a:	4604      	mov	r4, r0
 801c18c:	f7ff ff88 	bl	801c0a0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 801c190:	4620      	mov	r0, r4
 801c192:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c196:	f7ff bfbd 	b.w	801c114 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

0801c19a <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 801c19a:	b510      	push	{r4, lr}
 801c19c:	4604      	mov	r4, r0
 801c19e:	f7ff fff3 	bl	801c188 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 801c1a2:	4620      	mov	r0, r4
 801c1a4:	f7ff ff72 	bl	801c08c <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 801c1a8:	4620      	mov	r0, r4
 801c1aa:	f7ff fe73 	bl	801be94 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 801c1ae:	4620      	mov	r0, r4
 801c1b0:	f7ff fdf2 	bl	801bd98 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 801c1b4:	4620      	mov	r0, r4
 801c1b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c1ba:	f7ff bee9 	b.w	801bf90 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>
	...

0801c1c0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 801c1c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c1c4:	b087      	sub	sp, #28
 801c1c6:	7888      	ldrb	r0, [r1, #2]
 801c1c8:	9001      	str	r0, [sp, #4]
 801c1ca:	7848      	ldrb	r0, [r1, #1]
 801c1cc:	9002      	str	r0, [sp, #8]
 801c1ce:	7808      	ldrb	r0, [r1, #0]
 801c1d0:	9100      	str	r1, [sp, #0]
 801c1d2:	9901      	ldr	r1, [sp, #4]
 801c1d4:	9003      	str	r0, [sp, #12]
 801c1d6:	e9dd c512 	ldrd	ip, r5, [sp, #72]	; 0x48
 801c1da:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 801c1de:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 801c1e2:	f9bd e040 	ldrsh.w	lr, [sp, #64]	; 0x40
 801c1e6:	9902      	ldr	r1, [sp, #8]
 801c1e8:	f9bd 9044 	ldrsh.w	r9, [sp, #68]	; 0x44
 801c1ec:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 801c1f0:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 801c1f4:	4616      	mov	r6, r2
 801c1f6:	fb05 ca0e 	mla	sl, r5, lr, ip
 801c1fa:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 801c1fe:	2d00      	cmp	r5, #0
 801c200:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 801c204:	9005      	str	r0, [sp, #20]
 801c206:	eb06 080a 	add.w	r8, r6, sl
 801c20a:	db4a      	blt.n	801c2a2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe2>
 801c20c:	45a9      	cmp	r9, r5
 801c20e:	dd48      	ble.n	801c2a2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe2>
 801c210:	f1bc 0f00 	cmp.w	ip, #0
 801c214:	db43      	blt.n	801c29e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xde>
 801c216:	45e6      	cmp	lr, ip
 801c218:	dd41      	ble.n	801c29e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xde>
 801c21a:	f816 600a 	ldrb.w	r6, [r6, sl]
 801c21e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801c222:	441e      	add	r6, r3
 801c224:	f11c 0001 	adds.w	r0, ip, #1
 801c228:	d43e      	bmi.n	801c2a8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe8>
 801c22a:	4586      	cmp	lr, r0
 801c22c:	dd3c      	ble.n	801c2a8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe8>
 801c22e:	2a00      	cmp	r2, #0
 801c230:	d03a      	beq.n	801c2a8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe8>
 801c232:	f898 0001 	ldrb.w	r0, [r8, #1]
 801c236:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801c23a:	4418      	add	r0, r3
 801c23c:	3501      	adds	r5, #1
 801c23e:	d437      	bmi.n	801c2b0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf0>
 801c240:	45a9      	cmp	r9, r5
 801c242:	dd35      	ble.n	801c2b0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf0>
 801c244:	b3a4      	cbz	r4, 801c2b0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf0>
 801c246:	f1bc 0f00 	cmp.w	ip, #0
 801c24a:	db2f      	blt.n	801c2ac <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xec>
 801c24c:	45e6      	cmp	lr, ip
 801c24e:	dd2d      	ble.n	801c2ac <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xec>
 801c250:	f818 500e 	ldrb.w	r5, [r8, lr]
 801c254:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c258:	441d      	add	r5, r3
 801c25a:	f11c 0c01 	adds.w	ip, ip, #1
 801c25e:	d42a      	bmi.n	801c2b6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf6>
 801c260:	45e6      	cmp	lr, ip
 801c262:	dd28      	ble.n	801c2b6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf6>
 801c264:	b33a      	cbz	r2, 801c2b6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf6>
 801c266:	44c6      	add	lr, r8
 801c268:	f89e c001 	ldrb.w	ip, [lr, #1]
 801c26c:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801c270:	4463      	add	r3, ip
 801c272:	ea6f 0c07 	mvn.w	ip, r7
 801c276:	2a0f      	cmp	r2, #15
 801c278:	fa5f fc8c 	uxtb.w	ip, ip
 801c27c:	f896 a000 	ldrb.w	sl, [r6]
 801c280:	f890 b000 	ldrb.w	fp, [r0]
 801c284:	f895 9000 	ldrb.w	r9, [r5]
 801c288:	7819      	ldrb	r1, [r3, #0]
 801c28a:	d801      	bhi.n	801c290 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xd0>
 801c28c:	2c0f      	cmp	r4, #15
 801c28e:	d914      	bls.n	801c2ba <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xfa>
 801c290:	4b40      	ldr	r3, [pc, #256]	; (801c394 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d4>)
 801c292:	4a41      	ldr	r2, [pc, #260]	; (801c398 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d8>)
 801c294:	4841      	ldr	r0, [pc, #260]	; (801c39c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1dc>)
 801c296:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 801c29a:	f006 faa9 	bl	80227f0 <__assert_func>
 801c29e:	ae05      	add	r6, sp, #20
 801c2a0:	e7c0      	b.n	801c224 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x64>
 801c2a2:	a805      	add	r0, sp, #20
 801c2a4:	4606      	mov	r6, r0
 801c2a6:	e7c9      	b.n	801c23c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7c>
 801c2a8:	a805      	add	r0, sp, #20
 801c2aa:	e7c7      	b.n	801c23c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7c>
 801c2ac:	ad05      	add	r5, sp, #20
 801c2ae:	e7d4      	b.n	801c25a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x9a>
 801c2b0:	ab05      	add	r3, sp, #20
 801c2b2:	461d      	mov	r5, r3
 801c2b4:	e7dd      	b.n	801c272 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb2>
 801c2b6:	ab05      	add	r3, sp, #20
 801c2b8:	e7db      	b.n	801c272 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb2>
 801c2ba:	b292      	uxth	r2, r2
 801c2bc:	b2a4      	uxth	r4, r4
 801c2be:	fb02 f804 	mul.w	r8, r2, r4
 801c2c2:	ebc8 1404 	rsb	r4, r8, r4, lsl #4
 801c2c6:	0112      	lsls	r2, r2, #4
 801c2c8:	b2a4      	uxth	r4, r4
 801c2ca:	f5c2 7e80 	rsb	lr, r2, #256	; 0x100
 801c2ce:	eba2 0208 	sub.w	r2, r2, r8
 801c2d2:	b292      	uxth	r2, r2
 801c2d4:	ebae 0e04 	sub.w	lr, lr, r4
 801c2d8:	fa1f fe8e 	uxth.w	lr, lr
 801c2dc:	fb02 fb0b 	mul.w	fp, r2, fp
 801c2e0:	fb0e ba0a 	mla	sl, lr, sl, fp
 801c2e4:	fb04 aa09 	mla	sl, r4, r9, sl
 801c2e8:	fb08 aa01 	mla	sl, r8, r1, sl
 801c2ec:	9903      	ldr	r1, [sp, #12]
 801c2ee:	fa1f fc8c 	uxth.w	ip, ip
 801c2f2:	fb11 f90c 	smulbb	r9, r1, ip
 801c2f6:	b2bf      	uxth	r7, r7
 801c2f8:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 801c2fc:	fb0a 9a07 	mla	sl, sl, r7, r9
 801c300:	fa1f fa8a 	uxth.w	sl, sl
 801c304:	f10a 0901 	add.w	r9, sl, #1
 801c308:	9900      	ldr	r1, [sp, #0]
 801c30a:	eb09 2a1a 	add.w	sl, r9, sl, lsr #8
 801c30e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801c312:	f881 a000 	strb.w	sl, [r1]
 801c316:	f890 a001 	ldrb.w	sl, [r0, #1]
 801c31a:	f896 9001 	ldrb.w	r9, [r6, #1]
 801c31e:	9902      	ldr	r1, [sp, #8]
 801c320:	fb02 fa0a 	mul.w	sl, r2, sl
 801c324:	fb0e aa09 	mla	sl, lr, r9, sl
 801c328:	f895 9001 	ldrb.w	r9, [r5, #1]
 801c32c:	fb04 aa09 	mla	sl, r4, r9, sl
 801c330:	f893 9001 	ldrb.w	r9, [r3, #1]
 801c334:	fb08 a909 	mla	r9, r8, r9, sl
 801c338:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801c33c:	fb11 fa0c 	smulbb	sl, r1, ip
 801c340:	fb09 a907 	mla	r9, r9, r7, sl
 801c344:	fa1f f989 	uxth.w	r9, r9
 801c348:	f109 0a01 	add.w	sl, r9, #1
 801c34c:	9900      	ldr	r1, [sp, #0]
 801c34e:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801c352:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c356:	f881 9001 	strb.w	r9, [r1, #1]
 801c35a:	7880      	ldrb	r0, [r0, #2]
 801c35c:	78b6      	ldrb	r6, [r6, #2]
 801c35e:	789b      	ldrb	r3, [r3, #2]
 801c360:	4342      	muls	r2, r0
 801c362:	78a8      	ldrb	r0, [r5, #2]
 801c364:	fb0e 2206 	mla	r2, lr, r6, r2
 801c368:	fb04 2400 	mla	r4, r4, r0, r2
 801c36c:	fb08 4803 	mla	r8, r8, r3, r4
 801c370:	9b01      	ldr	r3, [sp, #4]
 801c372:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801c376:	fb13 fc0c 	smulbb	ip, r3, ip
 801c37a:	fb08 c707 	mla	r7, r8, r7, ip
 801c37e:	b2bf      	uxth	r7, r7
 801c380:	f107 0c01 	add.w	ip, r7, #1
 801c384:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 801c388:	123f      	asrs	r7, r7, #8
 801c38a:	708f      	strb	r7, [r1, #2]
 801c38c:	b007      	add	sp, #28
 801c38e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c392:	bf00      	nop
 801c394:	08027814 	.word	0x08027814
 801c398:	08027d0a 	.word	0x08027d0a
 801c39c:	080278dd 	.word	0x080278dd

0801c3a0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801c3a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c3a4:	ed2d 8b08 	vpush	{d8-d11}
 801c3a8:	b095      	sub	sp, #84	; 0x54
 801c3aa:	eeb0 aa40 	vmov.f32	s20, s0
 801c3ae:	930a      	str	r3, [sp, #40]	; 0x28
 801c3b0:	f9bd 30bc 	ldrsh.w	r3, [sp, #188]	; 0xbc
 801c3b4:	9c2b      	ldr	r4, [sp, #172]	; 0xac
 801c3b6:	930c      	str	r3, [sp, #48]	; 0x30
 801c3b8:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 801c3bc:	9310      	str	r3, [sp, #64]	; 0x40
 801c3be:	910f      	str	r1, [sp, #60]	; 0x3c
 801c3c0:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 801c3c4:	9013      	str	r0, [sp, #76]	; 0x4c
 801c3c6:	6860      	ldr	r0, [r4, #4]
 801c3c8:	9212      	str	r2, [sp, #72]	; 0x48
 801c3ca:	fb00 1303 	mla	r3, r0, r3, r1
 801c3ce:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 801c3d0:	6821      	ldr	r1, [r4, #0]
 801c3d2:	6854      	ldr	r4, [r2, #4]
 801c3d4:	f9bd 50b8 	ldrsh.w	r5, [sp, #184]	; 0xb8
 801c3d8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c3dc:	18cb      	adds	r3, r1, r3
 801c3de:	930b      	str	r3, [sp, #44]	; 0x2c
 801c3e0:	6813      	ldr	r3, [r2, #0]
 801c3e2:	930e      	str	r3, [sp, #56]	; 0x38
 801c3e4:	1d23      	adds	r3, r4, #4
 801c3e6:	9309      	str	r3, [sp, #36]	; 0x24
 801c3e8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c3ea:	43db      	mvns	r3, r3
 801c3ec:	b2db      	uxtb	r3, r3
 801c3ee:	eef0 9a60 	vmov.f32	s19, s1
 801c3f2:	eeb0 9a41 	vmov.f32	s18, s2
 801c3f6:	eeb0 8a62 	vmov.f32	s16, s5
 801c3fa:	eef0 8a43 	vmov.f32	s17, s6
 801c3fe:	eef0 ba44 	vmov.f32	s23, s8
 801c402:	eeb0 ba64 	vmov.f32	s22, s9
 801c406:	eef0 aa45 	vmov.f32	s21, s10
 801c40a:	930d      	str	r3, [sp, #52]	; 0x34
 801c40c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c40e:	2b00      	cmp	r3, #0
 801c410:	dc03      	bgt.n	801c41a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 801c412:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801c414:	2b00      	cmp	r3, #0
 801c416:	f340 823c 	ble.w	801c892 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f2>
 801c41a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c41c:	2b00      	cmp	r3, #0
 801c41e:	f340 8115 	ble.w	801c64c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ac>
 801c422:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801c424:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801c426:	1412      	asrs	r2, r2, #16
 801c428:	ea4f 4323 	mov.w	r3, r3, asr #16
 801c42c:	d431      	bmi.n	801c492 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 801c42e:	1c51      	adds	r1, r2, #1
 801c430:	428d      	cmp	r5, r1
 801c432:	dd31      	ble.n	801c498 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801c434:	2b00      	cmp	r3, #0
 801c436:	db2f      	blt.n	801c498 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801c438:	980c      	ldr	r0, [sp, #48]	; 0x30
 801c43a:	1c59      	adds	r1, r3, #1
 801c43c:	4288      	cmp	r0, r1
 801c43e:	dd2b      	ble.n	801c498 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801c440:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c442:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801c444:	9927      	ldr	r1, [sp, #156]	; 0x9c
 801c446:	3b01      	subs	r3, #1
 801c448:	fb02 1203 	mla	r2, r2, r3, r1
 801c44c:	1412      	asrs	r2, r2, #16
 801c44e:	d42d      	bmi.n	801c4ac <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 801c450:	3201      	adds	r2, #1
 801c452:	4295      	cmp	r5, r2
 801c454:	dd2a      	ble.n	801c4ac <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 801c456:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801c458:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801c45a:	fb02 1303 	mla	r3, r2, r3, r1
 801c45e:	141b      	asrs	r3, r3, #16
 801c460:	d424      	bmi.n	801c4ac <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 801c462:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801c464:	3301      	adds	r3, #1
 801c466:	429a      	cmp	r2, r3
 801c468:	dd20      	ble.n	801c4ac <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 801c46a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c46c:	f8bd a040 	ldrh.w	sl, [sp, #64]	; 0x40
 801c470:	f103 0c03 	add.w	ip, r3, #3
 801c474:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c476:	9311      	str	r3, [sp, #68]	; 0x44
 801c478:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801c47a:	2b00      	cmp	r3, #0
 801c47c:	f300 814f 	bgt.w	801c71e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37e>
 801c480:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c482:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801c484:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c488:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c48c:	441a      	add	r2, r3
 801c48e:	920b      	str	r2, [sp, #44]	; 0x2c
 801c490:	e0de      	b.n	801c650 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 801c492:	1c51      	adds	r1, r2, #1
 801c494:	f040 80cb 	bne.w	801c62e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 801c498:	42aa      	cmp	r2, r5
 801c49a:	f280 80c8 	bge.w	801c62e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 801c49e:	1c5f      	adds	r7, r3, #1
 801c4a0:	f2c0 80c5 	blt.w	801c62e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 801c4a4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801c4a6:	4293      	cmp	r3, r2
 801c4a8:	f280 80c1 	bge.w	801c62e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 801c4ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c4ae:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801c4b0:	9311      	str	r3, [sp, #68]	; 0x44
 801c4b2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801c4b4:	2b00      	cmp	r3, #0
 801c4b6:	dde3      	ble.n	801c480 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 801c4b8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801c4ba:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801c4bc:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801c4be:	141a      	asrs	r2, r3, #16
 801c4c0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801c4c2:	1400      	asrs	r0, r0, #16
 801c4c4:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801c4c8:	f3c1 3103 	ubfx	r1, r1, #12, #4
 801c4cc:	f100 810e 	bmi.w	801c6ec <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34c>
 801c4d0:	1c46      	adds	r6, r0, #1
 801c4d2:	42b5      	cmp	r5, r6
 801c4d4:	f340 810c 	ble.w	801c6f0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x350>
 801c4d8:	2a00      	cmp	r2, #0
 801c4da:	f2c0 8109 	blt.w	801c6f0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x350>
 801c4de:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801c4e0:	1c56      	adds	r6, r2, #1
 801c4e2:	42b4      	cmp	r4, r6
 801c4e4:	f340 8104 	ble.w	801c6f0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x350>
 801c4e8:	fb02 0005 	mla	r0, r2, r5, r0
 801c4ec:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801c4ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c4f0:	f814 e000 	ldrb.w	lr, [r4, r0]
 801c4f4:	4402      	add	r2, r0
 801c4f6:	9809      	ldr	r0, [sp, #36]	; 0x24
 801c4f8:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801c4fc:	eb00 080e 	add.w	r8, r0, lr
 801c500:	2b00      	cmp	r3, #0
 801c502:	f000 80e4 	beq.w	801c6ce <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x32e>
 801c506:	f892 c001 	ldrb.w	ip, [r2, #1]
 801c50a:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801c50e:	4484      	add	ip, r0
 801c510:	2900      	cmp	r1, #0
 801c512:	f000 80e5 	beq.w	801c6e0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x340>
 801c516:	1950      	adds	r0, r2, r5
 801c518:	5d52      	ldrb	r2, [r2, r5]
 801c51a:	7840      	ldrb	r0, [r0, #1]
 801c51c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801c51e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801c522:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801c526:	4422      	add	r2, r4
 801c528:	4420      	add	r0, r4
 801c52a:	b29b      	uxth	r3, r3
 801c52c:	b289      	uxth	r1, r1
 801c52e:	fb03 fa01 	mul.w	sl, r3, r1
 801c532:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801c534:	f8bd 6040 	ldrh.w	r6, [sp, #64]	; 0x40
 801c538:	f814 b00e 	ldrb.w	fp, [r4, lr]
 801c53c:	f89c e000 	ldrb.w	lr, [ip]
 801c540:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801c542:	011b      	lsls	r3, r3, #4
 801c544:	ebca 1101 	rsb	r1, sl, r1, lsl #4
 801c548:	b289      	uxth	r1, r1
 801c54a:	f5c3 7980 	rsb	r9, r3, #256	; 0x100
 801c54e:	eba3 030a 	sub.w	r3, r3, sl
 801c552:	b29b      	uxth	r3, r3
 801c554:	eba9 0901 	sub.w	r9, r9, r1
 801c558:	fa1f f989 	uxth.w	r9, r9
 801c55c:	fb03 fe0e 	mul.w	lr, r3, lr
 801c560:	fb09 ee0b 	mla	lr, r9, fp, lr
 801c564:	f892 b000 	ldrb.w	fp, [r2]
 801c568:	fb01 ee0b 	mla	lr, r1, fp, lr
 801c56c:	f890 b000 	ldrb.w	fp, [r0]
 801c570:	fb0a ee0b 	mla	lr, sl, fp, lr
 801c574:	f897 b000 	ldrb.w	fp, [r7]
 801c578:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801c57c:	fb1b fb04 	smulbb	fp, fp, r4
 801c580:	fb0e be06 	mla	lr, lr, r6, fp
 801c584:	fa1f fe8e 	uxth.w	lr, lr
 801c588:	f10e 0b01 	add.w	fp, lr, #1
 801c58c:	eb0b 2b1e 	add.w	fp, fp, lr, lsr #8
 801c590:	ea4f 2b2b 	mov.w	fp, fp, asr #8
 801c594:	f887 b000 	strb.w	fp, [r7]
 801c598:	f89c e001 	ldrb.w	lr, [ip, #1]
 801c59c:	f898 b001 	ldrb.w	fp, [r8, #1]
 801c5a0:	fb03 fe0e 	mul.w	lr, r3, lr
 801c5a4:	fb09 ee0b 	mla	lr, r9, fp, lr
 801c5a8:	f892 b001 	ldrb.w	fp, [r2, #1]
 801c5ac:	fb01 ee0b 	mla	lr, r1, fp, lr
 801c5b0:	f890 b001 	ldrb.w	fp, [r0, #1]
 801c5b4:	fb0a ee0b 	mla	lr, sl, fp, lr
 801c5b8:	f897 b001 	ldrb.w	fp, [r7, #1]
 801c5bc:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801c5c0:	fb1b fb04 	smulbb	fp, fp, r4
 801c5c4:	fb0e be06 	mla	lr, lr, r6, fp
 801c5c8:	fa1f fe8e 	uxth.w	lr, lr
 801c5cc:	f10e 0b01 	add.w	fp, lr, #1
 801c5d0:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801c5d4:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801c5d8:	f887 e001 	strb.w	lr, [r7, #1]
 801c5dc:	f89c c002 	ldrb.w	ip, [ip, #2]
 801c5e0:	f898 e002 	ldrb.w	lr, [r8, #2]
 801c5e4:	fb03 f30c 	mul.w	r3, r3, ip
 801c5e8:	fb09 330e 	mla	r3, r9, lr, r3
 801c5ec:	f892 e002 	ldrb.w	lr, [r2, #2]
 801c5f0:	7882      	ldrb	r2, [r0, #2]
 801c5f2:	fb01 310e 	mla	r1, r1, lr, r3
 801c5f6:	fb0a 1a02 	mla	sl, sl, r2, r1
 801c5fa:	78b9      	ldrb	r1, [r7, #2]
 801c5fc:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 801c600:	fb11 f104 	smulbb	r1, r1, r4
 801c604:	fb0a 1606 	mla	r6, sl, r6, r1
 801c608:	b2b6      	uxth	r6, r6
 801c60a:	1c73      	adds	r3, r6, #1
 801c60c:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 801c610:	1236      	asrs	r6, r6, #8
 801c612:	70be      	strb	r6, [r7, #2]
 801c614:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801c616:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801c618:	4413      	add	r3, r2
 801c61a:	9327      	str	r3, [sp, #156]	; 0x9c
 801c61c:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801c61e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801c620:	4413      	add	r3, r2
 801c622:	9328      	str	r3, [sp, #160]	; 0xa0
 801c624:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801c626:	3b01      	subs	r3, #1
 801c628:	3703      	adds	r7, #3
 801c62a:	9311      	str	r3, [sp, #68]	; 0x44
 801c62c:	e741      	b.n	801c4b2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x112>
 801c62e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801c630:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801c632:	4413      	add	r3, r2
 801c634:	9327      	str	r3, [sp, #156]	; 0x9c
 801c636:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801c638:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801c63a:	4413      	add	r3, r2
 801c63c:	9328      	str	r3, [sp, #160]	; 0xa0
 801c63e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c640:	3b01      	subs	r3, #1
 801c642:	930a      	str	r3, [sp, #40]	; 0x28
 801c644:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c646:	3303      	adds	r3, #3
 801c648:	930b      	str	r3, [sp, #44]	; 0x2c
 801c64a:	e6e6      	b.n	801c41a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 801c64c:	f47f aef8 	bne.w	801c440 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 801c650:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c652:	2b00      	cmp	r3, #0
 801c654:	f340 811d 	ble.w	801c892 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f2>
 801c658:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801c65c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801c660:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801c664:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801c666:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801c66a:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801c66e:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801c672:	eef0 6a48 	vmov.f32	s13, s16
 801c676:	ee69 7a27 	vmul.f32	s15, s18, s15
 801c67a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c67e:	ee37 8a48 	vsub.f32	s16, s14, s16
 801c682:	edcd 6a27 	vstr	s13, [sp, #156]	; 0x9c
 801c686:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801c68a:	eef0 6a68 	vmov.f32	s13, s17
 801c68e:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801c692:	ee18 2a10 	vmov	r2, s16
 801c696:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801c69a:	fb92 f3f3 	sdiv	r3, r2, r3
 801c69e:	ee18 2a90 	vmov	r2, s17
 801c6a2:	9329      	str	r3, [sp, #164]	; 0xa4
 801c6a4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801c6a6:	fb92 f3f3 	sdiv	r3, r2, r3
 801c6aa:	932a      	str	r3, [sp, #168]	; 0xa8
 801c6ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c6ae:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c6b0:	3b01      	subs	r3, #1
 801c6b2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c6b6:	930f      	str	r3, [sp, #60]	; 0x3c
 801c6b8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801c6ba:	edcd 6a28 	vstr	s13, [sp, #160]	; 0xa0
 801c6be:	bf08      	it	eq
 801c6c0:	4613      	moveq	r3, r2
 801c6c2:	930a      	str	r3, [sp, #40]	; 0x28
 801c6c4:	eef0 8a67 	vmov.f32	s17, s15
 801c6c8:	eeb0 8a47 	vmov.f32	s16, s14
 801c6cc:	e69e      	b.n	801c40c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801c6ce:	b151      	cbz	r1, 801c6e6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 801c6d0:	5d52      	ldrb	r2, [r2, r5]
 801c6d2:	9809      	ldr	r0, [sp, #36]	; 0x24
 801c6d4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801c6d8:	4402      	add	r2, r0
 801c6da:	4640      	mov	r0, r8
 801c6dc:	46c4      	mov	ip, r8
 801c6de:	e724      	b.n	801c52a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18a>
 801c6e0:	4640      	mov	r0, r8
 801c6e2:	4642      	mov	r2, r8
 801c6e4:	e721      	b.n	801c52a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18a>
 801c6e6:	4640      	mov	r0, r8
 801c6e8:	4642      	mov	r2, r8
 801c6ea:	e7f7      	b.n	801c6dc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x33c>
 801c6ec:	1c46      	adds	r6, r0, #1
 801c6ee:	d191      	bne.n	801c614 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801c6f0:	4285      	cmp	r5, r0
 801c6f2:	dd8f      	ble.n	801c614 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801c6f4:	1c54      	adds	r4, r2, #1
 801c6f6:	db8d      	blt.n	801c614 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801c6f8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801c6fa:	4294      	cmp	r4, r2
 801c6fc:	dd8a      	ble.n	801c614 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801c6fe:	e9cd 2303 	strd	r2, r3, [sp, #12]
 801c702:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801c704:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c706:	9002      	str	r0, [sp, #8]
 801c708:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801c70c:	e9cd 5300 	strd	r5, r3, [sp]
 801c710:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c712:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c714:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801c716:	4639      	mov	r1, r7
 801c718:	f7ff fd52 	bl	801c1c0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 801c71c:	e77a      	b.n	801c614 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801c71e:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801c720:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801c722:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801c724:	1410      	asrs	r0, r2, #16
 801c726:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801c72a:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801c72c:	1412      	asrs	r2, r2, #16
 801c72e:	fb05 2000 	mla	r0, r5, r0, r2
 801c732:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c734:	f814 8000 	ldrb.w	r8, [r4, r0]
 801c738:	4402      	add	r2, r0
 801c73a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801c73c:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801c740:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801c744:	eb00 0708 	add.w	r7, r0, r8
 801c748:	2b00      	cmp	r3, #0
 801c74a:	f000 8093 	beq.w	801c874 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4d4>
 801c74e:	7856      	ldrb	r6, [r2, #1]
 801c750:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801c754:	4406      	add	r6, r0
 801c756:	2900      	cmp	r1, #0
 801c758:	f000 8095 	beq.w	801c886 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e6>
 801c75c:	1950      	adds	r0, r2, r5
 801c75e:	5d52      	ldrb	r2, [r2, r5]
 801c760:	7840      	ldrb	r0, [r0, #1]
 801c762:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801c764:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801c768:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801c76c:	4422      	add	r2, r4
 801c76e:	4420      	add	r0, r4
 801c770:	b29b      	uxth	r3, r3
 801c772:	b289      	uxth	r1, r1
 801c774:	fb03 f901 	mul.w	r9, r3, r1
 801c778:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801c77a:	011b      	lsls	r3, r3, #4
 801c77c:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801c780:	f814 b008 	ldrb.w	fp, [r4, r8]
 801c784:	f896 8000 	ldrb.w	r8, [r6]
 801c788:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801c78a:	b289      	uxth	r1, r1
 801c78c:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801c790:	eba3 0309 	sub.w	r3, r3, r9
 801c794:	b29b      	uxth	r3, r3
 801c796:	ebae 0e01 	sub.w	lr, lr, r1
 801c79a:	fa1f fe8e 	uxth.w	lr, lr
 801c79e:	fb03 f808 	mul.w	r8, r3, r8
 801c7a2:	fb0e 880b 	mla	r8, lr, fp, r8
 801c7a6:	f892 b000 	ldrb.w	fp, [r2]
 801c7aa:	fb01 880b 	mla	r8, r1, fp, r8
 801c7ae:	f890 b000 	ldrb.w	fp, [r0]
 801c7b2:	fb09 880b 	mla	r8, r9, fp, r8
 801c7b6:	f81c bc03 	ldrb.w	fp, [ip, #-3]
 801c7ba:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801c7be:	fb1b fb04 	smulbb	fp, fp, r4
 801c7c2:	fb08 b80a 	mla	r8, r8, sl, fp
 801c7c6:	fa1f f888 	uxth.w	r8, r8
 801c7ca:	f108 0b01 	add.w	fp, r8, #1
 801c7ce:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801c7d2:	ea4f 2828 	mov.w	r8, r8, asr #8
 801c7d6:	f80c 8c03 	strb.w	r8, [ip, #-3]
 801c7da:	f896 8001 	ldrb.w	r8, [r6, #1]
 801c7de:	f897 b001 	ldrb.w	fp, [r7, #1]
 801c7e2:	fb03 f808 	mul.w	r8, r3, r8
 801c7e6:	fb0e 880b 	mla	r8, lr, fp, r8
 801c7ea:	f892 b001 	ldrb.w	fp, [r2, #1]
 801c7ee:	fb01 880b 	mla	r8, r1, fp, r8
 801c7f2:	f890 b001 	ldrb.w	fp, [r0, #1]
 801c7f6:	fb09 880b 	mla	r8, r9, fp, r8
 801c7fa:	f81c bc02 	ldrb.w	fp, [ip, #-2]
 801c7fe:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801c802:	fb1b fb04 	smulbb	fp, fp, r4
 801c806:	fb08 b80a 	mla	r8, r8, sl, fp
 801c80a:	fa1f f888 	uxth.w	r8, r8
 801c80e:	f108 0b01 	add.w	fp, r8, #1
 801c812:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801c816:	ea4f 2828 	mov.w	r8, r8, asr #8
 801c81a:	f80c 8c02 	strb.w	r8, [ip, #-2]
 801c81e:	78b6      	ldrb	r6, [r6, #2]
 801c820:	78bf      	ldrb	r7, [r7, #2]
 801c822:	4373      	muls	r3, r6
 801c824:	7896      	ldrb	r6, [r2, #2]
 801c826:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801c828:	fb0e 3307 	mla	r3, lr, r7, r3
 801c82c:	fb01 3306 	mla	r3, r1, r6, r3
 801c830:	7886      	ldrb	r6, [r0, #2]
 801c832:	fb09 3906 	mla	r9, r9, r6, r3
 801c836:	f81c 3c01 	ldrb.w	r3, [ip, #-1]
 801c83a:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801c83e:	fb13 f304 	smulbb	r3, r3, r4
 801c842:	fb09 390a 	mla	r9, r9, sl, r3
 801c846:	fa1f f989 	uxth.w	r9, r9
 801c84a:	f109 0301 	add.w	r3, r9, #1
 801c84e:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 801c852:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801c854:	4413      	add	r3, r2
 801c856:	9327      	str	r3, [sp, #156]	; 0x9c
 801c858:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801c85a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801c85c:	4413      	add	r3, r2
 801c85e:	9328      	str	r3, [sp, #160]	; 0xa0
 801c860:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801c862:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c866:	3b01      	subs	r3, #1
 801c868:	f80c 9c01 	strb.w	r9, [ip, #-1]
 801c86c:	9311      	str	r3, [sp, #68]	; 0x44
 801c86e:	f10c 0c03 	add.w	ip, ip, #3
 801c872:	e601      	b.n	801c478 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801c874:	b151      	cbz	r1, 801c88c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ec>
 801c876:	5d52      	ldrb	r2, [r2, r5]
 801c878:	9809      	ldr	r0, [sp, #36]	; 0x24
 801c87a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801c87e:	4402      	add	r2, r0
 801c880:	4638      	mov	r0, r7
 801c882:	463e      	mov	r6, r7
 801c884:	e774      	b.n	801c770 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3d0>
 801c886:	4638      	mov	r0, r7
 801c888:	463a      	mov	r2, r7
 801c88a:	e771      	b.n	801c770 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3d0>
 801c88c:	4638      	mov	r0, r7
 801c88e:	463a      	mov	r2, r7
 801c890:	e7f7      	b.n	801c882 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e2>
 801c892:	b015      	add	sp, #84	; 0x54
 801c894:	ecbd 8b08 	vpop	{d8-d11}
 801c898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c89c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 801c89c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c8a0:	780d      	ldrb	r5, [r1, #0]
 801c8a2:	f891 9002 	ldrb.w	r9, [r1, #2]
 801c8a6:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 801c8aa:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 801c8ae:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 801c8b2:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 801c8b6:	e9dd 460e 	ldrd	r4, r6, [sp, #56]	; 0x38
 801c8ba:	f045 457f 	orr.w	r5, r5, #4278190080	; 0xff000000
 801c8be:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
 801c8c2:	f891 9001 	ldrb.w	r9, [r1, #1]
 801c8c6:	fb06 470c 	mla	r7, r6, ip, r4
 801c8ca:	ea45 2509 	orr.w	r5, r5, r9, lsl #8
 801c8ce:	2e00      	cmp	r6, #0
 801c8d0:	eb02 0e07 	add.w	lr, r2, r7
 801c8d4:	9501      	str	r5, [sp, #4]
 801c8d6:	db46      	blt.n	801c966 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xca>
 801c8d8:	45b0      	cmp	r8, r6
 801c8da:	dd44      	ble.n	801c966 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xca>
 801c8dc:	2c00      	cmp	r4, #0
 801c8de:	db40      	blt.n	801c962 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc6>
 801c8e0:	45a4      	cmp	ip, r4
 801c8e2:	dd3e      	ble.n	801c962 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc6>
 801c8e4:	5dd7      	ldrb	r7, [r2, r7]
 801c8e6:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801c8ea:	441f      	add	r7, r3
 801c8ec:	1c62      	adds	r2, r4, #1
 801c8ee:	d43d      	bmi.n	801c96c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd0>
 801c8f0:	4594      	cmp	ip, r2
 801c8f2:	dd3b      	ble.n	801c96c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd0>
 801c8f4:	f1ba 0f00 	cmp.w	sl, #0
 801c8f8:	d038      	beq.n	801c96c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd0>
 801c8fa:	f89e 5001 	ldrb.w	r5, [lr, #1]
 801c8fe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c902:	441d      	add	r5, r3
 801c904:	3601      	adds	r6, #1
 801c906:	d435      	bmi.n	801c974 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd8>
 801c908:	45b0      	cmp	r8, r6
 801c90a:	dd33      	ble.n	801c974 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd8>
 801c90c:	b390      	cbz	r0, 801c974 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd8>
 801c90e:	2c00      	cmp	r4, #0
 801c910:	db2e      	blt.n	801c970 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd4>
 801c912:	45a4      	cmp	ip, r4
 801c914:	dd2c      	ble.n	801c970 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd4>
 801c916:	f81e 600c 	ldrb.w	r6, [lr, ip]
 801c91a:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801c91e:	441e      	add	r6, r3
 801c920:	1c62      	adds	r2, r4, #1
 801c922:	d42a      	bmi.n	801c97a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xde>
 801c924:	4594      	cmp	ip, r2
 801c926:	dd28      	ble.n	801c97a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xde>
 801c928:	f1ba 0f00 	cmp.w	sl, #0
 801c92c:	d025      	beq.n	801c97a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xde>
 801c92e:	44f4      	add	ip, lr
 801c930:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801c934:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801c938:	4413      	add	r3, r2
 801c93a:	f1ba 0f0f 	cmp.w	sl, #15
 801c93e:	f897 8000 	ldrb.w	r8, [r7]
 801c942:	f895 9000 	ldrb.w	r9, [r5]
 801c946:	f896 e000 	ldrb.w	lr, [r6]
 801c94a:	f893 c000 	ldrb.w	ip, [r3]
 801c94e:	d801      	bhi.n	801c954 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xb8>
 801c950:	280f      	cmp	r0, #15
 801c952:	d914      	bls.n	801c97e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xe2>
 801c954:	4b29      	ldr	r3, [pc, #164]	; (801c9fc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x160>)
 801c956:	4a2a      	ldr	r2, [pc, #168]	; (801ca00 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x164>)
 801c958:	482a      	ldr	r0, [pc, #168]	; (801ca04 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x168>)
 801c95a:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 801c95e:	f005 ff47 	bl	80227f0 <__assert_func>
 801c962:	af01      	add	r7, sp, #4
 801c964:	e7c2      	b.n	801c8ec <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x50>
 801c966:	ad01      	add	r5, sp, #4
 801c968:	462f      	mov	r7, r5
 801c96a:	e7cb      	b.n	801c904 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 801c96c:	ad01      	add	r5, sp, #4
 801c96e:	e7c9      	b.n	801c904 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 801c970:	ae01      	add	r6, sp, #4
 801c972:	e7d5      	b.n	801c920 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x84>
 801c974:	ab01      	add	r3, sp, #4
 801c976:	461e      	mov	r6, r3
 801c978:	e7df      	b.n	801c93a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9e>
 801c97a:	ab01      	add	r3, sp, #4
 801c97c:	e7dd      	b.n	801c93a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9e>
 801c97e:	fa1f f48a 	uxth.w	r4, sl
 801c982:	b280      	uxth	r0, r0
 801c984:	fb04 fa00 	mul.w	sl, r4, r0
 801c988:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 801c98c:	0124      	lsls	r4, r4, #4
 801c98e:	b282      	uxth	r2, r0
 801c990:	f5c4 7b80 	rsb	fp, r4, #256	; 0x100
 801c994:	eba4 000a 	sub.w	r0, r4, sl
 801c998:	b280      	uxth	r0, r0
 801c99a:	ebab 0b02 	sub.w	fp, fp, r2
 801c99e:	fa1f fb8b 	uxth.w	fp, fp
 801c9a2:	fb00 f909 	mul.w	r9, r0, r9
 801c9a6:	fb0b 9808 	mla	r8, fp, r8, r9
 801c9aa:	fb02 8e0e 	mla	lr, r2, lr, r8
 801c9ae:	fb0a ec0c 	mla	ip, sl, ip, lr
 801c9b2:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801c9b6:	f881 c000 	strb.w	ip, [r1]
 801c9ba:	786c      	ldrb	r4, [r5, #1]
 801c9bc:	f897 c001 	ldrb.w	ip, [r7, #1]
 801c9c0:	4344      	muls	r4, r0
 801c9c2:	fb0b 4c0c 	mla	ip, fp, ip, r4
 801c9c6:	7874      	ldrb	r4, [r6, #1]
 801c9c8:	fb02 cc04 	mla	ip, r2, r4, ip
 801c9cc:	785c      	ldrb	r4, [r3, #1]
 801c9ce:	fb0a c404 	mla	r4, sl, r4, ip
 801c9d2:	1224      	asrs	r4, r4, #8
 801c9d4:	704c      	strb	r4, [r1, #1]
 801c9d6:	78ad      	ldrb	r5, [r5, #2]
 801c9d8:	78bc      	ldrb	r4, [r7, #2]
 801c9da:	4368      	muls	r0, r5
 801c9dc:	fb0b 0b04 	mla	fp, fp, r4, r0
 801c9e0:	78b0      	ldrb	r0, [r6, #2]
 801c9e2:	fb02 b000 	mla	r0, r2, r0, fp
 801c9e6:	789a      	ldrb	r2, [r3, #2]
 801c9e8:	fb0a 0a02 	mla	sl, sl, r2, r0
 801c9ec:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801c9f0:	f881 a002 	strb.w	sl, [r1, #2]
 801c9f4:	b003      	add	sp, #12
 801c9f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c9fa:	bf00      	nop
 801c9fc:	08027814 	.word	0x08027814
 801ca00:	08027d0a 	.word	0x08027d0a
 801ca04:	080278dd 	.word	0x080278dd

0801ca08 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801ca08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ca0c:	ed2d 8b0a 	vpush	{d8-d12}
 801ca10:	b08f      	sub	sp, #60	; 0x3c
 801ca12:	e9cd 120b 	strd	r1, r2, [sp, #44]	; 0x2c
 801ca16:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 801ca18:	9307      	str	r3, [sp, #28]
 801ca1a:	f9bd 30ac 	ldrsh.w	r3, [sp, #172]	; 0xac
 801ca1e:	9309      	str	r3, [sp, #36]	; 0x24
 801ca20:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	; 0xa0
 801ca24:	900d      	str	r0, [sp, #52]	; 0x34
 801ca26:	6860      	ldr	r0, [r4, #4]
 801ca28:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801ca2a:	f9bd 50a8 	ldrsh.w	r5, [sp, #168]	; 0xa8
 801ca2e:	fb00 1303 	mla	r3, r0, r3, r1
 801ca32:	6821      	ldr	r1, [r4, #0]
 801ca34:	6854      	ldr	r4, [r2, #4]
 801ca36:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ca3a:	18cb      	adds	r3, r1, r3
 801ca3c:	9308      	str	r3, [sp, #32]
 801ca3e:	6813      	ldr	r3, [r2, #0]
 801ca40:	930a      	str	r3, [sp, #40]	; 0x28
 801ca42:	eeb0 aa40 	vmov.f32	s20, s0
 801ca46:	eef0 9a60 	vmov.f32	s19, s1
 801ca4a:	eeb0 9a41 	vmov.f32	s18, s2
 801ca4e:	eeb0 8a62 	vmov.f32	s16, s5
 801ca52:	eef0 8a43 	vmov.f32	s17, s6
 801ca56:	eeb0 ca44 	vmov.f32	s24, s8
 801ca5a:	eef0 ba64 	vmov.f32	s23, s9
 801ca5e:	eeb0 ba45 	vmov.f32	s22, s10
 801ca62:	3404      	adds	r4, #4
 801ca64:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 801ca68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ca6a:	2b00      	cmp	r3, #0
 801ca6c:	dc03      	bgt.n	801ca76 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801ca6e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ca70:	2b00      	cmp	r3, #0
 801ca72:	f340 81d2 	ble.w	801ce1a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x412>
 801ca76:	9b07      	ldr	r3, [sp, #28]
 801ca78:	2b00      	cmp	r3, #0
 801ca7a:	f340 80e3 	ble.w	801cc44 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23c>
 801ca7e:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801ca80:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801ca82:	1412      	asrs	r2, r2, #16
 801ca84:	ea4f 4323 	mov.w	r3, r3, asr #16
 801ca88:	d42f      	bmi.n	801caea <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 801ca8a:	1c51      	adds	r1, r2, #1
 801ca8c:	428d      	cmp	r5, r1
 801ca8e:	dd2f      	ble.n	801caf0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 801ca90:	2b00      	cmp	r3, #0
 801ca92:	db2d      	blt.n	801caf0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 801ca94:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ca96:	1c59      	adds	r1, r3, #1
 801ca98:	4288      	cmp	r0, r1
 801ca9a:	dd29      	ble.n	801caf0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 801ca9c:	9b07      	ldr	r3, [sp, #28]
 801ca9e:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801caa0:	9923      	ldr	r1, [sp, #140]	; 0x8c
 801caa2:	3b01      	subs	r3, #1
 801caa4:	fb02 1203 	mla	r2, r2, r3, r1
 801caa8:	1412      	asrs	r2, r2, #16
 801caaa:	d42b      	bmi.n	801cb04 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 801caac:	3201      	adds	r2, #1
 801caae:	4295      	cmp	r5, r2
 801cab0:	dd28      	ble.n	801cb04 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 801cab2:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801cab4:	9924      	ldr	r1, [sp, #144]	; 0x90
 801cab6:	fb02 1303 	mla	r3, r2, r3, r1
 801caba:	141b      	asrs	r3, r3, #16
 801cabc:	d422      	bmi.n	801cb04 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 801cabe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801cac0:	3301      	adds	r3, #1
 801cac2:	429a      	cmp	r2, r3
 801cac4:	dd1e      	ble.n	801cb04 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 801cac6:	9b08      	ldr	r3, [sp, #32]
 801cac8:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801cacc:	f103 0803 	add.w	r8, r3, #3
 801cad0:	f1ba 0f00 	cmp.w	sl, #0
 801cad4:	f300 8119 	bgt.w	801cd0a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x302>
 801cad8:	9b07      	ldr	r3, [sp, #28]
 801cada:	9a08      	ldr	r2, [sp, #32]
 801cadc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801cae0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cae4:	441a      	add	r2, r3
 801cae6:	9208      	str	r2, [sp, #32]
 801cae8:	e0ae      	b.n	801cc48 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x240>
 801caea:	1c51      	adds	r1, r2, #1
 801caec:	f040 809b 	bne.w	801cc26 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 801caf0:	42aa      	cmp	r2, r5
 801caf2:	f280 8098 	bge.w	801cc26 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 801caf6:	1c5a      	adds	r2, r3, #1
 801caf8:	f2c0 8095 	blt.w	801cc26 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 801cafc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801cafe:	4293      	cmp	r3, r2
 801cb00:	f280 8091 	bge.w	801cc26 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 801cb04:	e9dd b607 	ldrd	fp, r6, [sp, #28]
 801cb08:	f1bb 0f00 	cmp.w	fp, #0
 801cb0c:	dde4      	ble.n	801cad8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd0>
 801cb0e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801cb10:	9823      	ldr	r0, [sp, #140]	; 0x8c
 801cb12:	9924      	ldr	r1, [sp, #144]	; 0x90
 801cb14:	141a      	asrs	r2, r3, #16
 801cb16:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801cb18:	1400      	asrs	r0, r0, #16
 801cb1a:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801cb1e:	f3c1 3103 	ubfx	r1, r1, #12, #4
 801cb22:	f100 80dc 	bmi.w	801ccde <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d6>
 801cb26:	1c47      	adds	r7, r0, #1
 801cb28:	42bd      	cmp	r5, r7
 801cb2a:	f340 80da 	ble.w	801cce2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2da>
 801cb2e:	2a00      	cmp	r2, #0
 801cb30:	f2c0 80d7 	blt.w	801cce2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2da>
 801cb34:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801cb36:	f102 0c01 	add.w	ip, r2, #1
 801cb3a:	4567      	cmp	r7, ip
 801cb3c:	f340 80d1 	ble.w	801cce2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2da>
 801cb40:	fb02 0005 	mla	r0, r2, r5, r0
 801cb44:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801cb46:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801cb48:	f817 8000 	ldrb.w	r8, [r7, r0]
 801cb4c:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801cb50:	4402      	add	r2, r0
 801cb52:	eb04 0c08 	add.w	ip, r4, r8
 801cb56:	2b00      	cmp	r3, #0
 801cb58:	f000 80b3 	beq.w	801ccc2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ba>
 801cb5c:	7857      	ldrb	r7, [r2, #1]
 801cb5e:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801cb62:	4427      	add	r7, r4
 801cb64:	2900      	cmp	r1, #0
 801cb66:	f000 80b4 	beq.w	801ccd2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ca>
 801cb6a:	1950      	adds	r0, r2, r5
 801cb6c:	5d52      	ldrb	r2, [r2, r5]
 801cb6e:	7840      	ldrb	r0, [r0, #1]
 801cb70:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801cb74:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801cb78:	4422      	add	r2, r4
 801cb7a:	4420      	add	r0, r4
 801cb7c:	b29b      	uxth	r3, r3
 801cb7e:	b289      	uxth	r1, r1
 801cb80:	fb03 f901 	mul.w	r9, r3, r1
 801cb84:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801cb88:	011b      	lsls	r3, r3, #4
 801cb8a:	f814 a008 	ldrb.w	sl, [r4, r8]
 801cb8e:	f897 8000 	ldrb.w	r8, [r7]
 801cb92:	b289      	uxth	r1, r1
 801cb94:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801cb98:	eba3 0309 	sub.w	r3, r3, r9
 801cb9c:	b29b      	uxth	r3, r3
 801cb9e:	ebae 0e01 	sub.w	lr, lr, r1
 801cba2:	fa1f fe8e 	uxth.w	lr, lr
 801cba6:	fb03 f808 	mul.w	r8, r3, r8
 801cbaa:	fb0e 880a 	mla	r8, lr, sl, r8
 801cbae:	f892 a000 	ldrb.w	sl, [r2]
 801cbb2:	fb01 880a 	mla	r8, r1, sl, r8
 801cbb6:	f890 a000 	ldrb.w	sl, [r0]
 801cbba:	fb09 880a 	mla	r8, r9, sl, r8
 801cbbe:	ea4f 2828 	mov.w	r8, r8, asr #8
 801cbc2:	f886 8000 	strb.w	r8, [r6]
 801cbc6:	f897 8001 	ldrb.w	r8, [r7, #1]
 801cbca:	f89c a001 	ldrb.w	sl, [ip, #1]
 801cbce:	fb03 f808 	mul.w	r8, r3, r8
 801cbd2:	fb0e 880a 	mla	r8, lr, sl, r8
 801cbd6:	f892 a001 	ldrb.w	sl, [r2, #1]
 801cbda:	fb01 880a 	mla	r8, r1, sl, r8
 801cbde:	f890 a001 	ldrb.w	sl, [r0, #1]
 801cbe2:	fb09 880a 	mla	r8, r9, sl, r8
 801cbe6:	ea4f 2828 	mov.w	r8, r8, asr #8
 801cbea:	f886 8001 	strb.w	r8, [r6, #1]
 801cbee:	78bf      	ldrb	r7, [r7, #2]
 801cbf0:	f89c c002 	ldrb.w	ip, [ip, #2]
 801cbf4:	7892      	ldrb	r2, [r2, #2]
 801cbf6:	437b      	muls	r3, r7
 801cbf8:	fb0e 330c 	mla	r3, lr, ip, r3
 801cbfc:	fb01 3102 	mla	r1, r1, r2, r3
 801cc00:	7882      	ldrb	r2, [r0, #2]
 801cc02:	fb09 1902 	mla	r9, r9, r2, r1
 801cc06:	ea4f 2929 	mov.w	r9, r9, asr #8
 801cc0a:	f886 9002 	strb.w	r9, [r6, #2]
 801cc0e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801cc10:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801cc12:	4413      	add	r3, r2
 801cc14:	9323      	str	r3, [sp, #140]	; 0x8c
 801cc16:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801cc18:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801cc1a:	4413      	add	r3, r2
 801cc1c:	3603      	adds	r6, #3
 801cc1e:	9324      	str	r3, [sp, #144]	; 0x90
 801cc20:	f10b 3bff 	add.w	fp, fp, #4294967295
 801cc24:	e770      	b.n	801cb08 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x100>
 801cc26:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801cc28:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801cc2a:	4413      	add	r3, r2
 801cc2c:	9323      	str	r3, [sp, #140]	; 0x8c
 801cc2e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801cc30:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801cc32:	4413      	add	r3, r2
 801cc34:	9324      	str	r3, [sp, #144]	; 0x90
 801cc36:	9b07      	ldr	r3, [sp, #28]
 801cc38:	3b01      	subs	r3, #1
 801cc3a:	9307      	str	r3, [sp, #28]
 801cc3c:	9b08      	ldr	r3, [sp, #32]
 801cc3e:	3303      	adds	r3, #3
 801cc40:	9308      	str	r3, [sp, #32]
 801cc42:	e718      	b.n	801ca76 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801cc44:	f47f af2a 	bne.w	801ca9c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 801cc48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801cc4a:	2b00      	cmp	r3, #0
 801cc4c:	f340 80e5 	ble.w	801ce1a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x412>
 801cc50:	ee3a aa0c 	vadd.f32	s20, s20, s24
 801cc54:	ee79 9aab 	vadd.f32	s19, s19, s23
 801cc58:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 801cc5c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801cc5e:	ee39 9a0b 	vadd.f32	s18, s18, s22
 801cc62:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801cc66:	eef0 6a48 	vmov.f32	s13, s16
 801cc6a:	ee69 7a27 	vmul.f32	s15, s18, s15
 801cc6e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801cc72:	ee37 8a48 	vsub.f32	s16, s14, s16
 801cc76:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 801cc7a:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801cc7e:	eef0 6a68 	vmov.f32	s13, s17
 801cc82:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801cc86:	ee18 2a10 	vmov	r2, s16
 801cc8a:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801cc8e:	fb92 f3f3 	sdiv	r3, r2, r3
 801cc92:	ee18 2a90 	vmov	r2, s17
 801cc96:	9325      	str	r3, [sp, #148]	; 0x94
 801cc98:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801cc9a:	fb92 f3f3 	sdiv	r3, r2, r3
 801cc9e:	9326      	str	r3, [sp, #152]	; 0x98
 801cca0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801cca2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801cca4:	3b01      	subs	r3, #1
 801cca6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ccaa:	930b      	str	r3, [sp, #44]	; 0x2c
 801ccac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801ccae:	edcd 6a24 	vstr	s13, [sp, #144]	; 0x90
 801ccb2:	bf08      	it	eq
 801ccb4:	4613      	moveq	r3, r2
 801ccb6:	9307      	str	r3, [sp, #28]
 801ccb8:	eef0 8a67 	vmov.f32	s17, s15
 801ccbc:	eeb0 8a47 	vmov.f32	s16, s14
 801ccc0:	e6d2      	b.n	801ca68 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801ccc2:	b149      	cbz	r1, 801ccd8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d0>
 801ccc4:	5d52      	ldrb	r2, [r2, r5]
 801ccc6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801ccca:	4422      	add	r2, r4
 801cccc:	4660      	mov	r0, ip
 801ccce:	4667      	mov	r7, ip
 801ccd0:	e754      	b.n	801cb7c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x174>
 801ccd2:	4660      	mov	r0, ip
 801ccd4:	4662      	mov	r2, ip
 801ccd6:	e751      	b.n	801cb7c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x174>
 801ccd8:	4660      	mov	r0, ip
 801ccda:	4662      	mov	r2, ip
 801ccdc:	e7f7      	b.n	801ccce <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c6>
 801ccde:	1c47      	adds	r7, r0, #1
 801cce0:	d195      	bne.n	801cc0e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801cce2:	4285      	cmp	r5, r0
 801cce4:	dd93      	ble.n	801cc0e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801cce6:	1c57      	adds	r7, r2, #1
 801cce8:	db91      	blt.n	801cc0e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801ccea:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801ccec:	4297      	cmp	r7, r2
 801ccee:	dd8e      	ble.n	801cc0e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801ccf0:	e9cd 3104 	strd	r3, r1, [sp, #16]
 801ccf4:	e9cd 0202 	strd	r0, r2, [sp, #8]
 801ccf8:	e9cd 5700 	strd	r5, r7, [sp]
 801ccfc:	4623      	mov	r3, r4
 801ccfe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801cd00:	980d      	ldr	r0, [sp, #52]	; 0x34
 801cd02:	4631      	mov	r1, r6
 801cd04:	f7ff fdca 	bl	801c89c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 801cd08:	e781      	b.n	801cc0e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801cd0a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801cd0c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801cd0e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801cd10:	1410      	asrs	r0, r2, #16
 801cd12:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801cd16:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801cd18:	1412      	asrs	r2, r2, #16
 801cd1a:	fb05 2000 	mla	r0, r5, r0, r2
 801cd1e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801cd20:	f816 e000 	ldrb.w	lr, [r6, r0]
 801cd24:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801cd28:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801cd2c:	4402      	add	r2, r0
 801cd2e:	eb04 070e 	add.w	r7, r4, lr
 801cd32:	2b00      	cmp	r3, #0
 801cd34:	d063      	beq.n	801cdfe <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f6>
 801cd36:	7856      	ldrb	r6, [r2, #1]
 801cd38:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801cd3c:	4426      	add	r6, r4
 801cd3e:	2900      	cmp	r1, #0
 801cd40:	d065      	beq.n	801ce0e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x406>
 801cd42:	1950      	adds	r0, r2, r5
 801cd44:	5d52      	ldrb	r2, [r2, r5]
 801cd46:	7840      	ldrb	r0, [r0, #1]
 801cd48:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801cd4c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801cd50:	4422      	add	r2, r4
 801cd52:	4420      	add	r0, r4
 801cd54:	b29b      	uxth	r3, r3
 801cd56:	b289      	uxth	r1, r1
 801cd58:	fb03 f901 	mul.w	r9, r3, r1
 801cd5c:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801cd60:	011b      	lsls	r3, r3, #4
 801cd62:	f814 b00e 	ldrb.w	fp, [r4, lr]
 801cd66:	f896 e000 	ldrb.w	lr, [r6]
 801cd6a:	b289      	uxth	r1, r1
 801cd6c:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 801cd70:	eba3 0309 	sub.w	r3, r3, r9
 801cd74:	b29b      	uxth	r3, r3
 801cd76:	ebac 0c01 	sub.w	ip, ip, r1
 801cd7a:	fa1f fc8c 	uxth.w	ip, ip
 801cd7e:	fb03 fe0e 	mul.w	lr, r3, lr
 801cd82:	fb0c ee0b 	mla	lr, ip, fp, lr
 801cd86:	f892 b000 	ldrb.w	fp, [r2]
 801cd8a:	fb01 ee0b 	mla	lr, r1, fp, lr
 801cd8e:	f890 b000 	ldrb.w	fp, [r0]
 801cd92:	fb09 ee0b 	mla	lr, r9, fp, lr
 801cd96:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801cd9a:	f808 ec03 	strb.w	lr, [r8, #-3]
 801cd9e:	f896 e001 	ldrb.w	lr, [r6, #1]
 801cda2:	f897 b001 	ldrb.w	fp, [r7, #1]
 801cda6:	fb03 fe0e 	mul.w	lr, r3, lr
 801cdaa:	fb0c ee0b 	mla	lr, ip, fp, lr
 801cdae:	f892 b001 	ldrb.w	fp, [r2, #1]
 801cdb2:	fb01 ee0b 	mla	lr, r1, fp, lr
 801cdb6:	f890 b001 	ldrb.w	fp, [r0, #1]
 801cdba:	fb09 ee0b 	mla	lr, r9, fp, lr
 801cdbe:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801cdc2:	f808 ec02 	strb.w	lr, [r8, #-2]
 801cdc6:	78b6      	ldrb	r6, [r6, #2]
 801cdc8:	78bf      	ldrb	r7, [r7, #2]
 801cdca:	4373      	muls	r3, r6
 801cdcc:	7896      	ldrb	r6, [r2, #2]
 801cdce:	7882      	ldrb	r2, [r0, #2]
 801cdd0:	fb0c 3307 	mla	r3, ip, r7, r3
 801cdd4:	fb01 3306 	mla	r3, r1, r6, r3
 801cdd8:	fb09 3902 	mla	r9, r9, r2, r3
 801cddc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801cdde:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801cde0:	4413      	add	r3, r2
 801cde2:	9323      	str	r3, [sp, #140]	; 0x8c
 801cde4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801cde6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801cde8:	ea4f 2929 	mov.w	r9, r9, asr #8
 801cdec:	4413      	add	r3, r2
 801cdee:	f808 9c01 	strb.w	r9, [r8, #-1]
 801cdf2:	9324      	str	r3, [sp, #144]	; 0x90
 801cdf4:	f108 0803 	add.w	r8, r8, #3
 801cdf8:	f10a 3aff 	add.w	sl, sl, #4294967295
 801cdfc:	e668      	b.n	801cad0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801cdfe:	b149      	cbz	r1, 801ce14 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40c>
 801ce00:	5d52      	ldrb	r2, [r2, r5]
 801ce02:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801ce06:	4422      	add	r2, r4
 801ce08:	4638      	mov	r0, r7
 801ce0a:	463e      	mov	r6, r7
 801ce0c:	e7a2      	b.n	801cd54 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34c>
 801ce0e:	4638      	mov	r0, r7
 801ce10:	463a      	mov	r2, r7
 801ce12:	e79f      	b.n	801cd54 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34c>
 801ce14:	4638      	mov	r0, r7
 801ce16:	463a      	mov	r2, r7
 801ce18:	e7f7      	b.n	801ce0a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x402>
 801ce1a:	b00f      	add	sp, #60	; 0x3c
 801ce1c:	ecbd 8b0a 	vpop	{d8-d12}
 801ce20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ce24 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 801ce24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ce28:	b087      	sub	sp, #28
 801ce2a:	7888      	ldrb	r0, [r1, #2]
 801ce2c:	9002      	str	r0, [sp, #8]
 801ce2e:	7848      	ldrb	r0, [r1, #1]
 801ce30:	9003      	str	r0, [sp, #12]
 801ce32:	7808      	ldrb	r0, [r1, #0]
 801ce34:	9e02      	ldr	r6, [sp, #8]
 801ce36:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 801ce3a:	9004      	str	r0, [sp, #16]
 801ce3c:	e9dd 7412 	ldrd	r7, r4, [sp, #72]	; 0x48
 801ce40:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 801ce44:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 801ce48:	9e03      	ldr	r6, [sp, #12]
 801ce4a:	f9bd a044 	ldrsh.w	sl, [sp, #68]	; 0x44
 801ce4e:	f89d c050 	ldrb.w	ip, [sp, #80]	; 0x50
 801ce52:	f89d e054 	ldrb.w	lr, [sp, #84]	; 0x54
 801ce56:	fb04 7508 	mla	r5, r4, r8, r7
 801ce5a:	2c00      	cmp	r4, #0
 801ce5c:	eb02 0905 	add.w	r9, r2, r5
 801ce60:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
 801ce64:	db45      	blt.n	801cef2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xce>
 801ce66:	45a2      	cmp	sl, r4
 801ce68:	dd43      	ble.n	801cef2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xce>
 801ce6a:	2f00      	cmp	r7, #0
 801ce6c:	db3f      	blt.n	801ceee <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xca>
 801ce6e:	45b8      	cmp	r8, r7
 801ce70:	dd3d      	ble.n	801ceee <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xca>
 801ce72:	5d52      	ldrb	r2, [r2, r5]
 801ce74:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801ce78:	1c7a      	adds	r2, r7, #1
 801ce7a:	d43d      	bmi.n	801cef8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd4>
 801ce7c:	4590      	cmp	r8, r2
 801ce7e:	dd3b      	ble.n	801cef8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd4>
 801ce80:	f1bc 0f00 	cmp.w	ip, #0
 801ce84:	d038      	beq.n	801cef8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd4>
 801ce86:	f899 2001 	ldrb.w	r2, [r9, #1]
 801ce8a:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801ce8e:	3401      	adds	r4, #1
 801ce90:	d436      	bmi.n	801cf00 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xdc>
 801ce92:	45a2      	cmp	sl, r4
 801ce94:	dd34      	ble.n	801cf00 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xdc>
 801ce96:	f1be 0f00 	cmp.w	lr, #0
 801ce9a:	d031      	beq.n	801cf00 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xdc>
 801ce9c:	2f00      	cmp	r7, #0
 801ce9e:	db2d      	blt.n	801cefc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd8>
 801cea0:	45b8      	cmp	r8, r7
 801cea2:	dd2b      	ble.n	801cefc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd8>
 801cea4:	f819 2008 	ldrb.w	r2, [r9, r8]
 801cea8:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 801ceac:	3701      	adds	r7, #1
 801ceae:	d409      	bmi.n	801cec4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 801ceb0:	45b8      	cmp	r8, r7
 801ceb2:	dd07      	ble.n	801cec4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 801ceb4:	f1bc 0f00 	cmp.w	ip, #0
 801ceb8:	d004      	beq.n	801cec4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 801ceba:	44c8      	add	r8, r9
 801cebc:	f898 2001 	ldrb.w	r2, [r8, #1]
 801cec0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801cec4:	f1bc 0f0f 	cmp.w	ip, #15
 801cec8:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 801cecc:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 801ced0:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801ced4:	ea4f 6810 	mov.w	r8, r0, lsr #24
 801ced8:	d802      	bhi.n	801cee0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xbc>
 801ceda:	f1be 0f0f 	cmp.w	lr, #15
 801cede:	d911      	bls.n	801cf04 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xe0>
 801cee0:	4b77      	ldr	r3, [pc, #476]	; (801d0c0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x29c>)
 801cee2:	4a78      	ldr	r2, [pc, #480]	; (801d0c4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2a0>)
 801cee4:	4878      	ldr	r0, [pc, #480]	; (801d0c8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2a4>)
 801cee6:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 801ceea:	f005 fc81 	bl	80227f0 <__assert_func>
 801ceee:	4606      	mov	r6, r0
 801cef0:	e7c2      	b.n	801ce78 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x54>
 801cef2:	4605      	mov	r5, r0
 801cef4:	4606      	mov	r6, r0
 801cef6:	e7ca      	b.n	801ce8e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x6a>
 801cef8:	4605      	mov	r5, r0
 801cefa:	e7c8      	b.n	801ce8e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x6a>
 801cefc:	4604      	mov	r4, r0
 801cefe:	e7d5      	b.n	801ceac <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x88>
 801cf00:	4604      	mov	r4, r0
 801cf02:	e7df      	b.n	801cec4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 801cf04:	fa1f fc8c 	uxth.w	ip, ip
 801cf08:	fa1f f28e 	uxth.w	r2, lr
 801cf0c:	fb02 fe0c 	mul.w	lr, r2, ip
 801cf10:	ebce 1202 	rsb	r2, lr, r2, lsl #4
 801cf14:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 801cf18:	ebac 070e 	sub.w	r7, ip, lr
 801cf1c:	b292      	uxth	r2, r2
 801cf1e:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 801cf22:	b2bf      	uxth	r7, r7
 801cf24:	1a9b      	subs	r3, r3, r2
 801cf26:	b29b      	uxth	r3, r3
 801cf28:	fb07 fc0a 	mul.w	ip, r7, sl
 801cf2c:	fb03 cc0b 	mla	ip, r3, fp, ip
 801cf30:	fb02 cc09 	mla	ip, r2, r9, ip
 801cf34:	fb0e cc08 	mla	ip, lr, r8, ip
 801cf38:	9301      	str	r3, [sp, #4]
 801cf3a:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801cf3e:	9305      	str	r3, [sp, #20]
 801cf40:	2b00      	cmp	r3, #0
 801cf42:	f000 80b9 	beq.w	801d0b8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x294>
 801cf46:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 801cf4a:	fb0b fc0c 	mul.w	ip, fp, ip
 801cf4e:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801cf52:	fb0b f606 	mul.w	r6, fp, r6
 801cf56:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 801cf5a:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 801cf5e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801cf62:	44dc      	add	ip, fp
 801cf64:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801cf68:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 801cf6c:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 801cf70:	fb0a fb0b 	mul.w	fp, sl, fp
 801cf74:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 801cf78:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801cf7c:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 801cf80:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801cf84:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801cf88:	44dc      	add	ip, fp
 801cf8a:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801cf8e:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801cf92:	fb09 fb0b 	mul.w	fp, r9, fp
 801cf96:	fb09 f904 	mul.w	r9, r9, r4
 801cf9a:	f509 7480 	add.w	r4, r9, #256	; 0x100
 801cf9e:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 801cfa2:	f000 14ff 	and.w	r4, r0, #16711935	; 0xff00ff
 801cfa6:	fb08 f404 	mul.w	r4, r8, r4
 801cfaa:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801cfae:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801cfb2:	fb08 f800 	mul.w	r8, r8, r0
 801cfb6:	fb0a fa05 	mul.w	sl, sl, r5
 801cfba:	0a20      	lsrs	r0, r4, #8
 801cfbc:	f50a 7580 	add.w	r5, sl, #256	; 0x100
 801cfc0:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801cfc4:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 801cfc8:	eb05 2a1a 	add.w	sl, r5, sl, lsr #8
 801cfcc:	4404      	add	r4, r0
 801cfce:	ea4f 251b 	mov.w	r5, fp, lsr #8
 801cfd2:	f508 7080 	add.w	r0, r8, #256	; 0x100
 801cfd6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801cfda:	eb00 2818 	add.w	r8, r0, r8, lsr #8
 801cfde:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801cfe2:	9801      	ldr	r0, [sp, #4]
 801cfe4:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801cfe8:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801cfec:	fb0c fc07 	mul.w	ip, ip, r7
 801cff0:	445d      	add	r5, fp
 801cff2:	0a24      	lsrs	r4, r4, #8
 801cff4:	fb03 cc00 	mla	ip, r3, r0, ip
 801cff8:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801cffc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d000:	0a2d      	lsrs	r5, r5, #8
 801d002:	fb04 cc0e 	mla	ip, r4, lr, ip
 801d006:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801d00a:	0a36      	lsrs	r6, r6, #8
 801d00c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801d010:	fb05 cc02 	mla	ip, r5, r2, ip
 801d014:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801d018:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801d01c:	fb07 f70a 	mul.w	r7, r7, sl
 801d020:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d024:	fb00 7606 	mla	r6, r0, r6, r7
 801d028:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801d02c:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801d030:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 801d034:	fb0e 6e08 	mla	lr, lr, r8, r6
 801d038:	f409 4c7f 	and.w	ip, r9, #65280	; 0xff00
 801d03c:	f89d 0058 	ldrb.w	r0, [sp, #88]	; 0x58
 801d040:	9c04      	ldr	r4, [sp, #16]
 801d042:	fb02 ec0c 	mla	ip, r2, ip, lr
 801d046:	9a05      	ldr	r2, [sp, #20]
 801d048:	b280      	uxth	r0, r0
 801d04a:	4342      	muls	r2, r0
 801d04c:	1c53      	adds	r3, r2, #1
 801d04e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801d052:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d056:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801d05a:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 801d05e:	ea45 0c0c 	orr.w	ip, r5, ip
 801d062:	b2db      	uxtb	r3, r3
 801d064:	fb14 f403 	smulbb	r4, r4, r3
 801d068:	fa5f f28c 	uxtb.w	r2, ip
 801d06c:	fb02 4200 	mla	r2, r2, r0, r4
 801d070:	b292      	uxth	r2, r2
 801d072:	1c54      	adds	r4, r2, #1
 801d074:	eb04 2212 	add.w	r2, r4, r2, lsr #8
 801d078:	9c03      	ldr	r4, [sp, #12]
 801d07a:	1212      	asrs	r2, r2, #8
 801d07c:	fb14 f403 	smulbb	r4, r4, r3
 801d080:	700a      	strb	r2, [r1, #0]
 801d082:	f3cc 2207 	ubfx	r2, ip, #8, #8
 801d086:	fb02 4200 	mla	r2, r2, r0, r4
 801d08a:	b292      	uxth	r2, r2
 801d08c:	1c54      	adds	r4, r2, #1
 801d08e:	eb04 2212 	add.w	r2, r4, r2, lsr #8
 801d092:	1212      	asrs	r2, r2, #8
 801d094:	704a      	strb	r2, [r1, #1]
 801d096:	9a02      	ldr	r2, [sp, #8]
 801d098:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801d09c:	fb12 f303 	smulbb	r3, r2, r3
 801d0a0:	fb0c 3c00 	mla	ip, ip, r0, r3
 801d0a4:	fa1f fc8c 	uxth.w	ip, ip
 801d0a8:	f10c 0301 	add.w	r3, ip, #1
 801d0ac:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801d0b0:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801d0b4:	f881 c002 	strb.w	ip, [r1, #2]
 801d0b8:	b007      	add	sp, #28
 801d0ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d0be:	bf00      	nop
 801d0c0:	08027814 	.word	0x08027814
 801d0c4:	08027d0a 	.word	0x08027d0a
 801d0c8:	080278dd 	.word	0x080278dd

0801d0cc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801d0cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d0d0:	ed2d 8b08 	vpush	{d8-d11}
 801d0d4:	b09b      	sub	sp, #108	; 0x6c
 801d0d6:	eeb0 aa40 	vmov.f32	s20, s0
 801d0da:	930a      	str	r3, [sp, #40]	; 0x28
 801d0dc:	f9bd 30d4 	ldrsh.w	r3, [sp, #212]	; 0xd4
 801d0e0:	9d31      	ldr	r5, [sp, #196]	; 0xc4
 801d0e2:	9312      	str	r3, [sp, #72]	; 0x48
 801d0e4:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 801d0e8:	9114      	str	r1, [sp, #80]	; 0x50
 801d0ea:	9317      	str	r3, [sp, #92]	; 0x5c
 801d0ec:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 801d0f0:	9019      	str	r0, [sp, #100]	; 0x64
 801d0f2:	6868      	ldr	r0, [r5, #4]
 801d0f4:	9218      	str	r2, [sp, #96]	; 0x60
 801d0f6:	fb00 1303 	mla	r3, r0, r3, r1
 801d0fa:	6829      	ldr	r1, [r5, #0]
 801d0fc:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 801d0fe:	f9bd 40d0 	ldrsh.w	r4, [sp, #208]	; 0xd0
 801d102:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d106:	18cb      	adds	r3, r1, r3
 801d108:	930d      	str	r3, [sp, #52]	; 0x34
 801d10a:	6813      	ldr	r3, [r2, #0]
 801d10c:	9313      	str	r3, [sp, #76]	; 0x4c
 801d10e:	6853      	ldr	r3, [r2, #4]
 801d110:	3304      	adds	r3, #4
 801d112:	eef0 9a60 	vmov.f32	s19, s1
 801d116:	eeb0 9a41 	vmov.f32	s18, s2
 801d11a:	eeb0 8a62 	vmov.f32	s16, s5
 801d11e:	eef0 8a43 	vmov.f32	s17, s6
 801d122:	eef0 ba44 	vmov.f32	s23, s8
 801d126:	eeb0 ba64 	vmov.f32	s22, s9
 801d12a:	eef0 aa45 	vmov.f32	s21, s10
 801d12e:	9309      	str	r3, [sp, #36]	; 0x24
 801d130:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801d132:	2b00      	cmp	r3, #0
 801d134:	dc03      	bgt.n	801d13e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801d136:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801d138:	2b00      	cmp	r3, #0
 801d13a:	f340 8353 	ble.w	801d7e4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x718>
 801d13e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d140:	2b00      	cmp	r3, #0
 801d142:	f340 81a3 	ble.w	801d48c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c0>
 801d146:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801d148:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801d14a:	1412      	asrs	r2, r2, #16
 801d14c:	ea4f 4323 	mov.w	r3, r3, asr #16
 801d150:	d431      	bmi.n	801d1b6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 801d152:	1c51      	adds	r1, r2, #1
 801d154:	428c      	cmp	r4, r1
 801d156:	dd31      	ble.n	801d1bc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf0>
 801d158:	2b00      	cmp	r3, #0
 801d15a:	db2f      	blt.n	801d1bc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf0>
 801d15c:	9812      	ldr	r0, [sp, #72]	; 0x48
 801d15e:	1c59      	adds	r1, r3, #1
 801d160:	4288      	cmp	r0, r1
 801d162:	dd2b      	ble.n	801d1bc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf0>
 801d164:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d166:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801d168:	992d      	ldr	r1, [sp, #180]	; 0xb4
 801d16a:	3b01      	subs	r3, #1
 801d16c:	fb02 1203 	mla	r2, r2, r3, r1
 801d170:	1412      	asrs	r2, r2, #16
 801d172:	d42d      	bmi.n	801d1d0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 801d174:	3201      	adds	r2, #1
 801d176:	4294      	cmp	r4, r2
 801d178:	dd2a      	ble.n	801d1d0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 801d17a:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 801d17c:	992e      	ldr	r1, [sp, #184]	; 0xb8
 801d17e:	fb02 1303 	mla	r3, r2, r3, r1
 801d182:	141b      	asrs	r3, r3, #16
 801d184:	d424      	bmi.n	801d1d0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 801d186:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d188:	3301      	adds	r3, #1
 801d18a:	429a      	cmp	r2, r3
 801d18c:	dd20      	ble.n	801d1d0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 801d18e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d190:	f8bd b05c 	ldrh.w	fp, [sp, #92]	; 0x5c
 801d194:	f103 0e03 	add.w	lr, r3, #3
 801d198:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d19a:	9315      	str	r3, [sp, #84]	; 0x54
 801d19c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d19e:	2b00      	cmp	r3, #0
 801d1a0:	f300 81df 	bgt.w	801d562 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x496>
 801d1a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d1a6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801d1a8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d1ac:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d1b0:	441a      	add	r2, r3
 801d1b2:	920d      	str	r2, [sp, #52]	; 0x34
 801d1b4:	e16c      	b.n	801d490 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c4>
 801d1b6:	1c51      	adds	r1, r2, #1
 801d1b8:	f040 8159 	bne.w	801d46e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a2>
 801d1bc:	42a2      	cmp	r2, r4
 801d1be:	f280 8156 	bge.w	801d46e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a2>
 801d1c2:	1c5a      	adds	r2, r3, #1
 801d1c4:	f2c0 8153 	blt.w	801d46e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a2>
 801d1c8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d1ca:	4293      	cmp	r3, r2
 801d1cc:	f280 814f 	bge.w	801d46e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a2>
 801d1d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d1d2:	9316      	str	r3, [sp, #88]	; 0x58
 801d1d4:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 801d1d6:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
 801d1da:	9315      	str	r3, [sp, #84]	; 0x54
 801d1dc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801d1de:	2b00      	cmp	r3, #0
 801d1e0:	dde0      	ble.n	801d1a4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801d1e2:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801d1e4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801d1e6:	f3c2 3003 	ubfx	r0, r2, #12, #4
 801d1ea:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801d1ec:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801d1f0:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801d1f2:	1412      	asrs	r2, r2, #16
 801d1f4:	ea4f 4323 	mov.w	r3, r3, asr #16
 801d1f8:	f100 819a 	bmi.w	801d530 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x464>
 801d1fc:	1c55      	adds	r5, r2, #1
 801d1fe:	42ac      	cmp	r4, r5
 801d200:	f340 8198 	ble.w	801d534 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x468>
 801d204:	2b00      	cmp	r3, #0
 801d206:	f2c0 8195 	blt.w	801d534 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x468>
 801d20a:	9f12      	ldr	r7, [sp, #72]	; 0x48
 801d20c:	1c5d      	adds	r5, r3, #1
 801d20e:	42af      	cmp	r7, r5
 801d210:	f340 8190 	ble.w	801d534 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x468>
 801d214:	fb03 2304 	mla	r3, r3, r4, r2
 801d218:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d21a:	18d5      	adds	r5, r2, r3
 801d21c:	5cd3      	ldrb	r3, [r2, r3]
 801d21e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d220:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801d224:	0e1f      	lsrs	r7, r3, #24
 801d226:	2800      	cmp	r0, #0
 801d228:	f000 8171 	beq.w	801d50e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x442>
 801d22c:	f895 c001 	ldrb.w	ip, [r5, #1]
 801d230:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 801d234:	920e      	str	r2, [sp, #56]	; 0x38
 801d236:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 801d23a:	2900      	cmp	r1, #0
 801d23c:	f000 8172 	beq.w	801d524 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x458>
 801d240:	eb05 0c04 	add.w	ip, r5, r4
 801d244:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d246:	5d2d      	ldrb	r5, [r5, r4]
 801d248:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
 801d24c:	950b      	str	r5, [sp, #44]	; 0x2c
 801d24e:	ea4f 6915 	mov.w	r9, r5, lsr #24
 801d252:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801d256:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801d258:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801d25c:	920f      	str	r2, [sp, #60]	; 0x3c
 801d25e:	0e15      	lsrs	r5, r2, #24
 801d260:	b280      	uxth	r0, r0
 801d262:	b289      	uxth	r1, r1
 801d264:	fb00 fa01 	mul.w	sl, r0, r1
 801d268:	ebca 1101 	rsb	r1, sl, r1, lsl #4
 801d26c:	0100      	lsls	r0, r0, #4
 801d26e:	eba0 080a 	sub.w	r8, r0, sl
 801d272:	b289      	uxth	r1, r1
 801d274:	f5c0 7280 	rsb	r2, r0, #256	; 0x100
 801d278:	fa1f f888 	uxth.w	r8, r8
 801d27c:	1a52      	subs	r2, r2, r1
 801d27e:	b292      	uxth	r2, r2
 801d280:	fb08 f00e 	mul.w	r0, r8, lr
 801d284:	fb02 0007 	mla	r0, r2, r7, r0
 801d288:	fb01 0009 	mla	r0, r1, r9, r0
 801d28c:	fb0a 0005 	mla	r0, sl, r5, r0
 801d290:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801d294:	2800      	cmp	r0, #0
 801d296:	f000 80dd 	beq.w	801d454 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x388>
 801d29a:	2fff      	cmp	r7, #255	; 0xff
 801d29c:	d01a      	beq.n	801d2d4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x208>
 801d29e:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801d2a2:	fb07 fc0c 	mul.w	ip, r7, ip
 801d2a6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801d2aa:	435f      	muls	r7, r3
 801d2ac:	ea4f 231c 	mov.w	r3, ip, lsr #8
 801d2b0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801d2b4:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801d2b8:	f507 7b80 	add.w	fp, r7, #256	; 0x100
 801d2bc:	4463      	add	r3, ip
 801d2be:	eb0b 2b17 	add.w	fp, fp, r7, lsr #8
 801d2c2:	0a1b      	lsrs	r3, r3, #8
 801d2c4:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801d2c8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801d2cc:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 801d2d0:	ea43 030b 	orr.w	r3, r3, fp
 801d2d4:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801d2d8:	d01e      	beq.n	801d318 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24c>
 801d2da:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 801d2dc:	f007 1bff 	and.w	fp, r7, #16711935	; 0xff00ff
 801d2e0:	fb0e fb0b 	mul.w	fp, lr, fp
 801d2e4:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801d2e8:	fb0e fe07 	mul.w	lr, lr, r7
 801d2ec:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 801d2f0:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 801d2f4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801d2f8:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801d2fc:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 801d300:	44dc      	add	ip, fp
 801d302:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d306:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801d30a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801d30e:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801d312:	ea4c 070e 	orr.w	r7, ip, lr
 801d316:	970e      	str	r7, [sp, #56]	; 0x38
 801d318:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801d31c:	d01e      	beq.n	801d35c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x290>
 801d31e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801d320:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 801d324:	fb09 fe0e 	mul.w	lr, r9, lr
 801d328:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801d32c:	fb09 f907 	mul.w	r9, r9, r7
 801d330:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801d334:	f509 7780 	add.w	r7, r9, #256	; 0x100
 801d338:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801d33c:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801d340:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801d344:	44f4      	add	ip, lr
 801d346:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d34a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801d34e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801d352:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801d356:	ea4c 0709 	orr.w	r7, ip, r9
 801d35a:	970b      	str	r7, [sp, #44]	; 0x2c
 801d35c:	2dff      	cmp	r5, #255	; 0xff
 801d35e:	d01c      	beq.n	801d39a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ce>
 801d360:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801d362:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 801d366:	fb05 fe0e 	mul.w	lr, r5, lr
 801d36a:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801d36e:	437d      	muls	r5, r7
 801d370:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801d374:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801d378:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801d37c:	f505 7780 	add.w	r7, r5, #256	; 0x100
 801d380:	44f4      	add	ip, lr
 801d382:	eb07 2515 	add.w	r5, r7, r5, lsr #8
 801d386:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d38a:	0a2d      	lsrs	r5, r5, #8
 801d38c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801d390:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801d394:	ea4c 0505 	orr.w	r5, ip, r5
 801d398:	950f      	str	r5, [sp, #60]	; 0x3c
 801d39a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801d39c:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801d3a0:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 801d3a4:	fb08 f505 	mul.w	r5, r8, r5
 801d3a8:	fb02 5507 	mla	r5, r2, r7, r5
 801d3ac:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801d3ae:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801d3b2:	fb01 5507 	mla	r5, r1, r7, r5
 801d3b6:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801d3b8:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801d3bc:	fb0a 5507 	mla	r5, sl, r7, r5
 801d3c0:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 801d3c2:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801d3c6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801d3ca:	fb08 f807 	mul.w	r8, r8, r7
 801d3ce:	fb02 8303 	mla	r3, r2, r3, r8
 801d3d2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801d3d4:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801d3d8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801d3da:	fb01 330c 	mla	r3, r1, ip, r3
 801d3de:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 801d3e2:	fb0a 3a01 	mla	sl, sl, r1, r3
 801d3e6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d3e8:	9915      	ldr	r1, [sp, #84]	; 0x54
 801d3ea:	4343      	muls	r3, r0
 801d3ec:	0a2d      	lsrs	r5, r5, #8
 801d3ee:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d3f2:	1c58      	adds	r0, r3, #1
 801d3f4:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801d3f8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801d3fc:	ea45 050a 	orr.w	r5, r5, sl
 801d400:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801d404:	b2ea      	uxtb	r2, r5
 801d406:	7833      	ldrb	r3, [r6, #0]
 801d408:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801d40c:	b2c0      	uxtb	r0, r0
 801d40e:	fb12 f201 	smulbb	r2, r2, r1
 801d412:	fb03 2300 	mla	r3, r3, r0, r2
 801d416:	b29b      	uxth	r3, r3
 801d418:	1c5a      	adds	r2, r3, #1
 801d41a:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801d41e:	7872      	ldrb	r2, [r6, #1]
 801d420:	121b      	asrs	r3, r3, #8
 801d422:	fb12 f200 	smulbb	r2, r2, r0
 801d426:	7033      	strb	r3, [r6, #0]
 801d428:	f3c5 2307 	ubfx	r3, r5, #8, #8
 801d42c:	fb03 2301 	mla	r3, r3, r1, r2
 801d430:	b29b      	uxth	r3, r3
 801d432:	1c5a      	adds	r2, r3, #1
 801d434:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801d438:	121b      	asrs	r3, r3, #8
 801d43a:	7073      	strb	r3, [r6, #1]
 801d43c:	78b3      	ldrb	r3, [r6, #2]
 801d43e:	0c2d      	lsrs	r5, r5, #16
 801d440:	fb13 f000 	smulbb	r0, r3, r0
 801d444:	fb05 0501 	mla	r5, r5, r1, r0
 801d448:	b2ad      	uxth	r5, r5
 801d44a:	1c6b      	adds	r3, r5, #1
 801d44c:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801d450:	122d      	asrs	r5, r5, #8
 801d452:	70b5      	strb	r5, [r6, #2]
 801d454:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801d456:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801d458:	4413      	add	r3, r2
 801d45a:	932d      	str	r3, [sp, #180]	; 0xb4
 801d45c:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 801d45e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801d460:	4413      	add	r3, r2
 801d462:	932e      	str	r3, [sp, #184]	; 0xb8
 801d464:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801d466:	3b01      	subs	r3, #1
 801d468:	3603      	adds	r6, #3
 801d46a:	9316      	str	r3, [sp, #88]	; 0x58
 801d46c:	e6b6      	b.n	801d1dc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x110>
 801d46e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801d470:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801d472:	4413      	add	r3, r2
 801d474:	932d      	str	r3, [sp, #180]	; 0xb4
 801d476:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 801d478:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801d47a:	4413      	add	r3, r2
 801d47c:	932e      	str	r3, [sp, #184]	; 0xb8
 801d47e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d480:	3b01      	subs	r3, #1
 801d482:	930a      	str	r3, [sp, #40]	; 0x28
 801d484:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d486:	3303      	adds	r3, #3
 801d488:	930d      	str	r3, [sp, #52]	; 0x34
 801d48a:	e658      	b.n	801d13e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801d48c:	f47f ae6a 	bne.w	801d164 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 801d490:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801d492:	2b00      	cmp	r3, #0
 801d494:	f340 81a6 	ble.w	801d7e4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x718>
 801d498:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801d49c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801d4a0:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801d4a4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801d4a6:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801d4aa:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801d4ae:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801d4b2:	eef0 6a48 	vmov.f32	s13, s16
 801d4b6:	ee69 7a27 	vmul.f32	s15, s18, s15
 801d4ba:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d4be:	ee37 8a48 	vsub.f32	s16, s14, s16
 801d4c2:	edcd 6a2d 	vstr	s13, [sp, #180]	; 0xb4
 801d4c6:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801d4ca:	eef0 6a68 	vmov.f32	s13, s17
 801d4ce:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801d4d2:	ee18 2a10 	vmov	r2, s16
 801d4d6:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801d4da:	fb92 f3f3 	sdiv	r3, r2, r3
 801d4de:	ee18 2a90 	vmov	r2, s17
 801d4e2:	932f      	str	r3, [sp, #188]	; 0xbc
 801d4e4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801d4e6:	fb92 f3f3 	sdiv	r3, r2, r3
 801d4ea:	9330      	str	r3, [sp, #192]	; 0xc0
 801d4ec:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801d4ee:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801d4f0:	3b01      	subs	r3, #1
 801d4f2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d4f6:	9314      	str	r3, [sp, #80]	; 0x50
 801d4f8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801d4fa:	edcd 6a2e 	vstr	s13, [sp, #184]	; 0xb8
 801d4fe:	bf08      	it	eq
 801d500:	4613      	moveq	r3, r2
 801d502:	930a      	str	r3, [sp, #40]	; 0x28
 801d504:	eef0 8a67 	vmov.f32	s17, s15
 801d508:	eeb0 8a47 	vmov.f32	s16, s14
 801d50c:	e610      	b.n	801d130 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801d50e:	b161      	cbz	r1, 801d52a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x45e>
 801d510:	5d2a      	ldrb	r2, [r5, r4]
 801d512:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801d514:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801d518:	920b      	str	r2, [sp, #44]	; 0x2c
 801d51a:	ea4f 6912 	mov.w	r9, r2, lsr #24
 801d51e:	25ff      	movs	r5, #255	; 0xff
 801d520:	46ae      	mov	lr, r5
 801d522:	e69d      	b.n	801d260 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x194>
 801d524:	25ff      	movs	r5, #255	; 0xff
 801d526:	46a9      	mov	r9, r5
 801d528:	e69a      	b.n	801d260 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x194>
 801d52a:	25ff      	movs	r5, #255	; 0xff
 801d52c:	46a9      	mov	r9, r5
 801d52e:	e7f7      	b.n	801d520 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x454>
 801d530:	1c57      	adds	r7, r2, #1
 801d532:	d18f      	bne.n	801d454 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x388>
 801d534:	4294      	cmp	r4, r2
 801d536:	dd8d      	ble.n	801d454 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x388>
 801d538:	1c5d      	adds	r5, r3, #1
 801d53a:	db8b      	blt.n	801d454 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x388>
 801d53c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801d53e:	429d      	cmp	r5, r3
 801d540:	dd88      	ble.n	801d454 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x388>
 801d542:	e9cd 3003 	strd	r3, r0, [sp, #12]
 801d546:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 801d548:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801d54a:	9202      	str	r2, [sp, #8]
 801d54c:	e9cd 1505 	strd	r1, r5, [sp, #20]
 801d550:	e9cd 4300 	strd	r4, r3, [sp]
 801d554:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d556:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d558:	9819      	ldr	r0, [sp, #100]	; 0x64
 801d55a:	4631      	mov	r1, r6
 801d55c:	f7ff fc62 	bl	801ce24 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 801d560:	e778      	b.n	801d454 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x388>
 801d562:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801d564:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801d566:	f3c3 3103 	ubfx	r1, r3, #12, #4
 801d56a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801d56c:	1412      	asrs	r2, r2, #16
 801d56e:	f3c3 3003 	ubfx	r0, r3, #12, #4
 801d572:	141b      	asrs	r3, r3, #16
 801d574:	fb04 2303 	mla	r3, r4, r3, r2
 801d578:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d57a:	18d5      	adds	r5, r2, r3
 801d57c:	5cd3      	ldrb	r3, [r2, r3]
 801d57e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d580:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801d584:	0e1e      	lsrs	r6, r3, #24
 801d586:	2900      	cmp	r1, #0
 801d588:	f000 811b 	beq.w	801d7c2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6f6>
 801d58c:	786a      	ldrb	r2, [r5, #1]
 801d58e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801d590:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 801d594:	9210      	str	r2, [sp, #64]	; 0x40
 801d596:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 801d59a:	2800      	cmp	r0, #0
 801d59c:	f000 811c 	beq.w	801d7d8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70c>
 801d5a0:	192a      	adds	r2, r5, r4
 801d5a2:	5d2d      	ldrb	r5, [r5, r4]
 801d5a4:	7852      	ldrb	r2, [r2, #1]
 801d5a6:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 801d5aa:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 801d5ae:	950c      	str	r5, [sp, #48]	; 0x30
 801d5b0:	ea4f 6915 	mov.w	r9, r5, lsr #24
 801d5b4:	9211      	str	r2, [sp, #68]	; 0x44
 801d5b6:	0e15      	lsrs	r5, r2, #24
 801d5b8:	b289      	uxth	r1, r1
 801d5ba:	b280      	uxth	r0, r0
 801d5bc:	fb01 fa00 	mul.w	sl, r1, r0
 801d5c0:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 801d5c4:	0109      	lsls	r1, r1, #4
 801d5c6:	eba1 080a 	sub.w	r8, r1, sl
 801d5ca:	b280      	uxth	r0, r0
 801d5cc:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 801d5d0:	fa1f f888 	uxth.w	r8, r8
 801d5d4:	1a12      	subs	r2, r2, r0
 801d5d6:	b292      	uxth	r2, r2
 801d5d8:	fb08 f10c 	mul.w	r1, r8, ip
 801d5dc:	fb02 1106 	mla	r1, r2, r6, r1
 801d5e0:	fb00 1109 	mla	r1, r0, r9, r1
 801d5e4:	fb0a 1105 	mla	r1, sl, r5, r1
 801d5e8:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801d5ec:	2900      	cmp	r1, #0
 801d5ee:	f000 80da 	beq.w	801d7a6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6da>
 801d5f2:	2eff      	cmp	r6, #255	; 0xff
 801d5f4:	d016      	beq.n	801d624 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x558>
 801d5f6:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 801d5fa:	4377      	muls	r7, r6
 801d5fc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801d600:	435e      	muls	r6, r3
 801d602:	0a3b      	lsrs	r3, r7, #8
 801d604:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801d608:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801d60c:	443b      	add	r3, r7
 801d60e:	f506 7780 	add.w	r7, r6, #256	; 0x100
 801d612:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 801d616:	0a1b      	lsrs	r3, r3, #8
 801d618:	0a3f      	lsrs	r7, r7, #8
 801d61a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801d61e:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801d622:	433b      	orrs	r3, r7
 801d624:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801d628:	d01d      	beq.n	801d666 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x59a>
 801d62a:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801d62c:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801d62e:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801d632:	fb0c f606 	mul.w	r6, ip, r6
 801d636:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801d63a:	fb0c fc07 	mul.w	ip, ip, r7
 801d63e:	0a37      	lsrs	r7, r6, #8
 801d640:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801d644:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 801d648:	4437      	add	r7, r6
 801d64a:	f50c 7680 	add.w	r6, ip, #256	; 0x100
 801d64e:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 801d652:	0a3f      	lsrs	r7, r7, #8
 801d654:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d658:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801d65c:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801d660:	ea47 060c 	orr.w	r6, r7, ip
 801d664:	9610      	str	r6, [sp, #64]	; 0x40
 801d666:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801d66a:	d01d      	beq.n	801d6a8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5dc>
 801d66c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801d66e:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 801d672:	fb09 fc0c 	mul.w	ip, r9, ip
 801d676:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801d67a:	fb09 f906 	mul.w	r9, r9, r6
 801d67e:	ea4f 271c 	mov.w	r7, ip, lsr #8
 801d682:	f509 7680 	add.w	r6, r9, #256	; 0x100
 801d686:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801d68a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801d68e:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 801d692:	4467      	add	r7, ip
 801d694:	0a3f      	lsrs	r7, r7, #8
 801d696:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801d69a:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801d69e:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801d6a2:	ea47 0609 	orr.w	r6, r7, r9
 801d6a6:	960c      	str	r6, [sp, #48]	; 0x30
 801d6a8:	2dff      	cmp	r5, #255	; 0xff
 801d6aa:	d01a      	beq.n	801d6e2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x616>
 801d6ac:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801d6ae:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 801d6b2:	fb05 fc0c 	mul.w	ip, r5, ip
 801d6b6:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801d6ba:	4375      	muls	r5, r6
 801d6bc:	ea4f 271c 	mov.w	r7, ip, lsr #8
 801d6c0:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801d6c4:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801d6c8:	f505 7680 	add.w	r6, r5, #256	; 0x100
 801d6cc:	4467      	add	r7, ip
 801d6ce:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 801d6d2:	0a3f      	lsrs	r7, r7, #8
 801d6d4:	0a2d      	lsrs	r5, r5, #8
 801d6d6:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801d6da:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801d6de:	433d      	orrs	r5, r7
 801d6e0:	9511      	str	r5, [sp, #68]	; 0x44
 801d6e2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 801d6e4:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801d6e8:	f003 16ff 	and.w	r6, r3, #16711935	; 0xff00ff
 801d6ec:	fb08 f505 	mul.w	r5, r8, r5
 801d6f0:	fb02 5506 	mla	r5, r2, r6, r5
 801d6f4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801d6f6:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801d6fa:	fb00 5506 	mla	r5, r0, r6, r5
 801d6fe:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801d700:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801d704:	fb0a 5506 	mla	r5, sl, r6, r5
 801d708:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801d70a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801d70e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801d712:	fb08 f806 	mul.w	r8, r8, r6
 801d716:	fb02 8303 	mla	r3, r2, r3, r8
 801d71a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801d71c:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 801d720:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801d722:	fb00 3307 	mla	r3, r0, r7, r3
 801d726:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801d72a:	fb0a 3c0c 	mla	ip, sl, ip, r3
 801d72e:	0a2d      	lsrs	r5, r5, #8
 801d730:	fb01 f30b 	mul.w	r3, r1, fp
 801d734:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d738:	1c59      	adds	r1, r3, #1
 801d73a:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801d73e:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801d742:	ea45 050c 	orr.w	r5, r5, ip
 801d746:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801d74a:	b2ea      	uxtb	r2, r5
 801d74c:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801d750:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801d754:	b2c9      	uxtb	r1, r1
 801d756:	fb12 f20b 	smulbb	r2, r2, fp
 801d75a:	fb03 2301 	mla	r3, r3, r1, r2
 801d75e:	b29b      	uxth	r3, r3
 801d760:	1c5a      	adds	r2, r3, #1
 801d762:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801d766:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 801d76a:	121b      	asrs	r3, r3, #8
 801d76c:	fb12 f201 	smulbb	r2, r2, r1
 801d770:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801d774:	f3c5 2307 	ubfx	r3, r5, #8, #8
 801d778:	fb03 230b 	mla	r3, r3, fp, r2
 801d77c:	b29b      	uxth	r3, r3
 801d77e:	1c5a      	adds	r2, r3, #1
 801d780:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801d784:	121b      	asrs	r3, r3, #8
 801d786:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801d78a:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 801d78e:	0c2d      	lsrs	r5, r5, #16
 801d790:	fb13 f101 	smulbb	r1, r3, r1
 801d794:	fb05 150b 	mla	r5, r5, fp, r1
 801d798:	b2ad      	uxth	r5, r5
 801d79a:	1c69      	adds	r1, r5, #1
 801d79c:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 801d7a0:	122d      	asrs	r5, r5, #8
 801d7a2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801d7a6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801d7a8:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801d7aa:	4413      	add	r3, r2
 801d7ac:	932d      	str	r3, [sp, #180]	; 0xb4
 801d7ae:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 801d7b0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801d7b2:	4413      	add	r3, r2
 801d7b4:	932e      	str	r3, [sp, #184]	; 0xb8
 801d7b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d7b8:	3b01      	subs	r3, #1
 801d7ba:	f10e 0e03 	add.w	lr, lr, #3
 801d7be:	9315      	str	r3, [sp, #84]	; 0x54
 801d7c0:	e4ec      	b.n	801d19c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd0>
 801d7c2:	b160      	cbz	r0, 801d7de <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x712>
 801d7c4:	5d2a      	ldrb	r2, [r5, r4]
 801d7c6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801d7c8:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801d7cc:	920c      	str	r2, [sp, #48]	; 0x30
 801d7ce:	ea4f 6912 	mov.w	r9, r2, lsr #24
 801d7d2:	25ff      	movs	r5, #255	; 0xff
 801d7d4:	46ac      	mov	ip, r5
 801d7d6:	e6ef      	b.n	801d5b8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ec>
 801d7d8:	25ff      	movs	r5, #255	; 0xff
 801d7da:	46a9      	mov	r9, r5
 801d7dc:	e6ec      	b.n	801d5b8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ec>
 801d7de:	25ff      	movs	r5, #255	; 0xff
 801d7e0:	46a9      	mov	r9, r5
 801d7e2:	e7f7      	b.n	801d7d4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x708>
 801d7e4:	b01b      	add	sp, #108	; 0x6c
 801d7e6:	ecbd 8b08 	vpop	{d8-d11}
 801d7ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801d7f0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 801d7f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d7f4:	b085      	sub	sp, #20
 801d7f6:	e9dd 5410 	ldrd	r5, r4, [sp, #64]	; 0x40
 801d7fa:	7888      	ldrb	r0, [r1, #2]
 801d7fc:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 801d800:	9000      	str	r0, [sp, #0]
 801d802:	7848      	ldrb	r0, [r1, #1]
 801d804:	9001      	str	r0, [sp, #4]
 801d806:	fb04 560c 	mla	r6, r4, ip, r5
 801d80a:	7808      	ldrb	r0, [r1, #0]
 801d80c:	9002      	str	r0, [sp, #8]
 801d80e:	4692      	mov	sl, r2
 801d810:	eb02 0e06 	add.w	lr, r2, r6
 801d814:	9a00      	ldr	r2, [sp, #0]
 801d816:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 801d81a:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 801d81e:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 801d822:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 801d826:	9a01      	ldr	r2, [sp, #4]
 801d828:	2c00      	cmp	r4, #0
 801d82a:	4698      	mov	r8, r3
 801d82c:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 801d830:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 801d834:	db3e      	blt.n	801d8b4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc4>
 801d836:	45a1      	cmp	r9, r4
 801d838:	dd3c      	ble.n	801d8b4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc4>
 801d83a:	2d00      	cmp	r5, #0
 801d83c:	db38      	blt.n	801d8b0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc0>
 801d83e:	45ac      	cmp	ip, r5
 801d840:	dd36      	ble.n	801d8b0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc0>
 801d842:	f81a 2006 	ldrb.w	r2, [sl, r6]
 801d846:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 801d84a:	1c6e      	adds	r6, r5, #1
 801d84c:	d435      	bmi.n	801d8ba <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xca>
 801d84e:	45b4      	cmp	ip, r6
 801d850:	dd33      	ble.n	801d8ba <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xca>
 801d852:	b393      	cbz	r3, 801d8ba <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xca>
 801d854:	f89e 6001 	ldrb.w	r6, [lr, #1]
 801d858:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
 801d85c:	3401      	adds	r4, #1
 801d85e:	d430      	bmi.n	801d8c2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd2>
 801d860:	45a1      	cmp	r9, r4
 801d862:	dd2e      	ble.n	801d8c2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd2>
 801d864:	b36f      	cbz	r7, 801d8c2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd2>
 801d866:	2d00      	cmp	r5, #0
 801d868:	db29      	blt.n	801d8be <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xce>
 801d86a:	45ac      	cmp	ip, r5
 801d86c:	dd27      	ble.n	801d8be <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xce>
 801d86e:	f81e 400c 	ldrb.w	r4, [lr, ip]
 801d872:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 801d876:	3501      	adds	r5, #1
 801d878:	d407      	bmi.n	801d88a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 801d87a:	45ac      	cmp	ip, r5
 801d87c:	dd05      	ble.n	801d88a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 801d87e:	b123      	cbz	r3, 801d88a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 801d880:	44f4      	add	ip, lr
 801d882:	f89c 0001 	ldrb.w	r0, [ip, #1]
 801d886:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 801d88a:	2b0f      	cmp	r3, #15
 801d88c:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 801d890:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801d894:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801d898:	ea4f 6810 	mov.w	r8, r0, lsr #24
 801d89c:	d801      	bhi.n	801d8a2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xb2>
 801d89e:	2f0f      	cmp	r7, #15
 801d8a0:	d911      	bls.n	801d8c6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd6>
 801d8a2:	4b76      	ldr	r3, [pc, #472]	; (801da7c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x28c>)
 801d8a4:	4a76      	ldr	r2, [pc, #472]	; (801da80 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x290>)
 801d8a6:	4877      	ldr	r0, [pc, #476]	; (801da84 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x294>)
 801d8a8:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 801d8ac:	f004 ffa0 	bl	80227f0 <__assert_func>
 801d8b0:	4602      	mov	r2, r0
 801d8b2:	e7ca      	b.n	801d84a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x5a>
 801d8b4:	4606      	mov	r6, r0
 801d8b6:	4602      	mov	r2, r0
 801d8b8:	e7d0      	b.n	801d85c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x6c>
 801d8ba:	4606      	mov	r6, r0
 801d8bc:	e7ce      	b.n	801d85c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x6c>
 801d8be:	4604      	mov	r4, r0
 801d8c0:	e7d9      	b.n	801d876 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x86>
 801d8c2:	4604      	mov	r4, r0
 801d8c4:	e7e1      	b.n	801d88a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 801d8c6:	b29b      	uxth	r3, r3
 801d8c8:	b2bf      	uxth	r7, r7
 801d8ca:	fb07 fe03 	mul.w	lr, r7, r3
 801d8ce:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 801d8d2:	011b      	lsls	r3, r3, #4
 801d8d4:	eba3 0c0e 	sub.w	ip, r3, lr
 801d8d8:	b2bf      	uxth	r7, r7
 801d8da:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 801d8de:	fa1f fc8c 	uxth.w	ip, ip
 801d8e2:	1bed      	subs	r5, r5, r7
 801d8e4:	b2ad      	uxth	r5, r5
 801d8e6:	fb0c f30a 	mul.w	r3, ip, sl
 801d8ea:	fb05 330b 	mla	r3, r5, fp, r3
 801d8ee:	fb07 3309 	mla	r3, r7, r9, r3
 801d8f2:	fb0e 3308 	mla	r3, lr, r8, r3
 801d8f6:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801d8fa:	9303      	str	r3, [sp, #12]
 801d8fc:	2b00      	cmp	r3, #0
 801d8fe:	f000 80b9 	beq.w	801da74 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x284>
 801d902:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801d906:	d018      	beq.n	801d93a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x14a>
 801d908:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 801d90c:	fb0b f303 	mul.w	r3, fp, r3
 801d910:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801d914:	fb0b fb02 	mul.w	fp, fp, r2
 801d918:	0a1a      	lsrs	r2, r3, #8
 801d91a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801d91e:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 801d922:	441a      	add	r2, r3
 801d924:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 801d928:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 801d92c:	0a12      	lsrs	r2, r2, #8
 801d92e:	0a1b      	lsrs	r3, r3, #8
 801d930:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801d934:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801d938:	431a      	orrs	r2, r3
 801d93a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801d93e:	d019      	beq.n	801d974 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x184>
 801d940:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 801d944:	fb0a fb0b 	mul.w	fp, sl, fp
 801d948:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801d94c:	fb0a fa06 	mul.w	sl, sl, r6
 801d950:	ea4f 261b 	mov.w	r6, fp, lsr #8
 801d954:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801d958:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801d95c:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 801d960:	445e      	add	r6, fp
 801d962:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 801d966:	0a36      	lsrs	r6, r6, #8
 801d968:	0a1b      	lsrs	r3, r3, #8
 801d96a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801d96e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801d972:	431e      	orrs	r6, r3
 801d974:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801d978:	d019      	beq.n	801d9ae <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1be>
 801d97a:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 801d97e:	fb09 fa0a 	mul.w	sl, r9, sl
 801d982:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801d986:	fb09 f904 	mul.w	r9, r9, r4
 801d98a:	ea4f 241a 	mov.w	r4, sl, lsr #8
 801d98e:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801d992:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801d996:	f509 7380 	add.w	r3, r9, #256	; 0x100
 801d99a:	4454      	add	r4, sl
 801d99c:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 801d9a0:	0a24      	lsrs	r4, r4, #8
 801d9a2:	0a1b      	lsrs	r3, r3, #8
 801d9a4:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801d9a8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801d9ac:	431c      	orrs	r4, r3
 801d9ae:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801d9b2:	d019      	beq.n	801d9e8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1f8>
 801d9b4:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 801d9b8:	fb08 f909 	mul.w	r9, r8, r9
 801d9bc:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801d9c0:	fb08 f800 	mul.w	r8, r8, r0
 801d9c4:	ea4f 2019 	mov.w	r0, r9, lsr #8
 801d9c8:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801d9cc:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 801d9d0:	f508 7380 	add.w	r3, r8, #256	; 0x100
 801d9d4:	4448      	add	r0, r9
 801d9d6:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 801d9da:	0a00      	lsrs	r0, r0, #8
 801d9dc:	0a1b      	lsrs	r3, r3, #8
 801d9de:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801d9e2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801d9e6:	4318      	orrs	r0, r3
 801d9e8:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 801d9ec:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 801d9f0:	fb0c f808 	mul.w	r8, ip, r8
 801d9f4:	fb05 8803 	mla	r8, r5, r3, r8
 801d9f8:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 801d9fc:	fb07 8803 	mla	r8, r7, r3, r8
 801da00:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 801da04:	fb0e 8303 	mla	r3, lr, r3, r8
 801da08:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801da0c:	0a1b      	lsrs	r3, r3, #8
 801da0e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801da12:	fb0c f606 	mul.w	r6, ip, r6
 801da16:	f003 18ff 	and.w	r8, r3, #16711935	; 0xff00ff
 801da1a:	fb05 6202 	mla	r2, r5, r2, r6
 801da1e:	f404 437f 	and.w	r3, r4, #65280	; 0xff00
 801da22:	fb07 2703 	mla	r7, r7, r3, r2
 801da26:	9a03      	ldr	r2, [sp, #12]
 801da28:	9c02      	ldr	r4, [sp, #8]
 801da2a:	f400 437f 	and.w	r3, r0, #65280	; 0xff00
 801da2e:	43d2      	mvns	r2, r2
 801da30:	b2d2      	uxtb	r2, r2
 801da32:	fb0e 7303 	mla	r3, lr, r3, r7
 801da36:	4354      	muls	r4, r2
 801da38:	0a1b      	lsrs	r3, r3, #8
 801da3a:	1c60      	adds	r0, r4, #1
 801da3c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801da40:	ea48 0303 	orr.w	r3, r8, r3
 801da44:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 801da48:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801da4c:	7008      	strb	r0, [r1, #0]
 801da4e:	9801      	ldr	r0, [sp, #4]
 801da50:	4350      	muls	r0, r2
 801da52:	1c44      	adds	r4, r0, #1
 801da54:	eb04 2410 	add.w	r4, r4, r0, lsr #8
 801da58:	0a18      	lsrs	r0, r3, #8
 801da5a:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 801da5e:	7048      	strb	r0, [r1, #1]
 801da60:	9800      	ldr	r0, [sp, #0]
 801da62:	4350      	muls	r0, r2
 801da64:	4602      	mov	r2, r0
 801da66:	3001      	adds	r0, #1
 801da68:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801da6c:	0c1b      	lsrs	r3, r3, #16
 801da6e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801da72:	708b      	strb	r3, [r1, #2]
 801da74:	b005      	add	sp, #20
 801da76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801da7a:	bf00      	nop
 801da7c:	08027814 	.word	0x08027814
 801da80:	08027d0a 	.word	0x08027d0a
 801da84:	080278dd 	.word	0x080278dd

0801da88 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801da88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801da8c:	ed2d 8b08 	vpush	{d8-d11}
 801da90:	b097      	sub	sp, #92	; 0x5c
 801da92:	eeb0 aa40 	vmov.f32	s20, s0
 801da96:	9d2d      	ldr	r5, [sp, #180]	; 0xb4
 801da98:	9308      	str	r3, [sp, #32]
 801da9a:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 801da9e:	9112      	str	r1, [sp, #72]	; 0x48
 801daa0:	9310      	str	r3, [sp, #64]	; 0x40
 801daa2:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 801daa6:	9015      	str	r0, [sp, #84]	; 0x54
 801daa8:	6868      	ldr	r0, [r5, #4]
 801daaa:	9214      	str	r2, [sp, #80]	; 0x50
 801daac:	fb00 1303 	mla	r3, r0, r3, r1
 801dab0:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 801dab2:	6829      	ldr	r1, [r5, #0]
 801dab4:	6855      	ldr	r5, [r2, #4]
 801dab6:	f9bd 40c0 	ldrsh.w	r4, [sp, #192]	; 0xc0
 801daba:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801dabe:	18cb      	adds	r3, r1, r3
 801dac0:	930b      	str	r3, [sp, #44]	; 0x2c
 801dac2:	6813      	ldr	r3, [r2, #0]
 801dac4:	9311      	str	r3, [sp, #68]	; 0x44
 801dac6:	eef0 9a60 	vmov.f32	s19, s1
 801daca:	eeb0 9a41 	vmov.f32	s18, s2
 801dace:	eeb0 8a62 	vmov.f32	s16, s5
 801dad2:	eef0 8a43 	vmov.f32	s17, s6
 801dad6:	eef0 ba44 	vmov.f32	s23, s8
 801dada:	eeb0 ba64 	vmov.f32	s22, s9
 801dade:	eef0 aa45 	vmov.f32	s21, s10
 801dae2:	3504      	adds	r5, #4
 801dae4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801dae6:	2b00      	cmp	r3, #0
 801dae8:	dc03      	bgt.n	801daf2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801daea:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801daec:	2b00      	cmp	r3, #0
 801daee:	f340 8334 	ble.w	801e15a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6d2>
 801daf2:	9b08      	ldr	r3, [sp, #32]
 801daf4:	2b00      	cmp	r3, #0
 801daf6:	f340 8191 	ble.w	801de1c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x394>
 801dafa:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801dafc:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801dafe:	1412      	asrs	r2, r2, #16
 801db00:	ea4f 4323 	mov.w	r3, r3, asr #16
 801db04:	d42f      	bmi.n	801db66 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 801db06:	1c51      	adds	r1, r2, #1
 801db08:	428c      	cmp	r4, r1
 801db0a:	dd2f      	ble.n	801db6c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 801db0c:	2b00      	cmp	r3, #0
 801db0e:	db2d      	blt.n	801db6c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 801db10:	9810      	ldr	r0, [sp, #64]	; 0x40
 801db12:	1c59      	adds	r1, r3, #1
 801db14:	4288      	cmp	r0, r1
 801db16:	dd29      	ble.n	801db6c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 801db18:	9b08      	ldr	r3, [sp, #32]
 801db1a:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801db1c:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801db1e:	3b01      	subs	r3, #1
 801db20:	fb02 1203 	mla	r2, r2, r3, r1
 801db24:	1412      	asrs	r2, r2, #16
 801db26:	d42b      	bmi.n	801db80 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801db28:	3201      	adds	r2, #1
 801db2a:	4294      	cmp	r4, r2
 801db2c:	dd28      	ble.n	801db80 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801db2e:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801db30:	992a      	ldr	r1, [sp, #168]	; 0xa8
 801db32:	fb02 1303 	mla	r3, r2, r3, r1
 801db36:	141b      	asrs	r3, r3, #16
 801db38:	d422      	bmi.n	801db80 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801db3a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801db3c:	3301      	adds	r3, #1
 801db3e:	429a      	cmp	r2, r3
 801db40:	dd1e      	ble.n	801db80 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801db42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801db44:	f103 0803 	add.w	r8, r3, #3
 801db48:	9b08      	ldr	r3, [sp, #32]
 801db4a:	9307      	str	r3, [sp, #28]
 801db4c:	9b07      	ldr	r3, [sp, #28]
 801db4e:	2b00      	cmp	r3, #0
 801db50:	f300 81cb 	bgt.w	801deea <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x462>
 801db54:	9b08      	ldr	r3, [sp, #32]
 801db56:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801db58:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801db5c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801db60:	441a      	add	r2, r3
 801db62:	920b      	str	r2, [sp, #44]	; 0x2c
 801db64:	e15c      	b.n	801de20 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x398>
 801db66:	1c51      	adds	r1, r2, #1
 801db68:	f040 8149 	bne.w	801ddfe <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x376>
 801db6c:	42a2      	cmp	r2, r4
 801db6e:	f280 8146 	bge.w	801ddfe <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x376>
 801db72:	1c5a      	adds	r2, r3, #1
 801db74:	f2c0 8143 	blt.w	801ddfe <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x376>
 801db78:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801db7a:	4293      	cmp	r3, r2
 801db7c:	f280 813f 	bge.w	801ddfe <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x376>
 801db80:	9b08      	ldr	r3, [sp, #32]
 801db82:	9313      	str	r3, [sp, #76]	; 0x4c
 801db84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801db86:	9307      	str	r3, [sp, #28]
 801db88:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801db8a:	2b00      	cmp	r3, #0
 801db8c:	dde2      	ble.n	801db54 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xcc>
 801db8e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801db90:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801db92:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801db96:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801db98:	f3c2 3003 	ubfx	r0, r2, #12, #4
 801db9c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801db9e:	1412      	asrs	r2, r2, #16
 801dba0:	ea4f 4323 	mov.w	r3, r3, asr #16
 801dba4:	f100 818b 	bmi.w	801debe <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x436>
 801dba8:	1c56      	adds	r6, r2, #1
 801dbaa:	42b4      	cmp	r4, r6
 801dbac:	f340 8189 	ble.w	801dec2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x43a>
 801dbb0:	2b00      	cmp	r3, #0
 801dbb2:	f2c0 8186 	blt.w	801dec2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x43a>
 801dbb6:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801dbb8:	1c5e      	adds	r6, r3, #1
 801dbba:	42b7      	cmp	r7, r6
 801dbbc:	f340 8181 	ble.w	801dec2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x43a>
 801dbc0:	fb03 2304 	mla	r3, r3, r4, r2
 801dbc4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801dbc6:	18d6      	adds	r6, r2, r3
 801dbc8:	5cd3      	ldrb	r3, [r2, r3]
 801dbca:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 801dbce:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801dbd2:	2900      	cmp	r1, #0
 801dbd4:	f000 8163 	beq.w	801de9e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x416>
 801dbd8:	7872      	ldrb	r2, [r6, #1]
 801dbda:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801dbde:	920c      	str	r2, [sp, #48]	; 0x30
 801dbe0:	ea4f 6812 	mov.w	r8, r2, lsr #24
 801dbe4:	2800      	cmp	r0, #0
 801dbe6:	f000 8164 	beq.w	801deb2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42a>
 801dbea:	1932      	adds	r2, r6, r4
 801dbec:	5d36      	ldrb	r6, [r6, r4]
 801dbee:	7852      	ldrb	r2, [r2, #1]
 801dbf0:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 801dbf4:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801dbf8:	9609      	str	r6, [sp, #36]	; 0x24
 801dbfa:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801dbfe:	920d      	str	r2, [sp, #52]	; 0x34
 801dc00:	0e16      	lsrs	r6, r2, #24
 801dc02:	b289      	uxth	r1, r1
 801dc04:	b280      	uxth	r0, r0
 801dc06:	fb01 fb00 	mul.w	fp, r1, r0
 801dc0a:	ebcb 1000 	rsb	r0, fp, r0, lsl #4
 801dc0e:	0109      	lsls	r1, r1, #4
 801dc10:	eba1 090b 	sub.w	r9, r1, fp
 801dc14:	b280      	uxth	r0, r0
 801dc16:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 801dc1a:	fa1f f989 	uxth.w	r9, r9
 801dc1e:	1a12      	subs	r2, r2, r0
 801dc20:	b292      	uxth	r2, r2
 801dc22:	fb09 f108 	mul.w	r1, r9, r8
 801dc26:	fb02 110c 	mla	r1, r2, ip, r1
 801dc2a:	fb00 110a 	mla	r1, r0, sl, r1
 801dc2e:	fb0b 1106 	mla	r1, fp, r6, r1
 801dc32:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801dc36:	2900      	cmp	r1, #0
 801dc38:	f000 80d2 	beq.w	801dde0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x358>
 801dc3c:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801dc40:	d01b      	beq.n	801dc7a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f2>
 801dc42:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 801dc46:	fb0c fe0e 	mul.w	lr, ip, lr
 801dc4a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801dc4e:	fb0c fc03 	mul.w	ip, ip, r3
 801dc52:	ea4f 231e 	mov.w	r3, lr, lsr #8
 801dc56:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801dc5a:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801dc5e:	4473      	add	r3, lr
 801dc60:	f50c 7e80 	add.w	lr, ip, #256	; 0x100
 801dc64:	eb0e 2e1c 	add.w	lr, lr, ip, lsr #8
 801dc68:	0a1b      	lsrs	r3, r3, #8
 801dc6a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801dc6e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801dc72:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801dc76:	ea43 030e 	orr.w	r3, r3, lr
 801dc7a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801dc7e:	d01e      	beq.n	801dcbe <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x236>
 801dc80:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801dc82:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 801dc86:	fb08 fc0c 	mul.w	ip, r8, ip
 801dc8a:	f407 4e7f 	and.w	lr, r7, #65280	; 0xff00
 801dc8e:	fb08 f80e 	mul.w	r8, r8, lr
 801dc92:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801dc96:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801dc9a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801dc9e:	44e6      	add	lr, ip
 801dca0:	f508 7c80 	add.w	ip, r8, #256	; 0x100
 801dca4:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 801dca8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801dcac:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801dcb0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801dcb4:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801dcb8:	ea4e 0708 	orr.w	r7, lr, r8
 801dcbc:	970c      	str	r7, [sp, #48]	; 0x30
 801dcbe:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801dcc2:	d01e      	beq.n	801dd02 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 801dcc4:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801dcc6:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 801dcca:	fb0a f808 	mul.w	r8, sl, r8
 801dcce:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 801dcd2:	fb0a fa0c 	mul.w	sl, sl, ip
 801dcd6:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 801dcda:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801dcde:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 801dce2:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801dce6:	44c6      	add	lr, r8
 801dce8:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801dcec:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801dcf0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801dcf4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801dcf8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801dcfc:	ea4e 070a 	orr.w	r7, lr, sl
 801dd00:	9709      	str	r7, [sp, #36]	; 0x24
 801dd02:	2eff      	cmp	r6, #255	; 0xff
 801dd04:	d01d      	beq.n	801dd42 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ba>
 801dd06:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801dd08:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 801dd0c:	fb06 f808 	mul.w	r8, r6, r8
 801dd10:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 801dd14:	fb06 f60c 	mul.w	r6, r6, ip
 801dd18:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 801dd1c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801dd20:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 801dd24:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 801dd28:	44c6      	add	lr, r8
 801dd2a:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801dd2e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801dd32:	0a36      	lsrs	r6, r6, #8
 801dd34:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801dd38:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801dd3c:	ea4e 0606 	orr.w	r6, lr, r6
 801dd40:	960d      	str	r6, [sp, #52]	; 0x34
 801dd42:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801dd44:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801dd46:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801dd4a:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801dd4e:	fb09 f606 	mul.w	r6, r9, r6
 801dd52:	fb02 660c 	mla	r6, r2, ip, r6
 801dd56:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 801dd5a:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801dd5c:	fb00 660c 	mla	r6, r0, ip, r6
 801dd60:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 801dd64:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801dd66:	fb0b 660c 	mla	r6, fp, ip, r6
 801dd6a:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 801dd6e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801dd72:	fb09 f90c 	mul.w	r9, r9, ip
 801dd76:	fb02 9303 	mla	r3, r2, r3, r9
 801dd7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801dd7c:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 801dd80:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801dd82:	fb00 330e 	mla	r3, r0, lr, r3
 801dd86:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 801dd8a:	fb0b 3b00 	mla	fp, fp, r0, r3
 801dd8e:	9b07      	ldr	r3, [sp, #28]
 801dd90:	43c9      	mvns	r1, r1
 801dd92:	781b      	ldrb	r3, [r3, #0]
 801dd94:	b2c9      	uxtb	r1, r1
 801dd96:	fb03 f201 	mul.w	r2, r3, r1
 801dd9a:	0a36      	lsrs	r6, r6, #8
 801dd9c:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801dda0:	1c53      	adds	r3, r2, #1
 801dda2:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801dda6:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 801ddaa:	ea46 060b 	orr.w	r6, r6, fp
 801ddae:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801ddb2:	9a07      	ldr	r2, [sp, #28]
 801ddb4:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 801ddb8:	7013      	strb	r3, [r2, #0]
 801ddba:	7853      	ldrb	r3, [r2, #1]
 801ddbc:	434b      	muls	r3, r1
 801ddbe:	1c5a      	adds	r2, r3, #1
 801ddc0:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801ddc4:	0a33      	lsrs	r3, r6, #8
 801ddc6:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801ddca:	9a07      	ldr	r2, [sp, #28]
 801ddcc:	7053      	strb	r3, [r2, #1]
 801ddce:	7893      	ldrb	r3, [r2, #2]
 801ddd0:	4359      	muls	r1, r3
 801ddd2:	1c4b      	adds	r3, r1, #1
 801ddd4:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 801ddd8:	0c36      	lsrs	r6, r6, #16
 801ddda:	eb06 2611 	add.w	r6, r6, r1, lsr #8
 801ddde:	7096      	strb	r6, [r2, #2]
 801dde0:	9b07      	ldr	r3, [sp, #28]
 801dde2:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801dde4:	3303      	adds	r3, #3
 801dde6:	9307      	str	r3, [sp, #28]
 801dde8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801ddea:	4413      	add	r3, r2
 801ddec:	9329      	str	r3, [sp, #164]	; 0xa4
 801ddee:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801ddf0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801ddf2:	4413      	add	r3, r2
 801ddf4:	932a      	str	r3, [sp, #168]	; 0xa8
 801ddf6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801ddf8:	3b01      	subs	r3, #1
 801ddfa:	9313      	str	r3, [sp, #76]	; 0x4c
 801ddfc:	e6c4      	b.n	801db88 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x100>
 801ddfe:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801de00:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801de02:	4413      	add	r3, r2
 801de04:	9329      	str	r3, [sp, #164]	; 0xa4
 801de06:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801de08:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801de0a:	4413      	add	r3, r2
 801de0c:	932a      	str	r3, [sp, #168]	; 0xa8
 801de0e:	9b08      	ldr	r3, [sp, #32]
 801de10:	3b01      	subs	r3, #1
 801de12:	9308      	str	r3, [sp, #32]
 801de14:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801de16:	3303      	adds	r3, #3
 801de18:	930b      	str	r3, [sp, #44]	; 0x2c
 801de1a:	e66a      	b.n	801daf2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801de1c:	f47f ae7c 	bne.w	801db18 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x90>
 801de20:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801de22:	2b00      	cmp	r3, #0
 801de24:	f340 8199 	ble.w	801e15a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6d2>
 801de28:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801de2c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801de30:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801de34:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801de36:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801de3a:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801de3e:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801de42:	eef0 6a48 	vmov.f32	s13, s16
 801de46:	ee69 7a27 	vmul.f32	s15, s18, s15
 801de4a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801de4e:	ee37 8a48 	vsub.f32	s16, s14, s16
 801de52:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 801de56:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801de5a:	eef0 6a68 	vmov.f32	s13, s17
 801de5e:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801de62:	ee18 2a10 	vmov	r2, s16
 801de66:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801de6a:	fb92 f3f3 	sdiv	r3, r2, r3
 801de6e:	ee18 2a90 	vmov	r2, s17
 801de72:	932b      	str	r3, [sp, #172]	; 0xac
 801de74:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801de76:	fb92 f3f3 	sdiv	r3, r2, r3
 801de7a:	932c      	str	r3, [sp, #176]	; 0xb0
 801de7c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801de7e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801de80:	3b01      	subs	r3, #1
 801de82:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801de86:	9312      	str	r3, [sp, #72]	; 0x48
 801de88:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801de8a:	edcd 6a2a 	vstr	s13, [sp, #168]	; 0xa8
 801de8e:	bf08      	it	eq
 801de90:	4613      	moveq	r3, r2
 801de92:	9308      	str	r3, [sp, #32]
 801de94:	eef0 8a67 	vmov.f32	s17, s15
 801de98:	eeb0 8a47 	vmov.f32	s16, s14
 801de9c:	e622      	b.n	801dae4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 801de9e:	b158      	cbz	r0, 801deb8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x430>
 801dea0:	5d32      	ldrb	r2, [r6, r4]
 801dea2:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801dea6:	9209      	str	r2, [sp, #36]	; 0x24
 801dea8:	ea4f 6a12 	mov.w	sl, r2, lsr #24
 801deac:	26ff      	movs	r6, #255	; 0xff
 801deae:	46b0      	mov	r8, r6
 801deb0:	e6a7      	b.n	801dc02 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x17a>
 801deb2:	26ff      	movs	r6, #255	; 0xff
 801deb4:	46b2      	mov	sl, r6
 801deb6:	e6a4      	b.n	801dc02 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x17a>
 801deb8:	26ff      	movs	r6, #255	; 0xff
 801deba:	46b2      	mov	sl, r6
 801debc:	e7f7      	b.n	801deae <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x426>
 801debe:	1c57      	adds	r7, r2, #1
 801dec0:	d18e      	bne.n	801dde0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x358>
 801dec2:	4294      	cmp	r4, r2
 801dec4:	dd8c      	ble.n	801dde0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x358>
 801dec6:	1c5e      	adds	r6, r3, #1
 801dec8:	db8a      	blt.n	801dde0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x358>
 801deca:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801decc:	429e      	cmp	r6, r3
 801dece:	dd87      	ble.n	801dde0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x358>
 801ded0:	e9cd 1004 	strd	r1, r0, [sp, #16]
 801ded4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801ded8:	e9cd 4600 	strd	r4, r6, [sp]
 801dedc:	462b      	mov	r3, r5
 801dede:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801dee0:	9907      	ldr	r1, [sp, #28]
 801dee2:	9815      	ldr	r0, [sp, #84]	; 0x54
 801dee4:	f7ff fc84 	bl	801d7f0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 801dee8:	e77a      	b.n	801dde0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x358>
 801deea:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801deec:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801deee:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801def2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801def4:	1409      	asrs	r1, r1, #16
 801def6:	f3c3 3003 	ubfx	r0, r3, #12, #4
 801defa:	141b      	asrs	r3, r3, #16
 801defc:	fb04 1303 	mla	r3, r4, r3, r1
 801df00:	9911      	ldr	r1, [sp, #68]	; 0x44
 801df02:	18ce      	adds	r6, r1, r3
 801df04:	5ccb      	ldrb	r3, [r1, r3]
 801df06:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 801df0a:	0e1f      	lsrs	r7, r3, #24
 801df0c:	2a00      	cmp	r2, #0
 801df0e:	f000 8114 	beq.w	801e13a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b2>
 801df12:	7871      	ldrb	r1, [r6, #1]
 801df14:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 801df18:	910e      	str	r1, [sp, #56]	; 0x38
 801df1a:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 801df1e:	2800      	cmp	r0, #0
 801df20:	f000 8115 	beq.w	801e14e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c6>
 801df24:	1931      	adds	r1, r6, r4
 801df26:	5d36      	ldrb	r6, [r6, r4]
 801df28:	7849      	ldrb	r1, [r1, #1]
 801df2a:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 801df2e:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 801df32:	960a      	str	r6, [sp, #40]	; 0x28
 801df34:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801df38:	910f      	str	r1, [sp, #60]	; 0x3c
 801df3a:	0e0e      	lsrs	r6, r1, #24
 801df3c:	b292      	uxth	r2, r2
 801df3e:	b280      	uxth	r0, r0
 801df40:	fb02 fb00 	mul.w	fp, r2, r0
 801df44:	ebcb 1000 	rsb	r0, fp, r0, lsl #4
 801df48:	0112      	lsls	r2, r2, #4
 801df4a:	eba2 090b 	sub.w	r9, r2, fp
 801df4e:	b280      	uxth	r0, r0
 801df50:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 801df54:	fa1f f989 	uxth.w	r9, r9
 801df58:	1a09      	subs	r1, r1, r0
 801df5a:	b289      	uxth	r1, r1
 801df5c:	fb09 f20e 	mul.w	r2, r9, lr
 801df60:	fb01 2207 	mla	r2, r1, r7, r2
 801df64:	fb00 220a 	mla	r2, r0, sl, r2
 801df68:	fb0b 2206 	mla	r2, fp, r6, r2
 801df6c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801df70:	9213      	str	r2, [sp, #76]	; 0x4c
 801df72:	2a00      	cmp	r2, #0
 801df74:	f000 80d4 	beq.w	801e120 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x698>
 801df78:	2fff      	cmp	r7, #255	; 0xff
 801df7a:	d01a      	beq.n	801dfb2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x52a>
 801df7c:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801df80:	fb07 fc0c 	mul.w	ip, r7, ip
 801df84:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801df88:	435f      	muls	r7, r3
 801df8a:	ea4f 231c 	mov.w	r3, ip, lsr #8
 801df8e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801df92:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801df96:	4463      	add	r3, ip
 801df98:	f507 7c80 	add.w	ip, r7, #256	; 0x100
 801df9c:	eb0c 2c17 	add.w	ip, ip, r7, lsr #8
 801dfa0:	0a1b      	lsrs	r3, r3, #8
 801dfa2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801dfa6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801dfaa:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801dfae:	ea43 030c 	orr.w	r3, r3, ip
 801dfb2:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801dfb6:	d01f      	beq.n	801dff8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x570>
 801dfb8:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 801dfba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801dfbc:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801dfc0:	fb0e f707 	mul.w	r7, lr, r7
 801dfc4:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801dfc8:	fb0e fe0c 	mul.w	lr, lr, ip
 801dfcc:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801dfd0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801dfd4:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801dfd8:	44bc      	add	ip, r7
 801dfda:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 801dfde:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 801dfe2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801dfe6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801dfea:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801dfee:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801dff2:	ea4c 020e 	orr.w	r2, ip, lr
 801dff6:	920e      	str	r2, [sp, #56]	; 0x38
 801dff8:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801dffc:	d01e      	beq.n	801e03c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5b4>
 801dffe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801e000:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 801e004:	fb0a fe0e 	mul.w	lr, sl, lr
 801e008:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 801e00c:	fb0a fa07 	mul.w	sl, sl, r7
 801e010:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801e014:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e018:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801e01c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801e020:	44f4      	add	ip, lr
 801e022:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801e026:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e02a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e02e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e032:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801e036:	ea4c 020a 	orr.w	r2, ip, sl
 801e03a:	920a      	str	r2, [sp, #40]	; 0x28
 801e03c:	2eff      	cmp	r6, #255	; 0xff
 801e03e:	d01c      	beq.n	801e07a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5f2>
 801e040:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e042:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 801e046:	fb06 fe0e 	mul.w	lr, r6, lr
 801e04a:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 801e04e:	437e      	muls	r6, r7
 801e050:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801e054:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e058:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801e05c:	f506 7780 	add.w	r7, r6, #256	; 0x100
 801e060:	44f4      	add	ip, lr
 801e062:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 801e066:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e06a:	0a36      	lsrs	r6, r6, #8
 801e06c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e070:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801e074:	ea4c 0206 	orr.w	r2, ip, r6
 801e078:	920f      	str	r2, [sp, #60]	; 0x3c
 801e07a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801e07c:	f002 16ff 	and.w	r6, r2, #16711935	; 0xff00ff
 801e080:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801e082:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 801e086:	fb09 f606 	mul.w	r6, r9, r6
 801e08a:	fb01 6607 	mla	r6, r1, r7, r6
 801e08e:	f002 17ff 	and.w	r7, r2, #16711935	; 0xff00ff
 801e092:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e094:	fb00 6607 	mla	r6, r0, r7, r6
 801e098:	f002 17ff 	and.w	r7, r2, #16711935	; 0xff00ff
 801e09c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801e09e:	fb0b 6607 	mla	r6, fp, r7, r6
 801e0a2:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 801e0a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801e0a8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801e0ac:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801e0b0:	fb09 f907 	mul.w	r9, r9, r7
 801e0b4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e0b6:	fb01 9303 	mla	r3, r1, r3, r9
 801e0ba:	fb00 330c 	mla	r3, r0, ip, r3
 801e0be:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 801e0c2:	fb0b 3e0e 	mla	lr, fp, lr, r3
 801e0c6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801e0c8:	43da      	mvns	r2, r3
 801e0ca:	f818 3c03 	ldrb.w	r3, [r8, #-3]
 801e0ce:	b2d2      	uxtb	r2, r2
 801e0d0:	fb03 f102 	mul.w	r1, r3, r2
 801e0d4:	0a36      	lsrs	r6, r6, #8
 801e0d6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801e0da:	1c4b      	adds	r3, r1, #1
 801e0dc:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801e0e0:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801e0e4:	ea46 060e 	orr.w	r6, r6, lr
 801e0e8:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801e0ec:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 801e0f0:	f808 3c03 	strb.w	r3, [r8, #-3]
 801e0f4:	f818 3c02 	ldrb.w	r3, [r8, #-2]
 801e0f8:	4353      	muls	r3, r2
 801e0fa:	1c59      	adds	r1, r3, #1
 801e0fc:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801e100:	0a33      	lsrs	r3, r6, #8
 801e102:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801e106:	f808 3c02 	strb.w	r3, [r8, #-2]
 801e10a:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 801e10e:	435a      	muls	r2, r3
 801e110:	1c53      	adds	r3, r2, #1
 801e112:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801e116:	0c36      	lsrs	r6, r6, #16
 801e118:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 801e11c:	f808 6c01 	strb.w	r6, [r8, #-1]
 801e120:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801e122:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801e124:	4413      	add	r3, r2
 801e126:	9329      	str	r3, [sp, #164]	; 0xa4
 801e128:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801e12a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801e12c:	4413      	add	r3, r2
 801e12e:	932a      	str	r3, [sp, #168]	; 0xa8
 801e130:	9b07      	ldr	r3, [sp, #28]
 801e132:	f108 0803 	add.w	r8, r8, #3
 801e136:	3b01      	subs	r3, #1
 801e138:	e507      	b.n	801db4a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc2>
 801e13a:	b158      	cbz	r0, 801e154 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6cc>
 801e13c:	5d31      	ldrb	r1, [r6, r4]
 801e13e:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 801e142:	910a      	str	r1, [sp, #40]	; 0x28
 801e144:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 801e148:	26ff      	movs	r6, #255	; 0xff
 801e14a:	46b6      	mov	lr, r6
 801e14c:	e6f6      	b.n	801df3c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4b4>
 801e14e:	26ff      	movs	r6, #255	; 0xff
 801e150:	46b2      	mov	sl, r6
 801e152:	e6f3      	b.n	801df3c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4b4>
 801e154:	26ff      	movs	r6, #255	; 0xff
 801e156:	46b2      	mov	sl, r6
 801e158:	e7f7      	b.n	801e14a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c2>
 801e15a:	b017      	add	sp, #92	; 0x5c
 801e15c:	ecbd 8b08 	vpop	{d8-d11}
 801e160:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e164 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 801e164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e168:	b08d      	sub	sp, #52	; 0x34
 801e16a:	e9dd 5717 	ldrd	r5, r7, [sp, #92]	; 0x5c
 801e16e:	9103      	str	r1, [sp, #12]
 801e170:	f89d 106c 	ldrb.w	r1, [sp, #108]	; 0x6c
 801e174:	910b      	str	r1, [sp, #44]	; 0x2c
 801e176:	fb07 5803 	mla	r8, r7, r3, r5
 801e17a:	9903      	ldr	r1, [sp, #12]
 801e17c:	9803      	ldr	r0, [sp, #12]
 801e17e:	9c03      	ldr	r4, [sp, #12]
 801e180:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801e184:	f89d c064 	ldrb.w	ip, [sp, #100]	; 0x64
 801e188:	f89d 9068 	ldrb.w	r9, [sp, #104]	; 0x68
 801e18c:	7809      	ldrb	r1, [r1, #0]
 801e18e:	7840      	ldrb	r0, [r0, #1]
 801e190:	78a4      	ldrb	r4, [r4, #2]
 801e192:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801e196:	2f00      	cmp	r7, #0
 801e198:	eb02 0608 	add.w	r6, r2, r8
 801e19c:	db51      	blt.n	801e242 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 801e19e:	45be      	cmp	lr, r7
 801e1a0:	dd4f      	ble.n	801e242 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 801e1a2:	2d00      	cmp	r5, #0
 801e1a4:	db49      	blt.n	801e23a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 801e1a6:	42ab      	cmp	r3, r5
 801e1a8:	dd47      	ble.n	801e23a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 801e1aa:	f812 2008 	ldrb.w	r2, [r2, r8]
 801e1ae:	9204      	str	r2, [sp, #16]
 801e1b0:	7872      	ldrb	r2, [r6, #1]
 801e1b2:	9205      	str	r2, [sp, #20]
 801e1b4:	78b2      	ldrb	r2, [r6, #2]
 801e1b6:	9206      	str	r2, [sp, #24]
 801e1b8:	1c6a      	adds	r2, r5, #1
 801e1ba:	d449      	bmi.n	801e250 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 801e1bc:	4293      	cmp	r3, r2
 801e1be:	dd47      	ble.n	801e250 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 801e1c0:	f1bc 0f00 	cmp.w	ip, #0
 801e1c4:	d044      	beq.n	801e250 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 801e1c6:	7972      	ldrb	r2, [r6, #5]
 801e1c8:	f896 b003 	ldrb.w	fp, [r6, #3]
 801e1cc:	f896 a004 	ldrb.w	sl, [r6, #4]
 801e1d0:	9201      	str	r2, [sp, #4]
 801e1d2:	3701      	adds	r7, #1
 801e1d4:	d444      	bmi.n	801e260 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 801e1d6:	45be      	cmp	lr, r7
 801e1d8:	dd42      	ble.n	801e260 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 801e1da:	f1b9 0f00 	cmp.w	r9, #0
 801e1de:	f000 80c1 	beq.w	801e364 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x200>
 801e1e2:	2d00      	cmp	r5, #0
 801e1e4:	db38      	blt.n	801e258 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 801e1e6:	42ab      	cmp	r3, r5
 801e1e8:	dd36      	ble.n	801e258 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 801e1ea:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801e1ee:	f816 8002 	ldrb.w	r8, [r6, r2]
 801e1f2:	2203      	movs	r2, #3
 801e1f4:	fb03 6702 	mla	r7, r3, r2, r6
 801e1f8:	fb03 6202 	mla	r2, r3, r2, r6
 801e1fc:	787f      	ldrb	r7, [r7, #1]
 801e1fe:	f892 e002 	ldrb.w	lr, [r2, #2]
 801e202:	9702      	str	r7, [sp, #8]
 801e204:	3501      	adds	r5, #1
 801e206:	d432      	bmi.n	801e26e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 801e208:	42ab      	cmp	r3, r5
 801e20a:	dd30      	ble.n	801e26e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 801e20c:	f1bc 0f00 	cmp.w	ip, #0
 801e210:	d031      	beq.n	801e276 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x112>
 801e212:	2703      	movs	r7, #3
 801e214:	fb13 7207 	smlabb	r2, r3, r7, r7
 801e218:	5cb5      	ldrb	r5, [r6, r2]
 801e21a:	fb03 6207 	mla	r2, r3, r7, r6
 801e21e:	fb03 6307 	mla	r3, r3, r7, r6
 801e222:	7912      	ldrb	r2, [r2, #4]
 801e224:	795e      	ldrb	r6, [r3, #5]
 801e226:	f1bc 0f0f 	cmp.w	ip, #15
 801e22a:	d927      	bls.n	801e27c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x118>
 801e22c:	4b53      	ldr	r3, [pc, #332]	; (801e37c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x218>)
 801e22e:	4a54      	ldr	r2, [pc, #336]	; (801e380 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x21c>)
 801e230:	4854      	ldr	r0, [pc, #336]	; (801e384 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x220>)
 801e232:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 801e236:	f004 fadb 	bl	80227f0 <__assert_func>
 801e23a:	e9cd 0405 	strd	r0, r4, [sp, #20]
 801e23e:	9104      	str	r1, [sp, #16]
 801e240:	e7ba      	b.n	801e1b8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x54>
 801e242:	9401      	str	r4, [sp, #4]
 801e244:	4682      	mov	sl, r0
 801e246:	468b      	mov	fp, r1
 801e248:	e9cd 0405 	strd	r0, r4, [sp, #20]
 801e24c:	9104      	str	r1, [sp, #16]
 801e24e:	e7c0      	b.n	801e1d2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 801e250:	9401      	str	r4, [sp, #4]
 801e252:	4682      	mov	sl, r0
 801e254:	468b      	mov	fp, r1
 801e256:	e7bc      	b.n	801e1d2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 801e258:	46a6      	mov	lr, r4
 801e25a:	9002      	str	r0, [sp, #8]
 801e25c:	4688      	mov	r8, r1
 801e25e:	e7d1      	b.n	801e204 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xa0>
 801e260:	4626      	mov	r6, r4
 801e262:	4602      	mov	r2, r0
 801e264:	460d      	mov	r5, r1
 801e266:	46a6      	mov	lr, r4
 801e268:	9002      	str	r0, [sp, #8]
 801e26a:	4688      	mov	r8, r1
 801e26c:	e7db      	b.n	801e226 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 801e26e:	4626      	mov	r6, r4
 801e270:	4602      	mov	r2, r0
 801e272:	460d      	mov	r5, r1
 801e274:	e7d7      	b.n	801e226 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 801e276:	4626      	mov	r6, r4
 801e278:	4602      	mov	r2, r0
 801e27a:	460d      	mov	r5, r1
 801e27c:	f1b9 0f0f 	cmp.w	r9, #15
 801e280:	d8d4      	bhi.n	801e22c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 801e282:	fa1f f38c 	uxth.w	r3, ip
 801e286:	fa1f fc89 	uxth.w	ip, r9
 801e28a:	fb03 f70c 	mul.w	r7, r3, ip
 801e28e:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 801e292:	011b      	lsls	r3, r3, #4
 801e294:	9707      	str	r7, [sp, #28]
 801e296:	fa1f fc8c 	uxth.w	ip, ip
 801e29a:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 801e29e:	eba7 070c 	sub.w	r7, r7, ip
 801e2a2:	b2bf      	uxth	r7, r7
 801e2a4:	9709      	str	r7, [sp, #36]	; 0x24
 801e2a6:	9f07      	ldr	r7, [sp, #28]
 801e2a8:	1bdb      	subs	r3, r3, r7
 801e2aa:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
 801e2ae:	9708      	str	r7, [sp, #32]
 801e2b0:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801e2b2:	b29b      	uxth	r3, r3
 801e2b4:	930a      	str	r3, [sp, #40]	; 0x28
 801e2b6:	ea6f 0907 	mvn.w	r9, r7
 801e2ba:	fb03 fb0b 	mul.w	fp, r3, fp
 801e2be:	9f04      	ldr	r7, [sp, #16]
 801e2c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e2c2:	fb03 bb07 	mla	fp, r3, r7, fp
 801e2c6:	9f07      	ldr	r7, [sp, #28]
 801e2c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e2ca:	fb0c b808 	mla	r8, ip, r8, fp
 801e2ce:	fa5f f989 	uxtb.w	r9, r9
 801e2d2:	fb07 8805 	mla	r8, r7, r5, r8
 801e2d6:	9d08      	ldr	r5, [sp, #32]
 801e2d8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801e2da:	fb11 f109 	smulbb	r1, r1, r9
 801e2de:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801e2e2:	fb08 1805 	mla	r8, r8, r5, r1
 801e2e6:	fa1f f888 	uxth.w	r8, r8
 801e2ea:	f108 0101 	add.w	r1, r8, #1
 801e2ee:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 801e2f2:	9903      	ldr	r1, [sp, #12]
 801e2f4:	9d05      	ldr	r5, [sp, #20]
 801e2f6:	ea4f 2828 	mov.w	r8, r8, asr #8
 801e2fa:	f881 8000 	strb.w	r8, [r1]
 801e2fe:	fb03 f10a 	mul.w	r1, r3, sl
 801e302:	fb07 1105 	mla	r1, r7, r5, r1
 801e306:	9d02      	ldr	r5, [sp, #8]
 801e308:	fb0c 1105 	mla	r1, ip, r5, r1
 801e30c:	9d07      	ldr	r5, [sp, #28]
 801e30e:	fb05 1102 	mla	r1, r5, r2, r1
 801e312:	9a08      	ldr	r2, [sp, #32]
 801e314:	fb10 f009 	smulbb	r0, r0, r9
 801e318:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801e31c:	fb01 0102 	mla	r1, r1, r2, r0
 801e320:	b289      	uxth	r1, r1
 801e322:	1c48      	adds	r0, r1, #1
 801e324:	9a03      	ldr	r2, [sp, #12]
 801e326:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 801e32a:	1209      	asrs	r1, r1, #8
 801e32c:	7051      	strb	r1, [r2, #1]
 801e32e:	9a01      	ldr	r2, [sp, #4]
 801e330:	4353      	muls	r3, r2
 801e332:	9a06      	ldr	r2, [sp, #24]
 801e334:	fb07 3702 	mla	r7, r7, r2, r3
 801e338:	fb0c 7c0e 	mla	ip, ip, lr, r7
 801e33c:	9b08      	ldr	r3, [sp, #32]
 801e33e:	fb05 c606 	mla	r6, r5, r6, ip
 801e342:	fb14 f409 	smulbb	r4, r4, r9
 801e346:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801e34a:	fb06 4603 	mla	r6, r6, r3, r4
 801e34e:	b2b6      	uxth	r6, r6
 801e350:	f106 0e01 	add.w	lr, r6, #1
 801e354:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 801e358:	9b03      	ldr	r3, [sp, #12]
 801e35a:	1236      	asrs	r6, r6, #8
 801e35c:	709e      	strb	r6, [r3, #2]
 801e35e:	b00d      	add	sp, #52	; 0x34
 801e360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e364:	f1bc 0f0f 	cmp.w	ip, #15
 801e368:	f63f af60 	bhi.w	801e22c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 801e36c:	4626      	mov	r6, r4
 801e36e:	4602      	mov	r2, r0
 801e370:	460d      	mov	r5, r1
 801e372:	46a6      	mov	lr, r4
 801e374:	9002      	str	r0, [sp, #8]
 801e376:	4688      	mov	r8, r1
 801e378:	e783      	b.n	801e282 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x11e>
 801e37a:	bf00      	nop
 801e37c:	08027814 	.word	0x08027814
 801e380:	08027d0a 	.word	0x08027d0a
 801e384:	080278dd 	.word	0x080278dd

0801e388 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801e388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e38c:	ed2d 8b08 	vpush	{d8-d11}
 801e390:	b0a1      	sub	sp, #132	; 0x84
 801e392:	e9dd 8b33 	ldrd	r8, fp, [sp, #204]	; 0xcc
 801e396:	9307      	str	r3, [sp, #28]
 801e398:	f9bd 30e8 	ldrsh.w	r3, [sp, #232]	; 0xe8
 801e39c:	9308      	str	r3, [sp, #32]
 801e39e:	f9bd 30ec 	ldrsh.w	r3, [sp, #236]	; 0xec
 801e3a2:	9210      	str	r2, [sp, #64]	; 0x40
 801e3a4:	930a      	str	r3, [sp, #40]	; 0x28
 801e3a6:	9a37      	ldr	r2, [sp, #220]	; 0xdc
 801e3a8:	f89d 30f4 	ldrb.w	r3, [sp, #244]	; 0xf4
 801e3ac:	930f      	str	r3, [sp, #60]	; 0x3c
 801e3ae:	910e      	str	r1, [sp, #56]	; 0x38
 801e3b0:	e9dd 1338 	ldrd	r1, r3, [sp, #224]	; 0xe0
 801e3b4:	901f      	str	r0, [sp, #124]	; 0x7c
 801e3b6:	6850      	ldr	r0, [r2, #4]
 801e3b8:	6812      	ldr	r2, [r2, #0]
 801e3ba:	fb00 1303 	mla	r3, r0, r3, r1
 801e3be:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e3c2:	18d3      	adds	r3, r2, r3
 801e3c4:	9309      	str	r3, [sp, #36]	; 0x24
 801e3c6:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 801e3c8:	9908      	ldr	r1, [sp, #32]
 801e3ca:	681b      	ldr	r3, [r3, #0]
 801e3cc:	930c      	str	r3, [sp, #48]	; 0x30
 801e3ce:	2203      	movs	r2, #3
 801e3d0:	f06f 0304 	mvn.w	r3, #4
 801e3d4:	fb11 3302 	smlabb	r3, r1, r2, r3
 801e3d8:	930d      	str	r3, [sp, #52]	; 0x34
 801e3da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e3dc:	43db      	mvns	r3, r3
 801e3de:	b2db      	uxtb	r3, r3
 801e3e0:	eeb0 aa40 	vmov.f32	s20, s0
 801e3e4:	eef0 9a60 	vmov.f32	s19, s1
 801e3e8:	eeb0 9a41 	vmov.f32	s18, s2
 801e3ec:	eeb0 8a62 	vmov.f32	s16, s5
 801e3f0:	eef0 8a43 	vmov.f32	s17, s6
 801e3f4:	eef0 ba44 	vmov.f32	s23, s8
 801e3f8:	eeb0 ba64 	vmov.f32	s22, s9
 801e3fc:	eef0 aa45 	vmov.f32	s21, s10
 801e400:	930b      	str	r3, [sp, #44]	; 0x2c
 801e402:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e404:	2b00      	cmp	r3, #0
 801e406:	dc03      	bgt.n	801e410 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x88>
 801e408:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e40a:	2b00      	cmp	r3, #0
 801e40c:	f340 81df 	ble.w	801e7ce <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x446>
 801e410:	9b07      	ldr	r3, [sp, #28]
 801e412:	2b00      	cmp	r3, #0
 801e414:	f340 80f2 	ble.w	801e5fc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801e418:	ea5f 4228 	movs.w	r2, r8, asr #16
 801e41c:	ea4f 432b 	mov.w	r3, fp, asr #16
 801e420:	d430      	bmi.n	801e484 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 801e422:	9808      	ldr	r0, [sp, #32]
 801e424:	1c51      	adds	r1, r2, #1
 801e426:	4281      	cmp	r1, r0
 801e428:	da2f      	bge.n	801e48a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 801e42a:	2b00      	cmp	r3, #0
 801e42c:	db2d      	blt.n	801e48a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 801e42e:	980a      	ldr	r0, [sp, #40]	; 0x28
 801e430:	1c59      	adds	r1, r3, #1
 801e432:	4288      	cmp	r0, r1
 801e434:	dd29      	ble.n	801e48a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 801e436:	9b07      	ldr	r3, [sp, #28]
 801e438:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 801e43a:	3b01      	subs	r3, #1
 801e43c:	fb02 8203 	mla	r2, r2, r3, r8
 801e440:	1412      	asrs	r2, r2, #16
 801e442:	d42d      	bmi.n	801e4a0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 801e444:	9908      	ldr	r1, [sp, #32]
 801e446:	3201      	adds	r2, #1
 801e448:	4291      	cmp	r1, r2
 801e44a:	dd29      	ble.n	801e4a0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 801e44c:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 801e44e:	fb02 b303 	mla	r3, r2, r3, fp
 801e452:	141b      	asrs	r3, r3, #16
 801e454:	d424      	bmi.n	801e4a0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 801e456:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801e458:	3301      	adds	r3, #1
 801e45a:	429a      	cmp	r2, r3
 801e45c:	dd20      	ble.n	801e4a0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 801e45e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e460:	f8dd c01c 	ldr.w	ip, [sp, #28]
 801e464:	f8bd e03c 	ldrh.w	lr, [sp, #60]	; 0x3c
 801e468:	1cde      	adds	r6, r3, #3
 801e46a:	f1bc 0f00 	cmp.w	ip, #0
 801e46e:	f300 811f 	bgt.w	801e6b0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x328>
 801e472:	9b07      	ldr	r3, [sp, #28]
 801e474:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801e478:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e47a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801e47e:	4423      	add	r3, r4
 801e480:	9309      	str	r3, [sp, #36]	; 0x24
 801e482:	e0bd      	b.n	801e600 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801e484:	1c57      	adds	r7, r2, #1
 801e486:	f040 80ae 	bne.w	801e5e6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 801e48a:	9908      	ldr	r1, [sp, #32]
 801e48c:	428a      	cmp	r2, r1
 801e48e:	f280 80aa 	bge.w	801e5e6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 801e492:	1c5e      	adds	r6, r3, #1
 801e494:	f2c0 80a7 	blt.w	801e5e6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 801e498:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801e49a:	4293      	cmp	r3, r2
 801e49c:	f280 80a3 	bge.w	801e5e6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 801e4a0:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801e4a4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801e4a6:	f1ba 0f00 	cmp.w	sl, #0
 801e4aa:	dde2      	ble.n	801e472 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 801e4ac:	ea5f 4028 	movs.w	r0, r8, asr #16
 801e4b0:	ea4f 412b 	mov.w	r1, fp, asr #16
 801e4b4:	f3c8 3303 	ubfx	r3, r8, #12, #4
 801e4b8:	f3cb 3203 	ubfx	r2, fp, #12, #4
 801e4bc:	f100 80df 	bmi.w	801e67e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2f6>
 801e4c0:	9f08      	ldr	r7, [sp, #32]
 801e4c2:	1c45      	adds	r5, r0, #1
 801e4c4:	42af      	cmp	r7, r5
 801e4c6:	f340 80dc 	ble.w	801e682 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 801e4ca:	2900      	cmp	r1, #0
 801e4cc:	f2c0 80d9 	blt.w	801e682 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 801e4d0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801e4d2:	1c4d      	adds	r5, r1, #1
 801e4d4:	42af      	cmp	r7, r5
 801e4d6:	f340 80d4 	ble.w	801e682 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 801e4da:	9d08      	ldr	r5, [sp, #32]
 801e4dc:	fb05 0101 	mla	r1, r5, r1, r0
 801e4e0:	980c      	ldr	r0, [sp, #48]	; 0x30
 801e4e2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801e4e6:	1845      	adds	r5, r0, r1
 801e4e8:	5c40      	ldrb	r0, [r0, r1]
 801e4ea:	792f      	ldrb	r7, [r5, #4]
 801e4ec:	9711      	str	r7, [sp, #68]	; 0x44
 801e4ee:	796f      	ldrb	r7, [r5, #5]
 801e4f0:	7869      	ldrb	r1, [r5, #1]
 801e4f2:	f895 e002 	ldrb.w	lr, [r5, #2]
 801e4f6:	f895 9003 	ldrb.w	r9, [r5, #3]
 801e4fa:	9712      	str	r7, [sp, #72]	; 0x48
 801e4fc:	b17a      	cbz	r2, 801e51e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x196>
 801e4fe:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801e500:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801e502:	3505      	adds	r5, #5
 801e504:	19ef      	adds	r7, r5, r7
 801e506:	5d2d      	ldrb	r5, [r5, r4]
 801e508:	787c      	ldrb	r4, [r7, #1]
 801e50a:	9415      	str	r4, [sp, #84]	; 0x54
 801e50c:	78bc      	ldrb	r4, [r7, #2]
 801e50e:	9417      	str	r4, [sp, #92]	; 0x5c
 801e510:	78fc      	ldrb	r4, [r7, #3]
 801e512:	9414      	str	r4, [sp, #80]	; 0x50
 801e514:	793c      	ldrb	r4, [r7, #4]
 801e516:	9416      	str	r4, [sp, #88]	; 0x58
 801e518:	797c      	ldrb	r4, [r7, #5]
 801e51a:	9513      	str	r5, [sp, #76]	; 0x4c
 801e51c:	9418      	str	r4, [sp, #96]	; 0x60
 801e51e:	b29b      	uxth	r3, r3
 801e520:	b292      	uxth	r2, r2
 801e522:	fb03 f702 	mul.w	r7, r3, r2
 801e526:	ebc7 1202 	rsb	r2, r7, r2, lsl #4
 801e52a:	011b      	lsls	r3, r3, #4
 801e52c:	b292      	uxth	r2, r2
 801e52e:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 801e532:	1bdb      	subs	r3, r3, r7
 801e534:	b29b      	uxth	r3, r3
 801e536:	ebac 0c02 	sub.w	ip, ip, r2
 801e53a:	fa1f fc8c 	uxth.w	ip, ip
 801e53e:	fb03 f909 	mul.w	r9, r3, r9
 801e542:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801e544:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 801e548:	fb0c 9000 	mla	r0, ip, r0, r9
 801e54c:	fb02 0004 	mla	r0, r2, r4, r0
 801e550:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801e552:	f896 9000 	ldrb.w	r9, [r6]
 801e556:	fb07 0004 	mla	r0, r7, r4, r0
 801e55a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801e55c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801e560:	fb19 f904 	smulbb	r9, r9, r4
 801e564:	fb00 9005 	mla	r0, r0, r5, r9
 801e568:	b280      	uxth	r0, r0
 801e56a:	f100 0901 	add.w	r9, r0, #1
 801e56e:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 801e572:	9811      	ldr	r0, [sp, #68]	; 0x44
 801e574:	4358      	muls	r0, r3
 801e576:	fb0c 0101 	mla	r1, ip, r1, r0
 801e57a:	9815      	ldr	r0, [sp, #84]	; 0x54
 801e57c:	fb02 1100 	mla	r1, r2, r0, r1
 801e580:	9816      	ldr	r0, [sp, #88]	; 0x58
 801e582:	fb07 1100 	mla	r1, r7, r0, r1
 801e586:	7870      	ldrb	r0, [r6, #1]
 801e588:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801e58c:	fb10 f004 	smulbb	r0, r0, r4
 801e590:	fb01 0105 	mla	r1, r1, r5, r0
 801e594:	b289      	uxth	r1, r1
 801e596:	1c48      	adds	r0, r1, #1
 801e598:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 801e59c:	1209      	asrs	r1, r1, #8
 801e59e:	7071      	strb	r1, [r6, #1]
 801e5a0:	9912      	ldr	r1, [sp, #72]	; 0x48
 801e5a2:	434b      	muls	r3, r1
 801e5a4:	9917      	ldr	r1, [sp, #92]	; 0x5c
 801e5a6:	fb0c 330e 	mla	r3, ip, lr, r3
 801e5aa:	fb02 3201 	mla	r2, r2, r1, r3
 801e5ae:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801e5b0:	fb07 2703 	mla	r7, r7, r3, r2
 801e5b4:	78b2      	ldrb	r2, [r6, #2]
 801e5b6:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801e5ba:	fb12 f204 	smulbb	r2, r2, r4
 801e5be:	fb07 2505 	mla	r5, r7, r5, r2
 801e5c2:	b2ad      	uxth	r5, r5
 801e5c4:	1c6f      	adds	r7, r5, #1
 801e5c6:	eb07 2515 	add.w	r5, r7, r5, lsr #8
 801e5ca:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e5ce:	122d      	asrs	r5, r5, #8
 801e5d0:	f886 9000 	strb.w	r9, [r6]
 801e5d4:	70b5      	strb	r5, [r6, #2]
 801e5d6:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 801e5d8:	4498      	add	r8, r3
 801e5da:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 801e5dc:	3603      	adds	r6, #3
 801e5de:	449b      	add	fp, r3
 801e5e0:	f10a 3aff 	add.w	sl, sl, #4294967295
 801e5e4:	e75f      	b.n	801e4a6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x11e>
 801e5e6:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 801e5e8:	4498      	add	r8, r3
 801e5ea:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 801e5ec:	449b      	add	fp, r3
 801e5ee:	9b07      	ldr	r3, [sp, #28]
 801e5f0:	3b01      	subs	r3, #1
 801e5f2:	9307      	str	r3, [sp, #28]
 801e5f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e5f6:	3303      	adds	r3, #3
 801e5f8:	9309      	str	r3, [sp, #36]	; 0x24
 801e5fa:	e709      	b.n	801e410 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x88>
 801e5fc:	f47f af1b 	bne.w	801e436 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xae>
 801e600:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e602:	2b00      	cmp	r3, #0
 801e604:	f340 80e3 	ble.w	801e7ce <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x446>
 801e608:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801e60c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e610:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801e614:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801e616:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801e61a:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801e61e:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801e622:	eef0 6a48 	vmov.f32	s13, s16
 801e626:	ee69 7a27 	vmul.f32	s15, s18, s15
 801e62a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e62e:	ee37 8a48 	vsub.f32	s16, s14, s16
 801e632:	ee16 8a90 	vmov	r8, s13
 801e636:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801e63a:	eef0 6a68 	vmov.f32	s13, s17
 801e63e:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801e642:	ee18 2a10 	vmov	r2, s16
 801e646:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801e64a:	fb92 f3f3 	sdiv	r3, r2, r3
 801e64e:	ee18 2a90 	vmov	r2, s17
 801e652:	9335      	str	r3, [sp, #212]	; 0xd4
 801e654:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801e656:	fb92 f3f3 	sdiv	r3, r2, r3
 801e65a:	9336      	str	r3, [sp, #216]	; 0xd8
 801e65c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e65e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801e660:	3b01      	subs	r3, #1
 801e662:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e666:	930e      	str	r3, [sp, #56]	; 0x38
 801e668:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801e66a:	bf08      	it	eq
 801e66c:	4613      	moveq	r3, r2
 801e66e:	ee16 ba90 	vmov	fp, s13
 801e672:	9307      	str	r3, [sp, #28]
 801e674:	eef0 8a67 	vmov.f32	s17, s15
 801e678:	eeb0 8a47 	vmov.f32	s16, s14
 801e67c:	e6c1      	b.n	801e402 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 801e67e:	1c45      	adds	r5, r0, #1
 801e680:	d1a9      	bne.n	801e5d6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 801e682:	9c08      	ldr	r4, [sp, #32]
 801e684:	42a0      	cmp	r0, r4
 801e686:	daa6      	bge.n	801e5d6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 801e688:	1c4c      	adds	r4, r1, #1
 801e68a:	dba4      	blt.n	801e5d6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 801e68c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801e68e:	428c      	cmp	r4, r1
 801e690:	dda1      	ble.n	801e5d6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 801e692:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801e694:	9001      	str	r0, [sp, #4]
 801e696:	e9cd 1302 	strd	r1, r3, [sp, #8]
 801e69a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e69c:	9300      	str	r3, [sp, #0]
 801e69e:	e9cd 2404 	strd	r2, r4, [sp, #16]
 801e6a2:	9b08      	ldr	r3, [sp, #32]
 801e6a4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801e6a6:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801e6a8:	4631      	mov	r1, r6
 801e6aa:	f7ff fd5b 	bl	801e164 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 801e6ae:	e792      	b.n	801e5d6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 801e6b0:	9c08      	ldr	r4, [sp, #32]
 801e6b2:	ea4f 4228 	mov.w	r2, r8, asr #16
 801e6b6:	ea4f 402b 	mov.w	r0, fp, asr #16
 801e6ba:	fb04 2000 	mla	r0, r4, r0, r2
 801e6be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801e6c0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801e6c2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801e6c6:	4402      	add	r2, r0
 801e6c8:	5c25      	ldrb	r5, [r4, r0]
 801e6ca:	7894      	ldrb	r4, [r2, #2]
 801e6cc:	9411      	str	r4, [sp, #68]	; 0x44
 801e6ce:	f3cb 3103 	ubfx	r1, fp, #12, #4
 801e6d2:	7954      	ldrb	r4, [r2, #5]
 801e6d4:	7850      	ldrb	r0, [r2, #1]
 801e6d6:	f892 a003 	ldrb.w	sl, [r2, #3]
 801e6da:	f892 9004 	ldrb.w	r9, [r2, #4]
 801e6de:	9412      	str	r4, [sp, #72]	; 0x48
 801e6e0:	f3c8 3303 	ubfx	r3, r8, #12, #4
 801e6e4:	b171      	cbz	r1, 801e704 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 801e6e6:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801e6e8:	3205      	adds	r2, #5
 801e6ea:	1917      	adds	r7, r2, r4
 801e6ec:	5d12      	ldrb	r2, [r2, r4]
 801e6ee:	9219      	str	r2, [sp, #100]	; 0x64
 801e6f0:	787a      	ldrb	r2, [r7, #1]
 801e6f2:	921b      	str	r2, [sp, #108]	; 0x6c
 801e6f4:	78ba      	ldrb	r2, [r7, #2]
 801e6f6:	921d      	str	r2, [sp, #116]	; 0x74
 801e6f8:	78fa      	ldrb	r2, [r7, #3]
 801e6fa:	921a      	str	r2, [sp, #104]	; 0x68
 801e6fc:	793a      	ldrb	r2, [r7, #4]
 801e6fe:	921c      	str	r2, [sp, #112]	; 0x70
 801e700:	797a      	ldrb	r2, [r7, #5]
 801e702:	921e      	str	r2, [sp, #120]	; 0x78
 801e704:	b29b      	uxth	r3, r3
 801e706:	b289      	uxth	r1, r1
 801e708:	fb03 f201 	mul.w	r2, r3, r1
 801e70c:	ebc2 1101 	rsb	r1, r2, r1, lsl #4
 801e710:	011b      	lsls	r3, r3, #4
 801e712:	b289      	uxth	r1, r1
 801e714:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 801e718:	1a9b      	subs	r3, r3, r2
 801e71a:	b29b      	uxth	r3, r3
 801e71c:	1a7f      	subs	r7, r7, r1
 801e71e:	b2bf      	uxth	r7, r7
 801e720:	fb03 fa0a 	mul.w	sl, r3, sl
 801e724:	9c19      	ldr	r4, [sp, #100]	; 0x64
 801e726:	fb07 a505 	mla	r5, r7, r5, sl
 801e72a:	fb01 5504 	mla	r5, r1, r4, r5
 801e72e:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 801e730:	f816 ac03 	ldrb.w	sl, [r6, #-3]
 801e734:	fb02 5504 	mla	r5, r2, r4, r5
 801e738:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801e73a:	f3c5 2507 	ubfx	r5, r5, #8, #8
 801e73e:	fb1a fa04 	smulbb	sl, sl, r4
 801e742:	fb05 a50e 	mla	r5, r5, lr, sl
 801e746:	b2ad      	uxth	r5, r5
 801e748:	fb03 f909 	mul.w	r9, r3, r9
 801e74c:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 801e74e:	f105 0a01 	add.w	sl, r5, #1
 801e752:	fb07 9000 	mla	r0, r7, r0, r9
 801e756:	fb01 0004 	mla	r0, r1, r4, r0
 801e75a:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 801e75e:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 801e760:	122d      	asrs	r5, r5, #8
 801e762:	fb02 0004 	mla	r0, r2, r4, r0
 801e766:	f806 5c03 	strb.w	r5, [r6, #-3]
 801e76a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801e76c:	f816 5c02 	ldrb.w	r5, [r6, #-2]
 801e770:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801e774:	fb15 f504 	smulbb	r5, r5, r4
 801e778:	fb00 500e 	mla	r0, r0, lr, r5
 801e77c:	b280      	uxth	r0, r0
 801e77e:	1c45      	adds	r5, r0, #1
 801e780:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 801e784:	1200      	asrs	r0, r0, #8
 801e786:	f806 0c02 	strb.w	r0, [r6, #-2]
 801e78a:	9812      	ldr	r0, [sp, #72]	; 0x48
 801e78c:	4343      	muls	r3, r0
 801e78e:	9811      	ldr	r0, [sp, #68]	; 0x44
 801e790:	fb07 3300 	mla	r3, r7, r0, r3
 801e794:	981d      	ldr	r0, [sp, #116]	; 0x74
 801e796:	fb01 3100 	mla	r1, r1, r0, r3
 801e79a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801e79c:	fb02 1203 	mla	r2, r2, r3, r1
 801e7a0:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801e7a4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801e7a8:	fb11 f104 	smulbb	r1, r1, r4
 801e7ac:	fb02 120e 	mla	r2, r2, lr, r1
 801e7b0:	b292      	uxth	r2, r2
 801e7b2:	1c53      	adds	r3, r2, #1
 801e7b4:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801e7b8:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 801e7ba:	4498      	add	r8, r3
 801e7bc:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 801e7be:	1212      	asrs	r2, r2, #8
 801e7c0:	f806 2c01 	strb.w	r2, [r6, #-1]
 801e7c4:	449b      	add	fp, r3
 801e7c6:	3603      	adds	r6, #3
 801e7c8:	f10c 3cff 	add.w	ip, ip, #4294967295
 801e7cc:	e64d      	b.n	801e46a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 801e7ce:	b021      	add	sp, #132	; 0x84
 801e7d0:	ecbd 8b08 	vpop	{d8-d11}
 801e7d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e7d8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 801e7d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e7dc:	b085      	sub	sp, #20
 801e7de:	e9dd c70f 	ldrd	ip, r7, [sp, #60]	; 0x3c
 801e7e2:	fb07 ce03 	mla	lr, r7, r3, ip
 801e7e6:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 801e7ea:	9403      	str	r4, [sp, #12]
 801e7ec:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801e7f0:	2f00      	cmp	r7, #0
 801e7f2:	f9bd 9038 	ldrsh.w	r9, [sp, #56]	; 0x38
 801e7f6:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 801e7fa:	780c      	ldrb	r4, [r1, #0]
 801e7fc:	784d      	ldrb	r5, [r1, #1]
 801e7fe:	788e      	ldrb	r6, [r1, #2]
 801e800:	eb02 0b0e 	add.w	fp, r2, lr
 801e804:	db56      	blt.n	801e8b4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 801e806:	45b9      	cmp	r9, r7
 801e808:	dd54      	ble.n	801e8b4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 801e80a:	f1bc 0f00 	cmp.w	ip, #0
 801e80e:	db4d      	blt.n	801e8ac <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 801e810:	4563      	cmp	r3, ip
 801e812:	dd4b      	ble.n	801e8ac <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 801e814:	f812 200e 	ldrb.w	r2, [r2, lr]
 801e818:	9200      	str	r2, [sp, #0]
 801e81a:	f89b 2001 	ldrb.w	r2, [fp, #1]
 801e81e:	9201      	str	r2, [sp, #4]
 801e820:	f89b 2002 	ldrb.w	r2, [fp, #2]
 801e824:	9202      	str	r2, [sp, #8]
 801e826:	f11c 0201 	adds.w	r2, ip, #1
 801e82a:	d44a      	bmi.n	801e8c2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 801e82c:	4293      	cmp	r3, r2
 801e82e:	dd48      	ble.n	801e8c2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 801e830:	2800      	cmp	r0, #0
 801e832:	d046      	beq.n	801e8c2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 801e834:	f89b e003 	ldrb.w	lr, [fp, #3]
 801e838:	f89b 8004 	ldrb.w	r8, [fp, #4]
 801e83c:	f89b a005 	ldrb.w	sl, [fp, #5]
 801e840:	3701      	adds	r7, #1
 801e842:	d446      	bmi.n	801e8d2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 801e844:	45b9      	cmp	r9, r7
 801e846:	dd44      	ble.n	801e8d2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 801e848:	9a03      	ldr	r2, [sp, #12]
 801e84a:	2a00      	cmp	r2, #0
 801e84c:	d045      	beq.n	801e8da <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x102>
 801e84e:	f1bc 0f00 	cmp.w	ip, #0
 801e852:	db3a      	blt.n	801e8ca <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 801e854:	4563      	cmp	r3, ip
 801e856:	dd38      	ble.n	801e8ca <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 801e858:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801e85c:	f04f 0903 	mov.w	r9, #3
 801e860:	f81b 7002 	ldrb.w	r7, [fp, r2]
 801e864:	fb03 b209 	mla	r2, r3, r9, fp
 801e868:	fb03 b909 	mla	r9, r3, r9, fp
 801e86c:	7852      	ldrb	r2, [r2, #1]
 801e86e:	f899 9002 	ldrb.w	r9, [r9, #2]
 801e872:	f11c 0c01 	adds.w	ip, ip, #1
 801e876:	d40d      	bmi.n	801e894 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 801e878:	4563      	cmp	r3, ip
 801e87a:	dd0b      	ble.n	801e894 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 801e87c:	b160      	cbz	r0, 801e898 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc0>
 801e87e:	2603      	movs	r6, #3
 801e880:	fb13 6406 	smlabb	r4, r3, r6, r6
 801e884:	fb03 b506 	mla	r5, r3, r6, fp
 801e888:	fb03 b306 	mla	r3, r3, r6, fp
 801e88c:	f81b 4004 	ldrb.w	r4, [fp, r4]
 801e890:	792d      	ldrb	r5, [r5, #4]
 801e892:	795e      	ldrb	r6, [r3, #5]
 801e894:	280f      	cmp	r0, #15
 801e896:	d802      	bhi.n	801e89e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 801e898:	9b03      	ldr	r3, [sp, #12]
 801e89a:	2b0f      	cmp	r3, #15
 801e89c:	d922      	bls.n	801e8e4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x10c>
 801e89e:	4b2f      	ldr	r3, [pc, #188]	; (801e95c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x184>)
 801e8a0:	4a2f      	ldr	r2, [pc, #188]	; (801e960 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x188>)
 801e8a2:	4830      	ldr	r0, [pc, #192]	; (801e964 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x18c>)
 801e8a4:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 801e8a8:	f003 ffa2 	bl	80227f0 <__assert_func>
 801e8ac:	e9cd 5601 	strd	r5, r6, [sp, #4]
 801e8b0:	9400      	str	r4, [sp, #0]
 801e8b2:	e7b8      	b.n	801e826 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x4e>
 801e8b4:	46b2      	mov	sl, r6
 801e8b6:	46a8      	mov	r8, r5
 801e8b8:	46a6      	mov	lr, r4
 801e8ba:	e9cd 5601 	strd	r5, r6, [sp, #4]
 801e8be:	9400      	str	r4, [sp, #0]
 801e8c0:	e7be      	b.n	801e840 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 801e8c2:	46b2      	mov	sl, r6
 801e8c4:	46a8      	mov	r8, r5
 801e8c6:	46a6      	mov	lr, r4
 801e8c8:	e7ba      	b.n	801e840 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 801e8ca:	46b1      	mov	r9, r6
 801e8cc:	462a      	mov	r2, r5
 801e8ce:	4627      	mov	r7, r4
 801e8d0:	e7cf      	b.n	801e872 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 801e8d2:	46b1      	mov	r9, r6
 801e8d4:	462a      	mov	r2, r5
 801e8d6:	4627      	mov	r7, r4
 801e8d8:	e7dc      	b.n	801e894 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 801e8da:	280f      	cmp	r0, #15
 801e8dc:	d8df      	bhi.n	801e89e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 801e8de:	46b1      	mov	r9, r6
 801e8e0:	462a      	mov	r2, r5
 801e8e2:	4627      	mov	r7, r4
 801e8e4:	f8bd b00c 	ldrh.w	fp, [sp, #12]
 801e8e8:	b280      	uxth	r0, r0
 801e8ea:	fb00 f30b 	mul.w	r3, r0, fp
 801e8ee:	0100      	lsls	r0, r0, #4
 801e8f0:	ebc3 1b0b 	rsb	fp, r3, fp, lsl #4
 801e8f4:	f5c0 7c80 	rsb	ip, r0, #256	; 0x100
 801e8f8:	1ac0      	subs	r0, r0, r3
 801e8fa:	fa1f fb8b 	uxth.w	fp, fp
 801e8fe:	b280      	uxth	r0, r0
 801e900:	9003      	str	r0, [sp, #12]
 801e902:	ebac 0c0b 	sub.w	ip, ip, fp
 801e906:	fb00 fe0e 	mul.w	lr, r0, lr
 801e90a:	9800      	ldr	r0, [sp, #0]
 801e90c:	fa1f fc8c 	uxth.w	ip, ip
 801e910:	fb0c ee00 	mla	lr, ip, r0, lr
 801e914:	9803      	ldr	r0, [sp, #12]
 801e916:	fb00 f808 	mul.w	r8, r0, r8
 801e91a:	9801      	ldr	r0, [sp, #4]
 801e91c:	fb0c 8800 	mla	r8, ip, r0, r8
 801e920:	fb0b 8202 	mla	r2, fp, r2, r8
 801e924:	fb03 2505 	mla	r5, r3, r5, r2
 801e928:	9a03      	ldr	r2, [sp, #12]
 801e92a:	fb02 f00a 	mul.w	r0, r2, sl
 801e92e:	9a02      	ldr	r2, [sp, #8]
 801e930:	fb0c 0c02 	mla	ip, ip, r2, r0
 801e934:	fb0b ee07 	mla	lr, fp, r7, lr
 801e938:	fb0b c909 	mla	r9, fp, r9, ip
 801e93c:	fb03 ee04 	mla	lr, r3, r4, lr
 801e940:	fb03 9606 	mla	r6, r3, r6, r9
 801e944:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801e948:	122d      	asrs	r5, r5, #8
 801e94a:	1236      	asrs	r6, r6, #8
 801e94c:	f881 e000 	strb.w	lr, [r1]
 801e950:	704d      	strb	r5, [r1, #1]
 801e952:	708e      	strb	r6, [r1, #2]
 801e954:	b005      	add	sp, #20
 801e956:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e95a:	bf00      	nop
 801e95c:	08027814 	.word	0x08027814
 801e960:	08027d0a 	.word	0x08027d0a
 801e964:	080278dd 	.word	0x080278dd

0801e968 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801e968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e96c:	ed2d 8b0a 	vpush	{d8-d12}
 801e970:	b09d      	sub	sp, #116	; 0x74
 801e972:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
 801e976:	9306      	str	r3, [sp, #24]
 801e978:	f9bd 30e0 	ldrsh.w	r3, [sp, #224]	; 0xe0
 801e97c:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 801e97e:	9307      	str	r3, [sp, #28]
 801e980:	f9bd 30e4 	ldrsh.w	r3, [sp, #228]	; 0xe4
 801e984:	9309      	str	r3, [sp, #36]	; 0x24
 801e986:	e9dd 1336 	ldrd	r1, r3, [sp, #216]	; 0xd8
 801e98a:	901b      	str	r0, [sp, #108]	; 0x6c
 801e98c:	6850      	ldr	r0, [r2, #4]
 801e98e:	6812      	ldr	r2, [r2, #0]
 801e990:	fb00 1303 	mla	r3, r0, r3, r1
 801e994:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e998:	18d3      	adds	r3, r2, r3
 801e99a:	9308      	str	r3, [sp, #32]
 801e99c:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 801e99e:	9907      	ldr	r1, [sp, #28]
 801e9a0:	681b      	ldr	r3, [r3, #0]
 801e9a2:	930a      	str	r3, [sp, #40]	; 0x28
 801e9a4:	2203      	movs	r2, #3
 801e9a6:	f06f 0304 	mvn.w	r3, #4
 801e9aa:	e9dd 6531 	ldrd	r6, r5, [sp, #196]	; 0xc4
 801e9ae:	fb11 3302 	smlabb	r3, r1, r2, r3
 801e9b2:	eeb0 aa40 	vmov.f32	s20, s0
 801e9b6:	eef0 9a60 	vmov.f32	s19, s1
 801e9ba:	eeb0 9a41 	vmov.f32	s18, s2
 801e9be:	eeb0 8a62 	vmov.f32	s16, s5
 801e9c2:	eef0 8a43 	vmov.f32	s17, s6
 801e9c6:	eeb0 ca44 	vmov.f32	s24, s8
 801e9ca:	eef0 ba64 	vmov.f32	s23, s9
 801e9ce:	eeb0 ba45 	vmov.f32	s22, s10
 801e9d2:	930b      	str	r3, [sp, #44]	; 0x2c
 801e9d4:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 801e9d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e9da:	2b00      	cmp	r3, #0
 801e9dc:	dc03      	bgt.n	801e9e6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 801e9de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e9e0:	2b00      	cmp	r3, #0
 801e9e2:	f340 8193 	ble.w	801ed0c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a4>
 801e9e6:	9b06      	ldr	r3, [sp, #24]
 801e9e8:	2b00      	cmp	r3, #0
 801e9ea:	f340 80d0 	ble.w	801eb8e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x226>
 801e9ee:	1432      	asrs	r2, r6, #16
 801e9f0:	ea4f 4325 	mov.w	r3, r5, asr #16
 801e9f4:	d42f      	bmi.n	801ea56 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xee>
 801e9f6:	9807      	ldr	r0, [sp, #28]
 801e9f8:	1c51      	adds	r1, r2, #1
 801e9fa:	4281      	cmp	r1, r0
 801e9fc:	da2e      	bge.n	801ea5c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 801e9fe:	2b00      	cmp	r3, #0
 801ea00:	db2c      	blt.n	801ea5c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 801ea02:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ea04:	1c59      	adds	r1, r3, #1
 801ea06:	4288      	cmp	r0, r1
 801ea08:	dd28      	ble.n	801ea5c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 801ea0a:	9b06      	ldr	r3, [sp, #24]
 801ea0c:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 801ea0e:	3b01      	subs	r3, #1
 801ea10:	fb02 6203 	mla	r2, r2, r3, r6
 801ea14:	1412      	asrs	r2, r2, #16
 801ea16:	d42c      	bmi.n	801ea72 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 801ea18:	9907      	ldr	r1, [sp, #28]
 801ea1a:	3201      	adds	r2, #1
 801ea1c:	4291      	cmp	r1, r2
 801ea1e:	dd28      	ble.n	801ea72 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 801ea20:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 801ea22:	fb02 5303 	mla	r3, r2, r3, r5
 801ea26:	141b      	asrs	r3, r3, #16
 801ea28:	d423      	bmi.n	801ea72 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 801ea2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ea2c:	3301      	adds	r3, #1
 801ea2e:	429a      	cmp	r2, r3
 801ea30:	dd1f      	ble.n	801ea72 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 801ea32:	9b08      	ldr	r3, [sp, #32]
 801ea34:	f8dd e018 	ldr.w	lr, [sp, #24]
 801ea38:	f103 0c03 	add.w	ip, r3, #3
 801ea3c:	f1be 0f00 	cmp.w	lr, #0
 801ea40:	f300 80fa 	bgt.w	801ec38 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d0>
 801ea44:	9b06      	ldr	r3, [sp, #24]
 801ea46:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801ea4a:	9b08      	ldr	r3, [sp, #32]
 801ea4c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801ea50:	4423      	add	r3, r4
 801ea52:	9308      	str	r3, [sp, #32]
 801ea54:	e09d      	b.n	801eb92 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x22a>
 801ea56:	1c51      	adds	r1, r2, #1
 801ea58:	f040 808e 	bne.w	801eb78 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 801ea5c:	9907      	ldr	r1, [sp, #28]
 801ea5e:	428a      	cmp	r2, r1
 801ea60:	f280 808a 	bge.w	801eb78 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 801ea64:	1c5f      	adds	r7, r3, #1
 801ea66:	f2c0 8087 	blt.w	801eb78 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 801ea6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ea6c:	4293      	cmp	r3, r2
 801ea6e:	f280 8083 	bge.w	801eb78 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 801ea72:	9f06      	ldr	r7, [sp, #24]
 801ea74:	f8dd a020 	ldr.w	sl, [sp, #32]
 801ea78:	2f00      	cmp	r7, #0
 801ea7a:	dde3      	ble.n	801ea44 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xdc>
 801ea7c:	1432      	asrs	r2, r6, #16
 801ea7e:	ea4f 4325 	mov.w	r3, r5, asr #16
 801ea82:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801ea86:	f3c5 3b03 	ubfx	fp, r5, #12, #4
 801ea8a:	f100 80bf 	bmi.w	801ec0c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a4>
 801ea8e:	9c07      	ldr	r4, [sp, #28]
 801ea90:	1c50      	adds	r0, r2, #1
 801ea92:	4284      	cmp	r4, r0
 801ea94:	f340 80bc 	ble.w	801ec10 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 801ea98:	2b00      	cmp	r3, #0
 801ea9a:	f2c0 80b9 	blt.w	801ec10 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 801ea9e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801eaa0:	1c58      	adds	r0, r3, #1
 801eaa2:	4284      	cmp	r4, r0
 801eaa4:	f340 80b4 	ble.w	801ec10 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 801eaa8:	9807      	ldr	r0, [sp, #28]
 801eaaa:	fb00 2303 	mla	r3, r0, r3, r2
 801eaae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801eab0:	980a      	ldr	r0, [sp, #40]	; 0x28
 801eab2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801eab6:	441a      	add	r2, r3
 801eab8:	f810 c003 	ldrb.w	ip, [r0, r3]
 801eabc:	7953      	ldrb	r3, [r2, #5]
 801eabe:	7850      	ldrb	r0, [r2, #1]
 801eac0:	f892 e002 	ldrb.w	lr, [r2, #2]
 801eac4:	f892 9003 	ldrb.w	r9, [r2, #3]
 801eac8:	f892 8004 	ldrb.w	r8, [r2, #4]
 801eacc:	930e      	str	r3, [sp, #56]	; 0x38
 801eace:	f1bb 0f00 	cmp.w	fp, #0
 801ead2:	d00f      	beq.n	801eaf4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18c>
 801ead4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ead6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801ead8:	3205      	adds	r2, #5
 801eada:	18d3      	adds	r3, r2, r3
 801eadc:	5d12      	ldrb	r2, [r2, r4]
 801eade:	920f      	str	r2, [sp, #60]	; 0x3c
 801eae0:	785a      	ldrb	r2, [r3, #1]
 801eae2:	9211      	str	r2, [sp, #68]	; 0x44
 801eae4:	789a      	ldrb	r2, [r3, #2]
 801eae6:	9213      	str	r2, [sp, #76]	; 0x4c
 801eae8:	78da      	ldrb	r2, [r3, #3]
 801eaea:	9210      	str	r2, [sp, #64]	; 0x40
 801eaec:	791a      	ldrb	r2, [r3, #4]
 801eaee:	795b      	ldrb	r3, [r3, #5]
 801eaf0:	9212      	str	r2, [sp, #72]	; 0x48
 801eaf2:	9314      	str	r3, [sp, #80]	; 0x50
 801eaf4:	b28b      	uxth	r3, r1
 801eaf6:	fa1f f28b 	uxth.w	r2, fp
 801eafa:	fb03 fb02 	mul.w	fp, r3, r2
 801eafe:	ebcb 1202 	rsb	r2, fp, r2, lsl #4
 801eb02:	011b      	lsls	r3, r3, #4
 801eb04:	b292      	uxth	r2, r2
 801eb06:	f5c3 7180 	rsb	r1, r3, #256	; 0x100
 801eb0a:	eba3 030b 	sub.w	r3, r3, fp
 801eb0e:	b29b      	uxth	r3, r3
 801eb10:	1a89      	subs	r1, r1, r2
 801eb12:	b289      	uxth	r1, r1
 801eb14:	fb03 f808 	mul.w	r8, r3, r8
 801eb18:	fb01 8800 	mla	r8, r1, r0, r8
 801eb1c:	9811      	ldr	r0, [sp, #68]	; 0x44
 801eb1e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801eb20:	fb02 8800 	mla	r8, r2, r0, r8
 801eb24:	9812      	ldr	r0, [sp, #72]	; 0x48
 801eb26:	fb0b 8800 	mla	r8, fp, r0, r8
 801eb2a:	980e      	ldr	r0, [sp, #56]	; 0x38
 801eb2c:	fb03 f909 	mul.w	r9, r3, r9
 801eb30:	4343      	muls	r3, r0
 801eb32:	fb01 330e 	mla	r3, r1, lr, r3
 801eb36:	fb01 990c 	mla	r9, r1, ip, r9
 801eb3a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 801eb3c:	fb02 9904 	mla	r9, r2, r4, r9
 801eb40:	fb02 3201 	mla	r2, r2, r1, r3
 801eb44:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801eb46:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801eb48:	fb0b 9904 	mla	r9, fp, r4, r9
 801eb4c:	fb0b 2b03 	mla	fp, fp, r3, r2
 801eb50:	ea4f 2929 	mov.w	r9, r9, asr #8
 801eb54:	ea4f 2828 	mov.w	r8, r8, asr #8
 801eb58:	ea4f 2b2b 	mov.w	fp, fp, asr #8
 801eb5c:	f88a 9000 	strb.w	r9, [sl]
 801eb60:	f88a 8001 	strb.w	r8, [sl, #1]
 801eb64:	f88a b002 	strb.w	fp, [sl, #2]
 801eb68:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 801eb6a:	441e      	add	r6, r3
 801eb6c:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801eb6e:	f10a 0a03 	add.w	sl, sl, #3
 801eb72:	441d      	add	r5, r3
 801eb74:	3f01      	subs	r7, #1
 801eb76:	e77f      	b.n	801ea78 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x110>
 801eb78:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 801eb7a:	441e      	add	r6, r3
 801eb7c:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801eb7e:	441d      	add	r5, r3
 801eb80:	9b06      	ldr	r3, [sp, #24]
 801eb82:	3b01      	subs	r3, #1
 801eb84:	9306      	str	r3, [sp, #24]
 801eb86:	9b08      	ldr	r3, [sp, #32]
 801eb88:	3303      	adds	r3, #3
 801eb8a:	9308      	str	r3, [sp, #32]
 801eb8c:	e72b      	b.n	801e9e6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 801eb8e:	f47f af3c 	bne.w	801ea0a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa2>
 801eb92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801eb94:	2b00      	cmp	r3, #0
 801eb96:	f340 80b9 	ble.w	801ed0c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a4>
 801eb9a:	ee3a aa0c 	vadd.f32	s20, s20, s24
 801eb9e:	ee79 9aab 	vadd.f32	s19, s19, s23
 801eba2:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 801eba6:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801eba8:	ee39 9a0b 	vadd.f32	s18, s18, s22
 801ebac:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801ebb0:	eef0 6a48 	vmov.f32	s13, s16
 801ebb4:	ee69 7a27 	vmul.f32	s15, s18, s15
 801ebb8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ebbc:	ee37 8a48 	vsub.f32	s16, s14, s16
 801ebc0:	ee16 6a90 	vmov	r6, s13
 801ebc4:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801ebc8:	eef0 6a68 	vmov.f32	s13, s17
 801ebcc:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801ebd0:	ee18 2a10 	vmov	r2, s16
 801ebd4:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801ebd8:	fb92 f3f3 	sdiv	r3, r2, r3
 801ebdc:	ee18 2a90 	vmov	r2, s17
 801ebe0:	9333      	str	r3, [sp, #204]	; 0xcc
 801ebe2:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801ebe4:	fb92 f3f3 	sdiv	r3, r2, r3
 801ebe8:	9334      	str	r3, [sp, #208]	; 0xd0
 801ebea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ebec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ebee:	3b01      	subs	r3, #1
 801ebf0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ebf4:	930c      	str	r3, [sp, #48]	; 0x30
 801ebf6:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801ebf8:	bf08      	it	eq
 801ebfa:	4613      	moveq	r3, r2
 801ebfc:	ee16 5a90 	vmov	r5, s13
 801ec00:	9306      	str	r3, [sp, #24]
 801ec02:	eef0 8a67 	vmov.f32	s17, s15
 801ec06:	eeb0 8a47 	vmov.f32	s16, s14
 801ec0a:	e6e5      	b.n	801e9d8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 801ec0c:	1c54      	adds	r4, r2, #1
 801ec0e:	d1ab      	bne.n	801eb68 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 801ec10:	9807      	ldr	r0, [sp, #28]
 801ec12:	4282      	cmp	r2, r0
 801ec14:	daa8      	bge.n	801eb68 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 801ec16:	1c58      	adds	r0, r3, #1
 801ec18:	dba6      	blt.n	801eb68 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 801ec1a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ec1c:	4298      	cmp	r0, r3
 801ec1e:	dda3      	ble.n	801eb68 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 801ec20:	e9cd 2301 	strd	r2, r3, [sp, #4]
 801ec24:	e9cd 1b03 	strd	r1, fp, [sp, #12]
 801ec28:	9000      	str	r0, [sp, #0]
 801ec2a:	9b07      	ldr	r3, [sp, #28]
 801ec2c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ec2e:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801ec30:	4651      	mov	r1, sl
 801ec32:	f7ff fdd1 	bl	801e7d8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 801ec36:	e797      	b.n	801eb68 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 801ec38:	9c07      	ldr	r4, [sp, #28]
 801ec3a:	1431      	asrs	r1, r6, #16
 801ec3c:	1428      	asrs	r0, r5, #16
 801ec3e:	fb04 1000 	mla	r0, r4, r0, r1
 801ec42:	990a      	ldr	r1, [sp, #40]	; 0x28
 801ec44:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801ec46:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801ec4a:	4401      	add	r1, r0
 801ec4c:	f3c5 3203 	ubfx	r2, r5, #12, #4
 801ec50:	5c20      	ldrb	r0, [r4, r0]
 801ec52:	900e      	str	r0, [sp, #56]	; 0x38
 801ec54:	f3c6 3303 	ubfx	r3, r6, #12, #4
 801ec58:	7848      	ldrb	r0, [r1, #1]
 801ec5a:	f891 8002 	ldrb.w	r8, [r1, #2]
 801ec5e:	f891 a003 	ldrb.w	sl, [r1, #3]
 801ec62:	f891 9004 	ldrb.w	r9, [r1, #4]
 801ec66:	f891 b005 	ldrb.w	fp, [r1, #5]
 801ec6a:	b172      	cbz	r2, 801ec8a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x322>
 801ec6c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801ec6e:	3105      	adds	r1, #5
 801ec70:	190f      	adds	r7, r1, r4
 801ec72:	5d09      	ldrb	r1, [r1, r4]
 801ec74:	9115      	str	r1, [sp, #84]	; 0x54
 801ec76:	7879      	ldrb	r1, [r7, #1]
 801ec78:	9117      	str	r1, [sp, #92]	; 0x5c
 801ec7a:	78b9      	ldrb	r1, [r7, #2]
 801ec7c:	9119      	str	r1, [sp, #100]	; 0x64
 801ec7e:	78f9      	ldrb	r1, [r7, #3]
 801ec80:	9116      	str	r1, [sp, #88]	; 0x58
 801ec82:	7939      	ldrb	r1, [r7, #4]
 801ec84:	9118      	str	r1, [sp, #96]	; 0x60
 801ec86:	7979      	ldrb	r1, [r7, #5]
 801ec88:	911a      	str	r1, [sp, #104]	; 0x68
 801ec8a:	b29b      	uxth	r3, r3
 801ec8c:	b292      	uxth	r2, r2
 801ec8e:	fb03 f102 	mul.w	r1, r3, r2
 801ec92:	ebc1 1202 	rsb	r2, r1, r2, lsl #4
 801ec96:	011b      	lsls	r3, r3, #4
 801ec98:	b292      	uxth	r2, r2
 801ec9a:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 801ec9e:	1a5b      	subs	r3, r3, r1
 801eca0:	b29b      	uxth	r3, r3
 801eca2:	1abf      	subs	r7, r7, r2
 801eca4:	b2bf      	uxth	r7, r7
 801eca6:	fb03 f909 	mul.w	r9, r3, r9
 801ecaa:	fb07 9900 	mla	r9, r7, r0, r9
 801ecae:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801ecb0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801ecb2:	fb02 9900 	mla	r9, r2, r0, r9
 801ecb6:	9818      	ldr	r0, [sp, #96]	; 0x60
 801ecb8:	fb03 fa0a 	mul.w	sl, r3, sl
 801ecbc:	fb01 9900 	mla	r9, r1, r0, r9
 801ecc0:	fb07 aa04 	mla	sl, r7, r4, sl
 801ecc4:	fb03 f30b 	mul.w	r3, r3, fp
 801ecc8:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801ecca:	9819      	ldr	r0, [sp, #100]	; 0x64
 801eccc:	fb07 3308 	mla	r3, r7, r8, r3
 801ecd0:	fb02 aa04 	mla	sl, r2, r4, sl
 801ecd4:	fb02 3200 	mla	r2, r2, r0, r3
 801ecd8:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801ecda:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801ecdc:	fb01 aa04 	mla	sl, r1, r4, sl
 801ece0:	fb01 2103 	mla	r1, r1, r3, r2
 801ece4:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 801ece6:	441e      	add	r6, r3
 801ece8:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801ecea:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801ecee:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ecf2:	1209      	asrs	r1, r1, #8
 801ecf4:	f80c ac03 	strb.w	sl, [ip, #-3]
 801ecf8:	f80c 9c02 	strb.w	r9, [ip, #-2]
 801ecfc:	f80c 1c01 	strb.w	r1, [ip, #-1]
 801ed00:	441d      	add	r5, r3
 801ed02:	f10c 0c03 	add.w	ip, ip, #3
 801ed06:	f10e 3eff 	add.w	lr, lr, #4294967295
 801ed0a:	e697      	b.n	801ea3c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd4>
 801ed0c:	b01d      	add	sp, #116	; 0x74
 801ed0e:	ecbd 8b0a 	vpop	{d8-d12}
 801ed12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801ed18 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 801ed18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ed1c:	b085      	sub	sp, #20
 801ed1e:	e9dd c40f 	ldrd	ip, r4, [sp, #60]	; 0x3c
 801ed22:	7888      	ldrb	r0, [r1, #2]
 801ed24:	9000      	str	r0, [sp, #0]
 801ed26:	7848      	ldrb	r0, [r1, #1]
 801ed28:	9001      	str	r0, [sp, #4]
 801ed2a:	fb04 c603 	mla	r6, r4, r3, ip
 801ed2e:	7808      	ldrb	r0, [r1, #0]
 801ed30:	9002      	str	r0, [sp, #8]
 801ed32:	4691      	mov	r9, r2
 801ed34:	eb02 0e86 	add.w	lr, r2, r6, lsl #2
 801ed38:	9a00      	ldr	r2, [sp, #0]
 801ed3a:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
 801ed3e:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 801ed42:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 801ed46:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 801ed4a:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 801ed4e:	9a01      	ldr	r2, [sp, #4]
 801ed50:	2c00      	cmp	r4, #0
 801ed52:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 801ed56:	db3a      	blt.n	801edce <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb6>
 801ed58:	45a0      	cmp	r8, r4
 801ed5a:	dd38      	ble.n	801edce <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb6>
 801ed5c:	f1bc 0f00 	cmp.w	ip, #0
 801ed60:	db33      	blt.n	801edca <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb2>
 801ed62:	4563      	cmp	r3, ip
 801ed64:	dd31      	ble.n	801edca <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb2>
 801ed66:	f859 2026 	ldr.w	r2, [r9, r6, lsl #2]
 801ed6a:	f11c 0601 	adds.w	r6, ip, #1
 801ed6e:	d431      	bmi.n	801edd4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xbc>
 801ed70:	42b3      	cmp	r3, r6
 801ed72:	dd2f      	ble.n	801edd4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xbc>
 801ed74:	b375      	cbz	r5, 801edd4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xbc>
 801ed76:	f8de 6004 	ldr.w	r6, [lr, #4]
 801ed7a:	3401      	adds	r4, #1
 801ed7c:	d42e      	bmi.n	801eddc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc4>
 801ed7e:	45a0      	cmp	r8, r4
 801ed80:	dd2c      	ble.n	801eddc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc4>
 801ed82:	b35f      	cbz	r7, 801eddc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc4>
 801ed84:	f1bc 0f00 	cmp.w	ip, #0
 801ed88:	db26      	blt.n	801edd8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc0>
 801ed8a:	4563      	cmp	r3, ip
 801ed8c:	dd24      	ble.n	801edd8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc0>
 801ed8e:	f85e 4023 	ldr.w	r4, [lr, r3, lsl #2]
 801ed92:	f11c 0c01 	adds.w	ip, ip, #1
 801ed96:	d405      	bmi.n	801eda4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 801ed98:	4563      	cmp	r3, ip
 801ed9a:	dd03      	ble.n	801eda4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 801ed9c:	b115      	cbz	r5, 801eda4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 801ed9e:	3301      	adds	r3, #1
 801eda0:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 801eda4:	2d0f      	cmp	r5, #15
 801eda6:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 801edaa:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801edae:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801edb2:	ea4f 6810 	mov.w	r8, r0, lsr #24
 801edb6:	d801      	bhi.n	801edbc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xa4>
 801edb8:	2f0f      	cmp	r7, #15
 801edba:	d911      	bls.n	801ede0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc8>
 801edbc:	4b7f      	ldr	r3, [pc, #508]	; (801efbc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2a4>)
 801edbe:	4a80      	ldr	r2, [pc, #512]	; (801efc0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2a8>)
 801edc0:	4880      	ldr	r0, [pc, #512]	; (801efc4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2ac>)
 801edc2:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 801edc6:	f003 fd13 	bl	80227f0 <__assert_func>
 801edca:	4602      	mov	r2, r0
 801edcc:	e7cd      	b.n	801ed6a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x52>
 801edce:	4606      	mov	r6, r0
 801edd0:	4602      	mov	r2, r0
 801edd2:	e7d2      	b.n	801ed7a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x62>
 801edd4:	4606      	mov	r6, r0
 801edd6:	e7d0      	b.n	801ed7a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x62>
 801edd8:	4604      	mov	r4, r0
 801edda:	e7da      	b.n	801ed92 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x7a>
 801eddc:	4604      	mov	r4, r0
 801edde:	e7e1      	b.n	801eda4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 801ede0:	b2ab      	uxth	r3, r5
 801ede2:	b2bf      	uxth	r7, r7
 801ede4:	fb03 fe07 	mul.w	lr, r3, r7
 801ede8:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 801edec:	011b      	lsls	r3, r3, #4
 801edee:	eba3 0c0e 	sub.w	ip, r3, lr
 801edf2:	b2bf      	uxth	r7, r7
 801edf4:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 801edf8:	fa1f fc8c 	uxth.w	ip, ip
 801edfc:	1bed      	subs	r5, r5, r7
 801edfe:	b2ad      	uxth	r5, r5
 801ee00:	fb0c f30a 	mul.w	r3, ip, sl
 801ee04:	fb05 330b 	mla	r3, r5, fp, r3
 801ee08:	fb07 3309 	mla	r3, r7, r9, r3
 801ee0c:	fb0e 3308 	mla	r3, lr, r8, r3
 801ee10:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801ee14:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801ee18:	9303      	str	r3, [sp, #12]
 801ee1a:	d018      	beq.n	801ee4e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x136>
 801ee1c:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 801ee20:	fb0b f303 	mul.w	r3, fp, r3
 801ee24:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801ee28:	fb0b fb02 	mul.w	fp, fp, r2
 801ee2c:	0a1a      	lsrs	r2, r3, #8
 801ee2e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801ee32:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 801ee36:	441a      	add	r2, r3
 801ee38:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 801ee3c:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 801ee40:	0a12      	lsrs	r2, r2, #8
 801ee42:	0a1b      	lsrs	r3, r3, #8
 801ee44:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801ee48:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801ee4c:	431a      	orrs	r2, r3
 801ee4e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801ee52:	d019      	beq.n	801ee88 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x170>
 801ee54:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 801ee58:	fb0a fb0b 	mul.w	fp, sl, fp
 801ee5c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801ee60:	fb0a fa06 	mul.w	sl, sl, r6
 801ee64:	ea4f 261b 	mov.w	r6, fp, lsr #8
 801ee68:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801ee6c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801ee70:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 801ee74:	445e      	add	r6, fp
 801ee76:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 801ee7a:	0a36      	lsrs	r6, r6, #8
 801ee7c:	0a1b      	lsrs	r3, r3, #8
 801ee7e:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801ee82:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801ee86:	431e      	orrs	r6, r3
 801ee88:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801ee8c:	d019      	beq.n	801eec2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1aa>
 801ee8e:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 801ee92:	fb09 fa0a 	mul.w	sl, r9, sl
 801ee96:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801ee9a:	fb09 f904 	mul.w	r9, r9, r4
 801ee9e:	ea4f 241a 	mov.w	r4, sl, lsr #8
 801eea2:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801eea6:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801eeaa:	f509 7380 	add.w	r3, r9, #256	; 0x100
 801eeae:	4454      	add	r4, sl
 801eeb0:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 801eeb4:	0a24      	lsrs	r4, r4, #8
 801eeb6:	0a1b      	lsrs	r3, r3, #8
 801eeb8:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801eebc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801eec0:	431c      	orrs	r4, r3
 801eec2:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801eec6:	d019      	beq.n	801eefc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1e4>
 801eec8:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 801eecc:	fb08 f909 	mul.w	r9, r8, r9
 801eed0:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801eed4:	fb08 f800 	mul.w	r8, r8, r0
 801eed8:	ea4f 2019 	mov.w	r0, r9, lsr #8
 801eedc:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801eee0:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 801eee4:	f508 7380 	add.w	r3, r8, #256	; 0x100
 801eee8:	4448      	add	r0, r9
 801eeea:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 801eeee:	0a00      	lsrs	r0, r0, #8
 801eef0:	0a1b      	lsrs	r3, r3, #8
 801eef2:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801eef6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801eefa:	4318      	orrs	r0, r3
 801eefc:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 801ef00:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801ef04:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 801ef08:	fb0c f808 	mul.w	r8, ip, r8
 801ef0c:	fb0c f606 	mul.w	r6, ip, r6
 801ef10:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801ef14:	fb05 8803 	mla	r8, r5, r3, r8
 801ef18:	fb05 6202 	mla	r2, r5, r2, r6
 801ef1c:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 801ef20:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801ef24:	fb07 8803 	mla	r8, r7, r3, r8
 801ef28:	fb07 2704 	mla	r7, r7, r4, r2
 801ef2c:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 801ef30:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
 801ef34:	9c02      	ldr	r4, [sp, #8]
 801ef36:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801ef3a:	fb0e 8303 	mla	r3, lr, r3, r8
 801ef3e:	fb0e 7e00 	mla	lr, lr, r0, r7
 801ef42:	9803      	ldr	r0, [sp, #12]
 801ef44:	b292      	uxth	r2, r2
 801ef46:	0a1b      	lsrs	r3, r3, #8
 801ef48:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ef4c:	4350      	muls	r0, r2
 801ef4e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801ef52:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801ef56:	ea43 0e0e 	orr.w	lr, r3, lr
 801ef5a:	1c43      	adds	r3, r0, #1
 801ef5c:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801ef60:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 801ef64:	b2db      	uxtb	r3, r3
 801ef66:	fb14 f403 	smulbb	r4, r4, r3
 801ef6a:	fa5f f08e 	uxtb.w	r0, lr
 801ef6e:	fb00 4002 	mla	r0, r0, r2, r4
 801ef72:	b280      	uxth	r0, r0
 801ef74:	1c44      	adds	r4, r0, #1
 801ef76:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 801ef7a:	9c01      	ldr	r4, [sp, #4]
 801ef7c:	1200      	asrs	r0, r0, #8
 801ef7e:	fb14 f403 	smulbb	r4, r4, r3
 801ef82:	7008      	strb	r0, [r1, #0]
 801ef84:	f3ce 2007 	ubfx	r0, lr, #8, #8
 801ef88:	fb00 4002 	mla	r0, r0, r2, r4
 801ef8c:	b280      	uxth	r0, r0
 801ef8e:	1c44      	adds	r4, r0, #1
 801ef90:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 801ef94:	1200      	asrs	r0, r0, #8
 801ef96:	7048      	strb	r0, [r1, #1]
 801ef98:	9800      	ldr	r0, [sp, #0]
 801ef9a:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 801ef9e:	fb10 f303 	smulbb	r3, r0, r3
 801efa2:	fb0e 3202 	mla	r2, lr, r2, r3
 801efa6:	b292      	uxth	r2, r2
 801efa8:	f102 0e01 	add.w	lr, r2, #1
 801efac:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 801efb0:	1212      	asrs	r2, r2, #8
 801efb2:	708a      	strb	r2, [r1, #2]
 801efb4:	b005      	add	sp, #20
 801efb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801efba:	bf00      	nop
 801efbc:	08027814 	.word	0x08027814
 801efc0:	08027d0a 	.word	0x08027d0a
 801efc4:	080278dd 	.word	0x080278dd

0801efc8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801efc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801efcc:	ed2d 8b08 	vpush	{d8-d11}
 801efd0:	b099      	sub	sp, #100	; 0x64
 801efd2:	eeb0 aa40 	vmov.f32	s20, s0
 801efd6:	9306      	str	r3, [sp, #24]
 801efd8:	f9bd 30c8 	ldrsh.w	r3, [sp, #200]	; 0xc8
 801efdc:	9307      	str	r3, [sp, #28]
 801efde:	f9bd 30cc 	ldrsh.w	r3, [sp, #204]	; 0xcc
 801efe2:	9216      	str	r2, [sp, #88]	; 0x58
 801efe4:	9310      	str	r3, [sp, #64]	; 0x40
 801efe6:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801efe8:	f89d 30d4 	ldrb.w	r3, [sp, #212]	; 0xd4
 801efec:	9112      	str	r1, [sp, #72]	; 0x48
 801efee:	9315      	str	r3, [sp, #84]	; 0x54
 801eff0:	e9dd 1330 	ldrd	r1, r3, [sp, #192]	; 0xc0
 801eff4:	9017      	str	r0, [sp, #92]	; 0x5c
 801eff6:	6850      	ldr	r0, [r2, #4]
 801eff8:	6812      	ldr	r2, [r2, #0]
 801effa:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 801effc:	fb00 1303 	mla	r3, r0, r3, r1
 801f000:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f004:	18d3      	adds	r3, r2, r3
 801f006:	930a      	str	r3, [sp, #40]	; 0x28
 801f008:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801f00a:	681b      	ldr	r3, [r3, #0]
 801f00c:	9311      	str	r3, [sp, #68]	; 0x44
 801f00e:	9b07      	ldr	r3, [sp, #28]
 801f010:	009b      	lsls	r3, r3, #2
 801f012:	eef0 9a60 	vmov.f32	s19, s1
 801f016:	eeb0 9a41 	vmov.f32	s18, s2
 801f01a:	eeb0 8a62 	vmov.f32	s16, s5
 801f01e:	eef0 8a43 	vmov.f32	s17, s6
 801f022:	eef0 ba44 	vmov.f32	s23, s8
 801f026:	eeb0 ba64 	vmov.f32	s22, s9
 801f02a:	eef0 aa45 	vmov.f32	s21, s10
 801f02e:	930e      	str	r3, [sp, #56]	; 0x38
 801f030:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801f032:	2b00      	cmp	r3, #0
 801f034:	dc03      	bgt.n	801f03e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 801f036:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801f038:	2b00      	cmp	r3, #0
 801f03a:	f340 833d 	ble.w	801f6b8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6f0>
 801f03e:	9b06      	ldr	r3, [sp, #24]
 801f040:	2b00      	cmp	r3, #0
 801f042:	f340 8199 	ble.w	801f378 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b0>
 801f046:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801f048:	1412      	asrs	r2, r2, #16
 801f04a:	ea4f 4324 	mov.w	r3, r4, asr #16
 801f04e:	d432      	bmi.n	801f0b6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xee>
 801f050:	9807      	ldr	r0, [sp, #28]
 801f052:	1c51      	adds	r1, r2, #1
 801f054:	4288      	cmp	r0, r1
 801f056:	dd31      	ble.n	801f0bc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 801f058:	2b00      	cmp	r3, #0
 801f05a:	db2f      	blt.n	801f0bc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 801f05c:	9810      	ldr	r0, [sp, #64]	; 0x40
 801f05e:	1c59      	adds	r1, r3, #1
 801f060:	4288      	cmp	r0, r1
 801f062:	dd2b      	ble.n	801f0bc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 801f064:	9b06      	ldr	r3, [sp, #24]
 801f066:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801f068:	992b      	ldr	r1, [sp, #172]	; 0xac
 801f06a:	3b01      	subs	r3, #1
 801f06c:	fb02 1203 	mla	r2, r2, r3, r1
 801f070:	1412      	asrs	r2, r2, #16
 801f072:	d42e      	bmi.n	801f0d2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 801f074:	9907      	ldr	r1, [sp, #28]
 801f076:	3201      	adds	r2, #1
 801f078:	4291      	cmp	r1, r2
 801f07a:	dd2a      	ble.n	801f0d2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 801f07c:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801f07e:	fb02 4303 	mla	r3, r2, r3, r4
 801f082:	141b      	asrs	r3, r3, #16
 801f084:	d425      	bmi.n	801f0d2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 801f086:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801f088:	3301      	adds	r3, #1
 801f08a:	429a      	cmp	r2, r3
 801f08c:	dd21      	ble.n	801f0d2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 801f08e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f090:	f8bd b054 	ldrh.w	fp, [sp, #84]	; 0x54
 801f094:	f103 0e03 	add.w	lr, r3, #3
 801f098:	9b06      	ldr	r3, [sp, #24]
 801f09a:	9313      	str	r3, [sp, #76]	; 0x4c
 801f09c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801f09e:	2b00      	cmp	r3, #0
 801f0a0:	f300 81d3 	bgt.w	801f44a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x482>
 801f0a4:	9b06      	ldr	r3, [sp, #24]
 801f0a6:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801f0aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f0ac:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801f0b0:	4423      	add	r3, r4
 801f0b2:	930a      	str	r3, [sp, #40]	; 0x28
 801f0b4:	e162      	b.n	801f37c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b4>
 801f0b6:	1c51      	adds	r1, r2, #1
 801f0b8:	f040 8151 	bne.w	801f35e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x396>
 801f0bc:	9907      	ldr	r1, [sp, #28]
 801f0be:	428a      	cmp	r2, r1
 801f0c0:	f280 814d 	bge.w	801f35e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x396>
 801f0c4:	1c5a      	adds	r2, r3, #1
 801f0c6:	f2c0 814a 	blt.w	801f35e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x396>
 801f0ca:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801f0cc:	4293      	cmp	r3, r2
 801f0ce:	f280 8146 	bge.w	801f35e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x396>
 801f0d2:	9b06      	ldr	r3, [sp, #24]
 801f0d4:	9314      	str	r3, [sp, #80]	; 0x50
 801f0d6:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801f0d8:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 801f0dc:	9313      	str	r3, [sp, #76]	; 0x4c
 801f0de:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801f0e0:	2b00      	cmp	r3, #0
 801f0e2:	dddf      	ble.n	801f0a4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xdc>
 801f0e4:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801f0e6:	f3c2 3003 	ubfx	r0, r2, #12, #4
 801f0ea:	1412      	asrs	r2, r2, #16
 801f0ec:	ea4f 4324 	mov.w	r3, r4, asr #16
 801f0f0:	f3c4 3103 	ubfx	r1, r4, #12, #4
 801f0f4:	f100 8190 	bmi.w	801f418 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x450>
 801f0f8:	9f07      	ldr	r7, [sp, #28]
 801f0fa:	1c55      	adds	r5, r2, #1
 801f0fc:	42af      	cmp	r7, r5
 801f0fe:	f340 818d 	ble.w	801f41c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x454>
 801f102:	2b00      	cmp	r3, #0
 801f104:	f2c0 818a 	blt.w	801f41c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x454>
 801f108:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801f10a:	1c5d      	adds	r5, r3, #1
 801f10c:	42af      	cmp	r7, r5
 801f10e:	f340 8185 	ble.w	801f41c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x454>
 801f112:	9d07      	ldr	r5, [sp, #28]
 801f114:	fb03 2305 	mla	r3, r3, r5, r2
 801f118:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801f11a:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 801f11e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801f122:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801f126:	2800      	cmp	r0, #0
 801f128:	f000 8167 	beq.w	801f3fa <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x432>
 801f12c:	686a      	ldr	r2, [r5, #4]
 801f12e:	920b      	str	r2, [sp, #44]	; 0x2c
 801f130:	ea4f 6812 	mov.w	r8, r2, lsr #24
 801f134:	2900      	cmp	r1, #0
 801f136:	f000 8169 	beq.w	801f40c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x444>
 801f13a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801f13c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 801f13e:	18aa      	adds	r2, r5, r2
 801f140:	59ed      	ldr	r5, [r5, r7]
 801f142:	6852      	ldr	r2, [r2, #4]
 801f144:	9508      	str	r5, [sp, #32]
 801f146:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 801f14a:	920c      	str	r2, [sp, #48]	; 0x30
 801f14c:	0e15      	lsrs	r5, r2, #24
 801f14e:	b280      	uxth	r0, r0
 801f150:	b289      	uxth	r1, r1
 801f152:	fb00 fb01 	mul.w	fp, r0, r1
 801f156:	ebcb 1101 	rsb	r1, fp, r1, lsl #4
 801f15a:	0100      	lsls	r0, r0, #4
 801f15c:	eba0 090b 	sub.w	r9, r0, fp
 801f160:	b289      	uxth	r1, r1
 801f162:	f5c0 7280 	rsb	r2, r0, #256	; 0x100
 801f166:	fa1f f989 	uxth.w	r9, r9
 801f16a:	1a52      	subs	r2, r2, r1
 801f16c:	b292      	uxth	r2, r2
 801f16e:	fb09 f008 	mul.w	r0, r9, r8
 801f172:	fb02 000c 	mla	r0, r2, ip, r0
 801f176:	fb01 000a 	mla	r0, r1, sl, r0
 801f17a:	fb0b 0005 	mla	r0, fp, r5, r0
 801f17e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801f182:	2800      	cmp	r0, #0
 801f184:	f000 80e0 	beq.w	801f348 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x380>
 801f188:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801f18c:	d01b      	beq.n	801f1c6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1fe>
 801f18e:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 801f192:	fb0c fe0e 	mul.w	lr, ip, lr
 801f196:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801f19a:	fb0c fc03 	mul.w	ip, ip, r3
 801f19e:	ea4f 231e 	mov.w	r3, lr, lsr #8
 801f1a2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801f1a6:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801f1aa:	4473      	add	r3, lr
 801f1ac:	f50c 7e80 	add.w	lr, ip, #256	; 0x100
 801f1b0:	eb0e 2e1c 	add.w	lr, lr, ip, lsr #8
 801f1b4:	0a1b      	lsrs	r3, r3, #8
 801f1b6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f1ba:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801f1be:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801f1c2:	ea43 030e 	orr.w	r3, r3, lr
 801f1c6:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801f1ca:	d01e      	beq.n	801f20a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x242>
 801f1cc:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801f1ce:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 801f1d2:	fb08 fc0c 	mul.w	ip, r8, ip
 801f1d6:	f407 4e7f 	and.w	lr, r7, #65280	; 0xff00
 801f1da:	fb08 f80e 	mul.w	r8, r8, lr
 801f1de:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801f1e2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f1e6:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801f1ea:	44e6      	add	lr, ip
 801f1ec:	f508 7c80 	add.w	ip, r8, #256	; 0x100
 801f1f0:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 801f1f4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f1f8:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801f1fc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f200:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801f204:	ea4e 0708 	orr.w	r7, lr, r8
 801f208:	970b      	str	r7, [sp, #44]	; 0x2c
 801f20a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801f20e:	d01e      	beq.n	801f24e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x286>
 801f210:	9f08      	ldr	r7, [sp, #32]
 801f212:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 801f216:	fb0a f808 	mul.w	r8, sl, r8
 801f21a:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 801f21e:	fb0a fa0c 	mul.w	sl, sl, ip
 801f222:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 801f226:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f22a:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 801f22e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801f232:	44c6      	add	lr, r8
 801f234:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801f238:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f23c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f240:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f244:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801f248:	ea4e 070a 	orr.w	r7, lr, sl
 801f24c:	9708      	str	r7, [sp, #32]
 801f24e:	2dff      	cmp	r5, #255	; 0xff
 801f250:	d01d      	beq.n	801f28e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c6>
 801f252:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801f254:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 801f258:	fb05 f808 	mul.w	r8, r5, r8
 801f25c:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 801f260:	fb05 f50c 	mul.w	r5, r5, ip
 801f264:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 801f268:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f26c:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 801f270:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 801f274:	44c6      	add	lr, r8
 801f276:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 801f27a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f27e:	0a2d      	lsrs	r5, r5, #8
 801f280:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f284:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801f288:	ea4e 0505 	orr.w	r5, lr, r5
 801f28c:	950c      	str	r5, [sp, #48]	; 0x30
 801f28e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801f290:	9f08      	ldr	r7, [sp, #32]
 801f292:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801f296:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801f29a:	fb09 f505 	mul.w	r5, r9, r5
 801f29e:	fb02 550c 	mla	r5, r2, ip, r5
 801f2a2:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 801f2a6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801f2a8:	fb01 550c 	mla	r5, r1, ip, r5
 801f2ac:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 801f2b0:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801f2b2:	fb0b 550c 	mla	r5, fp, ip, r5
 801f2b6:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 801f2ba:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801f2be:	fb09 f90c 	mul.w	r9, r9, ip
 801f2c2:	fb02 9303 	mla	r3, r2, r3, r9
 801f2c6:	9a08      	ldr	r2, [sp, #32]
 801f2c8:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 801f2cc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801f2ce:	fb01 330e 	mla	r3, r1, lr, r3
 801f2d2:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 801f2d6:	fb0b 3b01 	mla	fp, fp, r1, r3
 801f2da:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801f2dc:	9913      	ldr	r1, [sp, #76]	; 0x4c
 801f2de:	4343      	muls	r3, r0
 801f2e0:	0a2d      	lsrs	r5, r5, #8
 801f2e2:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801f2e6:	1c58      	adds	r0, r3, #1
 801f2e8:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801f2ec:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 801f2f0:	ea45 050b 	orr.w	r5, r5, fp
 801f2f4:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801f2f8:	b2ea      	uxtb	r2, r5
 801f2fa:	7833      	ldrb	r3, [r6, #0]
 801f2fc:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801f300:	b2c0      	uxtb	r0, r0
 801f302:	fb12 f201 	smulbb	r2, r2, r1
 801f306:	fb03 2300 	mla	r3, r3, r0, r2
 801f30a:	b29b      	uxth	r3, r3
 801f30c:	1c5a      	adds	r2, r3, #1
 801f30e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801f312:	7872      	ldrb	r2, [r6, #1]
 801f314:	121b      	asrs	r3, r3, #8
 801f316:	fb12 f200 	smulbb	r2, r2, r0
 801f31a:	7033      	strb	r3, [r6, #0]
 801f31c:	f3c5 2307 	ubfx	r3, r5, #8, #8
 801f320:	fb03 2301 	mla	r3, r3, r1, r2
 801f324:	b29b      	uxth	r3, r3
 801f326:	1c5a      	adds	r2, r3, #1
 801f328:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801f32c:	121b      	asrs	r3, r3, #8
 801f32e:	7073      	strb	r3, [r6, #1]
 801f330:	78b3      	ldrb	r3, [r6, #2]
 801f332:	0c2d      	lsrs	r5, r5, #16
 801f334:	fb13 f000 	smulbb	r0, r3, r0
 801f338:	fb05 0501 	mla	r5, r5, r1, r0
 801f33c:	b2ad      	uxth	r5, r5
 801f33e:	1c6b      	adds	r3, r5, #1
 801f340:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801f344:	122d      	asrs	r5, r5, #8
 801f346:	70b5      	strb	r5, [r6, #2]
 801f348:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801f34a:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801f34c:	4413      	add	r3, r2
 801f34e:	932b      	str	r3, [sp, #172]	; 0xac
 801f350:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801f352:	441c      	add	r4, r3
 801f354:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801f356:	3b01      	subs	r3, #1
 801f358:	3603      	adds	r6, #3
 801f35a:	9314      	str	r3, [sp, #80]	; 0x50
 801f35c:	e6bf      	b.n	801f0de <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x116>
 801f35e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801f360:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801f362:	4413      	add	r3, r2
 801f364:	932b      	str	r3, [sp, #172]	; 0xac
 801f366:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801f368:	441c      	add	r4, r3
 801f36a:	9b06      	ldr	r3, [sp, #24]
 801f36c:	3b01      	subs	r3, #1
 801f36e:	9306      	str	r3, [sp, #24]
 801f370:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f372:	3303      	adds	r3, #3
 801f374:	930a      	str	r3, [sp, #40]	; 0x28
 801f376:	e662      	b.n	801f03e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 801f378:	f47f ae74 	bne.w	801f064 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9c>
 801f37c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801f37e:	2b00      	cmp	r3, #0
 801f380:	f340 819a 	ble.w	801f6b8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6f0>
 801f384:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801f388:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801f38c:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801f390:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801f392:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801f396:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801f39a:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801f39e:	eef0 6a48 	vmov.f32	s13, s16
 801f3a2:	ee69 7a27 	vmul.f32	s15, s18, s15
 801f3a6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f3aa:	ee37 8a48 	vsub.f32	s16, s14, s16
 801f3ae:	edcd 6a2b 	vstr	s13, [sp, #172]	; 0xac
 801f3b2:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801f3b6:	eef0 6a68 	vmov.f32	s13, s17
 801f3ba:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801f3be:	ee18 2a10 	vmov	r2, s16
 801f3c2:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801f3c6:	fb92 f3f3 	sdiv	r3, r2, r3
 801f3ca:	ee18 2a90 	vmov	r2, s17
 801f3ce:	932d      	str	r3, [sp, #180]	; 0xb4
 801f3d0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801f3d2:	fb92 f3f3 	sdiv	r3, r2, r3
 801f3d6:	932e      	str	r3, [sp, #184]	; 0xb8
 801f3d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801f3da:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801f3dc:	3b01      	subs	r3, #1
 801f3de:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f3e2:	9312      	str	r3, [sp, #72]	; 0x48
 801f3e4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801f3e6:	bf08      	it	eq
 801f3e8:	4613      	moveq	r3, r2
 801f3ea:	ee16 4a90 	vmov	r4, s13
 801f3ee:	9306      	str	r3, [sp, #24]
 801f3f0:	eef0 8a67 	vmov.f32	s17, s15
 801f3f4:	eeb0 8a47 	vmov.f32	s16, s14
 801f3f8:	e61a      	b.n	801f030 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 801f3fa:	b151      	cbz	r1, 801f412 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44a>
 801f3fc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801f3fe:	58aa      	ldr	r2, [r5, r2]
 801f400:	9208      	str	r2, [sp, #32]
 801f402:	ea4f 6a12 	mov.w	sl, r2, lsr #24
 801f406:	25ff      	movs	r5, #255	; 0xff
 801f408:	46a8      	mov	r8, r5
 801f40a:	e6a0      	b.n	801f14e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x186>
 801f40c:	25ff      	movs	r5, #255	; 0xff
 801f40e:	46aa      	mov	sl, r5
 801f410:	e69d      	b.n	801f14e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x186>
 801f412:	25ff      	movs	r5, #255	; 0xff
 801f414:	46aa      	mov	sl, r5
 801f416:	e7f7      	b.n	801f408 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x440>
 801f418:	1c57      	adds	r7, r2, #1
 801f41a:	d195      	bne.n	801f348 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x380>
 801f41c:	9d07      	ldr	r5, [sp, #28]
 801f41e:	4295      	cmp	r5, r2
 801f420:	dd92      	ble.n	801f348 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x380>
 801f422:	1c5d      	adds	r5, r3, #1
 801f424:	db90      	blt.n	801f348 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x380>
 801f426:	9d10      	ldr	r5, [sp, #64]	; 0x40
 801f428:	429d      	cmp	r5, r3
 801f42a:	dd8d      	ble.n	801f348 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x380>
 801f42c:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801f42e:	9201      	str	r2, [sp, #4]
 801f430:	e9cd 3002 	strd	r3, r0, [sp, #8]
 801f434:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f436:	9300      	str	r3, [sp, #0]
 801f438:	e9cd 1504 	strd	r1, r5, [sp, #16]
 801f43c:	9b07      	ldr	r3, [sp, #28]
 801f43e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801f440:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801f442:	4631      	mov	r1, r6
 801f444:	f7ff fc68 	bl	801ed18 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 801f448:	e77e      	b.n	801f348 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x380>
 801f44a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801f44c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801f44e:	9d07      	ldr	r5, [sp, #28]
 801f450:	1412      	asrs	r2, r2, #16
 801f452:	f3c3 3103 	ubfx	r1, r3, #12, #4
 801f456:	1423      	asrs	r3, r4, #16
 801f458:	fb05 2303 	mla	r3, r5, r3, r2
 801f45c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801f45e:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 801f462:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801f466:	f3c4 3003 	ubfx	r0, r4, #12, #4
 801f46a:	0e1e      	lsrs	r6, r3, #24
 801f46c:	2900      	cmp	r1, #0
 801f46e:	f000 8114 	beq.w	801f69a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6d2>
 801f472:	686a      	ldr	r2, [r5, #4]
 801f474:	920d      	str	r2, [sp, #52]	; 0x34
 801f476:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 801f47a:	2800      	cmp	r0, #0
 801f47c:	f000 8116 	beq.w	801f6ac <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e4>
 801f480:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801f482:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 801f484:	18aa      	adds	r2, r5, r2
 801f486:	59ed      	ldr	r5, [r5, r7]
 801f488:	6852      	ldr	r2, [r2, #4]
 801f48a:	9509      	str	r5, [sp, #36]	; 0x24
 801f48c:	ea4f 6915 	mov.w	r9, r5, lsr #24
 801f490:	920f      	str	r2, [sp, #60]	; 0x3c
 801f492:	0e15      	lsrs	r5, r2, #24
 801f494:	b289      	uxth	r1, r1
 801f496:	b280      	uxth	r0, r0
 801f498:	fb01 fa00 	mul.w	sl, r1, r0
 801f49c:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 801f4a0:	0109      	lsls	r1, r1, #4
 801f4a2:	eba1 080a 	sub.w	r8, r1, sl
 801f4a6:	b280      	uxth	r0, r0
 801f4a8:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 801f4ac:	fa1f f888 	uxth.w	r8, r8
 801f4b0:	1a12      	subs	r2, r2, r0
 801f4b2:	b292      	uxth	r2, r2
 801f4b4:	fb08 f10c 	mul.w	r1, r8, ip
 801f4b8:	fb02 1106 	mla	r1, r2, r6, r1
 801f4bc:	fb00 1109 	mla	r1, r0, r9, r1
 801f4c0:	fb0a 1105 	mla	r1, sl, r5, r1
 801f4c4:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801f4c8:	2900      	cmp	r1, #0
 801f4ca:	f000 80da 	beq.w	801f682 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ba>
 801f4ce:	2eff      	cmp	r6, #255	; 0xff
 801f4d0:	d016      	beq.n	801f500 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x538>
 801f4d2:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 801f4d6:	4377      	muls	r7, r6
 801f4d8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801f4dc:	435e      	muls	r6, r3
 801f4de:	0a3b      	lsrs	r3, r7, #8
 801f4e0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801f4e4:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801f4e8:	443b      	add	r3, r7
 801f4ea:	f506 7780 	add.w	r7, r6, #256	; 0x100
 801f4ee:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 801f4f2:	0a1b      	lsrs	r3, r3, #8
 801f4f4:	0a3f      	lsrs	r7, r7, #8
 801f4f6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801f4fa:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801f4fe:	433b      	orrs	r3, r7
 801f500:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801f504:	d01d      	beq.n	801f542 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x57a>
 801f506:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 801f508:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801f50a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801f50e:	fb0c f606 	mul.w	r6, ip, r6
 801f512:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801f516:	fb0c fc07 	mul.w	ip, ip, r7
 801f51a:	0a37      	lsrs	r7, r6, #8
 801f51c:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801f520:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 801f524:	4437      	add	r7, r6
 801f526:	f50c 7680 	add.w	r6, ip, #256	; 0x100
 801f52a:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 801f52e:	0a3f      	lsrs	r7, r7, #8
 801f530:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f534:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801f538:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801f53c:	ea47 060c 	orr.w	r6, r7, ip
 801f540:	960d      	str	r6, [sp, #52]	; 0x34
 801f542:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801f546:	d01d      	beq.n	801f584 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5bc>
 801f548:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801f54a:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 801f54e:	fb09 fc0c 	mul.w	ip, r9, ip
 801f552:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801f556:	fb09 f906 	mul.w	r9, r9, r6
 801f55a:	ea4f 271c 	mov.w	r7, ip, lsr #8
 801f55e:	f509 7680 	add.w	r6, r9, #256	; 0x100
 801f562:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801f566:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801f56a:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 801f56e:	4467      	add	r7, ip
 801f570:	0a3f      	lsrs	r7, r7, #8
 801f572:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801f576:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801f57a:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801f57e:	ea47 0609 	orr.w	r6, r7, r9
 801f582:	9609      	str	r6, [sp, #36]	; 0x24
 801f584:	2dff      	cmp	r5, #255	; 0xff
 801f586:	d01a      	beq.n	801f5be <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5f6>
 801f588:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801f58a:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 801f58e:	fb05 fc0c 	mul.w	ip, r5, ip
 801f592:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801f596:	4375      	muls	r5, r6
 801f598:	ea4f 271c 	mov.w	r7, ip, lsr #8
 801f59c:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801f5a0:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801f5a4:	f505 7680 	add.w	r6, r5, #256	; 0x100
 801f5a8:	4467      	add	r7, ip
 801f5aa:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 801f5ae:	0a3f      	lsrs	r7, r7, #8
 801f5b0:	0a2d      	lsrs	r5, r5, #8
 801f5b2:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801f5b6:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801f5ba:	433d      	orrs	r5, r7
 801f5bc:	950f      	str	r5, [sp, #60]	; 0x3c
 801f5be:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801f5c0:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801f5c4:	f003 16ff 	and.w	r6, r3, #16711935	; 0xff00ff
 801f5c8:	fb08 f505 	mul.w	r5, r8, r5
 801f5cc:	fb02 5506 	mla	r5, r2, r6, r5
 801f5d0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801f5d2:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801f5d6:	fb00 5506 	mla	r5, r0, r6, r5
 801f5da:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801f5dc:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801f5e0:	fb0a 5506 	mla	r5, sl, r6, r5
 801f5e4:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 801f5e6:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801f5ea:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801f5ee:	fb08 f806 	mul.w	r8, r8, r6
 801f5f2:	fb02 8303 	mla	r3, r2, r3, r8
 801f5f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f5f8:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 801f5fc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801f5fe:	fb00 3307 	mla	r3, r0, r7, r3
 801f602:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801f606:	fb0a 3c0c 	mla	ip, sl, ip, r3
 801f60a:	0a2d      	lsrs	r5, r5, #8
 801f60c:	fb01 f30b 	mul.w	r3, r1, fp
 801f610:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f614:	1c59      	adds	r1, r3, #1
 801f616:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801f61a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801f61e:	ea45 050c 	orr.w	r5, r5, ip
 801f622:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801f626:	b2ea      	uxtb	r2, r5
 801f628:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801f62c:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801f630:	b2c9      	uxtb	r1, r1
 801f632:	fb12 f20b 	smulbb	r2, r2, fp
 801f636:	fb03 2301 	mla	r3, r3, r1, r2
 801f63a:	b29b      	uxth	r3, r3
 801f63c:	1c5a      	adds	r2, r3, #1
 801f63e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801f642:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 801f646:	121b      	asrs	r3, r3, #8
 801f648:	fb12 f201 	smulbb	r2, r2, r1
 801f64c:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801f650:	f3c5 2307 	ubfx	r3, r5, #8, #8
 801f654:	fb03 230b 	mla	r3, r3, fp, r2
 801f658:	b29b      	uxth	r3, r3
 801f65a:	1c5a      	adds	r2, r3, #1
 801f65c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801f660:	121b      	asrs	r3, r3, #8
 801f662:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801f666:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 801f66a:	0c2d      	lsrs	r5, r5, #16
 801f66c:	fb13 f101 	smulbb	r1, r3, r1
 801f670:	fb05 150b 	mla	r5, r5, fp, r1
 801f674:	b2ad      	uxth	r5, r5
 801f676:	1c69      	adds	r1, r5, #1
 801f678:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 801f67c:	122d      	asrs	r5, r5, #8
 801f67e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801f682:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801f684:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801f686:	4413      	add	r3, r2
 801f688:	932b      	str	r3, [sp, #172]	; 0xac
 801f68a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801f68c:	441c      	add	r4, r3
 801f68e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801f690:	3b01      	subs	r3, #1
 801f692:	f10e 0e03 	add.w	lr, lr, #3
 801f696:	9313      	str	r3, [sp, #76]	; 0x4c
 801f698:	e500      	b.n	801f09c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd4>
 801f69a:	b150      	cbz	r0, 801f6b2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ea>
 801f69c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801f69e:	58aa      	ldr	r2, [r5, r2]
 801f6a0:	9209      	str	r2, [sp, #36]	; 0x24
 801f6a2:	ea4f 6912 	mov.w	r9, r2, lsr #24
 801f6a6:	25ff      	movs	r5, #255	; 0xff
 801f6a8:	46ac      	mov	ip, r5
 801f6aa:	e6f3      	b.n	801f494 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4cc>
 801f6ac:	25ff      	movs	r5, #255	; 0xff
 801f6ae:	46a9      	mov	r9, r5
 801f6b0:	e6f0      	b.n	801f494 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4cc>
 801f6b2:	25ff      	movs	r5, #255	; 0xff
 801f6b4:	46a9      	mov	r9, r5
 801f6b6:	e7f7      	b.n	801f6a8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e0>
 801f6b8:	b019      	add	sp, #100	; 0x64
 801f6ba:	ecbd 8b08 	vpop	{d8-d11}
 801f6be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801f6c4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 801f6c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f6c8:	b085      	sub	sp, #20
 801f6ca:	e9dd c40f 	ldrd	ip, r4, [sp, #60]	; 0x3c
 801f6ce:	7888      	ldrb	r0, [r1, #2]
 801f6d0:	9000      	str	r0, [sp, #0]
 801f6d2:	7848      	ldrb	r0, [r1, #1]
 801f6d4:	9001      	str	r0, [sp, #4]
 801f6d6:	fb04 c603 	mla	r6, r4, r3, ip
 801f6da:	7808      	ldrb	r0, [r1, #0]
 801f6dc:	9002      	str	r0, [sp, #8]
 801f6de:	4691      	mov	r9, r2
 801f6e0:	eb02 0e86 	add.w	lr, r2, r6, lsl #2
 801f6e4:	9a00      	ldr	r2, [sp, #0]
 801f6e6:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
 801f6ea:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 801f6ee:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 801f6f2:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 801f6f6:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 801f6fa:	9a01      	ldr	r2, [sp, #4]
 801f6fc:	2c00      	cmp	r4, #0
 801f6fe:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 801f702:	db3a      	blt.n	801f77a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb6>
 801f704:	45a0      	cmp	r8, r4
 801f706:	dd38      	ble.n	801f77a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb6>
 801f708:	f1bc 0f00 	cmp.w	ip, #0
 801f70c:	db33      	blt.n	801f776 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb2>
 801f70e:	4563      	cmp	r3, ip
 801f710:	dd31      	ble.n	801f776 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb2>
 801f712:	f859 2026 	ldr.w	r2, [r9, r6, lsl #2]
 801f716:	f11c 0601 	adds.w	r6, ip, #1
 801f71a:	d431      	bmi.n	801f780 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xbc>
 801f71c:	42b3      	cmp	r3, r6
 801f71e:	dd2f      	ble.n	801f780 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xbc>
 801f720:	b375      	cbz	r5, 801f780 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xbc>
 801f722:	f8de 6004 	ldr.w	r6, [lr, #4]
 801f726:	3401      	adds	r4, #1
 801f728:	d42e      	bmi.n	801f788 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc4>
 801f72a:	45a0      	cmp	r8, r4
 801f72c:	dd2c      	ble.n	801f788 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc4>
 801f72e:	b35f      	cbz	r7, 801f788 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc4>
 801f730:	f1bc 0f00 	cmp.w	ip, #0
 801f734:	db26      	blt.n	801f784 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc0>
 801f736:	4563      	cmp	r3, ip
 801f738:	dd24      	ble.n	801f784 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc0>
 801f73a:	f85e 4023 	ldr.w	r4, [lr, r3, lsl #2]
 801f73e:	f11c 0c01 	adds.w	ip, ip, #1
 801f742:	d405      	bmi.n	801f750 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 801f744:	4563      	cmp	r3, ip
 801f746:	dd03      	ble.n	801f750 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 801f748:	b115      	cbz	r5, 801f750 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 801f74a:	3301      	adds	r3, #1
 801f74c:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 801f750:	2d0f      	cmp	r5, #15
 801f752:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 801f756:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801f75a:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801f75e:	ea4f 6810 	mov.w	r8, r0, lsr #24
 801f762:	d801      	bhi.n	801f768 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xa4>
 801f764:	2f0f      	cmp	r7, #15
 801f766:	d911      	bls.n	801f78c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc8>
 801f768:	4b76      	ldr	r3, [pc, #472]	; (801f944 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x280>)
 801f76a:	4a77      	ldr	r2, [pc, #476]	; (801f948 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x284>)
 801f76c:	4877      	ldr	r0, [pc, #476]	; (801f94c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x288>)
 801f76e:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 801f772:	f003 f83d 	bl	80227f0 <__assert_func>
 801f776:	4602      	mov	r2, r0
 801f778:	e7cd      	b.n	801f716 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x52>
 801f77a:	4606      	mov	r6, r0
 801f77c:	4602      	mov	r2, r0
 801f77e:	e7d2      	b.n	801f726 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x62>
 801f780:	4606      	mov	r6, r0
 801f782:	e7d0      	b.n	801f726 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x62>
 801f784:	4604      	mov	r4, r0
 801f786:	e7da      	b.n	801f73e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x7a>
 801f788:	4604      	mov	r4, r0
 801f78a:	e7e1      	b.n	801f750 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 801f78c:	b2ab      	uxth	r3, r5
 801f78e:	b2bf      	uxth	r7, r7
 801f790:	fb03 fe07 	mul.w	lr, r3, r7
 801f794:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 801f798:	011b      	lsls	r3, r3, #4
 801f79a:	eba3 0c0e 	sub.w	ip, r3, lr
 801f79e:	b2bf      	uxth	r7, r7
 801f7a0:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 801f7a4:	fa1f fc8c 	uxth.w	ip, ip
 801f7a8:	1bed      	subs	r5, r5, r7
 801f7aa:	b2ad      	uxth	r5, r5
 801f7ac:	fb0c f30a 	mul.w	r3, ip, sl
 801f7b0:	fb05 330b 	mla	r3, r5, fp, r3
 801f7b4:	fb07 3309 	mla	r3, r7, r9, r3
 801f7b8:	fb0e 3308 	mla	r3, lr, r8, r3
 801f7bc:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801f7c0:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801f7c4:	9303      	str	r3, [sp, #12]
 801f7c6:	d018      	beq.n	801f7fa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x136>
 801f7c8:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 801f7cc:	fb0b f303 	mul.w	r3, fp, r3
 801f7d0:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801f7d4:	fb0b fb02 	mul.w	fp, fp, r2
 801f7d8:	0a1a      	lsrs	r2, r3, #8
 801f7da:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801f7de:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 801f7e2:	441a      	add	r2, r3
 801f7e4:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 801f7e8:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 801f7ec:	0a12      	lsrs	r2, r2, #8
 801f7ee:	0a1b      	lsrs	r3, r3, #8
 801f7f0:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801f7f4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801f7f8:	431a      	orrs	r2, r3
 801f7fa:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801f7fe:	d019      	beq.n	801f834 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x170>
 801f800:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 801f804:	fb0a fb0b 	mul.w	fp, sl, fp
 801f808:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801f80c:	fb0a fa06 	mul.w	sl, sl, r6
 801f810:	ea4f 261b 	mov.w	r6, fp, lsr #8
 801f814:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801f818:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801f81c:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 801f820:	445e      	add	r6, fp
 801f822:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 801f826:	0a36      	lsrs	r6, r6, #8
 801f828:	0a1b      	lsrs	r3, r3, #8
 801f82a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801f82e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801f832:	431e      	orrs	r6, r3
 801f834:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801f838:	d019      	beq.n	801f86e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1aa>
 801f83a:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 801f83e:	fb09 fa0a 	mul.w	sl, r9, sl
 801f842:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801f846:	fb09 f904 	mul.w	r9, r9, r4
 801f84a:	ea4f 241a 	mov.w	r4, sl, lsr #8
 801f84e:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801f852:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801f856:	f509 7380 	add.w	r3, r9, #256	; 0x100
 801f85a:	4454      	add	r4, sl
 801f85c:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 801f860:	0a24      	lsrs	r4, r4, #8
 801f862:	0a1b      	lsrs	r3, r3, #8
 801f864:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801f868:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801f86c:	431c      	orrs	r4, r3
 801f86e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801f872:	d019      	beq.n	801f8a8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1e4>
 801f874:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 801f878:	fb08 f909 	mul.w	r9, r8, r9
 801f87c:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801f880:	fb08 f800 	mul.w	r8, r8, r0
 801f884:	ea4f 2019 	mov.w	r0, r9, lsr #8
 801f888:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801f88c:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 801f890:	f508 7380 	add.w	r3, r8, #256	; 0x100
 801f894:	4448      	add	r0, r9
 801f896:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 801f89a:	0a00      	lsrs	r0, r0, #8
 801f89c:	0a1b      	lsrs	r3, r3, #8
 801f89e:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801f8a2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801f8a6:	4318      	orrs	r0, r3
 801f8a8:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 801f8ac:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801f8b0:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 801f8b4:	fb0c f808 	mul.w	r8, ip, r8
 801f8b8:	fb0c f606 	mul.w	r6, ip, r6
 801f8bc:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801f8c0:	fb05 8803 	mla	r8, r5, r3, r8
 801f8c4:	fb05 6202 	mla	r2, r5, r2, r6
 801f8c8:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 801f8cc:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801f8d0:	fb07 8803 	mla	r8, r7, r3, r8
 801f8d4:	fb07 2704 	mla	r7, r7, r4, r2
 801f8d8:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 801f8dc:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801f8e0:	fb0e 8303 	mla	r3, lr, r3, r8
 801f8e4:	fb0e 7e00 	mla	lr, lr, r0, r7
 801f8e8:	0a1b      	lsrs	r3, r3, #8
 801f8ea:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f8ee:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801f8f2:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801f8f6:	ea43 0e0e 	orr.w	lr, r3, lr
 801f8fa:	9b03      	ldr	r3, [sp, #12]
 801f8fc:	9802      	ldr	r0, [sp, #8]
 801f8fe:	43db      	mvns	r3, r3
 801f900:	b2db      	uxtb	r3, r3
 801f902:	4358      	muls	r0, r3
 801f904:	1c42      	adds	r2, r0, #1
 801f906:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 801f90a:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 801f90e:	700a      	strb	r2, [r1, #0]
 801f910:	9a01      	ldr	r2, [sp, #4]
 801f912:	435a      	muls	r2, r3
 801f914:	1c50      	adds	r0, r2, #1
 801f916:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 801f91a:	ea4f 221e 	mov.w	r2, lr, lsr #8
 801f91e:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 801f922:	704a      	strb	r2, [r1, #1]
 801f924:	9a00      	ldr	r2, [sp, #0]
 801f926:	435a      	muls	r2, r3
 801f928:	4613      	mov	r3, r2
 801f92a:	3201      	adds	r2, #1
 801f92c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801f930:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 801f934:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 801f938:	f881 e002 	strb.w	lr, [r1, #2]
 801f93c:	b005      	add	sp, #20
 801f93e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f942:	bf00      	nop
 801f944:	08027814 	.word	0x08027814
 801f948:	08027d0a 	.word	0x08027d0a
 801f94c:	080278dd 	.word	0x080278dd

0801f950 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801f950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f954:	ed2d 8b08 	vpush	{d8-d11}
 801f958:	b097      	sub	sp, #92	; 0x5c
 801f95a:	eeb0 aa40 	vmov.f32	s20, s0
 801f95e:	9306      	str	r3, [sp, #24]
 801f960:	f9bd 30c0 	ldrsh.w	r3, [sp, #192]	; 0xc0
 801f964:	9307      	str	r3, [sp, #28]
 801f966:	9214      	str	r2, [sp, #80]	; 0x50
 801f968:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 801f96c:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801f96e:	9112      	str	r1, [sp, #72]	; 0x48
 801f970:	9310      	str	r3, [sp, #64]	; 0x40
 801f972:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 801f976:	9015      	str	r0, [sp, #84]	; 0x54
 801f978:	6850      	ldr	r0, [r2, #4]
 801f97a:	6812      	ldr	r2, [r2, #0]
 801f97c:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 801f97e:	fb00 1303 	mla	r3, r0, r3, r1
 801f982:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f986:	18d3      	adds	r3, r2, r3
 801f988:	930a      	str	r3, [sp, #40]	; 0x28
 801f98a:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801f98c:	681b      	ldr	r3, [r3, #0]
 801f98e:	9311      	str	r3, [sp, #68]	; 0x44
 801f990:	9b07      	ldr	r3, [sp, #28]
 801f992:	009b      	lsls	r3, r3, #2
 801f994:	eef0 9a60 	vmov.f32	s19, s1
 801f998:	eeb0 9a41 	vmov.f32	s18, s2
 801f99c:	eeb0 8a62 	vmov.f32	s16, s5
 801f9a0:	eef0 8a43 	vmov.f32	s17, s6
 801f9a4:	eef0 ba44 	vmov.f32	s23, s8
 801f9a8:	eeb0 ba64 	vmov.f32	s22, s9
 801f9ac:	eef0 aa45 	vmov.f32	s21, s10
 801f9b0:	930e      	str	r3, [sp, #56]	; 0x38
 801f9b2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801f9b4:	2b00      	cmp	r3, #0
 801f9b6:	dc03      	bgt.n	801f9c0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 801f9b8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801f9ba:	2b00      	cmp	r3, #0
 801f9bc:	f340 832e 	ble.w	802001c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6cc>
 801f9c0:	9b06      	ldr	r3, [sp, #24]
 801f9c2:	2b00      	cmp	r3, #0
 801f9c4:	f340 8187 	ble.w	801fcd6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 801f9c8:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801f9ca:	1412      	asrs	r2, r2, #16
 801f9cc:	ea4f 4324 	mov.w	r3, r4, asr #16
 801f9d0:	d42f      	bmi.n	801fa32 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 801f9d2:	9807      	ldr	r0, [sp, #28]
 801f9d4:	1c51      	adds	r1, r2, #1
 801f9d6:	4288      	cmp	r0, r1
 801f9d8:	dd2e      	ble.n	801fa38 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 801f9da:	2b00      	cmp	r3, #0
 801f9dc:	db2c      	blt.n	801fa38 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 801f9de:	9810      	ldr	r0, [sp, #64]	; 0x40
 801f9e0:	1c59      	adds	r1, r3, #1
 801f9e2:	4288      	cmp	r0, r1
 801f9e4:	dd28      	ble.n	801fa38 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 801f9e6:	9b06      	ldr	r3, [sp, #24]
 801f9e8:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801f9ea:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801f9ec:	3b01      	subs	r3, #1
 801f9ee:	fb02 1203 	mla	r2, r2, r3, r1
 801f9f2:	1412      	asrs	r2, r2, #16
 801f9f4:	d42b      	bmi.n	801fa4e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 801f9f6:	9907      	ldr	r1, [sp, #28]
 801f9f8:	3201      	adds	r2, #1
 801f9fa:	4291      	cmp	r1, r2
 801f9fc:	dd27      	ble.n	801fa4e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 801f9fe:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801fa00:	fb02 4303 	mla	r3, r2, r3, r4
 801fa04:	141b      	asrs	r3, r3, #16
 801fa06:	d422      	bmi.n	801fa4e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 801fa08:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801fa0a:	3301      	adds	r3, #1
 801fa0c:	429a      	cmp	r2, r3
 801fa0e:	dd1e      	ble.n	801fa4e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 801fa10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fa12:	f8dd b018 	ldr.w	fp, [sp, #24]
 801fa16:	1cdd      	adds	r5, r3, #3
 801fa18:	f1bb 0f00 	cmp.w	fp, #0
 801fa1c:	f300 81c4 	bgt.w	801fda8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x458>
 801fa20:	9b06      	ldr	r3, [sp, #24]
 801fa22:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801fa26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fa28:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801fa2c:	4423      	add	r3, r4
 801fa2e:	930a      	str	r3, [sp, #40]	; 0x28
 801fa30:	e153      	b.n	801fcda <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x38a>
 801fa32:	1c51      	adds	r1, r2, #1
 801fa34:	f040 8142 	bne.w	801fcbc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36c>
 801fa38:	9907      	ldr	r1, [sp, #28]
 801fa3a:	428a      	cmp	r2, r1
 801fa3c:	f280 813e 	bge.w	801fcbc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36c>
 801fa40:	1c5a      	adds	r2, r3, #1
 801fa42:	f2c0 813b 	blt.w	801fcbc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36c>
 801fa46:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801fa48:	4293      	cmp	r3, r2
 801fa4a:	f280 8137 	bge.w	801fcbc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36c>
 801fa4e:	9b06      	ldr	r3, [sp, #24]
 801fa50:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801fa52:	9313      	str	r3, [sp, #76]	; 0x4c
 801fa54:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801fa56:	2b00      	cmp	r3, #0
 801fa58:	dde2      	ble.n	801fa20 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd0>
 801fa5a:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801fa5c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801fa5e:	1409      	asrs	r1, r1, #16
 801fa60:	ea4f 4324 	mov.w	r3, r4, asr #16
 801fa64:	f3c2 3203 	ubfx	r2, r2, #12, #4
 801fa68:	f3c4 3003 	ubfx	r0, r4, #12, #4
 801fa6c:	f100 8186 	bmi.w	801fd7c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42c>
 801fa70:	9f07      	ldr	r7, [sp, #28]
 801fa72:	1c4e      	adds	r6, r1, #1
 801fa74:	42b7      	cmp	r7, r6
 801fa76:	f340 8183 	ble.w	801fd80 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x430>
 801fa7a:	2b00      	cmp	r3, #0
 801fa7c:	f2c0 8180 	blt.w	801fd80 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x430>
 801fa80:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801fa82:	1c5e      	adds	r6, r3, #1
 801fa84:	42b7      	cmp	r7, r6
 801fa86:	f340 817b 	ble.w	801fd80 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x430>
 801fa8a:	9e07      	ldr	r6, [sp, #28]
 801fa8c:	fb03 1306 	mla	r3, r3, r6, r1
 801fa90:	9911      	ldr	r1, [sp, #68]	; 0x44
 801fa92:	eb01 0683 	add.w	r6, r1, r3, lsl #2
 801fa96:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801fa9a:	0e1f      	lsrs	r7, r3, #24
 801fa9c:	2a00      	cmp	r2, #0
 801fa9e:	f000 815b 	beq.w	801fd58 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x408>
 801faa2:	6871      	ldr	r1, [r6, #4]
 801faa4:	910b      	str	r1, [sp, #44]	; 0x2c
 801faa6:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 801faaa:	2800      	cmp	r0, #0
 801faac:	f000 815d 	beq.w	801fd6a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x41a>
 801fab0:	990e      	ldr	r1, [sp, #56]	; 0x38
 801fab2:	eb06 0c01 	add.w	ip, r6, r1
 801fab6:	5876      	ldr	r6, [r6, r1]
 801fab8:	f8dc 1004 	ldr.w	r1, [ip, #4]
 801fabc:	9608      	str	r6, [sp, #32]
 801fabe:	ea4f 6916 	mov.w	r9, r6, lsr #24
 801fac2:	910c      	str	r1, [sp, #48]	; 0x30
 801fac4:	0e0e      	lsrs	r6, r1, #24
 801fac6:	b292      	uxth	r2, r2
 801fac8:	b280      	uxth	r0, r0
 801faca:	fb02 fa00 	mul.w	sl, r2, r0
 801face:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 801fad2:	0112      	lsls	r2, r2, #4
 801fad4:	eba2 080a 	sub.w	r8, r2, sl
 801fad8:	b280      	uxth	r0, r0
 801fada:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 801fade:	fa1f f888 	uxth.w	r8, r8
 801fae2:	1a09      	subs	r1, r1, r0
 801fae4:	b289      	uxth	r1, r1
 801fae6:	fb08 f20e 	mul.w	r2, r8, lr
 801faea:	fb01 2207 	mla	r2, r1, r7, r2
 801faee:	fb00 2209 	mla	r2, r0, r9, r2
 801faf2:	fb0a 2206 	mla	r2, sl, r6, r2
 801faf6:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801fafa:	2a00      	cmp	r2, #0
 801fafc:	f000 80d3 	beq.w	801fca6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 801fb00:	2fff      	cmp	r7, #255	; 0xff
 801fb02:	d01a      	beq.n	801fb3a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1ea>
 801fb04:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801fb08:	fb07 fc0c 	mul.w	ip, r7, ip
 801fb0c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801fb10:	435f      	muls	r7, r3
 801fb12:	ea4f 231c 	mov.w	r3, ip, lsr #8
 801fb16:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801fb1a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801fb1e:	f507 7b80 	add.w	fp, r7, #256	; 0x100
 801fb22:	4463      	add	r3, ip
 801fb24:	eb0b 2b17 	add.w	fp, fp, r7, lsr #8
 801fb28:	0a1b      	lsrs	r3, r3, #8
 801fb2a:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801fb2e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801fb32:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 801fb36:	ea43 030b 	orr.w	r3, r3, fp
 801fb3a:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801fb3e:	d01e      	beq.n	801fb7e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x22e>
 801fb40:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801fb42:	f007 1bff 	and.w	fp, r7, #16711935	; 0xff00ff
 801fb46:	fb0e fb0b 	mul.w	fp, lr, fp
 801fb4a:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801fb4e:	fb0e fe07 	mul.w	lr, lr, r7
 801fb52:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 801fb56:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 801fb5a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801fb5e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801fb62:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 801fb66:	44dc      	add	ip, fp
 801fb68:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fb6c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801fb70:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801fb74:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801fb78:	ea4c 070e 	orr.w	r7, ip, lr
 801fb7c:	970b      	str	r7, [sp, #44]	; 0x2c
 801fb7e:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801fb82:	d01e      	beq.n	801fbc2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801fb84:	9f08      	ldr	r7, [sp, #32]
 801fb86:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 801fb8a:	fb09 fe0e 	mul.w	lr, r9, lr
 801fb8e:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801fb92:	fb09 f907 	mul.w	r9, r9, r7
 801fb96:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801fb9a:	f509 7780 	add.w	r7, r9, #256	; 0x100
 801fb9e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801fba2:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801fba6:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801fbaa:	44f4      	add	ip, lr
 801fbac:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fbb0:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801fbb4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801fbb8:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801fbbc:	ea4c 0709 	orr.w	r7, ip, r9
 801fbc0:	9708      	str	r7, [sp, #32]
 801fbc2:	2eff      	cmp	r6, #255	; 0xff
 801fbc4:	d01c      	beq.n	801fc00 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 801fbc6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801fbc8:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 801fbcc:	fb06 fe0e 	mul.w	lr, r6, lr
 801fbd0:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801fbd4:	437e      	muls	r6, r7
 801fbd6:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801fbda:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801fbde:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801fbe2:	f506 7780 	add.w	r7, r6, #256	; 0x100
 801fbe6:	44f4      	add	ip, lr
 801fbe8:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 801fbec:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fbf0:	0a36      	lsrs	r6, r6, #8
 801fbf2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801fbf6:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801fbfa:	ea4c 0606 	orr.w	r6, ip, r6
 801fbfe:	960c      	str	r6, [sp, #48]	; 0x30
 801fc00:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 801fc02:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801fc06:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 801fc0a:	fb08 f606 	mul.w	r6, r8, r6
 801fc0e:	fb01 6607 	mla	r6, r1, r7, r6
 801fc12:	9f08      	ldr	r7, [sp, #32]
 801fc14:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801fc18:	fb00 6607 	mla	r6, r0, r7, r6
 801fc1c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801fc1e:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801fc22:	fb0a 6607 	mla	r6, sl, r7, r6
 801fc26:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801fc28:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801fc2c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801fc30:	fb08 f807 	mul.w	r8, r8, r7
 801fc34:	fb01 8303 	mla	r3, r1, r3, r8
 801fc38:	9908      	ldr	r1, [sp, #32]
 801fc3a:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 801fc3e:	990c      	ldr	r1, [sp, #48]	; 0x30
 801fc40:	fb00 330c 	mla	r3, r0, ip, r3
 801fc44:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 801fc48:	fb0a 3a00 	mla	sl, sl, r0, r3
 801fc4c:	0a36      	lsrs	r6, r6, #8
 801fc4e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801fc52:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801fc56:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801fc5a:	ea46 060a 	orr.w	r6, r6, sl
 801fc5e:	2aff      	cmp	r2, #255	; 0xff
 801fc60:	b2f0      	uxtb	r0, r6
 801fc62:	f3c6 2107 	ubfx	r1, r6, #8, #8
 801fc66:	ea4f 4616 	mov.w	r6, r6, lsr #16
 801fc6a:	f000 8084 	beq.w	801fd76 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x426>
 801fc6e:	782b      	ldrb	r3, [r5, #0]
 801fc70:	43d2      	mvns	r2, r2
 801fc72:	b2d2      	uxtb	r2, r2
 801fc74:	fb03 f702 	mul.w	r7, r3, r2
 801fc78:	1c7b      	adds	r3, r7, #1
 801fc7a:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 801fc7e:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801fc82:	702b      	strb	r3, [r5, #0]
 801fc84:	786b      	ldrb	r3, [r5, #1]
 801fc86:	fb03 f002 	mul.w	r0, r3, r2
 801fc8a:	1c43      	adds	r3, r0, #1
 801fc8c:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801fc90:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 801fc94:	706b      	strb	r3, [r5, #1]
 801fc96:	78ab      	ldrb	r3, [r5, #2]
 801fc98:	4353      	muls	r3, r2
 801fc9a:	1c5a      	adds	r2, r3, #1
 801fc9c:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801fca0:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 801fca4:	70ae      	strb	r6, [r5, #2]
 801fca6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801fca8:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801fcaa:	4413      	add	r3, r2
 801fcac:	9329      	str	r3, [sp, #164]	; 0xa4
 801fcae:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801fcb0:	441c      	add	r4, r3
 801fcb2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801fcb4:	3b01      	subs	r3, #1
 801fcb6:	3503      	adds	r5, #3
 801fcb8:	9313      	str	r3, [sp, #76]	; 0x4c
 801fcba:	e6cb      	b.n	801fa54 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 801fcbc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801fcbe:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801fcc0:	4413      	add	r3, r2
 801fcc2:	9329      	str	r3, [sp, #164]	; 0xa4
 801fcc4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801fcc6:	441c      	add	r4, r3
 801fcc8:	9b06      	ldr	r3, [sp, #24]
 801fcca:	3b01      	subs	r3, #1
 801fccc:	9306      	str	r3, [sp, #24]
 801fcce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fcd0:	3303      	adds	r3, #3
 801fcd2:	930a      	str	r3, [sp, #40]	; 0x28
 801fcd4:	e674      	b.n	801f9c0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 801fcd6:	f47f ae86 	bne.w	801f9e6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 801fcda:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801fcdc:	2b00      	cmp	r3, #0
 801fcde:	f340 819d 	ble.w	802001c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6cc>
 801fce2:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801fce6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801fcea:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801fcee:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801fcf0:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801fcf4:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801fcf8:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801fcfc:	eef0 6a48 	vmov.f32	s13, s16
 801fd00:	ee69 7a27 	vmul.f32	s15, s18, s15
 801fd04:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fd08:	ee37 8a48 	vsub.f32	s16, s14, s16
 801fd0c:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 801fd10:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801fd14:	eef0 6a68 	vmov.f32	s13, s17
 801fd18:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801fd1c:	ee18 2a10 	vmov	r2, s16
 801fd20:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801fd24:	fb92 f3f3 	sdiv	r3, r2, r3
 801fd28:	ee18 2a90 	vmov	r2, s17
 801fd2c:	932b      	str	r3, [sp, #172]	; 0xac
 801fd2e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801fd30:	fb92 f3f3 	sdiv	r3, r2, r3
 801fd34:	932c      	str	r3, [sp, #176]	; 0xb0
 801fd36:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801fd38:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801fd3a:	3b01      	subs	r3, #1
 801fd3c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fd40:	9312      	str	r3, [sp, #72]	; 0x48
 801fd42:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801fd44:	bf08      	it	eq
 801fd46:	4613      	moveq	r3, r2
 801fd48:	ee16 4a90 	vmov	r4, s13
 801fd4c:	9306      	str	r3, [sp, #24]
 801fd4e:	eef0 8a67 	vmov.f32	s17, s15
 801fd52:	eeb0 8a47 	vmov.f32	s16, s14
 801fd56:	e62c      	b.n	801f9b2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x62>
 801fd58:	b150      	cbz	r0, 801fd70 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x420>
 801fd5a:	990e      	ldr	r1, [sp, #56]	; 0x38
 801fd5c:	5871      	ldr	r1, [r6, r1]
 801fd5e:	9108      	str	r1, [sp, #32]
 801fd60:	ea4f 6911 	mov.w	r9, r1, lsr #24
 801fd64:	26ff      	movs	r6, #255	; 0xff
 801fd66:	46b6      	mov	lr, r6
 801fd68:	e6ad      	b.n	801fac6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x176>
 801fd6a:	26ff      	movs	r6, #255	; 0xff
 801fd6c:	46b1      	mov	r9, r6
 801fd6e:	e6aa      	b.n	801fac6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x176>
 801fd70:	26ff      	movs	r6, #255	; 0xff
 801fd72:	46b1      	mov	r9, r6
 801fd74:	e7f7      	b.n	801fd66 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x416>
 801fd76:	7028      	strb	r0, [r5, #0]
 801fd78:	7069      	strb	r1, [r5, #1]
 801fd7a:	e793      	b.n	801fca4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 801fd7c:	1c4f      	adds	r7, r1, #1
 801fd7e:	d192      	bne.n	801fca6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 801fd80:	9e07      	ldr	r6, [sp, #28]
 801fd82:	428e      	cmp	r6, r1
 801fd84:	dd8f      	ble.n	801fca6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 801fd86:	1c5e      	adds	r6, r3, #1
 801fd88:	db8d      	blt.n	801fca6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 801fd8a:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801fd8c:	429e      	cmp	r6, r3
 801fd8e:	dd8a      	ble.n	801fca6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 801fd90:	e9cd 2003 	strd	r2, r0, [sp, #12]
 801fd94:	e9cd 1301 	strd	r1, r3, [sp, #4]
 801fd98:	9600      	str	r6, [sp, #0]
 801fd9a:	9b07      	ldr	r3, [sp, #28]
 801fd9c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801fd9e:	9815      	ldr	r0, [sp, #84]	; 0x54
 801fda0:	4629      	mov	r1, r5
 801fda2:	f7ff fc8f 	bl	801f6c4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 801fda6:	e77e      	b.n	801fca6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 801fda8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801fdaa:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801fdac:	9e07      	ldr	r6, [sp, #28]
 801fdae:	1409      	asrs	r1, r1, #16
 801fdb0:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801fdb4:	1423      	asrs	r3, r4, #16
 801fdb6:	fb06 1303 	mla	r3, r6, r3, r1
 801fdba:	9911      	ldr	r1, [sp, #68]	; 0x44
 801fdbc:	eb01 0683 	add.w	r6, r1, r3, lsl #2
 801fdc0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801fdc4:	f3c4 3003 	ubfx	r0, r4, #12, #4
 801fdc8:	0e1f      	lsrs	r7, r3, #24
 801fdca:	2a00      	cmp	r2, #0
 801fdcc:	f000 8112 	beq.w	801fff4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a4>
 801fdd0:	6871      	ldr	r1, [r6, #4]
 801fdd2:	910d      	str	r1, [sp, #52]	; 0x34
 801fdd4:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 801fdd8:	2800      	cmp	r0, #0
 801fdda:	f000 8114 	beq.w	8020006 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b6>
 801fdde:	990e      	ldr	r1, [sp, #56]	; 0x38
 801fde0:	eb06 0c01 	add.w	ip, r6, r1
 801fde4:	5876      	ldr	r6, [r6, r1]
 801fde6:	f8dc 1004 	ldr.w	r1, [ip, #4]
 801fdea:	9609      	str	r6, [sp, #36]	; 0x24
 801fdec:	ea4f 6916 	mov.w	r9, r6, lsr #24
 801fdf0:	910f      	str	r1, [sp, #60]	; 0x3c
 801fdf2:	0e0e      	lsrs	r6, r1, #24
 801fdf4:	b292      	uxth	r2, r2
 801fdf6:	b280      	uxth	r0, r0
 801fdf8:	fb02 fa00 	mul.w	sl, r2, r0
 801fdfc:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 801fe00:	0112      	lsls	r2, r2, #4
 801fe02:	eba2 080a 	sub.w	r8, r2, sl
 801fe06:	b280      	uxth	r0, r0
 801fe08:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 801fe0c:	fa1f f888 	uxth.w	r8, r8
 801fe10:	1a09      	subs	r1, r1, r0
 801fe12:	b289      	uxth	r1, r1
 801fe14:	fb08 f20e 	mul.w	r2, r8, lr
 801fe18:	fb01 2207 	mla	r2, r1, r7, r2
 801fe1c:	fb00 2209 	mla	r2, r0, r9, r2
 801fe20:	fb0a 2206 	mla	r2, sl, r6, r2
 801fe24:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801fe28:	2a00      	cmp	r2, #0
 801fe2a:	f000 80d9 	beq.w	801ffe0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x690>
 801fe2e:	2fff      	cmp	r7, #255	; 0xff
 801fe30:	d01a      	beq.n	801fe68 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x518>
 801fe32:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801fe36:	fb07 fc0c 	mul.w	ip, r7, ip
 801fe3a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801fe3e:	435f      	muls	r7, r3
 801fe40:	ea4f 231c 	mov.w	r3, ip, lsr #8
 801fe44:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801fe48:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801fe4c:	4463      	add	r3, ip
 801fe4e:	f507 7c80 	add.w	ip, r7, #256	; 0x100
 801fe52:	eb0c 2c17 	add.w	ip, ip, r7, lsr #8
 801fe56:	0a1b      	lsrs	r3, r3, #8
 801fe58:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fe5c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801fe60:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801fe64:	ea43 030c 	orr.w	r3, r3, ip
 801fe68:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801fe6c:	d021      	beq.n	801feb2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x562>
 801fe6e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801fe70:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801fe74:	fb0e f707 	mul.w	r7, lr, r7
 801fe78:	9713      	str	r7, [sp, #76]	; 0x4c
 801fe7a:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801fe7c:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 801fe80:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 801fe82:	fb0e fe0c 	mul.w	lr, lr, ip
 801fe86:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801fe8a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801fe8e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801fe92:	44bc      	add	ip, r7
 801fe94:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 801fe98:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 801fe9c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fea0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801fea4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801fea8:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801feac:	ea4c 070e 	orr.w	r7, ip, lr
 801feb0:	970d      	str	r7, [sp, #52]	; 0x34
 801feb2:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801feb6:	d01e      	beq.n	801fef6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5a6>
 801feb8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801feba:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 801febe:	fb09 fe0e 	mul.w	lr, r9, lr
 801fec2:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801fec6:	fb09 f907 	mul.w	r9, r9, r7
 801feca:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801fece:	f509 7780 	add.w	r7, r9, #256	; 0x100
 801fed2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801fed6:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801feda:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801fede:	44f4      	add	ip, lr
 801fee0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fee4:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801fee8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801feec:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801fef0:	ea4c 0709 	orr.w	r7, ip, r9
 801fef4:	9709      	str	r7, [sp, #36]	; 0x24
 801fef6:	2eff      	cmp	r6, #255	; 0xff
 801fef8:	d01c      	beq.n	801ff34 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e4>
 801fefa:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801fefc:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 801ff00:	fb06 fe0e 	mul.w	lr, r6, lr
 801ff04:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801ff08:	437e      	muls	r6, r7
 801ff0a:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801ff0e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ff12:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801ff16:	f506 7780 	add.w	r7, r6, #256	; 0x100
 801ff1a:	44f4      	add	ip, lr
 801ff1c:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 801ff20:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ff24:	0a36      	lsrs	r6, r6, #8
 801ff26:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ff2a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801ff2e:	ea4c 0606 	orr.w	r6, ip, r6
 801ff32:	960f      	str	r6, [sp, #60]	; 0x3c
 801ff34:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 801ff36:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801ff3a:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 801ff3e:	fb08 f606 	mul.w	r6, r8, r6
 801ff42:	fb01 6607 	mla	r6, r1, r7, r6
 801ff46:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801ff48:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801ff4c:	fb00 6607 	mla	r6, r0, r7, r6
 801ff50:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801ff52:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801ff56:	fb0a 6607 	mla	r6, sl, r7, r6
 801ff5a:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801ff5c:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801ff60:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801ff64:	fb08 f807 	mul.w	r8, r8, r7
 801ff68:	fb01 8303 	mla	r3, r1, r3, r8
 801ff6c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801ff6e:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 801ff72:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801ff74:	fb00 330c 	mla	r3, r0, ip, r3
 801ff78:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
 801ff7c:	fb0a 3e0e 	mla	lr, sl, lr, r3
 801ff80:	0a36      	lsrs	r6, r6, #8
 801ff82:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ff86:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801ff8a:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801ff8e:	ea46 060e 	orr.w	r6, r6, lr
 801ff92:	2aff      	cmp	r2, #255	; 0xff
 801ff94:	b2f0      	uxtb	r0, r6
 801ff96:	f3c6 2107 	ubfx	r1, r6, #8, #8
 801ff9a:	ea4f 4616 	mov.w	r6, r6, lsr #16
 801ff9e:	d038      	beq.n	8020012 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c2>
 801ffa0:	f815 7c03 	ldrb.w	r7, [r5, #-3]
 801ffa4:	43d2      	mvns	r2, r2
 801ffa6:	b2d2      	uxtb	r2, r2
 801ffa8:	4357      	muls	r7, r2
 801ffaa:	1c7b      	adds	r3, r7, #1
 801ffac:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 801ffb0:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801ffb4:	f815 0c02 	ldrb.w	r0, [r5, #-2]
 801ffb8:	f805 3c03 	strb.w	r3, [r5, #-3]
 801ffbc:	4350      	muls	r0, r2
 801ffbe:	1c43      	adds	r3, r0, #1
 801ffc0:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801ffc4:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801ffc8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801ffcc:	f805 1c02 	strb.w	r1, [r5, #-2]
 801ffd0:	4353      	muls	r3, r2
 801ffd2:	1c5a      	adds	r2, r3, #1
 801ffd4:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801ffd8:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 801ffdc:	f805 6c01 	strb.w	r6, [r5, #-1]
 801ffe0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801ffe2:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801ffe4:	4413      	add	r3, r2
 801ffe6:	9329      	str	r3, [sp, #164]	; 0xa4
 801ffe8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801ffea:	3503      	adds	r5, #3
 801ffec:	441c      	add	r4, r3
 801ffee:	f10b 3bff 	add.w	fp, fp, #4294967295
 801fff2:	e511      	b.n	801fa18 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801fff4:	b150      	cbz	r0, 802000c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6bc>
 801fff6:	990e      	ldr	r1, [sp, #56]	; 0x38
 801fff8:	5871      	ldr	r1, [r6, r1]
 801fffa:	9109      	str	r1, [sp, #36]	; 0x24
 801fffc:	ea4f 6911 	mov.w	r9, r1, lsr #24
 8020000:	26ff      	movs	r6, #255	; 0xff
 8020002:	46b6      	mov	lr, r6
 8020004:	e6f6      	b.n	801fdf4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a4>
 8020006:	26ff      	movs	r6, #255	; 0xff
 8020008:	46b1      	mov	r9, r6
 802000a:	e6f3      	b.n	801fdf4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a4>
 802000c:	26ff      	movs	r6, #255	; 0xff
 802000e:	46b1      	mov	r9, r6
 8020010:	e7f7      	b.n	8020002 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b2>
 8020012:	f805 0c03 	strb.w	r0, [r5, #-3]
 8020016:	f805 1c02 	strb.w	r1, [r5, #-2]
 802001a:	e7df      	b.n	801ffdc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68c>
 802001c:	b017      	add	sp, #92	; 0x5c
 802001e:	ecbd 8b08 	vpop	{d8-d11}
 8020022:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08020028 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 8020028:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802002c:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 8020030:	2800      	cmp	r0, #0
 8020032:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8020036:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 802003a:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 802003e:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 8020042:	fb0c 0e03 	mla	lr, ip, r3, r0
 8020046:	db6b      	blt.n	8020120 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8020048:	4580      	cmp	r8, r0
 802004a:	dd69      	ble.n	8020120 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 802004c:	f1bc 0f00 	cmp.w	ip, #0
 8020050:	db66      	blt.n	8020120 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8020052:	45e1      	cmp	r9, ip
 8020054:	dd64      	ble.n	8020120 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8020056:	ea4f 045e 	mov.w	r4, lr, lsr #1
 802005a:	f01e 0f01 	tst.w	lr, #1
 802005e:	5d16      	ldrb	r6, [r2, r4]
 8020060:	bf0c      	ite	eq
 8020062:	f006 060f 	andeq.w	r6, r6, #15
 8020066:	1136      	asrne	r6, r6, #4
 8020068:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 802006c:	b2f6      	uxtb	r6, r6
 802006e:	f110 0a01 	adds.w	sl, r0, #1
 8020072:	d457      	bmi.n	8020124 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8020074:	45d0      	cmp	r8, sl
 8020076:	dd55      	ble.n	8020124 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8020078:	f1bc 0f00 	cmp.w	ip, #0
 802007c:	db52      	blt.n	8020124 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 802007e:	45e1      	cmp	r9, ip
 8020080:	dd50      	ble.n	8020124 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8020082:	2f00      	cmp	r7, #0
 8020084:	f000 80ac 	beq.w	80201e0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b8>
 8020088:	f10e 0b01 	add.w	fp, lr, #1
 802008c:	ea4f 045b 	mov.w	r4, fp, lsr #1
 8020090:	f01b 0f01 	tst.w	fp, #1
 8020094:	5d14      	ldrb	r4, [r2, r4]
 8020096:	bf0c      	ite	eq
 8020098:	f004 040f 	andeq.w	r4, r4, #15
 802009c:	1124      	asrne	r4, r4, #4
 802009e:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 80200a2:	b2e4      	uxtb	r4, r4
 80200a4:	2d00      	cmp	r5, #0
 80200a6:	f000 8096 	beq.w	80201d6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ae>
 80200aa:	2800      	cmp	r0, #0
 80200ac:	f10c 0c01 	add.w	ip, ip, #1
 80200b0:	db3c      	blt.n	802012c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 80200b2:	4580      	cmp	r8, r0
 80200b4:	dd3a      	ble.n	802012c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 80200b6:	f1bc 0f00 	cmp.w	ip, #0
 80200ba:	db37      	blt.n	802012c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 80200bc:	45e1      	cmp	r9, ip
 80200be:	dd35      	ble.n	802012c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 80200c0:	eb03 0b0e 	add.w	fp, r3, lr
 80200c4:	ea4f 005b 	mov.w	r0, fp, lsr #1
 80200c8:	f01b 0f01 	tst.w	fp, #1
 80200cc:	5c10      	ldrb	r0, [r2, r0]
 80200ce:	bf0c      	ite	eq
 80200d0:	f000 000f 	andeq.w	r0, r0, #15
 80200d4:	1100      	asrne	r0, r0, #4
 80200d6:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80200da:	b2c0      	uxtb	r0, r0
 80200dc:	f1ba 0f00 	cmp.w	sl, #0
 80200e0:	db26      	blt.n	8020130 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 80200e2:	45d0      	cmp	r8, sl
 80200e4:	dd24      	ble.n	8020130 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 80200e6:	f1bc 0f00 	cmp.w	ip, #0
 80200ea:	db21      	blt.n	8020130 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 80200ec:	45e1      	cmp	r9, ip
 80200ee:	dd1f      	ble.n	8020130 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 80200f0:	b307      	cbz	r7, 8020134 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10c>
 80200f2:	3301      	adds	r3, #1
 80200f4:	449e      	add	lr, r3
 80200f6:	ea4f 035e 	mov.w	r3, lr, lsr #1
 80200fa:	f01e 0f01 	tst.w	lr, #1
 80200fe:	5cd3      	ldrb	r3, [r2, r3]
 8020100:	bf0c      	ite	eq
 8020102:	f003 030f 	andeq.w	r3, r3, #15
 8020106:	111b      	asrne	r3, r3, #4
 8020108:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802010c:	b2db      	uxtb	r3, r3
 802010e:	2f0f      	cmp	r7, #15
 8020110:	d911      	bls.n	8020136 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10e>
 8020112:	4b35      	ldr	r3, [pc, #212]	; (80201e8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c0>)
 8020114:	4a35      	ldr	r2, [pc, #212]	; (80201ec <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c4>)
 8020116:	4836      	ldr	r0, [pc, #216]	; (80201f0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c8>)
 8020118:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 802011c:	f002 fb68 	bl	80227f0 <__assert_func>
 8020120:	2600      	movs	r6, #0
 8020122:	e7a4      	b.n	802006e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x46>
 8020124:	2400      	movs	r4, #0
 8020126:	e7bd      	b.n	80200a4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x7c>
 8020128:	463c      	mov	r4, r7
 802012a:	e7be      	b.n	80200aa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x82>
 802012c:	2000      	movs	r0, #0
 802012e:	e7d5      	b.n	80200dc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xb4>
 8020130:	2300      	movs	r3, #0
 8020132:	e7ec      	b.n	802010e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xe6>
 8020134:	463b      	mov	r3, r7
 8020136:	2d0f      	cmp	r5, #15
 8020138:	d8eb      	bhi.n	8020112 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 802013a:	b2bf      	uxth	r7, r7
 802013c:	b2ad      	uxth	r5, r5
 802013e:	fb07 f205 	mul.w	r2, r7, r5
 8020142:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 8020146:	013f      	lsls	r7, r7, #4
 8020148:	b2ad      	uxth	r5, r5
 802014a:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 802014e:	1abf      	subs	r7, r7, r2
 8020150:	ebac 0c05 	sub.w	ip, ip, r5
 8020154:	b2bf      	uxth	r7, r7
 8020156:	fa1f fc8c 	uxth.w	ip, ip
 802015a:	437c      	muls	r4, r7
 802015c:	fb06 440c 	mla	r4, r6, ip, r4
 8020160:	fb05 4400 	mla	r4, r5, r0, r4
 8020164:	fb02 4203 	mla	r2, r2, r3, r4
 8020168:	f3c2 2207 	ubfx	r2, r2, #8, #8
 802016c:	b38a      	cbz	r2, 80201d2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1aa>
 802016e:	4b21      	ldr	r3, [pc, #132]	; (80201f4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1cc>)
 8020170:	681c      	ldr	r4, [r3, #0]
 8020172:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8020176:	4353      	muls	r3, r2
 8020178:	1c5a      	adds	r2, r3, #1
 802017a:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 802017e:	1212      	asrs	r2, r2, #8
 8020180:	b290      	uxth	r0, r2
 8020182:	43d2      	mvns	r2, r2
 8020184:	b2d3      	uxtb	r3, r2
 8020186:	b2e5      	uxtb	r5, r4
 8020188:	780a      	ldrb	r2, [r1, #0]
 802018a:	fb15 f500 	smulbb	r5, r5, r0
 802018e:	fb02 5203 	mla	r2, r2, r3, r5
 8020192:	b292      	uxth	r2, r2
 8020194:	1c55      	adds	r5, r2, #1
 8020196:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 802019a:	784d      	ldrb	r5, [r1, #1]
 802019c:	1212      	asrs	r2, r2, #8
 802019e:	fb15 f503 	smulbb	r5, r5, r3
 80201a2:	700a      	strb	r2, [r1, #0]
 80201a4:	f3c4 2207 	ubfx	r2, r4, #8, #8
 80201a8:	fb02 5200 	mla	r2, r2, r0, r5
 80201ac:	b292      	uxth	r2, r2
 80201ae:	1c55      	adds	r5, r2, #1
 80201b0:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 80201b4:	1212      	asrs	r2, r2, #8
 80201b6:	704a      	strb	r2, [r1, #1]
 80201b8:	788a      	ldrb	r2, [r1, #2]
 80201ba:	f3c4 4407 	ubfx	r4, r4, #16, #8
 80201be:	fb12 f303 	smulbb	r3, r2, r3
 80201c2:	fb04 3300 	mla	r3, r4, r0, r3
 80201c6:	b29b      	uxth	r3, r3
 80201c8:	1c5a      	adds	r2, r3, #1
 80201ca:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80201ce:	121b      	asrs	r3, r3, #8
 80201d0:	708b      	strb	r3, [r1, #2]
 80201d2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80201d6:	2f0f      	cmp	r7, #15
 80201d8:	d89b      	bhi.n	8020112 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 80201da:	462b      	mov	r3, r5
 80201dc:	4628      	mov	r0, r5
 80201de:	e7ac      	b.n	802013a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x112>
 80201e0:	2d00      	cmp	r5, #0
 80201e2:	d1a1      	bne.n	8020128 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x100>
 80201e4:	462c      	mov	r4, r5
 80201e6:	e7f8      	b.n	80201da <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b2>
 80201e8:	08027814 	.word	0x08027814
 80201ec:	08027d0a 	.word	0x08027d0a
 80201f0:	080278dd 	.word	0x080278dd
 80201f4:	2000d1cc 	.word	0x2000d1cc

080201f8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80201f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80201fc:	ed2d 8b08 	vpush	{d8-d11}
 8020200:	b097      	sub	sp, #92	; 0x5c
 8020202:	e9dd 5629 	ldrd	r5, r6, [sp, #164]	; 0xa4
 8020206:	9308      	str	r3, [sp, #32]
 8020208:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 802020c:	9214      	str	r2, [sp, #80]	; 0x50
 802020e:	9309      	str	r3, [sp, #36]	; 0x24
 8020210:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8020212:	f89d 30cc 	ldrb.w	r3, [sp, #204]	; 0xcc
 8020216:	910c      	str	r1, [sp, #48]	; 0x30
 8020218:	930e      	str	r3, [sp, #56]	; 0x38
 802021a:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 802021e:	9015      	str	r0, [sp, #84]	; 0x54
 8020220:	6850      	ldr	r0, [r2, #4]
 8020222:	f9bd b0c0 	ldrsh.w	fp, [sp, #192]	; 0xc0
 8020226:	fb00 1803 	mla	r8, r0, r3, r1
 802022a:	6813      	ldr	r3, [r2, #0]
 802022c:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8020230:	4498      	add	r8, r3
 8020232:	f10b 0301 	add.w	r3, fp, #1
 8020236:	f023 0301 	bic.w	r3, r3, #1
 802023a:	930f      	str	r3, [sp, #60]	; 0x3c
 802023c:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 802023e:	681f      	ldr	r7, [r3, #0]
 8020240:	eeb0 aa40 	vmov.f32	s20, s0
 8020244:	eef0 9a60 	vmov.f32	s19, s1
 8020248:	eeb0 9a41 	vmov.f32	s18, s2
 802024c:	eeb0 8a62 	vmov.f32	s16, s5
 8020250:	eef0 8a43 	vmov.f32	s17, s6
 8020254:	eef0 ba44 	vmov.f32	s23, s8
 8020258:	eeb0 ba64 	vmov.f32	s22, s9
 802025c:	eef0 aa45 	vmov.f32	s21, s10
 8020260:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020262:	2b00      	cmp	r3, #0
 8020264:	dc03      	bgt.n	802026e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 8020266:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8020268:	2b00      	cmp	r3, #0
 802026a:	f340 8236 	ble.w	80206da <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e2>
 802026e:	9b08      	ldr	r3, [sp, #32]
 8020270:	2b00      	cmp	r3, #0
 8020272:	f340 810b 	ble.w	802048c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x294>
 8020276:	142a      	asrs	r2, r5, #16
 8020278:	ea4f 4326 	mov.w	r3, r6, asr #16
 802027c:	d42c      	bmi.n	80202d8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 802027e:	1c51      	adds	r1, r2, #1
 8020280:	458b      	cmp	fp, r1
 8020282:	dd2c      	ble.n	80202de <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8020284:	2b00      	cmp	r3, #0
 8020286:	db2a      	blt.n	80202de <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8020288:	9809      	ldr	r0, [sp, #36]	; 0x24
 802028a:	1c59      	adds	r1, r3, #1
 802028c:	4288      	cmp	r0, r1
 802028e:	dd26      	ble.n	80202de <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8020290:	9b08      	ldr	r3, [sp, #32]
 8020292:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8020294:	3b01      	subs	r3, #1
 8020296:	fb02 5203 	mla	r2, r2, r3, r5
 802029a:	1412      	asrs	r2, r2, #16
 802029c:	d429      	bmi.n	80202f2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 802029e:	3201      	adds	r2, #1
 80202a0:	4593      	cmp	fp, r2
 80202a2:	dd26      	ble.n	80202f2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 80202a4:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80202a6:	fb02 6303 	mla	r3, r2, r3, r6
 80202aa:	141b      	asrs	r3, r3, #16
 80202ac:	d421      	bmi.n	80202f2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 80202ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80202b0:	3301      	adds	r3, #1
 80202b2:	429a      	cmp	r2, r3
 80202b4:	dd1d      	ble.n	80202f2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 80202b6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80202ba:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 80202be:	f108 0e03 	add.w	lr, r8, #3
 80202c2:	f1b9 0f00 	cmp.w	r9, #0
 80202c6:	f300 814e 	bgt.w	8020566 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36e>
 80202ca:	9b08      	ldr	r3, [sp, #32]
 80202cc:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80202d0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80202d4:	44a0      	add	r8, r4
 80202d6:	e0db      	b.n	8020490 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x298>
 80202d8:	1c51      	adds	r1, r2, #1
 80202da:	f040 80cd 	bne.w	8020478 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x280>
 80202de:	4593      	cmp	fp, r2
 80202e0:	f340 80ca 	ble.w	8020478 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x280>
 80202e4:	1c5a      	adds	r2, r3, #1
 80202e6:	f2c0 80c7 	blt.w	8020478 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x280>
 80202ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80202ec:	4293      	cmp	r3, r2
 80202ee:	f280 80c3 	bge.w	8020478 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x280>
 80202f2:	9b08      	ldr	r3, [sp, #32]
 80202f4:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 80202f8:	930d      	str	r3, [sp, #52]	; 0x34
 80202fa:	46c1      	mov	r9, r8
 80202fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80202fe:	2b00      	cmp	r3, #0
 8020300:	dde3      	ble.n	80202ca <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd2>
 8020302:	1428      	asrs	r0, r5, #16
 8020304:	ea4f 4326 	mov.w	r3, r6, asr #16
 8020308:	f3c5 3203 	ubfx	r2, r5, #12, #4
 802030c:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8020310:	f100 8110 	bmi.w	8020534 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x33c>
 8020314:	f100 0c01 	add.w	ip, r0, #1
 8020318:	45e3      	cmp	fp, ip
 802031a:	f340 810d 	ble.w	8020538 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x340>
 802031e:	2b00      	cmp	r3, #0
 8020320:	f2c0 810a 	blt.w	8020538 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x340>
 8020324:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8020326:	f103 0c01 	add.w	ip, r3, #1
 802032a:	4564      	cmp	r4, ip
 802032c:	f340 8104 	ble.w	8020538 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x340>
 8020330:	fb03 030a 	mla	r3, r3, sl, r0
 8020334:	0858      	lsrs	r0, r3, #1
 8020336:	07dc      	lsls	r4, r3, #31
 8020338:	5c38      	ldrb	r0, [r7, r0]
 802033a:	bf54      	ite	pl
 802033c:	f000 000f 	andpl.w	r0, r0, #15
 8020340:	1100      	asrmi	r0, r0, #4
 8020342:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8020346:	b2c0      	uxtb	r0, r0
 8020348:	2a00      	cmp	r2, #0
 802034a:	f000 80e0 	beq.w	802050e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x316>
 802034e:	f103 0e01 	add.w	lr, r3, #1
 8020352:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8020356:	f01e 0f01 	tst.w	lr, #1
 802035a:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802035e:	bf0c      	ite	eq
 8020360:	f00c 0c0f 	andeq.w	ip, ip, #15
 8020364:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8020368:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802036c:	fa5f f48c 	uxtb.w	r4, ip
 8020370:	9410      	str	r4, [sp, #64]	; 0x40
 8020372:	b1f1      	cbz	r1, 80203b2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1ba>
 8020374:	4453      	add	r3, sl
 8020376:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802037a:	07dc      	lsls	r4, r3, #31
 802037c:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8020380:	bf54      	ite	pl
 8020382:	f00c 0c0f 	andpl.w	ip, ip, #15
 8020386:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802038a:	3301      	adds	r3, #1
 802038c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8020390:	fa5f f48c 	uxtb.w	r4, ip
 8020394:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8020398:	940a      	str	r4, [sp, #40]	; 0x28
 802039a:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802039e:	07dc      	lsls	r4, r3, #31
 80203a0:	bf54      	ite	pl
 80203a2:	f00c 030f 	andpl.w	r3, ip, #15
 80203a6:	ea4f 132c 	movmi.w	r3, ip, asr #4
 80203aa:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80203ae:	b2db      	uxtb	r3, r3
 80203b0:	9311      	str	r3, [sp, #68]	; 0x44
 80203b2:	b292      	uxth	r2, r2
 80203b4:	b289      	uxth	r1, r1
 80203b6:	fb02 fc01 	mul.w	ip, r2, r1
 80203ba:	0113      	lsls	r3, r2, #4
 80203bc:	ebcc 1101 	rsb	r1, ip, r1, lsl #4
 80203c0:	b289      	uxth	r1, r1
 80203c2:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 80203c6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80203c8:	eba3 030c 	sub.w	r3, r3, ip
 80203cc:	ebae 0e01 	sub.w	lr, lr, r1
 80203d0:	b29b      	uxth	r3, r3
 80203d2:	4353      	muls	r3, r2
 80203d4:	fa1f fe8e 	uxth.w	lr, lr
 80203d8:	fb00 320e 	mla	r2, r0, lr, r3
 80203dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80203de:	fb01 2203 	mla	r2, r1, r3, r2
 80203e2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80203e4:	fb0c 2203 	mla	r2, ip, r3, r2
 80203e8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80203ec:	2a00      	cmp	r2, #0
 80203ee:	d039      	beq.n	8020464 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26c>
 80203f0:	4bbc      	ldr	r3, [pc, #752]	; (80206e4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ec>)
 80203f2:	6819      	ldr	r1, [r3, #0]
 80203f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80203f6:	435a      	muls	r2, r3
 80203f8:	1c53      	adds	r3, r2, #1
 80203fa:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 80203fe:	1212      	asrs	r2, r2, #8
 8020400:	b290      	uxth	r0, r2
 8020402:	43d2      	mvns	r2, r2
 8020404:	b2d3      	uxtb	r3, r2
 8020406:	fa5f fc81 	uxtb.w	ip, r1
 802040a:	f899 2000 	ldrb.w	r2, [r9]
 802040e:	fb1c fc00 	smulbb	ip, ip, r0
 8020412:	fb02 c203 	mla	r2, r2, r3, ip
 8020416:	b292      	uxth	r2, r2
 8020418:	f102 0c01 	add.w	ip, r2, #1
 802041c:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8020420:	f899 c001 	ldrb.w	ip, [r9, #1]
 8020424:	1212      	asrs	r2, r2, #8
 8020426:	fb1c fc03 	smulbb	ip, ip, r3
 802042a:	f889 2000 	strb.w	r2, [r9]
 802042e:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8020432:	fb02 c200 	mla	r2, r2, r0, ip
 8020436:	b292      	uxth	r2, r2
 8020438:	f102 0c01 	add.w	ip, r2, #1
 802043c:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8020440:	1212      	asrs	r2, r2, #8
 8020442:	f889 2001 	strb.w	r2, [r9, #1]
 8020446:	f899 2002 	ldrb.w	r2, [r9, #2]
 802044a:	f3c1 4107 	ubfx	r1, r1, #16, #8
 802044e:	fb12 f303 	smulbb	r3, r2, r3
 8020452:	fb01 3300 	mla	r3, r1, r0, r3
 8020456:	b29b      	uxth	r3, r3
 8020458:	1c5a      	adds	r2, r3, #1
 802045a:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802045e:	121b      	asrs	r3, r3, #8
 8020460:	f889 3002 	strb.w	r3, [r9, #2]
 8020464:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8020466:	441d      	add	r5, r3
 8020468:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802046a:	441e      	add	r6, r3
 802046c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802046e:	3b01      	subs	r3, #1
 8020470:	f109 0903 	add.w	r9, r9, #3
 8020474:	930d      	str	r3, [sp, #52]	; 0x34
 8020476:	e741      	b.n	80202fc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 8020478:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 802047a:	441d      	add	r5, r3
 802047c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802047e:	441e      	add	r6, r3
 8020480:	9b08      	ldr	r3, [sp, #32]
 8020482:	3b01      	subs	r3, #1
 8020484:	9308      	str	r3, [sp, #32]
 8020486:	f108 0803 	add.w	r8, r8, #3
 802048a:	e6f0      	b.n	802026e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 802048c:	f47f af00 	bne.w	8020290 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 8020490:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020492:	2b00      	cmp	r3, #0
 8020494:	f340 8121 	ble.w	80206da <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e2>
 8020498:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802049c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80204a0:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80204a4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80204a6:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80204aa:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80204ae:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80204b2:	eef0 6a48 	vmov.f32	s13, s16
 80204b6:	ee69 7a27 	vmul.f32	s15, s18, s15
 80204ba:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80204be:	ee37 8a48 	vsub.f32	s16, s14, s16
 80204c2:	ee16 5a90 	vmov	r5, s13
 80204c6:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80204ca:	eef0 6a68 	vmov.f32	s13, s17
 80204ce:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80204d2:	ee18 2a10 	vmov	r2, s16
 80204d6:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80204da:	fb92 f3f3 	sdiv	r3, r2, r3
 80204de:	ee18 2a90 	vmov	r2, s17
 80204e2:	932b      	str	r3, [sp, #172]	; 0xac
 80204e4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80204e6:	fb92 f3f3 	sdiv	r3, r2, r3
 80204ea:	932c      	str	r3, [sp, #176]	; 0xb0
 80204ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80204ee:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80204f0:	3b01      	subs	r3, #1
 80204f2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80204f6:	930c      	str	r3, [sp, #48]	; 0x30
 80204f8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80204fa:	bf08      	it	eq
 80204fc:	4613      	moveq	r3, r2
 80204fe:	ee16 6a90 	vmov	r6, s13
 8020502:	9308      	str	r3, [sp, #32]
 8020504:	eef0 8a67 	vmov.f32	s17, s15
 8020508:	eeb0 8a47 	vmov.f32	s16, s14
 802050c:	e6a8      	b.n	8020260 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 802050e:	2900      	cmp	r1, #0
 8020510:	f43f af4f 	beq.w	80203b2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1ba>
 8020514:	4453      	add	r3, sl
 8020516:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802051a:	07db      	lsls	r3, r3, #31
 802051c:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8020520:	bf54      	ite	pl
 8020522:	f00c 030f 	andpl.w	r3, ip, #15
 8020526:	ea4f 132c 	movmi.w	r3, ip, asr #4
 802052a:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802052e:	b2db      	uxtb	r3, r3
 8020530:	930a      	str	r3, [sp, #40]	; 0x28
 8020532:	e73e      	b.n	80203b2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1ba>
 8020534:	1c44      	adds	r4, r0, #1
 8020536:	d195      	bne.n	8020464 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26c>
 8020538:	4583      	cmp	fp, r0
 802053a:	dd93      	ble.n	8020464 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26c>
 802053c:	1c5c      	adds	r4, r3, #1
 802053e:	db91      	blt.n	8020464 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26c>
 8020540:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8020542:	429c      	cmp	r4, r3
 8020544:	dd8e      	ble.n	8020464 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26c>
 8020546:	e9cd 3203 	strd	r3, r2, [sp, #12]
 802054a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802054c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802054e:	9002      	str	r0, [sp, #8]
 8020550:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8020554:	e9cd b300 	strd	fp, r3, [sp]
 8020558:	463a      	mov	r2, r7
 802055a:	4653      	mov	r3, sl
 802055c:	4649      	mov	r1, r9
 802055e:	9815      	ldr	r0, [sp, #84]	; 0x54
 8020560:	f7ff fd62 	bl	8020028 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 8020564:	e77e      	b.n	8020464 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26c>
 8020566:	142a      	asrs	r2, r5, #16
 8020568:	1433      	asrs	r3, r6, #16
 802056a:	fb0a 2303 	mla	r3, sl, r3, r2
 802056e:	085a      	lsrs	r2, r3, #1
 8020570:	07dc      	lsls	r4, r3, #31
 8020572:	5cba      	ldrb	r2, [r7, r2]
 8020574:	bf54      	ite	pl
 8020576:	f002 020f 	andpl.w	r2, r2, #15
 802057a:	1112      	asrmi	r2, r2, #4
 802057c:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8020580:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8020584:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8020588:	b2d2      	uxtb	r2, r2
 802058a:	2900      	cmp	r1, #0
 802058c:	f000 8092 	beq.w	80206b4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4bc>
 8020590:	1c5c      	adds	r4, r3, #1
 8020592:	ea4f 0c54 	mov.w	ip, r4, lsr #1
 8020596:	07e4      	lsls	r4, r4, #31
 8020598:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802059c:	bf54      	ite	pl
 802059e:	f00c 0c0f 	andpl.w	ip, ip, #15
 80205a2:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80205a6:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80205aa:	fa5f f48c 	uxtb.w	r4, ip
 80205ae:	9412      	str	r4, [sp, #72]	; 0x48
 80205b0:	b1f8      	cbz	r0, 80205f2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3fa>
 80205b2:	4453      	add	r3, sl
 80205b4:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80205b8:	07dc      	lsls	r4, r3, #31
 80205ba:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80205be:	bf54      	ite	pl
 80205c0:	f00c 0c0f 	andpl.w	ip, ip, #15
 80205c4:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80205c8:	3301      	adds	r3, #1
 80205ca:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80205ce:	fa5f f48c 	uxtb.w	r4, ip
 80205d2:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80205d6:	940b      	str	r4, [sp, #44]	; 0x2c
 80205d8:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80205dc:	07dc      	lsls	r4, r3, #31
 80205de:	bf54      	ite	pl
 80205e0:	f00c 0c0f 	andpl.w	ip, ip, #15
 80205e4:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80205e8:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80205ec:	fa5f f38c 	uxtb.w	r3, ip
 80205f0:	9313      	str	r3, [sp, #76]	; 0x4c
 80205f2:	b289      	uxth	r1, r1
 80205f4:	b280      	uxth	r0, r0
 80205f6:	fb01 f300 	mul.w	r3, r1, r0
 80205fa:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 80205fe:	0109      	lsls	r1, r1, #4
 8020600:	b280      	uxth	r0, r0
 8020602:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 8020606:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8020608:	1ac9      	subs	r1, r1, r3
 802060a:	ebac 0c00 	sub.w	ip, ip, r0
 802060e:	b289      	uxth	r1, r1
 8020610:	4361      	muls	r1, r4
 8020612:	fa1f fc8c 	uxth.w	ip, ip
 8020616:	fb02 120c 	mla	r2, r2, ip, r1
 802061a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 802061c:	fb00 2001 	mla	r0, r0, r1, r2
 8020620:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8020622:	fb03 0302 	mla	r3, r3, r2, r0
 8020626:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802062a:	2b00      	cmp	r3, #0
 802062c:	d039      	beq.n	80206a2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4aa>
 802062e:	4a2d      	ldr	r2, [pc, #180]	; (80206e4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ec>)
 8020630:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 8020634:	6810      	ldr	r0, [r2, #0]
 8020636:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8020638:	4353      	muls	r3, r2
 802063a:	1c5a      	adds	r2, r3, #1
 802063c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8020640:	121b      	asrs	r3, r3, #8
 8020642:	b29a      	uxth	r2, r3
 8020644:	fa5f fc80 	uxtb.w	ip, r0
 8020648:	43db      	mvns	r3, r3
 802064a:	b2db      	uxtb	r3, r3
 802064c:	fb1c fc02 	smulbb	ip, ip, r2
 8020650:	fb01 c103 	mla	r1, r1, r3, ip
 8020654:	b289      	uxth	r1, r1
 8020656:	f101 0c01 	add.w	ip, r1, #1
 802065a:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 802065e:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 8020662:	1209      	asrs	r1, r1, #8
 8020664:	fb1c fc03 	smulbb	ip, ip, r3
 8020668:	f80e 1c03 	strb.w	r1, [lr, #-3]
 802066c:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8020670:	fb01 c102 	mla	r1, r1, r2, ip
 8020674:	b289      	uxth	r1, r1
 8020676:	f101 0c01 	add.w	ip, r1, #1
 802067a:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 802067e:	1209      	asrs	r1, r1, #8
 8020680:	f80e 1c02 	strb.w	r1, [lr, #-2]
 8020684:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 8020688:	f3c0 4007 	ubfx	r0, r0, #16, #8
 802068c:	fb11 f303 	smulbb	r3, r1, r3
 8020690:	fb00 3002 	mla	r0, r0, r2, r3
 8020694:	b280      	uxth	r0, r0
 8020696:	1c42      	adds	r2, r0, #1
 8020698:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802069c:	1200      	asrs	r0, r0, #8
 802069e:	f80e 0c01 	strb.w	r0, [lr, #-1]
 80206a2:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80206a4:	441d      	add	r5, r3
 80206a6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80206a8:	f10e 0e03 	add.w	lr, lr, #3
 80206ac:	441e      	add	r6, r3
 80206ae:	f109 39ff 	add.w	r9, r9, #4294967295
 80206b2:	e606      	b.n	80202c2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xca>
 80206b4:	2800      	cmp	r0, #0
 80206b6:	d09c      	beq.n	80205f2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3fa>
 80206b8:	4453      	add	r3, sl
 80206ba:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80206be:	07db      	lsls	r3, r3, #31
 80206c0:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80206c4:	bf54      	ite	pl
 80206c6:	f00c 0c0f 	andpl.w	ip, ip, #15
 80206ca:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80206ce:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80206d2:	fa5f f38c 	uxtb.w	r3, ip
 80206d6:	930b      	str	r3, [sp, #44]	; 0x2c
 80206d8:	e78b      	b.n	80205f2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3fa>
 80206da:	b017      	add	sp, #92	; 0x5c
 80206dc:	ecbd 8b08 	vpop	{d8-d11}
 80206e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80206e4:	2000d1cc 	.word	0x2000d1cc

080206e8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 80206e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80206ec:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 80206f0:	2800      	cmp	r0, #0
 80206f2:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 80206f6:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 80206fa:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 80206fe:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 8020702:	fb0c 0e03 	mla	lr, ip, r3, r0
 8020706:	db6b      	blt.n	80207e0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 8020708:	4580      	cmp	r8, r0
 802070a:	dd69      	ble.n	80207e0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 802070c:	f1bc 0f00 	cmp.w	ip, #0
 8020710:	db66      	blt.n	80207e0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 8020712:	45e1      	cmp	r9, ip
 8020714:	dd64      	ble.n	80207e0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 8020716:	ea4f 045e 	mov.w	r4, lr, lsr #1
 802071a:	f01e 0f01 	tst.w	lr, #1
 802071e:	5d16      	ldrb	r6, [r2, r4]
 8020720:	bf0c      	ite	eq
 8020722:	f006 060f 	andeq.w	r6, r6, #15
 8020726:	1136      	asrne	r6, r6, #4
 8020728:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 802072c:	b2f6      	uxtb	r6, r6
 802072e:	f110 0a01 	adds.w	sl, r0, #1
 8020732:	d457      	bmi.n	80207e4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 8020734:	45d0      	cmp	r8, sl
 8020736:	dd55      	ble.n	80207e4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 8020738:	f1bc 0f00 	cmp.w	ip, #0
 802073c:	db52      	blt.n	80207e4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 802073e:	45e1      	cmp	r9, ip
 8020740:	dd50      	ble.n	80207e4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 8020742:	2f00      	cmp	r7, #0
 8020744:	f000 80a5 	beq.w	8020892 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1aa>
 8020748:	f10e 0b01 	add.w	fp, lr, #1
 802074c:	ea4f 045b 	mov.w	r4, fp, lsr #1
 8020750:	f01b 0f01 	tst.w	fp, #1
 8020754:	5d14      	ldrb	r4, [r2, r4]
 8020756:	bf0c      	ite	eq
 8020758:	f004 040f 	andeq.w	r4, r4, #15
 802075c:	1124      	asrne	r4, r4, #4
 802075e:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8020762:	b2e4      	uxtb	r4, r4
 8020764:	2d00      	cmp	r5, #0
 8020766:	f000 808f 	beq.w	8020888 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a0>
 802076a:	2800      	cmp	r0, #0
 802076c:	f10c 0c01 	add.w	ip, ip, #1
 8020770:	db3c      	blt.n	80207ec <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8020772:	4580      	cmp	r8, r0
 8020774:	dd3a      	ble.n	80207ec <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8020776:	f1bc 0f00 	cmp.w	ip, #0
 802077a:	db37      	blt.n	80207ec <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 802077c:	45e1      	cmp	r9, ip
 802077e:	dd35      	ble.n	80207ec <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8020780:	eb03 0b0e 	add.w	fp, r3, lr
 8020784:	ea4f 005b 	mov.w	r0, fp, lsr #1
 8020788:	f01b 0f01 	tst.w	fp, #1
 802078c:	5c10      	ldrb	r0, [r2, r0]
 802078e:	bf0c      	ite	eq
 8020790:	f000 000f 	andeq.w	r0, r0, #15
 8020794:	1100      	asrne	r0, r0, #4
 8020796:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802079a:	b2c0      	uxtb	r0, r0
 802079c:	f1ba 0f00 	cmp.w	sl, #0
 80207a0:	db26      	blt.n	80207f0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 80207a2:	45d0      	cmp	r8, sl
 80207a4:	dd24      	ble.n	80207f0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 80207a6:	f1bc 0f00 	cmp.w	ip, #0
 80207aa:	db21      	blt.n	80207f0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 80207ac:	45e1      	cmp	r9, ip
 80207ae:	dd1f      	ble.n	80207f0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 80207b0:	b307      	cbz	r7, 80207f4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10c>
 80207b2:	3301      	adds	r3, #1
 80207b4:	449e      	add	lr, r3
 80207b6:	ea4f 035e 	mov.w	r3, lr, lsr #1
 80207ba:	f01e 0f01 	tst.w	lr, #1
 80207be:	5cd3      	ldrb	r3, [r2, r3]
 80207c0:	bf0c      	ite	eq
 80207c2:	f003 030f 	andeq.w	r3, r3, #15
 80207c6:	111b      	asrne	r3, r3, #4
 80207c8:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80207cc:	b2db      	uxtb	r3, r3
 80207ce:	2f0f      	cmp	r7, #15
 80207d0:	d911      	bls.n	80207f6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10e>
 80207d2:	4b32      	ldr	r3, [pc, #200]	; (802089c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b4>)
 80207d4:	4a32      	ldr	r2, [pc, #200]	; (80208a0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b8>)
 80207d6:	4833      	ldr	r0, [pc, #204]	; (80208a4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1bc>)
 80207d8:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 80207dc:	f002 f808 	bl	80227f0 <__assert_func>
 80207e0:	2600      	movs	r6, #0
 80207e2:	e7a4      	b.n	802072e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x46>
 80207e4:	2400      	movs	r4, #0
 80207e6:	e7bd      	b.n	8020764 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x7c>
 80207e8:	463c      	mov	r4, r7
 80207ea:	e7be      	b.n	802076a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x82>
 80207ec:	2000      	movs	r0, #0
 80207ee:	e7d5      	b.n	802079c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xb4>
 80207f0:	2300      	movs	r3, #0
 80207f2:	e7ec      	b.n	80207ce <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xe6>
 80207f4:	463b      	mov	r3, r7
 80207f6:	2d0f      	cmp	r5, #15
 80207f8:	d8eb      	bhi.n	80207d2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 80207fa:	b2bf      	uxth	r7, r7
 80207fc:	b2ad      	uxth	r5, r5
 80207fe:	fb07 f205 	mul.w	r2, r7, r5
 8020802:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 8020806:	013f      	lsls	r7, r7, #4
 8020808:	b2ad      	uxth	r5, r5
 802080a:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 802080e:	1abf      	subs	r7, r7, r2
 8020810:	ebac 0c05 	sub.w	ip, ip, r5
 8020814:	b2bf      	uxth	r7, r7
 8020816:	fa1f fc8c 	uxth.w	ip, ip
 802081a:	437c      	muls	r4, r7
 802081c:	fb06 440c 	mla	r4, r6, ip, r4
 8020820:	fb05 4400 	mla	r4, r5, r0, r4
 8020824:	fb02 4303 	mla	r3, r2, r3, r4
 8020828:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802082c:	b353      	cbz	r3, 8020884 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19c>
 802082e:	4a1e      	ldr	r2, [pc, #120]	; (80208a8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1c0>)
 8020830:	7808      	ldrb	r0, [r1, #0]
 8020832:	6814      	ldr	r4, [r2, #0]
 8020834:	b29a      	uxth	r2, r3
 8020836:	b2e5      	uxtb	r5, r4
 8020838:	43db      	mvns	r3, r3
 802083a:	b2db      	uxtb	r3, r3
 802083c:	fb15 f502 	smulbb	r5, r5, r2
 8020840:	fb00 5003 	mla	r0, r0, r3, r5
 8020844:	b280      	uxth	r0, r0
 8020846:	1c45      	adds	r5, r0, #1
 8020848:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 802084c:	784d      	ldrb	r5, [r1, #1]
 802084e:	1200      	asrs	r0, r0, #8
 8020850:	fb15 f503 	smulbb	r5, r5, r3
 8020854:	7008      	strb	r0, [r1, #0]
 8020856:	f3c4 2007 	ubfx	r0, r4, #8, #8
 802085a:	fb00 5002 	mla	r0, r0, r2, r5
 802085e:	b280      	uxth	r0, r0
 8020860:	1c45      	adds	r5, r0, #1
 8020862:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8020866:	1200      	asrs	r0, r0, #8
 8020868:	7048      	strb	r0, [r1, #1]
 802086a:	7888      	ldrb	r0, [r1, #2]
 802086c:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8020870:	fb10 f303 	smulbb	r3, r0, r3
 8020874:	fb04 3202 	mla	r2, r4, r2, r3
 8020878:	b292      	uxth	r2, r2
 802087a:	1c53      	adds	r3, r2, #1
 802087c:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8020880:	1212      	asrs	r2, r2, #8
 8020882:	708a      	strb	r2, [r1, #2]
 8020884:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020888:	2f0f      	cmp	r7, #15
 802088a:	d8a2      	bhi.n	80207d2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 802088c:	462b      	mov	r3, r5
 802088e:	4628      	mov	r0, r5
 8020890:	e7b3      	b.n	80207fa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x112>
 8020892:	2d00      	cmp	r5, #0
 8020894:	d1a8      	bne.n	80207e8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x100>
 8020896:	462c      	mov	r4, r5
 8020898:	e7f8      	b.n	802088c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>
 802089a:	bf00      	nop
 802089c:	08027814 	.word	0x08027814
 80208a0:	08027d0a 	.word	0x08027d0a
 80208a4:	080278dd 	.word	0x080278dd
 80208a8:	2000d1cc 	.word	0x2000d1cc

080208ac <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80208ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80208b0:	ed2d 8b08 	vpush	{d8-d11}
 80208b4:	b095      	sub	sp, #84	; 0x54
 80208b6:	461c      	mov	r4, r3
 80208b8:	f9bd 30b8 	ldrsh.w	r3, [sp, #184]	; 0xb8
 80208bc:	9307      	str	r3, [sp, #28]
 80208be:	920e      	str	r2, [sp, #56]	; 0x38
 80208c0:	f9bd 30bc 	ldrsh.w	r3, [sp, #188]	; 0xbc
 80208c4:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80208c6:	9109      	str	r1, [sp, #36]	; 0x24
 80208c8:	9308      	str	r3, [sp, #32]
 80208ca:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 80208ce:	9013      	str	r0, [sp, #76]	; 0x4c
 80208d0:	6850      	ldr	r0, [r2, #4]
 80208d2:	fb00 1803 	mla	r8, r0, r3, r1
 80208d6:	6813      	ldr	r3, [r2, #0]
 80208d8:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80208dc:	4498      	add	r8, r3
 80208de:	9b07      	ldr	r3, [sp, #28]
 80208e0:	3301      	adds	r3, #1
 80208e2:	f023 0301 	bic.w	r3, r3, #1
 80208e6:	930b      	str	r3, [sp, #44]	; 0x2c
 80208e8:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80208ea:	e9dd 5627 	ldrd	r5, r6, [sp, #156]	; 0x9c
 80208ee:	681f      	ldr	r7, [r3, #0]
 80208f0:	eeb0 aa40 	vmov.f32	s20, s0
 80208f4:	eef0 9a60 	vmov.f32	s19, s1
 80208f8:	eeb0 9a41 	vmov.f32	s18, s2
 80208fc:	eeb0 8a62 	vmov.f32	s16, s5
 8020900:	eef0 8a43 	vmov.f32	s17, s6
 8020904:	eef0 ba44 	vmov.f32	s23, s8
 8020908:	eeb0 ba64 	vmov.f32	s22, s9
 802090c:	eef0 aa45 	vmov.f32	s21, s10
 8020910:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020912:	2b00      	cmp	r3, #0
 8020914:	dc03      	bgt.n	802091e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 8020916:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020918:	2b00      	cmp	r3, #0
 802091a:	f340 8235 	ble.w	8020d88 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4dc>
 802091e:	2c00      	cmp	r4, #0
 8020920:	f340 8108 	ble.w	8020b34 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x288>
 8020924:	142a      	asrs	r2, r5, #16
 8020926:	ea4f 4326 	mov.w	r3, r6, asr #16
 802092a:	d42b      	bmi.n	8020984 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 802092c:	9807      	ldr	r0, [sp, #28]
 802092e:	1c51      	adds	r1, r2, #1
 8020930:	4288      	cmp	r0, r1
 8020932:	dd2a      	ble.n	802098a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 8020934:	2b00      	cmp	r3, #0
 8020936:	db28      	blt.n	802098a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 8020938:	9808      	ldr	r0, [sp, #32]
 802093a:	1c59      	adds	r1, r3, #1
 802093c:	4288      	cmp	r0, r1
 802093e:	dd24      	ble.n	802098a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 8020940:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8020942:	1e63      	subs	r3, r4, #1
 8020944:	fb02 5203 	mla	r2, r2, r3, r5
 8020948:	1412      	asrs	r2, r2, #16
 802094a:	d429      	bmi.n	80209a0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 802094c:	9907      	ldr	r1, [sp, #28]
 802094e:	3201      	adds	r2, #1
 8020950:	4291      	cmp	r1, r2
 8020952:	dd25      	ble.n	80209a0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8020954:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8020956:	fb02 6303 	mla	r3, r2, r3, r6
 802095a:	141b      	asrs	r3, r3, #16
 802095c:	d420      	bmi.n	80209a0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 802095e:	9a08      	ldr	r2, [sp, #32]
 8020960:	3301      	adds	r3, #1
 8020962:	429a      	cmp	r2, r3
 8020964:	dd1c      	ble.n	80209a0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8020966:	f9bd a02c 	ldrsh.w	sl, [sp, #44]	; 0x2c
 802096a:	f108 0e03 	add.w	lr, r8, #3
 802096e:	46a1      	mov	r9, r4
 8020970:	f1b9 0f00 	cmp.w	r9, #0
 8020974:	f300 8153 	bgt.w	8020c1e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x372>
 8020978:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 802097c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8020980:	44a0      	add	r8, r4
 8020982:	e0d9      	b.n	8020b38 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28c>
 8020984:	1c50      	adds	r0, r2, #1
 8020986:	f040 80cd 	bne.w	8020b24 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 802098a:	9907      	ldr	r1, [sp, #28]
 802098c:	4291      	cmp	r1, r2
 802098e:	f340 80c9 	ble.w	8020b24 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 8020992:	1c59      	adds	r1, r3, #1
 8020994:	f2c0 80c6 	blt.w	8020b24 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 8020998:	9a08      	ldr	r2, [sp, #32]
 802099a:	4293      	cmp	r3, r2
 802099c:	f280 80c2 	bge.w	8020b24 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 80209a0:	f9bd a02c 	ldrsh.w	sl, [sp, #44]	; 0x2c
 80209a4:	46a3      	mov	fp, r4
 80209a6:	46c1      	mov	r9, r8
 80209a8:	f1bb 0f00 	cmp.w	fp, #0
 80209ac:	dde4      	ble.n	8020978 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xcc>
 80209ae:	f3c5 3203 	ubfx	r2, r5, #12, #4
 80209b2:	1428      	asrs	r0, r5, #16
 80209b4:	ea4f 4326 	mov.w	r3, r6, asr #16
 80209b8:	920a      	str	r2, [sp, #40]	; 0x28
 80209ba:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80209be:	f100 8114 	bmi.w	8020bea <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x33e>
 80209c2:	9a07      	ldr	r2, [sp, #28]
 80209c4:	f100 0c01 	add.w	ip, r0, #1
 80209c8:	4562      	cmp	r2, ip
 80209ca:	f340 8110 	ble.w	8020bee <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 80209ce:	2b00      	cmp	r3, #0
 80209d0:	f2c0 810d 	blt.w	8020bee <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 80209d4:	9a08      	ldr	r2, [sp, #32]
 80209d6:	f103 0c01 	add.w	ip, r3, #1
 80209da:	4562      	cmp	r2, ip
 80209dc:	f340 8107 	ble.w	8020bee <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 80209e0:	fb03 030a 	mla	r3, r3, sl, r0
 80209e4:	0858      	lsrs	r0, r3, #1
 80209e6:	07da      	lsls	r2, r3, #31
 80209e8:	5c38      	ldrb	r0, [r7, r0]
 80209ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80209ec:	bf54      	ite	pl
 80209ee:	f000 000f 	andpl.w	r0, r0, #15
 80209f2:	1100      	asrmi	r0, r0, #4
 80209f4:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80209f8:	b2c0      	uxtb	r0, r0
 80209fa:	2a00      	cmp	r2, #0
 80209fc:	f000 80db 	beq.w	8020bb6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30a>
 8020a00:	f103 0e01 	add.w	lr, r3, #1
 8020a04:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8020a08:	f01e 0f01 	tst.w	lr, #1
 8020a0c:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8020a10:	bf0c      	ite	eq
 8020a12:	f00c 0c0f 	andeq.w	ip, ip, #15
 8020a16:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8020a1a:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8020a1e:	fa5f fc8c 	uxtb.w	ip, ip
 8020a22:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 8020a26:	b1f9      	cbz	r1, 8020a68 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1bc>
 8020a28:	4453      	add	r3, sl
 8020a2a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8020a2e:	07da      	lsls	r2, r3, #31
 8020a30:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8020a34:	bf54      	ite	pl
 8020a36:	f00c 0c0f 	andpl.w	ip, ip, #15
 8020a3a:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8020a3e:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8020a42:	3301      	adds	r3, #1
 8020a44:	fa5f fc8c 	uxtb.w	ip, ip
 8020a48:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
 8020a4c:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8020a50:	07da      	lsls	r2, r3, #31
 8020a52:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8020a56:	bf54      	ite	pl
 8020a58:	f00c 030f 	andpl.w	r3, ip, #15
 8020a5c:	ea4f 132c 	movmi.w	r3, ip, asr #4
 8020a60:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8020a64:	b2db      	uxtb	r3, r3
 8020a66:	9310      	str	r3, [sp, #64]	; 0x40
 8020a68:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8020a6c:	b289      	uxth	r1, r1
 8020a6e:	fb02 f301 	mul.w	r3, r2, r1
 8020a72:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8020a76:	0112      	lsls	r2, r2, #4
 8020a78:	fa1f fe81 	uxth.w	lr, r1
 8020a7c:	f5c2 7c80 	rsb	ip, r2, #256	; 0x100
 8020a80:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8020a82:	1ad2      	subs	r2, r2, r3
 8020a84:	ebac 0c0e 	sub.w	ip, ip, lr
 8020a88:	b292      	uxth	r2, r2
 8020a8a:	434a      	muls	r2, r1
 8020a8c:	fa1f fc8c 	uxth.w	ip, ip
 8020a90:	fb00 200c 	mla	r0, r0, ip, r2
 8020a94:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020a96:	fb0e 0002 	mla	r0, lr, r2, r0
 8020a9a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8020a9c:	fb03 0002 	mla	r0, r3, r2, r0
 8020aa0:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8020aa4:	b3a8      	cbz	r0, 8020b12 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x266>
 8020aa6:	4bbb      	ldr	r3, [pc, #748]	; (8020d94 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e8>)
 8020aa8:	681b      	ldr	r3, [r3, #0]
 8020aaa:	28ff      	cmp	r0, #255	; 0xff
 8020aac:	f3c3 4c07 	ubfx	ip, r3, #16, #8
 8020ab0:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8020ab4:	b2db      	uxtb	r3, r3
 8020ab6:	f000 8091 	beq.w	8020bdc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x330>
 8020aba:	b282      	uxth	r2, r0
 8020abc:	f899 e000 	ldrb.w	lr, [r9]
 8020ac0:	43c0      	mvns	r0, r0
 8020ac2:	b2c0      	uxtb	r0, r0
 8020ac4:	fb13 f302 	smulbb	r3, r3, r2
 8020ac8:	fb0e 3300 	mla	r3, lr, r0, r3
 8020acc:	b29b      	uxth	r3, r3
 8020ace:	f103 0e01 	add.w	lr, r3, #1
 8020ad2:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 8020ad6:	121b      	asrs	r3, r3, #8
 8020ad8:	f889 3000 	strb.w	r3, [r9]
 8020adc:	f899 3001 	ldrb.w	r3, [r9, #1]
 8020ae0:	fb11 f102 	smulbb	r1, r1, r2
 8020ae4:	fb03 1100 	mla	r1, r3, r0, r1
 8020ae8:	b289      	uxth	r1, r1
 8020aea:	1c4b      	adds	r3, r1, #1
 8020aec:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8020af0:	f899 3002 	ldrb.w	r3, [r9, #2]
 8020af4:	fb1c f202 	smulbb	r2, ip, r2
 8020af8:	fb03 2000 	mla	r0, r3, r0, r2
 8020afc:	b280      	uxth	r0, r0
 8020afe:	f100 0c01 	add.w	ip, r0, #1
 8020b02:	eb0c 2010 	add.w	r0, ip, r0, lsr #8
 8020b06:	1209      	asrs	r1, r1, #8
 8020b08:	1200      	asrs	r0, r0, #8
 8020b0a:	f889 1001 	strb.w	r1, [r9, #1]
 8020b0e:	f889 0002 	strb.w	r0, [r9, #2]
 8020b12:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8020b14:	441d      	add	r5, r3
 8020b16:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020b18:	f109 0903 	add.w	r9, r9, #3
 8020b1c:	441e      	add	r6, r3
 8020b1e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8020b22:	e741      	b.n	80209a8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8020b24:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8020b26:	441d      	add	r5, r3
 8020b28:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020b2a:	3c01      	subs	r4, #1
 8020b2c:	441e      	add	r6, r3
 8020b2e:	f108 0803 	add.w	r8, r8, #3
 8020b32:	e6f4      	b.n	802091e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 8020b34:	f47f af04 	bne.w	8020940 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 8020b38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020b3a:	2b00      	cmp	r3, #0
 8020b3c:	f340 8124 	ble.w	8020d88 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4dc>
 8020b40:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8020b44:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8020b48:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8020b4c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8020b4e:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8020b52:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8020b56:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8020b5a:	eef0 6a48 	vmov.f32	s13, s16
 8020b5e:	ee69 7a27 	vmul.f32	s15, s18, s15
 8020b62:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020b66:	ee37 8a48 	vsub.f32	s16, s14, s16
 8020b6a:	ee16 5a90 	vmov	r5, s13
 8020b6e:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8020b72:	eef0 6a68 	vmov.f32	s13, s17
 8020b76:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8020b7a:	ee18 2a10 	vmov	r2, s16
 8020b7e:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8020b82:	fb92 f3f3 	sdiv	r3, r2, r3
 8020b86:	ee18 2a90 	vmov	r2, s17
 8020b8a:	9329      	str	r3, [sp, #164]	; 0xa4
 8020b8c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8020b8e:	fb92 f3f3 	sdiv	r3, r2, r3
 8020b92:	932a      	str	r3, [sp, #168]	; 0xa8
 8020b94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020b96:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8020b98:	3b01      	subs	r3, #1
 8020b9a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020b9e:	9309      	str	r3, [sp, #36]	; 0x24
 8020ba0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8020ba2:	ee16 6a90 	vmov	r6, s13
 8020ba6:	bf14      	ite	ne
 8020ba8:	461c      	movne	r4, r3
 8020baa:	4614      	moveq	r4, r2
 8020bac:	eef0 8a67 	vmov.f32	s17, s15
 8020bb0:	eeb0 8a47 	vmov.f32	s16, s14
 8020bb4:	e6ac      	b.n	8020910 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 8020bb6:	2900      	cmp	r1, #0
 8020bb8:	f43f af56 	beq.w	8020a68 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1bc>
 8020bbc:	4453      	add	r3, sl
 8020bbe:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8020bc2:	07db      	lsls	r3, r3, #31
 8020bc4:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8020bc8:	bf54      	ite	pl
 8020bca:	f00c 030f 	andpl.w	r3, ip, #15
 8020bce:	ea4f 132c 	movmi.w	r3, ip, asr #4
 8020bd2:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8020bd6:	b2db      	uxtb	r3, r3
 8020bd8:	930c      	str	r3, [sp, #48]	; 0x30
 8020bda:	e745      	b.n	8020a68 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1bc>
 8020bdc:	f889 3000 	strb.w	r3, [r9]
 8020be0:	f889 1001 	strb.w	r1, [r9, #1]
 8020be4:	f889 c002 	strb.w	ip, [r9, #2]
 8020be8:	e793      	b.n	8020b12 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x266>
 8020bea:	1c42      	adds	r2, r0, #1
 8020bec:	d191      	bne.n	8020b12 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x266>
 8020bee:	9a07      	ldr	r2, [sp, #28]
 8020bf0:	4282      	cmp	r2, r0
 8020bf2:	dd8e      	ble.n	8020b12 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x266>
 8020bf4:	1c5a      	adds	r2, r3, #1
 8020bf6:	db8c      	blt.n	8020b12 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x266>
 8020bf8:	9a08      	ldr	r2, [sp, #32]
 8020bfa:	429a      	cmp	r2, r3
 8020bfc:	dd89      	ble.n	8020b12 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x266>
 8020bfe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8020c00:	9105      	str	r1, [sp, #20]
 8020c02:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8020c06:	9b08      	ldr	r3, [sp, #32]
 8020c08:	9301      	str	r3, [sp, #4]
 8020c0a:	9b07      	ldr	r3, [sp, #28]
 8020c0c:	9002      	str	r0, [sp, #8]
 8020c0e:	9300      	str	r3, [sp, #0]
 8020c10:	463a      	mov	r2, r7
 8020c12:	4653      	mov	r3, sl
 8020c14:	4649      	mov	r1, r9
 8020c16:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8020c18:	f7ff fd66 	bl	80206e8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 8020c1c:	e779      	b.n	8020b12 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x266>
 8020c1e:	142a      	asrs	r2, r5, #16
 8020c20:	1433      	asrs	r3, r6, #16
 8020c22:	fb0a 2303 	mla	r3, sl, r3, r2
 8020c26:	085a      	lsrs	r2, r3, #1
 8020c28:	07d9      	lsls	r1, r3, #31
 8020c2a:	5cba      	ldrb	r2, [r7, r2]
 8020c2c:	bf54      	ite	pl
 8020c2e:	f002 020f 	andpl.w	r2, r2, #15
 8020c32:	1112      	asrmi	r2, r2, #4
 8020c34:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8020c38:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8020c3c:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8020c40:	b2d2      	uxtb	r2, r2
 8020c42:	2800      	cmp	r0, #0
 8020c44:	f000 8089 	beq.w	8020d5a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ae>
 8020c48:	f103 0b01 	add.w	fp, r3, #1
 8020c4c:	ea4f 015b 	mov.w	r1, fp, lsr #1
 8020c50:	f01b 0f01 	tst.w	fp, #1
 8020c54:	5c79      	ldrb	r1, [r7, r1]
 8020c56:	bf0c      	ite	eq
 8020c58:	f001 010f 	andeq.w	r1, r1, #15
 8020c5c:	1109      	asrne	r1, r1, #4
 8020c5e:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8020c62:	b2c9      	uxtb	r1, r1
 8020c64:	9111      	str	r1, [sp, #68]	; 0x44
 8020c66:	f1bc 0f00 	cmp.w	ip, #0
 8020c6a:	d018      	beq.n	8020c9e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f2>
 8020c6c:	4453      	add	r3, sl
 8020c6e:	0859      	lsrs	r1, r3, #1
 8020c70:	f013 0f01 	tst.w	r3, #1
 8020c74:	5c79      	ldrb	r1, [r7, r1]
 8020c76:	bf0c      	ite	eq
 8020c78:	f001 010f 	andeq.w	r1, r1, #15
 8020c7c:	1109      	asrne	r1, r1, #4
 8020c7e:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8020c82:	b2c9      	uxtb	r1, r1
 8020c84:	3301      	adds	r3, #1
 8020c86:	910d      	str	r1, [sp, #52]	; 0x34
 8020c88:	0859      	lsrs	r1, r3, #1
 8020c8a:	07db      	lsls	r3, r3, #31
 8020c8c:	5c79      	ldrb	r1, [r7, r1]
 8020c8e:	bf54      	ite	pl
 8020c90:	f001 010f 	andpl.w	r1, r1, #15
 8020c94:	1109      	asrmi	r1, r1, #4
 8020c96:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8020c9a:	b2c9      	uxtb	r1, r1
 8020c9c:	9112      	str	r1, [sp, #72]	; 0x48
 8020c9e:	b280      	uxth	r0, r0
 8020ca0:	fa1f fc8c 	uxth.w	ip, ip
 8020ca4:	fb00 f30c 	mul.w	r3, r0, ip
 8020ca8:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 8020cac:	0100      	lsls	r0, r0, #4
 8020cae:	fa1f fc8c 	uxth.w	ip, ip
 8020cb2:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 8020cb6:	eba1 010c 	sub.w	r1, r1, ip
 8020cba:	fa1f fb81 	uxth.w	fp, r1
 8020cbe:	1ac0      	subs	r0, r0, r3
 8020cc0:	9911      	ldr	r1, [sp, #68]	; 0x44
 8020cc2:	b280      	uxth	r0, r0
 8020cc4:	4348      	muls	r0, r1
 8020cc6:	990d      	ldr	r1, [sp, #52]	; 0x34
 8020cc8:	fb02 020b 	mla	r2, r2, fp, r0
 8020ccc:	fb0c 2c01 	mla	ip, ip, r1, r2
 8020cd0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8020cd2:	fb03 c302 	mla	r3, r3, r2, ip
 8020cd6:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8020cda:	b3ab      	cbz	r3, 8020d48 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x49c>
 8020cdc:	4a2d      	ldr	r2, [pc, #180]	; (8020d94 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e8>)
 8020cde:	6811      	ldr	r1, [r2, #0]
 8020ce0:	2bff      	cmp	r3, #255	; 0xff
 8020ce2:	f3c1 4b07 	ubfx	fp, r1, #16, #8
 8020ce6:	f3c1 2c07 	ubfx	ip, r1, #8, #8
 8020cea:	b2c9      	uxtb	r1, r1
 8020cec:	d045      	beq.n	8020d7a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ce>
 8020cee:	b298      	uxth	r0, r3
 8020cf0:	f81e 2c03 	ldrb.w	r2, [lr, #-3]
 8020cf4:	43db      	mvns	r3, r3
 8020cf6:	b2db      	uxtb	r3, r3
 8020cf8:	fb11 f100 	smulbb	r1, r1, r0
 8020cfc:	fb02 1103 	mla	r1, r2, r3, r1
 8020d00:	b289      	uxth	r1, r1
 8020d02:	1c4a      	adds	r2, r1, #1
 8020d04:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8020d08:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8020d0c:	fb1c fc00 	smulbb	ip, ip, r0
 8020d10:	fb02 cc03 	mla	ip, r2, r3, ip
 8020d14:	fa1f fc8c 	uxth.w	ip, ip
 8020d18:	f10c 0201 	add.w	r2, ip, #1
 8020d1c:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8020d20:	f81e 2c01 	ldrb.w	r2, [lr, #-1]
 8020d24:	fb1b f000 	smulbb	r0, fp, r0
 8020d28:	fb02 0303 	mla	r3, r2, r3, r0
 8020d2c:	b29b      	uxth	r3, r3
 8020d2e:	1c5a      	adds	r2, r3, #1
 8020d30:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8020d34:	1209      	asrs	r1, r1, #8
 8020d36:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8020d3a:	121b      	asrs	r3, r3, #8
 8020d3c:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8020d40:	f80e cc02 	strb.w	ip, [lr, #-2]
 8020d44:	f80e 3c01 	strb.w	r3, [lr, #-1]
 8020d48:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8020d4a:	441d      	add	r5, r3
 8020d4c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020d4e:	f10e 0e03 	add.w	lr, lr, #3
 8020d52:	441e      	add	r6, r3
 8020d54:	f109 39ff 	add.w	r9, r9, #4294967295
 8020d58:	e60a      	b.n	8020970 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc4>
 8020d5a:	f1bc 0f00 	cmp.w	ip, #0
 8020d5e:	d09e      	beq.n	8020c9e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f2>
 8020d60:	4453      	add	r3, sl
 8020d62:	0859      	lsrs	r1, r3, #1
 8020d64:	07db      	lsls	r3, r3, #31
 8020d66:	5c79      	ldrb	r1, [r7, r1]
 8020d68:	bf54      	ite	pl
 8020d6a:	f001 010f 	andpl.w	r1, r1, #15
 8020d6e:	1109      	asrmi	r1, r1, #4
 8020d70:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8020d74:	b2c9      	uxtb	r1, r1
 8020d76:	910d      	str	r1, [sp, #52]	; 0x34
 8020d78:	e791      	b.n	8020c9e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f2>
 8020d7a:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8020d7e:	f80e cc02 	strb.w	ip, [lr, #-2]
 8020d82:	f80e bc01 	strb.w	fp, [lr, #-1]
 8020d86:	e7df      	b.n	8020d48 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x49c>
 8020d88:	b015      	add	sp, #84	; 0x54
 8020d8a:	ecbd 8b08 	vpop	{d8-d11}
 8020d8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020d92:	bf00      	nop
 8020d94:	2000d1cc 	.word	0x2000d1cc

08020d98 <CRC_Lock>:
 8020d98:	b530      	push	{r4, r5, lr}
 8020d9a:	4a1d      	ldr	r2, [pc, #116]	; (8020e10 <CRC_Lock+0x78>)
 8020d9c:	6813      	ldr	r3, [r2, #0]
 8020d9e:	f023 0301 	bic.w	r3, r3, #1
 8020da2:	6013      	str	r3, [r2, #0]
 8020da4:	4b1b      	ldr	r3, [pc, #108]	; (8020e14 <CRC_Lock+0x7c>)
 8020da6:	681a      	ldr	r2, [r3, #0]
 8020da8:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 8020dac:	4022      	ands	r2, r4
 8020dae:	f24c 2540 	movw	r5, #49728	; 0xc240
 8020db2:	42aa      	cmp	r2, r5
 8020db4:	d005      	beq.n	8020dc2 <CRC_Lock+0x2a>
 8020db6:	681b      	ldr	r3, [r3, #0]
 8020db8:	f24c 2270 	movw	r2, #49776	; 0xc270
 8020dbc:	4023      	ands	r3, r4
 8020dbe:	4293      	cmp	r3, r2
 8020dc0:	d11d      	bne.n	8020dfe <CRC_Lock+0x66>
 8020dc2:	4b15      	ldr	r3, [pc, #84]	; (8020e18 <CRC_Lock+0x80>)
 8020dc4:	681b      	ldr	r3, [r3, #0]
 8020dc6:	b9d3      	cbnz	r3, 8020dfe <CRC_Lock+0x66>
 8020dc8:	4a14      	ldr	r2, [pc, #80]	; (8020e1c <CRC_Lock+0x84>)
 8020dca:	6813      	ldr	r3, [r2, #0]
 8020dcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8020dd0:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8020dd4:	d006      	beq.n	8020de4 <CRC_Lock+0x4c>
 8020dd6:	6813      	ldr	r3, [r2, #0]
 8020dd8:	f240 4283 	movw	r2, #1155	; 0x483
 8020ddc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8020de0:	4293      	cmp	r3, r2
 8020de2:	d10c      	bne.n	8020dfe <CRC_Lock+0x66>
 8020de4:	4b0e      	ldr	r3, [pc, #56]	; (8020e20 <CRC_Lock+0x88>)
 8020de6:	2201      	movs	r2, #1
 8020de8:	601a      	str	r2, [r3, #0]
 8020dea:	681a      	ldr	r2, [r3, #0]
 8020dec:	2a00      	cmp	r2, #0
 8020dee:	d1fc      	bne.n	8020dea <CRC_Lock+0x52>
 8020df0:	4b0c      	ldr	r3, [pc, #48]	; (8020e24 <CRC_Lock+0x8c>)
 8020df2:	6018      	str	r0, [r3, #0]
 8020df4:	6818      	ldr	r0, [r3, #0]
 8020df6:	1a43      	subs	r3, r0, r1
 8020df8:	4258      	negs	r0, r3
 8020dfa:	4158      	adcs	r0, r3
 8020dfc:	bd30      	pop	{r4, r5, pc}
 8020dfe:	4b0a      	ldr	r3, [pc, #40]	; (8020e28 <CRC_Lock+0x90>)
 8020e00:	2201      	movs	r2, #1
 8020e02:	601a      	str	r2, [r3, #0]
 8020e04:	681a      	ldr	r2, [r3, #0]
 8020e06:	2a00      	cmp	r2, #0
 8020e08:	d1fc      	bne.n	8020e04 <CRC_Lock+0x6c>
 8020e0a:	4b08      	ldr	r3, [pc, #32]	; (8020e2c <CRC_Lock+0x94>)
 8020e0c:	e7f1      	b.n	8020df2 <CRC_Lock+0x5a>
 8020e0e:	bf00      	nop
 8020e10:	e0002000 	.word	0xe0002000
 8020e14:	e000ed00 	.word	0xe000ed00
 8020e18:	e0042000 	.word	0xe0042000
 8020e1c:	5c001000 	.word	0x5c001000
 8020e20:	58024c08 	.word	0x58024c08
 8020e24:	58024c00 	.word	0x58024c00
 8020e28:	40023008 	.word	0x40023008
 8020e2c:	40023000 	.word	0x40023000

08020e30 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8020e30:	6101      	str	r1, [r0, #16]
 8020e32:	4770      	bx	lr

08020e34 <_ZN8touchgfx8Gestures4tickEv>:
 8020e34:	7b83      	ldrb	r3, [r0, #14]
 8020e36:	b14b      	cbz	r3, 8020e4c <_ZN8touchgfx8Gestures4tickEv+0x18>
 8020e38:	8903      	ldrh	r3, [r0, #8]
 8020e3a:	3301      	adds	r3, #1
 8020e3c:	b29b      	uxth	r3, r3
 8020e3e:	2b07      	cmp	r3, #7
 8020e40:	8103      	strh	r3, [r0, #8]
 8020e42:	bf81      	itttt	hi
 8020e44:	2300      	movhi	r3, #0
 8020e46:	8143      	strhhi	r3, [r0, #10]
 8020e48:	8183      	strhhi	r3, [r0, #12]
 8020e4a:	7383      	strbhi	r3, [r0, #14]
 8020e4c:	4770      	bx	lr
	...

08020e50 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8020e50:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8020e54:	4604      	mov	r4, r0
 8020e56:	8880      	ldrh	r0, [r0, #4]
 8020e58:	f8ad 0006 	strh.w	r0, [sp, #6]
 8020e5c:	4698      	mov	r8, r3
 8020e5e:	eba8 0000 	sub.w	r0, r8, r0
 8020e62:	4b1c      	ldr	r3, [pc, #112]	; (8020ed4 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x84>)
 8020e64:	9300      	str	r3, [sp, #0]
 8020e66:	b280      	uxth	r0, r0
 8020e68:	2300      	movs	r3, #0
 8020e6a:	f88d 3004 	strb.w	r3, [sp, #4]
 8020e6e:	b203      	sxth	r3, r0
 8020e70:	2b00      	cmp	r3, #0
 8020e72:	bfb8      	it	lt
 8020e74:	4240      	neglt	r0, r0
 8020e76:	4617      	mov	r7, r2
 8020e78:	8aa2      	ldrh	r2, [r4, #20]
 8020e7a:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 8020e7e:	f8ad 800a 	strh.w	r8, [sp, #10]
 8020e82:	bfb8      	it	lt
 8020e84:	b203      	sxthlt	r3, r0
 8020e86:	460e      	mov	r6, r1
 8020e88:	4293      	cmp	r3, r2
 8020e8a:	88e1      	ldrh	r1, [r4, #6]
 8020e8c:	f8ad 1008 	strh.w	r1, [sp, #8]
 8020e90:	f8ad 500c 	strh.w	r5, [sp, #12]
 8020e94:	dc08      	bgt.n	8020ea8 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x58>
 8020e96:	1a69      	subs	r1, r5, r1
 8020e98:	b289      	uxth	r1, r1
 8020e9a:	b20b      	sxth	r3, r1
 8020e9c:	2b00      	cmp	r3, #0
 8020e9e:	bfbc      	itt	lt
 8020ea0:	4249      	neglt	r1, r1
 8020ea2:	b20b      	sxthlt	r3, r1
 8020ea4:	429a      	cmp	r2, r3
 8020ea6:	da13      	bge.n	8020ed0 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x80>
 8020ea8:	6920      	ldr	r0, [r4, #16]
 8020eaa:	6803      	ldr	r3, [r0, #0]
 8020eac:	4669      	mov	r1, sp
 8020eae:	685b      	ldr	r3, [r3, #4]
 8020eb0:	4798      	blx	r3
 8020eb2:	eba8 0606 	sub.w	r6, r8, r6
 8020eb6:	2300      	movs	r3, #0
 8020eb8:	1bef      	subs	r7, r5, r7
 8020eba:	2001      	movs	r0, #1
 8020ebc:	8123      	strh	r3, [r4, #8]
 8020ebe:	8166      	strh	r6, [r4, #10]
 8020ec0:	81a7      	strh	r7, [r4, #12]
 8020ec2:	f8a4 8004 	strh.w	r8, [r4, #4]
 8020ec6:	80e5      	strh	r5, [r4, #6]
 8020ec8:	73a0      	strb	r0, [r4, #14]
 8020eca:	b004      	add	sp, #16
 8020ecc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020ed0:	2000      	movs	r0, #0
 8020ed2:	e7fa      	b.n	8020eca <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7a>
 8020ed4:	08026a40 	.word	0x08026a40

08020ed8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8020ed8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020eda:	461e      	mov	r6, r3
 8020edc:	1e4b      	subs	r3, r1, #1
 8020ede:	2b01      	cmp	r3, #1
 8020ee0:	b085      	sub	sp, #20
 8020ee2:	4604      	mov	r4, r0
 8020ee4:	460d      	mov	r5, r1
 8020ee6:	4617      	mov	r7, r2
 8020ee8:	d84b      	bhi.n	8020f82 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 8020eea:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8020eee:	1cd3      	adds	r3, r2, #3
 8020ef0:	b29b      	uxth	r3, r3
 8020ef2:	2b06      	cmp	r3, #6
 8020ef4:	d916      	bls.n	8020f24 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 8020ef6:	f8df c098 	ldr.w	ip, [pc, #152]	; 8020f90 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb8>
 8020efa:	f8cd c004 	str.w	ip, [sp, #4]
 8020efe:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8020f02:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8020f06:	6900      	ldr	r0, [r0, #16]
 8020f08:	f8ad 100c 	strh.w	r1, [sp, #12]
 8020f0c:	f04f 0c00 	mov.w	ip, #0
 8020f10:	f88d c008 	strb.w	ip, [sp, #8]
 8020f14:	f8ad 200a 	strh.w	r2, [sp, #10]
 8020f18:	f8ad 300e 	strh.w	r3, [sp, #14]
 8020f1c:	6803      	ldr	r3, [r0, #0]
 8020f1e:	a901      	add	r1, sp, #4
 8020f20:	689b      	ldr	r3, [r3, #8]
 8020f22:	4798      	blx	r3
 8020f24:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8020f28:	1cd3      	adds	r3, r2, #3
 8020f2a:	b29b      	uxth	r3, r3
 8020f2c:	2b06      	cmp	r3, #6
 8020f2e:	d916      	bls.n	8020f5e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8020f30:	f8df c05c 	ldr.w	ip, [pc, #92]	; 8020f90 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb8>
 8020f34:	f8cd c004 	str.w	ip, [sp, #4]
 8020f38:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8020f3c:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8020f40:	6920      	ldr	r0, [r4, #16]
 8020f42:	f8ad 100c 	strh.w	r1, [sp, #12]
 8020f46:	f04f 0c01 	mov.w	ip, #1
 8020f4a:	f88d c008 	strb.w	ip, [sp, #8]
 8020f4e:	f8ad 200a 	strh.w	r2, [sp, #10]
 8020f52:	f8ad 300e 	strh.w	r3, [sp, #14]
 8020f56:	6803      	ldr	r3, [r0, #0]
 8020f58:	a901      	add	r1, sp, #4
 8020f5a:	689b      	ldr	r3, [r3, #8]
 8020f5c:	4798      	blx	r3
 8020f5e:	4b0b      	ldr	r3, [pc, #44]	; (8020f8c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb4>)
 8020f60:	9301      	str	r3, [sp, #4]
 8020f62:	6920      	ldr	r0, [r4, #16]
 8020f64:	f88d 5008 	strb.w	r5, [sp, #8]
 8020f68:	2300      	movs	r3, #0
 8020f6a:	f8ad 700a 	strh.w	r7, [sp, #10]
 8020f6e:	f8ad 600c 	strh.w	r6, [sp, #12]
 8020f72:	f8ad 300e 	strh.w	r3, [sp, #14]
 8020f76:	6803      	ldr	r3, [r0, #0]
 8020f78:	a901      	add	r1, sp, #4
 8020f7a:	681b      	ldr	r3, [r3, #0]
 8020f7c:	4798      	blx	r3
 8020f7e:	b005      	add	sp, #20
 8020f80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020f82:	2900      	cmp	r1, #0
 8020f84:	d1eb      	bne.n	8020f5e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8020f86:	80a2      	strh	r2, [r4, #4]
 8020f88:	80c6      	strh	r6, [r0, #6]
 8020f8a:	e7e8      	b.n	8020f5e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8020f8c:	08026a2c 	.word	0x08026a2c
 8020f90:	08026a54 	.word	0x08026a54

08020f94 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16>:
 8020f94:	10c9      	asrs	r1, r1, #3
 8020f96:	2900      	cmp	r1, #0
 8020f98:	bfb8      	it	lt
 8020f9a:	4249      	neglt	r1, r1
 8020f9c:	2801      	cmp	r0, #1
 8020f9e:	d108      	bne.n	8020fb2 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16+0x1e>
 8020fa0:	f3c1 0008 	ubfx	r0, r1, #0, #9
 8020fa4:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8020fa8:	4601      	mov	r1, r0
 8020faa:	dd02      	ble.n	8020fb2 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16+0x1e>
 8020fac:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
 8020fb0:	4770      	bx	lr
 8020fb2:	29ff      	cmp	r1, #255	; 0xff
 8020fb4:	bfa8      	it	ge
 8020fb6:	21ff      	movge	r1, #255	; 0xff
 8020fb8:	4608      	mov	r0, r1
 8020fba:	4770      	bx	lr

08020fbc <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>:
 8020fbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020fc0:	688c      	ldr	r4, [r1, #8]
 8020fc2:	2c00      	cmp	r4, #0
 8020fc4:	b087      	sub	sp, #28
 8020fc6:	4607      	mov	r7, r0
 8020fc8:	db2b      	blt.n	8021022 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x66>
 8020fca:	6803      	ldr	r3, [r0, #0]
 8020fcc:	68da      	ldr	r2, [r3, #12]
 8020fce:	42a2      	cmp	r2, r4
 8020fd0:	dd27      	ble.n	8021022 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x66>
 8020fd2:	681a      	ldr	r2, [r3, #0]
 8020fd4:	691e      	ldr	r6, [r3, #16]
 8020fd6:	68cd      	ldr	r5, [r1, #12]
 8020fd8:	f8d1 901c 	ldr.w	r9, [r1, #28]
 8020fdc:	f893 a004 	ldrb.w	sl, [r3, #4]
 8020fe0:	f8d1 8020 	ldr.w	r8, [r1, #32]
 8020fe4:	fb06 2604 	mla	r6, r6, r4, r2
 8020fe8:	698a      	ldr	r2, [r1, #24]
 8020fea:	9205      	str	r2, [sp, #20]
 8020fec:	f839 2f02 	ldrh.w	r2, [r9, #2]!
 8020ff0:	9b05      	ldr	r3, [sp, #20]
 8020ff2:	6839      	ldr	r1, [r7, #0]
 8020ff4:	eb03 0c02 	add.w	ip, r3, r2
 8020ff8:	f838 3f02 	ldrh.w	r3, [r8, #2]!
 8020ffc:	6889      	ldr	r1, [r1, #8]
 8020ffe:	1898      	adds	r0, r3, r2
 8021000:	4288      	cmp	r0, r1
 8021002:	db02      	blt.n	802100a <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x4e>
 8021004:	1a8b      	subs	r3, r1, r2
 8021006:	2b00      	cmp	r3, #0
 8021008:	dd09      	ble.n	802101e <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x62>
 802100a:	6878      	ldr	r0, [r7, #4]
 802100c:	6801      	ldr	r1, [r0, #0]
 802100e:	9400      	str	r4, [sp, #0]
 8021010:	e9cd 3c01 	strd	r3, ip, [sp, #4]
 8021014:	4653      	mov	r3, sl
 8021016:	f8d1 b008 	ldr.w	fp, [r1, #8]
 802101a:	4631      	mov	r1, r6
 802101c:	47d8      	blx	fp
 802101e:	3d01      	subs	r5, #1
 8021020:	d1e4      	bne.n	8020fec <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x30>
 8021022:	b007      	add	sp, #28
 8021024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021028 <_ZN8touchgfx10Rasterizer6lineToEii>:
 8021028:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 802102c:	b90b      	cbnz	r3, 8021032 <_ZN8touchgfx10Rasterizer6lineToEii+0xa>
 802102e:	f001 b984 	b.w	802233a <_ZN8touchgfx7Outline6lineToEii>
 8021032:	4770      	bx	lr

08021034 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>:
 8021034:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021038:	4b8f      	ldr	r3, [pc, #572]	; (8021278 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x244>)
 802103a:	4604      	mov	r4, r0
 802103c:	2600      	movs	r6, #0
 802103e:	f100 0518 	add.w	r5, r0, #24
 8021042:	e9c0 3100 	strd	r3, r1, [r0]
 8021046:	b086      	sub	sp, #24
 8021048:	e9c0 6602 	strd	r6, r6, [r0, #8]
 802104c:	e9c0 6604 	strd	r6, r6, [r0, #16]
 8021050:	f104 072c 	add.w	r7, r4, #44	; 0x2c
 8021054:	4628      	mov	r0, r5
 8021056:	4690      	mov	r8, r2
 8021058:	f001 fb87 	bl	802276a <_ZN8touchgfx15RenderingBufferC1Ev>
 802105c:	4638      	mov	r0, r7
 802105e:	f000 fb45 	bl	80216ec <_ZN8touchgfx7OutlineC1Ev>
 8021062:	f104 0074 	add.w	r0, r4, #116	; 0x74
 8021066:	f001 fb35 	bl	80226d4 <_ZN8touchgfx8ScanlineC1Ev>
 802106a:	2301      	movs	r3, #1
 802106c:	f884 6098 	strb.w	r6, [r4, #152]	; 0x98
 8021070:	f884 60a0 	strb.w	r6, [r4, #160]	; 0xa0
 8021074:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 8021078:	f884 60a2 	strb.w	r6, [r4, #162]	; 0xa2
 802107c:	e9c4 6629 	strd	r6, r6, [r4, #164]	; 0xa4
 8021080:	f8a4 60ac 	strh.w	r6, [r4, #172]	; 0xac
 8021084:	e9c4 662c 	strd	r6, r6, [r4, #176]	; 0xb0
 8021088:	f7f4 fcaa 	bl	80159e0 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv>
 802108c:	b928      	cbnz	r0, 802109a <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x66>
 802108e:	4b7b      	ldr	r3, [pc, #492]	; (802127c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x248>)
 8021090:	4a7b      	ldr	r2, [pc, #492]	; (8021280 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x24c>)
 8021092:	2118      	movs	r1, #24
 8021094:	487b      	ldr	r0, [pc, #492]	; (8021284 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x250>)
 8021096:	f001 fbab 	bl	80227f0 <__assert_func>
 802109a:	f9b8 2000 	ldrsh.w	r2, [r8]
 802109e:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 80210a2:	f8d4 c004 	ldr.w	ip, [r4, #4]
 80210a6:	9602      	str	r6, [sp, #8]
 80210a8:	4410      	add	r0, r2
 80210aa:	b280      	uxth	r0, r0
 80210ac:	fa0f fa80 	sxth.w	sl, r0
 80210b0:	f1ba 0f00 	cmp.w	sl, #0
 80210b4:	f9bc 9008 	ldrsh.w	r9, [ip, #8]
 80210b8:	f9bc e00a 	ldrsh.w	lr, [ip, #10]
 80210bc:	dd70      	ble.n	80211a0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 80210be:	4591      	cmp	r9, r2
 80210c0:	dd6e      	ble.n	80211a0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 80210c2:	f9b8 1002 	ldrsh.w	r1, [r8, #2]
 80210c6:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 80210ca:	440b      	add	r3, r1
 80210cc:	b29b      	uxth	r3, r3
 80210ce:	b21e      	sxth	r6, r3
 80210d0:	2e00      	cmp	r6, #0
 80210d2:	dd65      	ble.n	80211a0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 80210d4:	458e      	cmp	lr, r1
 80210d6:	dd63      	ble.n	80211a0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 80210d8:	45d1      	cmp	r9, sl
 80210da:	bfb8      	it	lt
 80210dc:	fa1f f089 	uxthlt.w	r0, r9
 80210e0:	45b6      	cmp	lr, r6
 80210e2:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 80210e6:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 80210ea:	bfb8      	it	lt
 80210ec:	fa1f f38e 	uxthlt.w	r3, lr
 80210f0:	1a80      	subs	r0, r0, r2
 80210f2:	1a5b      	subs	r3, r3, r1
 80210f4:	f8ad 000c 	strh.w	r0, [sp, #12]
 80210f8:	f8ad 300e 	strh.w	r3, [sp, #14]
 80210fc:	f8ad 2008 	strh.w	r2, [sp, #8]
 8021100:	f8ad 100a 	strh.w	r1, [sp, #10]
 8021104:	f10d 0808 	add.w	r8, sp, #8
 8021108:	e898 0003 	ldmia.w	r8, {r0, r1}
 802110c:	ae04      	add	r6, sp, #16
 802110e:	e886 0003 	stmia.w	r6, {r0, r1}
 8021112:	f8dc 3000 	ldr.w	r3, [ip]
 8021116:	4660      	mov	r0, ip
 8021118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802111a:	4631      	mov	r1, r6
 802111c:	4798      	blx	r3
 802111e:	6861      	ldr	r1, [r4, #4]
 8021120:	4640      	mov	r0, r8
 8021122:	3104      	adds	r1, #4
 8021124:	f7f5 face 	bl	80166c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021128:	4630      	mov	r0, r6
 802112a:	f7f5 fae3 	bl	80166f4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802112e:	f9bd 000c 	ldrsh.w	r0, [sp, #12]
 8021132:	f7f4 fbe5 	bl	8015900 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj>
 8021136:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
 802113a:	4638      	mov	r0, r7
 802113c:	f000 fab2 	bl	80216a4 <_ZN8touchgfx7Outline5resetEv>
 8021140:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8021144:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
 8021148:	015b      	lsls	r3, r3, #5
 802114a:	60e3      	str	r3, [r4, #12]
 802114c:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8021150:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8021154:	f8a4 209c 	strh.w	r2, [r4, #156]	; 0x9c
 8021158:	015b      	lsls	r3, r3, #5
 802115a:	6123      	str	r3, [r4, #16]
 802115c:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8021160:	015b      	lsls	r3, r3, #5
 8021162:	6163      	str	r3, [r4, #20]
 8021164:	4b48      	ldr	r3, [pc, #288]	; (8021288 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x254>)
 8021166:	0152      	lsls	r2, r2, #5
 8021168:	6818      	ldr	r0, [r3, #0]
 802116a:	60a2      	str	r2, [r4, #8]
 802116c:	6803      	ldr	r3, [r0, #0]
 802116e:	6a1b      	ldr	r3, [r3, #32]
 8021170:	4798      	blx	r3
 8021172:	4606      	mov	r6, r0
 8021174:	f7e0 fcbe 	bl	8001af4 <_ZN8touchgfx3HAL3lcdEv>
 8021178:	6803      	ldr	r3, [r0, #0]
 802117a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802117c:	4798      	blx	r3
 802117e:	4607      	mov	r7, r0
 8021180:	f7e0 fcb8 	bl	8001af4 <_ZN8touchgfx3HAL3lcdEv>
 8021184:	6803      	ldr	r3, [r0, #0]
 8021186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021188:	4798      	blx	r3
 802118a:	280c      	cmp	r0, #12
 802118c:	d855      	bhi.n	802123a <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x206>
 802118e:	e8df f000 	tbb	[pc, r0]
 8021192:	564c      	.short	0x564c
 8021194:	2b6f0a67 	.word	0x2b6f0a67
 8021198:	6060603b 	.word	0x6060603b
 802119c:	6060      	.short	0x6060
 802119e:	6f          	.byte	0x6f
 802119f:	00          	.byte	0x00
 80211a0:	2300      	movs	r3, #0
 80211a2:	9303      	str	r3, [sp, #12]
 80211a4:	e7ae      	b.n	8021104 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0xd0>
 80211a6:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80211aa:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80211ae:	2108      	movs	r1, #8
 80211b0:	fb92 f1f1 	sdiv	r1, r2, r1
 80211b4:	fb07 1303 	mla	r3, r7, r3, r1
 80211b8:	441e      	add	r6, r3
 80211ba:	4253      	negs	r3, r2
 80211bc:	f003 0307 	and.w	r3, r3, #7
 80211c0:	f002 0207 	and.w	r2, r2, #7
 80211c4:	bf58      	it	pl
 80211c6:	425a      	negpl	r2, r3
 80211c8:	b2d2      	uxtb	r2, r2
 80211ca:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 80211ce:	66e1      	str	r1, [r4, #108]	; 0x6c
 80211d0:	e9cd 1700 	strd	r1, r7, [sp]
 80211d4:	4628      	mov	r0, r5
 80211d6:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 80211da:	4631      	mov	r1, r6
 80211dc:	f001 facd 	bl	802277a <_ZN8touchgfx15RenderingBuffer6attachEPhhjji>
 80211e0:	4620      	mov	r0, r4
 80211e2:	b006      	add	sp, #24
 80211e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80211e8:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80211ec:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80211f0:	2104      	movs	r1, #4
 80211f2:	fb92 f1f1 	sdiv	r1, r2, r1
 80211f6:	fb07 1303 	mla	r3, r7, r3, r1
 80211fa:	441e      	add	r6, r3
 80211fc:	4253      	negs	r3, r2
 80211fe:	f003 0303 	and.w	r3, r3, #3
 8021202:	f002 0203 	and.w	r2, r2, #3
 8021206:	e7dd      	b.n	80211c4 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x190>
 8021208:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 802120c:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8021210:	2a00      	cmp	r2, #0
 8021212:	f04f 0102 	mov.w	r1, #2
 8021216:	fb92 f1f1 	sdiv	r1, r2, r1
 802121a:	f002 0201 	and.w	r2, r2, #1
 802121e:	fb07 1303 	mla	r3, r7, r3, r1
 8021222:	441e      	add	r6, r3
 8021224:	bfb8      	it	lt
 8021226:	4252      	neglt	r2, r2
 8021228:	e7ce      	b.n	80211c8 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x194>
 802122a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802122e:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8021232:	437b      	muls	r3, r7
 8021234:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8021238:	441e      	add	r6, r3
 802123a:	2200      	movs	r2, #0
 802123c:	e7c5      	b.n	80211ca <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x196>
 802123e:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8021242:	fb07 f203 	mul.w	r2, r7, r3
 8021246:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 802124a:	2103      	movs	r1, #3
 802124c:	fb13 2301 	smlabb	r3, r3, r1, r2
 8021250:	e7f2      	b.n	8021238 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x204>
 8021252:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8021256:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 802125a:	fb07 2303 	mla	r3, r7, r3, r2
 802125e:	e7eb      	b.n	8021238 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x204>
 8021260:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8021264:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8021268:	437b      	muls	r3, r7
 802126a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 802126e:	e7e3      	b.n	8021238 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x204>
 8021270:	4b06      	ldr	r3, [pc, #24]	; (802128c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x258>)
 8021272:	4a03      	ldr	r2, [pc, #12]	; (8021280 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x24c>)
 8021274:	2156      	movs	r1, #86	; 0x56
 8021276:	e70d      	b.n	8021094 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x60>
 8021278:	08028030 	.word	0x08028030
 802127c:	08027f7a 	.word	0x08027f7a
 8021280:	08028038 	.word	0x08028038
 8021284:	08027fd6 	.word	0x08027fd6
 8021288:	2000d1a4 	.word	0x2000d1a4
 802128c:	0802800a 	.word	0x0802800a

08021290 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>:
 8021290:	6812      	ldr	r2, [r2, #0]
 8021292:	2a00      	cmp	r2, #0
 8021294:	db0b      	blt.n	80212ae <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x1e>
 8021296:	9800      	ldr	r0, [sp, #0]
 8021298:	6800      	ldr	r0, [r0, #0]
 802129a:	4290      	cmp	r0, r2
 802129c:	bfd4      	ite	le
 802129e:	2002      	movle	r0, #2
 80212a0:	2000      	movgt	r0, #0
 80212a2:	680a      	ldr	r2, [r1, #0]
 80212a4:	2a00      	cmp	r2, #0
 80212a6:	da04      	bge.n	80212b2 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x22>
 80212a8:	f040 0004 	orr.w	r0, r0, #4
 80212ac:	4770      	bx	lr
 80212ae:	2001      	movs	r0, #1
 80212b0:	e7f7      	b.n	80212a2 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x12>
 80212b2:	681b      	ldr	r3, [r3, #0]
 80212b4:	4293      	cmp	r3, r2
 80212b6:	bfd8      	it	le
 80212b8:	f040 0008 	orrle.w	r0, r0, #8
 80212bc:	4770      	bx	lr
	...

080212c0 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 80212c0:	b510      	push	{r4, lr}
 80212c2:	4b07      	ldr	r3, [pc, #28]	; (80212e0 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x20>)
 80212c4:	781b      	ldrb	r3, [r3, #0]
 80212c6:	2b01      	cmp	r3, #1
 80212c8:	d108      	bne.n	80212dc <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>
 80212ca:	6843      	ldr	r3, [r0, #4]
 80212cc:	6814      	ldr	r4, [r2, #0]
 80212ce:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 80212d2:	680b      	ldr	r3, [r1, #0]
 80212d4:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 80212d8:	6013      	str	r3, [r2, #0]
 80212da:	600c      	str	r4, [r1, #0]
 80212dc:	bd10      	pop	{r4, pc}
 80212de:	bf00      	nop
 80212e0:	2000d19c 	.word	0x2000d19c

080212e4 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 80212e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80212e6:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 80212ea:	b085      	sub	sp, #20
 80212ec:	4604      	mov	r4, r0
 80212ee:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80212f2:	b33b      	cbz	r3, 8021344 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x60>
 80212f4:	aa02      	add	r2, sp, #8
 80212f6:	a903      	add	r1, sp, #12
 80212f8:	f7ff ffe2 	bl	80212c0 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 80212fc:	68a3      	ldr	r3, [r4, #8]
 80212fe:	9e03      	ldr	r6, [sp, #12]
 8021300:	9f02      	ldr	r7, [sp, #8]
 8021302:	1af6      	subs	r6, r6, r3
 8021304:	68e3      	ldr	r3, [r4, #12]
 8021306:	9603      	str	r6, [sp, #12]
 8021308:	1aff      	subs	r7, r7, r3
 802130a:	f104 0314 	add.w	r3, r4, #20
 802130e:	9300      	str	r3, [sp, #0]
 8021310:	aa02      	add	r2, sp, #8
 8021312:	f104 0310 	add.w	r3, r4, #16
 8021316:	a903      	add	r1, sp, #12
 8021318:	4620      	mov	r0, r4
 802131a:	9702      	str	r7, [sp, #8]
 802131c:	f7ff ffb8 	bl	8021290 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>
 8021320:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
 8021324:	4605      	mov	r5, r0
 8021326:	b97b      	cbnz	r3, 8021348 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x64>
 8021328:	463a      	mov	r2, r7
 802132a:	4631      	mov	r1, r6
 802132c:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8021330:	f7ff fe7a 	bl	8021028 <_ZN8touchgfx10Rasterizer6lineToEii>
 8021334:	9b03      	ldr	r3, [sp, #12]
 8021336:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
 802133a:	9b02      	ldr	r3, [sp, #8]
 802133c:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 8021340:	f884 50ac 	strb.w	r5, [r4, #172]	; 0xac
 8021344:	b005      	add	sp, #20
 8021346:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021348:	b110      	cbz	r0, 8021350 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6c>
 802134a:	ea13 0200 	ands.w	r2, r3, r0
 802134e:	d11c      	bne.n	802138a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa6>
 8021350:	f894 00a1 	ldrb.w	r0, [r4, #161]	; 0xa1
 8021354:	f104 062c 	add.w	r6, r4, #44	; 0x2c
 8021358:	e9d4 1229 	ldrd	r1, r2, [r4, #164]	; 0xa4
 802135c:	b188      	cbz	r0, 8021382 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9e>
 802135e:	f884 30ad 	strb.w	r3, [r4, #173]	; 0xad
 8021362:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
 8021366:	b913      	cbnz	r3, 802136e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x8a>
 8021368:	4630      	mov	r0, r6
 802136a:	f001 f816 	bl	802239a <_ZN8touchgfx7Outline6moveToEii>
 802136e:	2300      	movs	r3, #0
 8021370:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 8021374:	2301      	movs	r3, #1
 8021376:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
 802137a:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 802137e:	4630      	mov	r0, r6
 8021380:	e7d6      	b.n	8021330 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4c>
 8021382:	4630      	mov	r0, r6
 8021384:	f7ff fe50 	bl	8021028 <_ZN8touchgfx10Rasterizer6lineToEii>
 8021388:	e7f7      	b.n	802137a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x96>
 802138a:	4615      	mov	r5, r2
 802138c:	e7d2      	b.n	8021334 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x50>

0802138e <_ZN8touchgfx6Canvas5closeEv>:
 802138e:	b538      	push	{r3, r4, r5, lr}
 8021390:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8021394:	4604      	mov	r4, r0
 8021396:	b993      	cbnz	r3, 80213be <_ZN8touchgfx6Canvas5closeEv+0x30>
 8021398:	f890 30ac 	ldrb.w	r3, [r0, #172]	; 0xac
 802139c:	f890 20ad 	ldrb.w	r2, [r0, #173]	; 0xad
 80213a0:	4213      	tst	r3, r2
 80213a2:	d10c      	bne.n	80213be <_ZN8touchgfx6Canvas5closeEv+0x30>
 80213a4:	f100 052c 	add.w	r5, r0, #44	; 0x2c
 80213a8:	b123      	cbz	r3, 80213b4 <_ZN8touchgfx6Canvas5closeEv+0x26>
 80213aa:	e9d0 1229 	ldrd	r1, r2, [r0, #164]	; 0xa4
 80213ae:	4628      	mov	r0, r5
 80213b0:	f7ff fe3a 	bl	8021028 <_ZN8touchgfx10Rasterizer6lineToEii>
 80213b4:	e9d4 122c 	ldrd	r1, r2, [r4, #176]	; 0xb0
 80213b8:	4628      	mov	r0, r5
 80213ba:	f7ff fe35 	bl	8021028 <_ZN8touchgfx10Rasterizer6lineToEii>
 80213be:	2300      	movs	r3, #0
 80213c0:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 80213c4:	bd38      	pop	{r3, r4, r5, pc}

080213c6 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 80213c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80213c8:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 80213cc:	b085      	sub	sp, #20
 80213ce:	4604      	mov	r4, r0
 80213d0:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80213d4:	b353      	cbz	r3, 802142c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>
 80213d6:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 80213da:	b90b      	cbnz	r3, 80213e0 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x1a>
 80213dc:	f7ff ffd7 	bl	802138e <_ZN8touchgfx6Canvas5closeEv>
 80213e0:	aa02      	add	r2, sp, #8
 80213e2:	a903      	add	r1, sp, #12
 80213e4:	4620      	mov	r0, r4
 80213e6:	f7ff ff6b 	bl	80212c0 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 80213ea:	68a3      	ldr	r3, [r4, #8]
 80213ec:	9d03      	ldr	r5, [sp, #12]
 80213ee:	9e02      	ldr	r6, [sp, #8]
 80213f0:	1aed      	subs	r5, r5, r3
 80213f2:	68e3      	ldr	r3, [r4, #12]
 80213f4:	9503      	str	r5, [sp, #12]
 80213f6:	1af6      	subs	r6, r6, r3
 80213f8:	f104 0314 	add.w	r3, r4, #20
 80213fc:	9300      	str	r3, [sp, #0]
 80213fe:	aa02      	add	r2, sp, #8
 8021400:	f104 0310 	add.w	r3, r4, #16
 8021404:	a903      	add	r1, sp, #12
 8021406:	4620      	mov	r0, r4
 8021408:	9602      	str	r6, [sp, #8]
 802140a:	f7ff ff41 	bl	8021290 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>
 802140e:	4607      	mov	r7, r0
 8021410:	b170      	cbz	r0, 8021430 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x6a>
 8021412:	2301      	movs	r3, #1
 8021414:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 8021418:	9a03      	ldr	r2, [sp, #12]
 802141a:	9b02      	ldr	r3, [sp, #8]
 802141c:	f8c4 20b0 	str.w	r2, [r4, #176]	; 0xb0
 8021420:	e9c4 2329 	strd	r2, r3, [r4, #164]	; 0xa4
 8021424:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
 8021428:	f884 70ac 	strb.w	r7, [r4, #172]	; 0xac
 802142c:	b005      	add	sp, #20
 802142e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021430:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
 8021434:	f884 00ad 	strb.w	r0, [r4, #173]	; 0xad
 8021438:	b92b      	cbnz	r3, 8021446 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x80>
 802143a:	4632      	mov	r2, r6
 802143c:	4629      	mov	r1, r5
 802143e:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8021442:	f000 ffaa 	bl	802239a <_ZN8touchgfx7Outline6moveToEii>
 8021446:	2300      	movs	r3, #0
 8021448:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 802144c:	2301      	movs	r3, #1
 802144e:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
 8021452:	e7e1      	b.n	8021418 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x52>

08021454 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_>:
 8021454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021458:	b087      	sub	sp, #28
 802145a:	4604      	mov	r4, r0
 802145c:	9105      	str	r1, [sp, #20]
 802145e:	f001 f8e2 	bl	8022626 <_ZN8touchgfx7Outline8getCellsEv>
 8021462:	f8d4 9008 	ldr.w	r9, [r4, #8]
 8021466:	4605      	mov	r5, r0
 8021468:	f1b9 0f00 	cmp.w	r9, #0
 802146c:	d103      	bne.n	8021476 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x22>
 802146e:	2001      	movs	r0, #1
 8021470:	b007      	add	sp, #28
 8021472:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021476:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
 802147a:	2e00      	cmp	r6, #0
 802147c:	d139      	bne.n	80214f2 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x9e>
 802147e:	f104 0848 	add.w	r8, r4, #72	; 0x48
 8021482:	4640      	mov	r0, r8
 8021484:	f001 f911 	bl	80226aa <_ZN8touchgfx8Scanline5resetEv>
 8021488:	f109 33ff 	add.w	r3, r9, #4294967295
 802148c:	f105 0708 	add.w	r7, r5, #8
 8021490:	9303      	str	r3, [sp, #12]
 8021492:	f9b5 b000 	ldrsh.w	fp, [r5]
 8021496:	f9b5 9002 	ldrsh.w	r9, [r5, #2]
 802149a:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 802149e:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 80214a2:	46da      	mov	sl, fp
 80214a4:	eb0b 4009 	add.w	r0, fp, r9, lsl #16
 80214a8:	9b03      	ldr	r3, [sp, #12]
 80214aa:	9504      	str	r5, [sp, #16]
 80214ac:	3b01      	subs	r3, #1
 80214ae:	9303      	str	r3, [sp, #12]
 80214b0:	3301      	adds	r3, #1
 80214b2:	4416      	add	r6, r2
 80214b4:	463d      	mov	r5, r7
 80214b6:	d01e      	beq.n	80214f6 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xa2>
 80214b8:	3708      	adds	r7, #8
 80214ba:	f937 cc06 	ldrsh.w	ip, [r7, #-6]
 80214be:	f937 2c08 	ldrsh.w	r2, [r7, #-8]
 80214c2:	eb02 420c 	add.w	r2, r2, ip, lsl #16
 80214c6:	4290      	cmp	r0, r2
 80214c8:	d11e      	bne.n	8021508 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xb4>
 80214ca:	f937 2c02 	ldrsh.w	r2, [r7, #-2]
 80214ce:	4411      	add	r1, r2
 80214d0:	f937 2c04 	ldrsh.w	r2, [r7, #-4]
 80214d4:	e7e8      	b.n	80214a8 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x54>
 80214d6:	1c91      	adds	r1, r2, #2
 80214d8:	f04f 0301 	mov.w	r3, #1
 80214dc:	65e1      	str	r1, [r4, #92]	; 0x5c
 80214de:	8053      	strh	r3, [r2, #2]
 80214e0:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80214e2:	1c91      	adds	r1, r2, #2
 80214e4:	65a1      	str	r1, [r4, #88]	; 0x58
 80214e6:	f8a2 b002 	strh.w	fp, [r2, #2]
 80214ea:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80214ec:	3201      	adds	r2, #1
 80214ee:	6562      	str	r2, [r4, #84]	; 0x54
 80214f0:	e03a      	b.n	8021568 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x114>
 80214f2:	2000      	movs	r0, #0
 80214f4:	e7bc      	b.n	8021470 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1c>
 80214f6:	b951      	cbnz	r1, 802150e <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xba>
 80214f8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80214fa:	2b00      	cmp	r3, #0
 80214fc:	d0b7      	beq.n	802146e <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1a>
 80214fe:	4641      	mov	r1, r8
 8021500:	9805      	ldr	r0, [sp, #20]
 8021502:	f7ff fd5b 	bl	8020fbc <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 8021506:	e7b2      	b.n	802146e <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1a>
 8021508:	2900      	cmp	r1, #0
 802150a:	d035      	beq.n	8021578 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x124>
 802150c:	9504      	str	r5, [sp, #16]
 802150e:	ebc1 1186 	rsb	r1, r1, r6, lsl #6
 8021512:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
 8021516:	f7ff fd3d 	bl	8020f94 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16>
 802151a:	4605      	mov	r5, r0
 802151c:	b330      	cbz	r0, 802156c <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 802151e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8021520:	b182      	cbz	r2, 8021544 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xf0>
 8021522:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8021524:	454a      	cmp	r2, r9
 8021526:	d00d      	beq.n	8021544 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xf0>
 8021528:	4641      	mov	r1, r8
 802152a:	9805      	ldr	r0, [sp, #20]
 802152c:	f7ff fd46 	bl	8020fbc <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 8021530:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8021534:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8021536:	65e2      	str	r2, [r4, #92]	; 0x5c
 8021538:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 802153c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 802153e:	65a2      	str	r2, [r4, #88]	; 0x58
 8021540:	2300      	movs	r3, #0
 8021542:	6563      	str	r3, [r4, #84]	; 0x54
 8021544:	f1bb 0f00 	cmp.w	fp, #0
 8021548:	db10      	blt.n	802156c <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 802154a:	f7f4 fa57 	bl	80159fc <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 802154e:	4583      	cmp	fp, r0
 8021550:	d20c      	bcs.n	802156c <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 8021552:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8021554:	f802 500b 	strb.w	r5, [r2, fp]
 8021558:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 802155a:	3201      	adds	r2, #1
 802155c:	455a      	cmp	r2, fp
 802155e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8021560:	d1b9      	bne.n	80214d6 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x82>
 8021562:	8811      	ldrh	r1, [r2, #0]
 8021564:	3101      	adds	r1, #1
 8021566:	8011      	strh	r1, [r2, #0]
 8021568:	e9c4 b913 	strd	fp, r9, [r4, #76]	; 0x4c
 802156c:	9b03      	ldr	r3, [sp, #12]
 802156e:	3301      	adds	r3, #1
 8021570:	d0c2      	beq.n	80214f8 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xa4>
 8021572:	9d04      	ldr	r5, [sp, #16]
 8021574:	f10b 0a01 	add.w	sl, fp, #1
 8021578:	f9b5 3000 	ldrsh.w	r3, [r5]
 802157c:	4553      	cmp	r3, sl
 802157e:	dd88      	ble.n	8021492 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>
 8021580:	01b1      	lsls	r1, r6, #6
 8021582:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
 8021586:	f7ff fd05 	bl	8020f94 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16>
 802158a:	4683      	mov	fp, r0
 802158c:	2800      	cmp	r0, #0
 802158e:	d080      	beq.n	8021492 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>
 8021590:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8021592:	b183      	cbz	r3, 80215b6 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x162>
 8021594:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8021596:	454b      	cmp	r3, r9
 8021598:	d00d      	beq.n	80215b6 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x162>
 802159a:	4641      	mov	r1, r8
 802159c:	9805      	ldr	r0, [sp, #20]
 802159e:	f7ff fd0d 	bl	8020fbc <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 80215a2:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80215a6:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 80215aa:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80215ac:	65e3      	str	r3, [r4, #92]	; 0x5c
 80215ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80215b0:	65a3      	str	r3, [r4, #88]	; 0x58
 80215b2:	2300      	movs	r3, #0
 80215b4:	6563      	str	r3, [r4, #84]	; 0x54
 80215b6:	f9b5 3000 	ldrsh.w	r3, [r5]
 80215ba:	f8cd b000 	str.w	fp, [sp]
 80215be:	eba3 030a 	sub.w	r3, r3, sl
 80215c2:	464a      	mov	r2, r9
 80215c4:	4651      	mov	r1, sl
 80215c6:	4640      	mov	r0, r8
 80215c8:	f001 f896 	bl	80226f8 <_ZN8touchgfx8Scanline7addSpanEiijj>
 80215cc:	e761      	b.n	8021492 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>

080215ce <_ZN8touchgfx6Canvas6renderEv>:
 80215ce:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80215d0:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 80215d4:	4604      	mov	r4, r0
 80215d6:	b913      	cbnz	r3, 80215de <_ZN8touchgfx6Canvas6renderEv+0x10>
 80215d8:	2001      	movs	r0, #1
 80215da:	b003      	add	sp, #12
 80215dc:	bd30      	pop	{r4, r5, pc}
 80215de:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 80215e2:	2b00      	cmp	r3, #0
 80215e4:	d131      	bne.n	802164a <_ZN8touchgfx6Canvas6renderEv+0x7c>
 80215e6:	f890 30a2 	ldrb.w	r3, [r0, #162]	; 0xa2
 80215ea:	2b00      	cmp	r3, #0
 80215ec:	d0f4      	beq.n	80215d8 <_ZN8touchgfx6Canvas6renderEv+0xa>
 80215ee:	6840      	ldr	r0, [r0, #4]
 80215f0:	6803      	ldr	r3, [r0, #0]
 80215f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80215f4:	4798      	blx	r3
 80215f6:	2800      	cmp	r0, #0
 80215f8:	d0ee      	beq.n	80215d8 <_ZN8touchgfx6Canvas6renderEv+0xa>
 80215fa:	4620      	mov	r0, r4
 80215fc:	f7ff fec7 	bl	802138e <_ZN8touchgfx6Canvas5closeEv>
 8021600:	6860      	ldr	r0, [r4, #4]
 8021602:	6803      	ldr	r3, [r0, #0]
 8021604:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8021606:	4798      	blx	r3
 8021608:	f8b4 209e 	ldrh.w	r2, [r4, #158]	; 0x9e
 802160c:	f8b4 109c 	ldrh.w	r1, [r4, #156]	; 0x9c
 8021610:	f7f3 f993 	bl	801493a <_ZN8touchgfx15AbstractPainter9setOffsetEtt>
 8021614:	6860      	ldr	r0, [r4, #4]
 8021616:	6803      	ldr	r3, [r0, #0]
 8021618:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802161a:	4798      	blx	r3
 802161c:	4605      	mov	r5, r0
 802161e:	6860      	ldr	r0, [r4, #4]
 8021620:	6803      	ldr	r3, [r0, #0]
 8021622:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8021624:	4798      	blx	r3
 8021626:	4601      	mov	r1, r0
 8021628:	4628      	mov	r0, r5
 802162a:	f7f3 f989 	bl	8014940 <_ZN8touchgfx15AbstractPainter14setWidgetAlphaEh>
 802162e:	6860      	ldr	r0, [r4, #4]
 8021630:	6803      	ldr	r3, [r0, #0]
 8021632:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8021634:	4798      	blx	r3
 8021636:	f104 0318 	add.w	r3, r4, #24
 802163a:	e9cd 3000 	strd	r3, r0, [sp]
 802163e:	4669      	mov	r1, sp
 8021640:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8021644:	f7ff ff06 	bl	8021454 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_>
 8021648:	e7c7      	b.n	80215da <_ZN8touchgfx6Canvas6renderEv+0xc>
 802164a:	2000      	movs	r0, #0
 802164c:	e7c5      	b.n	80215da <_ZN8touchgfx6Canvas6renderEv+0xc>
	...

08021650 <_ZN8touchgfx6CanvasD1Ev>:
 8021650:	b538      	push	{r3, r4, r5, lr}
 8021652:	4605      	mov	r5, r0
 8021654:	4b08      	ldr	r3, [pc, #32]	; (8021678 <_ZN8touchgfx6CanvasD1Ev+0x28>)
 8021656:	f845 3b2c 	str.w	r3, [r5], #44
 802165a:	4b08      	ldr	r3, [pc, #32]	; (802167c <_ZN8touchgfx6CanvasD1Ev+0x2c>)
 802165c:	4604      	mov	r4, r0
 802165e:	6818      	ldr	r0, [r3, #0]
 8021660:	6803      	ldr	r3, [r0, #0]
 8021662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021664:	4798      	blx	r3
 8021666:	4628      	mov	r0, r5
 8021668:	f000 f814 	bl	8021694 <_ZN8touchgfx7OutlineD1Ev>
 802166c:	f104 0018 	add.w	r0, r4, #24
 8021670:	f001 f882 	bl	8022778 <_ZN8touchgfx15RenderingBufferD1Ev>
 8021674:	4620      	mov	r0, r4
 8021676:	bd38      	pop	{r3, r4, r5, pc}
 8021678:	08028030 	.word	0x08028030
 802167c:	2000d1a4 	.word	0x2000d1a4

08021680 <_ZN8touchgfx6CanvasD0Ev>:
 8021680:	b510      	push	{r4, lr}
 8021682:	4604      	mov	r4, r0
 8021684:	f7ff ffe4 	bl	8021650 <_ZN8touchgfx6CanvasD1Ev>
 8021688:	4620      	mov	r0, r4
 802168a:	21b8      	movs	r1, #184	; 0xb8
 802168c:	f001 f885 	bl	802279a <_ZdlPvj>
 8021690:	4620      	mov	r0, r4
 8021692:	bd10      	pop	{r4, pc}

08021694 <_ZN8touchgfx7OutlineD1Ev>:
 8021694:	4770      	bx	lr

08021696 <_ZN8touchgfx7OutlineD0Ev>:
 8021696:	b510      	push	{r4, lr}
 8021698:	2148      	movs	r1, #72	; 0x48
 802169a:	4604      	mov	r4, r0
 802169c:	f001 f87d 	bl	802279a <_ZdlPvj>
 80216a0:	4620      	mov	r0, r4
 80216a2:	bd10      	pop	{r4, pc}

080216a4 <_ZN8touchgfx7Outline5resetEv>:
 80216a4:	b510      	push	{r4, lr}
 80216a6:	4604      	mov	r4, r0
 80216a8:	f7f4 f9c0 	bl	8015a2c <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 80216ac:	60e0      	str	r0, [r4, #12]
 80216ae:	f7f4 f9c3 	bl	8015a38 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 80216b2:	68e3      	ldr	r3, [r4, #12]
 80216b4:	6123      	str	r3, [r4, #16]
 80216b6:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80216ba:	82a3      	strh	r3, [r4, #20]
 80216bc:	82e3      	strh	r3, [r4, #22]
 80216be:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80216c0:	f023 0301 	bic.w	r3, r3, #1
 80216c4:	f043 0302 	orr.w	r3, r3, #2
 80216c8:	63e3      	str	r3, [r4, #60]	; 0x3c
 80216ca:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80216ce:	2200      	movs	r2, #0
 80216d0:	08c0      	lsrs	r0, r0, #3
 80216d2:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
 80216d6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80216da:	6060      	str	r0, [r4, #4]
 80216dc:	60a2      	str	r2, [r4, #8]
 80216de:	8322      	strh	r2, [r4, #24]
 80216e0:	8362      	strh	r2, [r4, #26]
 80216e2:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 80216e6:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 80216ea:	bd10      	pop	{r4, pc}

080216ec <_ZN8touchgfx7OutlineC1Ev>:
 80216ec:	b510      	push	{r4, lr}
 80216ee:	4b0f      	ldr	r3, [pc, #60]	; (802172c <_ZN8touchgfx7OutlineC1Ev+0x40>)
 80216f0:	6003      	str	r3, [r0, #0]
 80216f2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80216f6:	2300      	movs	r3, #0
 80216f8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80216fc:	4604      	mov	r4, r0
 80216fe:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8021702:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8021706:	e9c0 3305 	strd	r3, r3, [r0, #20]
 802170a:	e9c0 3307 	strd	r3, r3, [r0, #28]
 802170e:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
 8021712:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
 8021716:	e9c0 110d 	strd	r1, r1, [r0, #52]	; 0x34
 802171a:	e9c0 320f 	strd	r3, r2, [r0, #60]	; 0x3c
 802171e:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 8021722:	f7ff ffbf 	bl	80216a4 <_ZN8touchgfx7Outline5resetEv>
 8021726:	4620      	mov	r0, r4
 8021728:	bd10      	pop	{r4, pc}
 802172a:	bf00      	nop
 802172c:	08028090 	.word	0x08028090

08021730 <_ZN8touchgfx7Outline10renderLineEiiii>:
 8021730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021734:	b093      	sub	sp, #76	; 0x4c
 8021736:	4604      	mov	r4, r0
 8021738:	981c      	ldr	r0, [sp, #112]	; 0x70
 802173a:	9305      	str	r3, [sp, #20]
 802173c:	1143      	asrs	r3, r0, #5
 802173e:	930c      	str	r3, [sp, #48]	; 0x30
 8021740:	f000 031f 	and.w	r3, r0, #31
 8021744:	9303      	str	r3, [sp, #12]
 8021746:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8021748:	1156      	asrs	r6, r2, #5
 802174a:	42b3      	cmp	r3, r6
 802174c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 802174e:	bfc8      	it	gt
 8021750:	6326      	strgt	r6, [r4, #48]	; 0x30
 8021752:	42b3      	cmp	r3, r6
 8021754:	bfdc      	itt	le
 8021756:	1c73      	addle	r3, r6, #1
 8021758:	63a3      	strle	r3, [r4, #56]	; 0x38
 802175a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 802175c:	1145      	asrs	r5, r0, #5
 802175e:	42ab      	cmp	r3, r5
 8021760:	bfc4      	itt	gt
 8021762:	462b      	movgt	r3, r5
 8021764:	6323      	strgt	r3, [r4, #48]	; 0x30
 8021766:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8021768:	1145      	asrs	r5, r0, #5
 802176a:	42ab      	cmp	r3, r5
 802176c:	bfde      	ittt	le
 802176e:	462b      	movle	r3, r5
 8021770:	3301      	addle	r3, #1
 8021772:	63a3      	strle	r3, [r4, #56]	; 0x38
 8021774:	9b05      	ldr	r3, [sp, #20]
 8021776:	eba3 0a01 	sub.w	sl, r3, r1
 802177a:	1143      	asrs	r3, r0, #5
 802177c:	429e      	cmp	r6, r3
 802177e:	f002 0e1f 	and.w	lr, r2, #31
 8021782:	ea4f 1561 	mov.w	r5, r1, asr #5
 8021786:	f040 811e 	bne.w	80219c6 <_ZN8touchgfx7Outline10renderLineEiiii+0x296>
 802178a:	9b05      	ldr	r3, [sp, #20]
 802178c:	ea4f 1c63 	mov.w	ip, r3, asr #5
 8021790:	9b03      	ldr	r3, [sp, #12]
 8021792:	459e      	cmp	lr, r3
 8021794:	d12c      	bne.n	80217f0 <_ZN8touchgfx7Outline10renderLineEiiii+0xc0>
 8021796:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 802179a:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 802179e:	eb0c 4106 	add.w	r1, ip, r6, lsl #16
 80217a2:	eb02 4203 	add.w	r2, r2, r3, lsl #16
 80217a6:	4291      	cmp	r1, r2
 80217a8:	d037      	beq.n	802181a <_ZN8touchgfx7Outline10renderLineEiiii+0xea>
 80217aa:	8b61      	ldrh	r1, [r4, #26]
 80217ac:	8b22      	ldrh	r2, [r4, #24]
 80217ae:	430a      	orrs	r2, r1
 80217b0:	d00b      	beq.n	80217ca <_ZN8touchgfx7Outline10renderLineEiiii+0x9a>
 80217b2:	2b00      	cmp	r3, #0
 80217b4:	db09      	blt.n	80217ca <_ZN8touchgfx7Outline10renderLineEiiii+0x9a>
 80217b6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80217b8:	429a      	cmp	r2, r3
 80217ba:	dd06      	ble.n	80217ca <_ZN8touchgfx7Outline10renderLineEiiii+0x9a>
 80217bc:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 80217c0:	429a      	cmp	r2, r3
 80217c2:	d308      	bcc.n	80217d6 <_ZN8touchgfx7Outline10renderLineEiiii+0xa6>
 80217c4:	2301      	movs	r3, #1
 80217c6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80217ca:	f8a4 c014 	strh.w	ip, [r4, #20]
 80217ce:	82e6      	strh	r6, [r4, #22]
 80217d0:	2300      	movs	r3, #0
 80217d2:	8323      	strh	r3, [r4, #24]
 80217d4:	e0cb      	b.n	802196e <_ZN8touchgfx7Outline10renderLineEiiii+0x23e>
 80217d6:	f104 0314 	add.w	r3, r4, #20
 80217da:	cb03      	ldmia	r3!, {r0, r1}
 80217dc:	6922      	ldr	r2, [r4, #16]
 80217de:	6010      	str	r0, [r2, #0]
 80217e0:	6051      	str	r1, [r2, #4]
 80217e2:	6923      	ldr	r3, [r4, #16]
 80217e4:	3308      	adds	r3, #8
 80217e6:	6123      	str	r3, [r4, #16]
 80217e8:	68a3      	ldr	r3, [r4, #8]
 80217ea:	3301      	adds	r3, #1
 80217ec:	60a3      	str	r3, [r4, #8]
 80217ee:	e7ec      	b.n	80217ca <_ZN8touchgfx7Outline10renderLineEiiii+0x9a>
 80217f0:	9b05      	ldr	r3, [sp, #20]
 80217f2:	8b20      	ldrh	r0, [r4, #24]
 80217f4:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 80217f8:	f003 031f 	and.w	r3, r3, #31
 80217fc:	9304      	str	r3, [sp, #16]
 80217fe:	9b03      	ldr	r3, [sp, #12]
 8021800:	45ac      	cmp	ip, r5
 8021802:	f001 011f 	and.w	r1, r1, #31
 8021806:	eba3 020e 	sub.w	r2, r3, lr
 802180a:	d109      	bne.n	8021820 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 802180c:	9b04      	ldr	r3, [sp, #16]
 802180e:	4419      	add	r1, r3
 8021810:	4410      	add	r0, r2
 8021812:	fb02 8201 	mla	r2, r2, r1, r8
 8021816:	8320      	strh	r0, [r4, #24]
 8021818:	8362      	strh	r2, [r4, #26]
 802181a:	b013      	add	sp, #76	; 0x4c
 802181c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021820:	f1ba 0f00 	cmp.w	sl, #0
 8021824:	f2c0 80a5 	blt.w	8021972 <_ZN8touchgfx7Outline10renderLineEiiii+0x242>
 8021828:	f1c1 0320 	rsb	r3, r1, #32
 802182c:	435a      	muls	r2, r3
 802182e:	2301      	movs	r3, #1
 8021830:	9302      	str	r3, [sp, #8]
 8021832:	f04f 0b20 	mov.w	fp, #32
 8021836:	fb92 f7fa 	sdiv	r7, r2, sl
 802183a:	fb0a 2217 	mls	r2, sl, r7, r2
 802183e:	2a00      	cmp	r2, #0
 8021840:	bfb8      	it	lt
 8021842:	f107 37ff 	addlt.w	r7, r7, #4294967295
 8021846:	4459      	add	r1, fp
 8021848:	fb07 8101 	mla	r1, r7, r1, r8
 802184c:	b20b      	sxth	r3, r1
 802184e:	9902      	ldr	r1, [sp, #8]
 8021850:	9301      	str	r3, [sp, #4]
 8021852:	8363      	strh	r3, [r4, #26]
 8021854:	f9b4 8014 	ldrsh.w	r8, [r4, #20]
 8021858:	eb05 0301 	add.w	r3, r5, r1
 802185c:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 8021860:	9300      	str	r3, [sp, #0]
 8021862:	ea4f 4506 	mov.w	r5, r6, lsl #16
 8021866:	4438      	add	r0, r7
 8021868:	eb03 0905 	add.w	r9, r3, r5
 802186c:	eb08 4801 	add.w	r8, r8, r1, lsl #16
 8021870:	bfb8      	it	lt
 8021872:	4452      	addlt	r2, sl
 8021874:	b200      	sxth	r0, r0
 8021876:	45c1      	cmp	r9, r8
 8021878:	8320      	strh	r0, [r4, #24]
 802187a:	9505      	str	r5, [sp, #20]
 802187c:	d014      	beq.n	80218a8 <_ZN8touchgfx7Outline10renderLineEiiii+0x178>
 802187e:	9b01      	ldr	r3, [sp, #4]
 8021880:	4303      	orrs	r3, r0
 8021882:	d00b      	beq.n	802189c <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 8021884:	2900      	cmp	r1, #0
 8021886:	db09      	blt.n	802189c <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 8021888:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802188a:	428b      	cmp	r3, r1
 802188c:	dd06      	ble.n	802189c <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 802188e:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8021892:	4299      	cmp	r1, r3
 8021894:	d376      	bcc.n	8021984 <_ZN8touchgfx7Outline10renderLineEiiii+0x254>
 8021896:	2301      	movs	r3, #1
 8021898:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 802189c:	9b00      	ldr	r3, [sp, #0]
 802189e:	82a3      	strh	r3, [r4, #20]
 80218a0:	2300      	movs	r3, #0
 80218a2:	82e6      	strh	r6, [r4, #22]
 80218a4:	8323      	strh	r3, [r4, #24]
 80218a6:	8363      	strh	r3, [r4, #26]
 80218a8:	9900      	ldr	r1, [sp, #0]
 80218aa:	458c      	cmp	ip, r1
 80218ac:	eb0e 0307 	add.w	r3, lr, r7
 80218b0:	d050      	beq.n	8021954 <_ZN8touchgfx7Outline10renderLineEiiii+0x224>
 80218b2:	9903      	ldr	r1, [sp, #12]
 80218b4:	1ac9      	subs	r1, r1, r3
 80218b6:	440f      	add	r7, r1
 80218b8:	017f      	lsls	r7, r7, #5
 80218ba:	fb97 fefa 	sdiv	lr, r7, sl
 80218be:	fb0a 771e 	mls	r7, sl, lr, r7
 80218c2:	2f00      	cmp	r7, #0
 80218c4:	bfb8      	it	lt
 80218c6:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 80218ca:	eba2 020a 	sub.w	r2, r2, sl
 80218ce:	f10e 0101 	add.w	r1, lr, #1
 80218d2:	bfb8      	it	lt
 80218d4:	4457      	addlt	r7, sl
 80218d6:	9201      	str	r2, [sp, #4]
 80218d8:	9106      	str	r1, [sp, #24]
 80218da:	9a01      	ldr	r2, [sp, #4]
 80218dc:	8b20      	ldrh	r0, [r4, #24]
 80218de:	8b61      	ldrh	r1, [r4, #26]
 80218e0:	9d02      	ldr	r5, [sp, #8]
 80218e2:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 80218e6:	19d2      	adds	r2, r2, r7
 80218e8:	9201      	str	r2, [sp, #4]
 80218ea:	bf5e      	ittt	pl
 80218ec:	eba2 020a 	subpl.w	r2, r2, sl
 80218f0:	f8dd 8018 	ldrpl.w	r8, [sp, #24]
 80218f4:	9201      	strpl	r2, [sp, #4]
 80218f6:	9a00      	ldr	r2, [sp, #0]
 80218f8:	bf48      	it	mi
 80218fa:	46f0      	movmi	r8, lr
 80218fc:	442a      	add	r2, r5
 80218fe:	4440      	add	r0, r8
 8021900:	eb01 1148 	add.w	r1, r1, r8, lsl #5
 8021904:	4443      	add	r3, r8
 8021906:	9d05      	ldr	r5, [sp, #20]
 8021908:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 802190c:	9200      	str	r2, [sp, #0]
 802190e:	4415      	add	r5, r2
 8021910:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 8021914:	b200      	sxth	r0, r0
 8021916:	b209      	sxth	r1, r1
 8021918:	454d      	cmp	r5, r9
 802191a:	8320      	strh	r0, [r4, #24]
 802191c:	8361      	strh	r1, [r4, #26]
 802191e:	d016      	beq.n	802194e <_ZN8touchgfx7Outline10renderLineEiiii+0x21e>
 8021920:	4301      	orrs	r1, r0
 8021922:	d00d      	beq.n	8021940 <_ZN8touchgfx7Outline10renderLineEiiii+0x210>
 8021924:	f1b8 0f00 	cmp.w	r8, #0
 8021928:	db0a      	blt.n	8021940 <_ZN8touchgfx7Outline10renderLineEiiii+0x210>
 802192a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802192c:	4541      	cmp	r1, r8
 802192e:	dd07      	ble.n	8021940 <_ZN8touchgfx7Outline10renderLineEiiii+0x210>
 8021930:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8021934:	4288      	cmp	r0, r1
 8021936:	d335      	bcc.n	80219a4 <_ZN8touchgfx7Outline10renderLineEiiii+0x274>
 8021938:	f04f 0101 	mov.w	r1, #1
 802193c:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 8021940:	9900      	ldr	r1, [sp, #0]
 8021942:	82a1      	strh	r1, [r4, #20]
 8021944:	f04f 0100 	mov.w	r1, #0
 8021948:	82e6      	strh	r6, [r4, #22]
 802194a:	8321      	strh	r1, [r4, #24]
 802194c:	8361      	strh	r1, [r4, #26]
 802194e:	9a00      	ldr	r2, [sp, #0]
 8021950:	4594      	cmp	ip, r2
 8021952:	d1c2      	bne.n	80218da <_ZN8touchgfx7Outline10renderLineEiiii+0x1aa>
 8021954:	9a03      	ldr	r2, [sp, #12]
 8021956:	f8b4 c01a 	ldrh.w	ip, [r4, #26]
 802195a:	1ad3      	subs	r3, r2, r3
 802195c:	8b22      	ldrh	r2, [r4, #24]
 802195e:	441a      	add	r2, r3
 8021960:	8322      	strh	r2, [r4, #24]
 8021962:	9a04      	ldr	r2, [sp, #16]
 8021964:	3220      	adds	r2, #32
 8021966:	eba2 020b 	sub.w	r2, r2, fp
 802196a:	fb03 c302 	mla	r3, r3, r2, ip
 802196e:	8363      	strh	r3, [r4, #26]
 8021970:	e753      	b.n	802181a <_ZN8touchgfx7Outline10renderLineEiiii+0xea>
 8021972:	f04f 33ff 	mov.w	r3, #4294967295
 8021976:	434a      	muls	r2, r1
 8021978:	f1ca 0a00 	rsb	sl, sl, #0
 802197c:	9302      	str	r3, [sp, #8]
 802197e:	f04f 0b00 	mov.w	fp, #0
 8021982:	e758      	b.n	8021836 <_ZN8touchgfx7Outline10renderLineEiiii+0x106>
 8021984:	f104 0314 	add.w	r3, r4, #20
 8021988:	cb03      	ldmia	r3!, {r0, r1}
 802198a:	f8d4 8010 	ldr.w	r8, [r4, #16]
 802198e:	f8c8 0000 	str.w	r0, [r8]
 8021992:	f8c8 1004 	str.w	r1, [r8, #4]
 8021996:	6923      	ldr	r3, [r4, #16]
 8021998:	3308      	adds	r3, #8
 802199a:	6123      	str	r3, [r4, #16]
 802199c:	68a3      	ldr	r3, [r4, #8]
 802199e:	3301      	adds	r3, #1
 80219a0:	60a3      	str	r3, [r4, #8]
 80219a2:	e77b      	b.n	802189c <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 80219a4:	f104 0814 	add.w	r8, r4, #20
 80219a8:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 80219ac:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80219b0:	f8c9 0000 	str.w	r0, [r9]
 80219b4:	f8c9 1004 	str.w	r1, [r9, #4]
 80219b8:	6921      	ldr	r1, [r4, #16]
 80219ba:	3108      	adds	r1, #8
 80219bc:	6121      	str	r1, [r4, #16]
 80219be:	68a1      	ldr	r1, [r4, #8]
 80219c0:	3101      	adds	r1, #1
 80219c2:	60a1      	str	r1, [r4, #8]
 80219c4:	e7bc      	b.n	8021940 <_ZN8touchgfx7Outline10renderLineEiiii+0x210>
 80219c6:	1a83      	subs	r3, r0, r2
 80219c8:	9301      	str	r3, [sp, #4]
 80219ca:	f1ba 0f00 	cmp.w	sl, #0
 80219ce:	f040 8096 	bne.w	8021afe <_ZN8touchgfx7Outline10renderLineEiiii+0x3ce>
 80219d2:	9a01      	ldr	r2, [sp, #4]
 80219d4:	f9b4 0016 	ldrsh.w	r0, [r4, #22]
 80219d8:	2a00      	cmp	r2, #0
 80219da:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80219de:	8b62      	ldrh	r2, [r4, #26]
 80219e0:	f001 033e 	and.w	r3, r1, #62	; 0x3e
 80219e4:	bfa8      	it	ge
 80219e6:	f04f 0a20 	movge.w	sl, #32
 80219ea:	8b21      	ldrh	r1, [r4, #24]
 80219ec:	bfb4      	ite	lt
 80219ee:	f04f 38ff 	movlt.w	r8, #4294967295
 80219f2:	f04f 0801 	movge.w	r8, #1
 80219f6:	ebaa 0e0e 	sub.w	lr, sl, lr
 80219fa:	4471      	add	r1, lr
 80219fc:	fb0e 2e03 	mla	lr, lr, r3, r2
 8021a00:	eb08 0206 	add.w	r2, r8, r6
 8021a04:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
 8021a08:	eb05 4702 	add.w	r7, r5, r2, lsl #16
 8021a0c:	eb06 4600 	add.w	r6, r6, r0, lsl #16
 8021a10:	b209      	sxth	r1, r1
 8021a12:	fa0f fe8e 	sxth.w	lr, lr
 8021a16:	42b7      	cmp	r7, r6
 8021a18:	8321      	strh	r1, [r4, #24]
 8021a1a:	f8a4 e01a 	strh.w	lr, [r4, #26]
 8021a1e:	d013      	beq.n	8021a48 <_ZN8touchgfx7Outline10renderLineEiiii+0x318>
 8021a20:	ea51 010e 	orrs.w	r1, r1, lr
 8021a24:	d00b      	beq.n	8021a3e <_ZN8touchgfx7Outline10renderLineEiiii+0x30e>
 8021a26:	2800      	cmp	r0, #0
 8021a28:	db09      	blt.n	8021a3e <_ZN8touchgfx7Outline10renderLineEiiii+0x30e>
 8021a2a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8021a2c:	4281      	cmp	r1, r0
 8021a2e:	dd06      	ble.n	8021a3e <_ZN8touchgfx7Outline10renderLineEiiii+0x30e>
 8021a30:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8021a34:	4288      	cmp	r0, r1
 8021a36:	d339      	bcc.n	8021aac <_ZN8touchgfx7Outline10renderLineEiiii+0x37c>
 8021a38:	2101      	movs	r1, #1
 8021a3a:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 8021a3e:	2100      	movs	r1, #0
 8021a40:	82a5      	strh	r5, [r4, #20]
 8021a42:	82e2      	strh	r2, [r4, #22]
 8021a44:	8321      	strh	r1, [r4, #24]
 8021a46:	8361      	strh	r1, [r4, #26]
 8021a48:	f1aa 0610 	sub.w	r6, sl, #16
 8021a4c:	0076      	lsls	r6, r6, #1
 8021a4e:	fb06 f703 	mul.w	r7, r6, r3
 8021a52:	b23f      	sxth	r7, r7
 8021a54:	b236      	sxth	r6, r6
 8021a56:	ea46 0107 	orr.w	r1, r6, r7
 8021a5a:	9100      	str	r1, [sp, #0]
 8021a5c:	f04f 0e00 	mov.w	lr, #0
 8021a60:	f04f 0b01 	mov.w	fp, #1
 8021a64:	990c      	ldr	r1, [sp, #48]	; 0x30
 8021a66:	428a      	cmp	r2, r1
 8021a68:	d03e      	beq.n	8021ae8 <_ZN8touchgfx7Outline10renderLineEiiii+0x3b8>
 8021a6a:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 8021a6e:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 8021a72:	8326      	strh	r6, [r4, #24]
 8021a74:	4442      	add	r2, r8
 8021a76:	eb05 4c02 	add.w	ip, r5, r2, lsl #16
 8021a7a:	eb00 4001 	add.w	r0, r0, r1, lsl #16
 8021a7e:	4584      	cmp	ip, r0
 8021a80:	8367      	strh	r7, [r4, #26]
 8021a82:	d0ef      	beq.n	8021a64 <_ZN8touchgfx7Outline10renderLineEiiii+0x334>
 8021a84:	9800      	ldr	r0, [sp, #0]
 8021a86:	b150      	cbz	r0, 8021a9e <_ZN8touchgfx7Outline10renderLineEiiii+0x36e>
 8021a88:	2900      	cmp	r1, #0
 8021a8a:	db08      	blt.n	8021a9e <_ZN8touchgfx7Outline10renderLineEiiii+0x36e>
 8021a8c:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8021a8e:	4288      	cmp	r0, r1
 8021a90:	dd05      	ble.n	8021a9e <_ZN8touchgfx7Outline10renderLineEiiii+0x36e>
 8021a92:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8021a96:	4288      	cmp	r0, r1
 8021a98:	d315      	bcc.n	8021ac6 <_ZN8touchgfx7Outline10renderLineEiiii+0x396>
 8021a9a:	f884 b044 	strb.w	fp, [r4, #68]	; 0x44
 8021a9e:	82a5      	strh	r5, [r4, #20]
 8021aa0:	82e2      	strh	r2, [r4, #22]
 8021aa2:	f8a4 e018 	strh.w	lr, [r4, #24]
 8021aa6:	f8a4 e01a 	strh.w	lr, [r4, #26]
 8021aaa:	e7db      	b.n	8021a64 <_ZN8touchgfx7Outline10renderLineEiiii+0x334>
 8021aac:	f104 0614 	add.w	r6, r4, #20
 8021ab0:	ce03      	ldmia	r6!, {r0, r1}
 8021ab2:	6927      	ldr	r7, [r4, #16]
 8021ab4:	6038      	str	r0, [r7, #0]
 8021ab6:	6079      	str	r1, [r7, #4]
 8021ab8:	6921      	ldr	r1, [r4, #16]
 8021aba:	3108      	adds	r1, #8
 8021abc:	6121      	str	r1, [r4, #16]
 8021abe:	68a1      	ldr	r1, [r4, #8]
 8021ac0:	3101      	adds	r1, #1
 8021ac2:	60a1      	str	r1, [r4, #8]
 8021ac4:	e7bb      	b.n	8021a3e <_ZN8touchgfx7Outline10renderLineEiiii+0x30e>
 8021ac6:	f104 0c14 	add.w	ip, r4, #20
 8021aca:	e8bc 0003 	ldmia.w	ip!, {r0, r1}
 8021ace:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8021ad2:	f8c9 0000 	str.w	r0, [r9]
 8021ad6:	f8c9 1004 	str.w	r1, [r9, #4]
 8021ada:	6921      	ldr	r1, [r4, #16]
 8021adc:	3108      	adds	r1, #8
 8021ade:	6121      	str	r1, [r4, #16]
 8021ae0:	68a1      	ldr	r1, [r4, #8]
 8021ae2:	3101      	adds	r1, #1
 8021ae4:	60a1      	str	r1, [r4, #8]
 8021ae6:	e7da      	b.n	8021a9e <_ZN8touchgfx7Outline10renderLineEiiii+0x36e>
 8021ae8:	9a03      	ldr	r2, [sp, #12]
 8021aea:	8b61      	ldrh	r1, [r4, #26]
 8021aec:	f1a2 0c20 	sub.w	ip, r2, #32
 8021af0:	8b22      	ldrh	r2, [r4, #24]
 8021af2:	44d4      	add	ip, sl
 8021af4:	4462      	add	r2, ip
 8021af6:	8322      	strh	r2, [r4, #24]
 8021af8:	fb0c 1303 	mla	r3, ip, r3, r1
 8021afc:	e737      	b.n	802196e <_ZN8touchgfx7Outline10renderLineEiiii+0x23e>
 8021afe:	9b01      	ldr	r3, [sp, #4]
 8021b00:	2b00      	cmp	r3, #0
 8021b02:	db3f      	blt.n	8021b84 <_ZN8touchgfx7Outline10renderLineEiiii+0x454>
 8021b04:	2201      	movs	r2, #1
 8021b06:	f1ce 0320 	rsb	r3, lr, #32
 8021b0a:	920b      	str	r2, [sp, #44]	; 0x2c
 8021b0c:	fb0a f303 	mul.w	r3, sl, r3
 8021b10:	2220      	movs	r2, #32
 8021b12:	9202      	str	r2, [sp, #8]
 8021b14:	9a01      	ldr	r2, [sp, #4]
 8021b16:	fb93 f7f2 	sdiv	r7, r3, r2
 8021b1a:	fb02 3317 	mls	r3, r2, r7, r3
 8021b1e:	2b00      	cmp	r3, #0
 8021b20:	bfb8      	it	lt
 8021b22:	f107 37ff 	addlt.w	r7, r7, #4294967295
 8021b26:	9308      	str	r3, [sp, #32]
 8021b28:	eb07 0b01 	add.w	fp, r7, r1
 8021b2c:	bfbc      	itt	lt
 8021b2e:	189b      	addlt	r3, r3, r2
 8021b30:	9308      	strlt	r3, [sp, #32]
 8021b32:	ea4f 136b 	mov.w	r3, fp, asr #5
 8021b36:	9304      	str	r3, [sp, #16]
 8021b38:	9b02      	ldr	r3, [sp, #8]
 8021b3a:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 8021b3e:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 8021b42:	4573      	cmp	r3, lr
 8021b44:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 8021b48:	d133      	bne.n	8021bb2 <_ZN8touchgfx7Outline10renderLineEiiii+0x482>
 8021b4a:	9b04      	ldr	r3, [sp, #16]
 8021b4c:	eb03 4306 	add.w	r3, r3, r6, lsl #16
 8021b50:	454b      	cmp	r3, r9
 8021b52:	d045      	beq.n	8021be0 <_ZN8touchgfx7Outline10renderLineEiiii+0x4b0>
 8021b54:	8b62      	ldrh	r2, [r4, #26]
 8021b56:	8b23      	ldrh	r3, [r4, #24]
 8021b58:	4313      	orrs	r3, r2
 8021b5a:	d00c      	beq.n	8021b76 <_ZN8touchgfx7Outline10renderLineEiiii+0x446>
 8021b5c:	f1b8 0f00 	cmp.w	r8, #0
 8021b60:	db09      	blt.n	8021b76 <_ZN8touchgfx7Outline10renderLineEiiii+0x446>
 8021b62:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8021b64:	4543      	cmp	r3, r8
 8021b66:	dd06      	ble.n	8021b76 <_ZN8touchgfx7Outline10renderLineEiiii+0x446>
 8021b68:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 8021b6c:	429a      	cmp	r2, r3
 8021b6e:	d313      	bcc.n	8021b98 <_ZN8touchgfx7Outline10renderLineEiiii+0x468>
 8021b70:	2301      	movs	r3, #1
 8021b72:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8021b76:	9b04      	ldr	r3, [sp, #16]
 8021b78:	82a3      	strh	r3, [r4, #20]
 8021b7a:	2300      	movs	r3, #0
 8021b7c:	82e6      	strh	r6, [r4, #22]
 8021b7e:	8323      	strh	r3, [r4, #24]
 8021b80:	8363      	strh	r3, [r4, #26]
 8021b82:	e02d      	b.n	8021be0 <_ZN8touchgfx7Outline10renderLineEiiii+0x4b0>
 8021b84:	9a01      	ldr	r2, [sp, #4]
 8021b86:	4252      	negs	r2, r2
 8021b88:	9201      	str	r2, [sp, #4]
 8021b8a:	f04f 32ff 	mov.w	r2, #4294967295
 8021b8e:	920b      	str	r2, [sp, #44]	; 0x2c
 8021b90:	fb0a f30e 	mul.w	r3, sl, lr
 8021b94:	2200      	movs	r2, #0
 8021b96:	e7bc      	b.n	8021b12 <_ZN8touchgfx7Outline10renderLineEiiii+0x3e2>
 8021b98:	f104 0314 	add.w	r3, r4, #20
 8021b9c:	cb03      	ldmia	r3!, {r0, r1}
 8021b9e:	6922      	ldr	r2, [r4, #16]
 8021ba0:	6010      	str	r0, [r2, #0]
 8021ba2:	6051      	str	r1, [r2, #4]
 8021ba4:	6923      	ldr	r3, [r4, #16]
 8021ba6:	3308      	adds	r3, #8
 8021ba8:	6123      	str	r3, [r4, #16]
 8021baa:	68a3      	ldr	r3, [r4, #8]
 8021bac:	3301      	adds	r3, #1
 8021bae:	60a3      	str	r3, [r4, #8]
 8021bb0:	e7e1      	b.n	8021b76 <_ZN8touchgfx7Outline10renderLineEiiii+0x446>
 8021bb2:	f00b 031f 	and.w	r3, fp, #31
 8021bb6:	9309      	str	r3, [sp, #36]	; 0x24
 8021bb8:	9b02      	ldr	r3, [sp, #8]
 8021bba:	8b20      	ldrh	r0, [r4, #24]
 8021bbc:	eba3 020e 	sub.w	r2, r3, lr
 8021bc0:	8b63      	ldrh	r3, [r4, #26]
 8021bc2:	9300      	str	r3, [sp, #0]
 8021bc4:	9b04      	ldr	r3, [sp, #16]
 8021bc6:	42ab      	cmp	r3, r5
 8021bc8:	f001 011f 	and.w	r1, r1, #31
 8021bcc:	f040 80ef 	bne.w	8021dae <_ZN8touchgfx7Outline10renderLineEiiii+0x67e>
 8021bd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021bd2:	4419      	add	r1, r3
 8021bd4:	9b00      	ldr	r3, [sp, #0]
 8021bd6:	4410      	add	r0, r2
 8021bd8:	fb02 3101 	mla	r1, r2, r1, r3
 8021bdc:	8320      	strh	r0, [r4, #24]
 8021bde:	8361      	strh	r1, [r4, #26]
 8021be0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021be2:	9904      	ldr	r1, [sp, #16]
 8021be4:	4433      	add	r3, r6
 8021be6:	9300      	str	r3, [sp, #0]
 8021be8:	9a00      	ldr	r2, [sp, #0]
 8021bea:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8021bee:	eb01 4002 	add.w	r0, r1, r2, lsl #16
 8021bf2:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8021bf6:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8021bfa:	4288      	cmp	r0, r1
 8021bfc:	d018      	beq.n	8021c30 <_ZN8touchgfx7Outline10renderLineEiiii+0x500>
 8021bfe:	8b60      	ldrh	r0, [r4, #26]
 8021c00:	8b21      	ldrh	r1, [r4, #24]
 8021c02:	ea50 0201 	orrs.w	r2, r0, r1
 8021c06:	d00c      	beq.n	8021c22 <_ZN8touchgfx7Outline10renderLineEiiii+0x4f2>
 8021c08:	2b00      	cmp	r3, #0
 8021c0a:	db0a      	blt.n	8021c22 <_ZN8touchgfx7Outline10renderLineEiiii+0x4f2>
 8021c0c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8021c0e:	4299      	cmp	r1, r3
 8021c10:	dd07      	ble.n	8021c22 <_ZN8touchgfx7Outline10renderLineEiiii+0x4f2>
 8021c12:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8021c16:	4299      	cmp	r1, r3
 8021c18:	f0c0 8190 	bcc.w	8021f3c <_ZN8touchgfx7Outline10renderLineEiiii+0x80c>
 8021c1c:	2301      	movs	r3, #1
 8021c1e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8021c22:	9b04      	ldr	r3, [sp, #16]
 8021c24:	82a3      	strh	r3, [r4, #20]
 8021c26:	9b00      	ldr	r3, [sp, #0]
 8021c28:	82e3      	strh	r3, [r4, #22]
 8021c2a:	2300      	movs	r3, #0
 8021c2c:	8323      	strh	r3, [r4, #24]
 8021c2e:	8363      	strh	r3, [r4, #26]
 8021c30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021c32:	9a00      	ldr	r2, [sp, #0]
 8021c34:	4293      	cmp	r3, r2
 8021c36:	f000 808d 	beq.w	8021d54 <_ZN8touchgfx7Outline10renderLineEiiii+0x624>
 8021c3a:	9801      	ldr	r0, [sp, #4]
 8021c3c:	9901      	ldr	r1, [sp, #4]
 8021c3e:	ea4f 134a 	mov.w	r3, sl, lsl #5
 8021c42:	fb93 f1f1 	sdiv	r1, r3, r1
 8021c46:	fb00 3311 	mls	r3, r0, r1, r3
 8021c4a:	2b00      	cmp	r3, #0
 8021c4c:	9106      	str	r1, [sp, #24]
 8021c4e:	9307      	str	r3, [sp, #28]
 8021c50:	da04      	bge.n	8021c5c <_ZN8touchgfx7Outline10renderLineEiiii+0x52c>
 8021c52:	1e4b      	subs	r3, r1, #1
 8021c54:	9306      	str	r3, [sp, #24]
 8021c56:	9b07      	ldr	r3, [sp, #28]
 8021c58:	4403      	add	r3, r0
 8021c5a:	9307      	str	r3, [sp, #28]
 8021c5c:	9b08      	ldr	r3, [sp, #32]
 8021c5e:	9901      	ldr	r1, [sp, #4]
 8021c60:	1a5b      	subs	r3, r3, r1
 8021c62:	9308      	str	r3, [sp, #32]
 8021c64:	9b02      	ldr	r3, [sp, #8]
 8021c66:	f1c3 0320 	rsb	r3, r3, #32
 8021c6a:	930a      	str	r3, [sp, #40]	; 0x28
 8021c6c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8021c6e:	9b02      	ldr	r3, [sp, #8]
 8021c70:	1a1b      	subs	r3, r3, r0
 8021c72:	4659      	mov	r1, fp
 8021c74:	9309      	str	r3, [sp, #36]	; 0x24
 8021c76:	f04f 0c00 	mov.w	ip, #0
 8021c7a:	e9dd 0307 	ldrd	r0, r3, [sp, #28]
 8021c7e:	181b      	adds	r3, r3, r0
 8021c80:	bf58      	it	pl
 8021c82:	9801      	ldrpl	r0, [sp, #4]
 8021c84:	9308      	str	r3, [sp, #32]
 8021c86:	bf5d      	ittte	pl
 8021c88:	1a1b      	subpl	r3, r3, r0
 8021c8a:	9308      	strpl	r3, [sp, #32]
 8021c8c:	9b06      	ldrpl	r3, [sp, #24]
 8021c8e:	9d06      	ldrmi	r5, [sp, #24]
 8021c90:	9802      	ldr	r0, [sp, #8]
 8021c92:	f9b4 e016 	ldrsh.w	lr, [r4, #22]
 8021c96:	f9b4 8014 	ldrsh.w	r8, [r4, #20]
 8021c9a:	bf58      	it	pl
 8021c9c:	1c5d      	addpl	r5, r3, #1
 8021c9e:	44ab      	add	fp, r5
 8021ca0:	ea4f 136b 	mov.w	r3, fp, asr #5
 8021ca4:	9304      	str	r3, [sp, #16]
 8021ca6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021ca8:	4283      	cmp	r3, r0
 8021caa:	eb08 480e 	add.w	r8, r8, lr, lsl #16
 8021cae:	f040 815f 	bne.w	8021f70 <_ZN8touchgfx7Outline10renderLineEiiii+0x840>
 8021cb2:	9b04      	ldr	r3, [sp, #16]
 8021cb4:	9a00      	ldr	r2, [sp, #0]
 8021cb6:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 8021cba:	4543      	cmp	r3, r8
 8021cbc:	d01a      	beq.n	8021cf4 <_ZN8touchgfx7Outline10renderLineEiiii+0x5c4>
 8021cbe:	8b61      	ldrh	r1, [r4, #26]
 8021cc0:	8b23      	ldrh	r3, [r4, #24]
 8021cc2:	430b      	orrs	r3, r1
 8021cc4:	d00e      	beq.n	8021ce4 <_ZN8touchgfx7Outline10renderLineEiiii+0x5b4>
 8021cc6:	f1be 0f00 	cmp.w	lr, #0
 8021cca:	db0b      	blt.n	8021ce4 <_ZN8touchgfx7Outline10renderLineEiiii+0x5b4>
 8021ccc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8021cce:	4573      	cmp	r3, lr
 8021cd0:	dd08      	ble.n	8021ce4 <_ZN8touchgfx7Outline10renderLineEiiii+0x5b4>
 8021cd2:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8021cd6:	4299      	cmp	r1, r3
 8021cd8:	f0c0 813d 	bcc.w	8021f56 <_ZN8touchgfx7Outline10renderLineEiiii+0x826>
 8021cdc:	f04f 0301 	mov.w	r3, #1
 8021ce0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8021ce4:	9b04      	ldr	r3, [sp, #16]
 8021ce6:	82a3      	strh	r3, [r4, #20]
 8021ce8:	9b00      	ldr	r3, [sp, #0]
 8021cea:	82e3      	strh	r3, [r4, #22]
 8021cec:	f8a4 c018 	strh.w	ip, [r4, #24]
 8021cf0:	f8a4 c01a 	strh.w	ip, [r4, #26]
 8021cf4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021cf6:	9a00      	ldr	r2, [sp, #0]
 8021cf8:	441a      	add	r2, r3
 8021cfa:	9200      	str	r2, [sp, #0]
 8021cfc:	9900      	ldr	r1, [sp, #0]
 8021cfe:	9a04      	ldr	r2, [sp, #16]
 8021d00:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8021d04:	eb02 4001 	add.w	r0, r2, r1, lsl #16
 8021d08:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8021d0c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8021d10:	4288      	cmp	r0, r1
 8021d12:	d01a      	beq.n	8021d4a <_ZN8touchgfx7Outline10renderLineEiiii+0x61a>
 8021d14:	8b60      	ldrh	r0, [r4, #26]
 8021d16:	8b21      	ldrh	r1, [r4, #24]
 8021d18:	ea50 0201 	orrs.w	r2, r0, r1
 8021d1c:	d00d      	beq.n	8021d3a <_ZN8touchgfx7Outline10renderLineEiiii+0x60a>
 8021d1e:	2b00      	cmp	r3, #0
 8021d20:	db0b      	blt.n	8021d3a <_ZN8touchgfx7Outline10renderLineEiiii+0x60a>
 8021d22:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8021d24:	4299      	cmp	r1, r3
 8021d26:	dd08      	ble.n	8021d3a <_ZN8touchgfx7Outline10renderLineEiiii+0x60a>
 8021d28:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8021d2c:	4299      	cmp	r1, r3
 8021d2e:	f0c0 8202 	bcc.w	8022136 <_ZN8touchgfx7Outline10renderLineEiiii+0xa06>
 8021d32:	f04f 0301 	mov.w	r3, #1
 8021d36:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8021d3a:	9b04      	ldr	r3, [sp, #16]
 8021d3c:	82a3      	strh	r3, [r4, #20]
 8021d3e:	9b00      	ldr	r3, [sp, #0]
 8021d40:	82e3      	strh	r3, [r4, #22]
 8021d42:	f8a4 c018 	strh.w	ip, [r4, #24]
 8021d46:	f8a4 c01a 	strh.w	ip, [r4, #26]
 8021d4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021d4c:	9a00      	ldr	r2, [sp, #0]
 8021d4e:	4293      	cmp	r3, r2
 8021d50:	4659      	mov	r1, fp
 8021d52:	d192      	bne.n	8021c7a <_ZN8touchgfx7Outline10renderLineEiiii+0x54a>
 8021d54:	9b02      	ldr	r3, [sp, #8]
 8021d56:	f1c3 0c20 	rsb	ip, r3, #32
 8021d5a:	9b05      	ldr	r3, [sp, #20]
 8021d5c:	ea4f 1e63 	mov.w	lr, r3, asr #5
 8021d60:	9b03      	ldr	r3, [sp, #12]
 8021d62:	459c      	cmp	ip, r3
 8021d64:	f040 8201 	bne.w	802216a <_ZN8touchgfx7Outline10renderLineEiiii+0xa3a>
 8021d68:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8021d6c:	9a00      	ldr	r2, [sp, #0]
 8021d6e:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8021d72:	eb0e 4002 	add.w	r0, lr, r2, lsl #16
 8021d76:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8021d7a:	4288      	cmp	r0, r1
 8021d7c:	f43f ad4d 	beq.w	802181a <_ZN8touchgfx7Outline10renderLineEiiii+0xea>
 8021d80:	8b60      	ldrh	r0, [r4, #26]
 8021d82:	8b21      	ldrh	r1, [r4, #24]
 8021d84:	ea50 0201 	orrs.w	r2, r0, r1
 8021d88:	d00c      	beq.n	8021da4 <_ZN8touchgfx7Outline10renderLineEiiii+0x674>
 8021d8a:	2b00      	cmp	r3, #0
 8021d8c:	db0a      	blt.n	8021da4 <_ZN8touchgfx7Outline10renderLineEiiii+0x674>
 8021d8e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8021d90:	4299      	cmp	r1, r3
 8021d92:	dd07      	ble.n	8021da4 <_ZN8touchgfx7Outline10renderLineEiiii+0x674>
 8021d94:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8021d98:	4299      	cmp	r1, r3
 8021d9a:	f0c0 81d9 	bcc.w	8022150 <_ZN8touchgfx7Outline10renderLineEiiii+0xa20>
 8021d9e:	2301      	movs	r3, #1
 8021da0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8021da4:	9b00      	ldr	r3, [sp, #0]
 8021da6:	f8a4 e014 	strh.w	lr, [r4, #20]
 8021daa:	82e3      	strh	r3, [r4, #22]
 8021dac:	e510      	b.n	80217d0 <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 8021dae:	2f00      	cmp	r7, #0
 8021db0:	f2c0 809c 	blt.w	8021eec <_ZN8touchgfx7Outline10renderLineEiiii+0x7bc>
 8021db4:	2301      	movs	r3, #1
 8021db6:	f1c1 0c20 	rsb	ip, r1, #32
 8021dba:	9307      	str	r3, [sp, #28]
 8021dbc:	fb02 f20c 	mul.w	r2, r2, ip
 8021dc0:	2320      	movs	r3, #32
 8021dc2:	9306      	str	r3, [sp, #24]
 8021dc4:	9b06      	ldr	r3, [sp, #24]
 8021dc6:	fb92 fcf7 	sdiv	ip, r2, r7
 8021dca:	fb07 221c 	mls	r2, r7, ip, r2
 8021dce:	2a00      	cmp	r2, #0
 8021dd0:	4419      	add	r1, r3
 8021dd2:	9b00      	ldr	r3, [sp, #0]
 8021dd4:	bfb8      	it	lt
 8021dd6:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 8021dda:	fb0c 3101 	mla	r1, ip, r1, r3
 8021dde:	9b07      	ldr	r3, [sp, #28]
 8021de0:	441d      	add	r5, r3
 8021de2:	ea4f 4306 	mov.w	r3, r6, lsl #16
 8021de6:	4460      	add	r0, ip
 8021de8:	930a      	str	r3, [sp, #40]	; 0x28
 8021dea:	442b      	add	r3, r5
 8021dec:	bfb8      	it	lt
 8021dee:	19d2      	addlt	r2, r2, r7
 8021df0:	b200      	sxth	r0, r0
 8021df2:	b209      	sxth	r1, r1
 8021df4:	454b      	cmp	r3, r9
 8021df6:	8320      	strh	r0, [r4, #24]
 8021df8:	8361      	strh	r1, [r4, #26]
 8021dfa:	d014      	beq.n	8021e26 <_ZN8touchgfx7Outline10renderLineEiiii+0x6f6>
 8021dfc:	ea50 0301 	orrs.w	r3, r0, r1
 8021e00:	d00c      	beq.n	8021e1c <_ZN8touchgfx7Outline10renderLineEiiii+0x6ec>
 8021e02:	f1b8 0f00 	cmp.w	r8, #0
 8021e06:	db09      	blt.n	8021e1c <_ZN8touchgfx7Outline10renderLineEiiii+0x6ec>
 8021e08:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8021e0a:	4543      	cmp	r3, r8
 8021e0c:	dd06      	ble.n	8021e1c <_ZN8touchgfx7Outline10renderLineEiiii+0x6ec>
 8021e0e:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8021e12:	4299      	cmp	r1, r3
 8021e14:	d371      	bcc.n	8021efa <_ZN8touchgfx7Outline10renderLineEiiii+0x7ca>
 8021e16:	2301      	movs	r3, #1
 8021e18:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8021e1c:	2300      	movs	r3, #0
 8021e1e:	82a5      	strh	r5, [r4, #20]
 8021e20:	82e6      	strh	r6, [r4, #22]
 8021e22:	8323      	strh	r3, [r4, #24]
 8021e24:	8363      	strh	r3, [r4, #26]
 8021e26:	9904      	ldr	r1, [sp, #16]
 8021e28:	42a9      	cmp	r1, r5
 8021e2a:	eb0e 030c 	add.w	r3, lr, ip
 8021e2e:	d050      	beq.n	8021ed2 <_ZN8touchgfx7Outline10renderLineEiiii+0x7a2>
 8021e30:	9902      	ldr	r1, [sp, #8]
 8021e32:	1ac9      	subs	r1, r1, r3
 8021e34:	448c      	add	ip, r1
 8021e36:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
 8021e3a:	fb9c fef7 	sdiv	lr, ip, r7
 8021e3e:	fb07 cc1e 	mls	ip, r7, lr, ip
 8021e42:	f1bc 0f00 	cmp.w	ip, #0
 8021e46:	bfb8      	it	lt
 8021e48:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 8021e4c:	eba2 0207 	sub.w	r2, r2, r7
 8021e50:	f10e 0101 	add.w	r1, lr, #1
 8021e54:	bfb8      	it	lt
 8021e56:	44bc      	addlt	ip, r7
 8021e58:	9200      	str	r2, [sp, #0]
 8021e5a:	910d      	str	r1, [sp, #52]	; 0x34
 8021e5c:	9a00      	ldr	r2, [sp, #0]
 8021e5e:	8b20      	ldrh	r0, [r4, #24]
 8021e60:	8b61      	ldrh	r1, [r4, #26]
 8021e62:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 8021e66:	eb12 020c 	adds.w	r2, r2, ip
 8021e6a:	9200      	str	r2, [sp, #0]
 8021e6c:	bf5e      	ittt	pl
 8021e6e:	1bd2      	subpl	r2, r2, r7
 8021e70:	f8dd 8034 	ldrpl.w	r8, [sp, #52]	; 0x34
 8021e74:	9200      	strpl	r2, [sp, #0]
 8021e76:	9a07      	ldr	r2, [sp, #28]
 8021e78:	bf48      	it	mi
 8021e7a:	46f0      	movmi	r8, lr
 8021e7c:	4440      	add	r0, r8
 8021e7e:	eb01 1148 	add.w	r1, r1, r8, lsl #5
 8021e82:	4415      	add	r5, r2
 8021e84:	4443      	add	r3, r8
 8021e86:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021e88:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 8021e8c:	442a      	add	r2, r5
 8021e8e:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 8021e92:	b200      	sxth	r0, r0
 8021e94:	b209      	sxth	r1, r1
 8021e96:	454a      	cmp	r2, r9
 8021e98:	8320      	strh	r0, [r4, #24]
 8021e9a:	8361      	strh	r1, [r4, #26]
 8021e9c:	d016      	beq.n	8021ecc <_ZN8touchgfx7Outline10renderLineEiiii+0x79c>
 8021e9e:	ea50 0201 	orrs.w	r2, r0, r1
 8021ea2:	d00d      	beq.n	8021ec0 <_ZN8touchgfx7Outline10renderLineEiiii+0x790>
 8021ea4:	f1b8 0f00 	cmp.w	r8, #0
 8021ea8:	db0a      	blt.n	8021ec0 <_ZN8touchgfx7Outline10renderLineEiiii+0x790>
 8021eaa:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8021eac:	4541      	cmp	r1, r8
 8021eae:	dd07      	ble.n	8021ec0 <_ZN8touchgfx7Outline10renderLineEiiii+0x790>
 8021eb0:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8021eb4:	4288      	cmp	r0, r1
 8021eb6:	d330      	bcc.n	8021f1a <_ZN8touchgfx7Outline10renderLineEiiii+0x7ea>
 8021eb8:	f04f 0201 	mov.w	r2, #1
 8021ebc:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8021ec0:	f04f 0200 	mov.w	r2, #0
 8021ec4:	82a5      	strh	r5, [r4, #20]
 8021ec6:	82e6      	strh	r6, [r4, #22]
 8021ec8:	8322      	strh	r2, [r4, #24]
 8021eca:	8362      	strh	r2, [r4, #26]
 8021ecc:	9904      	ldr	r1, [sp, #16]
 8021ece:	42a9      	cmp	r1, r5
 8021ed0:	d1c4      	bne.n	8021e5c <_ZN8touchgfx7Outline10renderLineEiiii+0x72c>
 8021ed2:	9a02      	ldr	r2, [sp, #8]
 8021ed4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8021ed6:	1ad3      	subs	r3, r2, r3
 8021ed8:	8b22      	ldrh	r2, [r4, #24]
 8021eda:	441a      	add	r2, r3
 8021edc:	8322      	strh	r2, [r4, #24]
 8021ede:	9a06      	ldr	r2, [sp, #24]
 8021ee0:	3120      	adds	r1, #32
 8021ee2:	1a89      	subs	r1, r1, r2
 8021ee4:	8b62      	ldrh	r2, [r4, #26]
 8021ee6:	fb03 2301 	mla	r3, r3, r1, r2
 8021eea:	e649      	b.n	8021b80 <_ZN8touchgfx7Outline10renderLineEiiii+0x450>
 8021eec:	f04f 33ff 	mov.w	r3, #4294967295
 8021ef0:	9307      	str	r3, [sp, #28]
 8021ef2:	434a      	muls	r2, r1
 8021ef4:	427f      	negs	r7, r7
 8021ef6:	2300      	movs	r3, #0
 8021ef8:	e763      	b.n	8021dc2 <_ZN8touchgfx7Outline10renderLineEiiii+0x692>
 8021efa:	f104 0314 	add.w	r3, r4, #20
 8021efe:	cb03      	ldmia	r3!, {r0, r1}
 8021f00:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8021f04:	f8c8 0000 	str.w	r0, [r8]
 8021f08:	f8c8 1004 	str.w	r1, [r8, #4]
 8021f0c:	6923      	ldr	r3, [r4, #16]
 8021f0e:	3308      	adds	r3, #8
 8021f10:	6123      	str	r3, [r4, #16]
 8021f12:	68a3      	ldr	r3, [r4, #8]
 8021f14:	3301      	adds	r3, #1
 8021f16:	60a3      	str	r3, [r4, #8]
 8021f18:	e780      	b.n	8021e1c <_ZN8touchgfx7Outline10renderLineEiiii+0x6ec>
 8021f1a:	f104 0814 	add.w	r8, r4, #20
 8021f1e:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 8021f22:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8021f26:	f8c9 0000 	str.w	r0, [r9]
 8021f2a:	f8c9 1004 	str.w	r1, [r9, #4]
 8021f2e:	6921      	ldr	r1, [r4, #16]
 8021f30:	3108      	adds	r1, #8
 8021f32:	6121      	str	r1, [r4, #16]
 8021f34:	68a1      	ldr	r1, [r4, #8]
 8021f36:	3101      	adds	r1, #1
 8021f38:	60a1      	str	r1, [r4, #8]
 8021f3a:	e7c1      	b.n	8021ec0 <_ZN8touchgfx7Outline10renderLineEiiii+0x790>
 8021f3c:	f104 0314 	add.w	r3, r4, #20
 8021f40:	cb03      	ldmia	r3!, {r0, r1}
 8021f42:	6925      	ldr	r5, [r4, #16]
 8021f44:	6028      	str	r0, [r5, #0]
 8021f46:	6069      	str	r1, [r5, #4]
 8021f48:	6923      	ldr	r3, [r4, #16]
 8021f4a:	3308      	adds	r3, #8
 8021f4c:	6123      	str	r3, [r4, #16]
 8021f4e:	68a3      	ldr	r3, [r4, #8]
 8021f50:	3301      	adds	r3, #1
 8021f52:	60a3      	str	r3, [r4, #8]
 8021f54:	e665      	b.n	8021c22 <_ZN8touchgfx7Outline10renderLineEiiii+0x4f2>
 8021f56:	f104 0314 	add.w	r3, r4, #20
 8021f5a:	cb03      	ldmia	r3!, {r0, r1}
 8021f5c:	6925      	ldr	r5, [r4, #16]
 8021f5e:	6028      	str	r0, [r5, #0]
 8021f60:	6069      	str	r1, [r5, #4]
 8021f62:	6923      	ldr	r3, [r4, #16]
 8021f64:	3308      	adds	r3, #8
 8021f66:	6123      	str	r3, [r4, #16]
 8021f68:	68a3      	ldr	r3, [r4, #8]
 8021f6a:	3301      	adds	r3, #1
 8021f6c:	60a3      	str	r3, [r4, #8]
 8021f6e:	e6b9      	b.n	8021ce4 <_ZN8touchgfx7Outline10renderLineEiiii+0x5b4>
 8021f70:	f00b 031f 	and.w	r3, fp, #31
 8021f74:	930f      	str	r3, [sp, #60]	; 0x3c
 8021f76:	9b04      	ldr	r3, [sp, #16]
 8021f78:	8b20      	ldrh	r0, [r4, #24]
 8021f7a:	f8b4 901a 	ldrh.w	r9, [r4, #26]
 8021f7e:	114f      	asrs	r7, r1, #5
 8021f80:	429f      	cmp	r7, r3
 8021f82:	f001 011f 	and.w	r1, r1, #31
 8021f86:	d10a      	bne.n	8021f9e <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 8021f88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021f8a:	4418      	add	r0, r3
 8021f8c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8021f8e:	8320      	strh	r0, [r4, #24]
 8021f90:	4419      	add	r1, r3
 8021f92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021f94:	fb03 9901 	mla	r9, r3, r1, r9
 8021f98:	f8a4 901a 	strh.w	r9, [r4, #26]
 8021f9c:	e6aa      	b.n	8021cf4 <_ZN8touchgfx7Outline10renderLineEiiii+0x5c4>
 8021f9e:	2d00      	cmp	r5, #0
 8021fa0:	f2c0 809f 	blt.w	80220e2 <_ZN8touchgfx7Outline10renderLineEiiii+0x9b2>
 8021fa4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8021fa6:	f1c1 0320 	rsb	r3, r1, #32
 8021faa:	4373      	muls	r3, r6
 8021fac:	2601      	movs	r6, #1
 8021fae:	960e      	str	r6, [sp, #56]	; 0x38
 8021fb0:	2620      	movs	r6, #32
 8021fb2:	960d      	str	r6, [sp, #52]	; 0x34
 8021fb4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8021fb6:	fb93 f6f5 	sdiv	r6, r3, r5
 8021fba:	4411      	add	r1, r2
 8021fbc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8021fbe:	fb05 3316 	mls	r3, r5, r6, r3
 8021fc2:	4417      	add	r7, r2
 8021fc4:	9a00      	ldr	r2, [sp, #0]
 8021fc6:	2b00      	cmp	r3, #0
 8021fc8:	bfb8      	it	lt
 8021fca:	f106 36ff 	addlt.w	r6, r6, #4294967295
 8021fce:	ea4f 4202 	mov.w	r2, r2, lsl #16
 8021fd2:	fb06 9101 	mla	r1, r6, r1, r9
 8021fd6:	4430      	add	r0, r6
 8021fd8:	eb07 0902 	add.w	r9, r7, r2
 8021fdc:	bfb8      	it	lt
 8021fde:	195b      	addlt	r3, r3, r5
 8021fe0:	b200      	sxth	r0, r0
 8021fe2:	b209      	sxth	r1, r1
 8021fe4:	45c1      	cmp	r9, r8
 8021fe6:	8320      	strh	r0, [r4, #24]
 8021fe8:	8361      	strh	r1, [r4, #26]
 8021fea:	9210      	str	r2, [sp, #64]	; 0x40
 8021fec:	d017      	beq.n	802201e <_ZN8touchgfx7Outline10renderLineEiiii+0x8ee>
 8021fee:	ea50 0201 	orrs.w	r2, r0, r1
 8021ff2:	d00d      	beq.n	8022010 <_ZN8touchgfx7Outline10renderLineEiiii+0x8e0>
 8021ff4:	f1be 0f00 	cmp.w	lr, #0
 8021ff8:	db0a      	blt.n	8022010 <_ZN8touchgfx7Outline10renderLineEiiii+0x8e0>
 8021ffa:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8021ffc:	4571      	cmp	r1, lr
 8021ffe:	dd07      	ble.n	8022010 <_ZN8touchgfx7Outline10renderLineEiiii+0x8e0>
 8022000:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8022004:	4288      	cmp	r0, r1
 8022006:	d374      	bcc.n	80220f2 <_ZN8touchgfx7Outline10renderLineEiiii+0x9c2>
 8022008:	f04f 0201 	mov.w	r2, #1
 802200c:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8022010:	9a00      	ldr	r2, [sp, #0]
 8022012:	82a7      	strh	r7, [r4, #20]
 8022014:	82e2      	strh	r2, [r4, #22]
 8022016:	f8a4 c018 	strh.w	ip, [r4, #24]
 802201a:	f8a4 c01a 	strh.w	ip, [r4, #26]
 802201e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022020:	eb02 0e06 	add.w	lr, r2, r6
 8022024:	9a04      	ldr	r2, [sp, #16]
 8022026:	42ba      	cmp	r2, r7
 8022028:	d04b      	beq.n	80220c2 <_ZN8touchgfx7Outline10renderLineEiiii+0x992>
 802202a:	9a02      	ldr	r2, [sp, #8]
 802202c:	eba2 010e 	sub.w	r1, r2, lr
 8022030:	440e      	add	r6, r1
 8022032:	0176      	lsls	r6, r6, #5
 8022034:	fb96 f8f5 	sdiv	r8, r6, r5
 8022038:	fb05 6618 	mls	r6, r5, r8, r6
 802203c:	2e00      	cmp	r6, #0
 802203e:	bfb8      	it	lt
 8022040:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8022044:	f108 0201 	add.w	r2, r8, #1
 8022048:	bfb8      	it	lt
 802204a:	1976      	addlt	r6, r6, r5
 802204c:	1b5b      	subs	r3, r3, r5
 802204e:	9211      	str	r2, [sp, #68]	; 0x44
 8022050:	199b      	adds	r3, r3, r6
 8022052:	bf58      	it	pl
 8022054:	f8dd 9044 	ldrpl.w	r9, [sp, #68]	; 0x44
 8022058:	8b20      	ldrh	r0, [r4, #24]
 802205a:	8b61      	ldrh	r1, [r4, #26]
 802205c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802205e:	f9b4 a014 	ldrsh.w	sl, [r4, #20]
 8022062:	bf48      	it	mi
 8022064:	46c1      	movmi	r9, r8
 8022066:	4448      	add	r0, r9
 8022068:	eb01 1149 	add.w	r1, r1, r9, lsl #5
 802206c:	4417      	add	r7, r2
 802206e:	44ce      	add	lr, r9
 8022070:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8022072:	f9b4 9016 	ldrsh.w	r9, [r4, #22]
 8022076:	443a      	add	r2, r7
 8022078:	eb0a 4a09 	add.w	sl, sl, r9, lsl #16
 802207c:	bf58      	it	pl
 802207e:	1b5b      	subpl	r3, r3, r5
 8022080:	b200      	sxth	r0, r0
 8022082:	b209      	sxth	r1, r1
 8022084:	4552      	cmp	r2, sl
 8022086:	8320      	strh	r0, [r4, #24]
 8022088:	8361      	strh	r1, [r4, #26]
 802208a:	d017      	beq.n	80220bc <_ZN8touchgfx7Outline10renderLineEiiii+0x98c>
 802208c:	ea50 0201 	orrs.w	r2, r0, r1
 8022090:	d00d      	beq.n	80220ae <_ZN8touchgfx7Outline10renderLineEiiii+0x97e>
 8022092:	f1b9 0f00 	cmp.w	r9, #0
 8022096:	db0a      	blt.n	80220ae <_ZN8touchgfx7Outline10renderLineEiiii+0x97e>
 8022098:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802209a:	4549      	cmp	r1, r9
 802209c:	dd07      	ble.n	80220ae <_ZN8touchgfx7Outline10renderLineEiiii+0x97e>
 802209e:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 80220a2:	4288      	cmp	r0, r1
 80220a4:	d336      	bcc.n	8022114 <_ZN8touchgfx7Outline10renderLineEiiii+0x9e4>
 80220a6:	f04f 0201 	mov.w	r2, #1
 80220aa:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 80220ae:	9a00      	ldr	r2, [sp, #0]
 80220b0:	82a7      	strh	r7, [r4, #20]
 80220b2:	82e2      	strh	r2, [r4, #22]
 80220b4:	f8a4 c018 	strh.w	ip, [r4, #24]
 80220b8:	f8a4 c01a 	strh.w	ip, [r4, #26]
 80220bc:	9a04      	ldr	r2, [sp, #16]
 80220be:	42ba      	cmp	r2, r7
 80220c0:	d1c6      	bne.n	8022050 <_ZN8touchgfx7Outline10renderLineEiiii+0x920>
 80220c2:	9b02      	ldr	r3, [sp, #8]
 80220c4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80220c6:	eba3 0e0e 	sub.w	lr, r3, lr
 80220ca:	8b23      	ldrh	r3, [r4, #24]
 80220cc:	4473      	add	r3, lr
 80220ce:	8323      	strh	r3, [r4, #24]
 80220d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80220d2:	3120      	adds	r1, #32
 80220d4:	1ac9      	subs	r1, r1, r3
 80220d6:	8b63      	ldrh	r3, [r4, #26]
 80220d8:	fb0e 3e01 	mla	lr, lr, r1, r3
 80220dc:	f8a4 e01a 	strh.w	lr, [r4, #26]
 80220e0:	e608      	b.n	8021cf4 <_ZN8touchgfx7Outline10renderLineEiiii+0x5c4>
 80220e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80220e4:	f04f 36ff 	mov.w	r6, #4294967295
 80220e8:	960e      	str	r6, [sp, #56]	; 0x38
 80220ea:	434b      	muls	r3, r1
 80220ec:	426d      	negs	r5, r5
 80220ee:	2600      	movs	r6, #0
 80220f0:	e75f      	b.n	8021fb2 <_ZN8touchgfx7Outline10renderLineEiiii+0x882>
 80220f2:	f104 0e14 	add.w	lr, r4, #20
 80220f6:	e8be 0003 	ldmia.w	lr!, {r0, r1}
 80220fa:	f8d4 8010 	ldr.w	r8, [r4, #16]
 80220fe:	f8c8 0000 	str.w	r0, [r8]
 8022102:	f8c8 1004 	str.w	r1, [r8, #4]
 8022106:	6921      	ldr	r1, [r4, #16]
 8022108:	3108      	adds	r1, #8
 802210a:	6121      	str	r1, [r4, #16]
 802210c:	68a1      	ldr	r1, [r4, #8]
 802210e:	3101      	adds	r1, #1
 8022110:	60a1      	str	r1, [r4, #8]
 8022112:	e77d      	b.n	8022010 <_ZN8touchgfx7Outline10renderLineEiiii+0x8e0>
 8022114:	f104 0914 	add.w	r9, r4, #20
 8022118:	e8b9 0003 	ldmia.w	r9!, {r0, r1}
 802211c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8022120:	f8ca 0000 	str.w	r0, [sl]
 8022124:	f8ca 1004 	str.w	r1, [sl, #4]
 8022128:	6921      	ldr	r1, [r4, #16]
 802212a:	3108      	adds	r1, #8
 802212c:	6121      	str	r1, [r4, #16]
 802212e:	68a1      	ldr	r1, [r4, #8]
 8022130:	3101      	adds	r1, #1
 8022132:	60a1      	str	r1, [r4, #8]
 8022134:	e7bb      	b.n	80220ae <_ZN8touchgfx7Outline10renderLineEiiii+0x97e>
 8022136:	f104 0314 	add.w	r3, r4, #20
 802213a:	cb03      	ldmia	r3!, {r0, r1}
 802213c:	6925      	ldr	r5, [r4, #16]
 802213e:	6028      	str	r0, [r5, #0]
 8022140:	6069      	str	r1, [r5, #4]
 8022142:	6923      	ldr	r3, [r4, #16]
 8022144:	3308      	adds	r3, #8
 8022146:	6123      	str	r3, [r4, #16]
 8022148:	68a3      	ldr	r3, [r4, #8]
 802214a:	3301      	adds	r3, #1
 802214c:	60a3      	str	r3, [r4, #8]
 802214e:	e5f4      	b.n	8021d3a <_ZN8touchgfx7Outline10renderLineEiiii+0x60a>
 8022150:	f104 0314 	add.w	r3, r4, #20
 8022154:	cb03      	ldmia	r3!, {r0, r1}
 8022156:	6925      	ldr	r5, [r4, #16]
 8022158:	6028      	str	r0, [r5, #0]
 802215a:	6069      	str	r1, [r5, #4]
 802215c:	6923      	ldr	r3, [r4, #16]
 802215e:	3308      	adds	r3, #8
 8022160:	6123      	str	r3, [r4, #16]
 8022162:	68a3      	ldr	r3, [r4, #8]
 8022164:	3301      	adds	r3, #1
 8022166:	60a3      	str	r3, [r4, #8]
 8022168:	e61c      	b.n	8021da4 <_ZN8touchgfx7Outline10renderLineEiiii+0x674>
 802216a:	9b05      	ldr	r3, [sp, #20]
 802216c:	8b20      	ldrh	r0, [r4, #24]
 802216e:	f8b4 901a 	ldrh.w	r9, [r4, #26]
 8022172:	f003 031f 	and.w	r3, r3, #31
 8022176:	ea4f 176b 	mov.w	r7, fp, asr #5
 802217a:	9302      	str	r3, [sp, #8]
 802217c:	9b03      	ldr	r3, [sp, #12]
 802217e:	4577      	cmp	r7, lr
 8022180:	f00b 081f 	and.w	r8, fp, #31
 8022184:	eba3 050c 	sub.w	r5, r3, ip
 8022188:	d108      	bne.n	802219c <_ZN8touchgfx7Outline10renderLineEiiii+0xa6c>
 802218a:	9b02      	ldr	r3, [sp, #8]
 802218c:	4498      	add	r8, r3
 802218e:	4428      	add	r0, r5
 8022190:	fb05 9508 	mla	r5, r5, r8, r9
 8022194:	8320      	strh	r0, [r4, #24]
 8022196:	8365      	strh	r5, [r4, #26]
 8022198:	f7ff bb3f 	b.w	802181a <_ZN8touchgfx7Outline10renderLineEiiii+0xea>
 802219c:	9b05      	ldr	r3, [sp, #20]
 802219e:	ebb3 030b 	subs.w	r3, r3, fp
 80221a2:	f100 809f 	bmi.w	80222e4 <_ZN8touchgfx7Outline10renderLineEiiii+0xbb4>
 80221a6:	f1c8 0120 	rsb	r1, r8, #32
 80221aa:	2201      	movs	r2, #1
 80221ac:	434d      	muls	r5, r1
 80221ae:	9201      	str	r2, [sp, #4]
 80221b0:	f04f 0b20 	mov.w	fp, #32
 80221b4:	fb95 f6f3 	sdiv	r6, r5, r3
 80221b8:	fb03 5516 	mls	r5, r3, r6, r5
 80221bc:	2d00      	cmp	r5, #0
 80221be:	9a01      	ldr	r2, [sp, #4]
 80221c0:	bfb8      	it	lt
 80221c2:	f106 36ff 	addlt.w	r6, r6, #4294967295
 80221c6:	44d8      	add	r8, fp
 80221c8:	fb06 9808 	mla	r8, r6, r8, r9
 80221cc:	4417      	add	r7, r2
 80221ce:	9a00      	ldr	r2, [sp, #0]
 80221d0:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 80221d4:	fa0f f188 	sxth.w	r1, r8
 80221d8:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 80221dc:	8361      	strh	r1, [r4, #26]
 80221de:	ea4f 4202 	mov.w	r2, r2, lsl #16
 80221e2:	4430      	add	r0, r6
 80221e4:	eb07 0a02 	add.w	sl, r7, r2
 80221e8:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 80221ec:	bfb8      	it	lt
 80221ee:	18ed      	addlt	r5, r5, r3
 80221f0:	b200      	sxth	r0, r0
 80221f2:	45ca      	cmp	sl, r9
 80221f4:	8320      	strh	r0, [r4, #24]
 80221f6:	9204      	str	r2, [sp, #16]
 80221f8:	d015      	beq.n	8022226 <_ZN8touchgfx7Outline10renderLineEiiii+0xaf6>
 80221fa:	ea50 0201 	orrs.w	r2, r0, r1
 80221fe:	d00c      	beq.n	802221a <_ZN8touchgfx7Outline10renderLineEiiii+0xaea>
 8022200:	f1b8 0f00 	cmp.w	r8, #0
 8022204:	db09      	blt.n	802221a <_ZN8touchgfx7Outline10renderLineEiiii+0xaea>
 8022206:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8022208:	4541      	cmp	r1, r8
 802220a:	dd06      	ble.n	802221a <_ZN8touchgfx7Outline10renderLineEiiii+0xaea>
 802220c:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8022210:	4288      	cmp	r0, r1
 8022212:	d370      	bcc.n	80222f6 <_ZN8touchgfx7Outline10renderLineEiiii+0xbc6>
 8022214:	2101      	movs	r1, #1
 8022216:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 802221a:	2100      	movs	r1, #0
 802221c:	9a00      	ldr	r2, [sp, #0]
 802221e:	82a7      	strh	r7, [r4, #20]
 8022220:	82e2      	strh	r2, [r4, #22]
 8022222:	8321      	strh	r1, [r4, #24]
 8022224:	8361      	strh	r1, [r4, #26]
 8022226:	45be      	cmp	lr, r7
 8022228:	44b4      	add	ip, r6
 802222a:	d04a      	beq.n	80222c2 <_ZN8touchgfx7Outline10renderLineEiiii+0xb92>
 802222c:	9a03      	ldr	r2, [sp, #12]
 802222e:	eba2 010c 	sub.w	r1, r2, ip
 8022232:	440e      	add	r6, r1
 8022234:	0176      	lsls	r6, r6, #5
 8022236:	fb96 f8f3 	sdiv	r8, r6, r3
 802223a:	fb03 6618 	mls	r6, r3, r8, r6
 802223e:	2e00      	cmp	r6, #0
 8022240:	bfb8      	it	lt
 8022242:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8022246:	f108 0201 	add.w	r2, r8, #1
 802224a:	bfb8      	it	lt
 802224c:	18f6      	addlt	r6, r6, r3
 802224e:	1aed      	subs	r5, r5, r3
 8022250:	9205      	str	r2, [sp, #20]
 8022252:	19ad      	adds	r5, r5, r6
 8022254:	bf58      	it	pl
 8022256:	f8dd 9014 	ldrpl.w	r9, [sp, #20]
 802225a:	8b20      	ldrh	r0, [r4, #24]
 802225c:	8b61      	ldrh	r1, [r4, #26]
 802225e:	9a01      	ldr	r2, [sp, #4]
 8022260:	f9b4 a014 	ldrsh.w	sl, [r4, #20]
 8022264:	bf48      	it	mi
 8022266:	46c1      	movmi	r9, r8
 8022268:	4448      	add	r0, r9
 802226a:	eb01 1149 	add.w	r1, r1, r9, lsl #5
 802226e:	4417      	add	r7, r2
 8022270:	44cc      	add	ip, r9
 8022272:	9a04      	ldr	r2, [sp, #16]
 8022274:	f9b4 9016 	ldrsh.w	r9, [r4, #22]
 8022278:	443a      	add	r2, r7
 802227a:	eb0a 4a09 	add.w	sl, sl, r9, lsl #16
 802227e:	bf58      	it	pl
 8022280:	1aed      	subpl	r5, r5, r3
 8022282:	b200      	sxth	r0, r0
 8022284:	b209      	sxth	r1, r1
 8022286:	4552      	cmp	r2, sl
 8022288:	8320      	strh	r0, [r4, #24]
 802228a:	8361      	strh	r1, [r4, #26]
 802228c:	d017      	beq.n	80222be <_ZN8touchgfx7Outline10renderLineEiiii+0xb8e>
 802228e:	ea50 0201 	orrs.w	r2, r0, r1
 8022292:	d00d      	beq.n	80222b0 <_ZN8touchgfx7Outline10renderLineEiiii+0xb80>
 8022294:	f1b9 0f00 	cmp.w	r9, #0
 8022298:	db0a      	blt.n	80222b0 <_ZN8touchgfx7Outline10renderLineEiiii+0xb80>
 802229a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802229c:	4549      	cmp	r1, r9
 802229e:	dd07      	ble.n	80222b0 <_ZN8touchgfx7Outline10renderLineEiiii+0xb80>
 80222a0:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 80222a4:	4288      	cmp	r0, r1
 80222a6:	d337      	bcc.n	8022318 <_ZN8touchgfx7Outline10renderLineEiiii+0xbe8>
 80222a8:	f04f 0201 	mov.w	r2, #1
 80222ac:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 80222b0:	9a00      	ldr	r2, [sp, #0]
 80222b2:	82e2      	strh	r2, [r4, #22]
 80222b4:	f04f 0200 	mov.w	r2, #0
 80222b8:	82a7      	strh	r7, [r4, #20]
 80222ba:	8322      	strh	r2, [r4, #24]
 80222bc:	8362      	strh	r2, [r4, #26]
 80222be:	45be      	cmp	lr, r7
 80222c0:	d1c7      	bne.n	8022252 <_ZN8touchgfx7Outline10renderLineEiiii+0xb22>
 80222c2:	9b03      	ldr	r3, [sp, #12]
 80222c4:	8b62      	ldrh	r2, [r4, #26]
 80222c6:	eba3 0c0c 	sub.w	ip, r3, ip
 80222ca:	8b23      	ldrh	r3, [r4, #24]
 80222cc:	4463      	add	r3, ip
 80222ce:	8323      	strh	r3, [r4, #24]
 80222d0:	9b02      	ldr	r3, [sp, #8]
 80222d2:	3320      	adds	r3, #32
 80222d4:	eba3 030b 	sub.w	r3, r3, fp
 80222d8:	fb0c 2c03 	mla	ip, ip, r3, r2
 80222dc:	f8a4 c01a 	strh.w	ip, [r4, #26]
 80222e0:	f7ff ba9b 	b.w	802181a <_ZN8touchgfx7Outline10renderLineEiiii+0xea>
 80222e4:	f04f 32ff 	mov.w	r2, #4294967295
 80222e8:	fb05 f508 	mul.w	r5, r5, r8
 80222ec:	425b      	negs	r3, r3
 80222ee:	9201      	str	r2, [sp, #4]
 80222f0:	f04f 0b00 	mov.w	fp, #0
 80222f4:	e75e      	b.n	80221b4 <_ZN8touchgfx7Outline10renderLineEiiii+0xa84>
 80222f6:	f104 0814 	add.w	r8, r4, #20
 80222fa:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 80222fe:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8022302:	f8c9 0000 	str.w	r0, [r9]
 8022306:	f8c9 1004 	str.w	r1, [r9, #4]
 802230a:	6921      	ldr	r1, [r4, #16]
 802230c:	3108      	adds	r1, #8
 802230e:	6121      	str	r1, [r4, #16]
 8022310:	68a1      	ldr	r1, [r4, #8]
 8022312:	3101      	adds	r1, #1
 8022314:	60a1      	str	r1, [r4, #8]
 8022316:	e780      	b.n	802221a <_ZN8touchgfx7Outline10renderLineEiiii+0xaea>
 8022318:	f104 0914 	add.w	r9, r4, #20
 802231c:	e8b9 0003 	ldmia.w	r9!, {r0, r1}
 8022320:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8022324:	f8ca 0000 	str.w	r0, [sl]
 8022328:	f8ca 1004 	str.w	r1, [sl, #4]
 802232c:	6921      	ldr	r1, [r4, #16]
 802232e:	3108      	adds	r1, #8
 8022330:	6121      	str	r1, [r4, #16]
 8022332:	68a1      	ldr	r1, [r4, #8]
 8022334:	3101      	adds	r1, #1
 8022336:	60a1      	str	r1, [r4, #8]
 8022338:	e7ba      	b.n	80222b0 <_ZN8touchgfx7Outline10renderLineEiiii+0xb80>

0802233a <_ZN8touchgfx7Outline6lineToEii>:
 802233a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802233c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 802233e:	079b      	lsls	r3, r3, #30
 8022340:	4604      	mov	r4, r0
 8022342:	460d      	mov	r5, r1
 8022344:	4616      	mov	r6, r2
 8022346:	d526      	bpl.n	8022396 <_ZN8touchgfx7Outline6lineToEii+0x5c>
 8022348:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 802234c:	ea85 0001 	eor.w	r0, r5, r1
 8022350:	ea86 0302 	eor.w	r3, r6, r2
 8022354:	4303      	orrs	r3, r0
 8022356:	d01e      	beq.n	8022396 <_ZN8touchgfx7Outline6lineToEii+0x5c>
 8022358:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 802235a:	9600      	str	r6, [sp, #0]
 802235c:	114b      	asrs	r3, r1, #5
 802235e:	4283      	cmp	r3, r0
 8022360:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8022362:	bfb8      	it	lt
 8022364:	62e3      	strlt	r3, [r4, #44]	; 0x2c
 8022366:	3301      	adds	r3, #1
 8022368:	4283      	cmp	r3, r0
 802236a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 802236c:	bfc8      	it	gt
 802236e:	6363      	strgt	r3, [r4, #52]	; 0x34
 8022370:	116b      	asrs	r3, r5, #5
 8022372:	4283      	cmp	r3, r0
 8022374:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8022376:	bfb8      	it	lt
 8022378:	62e3      	strlt	r3, [r4, #44]	; 0x2c
 802237a:	3301      	adds	r3, #1
 802237c:	4283      	cmp	r3, r0
 802237e:	bfc8      	it	gt
 8022380:	6363      	strgt	r3, [r4, #52]	; 0x34
 8022382:	4620      	mov	r0, r4
 8022384:	462b      	mov	r3, r5
 8022386:	f7ff f9d3 	bl	8021730 <_ZN8touchgfx7Outline10renderLineEiiii>
 802238a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802238c:	e9c4 5607 	strd	r5, r6, [r4, #28]
 8022390:	f043 0301 	orr.w	r3, r3, #1
 8022394:	63e3      	str	r3, [r4, #60]	; 0x3c
 8022396:	b002      	add	sp, #8
 8022398:	bd70      	pop	{r4, r5, r6, pc}

0802239a <_ZN8touchgfx7Outline6moveToEii>:
 802239a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802239c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 802239e:	4615      	mov	r5, r2
 80223a0:	079a      	lsls	r2, r3, #30
 80223a2:	4604      	mov	r4, r0
 80223a4:	460e      	mov	r6, r1
 80223a6:	d401      	bmi.n	80223ac <_ZN8touchgfx7Outline6moveToEii+0x12>
 80223a8:	f7ff f97c 	bl	80216a4 <_ZN8touchgfx7Outline5resetEv>
 80223ac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80223ae:	07db      	lsls	r3, r3, #31
 80223b0:	d504      	bpl.n	80223bc <_ZN8touchgfx7Outline6moveToEii+0x22>
 80223b2:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	; 0x24
 80223b6:	4620      	mov	r0, r4
 80223b8:	f7ff ffbf 	bl	802233a <_ZN8touchgfx7Outline6lineToEii>
 80223bc:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 80223c0:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 80223c4:	ea4f 1c66 	mov.w	ip, r6, asr #5
 80223c8:	116f      	asrs	r7, r5, #5
 80223ca:	eb0c 4107 	add.w	r1, ip, r7, lsl #16
 80223ce:	eb02 4203 	add.w	r2, r2, r3, lsl #16
 80223d2:	4291      	cmp	r1, r2
 80223d4:	d015      	beq.n	8022402 <_ZN8touchgfx7Outline6moveToEii+0x68>
 80223d6:	8b61      	ldrh	r1, [r4, #26]
 80223d8:	8b22      	ldrh	r2, [r4, #24]
 80223da:	430a      	orrs	r2, r1
 80223dc:	d00b      	beq.n	80223f6 <_ZN8touchgfx7Outline6moveToEii+0x5c>
 80223de:	2b00      	cmp	r3, #0
 80223e0:	db09      	blt.n	80223f6 <_ZN8touchgfx7Outline6moveToEii+0x5c>
 80223e2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80223e4:	429a      	cmp	r2, r3
 80223e6:	dd06      	ble.n	80223f6 <_ZN8touchgfx7Outline6moveToEii+0x5c>
 80223e8:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 80223ec:	429a      	cmp	r2, r3
 80223ee:	d30d      	bcc.n	802240c <_ZN8touchgfx7Outline6moveToEii+0x72>
 80223f0:	2301      	movs	r3, #1
 80223f2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80223f6:	2300      	movs	r3, #0
 80223f8:	f8a4 c014 	strh.w	ip, [r4, #20]
 80223fc:	82e7      	strh	r7, [r4, #22]
 80223fe:	8323      	strh	r3, [r4, #24]
 8022400:	8363      	strh	r3, [r4, #26]
 8022402:	61e6      	str	r6, [r4, #28]
 8022404:	e9c4 5608 	strd	r5, r6, [r4, #32]
 8022408:	62a5      	str	r5, [r4, #40]	; 0x28
 802240a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802240c:	f104 0314 	add.w	r3, r4, #20
 8022410:	cb03      	ldmia	r3!, {r0, r1}
 8022412:	6922      	ldr	r2, [r4, #16]
 8022414:	6010      	str	r0, [r2, #0]
 8022416:	6051      	str	r1, [r2, #4]
 8022418:	6923      	ldr	r3, [r4, #16]
 802241a:	3308      	adds	r3, #8
 802241c:	6123      	str	r3, [r4, #16]
 802241e:	68a3      	ldr	r3, [r4, #8]
 8022420:	3301      	adds	r3, #1
 8022422:	60a3      	str	r3, [r4, #8]
 8022424:	e7e7      	b.n	80223f6 <_ZN8touchgfx7Outline6moveToEii+0x5c>

08022426 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 8022426:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802242a:	b0d1      	sub	sp, #324	; 0x144
 802242c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8022430:	466c      	mov	r4, sp
 8022432:	1a0d      	subs	r5, r1, r0
 8022434:	2d48      	cmp	r5, #72	; 0x48
 8022436:	f100 0208 	add.w	r2, r0, #8
 802243a:	f340 80bb 	ble.w	80225b4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x18e>
 802243e:	112d      	asrs	r5, r5, #4
 8022440:	eb00 03c5 	add.w	r3, r0, r5, lsl #3
 8022444:	f9b0 e002 	ldrsh.w	lr, [r0, #2]
 8022448:	681e      	ldr	r6, [r3, #0]
 802244a:	f9b0 8000 	ldrsh.w	r8, [r0]
 802244e:	6006      	str	r6, [r0, #0]
 8022450:	685e      	ldr	r6, [r3, #4]
 8022452:	f9b0 c004 	ldrsh.w	ip, [r0, #4]
 8022456:	f9b0 7006 	ldrsh.w	r7, [r0, #6]
 802245a:	6046      	str	r6, [r0, #4]
 802245c:	f820 8035 	strh.w	r8, [r0, r5, lsl #3]
 8022460:	f8a3 c004 	strh.w	ip, [r3, #4]
 8022464:	f8a3 e002 	strh.w	lr, [r3, #2]
 8022468:	80df      	strh	r7, [r3, #6]
 802246a:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
 802246e:	f9b0 600a 	ldrsh.w	r6, [r0, #10]
 8022472:	f931 ec06 	ldrsh.w	lr, [r1, #-6]
 8022476:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 802247a:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 802247e:	eb05 450e 	add.w	r5, r5, lr, lsl #16
 8022482:	45ac      	cmp	ip, r5
 8022484:	f1a1 0308 	sub.w	r3, r1, #8
 8022488:	dd0f      	ble.n	80224aa <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x84>
 802248a:	681d      	ldr	r5, [r3, #0]
 802248c:	f9b0 e00c 	ldrsh.w	lr, [r0, #12]
 8022490:	f9b0 c00e 	ldrsh.w	ip, [r0, #14]
 8022494:	6015      	str	r5, [r2, #0]
 8022496:	685d      	ldr	r5, [r3, #4]
 8022498:	6055      	str	r5, [r2, #4]
 802249a:	f821 7c08 	strh.w	r7, [r1, #-8]
 802249e:	f821 6c06 	strh.w	r6, [r1, #-6]
 80224a2:	f821 ec04 	strh.w	lr, [r1, #-4]
 80224a6:	f821 cc02 	strh.w	ip, [r1, #-2]
 80224aa:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
 80224ae:	f9b0 7000 	ldrsh.w	r7, [r0]
 80224b2:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 80224b6:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 80224ba:	eb05 450c 	add.w	r5, r5, ip, lsl #16
 80224be:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 80224c2:	4565      	cmp	r5, ip
 80224c4:	dd0d      	ble.n	80224e2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xbc>
 80224c6:	6815      	ldr	r5, [r2, #0]
 80224c8:	6005      	str	r5, [r0, #0]
 80224ca:	6855      	ldr	r5, [r2, #4]
 80224cc:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 80224d0:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 80224d4:	8107      	strh	r7, [r0, #8]
 80224d6:	6045      	str	r5, [r0, #4]
 80224d8:	8146      	strh	r6, [r0, #10]
 80224da:	f8a0 e00c 	strh.w	lr, [r0, #12]
 80224de:	f8a0 c00e 	strh.w	ip, [r0, #14]
 80224e2:	f9b0 7000 	ldrsh.w	r7, [r0]
 80224e6:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 80224ea:	f931 ec06 	ldrsh.w	lr, [r1, #-6]
 80224ee:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 80224f2:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 80224f6:	eb05 450e 	add.w	r5, r5, lr, lsl #16
 80224fa:	45ac      	cmp	ip, r5
 80224fc:	dd0f      	ble.n	802251e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xf8>
 80224fe:	681d      	ldr	r5, [r3, #0]
 8022500:	6005      	str	r5, [r0, #0]
 8022502:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8022506:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 802250a:	685d      	ldr	r5, [r3, #4]
 802250c:	6045      	str	r5, [r0, #4]
 802250e:	f821 7c08 	strh.w	r7, [r1, #-8]
 8022512:	f821 6c06 	strh.w	r6, [r1, #-6]
 8022516:	f821 ec04 	strh.w	lr, [r1, #-4]
 802251a:	f821 cc02 	strh.w	ip, [r1, #-2]
 802251e:	f9b2 9008 	ldrsh.w	r9, [r2, #8]
 8022522:	f9b2 800a 	ldrsh.w	r8, [r2, #10]
 8022526:	f9b0 e000 	ldrsh.w	lr, [r0]
 802252a:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 802252e:	eb09 4608 	add.w	r6, r9, r8, lsl #16
 8022532:	eb0e 4a0c 	add.w	sl, lr, ip, lsl #16
 8022536:	f102 0508 	add.w	r5, r2, #8
 802253a:	45b2      	cmp	sl, r6
 802253c:	462f      	mov	r7, r5
 802253e:	dc18      	bgt.n	8022572 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x14c>
 8022540:	3b08      	subs	r3, #8
 8022542:	f9b3 b002 	ldrsh.w	fp, [r3, #2]
 8022546:	f9b3 6000 	ldrsh.w	r6, [r3]
 802254a:	eb06 460b 	add.w	r6, r6, fp, lsl #16
 802254e:	45b2      	cmp	sl, r6
 8022550:	dbf6      	blt.n	8022540 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x11a>
 8022552:	42ab      	cmp	r3, r5
 8022554:	681e      	ldr	r6, [r3, #0]
 8022556:	d30e      	bcc.n	8022576 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x150>
 8022558:	f9b2 700c 	ldrsh.w	r7, [r2, #12]
 802255c:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 8022560:	602e      	str	r6, [r5, #0]
 8022562:	685e      	ldr	r6, [r3, #4]
 8022564:	606e      	str	r6, [r5, #4]
 8022566:	f8a3 9000 	strh.w	r9, [r3]
 802256a:	f8a3 8002 	strh.w	r8, [r3, #2]
 802256e:	809f      	strh	r7, [r3, #4]
 8022570:	80da      	strh	r2, [r3, #6]
 8022572:	462a      	mov	r2, r5
 8022574:	e7d3      	b.n	802251e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xf8>
 8022576:	6006      	str	r6, [r0, #0]
 8022578:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 802257c:	685e      	ldr	r6, [r3, #4]
 802257e:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 8022582:	6046      	str	r6, [r0, #4]
 8022584:	80da      	strh	r2, [r3, #6]
 8022586:	1b4a      	subs	r2, r1, r5
 8022588:	1a1e      	subs	r6, r3, r0
 802258a:	10d2      	asrs	r2, r2, #3
 802258c:	ebb2 0fe6 	cmp.w	r2, r6, asr #3
 8022590:	bfb8      	it	lt
 8022592:	e9c4 0300 	strdlt	r0, r3, [r4]
 8022596:	f8a3 e000 	strh.w	lr, [r3]
 802259a:	f8a3 c002 	strh.w	ip, [r3, #2]
 802259e:	f8a3 8004 	strh.w	r8, [r3, #4]
 80225a2:	bfaa      	itet	ge
 80225a4:	4607      	movge	r7, r0
 80225a6:	460b      	movlt	r3, r1
 80225a8:	e9c4 5100 	strdge	r5, r1, [r4]
 80225ac:	4638      	mov	r0, r7
 80225ae:	3408      	adds	r4, #8
 80225b0:	4619      	mov	r1, r3
 80225b2:	e73e      	b.n	8022432 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xc>
 80225b4:	4291      	cmp	r1, r2
 80225b6:	d926      	bls.n	8022606 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1e0>
 80225b8:	f1a2 0310 	sub.w	r3, r2, #16
 80225bc:	f9b3 600a 	ldrsh.w	r6, [r3, #10]
 80225c0:	f9b3 c010 	ldrsh.w	ip, [r3, #16]
 80225c4:	f9b3 7012 	ldrsh.w	r7, [r3, #18]
 80225c8:	f9b3 5008 	ldrsh.w	r5, [r3, #8]
 80225cc:	eb05 4506 	add.w	r5, r5, r6, lsl #16
 80225d0:	eb0c 4607 	add.w	r6, ip, r7, lsl #16
 80225d4:	42b5      	cmp	r5, r6
 80225d6:	dd14      	ble.n	8022602 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1dc>
 80225d8:	461d      	mov	r5, r3
 80225da:	f9b3 8014 	ldrsh.w	r8, [r3, #20]
 80225de:	f855 6f08 	ldr.w	r6, [r5, #8]!
 80225e2:	611e      	str	r6, [r3, #16]
 80225e4:	686e      	ldr	r6, [r5, #4]
 80225e6:	f9b3 e016 	ldrsh.w	lr, [r3, #22]
 80225ea:	f8a3 c008 	strh.w	ip, [r3, #8]
 80225ee:	42a8      	cmp	r0, r5
 80225f0:	615e      	str	r6, [r3, #20]
 80225f2:	815f      	strh	r7, [r3, #10]
 80225f4:	f8a3 800c 	strh.w	r8, [r3, #12]
 80225f8:	f8a3 e00e 	strh.w	lr, [r3, #14]
 80225fc:	f1a3 0308 	sub.w	r3, r3, #8
 8022600:	d1dc      	bne.n	80225bc <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x196>
 8022602:	3208      	adds	r2, #8
 8022604:	e7d6      	b.n	80225b4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x18e>
 8022606:	466b      	mov	r3, sp
 8022608:	429c      	cmp	r4, r3
 802260a:	d903      	bls.n	8022614 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1ee>
 802260c:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 8022610:	3c08      	subs	r4, #8
 8022612:	e70e      	b.n	8022432 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xc>
 8022614:	b051      	add	sp, #324	; 0x144
 8022616:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802261a <_ZN8touchgfx7Outline9sortCellsEv>:
 802261a:	6881      	ldr	r1, [r0, #8]
 802261c:	b111      	cbz	r1, 8022624 <_ZN8touchgfx7Outline9sortCellsEv+0xa>
 802261e:	68c0      	ldr	r0, [r0, #12]
 8022620:	f7ff bf01 	b.w	8022426 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 8022624:	4770      	bx	lr

08022626 <_ZN8touchgfx7Outline8getCellsEv>:
 8022626:	b510      	push	{r4, lr}
 8022628:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 802262a:	07da      	lsls	r2, r3, #31
 802262c:	4604      	mov	r4, r0
 802262e:	d507      	bpl.n	8022640 <_ZN8touchgfx7Outline8getCellsEv+0x1a>
 8022630:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
 8022634:	f7ff fe81 	bl	802233a <_ZN8touchgfx7Outline6lineToEii>
 8022638:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802263a:	f023 0301 	bic.w	r3, r3, #1
 802263e:	63e3      	str	r3, [r4, #60]	; 0x3c
 8022640:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8022642:	079b      	lsls	r3, r3, #30
 8022644:	d51a      	bpl.n	802267c <_ZN8touchgfx7Outline8getCellsEv+0x56>
 8022646:	8b62      	ldrh	r2, [r4, #26]
 8022648:	8b23      	ldrh	r3, [r4, #24]
 802264a:	4313      	orrs	r3, r2
 802264c:	d00d      	beq.n	802266a <_ZN8touchgfx7Outline8getCellsEv+0x44>
 802264e:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8022652:	2b00      	cmp	r3, #0
 8022654:	db09      	blt.n	802266a <_ZN8touchgfx7Outline8getCellsEv+0x44>
 8022656:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8022658:	4293      	cmp	r3, r2
 802265a:	da06      	bge.n	802266a <_ZN8touchgfx7Outline8getCellsEv+0x44>
 802265c:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8022660:	429a      	cmp	r2, r3
 8022662:	d80d      	bhi.n	8022680 <_ZN8touchgfx7Outline8getCellsEv+0x5a>
 8022664:	2301      	movs	r3, #1
 8022666:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 802266a:	68a0      	ldr	r0, [r4, #8]
 802266c:	b138      	cbz	r0, 802267e <_ZN8touchgfx7Outline8getCellsEv+0x58>
 802266e:	4620      	mov	r0, r4
 8022670:	f7ff ffd3 	bl	802261a <_ZN8touchgfx7Outline9sortCellsEv>
 8022674:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8022676:	f023 0302 	bic.w	r3, r3, #2
 802267a:	63e3      	str	r3, [r4, #60]	; 0x3c
 802267c:	68e0      	ldr	r0, [r4, #12]
 802267e:	bd10      	pop	{r4, pc}
 8022680:	f104 0314 	add.w	r3, r4, #20
 8022684:	cb03      	ldmia	r3!, {r0, r1}
 8022686:	6922      	ldr	r2, [r4, #16]
 8022688:	6010      	str	r0, [r2, #0]
 802268a:	6051      	str	r1, [r2, #4]
 802268c:	6923      	ldr	r3, [r4, #16]
 802268e:	3308      	adds	r3, #8
 8022690:	6123      	str	r3, [r4, #16]
 8022692:	68a3      	ldr	r3, [r4, #8]
 8022694:	3301      	adds	r3, #1
 8022696:	60a3      	str	r3, [r4, #8]
 8022698:	e7e7      	b.n	802266a <_ZN8touchgfx7Outline8getCellsEv+0x44>

0802269a <_ZN8touchgfx8ScanlineD1Ev>:
 802269a:	4770      	bx	lr

0802269c <_ZN8touchgfx8ScanlineD0Ev>:
 802269c:	b510      	push	{r4, lr}
 802269e:	2124      	movs	r1, #36	; 0x24
 80226a0:	4604      	mov	r4, r0
 80226a2:	f000 f87a 	bl	802279a <_ZdlPvj>
 80226a6:	4620      	mov	r0, r4
 80226a8:	bd10      	pop	{r4, pc}

080226aa <_ZN8touchgfx8Scanline5resetEv>:
 80226aa:	b510      	push	{r4, lr}
 80226ac:	4604      	mov	r4, r0
 80226ae:	f7f3 f9ab 	bl	8015a08 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv>
 80226b2:	61a0      	str	r0, [r4, #24]
 80226b4:	f7f3 f9ae 	bl	8015a14 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv>
 80226b8:	61e0      	str	r0, [r4, #28]
 80226ba:	f7f3 f9b1 	bl	8015a20 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv>
 80226be:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80226c2:	e9c4 3301 	strd	r3, r3, [r4, #4]
 80226c6:	69e3      	ldr	r3, [r4, #28]
 80226c8:	6123      	str	r3, [r4, #16]
 80226ca:	2300      	movs	r3, #0
 80226cc:	6220      	str	r0, [r4, #32]
 80226ce:	6160      	str	r0, [r4, #20]
 80226d0:	60e3      	str	r3, [r4, #12]
 80226d2:	bd10      	pop	{r4, pc}

080226d4 <_ZN8touchgfx8ScanlineC1Ev>:
 80226d4:	b510      	push	{r4, lr}
 80226d6:	4b07      	ldr	r3, [pc, #28]	; (80226f4 <_ZN8touchgfx8ScanlineC1Ev+0x20>)
 80226d8:	6003      	str	r3, [r0, #0]
 80226da:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80226de:	e9c0 3301 	strd	r3, r3, [r0, #4]
 80226e2:	2300      	movs	r3, #0
 80226e4:	4604      	mov	r4, r0
 80226e6:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80226ea:	6143      	str	r3, [r0, #20]
 80226ec:	f7ff ffdd 	bl	80226aa <_ZN8touchgfx8Scanline5resetEv>
 80226f0:	4620      	mov	r0, r4
 80226f2:	bd10      	pop	{r4, pc}
 80226f4:	080280a0 	.word	0x080280a0

080226f8 <_ZN8touchgfx8Scanline7addSpanEiijj>:
 80226f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80226fc:	1e0c      	subs	r4, r1, #0
 80226fe:	4605      	mov	r5, r0
 8022700:	4617      	mov	r7, r2
 8022702:	461e      	mov	r6, r3
 8022704:	da03      	bge.n	802270e <_ZN8touchgfx8Scanline7addSpanEiijj+0x16>
 8022706:	4426      	add	r6, r4
 8022708:	2e01      	cmp	r6, #1
 802270a:	d421      	bmi.n	8022750 <_ZN8touchgfx8Scanline7addSpanEiijj+0x58>
 802270c:	2400      	movs	r4, #0
 802270e:	f7f3 f975 	bl	80159fc <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 8022712:	42a0      	cmp	r0, r4
 8022714:	d91c      	bls.n	8022750 <_ZN8touchgfx8Scanline7addSpanEiijj+0x58>
 8022716:	f7f3 f971 	bl	80159fc <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 802271a:	eb04 0806 	add.w	r8, r4, r6
 802271e:	4580      	cmp	r8, r0
 8022720:	d902      	bls.n	8022728 <_ZN8touchgfx8Scanline7addSpanEiijj+0x30>
 8022722:	f7f3 f96b 	bl	80159fc <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 8022726:	1b06      	subs	r6, r0, r4
 8022728:	69a8      	ldr	r0, [r5, #24]
 802272a:	f89d 1018 	ldrb.w	r1, [sp, #24]
 802272e:	4632      	mov	r2, r6
 8022730:	4420      	add	r0, r4
 8022732:	f7f4 feaa 	bl	801748a <_ZN8touchgfx6memsetEPvhm>
 8022736:	686b      	ldr	r3, [r5, #4]
 8022738:	3301      	adds	r3, #1
 802273a:	42a3      	cmp	r3, r4
 802273c:	b2b2      	uxth	r2, r6
 802273e:	696b      	ldr	r3, [r5, #20]
 8022740:	d108      	bne.n	8022754 <_ZN8touchgfx8Scanline7addSpanEiijj+0x5c>
 8022742:	8819      	ldrh	r1, [r3, #0]
 8022744:	440a      	add	r2, r1
 8022746:	801a      	strh	r2, [r3, #0]
 8022748:	3c01      	subs	r4, #1
 802274a:	4434      	add	r4, r6
 802274c:	e9c5 4701 	strd	r4, r7, [r5, #4]
 8022750:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022754:	1c99      	adds	r1, r3, #2
 8022756:	6169      	str	r1, [r5, #20]
 8022758:	805a      	strh	r2, [r3, #2]
 802275a:	692b      	ldr	r3, [r5, #16]
 802275c:	1c9a      	adds	r2, r3, #2
 802275e:	612a      	str	r2, [r5, #16]
 8022760:	805c      	strh	r4, [r3, #2]
 8022762:	68eb      	ldr	r3, [r5, #12]
 8022764:	3301      	adds	r3, #1
 8022766:	60eb      	str	r3, [r5, #12]
 8022768:	e7ee      	b.n	8022748 <_ZN8touchgfx8Scanline7addSpanEiijj+0x50>

0802276a <_ZN8touchgfx15RenderingBufferC1Ev>:
 802276a:	2200      	movs	r2, #0
 802276c:	6002      	str	r2, [r0, #0]
 802276e:	7102      	strb	r2, [r0, #4]
 8022770:	e9c0 2202 	strd	r2, r2, [r0, #8]
 8022774:	6102      	str	r2, [r0, #16]
 8022776:	4770      	bx	lr

08022778 <_ZN8touchgfx15RenderingBufferD1Ev>:
 8022778:	4770      	bx	lr

0802277a <_ZN8touchgfx15RenderingBuffer6attachEPhhjji>:
 802277a:	6083      	str	r3, [r0, #8]
 802277c:	9b00      	ldr	r3, [sp, #0]
 802277e:	60c3      	str	r3, [r0, #12]
 8022780:	9b01      	ldr	r3, [sp, #4]
 8022782:	6001      	str	r1, [r0, #0]
 8022784:	7102      	strb	r2, [r0, #4]
 8022786:	6103      	str	r3, [r0, #16]
 8022788:	4770      	bx	lr

0802278a <__aeabi_atexit>:
 802278a:	460b      	mov	r3, r1
 802278c:	4601      	mov	r1, r0
 802278e:	4618      	mov	r0, r3
 8022790:	f000 b852 	b.w	8022838 <__cxa_atexit>

08022794 <__cxa_pure_virtual>:
 8022794:	b508      	push	{r3, lr}
 8022796:	f000 f81f 	bl	80227d8 <_ZSt9terminatev>

0802279a <_ZdlPvj>:
 802279a:	f000 b80f 	b.w	80227bc <_ZdlPv>

0802279e <__cxa_guard_acquire>:
 802279e:	6803      	ldr	r3, [r0, #0]
 80227a0:	07db      	lsls	r3, r3, #31
 80227a2:	d406      	bmi.n	80227b2 <__cxa_guard_acquire+0x14>
 80227a4:	7843      	ldrb	r3, [r0, #1]
 80227a6:	b103      	cbz	r3, 80227aa <__cxa_guard_acquire+0xc>
 80227a8:	deff      	udf	#255	; 0xff
 80227aa:	2301      	movs	r3, #1
 80227ac:	7043      	strb	r3, [r0, #1]
 80227ae:	4618      	mov	r0, r3
 80227b0:	4770      	bx	lr
 80227b2:	2000      	movs	r0, #0
 80227b4:	4770      	bx	lr

080227b6 <__cxa_guard_release>:
 80227b6:	2301      	movs	r3, #1
 80227b8:	6003      	str	r3, [r0, #0]
 80227ba:	4770      	bx	lr

080227bc <_ZdlPv>:
 80227bc:	f000 b88e 	b.w	80228dc <free>

080227c0 <_ZN10__cxxabiv111__terminateEPFvvE>:
 80227c0:	b508      	push	{r3, lr}
 80227c2:	4780      	blx	r0
 80227c4:	f000 f80d 	bl	80227e2 <abort>

080227c8 <_ZSt13get_terminatev>:
 80227c8:	4b02      	ldr	r3, [pc, #8]	; (80227d4 <_ZSt13get_terminatev+0xc>)
 80227ca:	6818      	ldr	r0, [r3, #0]
 80227cc:	f3bf 8f5b 	dmb	ish
 80227d0:	4770      	bx	lr
 80227d2:	bf00      	nop
 80227d4:	20000080 	.word	0x20000080

080227d8 <_ZSt9terminatev>:
 80227d8:	b508      	push	{r3, lr}
 80227da:	f7ff fff5 	bl	80227c8 <_ZSt13get_terminatev>
 80227de:	f7ff ffef 	bl	80227c0 <_ZN10__cxxabiv111__terminateEPFvvE>

080227e2 <abort>:
 80227e2:	b508      	push	{r3, lr}
 80227e4:	2006      	movs	r0, #6
 80227e6:	f000 fc3d 	bl	8023064 <raise>
 80227ea:	2001      	movs	r0, #1
 80227ec:	f7de fff4 	bl	80017d8 <_exit>

080227f0 <__assert_func>:
 80227f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80227f2:	461c      	mov	r4, r3
 80227f4:	4b09      	ldr	r3, [pc, #36]	; (802281c <__assert_func+0x2c>)
 80227f6:	681b      	ldr	r3, [r3, #0]
 80227f8:	4605      	mov	r5, r0
 80227fa:	68d8      	ldr	r0, [r3, #12]
 80227fc:	b152      	cbz	r2, 8022814 <__assert_func+0x24>
 80227fe:	4b08      	ldr	r3, [pc, #32]	; (8022820 <__assert_func+0x30>)
 8022800:	9100      	str	r1, [sp, #0]
 8022802:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8022806:	4907      	ldr	r1, [pc, #28]	; (8022824 <__assert_func+0x34>)
 8022808:	462b      	mov	r3, r5
 802280a:	4622      	mov	r2, r4
 802280c:	f000 f828 	bl	8022860 <fiprintf>
 8022810:	f7ff ffe7 	bl	80227e2 <abort>
 8022814:	4b04      	ldr	r3, [pc, #16]	; (8022828 <__assert_func+0x38>)
 8022816:	461a      	mov	r2, r3
 8022818:	e7f2      	b.n	8022800 <__assert_func+0x10>
 802281a:	bf00      	nop
 802281c:	20000084 	.word	0x20000084
 8022820:	080280a8 	.word	0x080280a8
 8022824:	080280b5 	.word	0x080280b5
 8022828:	080280e3 	.word	0x080280e3

0802282c <atexit>:
 802282c:	2300      	movs	r3, #0
 802282e:	4601      	mov	r1, r0
 8022830:	461a      	mov	r2, r3
 8022832:	4618      	mov	r0, r3
 8022834:	f000 bcf2 	b.w	802321c <__register_exitproc>

08022838 <__cxa_atexit>:
 8022838:	b510      	push	{r4, lr}
 802283a:	4c05      	ldr	r4, [pc, #20]	; (8022850 <__cxa_atexit+0x18>)
 802283c:	4613      	mov	r3, r2
 802283e:	b12c      	cbz	r4, 802284c <__cxa_atexit+0x14>
 8022840:	460a      	mov	r2, r1
 8022842:	4601      	mov	r1, r0
 8022844:	2002      	movs	r0, #2
 8022846:	f000 fce9 	bl	802321c <__register_exitproc>
 802284a:	bd10      	pop	{r4, pc}
 802284c:	4620      	mov	r0, r4
 802284e:	e7fc      	b.n	802284a <__cxa_atexit+0x12>
 8022850:	0802321d 	.word	0x0802321d

08022854 <__errno>:
 8022854:	4b01      	ldr	r3, [pc, #4]	; (802285c <__errno+0x8>)
 8022856:	6818      	ldr	r0, [r3, #0]
 8022858:	4770      	bx	lr
 802285a:	bf00      	nop
 802285c:	20000084 	.word	0x20000084

08022860 <fiprintf>:
 8022860:	b40e      	push	{r1, r2, r3}
 8022862:	b503      	push	{r0, r1, lr}
 8022864:	4601      	mov	r1, r0
 8022866:	ab03      	add	r3, sp, #12
 8022868:	4805      	ldr	r0, [pc, #20]	; (8022880 <fiprintf+0x20>)
 802286a:	f853 2b04 	ldr.w	r2, [r3], #4
 802286e:	6800      	ldr	r0, [r0, #0]
 8022870:	9301      	str	r3, [sp, #4]
 8022872:	f000 f921 	bl	8022ab8 <_vfiprintf_r>
 8022876:	b002      	add	sp, #8
 8022878:	f85d eb04 	ldr.w	lr, [sp], #4
 802287c:	b003      	add	sp, #12
 802287e:	4770      	bx	lr
 8022880:	20000084 	.word	0x20000084

08022884 <__libc_init_array>:
 8022884:	b570      	push	{r4, r5, r6, lr}
 8022886:	4e0d      	ldr	r6, [pc, #52]	; (80228bc <__libc_init_array+0x38>)
 8022888:	4c0d      	ldr	r4, [pc, #52]	; (80228c0 <__libc_init_array+0x3c>)
 802288a:	1ba4      	subs	r4, r4, r6
 802288c:	10a4      	asrs	r4, r4, #2
 802288e:	2500      	movs	r5, #0
 8022890:	42a5      	cmp	r5, r4
 8022892:	d109      	bne.n	80228a8 <__libc_init_array+0x24>
 8022894:	4e0b      	ldr	r6, [pc, #44]	; (80228c4 <__libc_init_array+0x40>)
 8022896:	4c0c      	ldr	r4, [pc, #48]	; (80228c8 <__libc_init_array+0x44>)
 8022898:	f000 ffb0 	bl	80237fc <_init>
 802289c:	1ba4      	subs	r4, r4, r6
 802289e:	10a4      	asrs	r4, r4, #2
 80228a0:	2500      	movs	r5, #0
 80228a2:	42a5      	cmp	r5, r4
 80228a4:	d105      	bne.n	80228b2 <__libc_init_array+0x2e>
 80228a6:	bd70      	pop	{r4, r5, r6, pc}
 80228a8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80228ac:	4798      	blx	r3
 80228ae:	3501      	adds	r5, #1
 80228b0:	e7ee      	b.n	8022890 <__libc_init_array+0xc>
 80228b2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80228b6:	4798      	blx	r3
 80228b8:	3501      	adds	r5, #1
 80228ba:	e7f2      	b.n	80228a2 <__libc_init_array+0x1e>
 80228bc:	081f8530 	.word	0x081f8530
 80228c0:	081f8530 	.word	0x081f8530
 80228c4:	081f8530 	.word	0x081f8530
 80228c8:	081f8544 	.word	0x081f8544

080228cc <malloc>:
 80228cc:	4b02      	ldr	r3, [pc, #8]	; (80228d8 <malloc+0xc>)
 80228ce:	4601      	mov	r1, r0
 80228d0:	6818      	ldr	r0, [r3, #0]
 80228d2:	f000 b86d 	b.w	80229b0 <_malloc_r>
 80228d6:	bf00      	nop
 80228d8:	20000084 	.word	0x20000084

080228dc <free>:
 80228dc:	4b02      	ldr	r3, [pc, #8]	; (80228e8 <free+0xc>)
 80228de:	4601      	mov	r1, r0
 80228e0:	6818      	ldr	r0, [r3, #0]
 80228e2:	f000 b817 	b.w	8022914 <_free_r>
 80228e6:	bf00      	nop
 80228e8:	20000084 	.word	0x20000084

080228ec <memcpy>:
 80228ec:	b510      	push	{r4, lr}
 80228ee:	1e43      	subs	r3, r0, #1
 80228f0:	440a      	add	r2, r1
 80228f2:	4291      	cmp	r1, r2
 80228f4:	d100      	bne.n	80228f8 <memcpy+0xc>
 80228f6:	bd10      	pop	{r4, pc}
 80228f8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80228fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8022900:	e7f7      	b.n	80228f2 <memcpy+0x6>

08022902 <memset>:
 8022902:	4402      	add	r2, r0
 8022904:	4603      	mov	r3, r0
 8022906:	4293      	cmp	r3, r2
 8022908:	d100      	bne.n	802290c <memset+0xa>
 802290a:	4770      	bx	lr
 802290c:	f803 1b01 	strb.w	r1, [r3], #1
 8022910:	e7f9      	b.n	8022906 <memset+0x4>
	...

08022914 <_free_r>:
 8022914:	b538      	push	{r3, r4, r5, lr}
 8022916:	4605      	mov	r5, r0
 8022918:	2900      	cmp	r1, #0
 802291a:	d045      	beq.n	80229a8 <_free_r+0x94>
 802291c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8022920:	1f0c      	subs	r4, r1, #4
 8022922:	2b00      	cmp	r3, #0
 8022924:	bfb8      	it	lt
 8022926:	18e4      	addlt	r4, r4, r3
 8022928:	f000 feba 	bl	80236a0 <__malloc_lock>
 802292c:	4a1f      	ldr	r2, [pc, #124]	; (80229ac <_free_r+0x98>)
 802292e:	6813      	ldr	r3, [r2, #0]
 8022930:	4610      	mov	r0, r2
 8022932:	b933      	cbnz	r3, 8022942 <_free_r+0x2e>
 8022934:	6063      	str	r3, [r4, #4]
 8022936:	6014      	str	r4, [r2, #0]
 8022938:	4628      	mov	r0, r5
 802293a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802293e:	f000 beb0 	b.w	80236a2 <__malloc_unlock>
 8022942:	42a3      	cmp	r3, r4
 8022944:	d90c      	bls.n	8022960 <_free_r+0x4c>
 8022946:	6821      	ldr	r1, [r4, #0]
 8022948:	1862      	adds	r2, r4, r1
 802294a:	4293      	cmp	r3, r2
 802294c:	bf04      	itt	eq
 802294e:	681a      	ldreq	r2, [r3, #0]
 8022950:	685b      	ldreq	r3, [r3, #4]
 8022952:	6063      	str	r3, [r4, #4]
 8022954:	bf04      	itt	eq
 8022956:	1852      	addeq	r2, r2, r1
 8022958:	6022      	streq	r2, [r4, #0]
 802295a:	6004      	str	r4, [r0, #0]
 802295c:	e7ec      	b.n	8022938 <_free_r+0x24>
 802295e:	4613      	mov	r3, r2
 8022960:	685a      	ldr	r2, [r3, #4]
 8022962:	b10a      	cbz	r2, 8022968 <_free_r+0x54>
 8022964:	42a2      	cmp	r2, r4
 8022966:	d9fa      	bls.n	802295e <_free_r+0x4a>
 8022968:	6819      	ldr	r1, [r3, #0]
 802296a:	1858      	adds	r0, r3, r1
 802296c:	42a0      	cmp	r0, r4
 802296e:	d10b      	bne.n	8022988 <_free_r+0x74>
 8022970:	6820      	ldr	r0, [r4, #0]
 8022972:	4401      	add	r1, r0
 8022974:	1858      	adds	r0, r3, r1
 8022976:	4282      	cmp	r2, r0
 8022978:	6019      	str	r1, [r3, #0]
 802297a:	d1dd      	bne.n	8022938 <_free_r+0x24>
 802297c:	6810      	ldr	r0, [r2, #0]
 802297e:	6852      	ldr	r2, [r2, #4]
 8022980:	605a      	str	r2, [r3, #4]
 8022982:	4401      	add	r1, r0
 8022984:	6019      	str	r1, [r3, #0]
 8022986:	e7d7      	b.n	8022938 <_free_r+0x24>
 8022988:	d902      	bls.n	8022990 <_free_r+0x7c>
 802298a:	230c      	movs	r3, #12
 802298c:	602b      	str	r3, [r5, #0]
 802298e:	e7d3      	b.n	8022938 <_free_r+0x24>
 8022990:	6820      	ldr	r0, [r4, #0]
 8022992:	1821      	adds	r1, r4, r0
 8022994:	428a      	cmp	r2, r1
 8022996:	bf04      	itt	eq
 8022998:	6811      	ldreq	r1, [r2, #0]
 802299a:	6852      	ldreq	r2, [r2, #4]
 802299c:	6062      	str	r2, [r4, #4]
 802299e:	bf04      	itt	eq
 80229a0:	1809      	addeq	r1, r1, r0
 80229a2:	6021      	streq	r1, [r4, #0]
 80229a4:	605c      	str	r4, [r3, #4]
 80229a6:	e7c7      	b.n	8022938 <_free_r+0x24>
 80229a8:	bd38      	pop	{r3, r4, r5, pc}
 80229aa:	bf00      	nop
 80229ac:	2000d2c0 	.word	0x2000d2c0

080229b0 <_malloc_r>:
 80229b0:	b570      	push	{r4, r5, r6, lr}
 80229b2:	1ccd      	adds	r5, r1, #3
 80229b4:	f025 0503 	bic.w	r5, r5, #3
 80229b8:	3508      	adds	r5, #8
 80229ba:	2d0c      	cmp	r5, #12
 80229bc:	bf38      	it	cc
 80229be:	250c      	movcc	r5, #12
 80229c0:	2d00      	cmp	r5, #0
 80229c2:	4606      	mov	r6, r0
 80229c4:	db01      	blt.n	80229ca <_malloc_r+0x1a>
 80229c6:	42a9      	cmp	r1, r5
 80229c8:	d903      	bls.n	80229d2 <_malloc_r+0x22>
 80229ca:	230c      	movs	r3, #12
 80229cc:	6033      	str	r3, [r6, #0]
 80229ce:	2000      	movs	r0, #0
 80229d0:	bd70      	pop	{r4, r5, r6, pc}
 80229d2:	f000 fe65 	bl	80236a0 <__malloc_lock>
 80229d6:	4a21      	ldr	r2, [pc, #132]	; (8022a5c <_malloc_r+0xac>)
 80229d8:	6814      	ldr	r4, [r2, #0]
 80229da:	4621      	mov	r1, r4
 80229dc:	b991      	cbnz	r1, 8022a04 <_malloc_r+0x54>
 80229de:	4c20      	ldr	r4, [pc, #128]	; (8022a60 <_malloc_r+0xb0>)
 80229e0:	6823      	ldr	r3, [r4, #0]
 80229e2:	b91b      	cbnz	r3, 80229ec <_malloc_r+0x3c>
 80229e4:	4630      	mov	r0, r6
 80229e6:	f000 fb05 	bl	8022ff4 <_sbrk_r>
 80229ea:	6020      	str	r0, [r4, #0]
 80229ec:	4629      	mov	r1, r5
 80229ee:	4630      	mov	r0, r6
 80229f0:	f000 fb00 	bl	8022ff4 <_sbrk_r>
 80229f4:	1c43      	adds	r3, r0, #1
 80229f6:	d124      	bne.n	8022a42 <_malloc_r+0x92>
 80229f8:	230c      	movs	r3, #12
 80229fa:	6033      	str	r3, [r6, #0]
 80229fc:	4630      	mov	r0, r6
 80229fe:	f000 fe50 	bl	80236a2 <__malloc_unlock>
 8022a02:	e7e4      	b.n	80229ce <_malloc_r+0x1e>
 8022a04:	680b      	ldr	r3, [r1, #0]
 8022a06:	1b5b      	subs	r3, r3, r5
 8022a08:	d418      	bmi.n	8022a3c <_malloc_r+0x8c>
 8022a0a:	2b0b      	cmp	r3, #11
 8022a0c:	d90f      	bls.n	8022a2e <_malloc_r+0x7e>
 8022a0e:	600b      	str	r3, [r1, #0]
 8022a10:	50cd      	str	r5, [r1, r3]
 8022a12:	18cc      	adds	r4, r1, r3
 8022a14:	4630      	mov	r0, r6
 8022a16:	f000 fe44 	bl	80236a2 <__malloc_unlock>
 8022a1a:	f104 000b 	add.w	r0, r4, #11
 8022a1e:	1d23      	adds	r3, r4, #4
 8022a20:	f020 0007 	bic.w	r0, r0, #7
 8022a24:	1ac3      	subs	r3, r0, r3
 8022a26:	d0d3      	beq.n	80229d0 <_malloc_r+0x20>
 8022a28:	425a      	negs	r2, r3
 8022a2a:	50e2      	str	r2, [r4, r3]
 8022a2c:	e7d0      	b.n	80229d0 <_malloc_r+0x20>
 8022a2e:	428c      	cmp	r4, r1
 8022a30:	684b      	ldr	r3, [r1, #4]
 8022a32:	bf16      	itet	ne
 8022a34:	6063      	strne	r3, [r4, #4]
 8022a36:	6013      	streq	r3, [r2, #0]
 8022a38:	460c      	movne	r4, r1
 8022a3a:	e7eb      	b.n	8022a14 <_malloc_r+0x64>
 8022a3c:	460c      	mov	r4, r1
 8022a3e:	6849      	ldr	r1, [r1, #4]
 8022a40:	e7cc      	b.n	80229dc <_malloc_r+0x2c>
 8022a42:	1cc4      	adds	r4, r0, #3
 8022a44:	f024 0403 	bic.w	r4, r4, #3
 8022a48:	42a0      	cmp	r0, r4
 8022a4a:	d005      	beq.n	8022a58 <_malloc_r+0xa8>
 8022a4c:	1a21      	subs	r1, r4, r0
 8022a4e:	4630      	mov	r0, r6
 8022a50:	f000 fad0 	bl	8022ff4 <_sbrk_r>
 8022a54:	3001      	adds	r0, #1
 8022a56:	d0cf      	beq.n	80229f8 <_malloc_r+0x48>
 8022a58:	6025      	str	r5, [r4, #0]
 8022a5a:	e7db      	b.n	8022a14 <_malloc_r+0x64>
 8022a5c:	2000d2c0 	.word	0x2000d2c0
 8022a60:	2000d2c4 	.word	0x2000d2c4

08022a64 <__sfputc_r>:
 8022a64:	6893      	ldr	r3, [r2, #8]
 8022a66:	3b01      	subs	r3, #1
 8022a68:	2b00      	cmp	r3, #0
 8022a6a:	b410      	push	{r4}
 8022a6c:	6093      	str	r3, [r2, #8]
 8022a6e:	da08      	bge.n	8022a82 <__sfputc_r+0x1e>
 8022a70:	6994      	ldr	r4, [r2, #24]
 8022a72:	42a3      	cmp	r3, r4
 8022a74:	db01      	blt.n	8022a7a <__sfputc_r+0x16>
 8022a76:	290a      	cmp	r1, #10
 8022a78:	d103      	bne.n	8022a82 <__sfputc_r+0x1e>
 8022a7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022a7e:	f000 bb0d 	b.w	802309c <__swbuf_r>
 8022a82:	6813      	ldr	r3, [r2, #0]
 8022a84:	1c58      	adds	r0, r3, #1
 8022a86:	6010      	str	r0, [r2, #0]
 8022a88:	7019      	strb	r1, [r3, #0]
 8022a8a:	4608      	mov	r0, r1
 8022a8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022a90:	4770      	bx	lr

08022a92 <__sfputs_r>:
 8022a92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022a94:	4606      	mov	r6, r0
 8022a96:	460f      	mov	r7, r1
 8022a98:	4614      	mov	r4, r2
 8022a9a:	18d5      	adds	r5, r2, r3
 8022a9c:	42ac      	cmp	r4, r5
 8022a9e:	d101      	bne.n	8022aa4 <__sfputs_r+0x12>
 8022aa0:	2000      	movs	r0, #0
 8022aa2:	e007      	b.n	8022ab4 <__sfputs_r+0x22>
 8022aa4:	463a      	mov	r2, r7
 8022aa6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022aaa:	4630      	mov	r0, r6
 8022aac:	f7ff ffda 	bl	8022a64 <__sfputc_r>
 8022ab0:	1c43      	adds	r3, r0, #1
 8022ab2:	d1f3      	bne.n	8022a9c <__sfputs_r+0xa>
 8022ab4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08022ab8 <_vfiprintf_r>:
 8022ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022abc:	460c      	mov	r4, r1
 8022abe:	b09d      	sub	sp, #116	; 0x74
 8022ac0:	4617      	mov	r7, r2
 8022ac2:	461d      	mov	r5, r3
 8022ac4:	4606      	mov	r6, r0
 8022ac6:	b118      	cbz	r0, 8022ad0 <_vfiprintf_r+0x18>
 8022ac8:	6983      	ldr	r3, [r0, #24]
 8022aca:	b90b      	cbnz	r3, 8022ad0 <_vfiprintf_r+0x18>
 8022acc:	f000 fcfa 	bl	80234c4 <__sinit>
 8022ad0:	4b7c      	ldr	r3, [pc, #496]	; (8022cc4 <_vfiprintf_r+0x20c>)
 8022ad2:	429c      	cmp	r4, r3
 8022ad4:	d158      	bne.n	8022b88 <_vfiprintf_r+0xd0>
 8022ad6:	6874      	ldr	r4, [r6, #4]
 8022ad8:	89a3      	ldrh	r3, [r4, #12]
 8022ada:	0718      	lsls	r0, r3, #28
 8022adc:	d55e      	bpl.n	8022b9c <_vfiprintf_r+0xe4>
 8022ade:	6923      	ldr	r3, [r4, #16]
 8022ae0:	2b00      	cmp	r3, #0
 8022ae2:	d05b      	beq.n	8022b9c <_vfiprintf_r+0xe4>
 8022ae4:	2300      	movs	r3, #0
 8022ae6:	9309      	str	r3, [sp, #36]	; 0x24
 8022ae8:	2320      	movs	r3, #32
 8022aea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8022aee:	2330      	movs	r3, #48	; 0x30
 8022af0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8022af4:	9503      	str	r5, [sp, #12]
 8022af6:	f04f 0b01 	mov.w	fp, #1
 8022afa:	46b8      	mov	r8, r7
 8022afc:	4645      	mov	r5, r8
 8022afe:	f815 3b01 	ldrb.w	r3, [r5], #1
 8022b02:	b10b      	cbz	r3, 8022b08 <_vfiprintf_r+0x50>
 8022b04:	2b25      	cmp	r3, #37	; 0x25
 8022b06:	d154      	bne.n	8022bb2 <_vfiprintf_r+0xfa>
 8022b08:	ebb8 0a07 	subs.w	sl, r8, r7
 8022b0c:	d00b      	beq.n	8022b26 <_vfiprintf_r+0x6e>
 8022b0e:	4653      	mov	r3, sl
 8022b10:	463a      	mov	r2, r7
 8022b12:	4621      	mov	r1, r4
 8022b14:	4630      	mov	r0, r6
 8022b16:	f7ff ffbc 	bl	8022a92 <__sfputs_r>
 8022b1a:	3001      	adds	r0, #1
 8022b1c:	f000 80c2 	beq.w	8022ca4 <_vfiprintf_r+0x1ec>
 8022b20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022b22:	4453      	add	r3, sl
 8022b24:	9309      	str	r3, [sp, #36]	; 0x24
 8022b26:	f898 3000 	ldrb.w	r3, [r8]
 8022b2a:	2b00      	cmp	r3, #0
 8022b2c:	f000 80ba 	beq.w	8022ca4 <_vfiprintf_r+0x1ec>
 8022b30:	2300      	movs	r3, #0
 8022b32:	f04f 32ff 	mov.w	r2, #4294967295
 8022b36:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8022b3a:	9304      	str	r3, [sp, #16]
 8022b3c:	9307      	str	r3, [sp, #28]
 8022b3e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8022b42:	931a      	str	r3, [sp, #104]	; 0x68
 8022b44:	46a8      	mov	r8, r5
 8022b46:	2205      	movs	r2, #5
 8022b48:	f818 1b01 	ldrb.w	r1, [r8], #1
 8022b4c:	485e      	ldr	r0, [pc, #376]	; (8022cc8 <_vfiprintf_r+0x210>)
 8022b4e:	f7dd fb57 	bl	8000200 <memchr>
 8022b52:	9b04      	ldr	r3, [sp, #16]
 8022b54:	bb78      	cbnz	r0, 8022bb6 <_vfiprintf_r+0xfe>
 8022b56:	06d9      	lsls	r1, r3, #27
 8022b58:	bf44      	itt	mi
 8022b5a:	2220      	movmi	r2, #32
 8022b5c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8022b60:	071a      	lsls	r2, r3, #28
 8022b62:	bf44      	itt	mi
 8022b64:	222b      	movmi	r2, #43	; 0x2b
 8022b66:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8022b6a:	782a      	ldrb	r2, [r5, #0]
 8022b6c:	2a2a      	cmp	r2, #42	; 0x2a
 8022b6e:	d02a      	beq.n	8022bc6 <_vfiprintf_r+0x10e>
 8022b70:	9a07      	ldr	r2, [sp, #28]
 8022b72:	46a8      	mov	r8, r5
 8022b74:	2000      	movs	r0, #0
 8022b76:	250a      	movs	r5, #10
 8022b78:	4641      	mov	r1, r8
 8022b7a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8022b7e:	3b30      	subs	r3, #48	; 0x30
 8022b80:	2b09      	cmp	r3, #9
 8022b82:	d969      	bls.n	8022c58 <_vfiprintf_r+0x1a0>
 8022b84:	b360      	cbz	r0, 8022be0 <_vfiprintf_r+0x128>
 8022b86:	e024      	b.n	8022bd2 <_vfiprintf_r+0x11a>
 8022b88:	4b50      	ldr	r3, [pc, #320]	; (8022ccc <_vfiprintf_r+0x214>)
 8022b8a:	429c      	cmp	r4, r3
 8022b8c:	d101      	bne.n	8022b92 <_vfiprintf_r+0xda>
 8022b8e:	68b4      	ldr	r4, [r6, #8]
 8022b90:	e7a2      	b.n	8022ad8 <_vfiprintf_r+0x20>
 8022b92:	4b4f      	ldr	r3, [pc, #316]	; (8022cd0 <_vfiprintf_r+0x218>)
 8022b94:	429c      	cmp	r4, r3
 8022b96:	bf08      	it	eq
 8022b98:	68f4      	ldreq	r4, [r6, #12]
 8022b9a:	e79d      	b.n	8022ad8 <_vfiprintf_r+0x20>
 8022b9c:	4621      	mov	r1, r4
 8022b9e:	4630      	mov	r0, r6
 8022ba0:	f000 face 	bl	8023140 <__swsetup_r>
 8022ba4:	2800      	cmp	r0, #0
 8022ba6:	d09d      	beq.n	8022ae4 <_vfiprintf_r+0x2c>
 8022ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8022bac:	b01d      	add	sp, #116	; 0x74
 8022bae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022bb2:	46a8      	mov	r8, r5
 8022bb4:	e7a2      	b.n	8022afc <_vfiprintf_r+0x44>
 8022bb6:	4a44      	ldr	r2, [pc, #272]	; (8022cc8 <_vfiprintf_r+0x210>)
 8022bb8:	1a80      	subs	r0, r0, r2
 8022bba:	fa0b f000 	lsl.w	r0, fp, r0
 8022bbe:	4318      	orrs	r0, r3
 8022bc0:	9004      	str	r0, [sp, #16]
 8022bc2:	4645      	mov	r5, r8
 8022bc4:	e7be      	b.n	8022b44 <_vfiprintf_r+0x8c>
 8022bc6:	9a03      	ldr	r2, [sp, #12]
 8022bc8:	1d11      	adds	r1, r2, #4
 8022bca:	6812      	ldr	r2, [r2, #0]
 8022bcc:	9103      	str	r1, [sp, #12]
 8022bce:	2a00      	cmp	r2, #0
 8022bd0:	db01      	blt.n	8022bd6 <_vfiprintf_r+0x11e>
 8022bd2:	9207      	str	r2, [sp, #28]
 8022bd4:	e004      	b.n	8022be0 <_vfiprintf_r+0x128>
 8022bd6:	4252      	negs	r2, r2
 8022bd8:	f043 0302 	orr.w	r3, r3, #2
 8022bdc:	9207      	str	r2, [sp, #28]
 8022bde:	9304      	str	r3, [sp, #16]
 8022be0:	f898 3000 	ldrb.w	r3, [r8]
 8022be4:	2b2e      	cmp	r3, #46	; 0x2e
 8022be6:	d10e      	bne.n	8022c06 <_vfiprintf_r+0x14e>
 8022be8:	f898 3001 	ldrb.w	r3, [r8, #1]
 8022bec:	2b2a      	cmp	r3, #42	; 0x2a
 8022bee:	d138      	bne.n	8022c62 <_vfiprintf_r+0x1aa>
 8022bf0:	9b03      	ldr	r3, [sp, #12]
 8022bf2:	1d1a      	adds	r2, r3, #4
 8022bf4:	681b      	ldr	r3, [r3, #0]
 8022bf6:	9203      	str	r2, [sp, #12]
 8022bf8:	2b00      	cmp	r3, #0
 8022bfa:	bfb8      	it	lt
 8022bfc:	f04f 33ff 	movlt.w	r3, #4294967295
 8022c00:	f108 0802 	add.w	r8, r8, #2
 8022c04:	9305      	str	r3, [sp, #20]
 8022c06:	4d33      	ldr	r5, [pc, #204]	; (8022cd4 <_vfiprintf_r+0x21c>)
 8022c08:	f898 1000 	ldrb.w	r1, [r8]
 8022c0c:	2203      	movs	r2, #3
 8022c0e:	4628      	mov	r0, r5
 8022c10:	f7dd faf6 	bl	8000200 <memchr>
 8022c14:	b140      	cbz	r0, 8022c28 <_vfiprintf_r+0x170>
 8022c16:	2340      	movs	r3, #64	; 0x40
 8022c18:	1b40      	subs	r0, r0, r5
 8022c1a:	fa03 f000 	lsl.w	r0, r3, r0
 8022c1e:	9b04      	ldr	r3, [sp, #16]
 8022c20:	4303      	orrs	r3, r0
 8022c22:	f108 0801 	add.w	r8, r8, #1
 8022c26:	9304      	str	r3, [sp, #16]
 8022c28:	f898 1000 	ldrb.w	r1, [r8]
 8022c2c:	482a      	ldr	r0, [pc, #168]	; (8022cd8 <_vfiprintf_r+0x220>)
 8022c2e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8022c32:	2206      	movs	r2, #6
 8022c34:	f108 0701 	add.w	r7, r8, #1
 8022c38:	f7dd fae2 	bl	8000200 <memchr>
 8022c3c:	2800      	cmp	r0, #0
 8022c3e:	d037      	beq.n	8022cb0 <_vfiprintf_r+0x1f8>
 8022c40:	4b26      	ldr	r3, [pc, #152]	; (8022cdc <_vfiprintf_r+0x224>)
 8022c42:	bb1b      	cbnz	r3, 8022c8c <_vfiprintf_r+0x1d4>
 8022c44:	9b03      	ldr	r3, [sp, #12]
 8022c46:	3307      	adds	r3, #7
 8022c48:	f023 0307 	bic.w	r3, r3, #7
 8022c4c:	3308      	adds	r3, #8
 8022c4e:	9303      	str	r3, [sp, #12]
 8022c50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022c52:	444b      	add	r3, r9
 8022c54:	9309      	str	r3, [sp, #36]	; 0x24
 8022c56:	e750      	b.n	8022afa <_vfiprintf_r+0x42>
 8022c58:	fb05 3202 	mla	r2, r5, r2, r3
 8022c5c:	2001      	movs	r0, #1
 8022c5e:	4688      	mov	r8, r1
 8022c60:	e78a      	b.n	8022b78 <_vfiprintf_r+0xc0>
 8022c62:	2300      	movs	r3, #0
 8022c64:	f108 0801 	add.w	r8, r8, #1
 8022c68:	9305      	str	r3, [sp, #20]
 8022c6a:	4619      	mov	r1, r3
 8022c6c:	250a      	movs	r5, #10
 8022c6e:	4640      	mov	r0, r8
 8022c70:	f810 2b01 	ldrb.w	r2, [r0], #1
 8022c74:	3a30      	subs	r2, #48	; 0x30
 8022c76:	2a09      	cmp	r2, #9
 8022c78:	d903      	bls.n	8022c82 <_vfiprintf_r+0x1ca>
 8022c7a:	2b00      	cmp	r3, #0
 8022c7c:	d0c3      	beq.n	8022c06 <_vfiprintf_r+0x14e>
 8022c7e:	9105      	str	r1, [sp, #20]
 8022c80:	e7c1      	b.n	8022c06 <_vfiprintf_r+0x14e>
 8022c82:	fb05 2101 	mla	r1, r5, r1, r2
 8022c86:	2301      	movs	r3, #1
 8022c88:	4680      	mov	r8, r0
 8022c8a:	e7f0      	b.n	8022c6e <_vfiprintf_r+0x1b6>
 8022c8c:	ab03      	add	r3, sp, #12
 8022c8e:	9300      	str	r3, [sp, #0]
 8022c90:	4622      	mov	r2, r4
 8022c92:	4b13      	ldr	r3, [pc, #76]	; (8022ce0 <_vfiprintf_r+0x228>)
 8022c94:	a904      	add	r1, sp, #16
 8022c96:	4630      	mov	r0, r6
 8022c98:	f3af 8000 	nop.w
 8022c9c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8022ca0:	4681      	mov	r9, r0
 8022ca2:	d1d5      	bne.n	8022c50 <_vfiprintf_r+0x198>
 8022ca4:	89a3      	ldrh	r3, [r4, #12]
 8022ca6:	065b      	lsls	r3, r3, #25
 8022ca8:	f53f af7e 	bmi.w	8022ba8 <_vfiprintf_r+0xf0>
 8022cac:	9809      	ldr	r0, [sp, #36]	; 0x24
 8022cae:	e77d      	b.n	8022bac <_vfiprintf_r+0xf4>
 8022cb0:	ab03      	add	r3, sp, #12
 8022cb2:	9300      	str	r3, [sp, #0]
 8022cb4:	4622      	mov	r2, r4
 8022cb6:	4b0a      	ldr	r3, [pc, #40]	; (8022ce0 <_vfiprintf_r+0x228>)
 8022cb8:	a904      	add	r1, sp, #16
 8022cba:	4630      	mov	r0, r6
 8022cbc:	f000 f888 	bl	8022dd0 <_printf_i>
 8022cc0:	e7ec      	b.n	8022c9c <_vfiprintf_r+0x1e4>
 8022cc2:	bf00      	nop
 8022cc4:	08028140 	.word	0x08028140
 8022cc8:	080280e8 	.word	0x080280e8
 8022ccc:	08028160 	.word	0x08028160
 8022cd0:	08028120 	.word	0x08028120
 8022cd4:	080280ee 	.word	0x080280ee
 8022cd8:	080280f2 	.word	0x080280f2
 8022cdc:	00000000 	.word	0x00000000
 8022ce0:	08022a93 	.word	0x08022a93

08022ce4 <_printf_common>:
 8022ce4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022ce8:	4691      	mov	r9, r2
 8022cea:	461f      	mov	r7, r3
 8022cec:	688a      	ldr	r2, [r1, #8]
 8022cee:	690b      	ldr	r3, [r1, #16]
 8022cf0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8022cf4:	4293      	cmp	r3, r2
 8022cf6:	bfb8      	it	lt
 8022cf8:	4613      	movlt	r3, r2
 8022cfa:	f8c9 3000 	str.w	r3, [r9]
 8022cfe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8022d02:	4606      	mov	r6, r0
 8022d04:	460c      	mov	r4, r1
 8022d06:	b112      	cbz	r2, 8022d0e <_printf_common+0x2a>
 8022d08:	3301      	adds	r3, #1
 8022d0a:	f8c9 3000 	str.w	r3, [r9]
 8022d0e:	6823      	ldr	r3, [r4, #0]
 8022d10:	0699      	lsls	r1, r3, #26
 8022d12:	bf42      	ittt	mi
 8022d14:	f8d9 3000 	ldrmi.w	r3, [r9]
 8022d18:	3302      	addmi	r3, #2
 8022d1a:	f8c9 3000 	strmi.w	r3, [r9]
 8022d1e:	6825      	ldr	r5, [r4, #0]
 8022d20:	f015 0506 	ands.w	r5, r5, #6
 8022d24:	d107      	bne.n	8022d36 <_printf_common+0x52>
 8022d26:	f104 0a19 	add.w	sl, r4, #25
 8022d2a:	68e3      	ldr	r3, [r4, #12]
 8022d2c:	f8d9 2000 	ldr.w	r2, [r9]
 8022d30:	1a9b      	subs	r3, r3, r2
 8022d32:	42ab      	cmp	r3, r5
 8022d34:	dc28      	bgt.n	8022d88 <_printf_common+0xa4>
 8022d36:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8022d3a:	6822      	ldr	r2, [r4, #0]
 8022d3c:	3300      	adds	r3, #0
 8022d3e:	bf18      	it	ne
 8022d40:	2301      	movne	r3, #1
 8022d42:	0692      	lsls	r2, r2, #26
 8022d44:	d42d      	bmi.n	8022da2 <_printf_common+0xbe>
 8022d46:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8022d4a:	4639      	mov	r1, r7
 8022d4c:	4630      	mov	r0, r6
 8022d4e:	47c0      	blx	r8
 8022d50:	3001      	adds	r0, #1
 8022d52:	d020      	beq.n	8022d96 <_printf_common+0xb2>
 8022d54:	6823      	ldr	r3, [r4, #0]
 8022d56:	68e5      	ldr	r5, [r4, #12]
 8022d58:	f8d9 2000 	ldr.w	r2, [r9]
 8022d5c:	f003 0306 	and.w	r3, r3, #6
 8022d60:	2b04      	cmp	r3, #4
 8022d62:	bf08      	it	eq
 8022d64:	1aad      	subeq	r5, r5, r2
 8022d66:	68a3      	ldr	r3, [r4, #8]
 8022d68:	6922      	ldr	r2, [r4, #16]
 8022d6a:	bf0c      	ite	eq
 8022d6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8022d70:	2500      	movne	r5, #0
 8022d72:	4293      	cmp	r3, r2
 8022d74:	bfc4      	itt	gt
 8022d76:	1a9b      	subgt	r3, r3, r2
 8022d78:	18ed      	addgt	r5, r5, r3
 8022d7a:	f04f 0900 	mov.w	r9, #0
 8022d7e:	341a      	adds	r4, #26
 8022d80:	454d      	cmp	r5, r9
 8022d82:	d11a      	bne.n	8022dba <_printf_common+0xd6>
 8022d84:	2000      	movs	r0, #0
 8022d86:	e008      	b.n	8022d9a <_printf_common+0xb6>
 8022d88:	2301      	movs	r3, #1
 8022d8a:	4652      	mov	r2, sl
 8022d8c:	4639      	mov	r1, r7
 8022d8e:	4630      	mov	r0, r6
 8022d90:	47c0      	blx	r8
 8022d92:	3001      	adds	r0, #1
 8022d94:	d103      	bne.n	8022d9e <_printf_common+0xba>
 8022d96:	f04f 30ff 	mov.w	r0, #4294967295
 8022d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022d9e:	3501      	adds	r5, #1
 8022da0:	e7c3      	b.n	8022d2a <_printf_common+0x46>
 8022da2:	18e1      	adds	r1, r4, r3
 8022da4:	1c5a      	adds	r2, r3, #1
 8022da6:	2030      	movs	r0, #48	; 0x30
 8022da8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8022dac:	4422      	add	r2, r4
 8022dae:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8022db2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8022db6:	3302      	adds	r3, #2
 8022db8:	e7c5      	b.n	8022d46 <_printf_common+0x62>
 8022dba:	2301      	movs	r3, #1
 8022dbc:	4622      	mov	r2, r4
 8022dbe:	4639      	mov	r1, r7
 8022dc0:	4630      	mov	r0, r6
 8022dc2:	47c0      	blx	r8
 8022dc4:	3001      	adds	r0, #1
 8022dc6:	d0e6      	beq.n	8022d96 <_printf_common+0xb2>
 8022dc8:	f109 0901 	add.w	r9, r9, #1
 8022dcc:	e7d8      	b.n	8022d80 <_printf_common+0x9c>
	...

08022dd0 <_printf_i>:
 8022dd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8022dd4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8022dd8:	460c      	mov	r4, r1
 8022dda:	7e09      	ldrb	r1, [r1, #24]
 8022ddc:	b085      	sub	sp, #20
 8022dde:	296e      	cmp	r1, #110	; 0x6e
 8022de0:	4617      	mov	r7, r2
 8022de2:	4606      	mov	r6, r0
 8022de4:	4698      	mov	r8, r3
 8022de6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8022de8:	f000 80b3 	beq.w	8022f52 <_printf_i+0x182>
 8022dec:	d822      	bhi.n	8022e34 <_printf_i+0x64>
 8022dee:	2963      	cmp	r1, #99	; 0x63
 8022df0:	d036      	beq.n	8022e60 <_printf_i+0x90>
 8022df2:	d80a      	bhi.n	8022e0a <_printf_i+0x3a>
 8022df4:	2900      	cmp	r1, #0
 8022df6:	f000 80b9 	beq.w	8022f6c <_printf_i+0x19c>
 8022dfa:	2958      	cmp	r1, #88	; 0x58
 8022dfc:	f000 8083 	beq.w	8022f06 <_printf_i+0x136>
 8022e00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8022e04:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8022e08:	e032      	b.n	8022e70 <_printf_i+0xa0>
 8022e0a:	2964      	cmp	r1, #100	; 0x64
 8022e0c:	d001      	beq.n	8022e12 <_printf_i+0x42>
 8022e0e:	2969      	cmp	r1, #105	; 0x69
 8022e10:	d1f6      	bne.n	8022e00 <_printf_i+0x30>
 8022e12:	6820      	ldr	r0, [r4, #0]
 8022e14:	6813      	ldr	r3, [r2, #0]
 8022e16:	0605      	lsls	r5, r0, #24
 8022e18:	f103 0104 	add.w	r1, r3, #4
 8022e1c:	d52a      	bpl.n	8022e74 <_printf_i+0xa4>
 8022e1e:	681b      	ldr	r3, [r3, #0]
 8022e20:	6011      	str	r1, [r2, #0]
 8022e22:	2b00      	cmp	r3, #0
 8022e24:	da03      	bge.n	8022e2e <_printf_i+0x5e>
 8022e26:	222d      	movs	r2, #45	; 0x2d
 8022e28:	425b      	negs	r3, r3
 8022e2a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8022e2e:	486f      	ldr	r0, [pc, #444]	; (8022fec <_printf_i+0x21c>)
 8022e30:	220a      	movs	r2, #10
 8022e32:	e039      	b.n	8022ea8 <_printf_i+0xd8>
 8022e34:	2973      	cmp	r1, #115	; 0x73
 8022e36:	f000 809d 	beq.w	8022f74 <_printf_i+0x1a4>
 8022e3a:	d808      	bhi.n	8022e4e <_printf_i+0x7e>
 8022e3c:	296f      	cmp	r1, #111	; 0x6f
 8022e3e:	d020      	beq.n	8022e82 <_printf_i+0xb2>
 8022e40:	2970      	cmp	r1, #112	; 0x70
 8022e42:	d1dd      	bne.n	8022e00 <_printf_i+0x30>
 8022e44:	6823      	ldr	r3, [r4, #0]
 8022e46:	f043 0320 	orr.w	r3, r3, #32
 8022e4a:	6023      	str	r3, [r4, #0]
 8022e4c:	e003      	b.n	8022e56 <_printf_i+0x86>
 8022e4e:	2975      	cmp	r1, #117	; 0x75
 8022e50:	d017      	beq.n	8022e82 <_printf_i+0xb2>
 8022e52:	2978      	cmp	r1, #120	; 0x78
 8022e54:	d1d4      	bne.n	8022e00 <_printf_i+0x30>
 8022e56:	2378      	movs	r3, #120	; 0x78
 8022e58:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8022e5c:	4864      	ldr	r0, [pc, #400]	; (8022ff0 <_printf_i+0x220>)
 8022e5e:	e055      	b.n	8022f0c <_printf_i+0x13c>
 8022e60:	6813      	ldr	r3, [r2, #0]
 8022e62:	1d19      	adds	r1, r3, #4
 8022e64:	681b      	ldr	r3, [r3, #0]
 8022e66:	6011      	str	r1, [r2, #0]
 8022e68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8022e6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8022e70:	2301      	movs	r3, #1
 8022e72:	e08c      	b.n	8022f8e <_printf_i+0x1be>
 8022e74:	681b      	ldr	r3, [r3, #0]
 8022e76:	6011      	str	r1, [r2, #0]
 8022e78:	f010 0f40 	tst.w	r0, #64	; 0x40
 8022e7c:	bf18      	it	ne
 8022e7e:	b21b      	sxthne	r3, r3
 8022e80:	e7cf      	b.n	8022e22 <_printf_i+0x52>
 8022e82:	6813      	ldr	r3, [r2, #0]
 8022e84:	6825      	ldr	r5, [r4, #0]
 8022e86:	1d18      	adds	r0, r3, #4
 8022e88:	6010      	str	r0, [r2, #0]
 8022e8a:	0628      	lsls	r0, r5, #24
 8022e8c:	d501      	bpl.n	8022e92 <_printf_i+0xc2>
 8022e8e:	681b      	ldr	r3, [r3, #0]
 8022e90:	e002      	b.n	8022e98 <_printf_i+0xc8>
 8022e92:	0668      	lsls	r0, r5, #25
 8022e94:	d5fb      	bpl.n	8022e8e <_printf_i+0xbe>
 8022e96:	881b      	ldrh	r3, [r3, #0]
 8022e98:	4854      	ldr	r0, [pc, #336]	; (8022fec <_printf_i+0x21c>)
 8022e9a:	296f      	cmp	r1, #111	; 0x6f
 8022e9c:	bf14      	ite	ne
 8022e9e:	220a      	movne	r2, #10
 8022ea0:	2208      	moveq	r2, #8
 8022ea2:	2100      	movs	r1, #0
 8022ea4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8022ea8:	6865      	ldr	r5, [r4, #4]
 8022eaa:	60a5      	str	r5, [r4, #8]
 8022eac:	2d00      	cmp	r5, #0
 8022eae:	f2c0 8095 	blt.w	8022fdc <_printf_i+0x20c>
 8022eb2:	6821      	ldr	r1, [r4, #0]
 8022eb4:	f021 0104 	bic.w	r1, r1, #4
 8022eb8:	6021      	str	r1, [r4, #0]
 8022eba:	2b00      	cmp	r3, #0
 8022ebc:	d13d      	bne.n	8022f3a <_printf_i+0x16a>
 8022ebe:	2d00      	cmp	r5, #0
 8022ec0:	f040 808e 	bne.w	8022fe0 <_printf_i+0x210>
 8022ec4:	4665      	mov	r5, ip
 8022ec6:	2a08      	cmp	r2, #8
 8022ec8:	d10b      	bne.n	8022ee2 <_printf_i+0x112>
 8022eca:	6823      	ldr	r3, [r4, #0]
 8022ecc:	07db      	lsls	r3, r3, #31
 8022ece:	d508      	bpl.n	8022ee2 <_printf_i+0x112>
 8022ed0:	6923      	ldr	r3, [r4, #16]
 8022ed2:	6862      	ldr	r2, [r4, #4]
 8022ed4:	429a      	cmp	r2, r3
 8022ed6:	bfde      	ittt	le
 8022ed8:	2330      	movle	r3, #48	; 0x30
 8022eda:	f805 3c01 	strble.w	r3, [r5, #-1]
 8022ede:	f105 35ff 	addle.w	r5, r5, #4294967295
 8022ee2:	ebac 0305 	sub.w	r3, ip, r5
 8022ee6:	6123      	str	r3, [r4, #16]
 8022ee8:	f8cd 8000 	str.w	r8, [sp]
 8022eec:	463b      	mov	r3, r7
 8022eee:	aa03      	add	r2, sp, #12
 8022ef0:	4621      	mov	r1, r4
 8022ef2:	4630      	mov	r0, r6
 8022ef4:	f7ff fef6 	bl	8022ce4 <_printf_common>
 8022ef8:	3001      	adds	r0, #1
 8022efa:	d14d      	bne.n	8022f98 <_printf_i+0x1c8>
 8022efc:	f04f 30ff 	mov.w	r0, #4294967295
 8022f00:	b005      	add	sp, #20
 8022f02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8022f06:	4839      	ldr	r0, [pc, #228]	; (8022fec <_printf_i+0x21c>)
 8022f08:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8022f0c:	6813      	ldr	r3, [r2, #0]
 8022f0e:	6821      	ldr	r1, [r4, #0]
 8022f10:	1d1d      	adds	r5, r3, #4
 8022f12:	681b      	ldr	r3, [r3, #0]
 8022f14:	6015      	str	r5, [r2, #0]
 8022f16:	060a      	lsls	r2, r1, #24
 8022f18:	d50b      	bpl.n	8022f32 <_printf_i+0x162>
 8022f1a:	07ca      	lsls	r2, r1, #31
 8022f1c:	bf44      	itt	mi
 8022f1e:	f041 0120 	orrmi.w	r1, r1, #32
 8022f22:	6021      	strmi	r1, [r4, #0]
 8022f24:	b91b      	cbnz	r3, 8022f2e <_printf_i+0x15e>
 8022f26:	6822      	ldr	r2, [r4, #0]
 8022f28:	f022 0220 	bic.w	r2, r2, #32
 8022f2c:	6022      	str	r2, [r4, #0]
 8022f2e:	2210      	movs	r2, #16
 8022f30:	e7b7      	b.n	8022ea2 <_printf_i+0xd2>
 8022f32:	064d      	lsls	r5, r1, #25
 8022f34:	bf48      	it	mi
 8022f36:	b29b      	uxthmi	r3, r3
 8022f38:	e7ef      	b.n	8022f1a <_printf_i+0x14a>
 8022f3a:	4665      	mov	r5, ip
 8022f3c:	fbb3 f1f2 	udiv	r1, r3, r2
 8022f40:	fb02 3311 	mls	r3, r2, r1, r3
 8022f44:	5cc3      	ldrb	r3, [r0, r3]
 8022f46:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8022f4a:	460b      	mov	r3, r1
 8022f4c:	2900      	cmp	r1, #0
 8022f4e:	d1f5      	bne.n	8022f3c <_printf_i+0x16c>
 8022f50:	e7b9      	b.n	8022ec6 <_printf_i+0xf6>
 8022f52:	6813      	ldr	r3, [r2, #0]
 8022f54:	6825      	ldr	r5, [r4, #0]
 8022f56:	6961      	ldr	r1, [r4, #20]
 8022f58:	1d18      	adds	r0, r3, #4
 8022f5a:	6010      	str	r0, [r2, #0]
 8022f5c:	0628      	lsls	r0, r5, #24
 8022f5e:	681b      	ldr	r3, [r3, #0]
 8022f60:	d501      	bpl.n	8022f66 <_printf_i+0x196>
 8022f62:	6019      	str	r1, [r3, #0]
 8022f64:	e002      	b.n	8022f6c <_printf_i+0x19c>
 8022f66:	066a      	lsls	r2, r5, #25
 8022f68:	d5fb      	bpl.n	8022f62 <_printf_i+0x192>
 8022f6a:	8019      	strh	r1, [r3, #0]
 8022f6c:	2300      	movs	r3, #0
 8022f6e:	6123      	str	r3, [r4, #16]
 8022f70:	4665      	mov	r5, ip
 8022f72:	e7b9      	b.n	8022ee8 <_printf_i+0x118>
 8022f74:	6813      	ldr	r3, [r2, #0]
 8022f76:	1d19      	adds	r1, r3, #4
 8022f78:	6011      	str	r1, [r2, #0]
 8022f7a:	681d      	ldr	r5, [r3, #0]
 8022f7c:	6862      	ldr	r2, [r4, #4]
 8022f7e:	2100      	movs	r1, #0
 8022f80:	4628      	mov	r0, r5
 8022f82:	f7dd f93d 	bl	8000200 <memchr>
 8022f86:	b108      	cbz	r0, 8022f8c <_printf_i+0x1bc>
 8022f88:	1b40      	subs	r0, r0, r5
 8022f8a:	6060      	str	r0, [r4, #4]
 8022f8c:	6863      	ldr	r3, [r4, #4]
 8022f8e:	6123      	str	r3, [r4, #16]
 8022f90:	2300      	movs	r3, #0
 8022f92:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8022f96:	e7a7      	b.n	8022ee8 <_printf_i+0x118>
 8022f98:	6923      	ldr	r3, [r4, #16]
 8022f9a:	462a      	mov	r2, r5
 8022f9c:	4639      	mov	r1, r7
 8022f9e:	4630      	mov	r0, r6
 8022fa0:	47c0      	blx	r8
 8022fa2:	3001      	adds	r0, #1
 8022fa4:	d0aa      	beq.n	8022efc <_printf_i+0x12c>
 8022fa6:	6823      	ldr	r3, [r4, #0]
 8022fa8:	079b      	lsls	r3, r3, #30
 8022faa:	d413      	bmi.n	8022fd4 <_printf_i+0x204>
 8022fac:	68e0      	ldr	r0, [r4, #12]
 8022fae:	9b03      	ldr	r3, [sp, #12]
 8022fb0:	4298      	cmp	r0, r3
 8022fb2:	bfb8      	it	lt
 8022fb4:	4618      	movlt	r0, r3
 8022fb6:	e7a3      	b.n	8022f00 <_printf_i+0x130>
 8022fb8:	2301      	movs	r3, #1
 8022fba:	464a      	mov	r2, r9
 8022fbc:	4639      	mov	r1, r7
 8022fbe:	4630      	mov	r0, r6
 8022fc0:	47c0      	blx	r8
 8022fc2:	3001      	adds	r0, #1
 8022fc4:	d09a      	beq.n	8022efc <_printf_i+0x12c>
 8022fc6:	3501      	adds	r5, #1
 8022fc8:	68e3      	ldr	r3, [r4, #12]
 8022fca:	9a03      	ldr	r2, [sp, #12]
 8022fcc:	1a9b      	subs	r3, r3, r2
 8022fce:	42ab      	cmp	r3, r5
 8022fd0:	dcf2      	bgt.n	8022fb8 <_printf_i+0x1e8>
 8022fd2:	e7eb      	b.n	8022fac <_printf_i+0x1dc>
 8022fd4:	2500      	movs	r5, #0
 8022fd6:	f104 0919 	add.w	r9, r4, #25
 8022fda:	e7f5      	b.n	8022fc8 <_printf_i+0x1f8>
 8022fdc:	2b00      	cmp	r3, #0
 8022fde:	d1ac      	bne.n	8022f3a <_printf_i+0x16a>
 8022fe0:	7803      	ldrb	r3, [r0, #0]
 8022fe2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8022fe6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8022fea:	e76c      	b.n	8022ec6 <_printf_i+0xf6>
 8022fec:	080280f9 	.word	0x080280f9
 8022ff0:	0802810a 	.word	0x0802810a

08022ff4 <_sbrk_r>:
 8022ff4:	b538      	push	{r3, r4, r5, lr}
 8022ff6:	4c06      	ldr	r4, [pc, #24]	; (8023010 <_sbrk_r+0x1c>)
 8022ff8:	2300      	movs	r3, #0
 8022ffa:	4605      	mov	r5, r0
 8022ffc:	4608      	mov	r0, r1
 8022ffe:	6023      	str	r3, [r4, #0]
 8023000:	f7de fc62 	bl	80018c8 <_sbrk>
 8023004:	1c43      	adds	r3, r0, #1
 8023006:	d102      	bne.n	802300e <_sbrk_r+0x1a>
 8023008:	6823      	ldr	r3, [r4, #0]
 802300a:	b103      	cbz	r3, 802300e <_sbrk_r+0x1a>
 802300c:	602b      	str	r3, [r5, #0]
 802300e:	bd38      	pop	{r3, r4, r5, pc}
 8023010:	2000d710 	.word	0x2000d710

08023014 <_raise_r>:
 8023014:	291f      	cmp	r1, #31
 8023016:	b538      	push	{r3, r4, r5, lr}
 8023018:	4604      	mov	r4, r0
 802301a:	460d      	mov	r5, r1
 802301c:	d904      	bls.n	8023028 <_raise_r+0x14>
 802301e:	2316      	movs	r3, #22
 8023020:	6003      	str	r3, [r0, #0]
 8023022:	f04f 30ff 	mov.w	r0, #4294967295
 8023026:	bd38      	pop	{r3, r4, r5, pc}
 8023028:	6c42      	ldr	r2, [r0, #68]	; 0x44
 802302a:	b112      	cbz	r2, 8023032 <_raise_r+0x1e>
 802302c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8023030:	b94b      	cbnz	r3, 8023046 <_raise_r+0x32>
 8023032:	4620      	mov	r0, r4
 8023034:	f000 f830 	bl	8023098 <_getpid_r>
 8023038:	462a      	mov	r2, r5
 802303a:	4601      	mov	r1, r0
 802303c:	4620      	mov	r0, r4
 802303e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8023042:	f000 b817 	b.w	8023074 <_kill_r>
 8023046:	2b01      	cmp	r3, #1
 8023048:	d00a      	beq.n	8023060 <_raise_r+0x4c>
 802304a:	1c59      	adds	r1, r3, #1
 802304c:	d103      	bne.n	8023056 <_raise_r+0x42>
 802304e:	2316      	movs	r3, #22
 8023050:	6003      	str	r3, [r0, #0]
 8023052:	2001      	movs	r0, #1
 8023054:	e7e7      	b.n	8023026 <_raise_r+0x12>
 8023056:	2400      	movs	r4, #0
 8023058:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 802305c:	4628      	mov	r0, r5
 802305e:	4798      	blx	r3
 8023060:	2000      	movs	r0, #0
 8023062:	e7e0      	b.n	8023026 <_raise_r+0x12>

08023064 <raise>:
 8023064:	4b02      	ldr	r3, [pc, #8]	; (8023070 <raise+0xc>)
 8023066:	4601      	mov	r1, r0
 8023068:	6818      	ldr	r0, [r3, #0]
 802306a:	f7ff bfd3 	b.w	8023014 <_raise_r>
 802306e:	bf00      	nop
 8023070:	20000084 	.word	0x20000084

08023074 <_kill_r>:
 8023074:	b538      	push	{r3, r4, r5, lr}
 8023076:	4c07      	ldr	r4, [pc, #28]	; (8023094 <_kill_r+0x20>)
 8023078:	2300      	movs	r3, #0
 802307a:	4605      	mov	r5, r0
 802307c:	4608      	mov	r0, r1
 802307e:	4611      	mov	r1, r2
 8023080:	6023      	str	r3, [r4, #0]
 8023082:	f7de fb99 	bl	80017b8 <_kill>
 8023086:	1c43      	adds	r3, r0, #1
 8023088:	d102      	bne.n	8023090 <_kill_r+0x1c>
 802308a:	6823      	ldr	r3, [r4, #0]
 802308c:	b103      	cbz	r3, 8023090 <_kill_r+0x1c>
 802308e:	602b      	str	r3, [r5, #0]
 8023090:	bd38      	pop	{r3, r4, r5, pc}
 8023092:	bf00      	nop
 8023094:	2000d710 	.word	0x2000d710

08023098 <_getpid_r>:
 8023098:	f7de bb86 	b.w	80017a8 <_getpid>

0802309c <__swbuf_r>:
 802309c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802309e:	460e      	mov	r6, r1
 80230a0:	4614      	mov	r4, r2
 80230a2:	4605      	mov	r5, r0
 80230a4:	b118      	cbz	r0, 80230ae <__swbuf_r+0x12>
 80230a6:	6983      	ldr	r3, [r0, #24]
 80230a8:	b90b      	cbnz	r3, 80230ae <__swbuf_r+0x12>
 80230aa:	f000 fa0b 	bl	80234c4 <__sinit>
 80230ae:	4b21      	ldr	r3, [pc, #132]	; (8023134 <__swbuf_r+0x98>)
 80230b0:	429c      	cmp	r4, r3
 80230b2:	d12a      	bne.n	802310a <__swbuf_r+0x6e>
 80230b4:	686c      	ldr	r4, [r5, #4]
 80230b6:	69a3      	ldr	r3, [r4, #24]
 80230b8:	60a3      	str	r3, [r4, #8]
 80230ba:	89a3      	ldrh	r3, [r4, #12]
 80230bc:	071a      	lsls	r2, r3, #28
 80230be:	d52e      	bpl.n	802311e <__swbuf_r+0x82>
 80230c0:	6923      	ldr	r3, [r4, #16]
 80230c2:	b363      	cbz	r3, 802311e <__swbuf_r+0x82>
 80230c4:	6923      	ldr	r3, [r4, #16]
 80230c6:	6820      	ldr	r0, [r4, #0]
 80230c8:	1ac0      	subs	r0, r0, r3
 80230ca:	6963      	ldr	r3, [r4, #20]
 80230cc:	b2f6      	uxtb	r6, r6
 80230ce:	4283      	cmp	r3, r0
 80230d0:	4637      	mov	r7, r6
 80230d2:	dc04      	bgt.n	80230de <__swbuf_r+0x42>
 80230d4:	4621      	mov	r1, r4
 80230d6:	4628      	mov	r0, r5
 80230d8:	f000 f98a 	bl	80233f0 <_fflush_r>
 80230dc:	bb28      	cbnz	r0, 802312a <__swbuf_r+0x8e>
 80230de:	68a3      	ldr	r3, [r4, #8]
 80230e0:	3b01      	subs	r3, #1
 80230e2:	60a3      	str	r3, [r4, #8]
 80230e4:	6823      	ldr	r3, [r4, #0]
 80230e6:	1c5a      	adds	r2, r3, #1
 80230e8:	6022      	str	r2, [r4, #0]
 80230ea:	701e      	strb	r6, [r3, #0]
 80230ec:	6963      	ldr	r3, [r4, #20]
 80230ee:	3001      	adds	r0, #1
 80230f0:	4283      	cmp	r3, r0
 80230f2:	d004      	beq.n	80230fe <__swbuf_r+0x62>
 80230f4:	89a3      	ldrh	r3, [r4, #12]
 80230f6:	07db      	lsls	r3, r3, #31
 80230f8:	d519      	bpl.n	802312e <__swbuf_r+0x92>
 80230fa:	2e0a      	cmp	r6, #10
 80230fc:	d117      	bne.n	802312e <__swbuf_r+0x92>
 80230fe:	4621      	mov	r1, r4
 8023100:	4628      	mov	r0, r5
 8023102:	f000 f975 	bl	80233f0 <_fflush_r>
 8023106:	b190      	cbz	r0, 802312e <__swbuf_r+0x92>
 8023108:	e00f      	b.n	802312a <__swbuf_r+0x8e>
 802310a:	4b0b      	ldr	r3, [pc, #44]	; (8023138 <__swbuf_r+0x9c>)
 802310c:	429c      	cmp	r4, r3
 802310e:	d101      	bne.n	8023114 <__swbuf_r+0x78>
 8023110:	68ac      	ldr	r4, [r5, #8]
 8023112:	e7d0      	b.n	80230b6 <__swbuf_r+0x1a>
 8023114:	4b09      	ldr	r3, [pc, #36]	; (802313c <__swbuf_r+0xa0>)
 8023116:	429c      	cmp	r4, r3
 8023118:	bf08      	it	eq
 802311a:	68ec      	ldreq	r4, [r5, #12]
 802311c:	e7cb      	b.n	80230b6 <__swbuf_r+0x1a>
 802311e:	4621      	mov	r1, r4
 8023120:	4628      	mov	r0, r5
 8023122:	f000 f80d 	bl	8023140 <__swsetup_r>
 8023126:	2800      	cmp	r0, #0
 8023128:	d0cc      	beq.n	80230c4 <__swbuf_r+0x28>
 802312a:	f04f 37ff 	mov.w	r7, #4294967295
 802312e:	4638      	mov	r0, r7
 8023130:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8023132:	bf00      	nop
 8023134:	08028140 	.word	0x08028140
 8023138:	08028160 	.word	0x08028160
 802313c:	08028120 	.word	0x08028120

08023140 <__swsetup_r>:
 8023140:	4b32      	ldr	r3, [pc, #200]	; (802320c <__swsetup_r+0xcc>)
 8023142:	b570      	push	{r4, r5, r6, lr}
 8023144:	681d      	ldr	r5, [r3, #0]
 8023146:	4606      	mov	r6, r0
 8023148:	460c      	mov	r4, r1
 802314a:	b125      	cbz	r5, 8023156 <__swsetup_r+0x16>
 802314c:	69ab      	ldr	r3, [r5, #24]
 802314e:	b913      	cbnz	r3, 8023156 <__swsetup_r+0x16>
 8023150:	4628      	mov	r0, r5
 8023152:	f000 f9b7 	bl	80234c4 <__sinit>
 8023156:	4b2e      	ldr	r3, [pc, #184]	; (8023210 <__swsetup_r+0xd0>)
 8023158:	429c      	cmp	r4, r3
 802315a:	d10f      	bne.n	802317c <__swsetup_r+0x3c>
 802315c:	686c      	ldr	r4, [r5, #4]
 802315e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8023162:	b29a      	uxth	r2, r3
 8023164:	0715      	lsls	r5, r2, #28
 8023166:	d42c      	bmi.n	80231c2 <__swsetup_r+0x82>
 8023168:	06d0      	lsls	r0, r2, #27
 802316a:	d411      	bmi.n	8023190 <__swsetup_r+0x50>
 802316c:	2209      	movs	r2, #9
 802316e:	6032      	str	r2, [r6, #0]
 8023170:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8023174:	81a3      	strh	r3, [r4, #12]
 8023176:	f04f 30ff 	mov.w	r0, #4294967295
 802317a:	e03e      	b.n	80231fa <__swsetup_r+0xba>
 802317c:	4b25      	ldr	r3, [pc, #148]	; (8023214 <__swsetup_r+0xd4>)
 802317e:	429c      	cmp	r4, r3
 8023180:	d101      	bne.n	8023186 <__swsetup_r+0x46>
 8023182:	68ac      	ldr	r4, [r5, #8]
 8023184:	e7eb      	b.n	802315e <__swsetup_r+0x1e>
 8023186:	4b24      	ldr	r3, [pc, #144]	; (8023218 <__swsetup_r+0xd8>)
 8023188:	429c      	cmp	r4, r3
 802318a:	bf08      	it	eq
 802318c:	68ec      	ldreq	r4, [r5, #12]
 802318e:	e7e6      	b.n	802315e <__swsetup_r+0x1e>
 8023190:	0751      	lsls	r1, r2, #29
 8023192:	d512      	bpl.n	80231ba <__swsetup_r+0x7a>
 8023194:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8023196:	b141      	cbz	r1, 80231aa <__swsetup_r+0x6a>
 8023198:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802319c:	4299      	cmp	r1, r3
 802319e:	d002      	beq.n	80231a6 <__swsetup_r+0x66>
 80231a0:	4630      	mov	r0, r6
 80231a2:	f7ff fbb7 	bl	8022914 <_free_r>
 80231a6:	2300      	movs	r3, #0
 80231a8:	6363      	str	r3, [r4, #52]	; 0x34
 80231aa:	89a3      	ldrh	r3, [r4, #12]
 80231ac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80231b0:	81a3      	strh	r3, [r4, #12]
 80231b2:	2300      	movs	r3, #0
 80231b4:	6063      	str	r3, [r4, #4]
 80231b6:	6923      	ldr	r3, [r4, #16]
 80231b8:	6023      	str	r3, [r4, #0]
 80231ba:	89a3      	ldrh	r3, [r4, #12]
 80231bc:	f043 0308 	orr.w	r3, r3, #8
 80231c0:	81a3      	strh	r3, [r4, #12]
 80231c2:	6923      	ldr	r3, [r4, #16]
 80231c4:	b94b      	cbnz	r3, 80231da <__swsetup_r+0x9a>
 80231c6:	89a3      	ldrh	r3, [r4, #12]
 80231c8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80231cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80231d0:	d003      	beq.n	80231da <__swsetup_r+0x9a>
 80231d2:	4621      	mov	r1, r4
 80231d4:	4630      	mov	r0, r6
 80231d6:	f000 fa23 	bl	8023620 <__smakebuf_r>
 80231da:	89a2      	ldrh	r2, [r4, #12]
 80231dc:	f012 0301 	ands.w	r3, r2, #1
 80231e0:	d00c      	beq.n	80231fc <__swsetup_r+0xbc>
 80231e2:	2300      	movs	r3, #0
 80231e4:	60a3      	str	r3, [r4, #8]
 80231e6:	6963      	ldr	r3, [r4, #20]
 80231e8:	425b      	negs	r3, r3
 80231ea:	61a3      	str	r3, [r4, #24]
 80231ec:	6923      	ldr	r3, [r4, #16]
 80231ee:	b953      	cbnz	r3, 8023206 <__swsetup_r+0xc6>
 80231f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80231f4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80231f8:	d1ba      	bne.n	8023170 <__swsetup_r+0x30>
 80231fa:	bd70      	pop	{r4, r5, r6, pc}
 80231fc:	0792      	lsls	r2, r2, #30
 80231fe:	bf58      	it	pl
 8023200:	6963      	ldrpl	r3, [r4, #20]
 8023202:	60a3      	str	r3, [r4, #8]
 8023204:	e7f2      	b.n	80231ec <__swsetup_r+0xac>
 8023206:	2000      	movs	r0, #0
 8023208:	e7f7      	b.n	80231fa <__swsetup_r+0xba>
 802320a:	bf00      	nop
 802320c:	20000084 	.word	0x20000084
 8023210:	08028140 	.word	0x08028140
 8023214:	08028160 	.word	0x08028160
 8023218:	08028120 	.word	0x08028120

0802321c <__register_exitproc>:
 802321c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8023220:	4d2c      	ldr	r5, [pc, #176]	; (80232d4 <__register_exitproc+0xb8>)
 8023222:	682c      	ldr	r4, [r5, #0]
 8023224:	4607      	mov	r7, r0
 8023226:	460e      	mov	r6, r1
 8023228:	4691      	mov	r9, r2
 802322a:	4698      	mov	r8, r3
 802322c:	b934      	cbnz	r4, 802323c <__register_exitproc+0x20>
 802322e:	4b2a      	ldr	r3, [pc, #168]	; (80232d8 <__register_exitproc+0xbc>)
 8023230:	4c2a      	ldr	r4, [pc, #168]	; (80232dc <__register_exitproc+0xc0>)
 8023232:	602c      	str	r4, [r5, #0]
 8023234:	b113      	cbz	r3, 802323c <__register_exitproc+0x20>
 8023236:	681b      	ldr	r3, [r3, #0]
 8023238:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 802323c:	6863      	ldr	r3, [r4, #4]
 802323e:	2b1f      	cmp	r3, #31
 8023240:	dd3d      	ble.n	80232be <__register_exitproc+0xa2>
 8023242:	4b27      	ldr	r3, [pc, #156]	; (80232e0 <__register_exitproc+0xc4>)
 8023244:	b91b      	cbnz	r3, 802324e <__register_exitproc+0x32>
 8023246:	f04f 30ff 	mov.w	r0, #4294967295
 802324a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802324e:	208c      	movs	r0, #140	; 0x8c
 8023250:	f7ff fb3c 	bl	80228cc <malloc>
 8023254:	4604      	mov	r4, r0
 8023256:	2800      	cmp	r0, #0
 8023258:	d0f5      	beq.n	8023246 <__register_exitproc+0x2a>
 802325a:	2300      	movs	r3, #0
 802325c:	682a      	ldr	r2, [r5, #0]
 802325e:	6002      	str	r2, [r0, #0]
 8023260:	6043      	str	r3, [r0, #4]
 8023262:	6028      	str	r0, [r5, #0]
 8023264:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
 8023268:	b30f      	cbz	r7, 80232ae <__register_exitproc+0x92>
 802326a:	f44f 7084 	mov.w	r0, #264	; 0x108
 802326e:	f7ff fb2d 	bl	80228cc <malloc>
 8023272:	2800      	cmp	r0, #0
 8023274:	d0e7      	beq.n	8023246 <__register_exitproc+0x2a>
 8023276:	2300      	movs	r3, #0
 8023278:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 802327c:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
 8023280:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8023284:	6862      	ldr	r2, [r4, #4]
 8023286:	f840 9022 	str.w	r9, [r0, r2, lsl #2]
 802328a:	2301      	movs	r3, #1
 802328c:	4093      	lsls	r3, r2
 802328e:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8023292:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
 8023296:	431a      	orrs	r2, r3
 8023298:	2f02      	cmp	r7, #2
 802329a:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
 802329e:	f8c1 8080 	str.w	r8, [r1, #128]	; 0x80
 80232a2:	bf02      	ittt	eq
 80232a4:	f8d0 2104 	ldreq.w	r2, [r0, #260]	; 0x104
 80232a8:	4313      	orreq	r3, r2
 80232aa:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 80232ae:	6863      	ldr	r3, [r4, #4]
 80232b0:	1c5a      	adds	r2, r3, #1
 80232b2:	3302      	adds	r3, #2
 80232b4:	6062      	str	r2, [r4, #4]
 80232b6:	2000      	movs	r0, #0
 80232b8:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 80232bc:	e7c5      	b.n	802324a <__register_exitproc+0x2e>
 80232be:	2f00      	cmp	r7, #0
 80232c0:	d0f5      	beq.n	80232ae <__register_exitproc+0x92>
 80232c2:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80232c6:	2800      	cmp	r0, #0
 80232c8:	d1dc      	bne.n	8023284 <__register_exitproc+0x68>
 80232ca:	4b05      	ldr	r3, [pc, #20]	; (80232e0 <__register_exitproc+0xc4>)
 80232cc:	2b00      	cmp	r3, #0
 80232ce:	d0ba      	beq.n	8023246 <__register_exitproc+0x2a>
 80232d0:	e7cb      	b.n	802326a <__register_exitproc+0x4e>
 80232d2:	bf00      	nop
 80232d4:	2000d45c 	.word	0x2000d45c
 80232d8:	0802811c 	.word	0x0802811c
 80232dc:	2000d3d0 	.word	0x2000d3d0
 80232e0:	080228cd 	.word	0x080228cd

080232e4 <__sflush_r>:
 80232e4:	898a      	ldrh	r2, [r1, #12]
 80232e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80232ea:	4605      	mov	r5, r0
 80232ec:	0710      	lsls	r0, r2, #28
 80232ee:	460c      	mov	r4, r1
 80232f0:	d458      	bmi.n	80233a4 <__sflush_r+0xc0>
 80232f2:	684b      	ldr	r3, [r1, #4]
 80232f4:	2b00      	cmp	r3, #0
 80232f6:	dc05      	bgt.n	8023304 <__sflush_r+0x20>
 80232f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80232fa:	2b00      	cmp	r3, #0
 80232fc:	dc02      	bgt.n	8023304 <__sflush_r+0x20>
 80232fe:	2000      	movs	r0, #0
 8023300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023304:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8023306:	2e00      	cmp	r6, #0
 8023308:	d0f9      	beq.n	80232fe <__sflush_r+0x1a>
 802330a:	2300      	movs	r3, #0
 802330c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8023310:	682f      	ldr	r7, [r5, #0]
 8023312:	6a21      	ldr	r1, [r4, #32]
 8023314:	602b      	str	r3, [r5, #0]
 8023316:	d032      	beq.n	802337e <__sflush_r+0x9a>
 8023318:	6d60      	ldr	r0, [r4, #84]	; 0x54
 802331a:	89a3      	ldrh	r3, [r4, #12]
 802331c:	075a      	lsls	r2, r3, #29
 802331e:	d505      	bpl.n	802332c <__sflush_r+0x48>
 8023320:	6863      	ldr	r3, [r4, #4]
 8023322:	1ac0      	subs	r0, r0, r3
 8023324:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8023326:	b10b      	cbz	r3, 802332c <__sflush_r+0x48>
 8023328:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802332a:	1ac0      	subs	r0, r0, r3
 802332c:	2300      	movs	r3, #0
 802332e:	4602      	mov	r2, r0
 8023330:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8023332:	6a21      	ldr	r1, [r4, #32]
 8023334:	4628      	mov	r0, r5
 8023336:	47b0      	blx	r6
 8023338:	1c43      	adds	r3, r0, #1
 802333a:	89a3      	ldrh	r3, [r4, #12]
 802333c:	d106      	bne.n	802334c <__sflush_r+0x68>
 802333e:	6829      	ldr	r1, [r5, #0]
 8023340:	291d      	cmp	r1, #29
 8023342:	d848      	bhi.n	80233d6 <__sflush_r+0xf2>
 8023344:	4a29      	ldr	r2, [pc, #164]	; (80233ec <__sflush_r+0x108>)
 8023346:	40ca      	lsrs	r2, r1
 8023348:	07d6      	lsls	r6, r2, #31
 802334a:	d544      	bpl.n	80233d6 <__sflush_r+0xf2>
 802334c:	2200      	movs	r2, #0
 802334e:	6062      	str	r2, [r4, #4]
 8023350:	04d9      	lsls	r1, r3, #19
 8023352:	6922      	ldr	r2, [r4, #16]
 8023354:	6022      	str	r2, [r4, #0]
 8023356:	d504      	bpl.n	8023362 <__sflush_r+0x7e>
 8023358:	1c42      	adds	r2, r0, #1
 802335a:	d101      	bne.n	8023360 <__sflush_r+0x7c>
 802335c:	682b      	ldr	r3, [r5, #0]
 802335e:	b903      	cbnz	r3, 8023362 <__sflush_r+0x7e>
 8023360:	6560      	str	r0, [r4, #84]	; 0x54
 8023362:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8023364:	602f      	str	r7, [r5, #0]
 8023366:	2900      	cmp	r1, #0
 8023368:	d0c9      	beq.n	80232fe <__sflush_r+0x1a>
 802336a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802336e:	4299      	cmp	r1, r3
 8023370:	d002      	beq.n	8023378 <__sflush_r+0x94>
 8023372:	4628      	mov	r0, r5
 8023374:	f7ff face 	bl	8022914 <_free_r>
 8023378:	2000      	movs	r0, #0
 802337a:	6360      	str	r0, [r4, #52]	; 0x34
 802337c:	e7c0      	b.n	8023300 <__sflush_r+0x1c>
 802337e:	2301      	movs	r3, #1
 8023380:	4628      	mov	r0, r5
 8023382:	47b0      	blx	r6
 8023384:	1c41      	adds	r1, r0, #1
 8023386:	d1c8      	bne.n	802331a <__sflush_r+0x36>
 8023388:	682b      	ldr	r3, [r5, #0]
 802338a:	2b00      	cmp	r3, #0
 802338c:	d0c5      	beq.n	802331a <__sflush_r+0x36>
 802338e:	2b1d      	cmp	r3, #29
 8023390:	d001      	beq.n	8023396 <__sflush_r+0xb2>
 8023392:	2b16      	cmp	r3, #22
 8023394:	d101      	bne.n	802339a <__sflush_r+0xb6>
 8023396:	602f      	str	r7, [r5, #0]
 8023398:	e7b1      	b.n	80232fe <__sflush_r+0x1a>
 802339a:	89a3      	ldrh	r3, [r4, #12]
 802339c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80233a0:	81a3      	strh	r3, [r4, #12]
 80233a2:	e7ad      	b.n	8023300 <__sflush_r+0x1c>
 80233a4:	690f      	ldr	r7, [r1, #16]
 80233a6:	2f00      	cmp	r7, #0
 80233a8:	d0a9      	beq.n	80232fe <__sflush_r+0x1a>
 80233aa:	0793      	lsls	r3, r2, #30
 80233ac:	680e      	ldr	r6, [r1, #0]
 80233ae:	bf08      	it	eq
 80233b0:	694b      	ldreq	r3, [r1, #20]
 80233b2:	600f      	str	r7, [r1, #0]
 80233b4:	bf18      	it	ne
 80233b6:	2300      	movne	r3, #0
 80233b8:	eba6 0807 	sub.w	r8, r6, r7
 80233bc:	608b      	str	r3, [r1, #8]
 80233be:	f1b8 0f00 	cmp.w	r8, #0
 80233c2:	dd9c      	ble.n	80232fe <__sflush_r+0x1a>
 80233c4:	4643      	mov	r3, r8
 80233c6:	463a      	mov	r2, r7
 80233c8:	6a21      	ldr	r1, [r4, #32]
 80233ca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80233cc:	4628      	mov	r0, r5
 80233ce:	47b0      	blx	r6
 80233d0:	2800      	cmp	r0, #0
 80233d2:	dc06      	bgt.n	80233e2 <__sflush_r+0xfe>
 80233d4:	89a3      	ldrh	r3, [r4, #12]
 80233d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80233da:	81a3      	strh	r3, [r4, #12]
 80233dc:	f04f 30ff 	mov.w	r0, #4294967295
 80233e0:	e78e      	b.n	8023300 <__sflush_r+0x1c>
 80233e2:	4407      	add	r7, r0
 80233e4:	eba8 0800 	sub.w	r8, r8, r0
 80233e8:	e7e9      	b.n	80233be <__sflush_r+0xda>
 80233ea:	bf00      	nop
 80233ec:	20400001 	.word	0x20400001

080233f0 <_fflush_r>:
 80233f0:	b538      	push	{r3, r4, r5, lr}
 80233f2:	690b      	ldr	r3, [r1, #16]
 80233f4:	4605      	mov	r5, r0
 80233f6:	460c      	mov	r4, r1
 80233f8:	b1db      	cbz	r3, 8023432 <_fflush_r+0x42>
 80233fa:	b118      	cbz	r0, 8023404 <_fflush_r+0x14>
 80233fc:	6983      	ldr	r3, [r0, #24]
 80233fe:	b90b      	cbnz	r3, 8023404 <_fflush_r+0x14>
 8023400:	f000 f860 	bl	80234c4 <__sinit>
 8023404:	4b0c      	ldr	r3, [pc, #48]	; (8023438 <_fflush_r+0x48>)
 8023406:	429c      	cmp	r4, r3
 8023408:	d109      	bne.n	802341e <_fflush_r+0x2e>
 802340a:	686c      	ldr	r4, [r5, #4]
 802340c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8023410:	b17b      	cbz	r3, 8023432 <_fflush_r+0x42>
 8023412:	4621      	mov	r1, r4
 8023414:	4628      	mov	r0, r5
 8023416:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802341a:	f7ff bf63 	b.w	80232e4 <__sflush_r>
 802341e:	4b07      	ldr	r3, [pc, #28]	; (802343c <_fflush_r+0x4c>)
 8023420:	429c      	cmp	r4, r3
 8023422:	d101      	bne.n	8023428 <_fflush_r+0x38>
 8023424:	68ac      	ldr	r4, [r5, #8]
 8023426:	e7f1      	b.n	802340c <_fflush_r+0x1c>
 8023428:	4b05      	ldr	r3, [pc, #20]	; (8023440 <_fflush_r+0x50>)
 802342a:	429c      	cmp	r4, r3
 802342c:	bf08      	it	eq
 802342e:	68ec      	ldreq	r4, [r5, #12]
 8023430:	e7ec      	b.n	802340c <_fflush_r+0x1c>
 8023432:	2000      	movs	r0, #0
 8023434:	bd38      	pop	{r3, r4, r5, pc}
 8023436:	bf00      	nop
 8023438:	08028140 	.word	0x08028140
 802343c:	08028160 	.word	0x08028160
 8023440:	08028120 	.word	0x08028120

08023444 <std>:
 8023444:	2300      	movs	r3, #0
 8023446:	b510      	push	{r4, lr}
 8023448:	4604      	mov	r4, r0
 802344a:	e9c0 3300 	strd	r3, r3, [r0]
 802344e:	6083      	str	r3, [r0, #8]
 8023450:	8181      	strh	r1, [r0, #12]
 8023452:	6643      	str	r3, [r0, #100]	; 0x64
 8023454:	81c2      	strh	r2, [r0, #14]
 8023456:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802345a:	6183      	str	r3, [r0, #24]
 802345c:	4619      	mov	r1, r3
 802345e:	2208      	movs	r2, #8
 8023460:	305c      	adds	r0, #92	; 0x5c
 8023462:	f7ff fa4e 	bl	8022902 <memset>
 8023466:	4b05      	ldr	r3, [pc, #20]	; (802347c <std+0x38>)
 8023468:	6263      	str	r3, [r4, #36]	; 0x24
 802346a:	4b05      	ldr	r3, [pc, #20]	; (8023480 <std+0x3c>)
 802346c:	62a3      	str	r3, [r4, #40]	; 0x28
 802346e:	4b05      	ldr	r3, [pc, #20]	; (8023484 <std+0x40>)
 8023470:	62e3      	str	r3, [r4, #44]	; 0x2c
 8023472:	4b05      	ldr	r3, [pc, #20]	; (8023488 <std+0x44>)
 8023474:	6224      	str	r4, [r4, #32]
 8023476:	6323      	str	r3, [r4, #48]	; 0x30
 8023478:	bd10      	pop	{r4, pc}
 802347a:	bf00      	nop
 802347c:	080236a5 	.word	0x080236a5
 8023480:	080236c7 	.word	0x080236c7
 8023484:	080236ff 	.word	0x080236ff
 8023488:	08023723 	.word	0x08023723

0802348c <_cleanup_r>:
 802348c:	4901      	ldr	r1, [pc, #4]	; (8023494 <_cleanup_r+0x8>)
 802348e:	f000 b885 	b.w	802359c <_fwalk_reent>
 8023492:	bf00      	nop
 8023494:	080233f1 	.word	0x080233f1

08023498 <__sfmoreglue>:
 8023498:	b570      	push	{r4, r5, r6, lr}
 802349a:	1e4a      	subs	r2, r1, #1
 802349c:	2568      	movs	r5, #104	; 0x68
 802349e:	4355      	muls	r5, r2
 80234a0:	460e      	mov	r6, r1
 80234a2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80234a6:	f7ff fa83 	bl	80229b0 <_malloc_r>
 80234aa:	4604      	mov	r4, r0
 80234ac:	b140      	cbz	r0, 80234c0 <__sfmoreglue+0x28>
 80234ae:	2100      	movs	r1, #0
 80234b0:	e9c0 1600 	strd	r1, r6, [r0]
 80234b4:	300c      	adds	r0, #12
 80234b6:	60a0      	str	r0, [r4, #8]
 80234b8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80234bc:	f7ff fa21 	bl	8022902 <memset>
 80234c0:	4620      	mov	r0, r4
 80234c2:	bd70      	pop	{r4, r5, r6, pc}

080234c4 <__sinit>:
 80234c4:	6983      	ldr	r3, [r0, #24]
 80234c6:	b510      	push	{r4, lr}
 80234c8:	4604      	mov	r4, r0
 80234ca:	bb33      	cbnz	r3, 802351a <__sinit+0x56>
 80234cc:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80234d0:	6503      	str	r3, [r0, #80]	; 0x50
 80234d2:	4b12      	ldr	r3, [pc, #72]	; (802351c <__sinit+0x58>)
 80234d4:	4a12      	ldr	r2, [pc, #72]	; (8023520 <__sinit+0x5c>)
 80234d6:	681b      	ldr	r3, [r3, #0]
 80234d8:	6282      	str	r2, [r0, #40]	; 0x28
 80234da:	4298      	cmp	r0, r3
 80234dc:	bf04      	itt	eq
 80234de:	2301      	moveq	r3, #1
 80234e0:	6183      	streq	r3, [r0, #24]
 80234e2:	f000 f81f 	bl	8023524 <__sfp>
 80234e6:	6060      	str	r0, [r4, #4]
 80234e8:	4620      	mov	r0, r4
 80234ea:	f000 f81b 	bl	8023524 <__sfp>
 80234ee:	60a0      	str	r0, [r4, #8]
 80234f0:	4620      	mov	r0, r4
 80234f2:	f000 f817 	bl	8023524 <__sfp>
 80234f6:	2200      	movs	r2, #0
 80234f8:	60e0      	str	r0, [r4, #12]
 80234fa:	2104      	movs	r1, #4
 80234fc:	6860      	ldr	r0, [r4, #4]
 80234fe:	f7ff ffa1 	bl	8023444 <std>
 8023502:	2201      	movs	r2, #1
 8023504:	2109      	movs	r1, #9
 8023506:	68a0      	ldr	r0, [r4, #8]
 8023508:	f7ff ff9c 	bl	8023444 <std>
 802350c:	2202      	movs	r2, #2
 802350e:	2112      	movs	r1, #18
 8023510:	68e0      	ldr	r0, [r4, #12]
 8023512:	f7ff ff97 	bl	8023444 <std>
 8023516:	2301      	movs	r3, #1
 8023518:	61a3      	str	r3, [r4, #24]
 802351a:	bd10      	pop	{r4, pc}
 802351c:	080280e4 	.word	0x080280e4
 8023520:	0802348d 	.word	0x0802348d

08023524 <__sfp>:
 8023524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023526:	4b1b      	ldr	r3, [pc, #108]	; (8023594 <__sfp+0x70>)
 8023528:	681e      	ldr	r6, [r3, #0]
 802352a:	69b3      	ldr	r3, [r6, #24]
 802352c:	4607      	mov	r7, r0
 802352e:	b913      	cbnz	r3, 8023536 <__sfp+0x12>
 8023530:	4630      	mov	r0, r6
 8023532:	f7ff ffc7 	bl	80234c4 <__sinit>
 8023536:	3648      	adds	r6, #72	; 0x48
 8023538:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 802353c:	3b01      	subs	r3, #1
 802353e:	d503      	bpl.n	8023548 <__sfp+0x24>
 8023540:	6833      	ldr	r3, [r6, #0]
 8023542:	b133      	cbz	r3, 8023552 <__sfp+0x2e>
 8023544:	6836      	ldr	r6, [r6, #0]
 8023546:	e7f7      	b.n	8023538 <__sfp+0x14>
 8023548:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 802354c:	b16d      	cbz	r5, 802356a <__sfp+0x46>
 802354e:	3468      	adds	r4, #104	; 0x68
 8023550:	e7f4      	b.n	802353c <__sfp+0x18>
 8023552:	2104      	movs	r1, #4
 8023554:	4638      	mov	r0, r7
 8023556:	f7ff ff9f 	bl	8023498 <__sfmoreglue>
 802355a:	6030      	str	r0, [r6, #0]
 802355c:	2800      	cmp	r0, #0
 802355e:	d1f1      	bne.n	8023544 <__sfp+0x20>
 8023560:	230c      	movs	r3, #12
 8023562:	603b      	str	r3, [r7, #0]
 8023564:	4604      	mov	r4, r0
 8023566:	4620      	mov	r0, r4
 8023568:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802356a:	4b0b      	ldr	r3, [pc, #44]	; (8023598 <__sfp+0x74>)
 802356c:	6665      	str	r5, [r4, #100]	; 0x64
 802356e:	e9c4 5500 	strd	r5, r5, [r4]
 8023572:	60a5      	str	r5, [r4, #8]
 8023574:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8023578:	e9c4 5505 	strd	r5, r5, [r4, #20]
 802357c:	2208      	movs	r2, #8
 802357e:	4629      	mov	r1, r5
 8023580:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8023584:	f7ff f9bd 	bl	8022902 <memset>
 8023588:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 802358c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8023590:	e7e9      	b.n	8023566 <__sfp+0x42>
 8023592:	bf00      	nop
 8023594:	080280e4 	.word	0x080280e4
 8023598:	ffff0001 	.word	0xffff0001

0802359c <_fwalk_reent>:
 802359c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80235a0:	4680      	mov	r8, r0
 80235a2:	4689      	mov	r9, r1
 80235a4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80235a8:	2600      	movs	r6, #0
 80235aa:	b914      	cbnz	r4, 80235b2 <_fwalk_reent+0x16>
 80235ac:	4630      	mov	r0, r6
 80235ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80235b2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80235b6:	3f01      	subs	r7, #1
 80235b8:	d501      	bpl.n	80235be <_fwalk_reent+0x22>
 80235ba:	6824      	ldr	r4, [r4, #0]
 80235bc:	e7f5      	b.n	80235aa <_fwalk_reent+0xe>
 80235be:	89ab      	ldrh	r3, [r5, #12]
 80235c0:	2b01      	cmp	r3, #1
 80235c2:	d907      	bls.n	80235d4 <_fwalk_reent+0x38>
 80235c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80235c8:	3301      	adds	r3, #1
 80235ca:	d003      	beq.n	80235d4 <_fwalk_reent+0x38>
 80235cc:	4629      	mov	r1, r5
 80235ce:	4640      	mov	r0, r8
 80235d0:	47c8      	blx	r9
 80235d2:	4306      	orrs	r6, r0
 80235d4:	3568      	adds	r5, #104	; 0x68
 80235d6:	e7ee      	b.n	80235b6 <_fwalk_reent+0x1a>

080235d8 <__swhatbuf_r>:
 80235d8:	b570      	push	{r4, r5, r6, lr}
 80235da:	460e      	mov	r6, r1
 80235dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80235e0:	2900      	cmp	r1, #0
 80235e2:	b096      	sub	sp, #88	; 0x58
 80235e4:	4614      	mov	r4, r2
 80235e6:	461d      	mov	r5, r3
 80235e8:	da07      	bge.n	80235fa <__swhatbuf_r+0x22>
 80235ea:	2300      	movs	r3, #0
 80235ec:	602b      	str	r3, [r5, #0]
 80235ee:	89b3      	ldrh	r3, [r6, #12]
 80235f0:	061a      	lsls	r2, r3, #24
 80235f2:	d410      	bmi.n	8023616 <__swhatbuf_r+0x3e>
 80235f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80235f8:	e00e      	b.n	8023618 <__swhatbuf_r+0x40>
 80235fa:	466a      	mov	r2, sp
 80235fc:	f000 f8b8 	bl	8023770 <_fstat_r>
 8023600:	2800      	cmp	r0, #0
 8023602:	dbf2      	blt.n	80235ea <__swhatbuf_r+0x12>
 8023604:	9a01      	ldr	r2, [sp, #4]
 8023606:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 802360a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 802360e:	425a      	negs	r2, r3
 8023610:	415a      	adcs	r2, r3
 8023612:	602a      	str	r2, [r5, #0]
 8023614:	e7ee      	b.n	80235f4 <__swhatbuf_r+0x1c>
 8023616:	2340      	movs	r3, #64	; 0x40
 8023618:	2000      	movs	r0, #0
 802361a:	6023      	str	r3, [r4, #0]
 802361c:	b016      	add	sp, #88	; 0x58
 802361e:	bd70      	pop	{r4, r5, r6, pc}

08023620 <__smakebuf_r>:
 8023620:	898b      	ldrh	r3, [r1, #12]
 8023622:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8023624:	079d      	lsls	r5, r3, #30
 8023626:	4606      	mov	r6, r0
 8023628:	460c      	mov	r4, r1
 802362a:	d507      	bpl.n	802363c <__smakebuf_r+0x1c>
 802362c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8023630:	6023      	str	r3, [r4, #0]
 8023632:	6123      	str	r3, [r4, #16]
 8023634:	2301      	movs	r3, #1
 8023636:	6163      	str	r3, [r4, #20]
 8023638:	b002      	add	sp, #8
 802363a:	bd70      	pop	{r4, r5, r6, pc}
 802363c:	ab01      	add	r3, sp, #4
 802363e:	466a      	mov	r2, sp
 8023640:	f7ff ffca 	bl	80235d8 <__swhatbuf_r>
 8023644:	9900      	ldr	r1, [sp, #0]
 8023646:	4605      	mov	r5, r0
 8023648:	4630      	mov	r0, r6
 802364a:	f7ff f9b1 	bl	80229b0 <_malloc_r>
 802364e:	b948      	cbnz	r0, 8023664 <__smakebuf_r+0x44>
 8023650:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8023654:	059a      	lsls	r2, r3, #22
 8023656:	d4ef      	bmi.n	8023638 <__smakebuf_r+0x18>
 8023658:	f023 0303 	bic.w	r3, r3, #3
 802365c:	f043 0302 	orr.w	r3, r3, #2
 8023660:	81a3      	strh	r3, [r4, #12]
 8023662:	e7e3      	b.n	802362c <__smakebuf_r+0xc>
 8023664:	4b0d      	ldr	r3, [pc, #52]	; (802369c <__smakebuf_r+0x7c>)
 8023666:	62b3      	str	r3, [r6, #40]	; 0x28
 8023668:	89a3      	ldrh	r3, [r4, #12]
 802366a:	6020      	str	r0, [r4, #0]
 802366c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8023670:	81a3      	strh	r3, [r4, #12]
 8023672:	9b00      	ldr	r3, [sp, #0]
 8023674:	6163      	str	r3, [r4, #20]
 8023676:	9b01      	ldr	r3, [sp, #4]
 8023678:	6120      	str	r0, [r4, #16]
 802367a:	b15b      	cbz	r3, 8023694 <__smakebuf_r+0x74>
 802367c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8023680:	4630      	mov	r0, r6
 8023682:	f000 f887 	bl	8023794 <_isatty_r>
 8023686:	b128      	cbz	r0, 8023694 <__smakebuf_r+0x74>
 8023688:	89a3      	ldrh	r3, [r4, #12]
 802368a:	f023 0303 	bic.w	r3, r3, #3
 802368e:	f043 0301 	orr.w	r3, r3, #1
 8023692:	81a3      	strh	r3, [r4, #12]
 8023694:	89a3      	ldrh	r3, [r4, #12]
 8023696:	431d      	orrs	r5, r3
 8023698:	81a5      	strh	r5, [r4, #12]
 802369a:	e7cd      	b.n	8023638 <__smakebuf_r+0x18>
 802369c:	0802348d 	.word	0x0802348d

080236a0 <__malloc_lock>:
 80236a0:	4770      	bx	lr

080236a2 <__malloc_unlock>:
 80236a2:	4770      	bx	lr

080236a4 <__sread>:
 80236a4:	b510      	push	{r4, lr}
 80236a6:	460c      	mov	r4, r1
 80236a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80236ac:	f000 f894 	bl	80237d8 <_read_r>
 80236b0:	2800      	cmp	r0, #0
 80236b2:	bfab      	itete	ge
 80236b4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80236b6:	89a3      	ldrhlt	r3, [r4, #12]
 80236b8:	181b      	addge	r3, r3, r0
 80236ba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80236be:	bfac      	ite	ge
 80236c0:	6563      	strge	r3, [r4, #84]	; 0x54
 80236c2:	81a3      	strhlt	r3, [r4, #12]
 80236c4:	bd10      	pop	{r4, pc}

080236c6 <__swrite>:
 80236c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80236ca:	461f      	mov	r7, r3
 80236cc:	898b      	ldrh	r3, [r1, #12]
 80236ce:	05db      	lsls	r3, r3, #23
 80236d0:	4605      	mov	r5, r0
 80236d2:	460c      	mov	r4, r1
 80236d4:	4616      	mov	r6, r2
 80236d6:	d505      	bpl.n	80236e4 <__swrite+0x1e>
 80236d8:	2302      	movs	r3, #2
 80236da:	2200      	movs	r2, #0
 80236dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80236e0:	f000 f868 	bl	80237b4 <_lseek_r>
 80236e4:	89a3      	ldrh	r3, [r4, #12]
 80236e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80236ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80236ee:	81a3      	strh	r3, [r4, #12]
 80236f0:	4632      	mov	r2, r6
 80236f2:	463b      	mov	r3, r7
 80236f4:	4628      	mov	r0, r5
 80236f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80236fa:	f000 b817 	b.w	802372c <_write_r>

080236fe <__sseek>:
 80236fe:	b510      	push	{r4, lr}
 8023700:	460c      	mov	r4, r1
 8023702:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023706:	f000 f855 	bl	80237b4 <_lseek_r>
 802370a:	1c43      	adds	r3, r0, #1
 802370c:	89a3      	ldrh	r3, [r4, #12]
 802370e:	bf15      	itete	ne
 8023710:	6560      	strne	r0, [r4, #84]	; 0x54
 8023712:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8023716:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802371a:	81a3      	strheq	r3, [r4, #12]
 802371c:	bf18      	it	ne
 802371e:	81a3      	strhne	r3, [r4, #12]
 8023720:	bd10      	pop	{r4, pc}

08023722 <__sclose>:
 8023722:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023726:	f000 b813 	b.w	8023750 <_close_r>
	...

0802372c <_write_r>:
 802372c:	b538      	push	{r3, r4, r5, lr}
 802372e:	4c07      	ldr	r4, [pc, #28]	; (802374c <_write_r+0x20>)
 8023730:	4605      	mov	r5, r0
 8023732:	4608      	mov	r0, r1
 8023734:	4611      	mov	r1, r2
 8023736:	2200      	movs	r2, #0
 8023738:	6022      	str	r2, [r4, #0]
 802373a:	461a      	mov	r2, r3
 802373c:	f7de f873 	bl	8001826 <_write>
 8023740:	1c43      	adds	r3, r0, #1
 8023742:	d102      	bne.n	802374a <_write_r+0x1e>
 8023744:	6823      	ldr	r3, [r4, #0]
 8023746:	b103      	cbz	r3, 802374a <_write_r+0x1e>
 8023748:	602b      	str	r3, [r5, #0]
 802374a:	bd38      	pop	{r3, r4, r5, pc}
 802374c:	2000d710 	.word	0x2000d710

08023750 <_close_r>:
 8023750:	b538      	push	{r3, r4, r5, lr}
 8023752:	4c06      	ldr	r4, [pc, #24]	; (802376c <_close_r+0x1c>)
 8023754:	2300      	movs	r3, #0
 8023756:	4605      	mov	r5, r0
 8023758:	4608      	mov	r0, r1
 802375a:	6023      	str	r3, [r4, #0]
 802375c:	f7de f87f 	bl	800185e <_close>
 8023760:	1c43      	adds	r3, r0, #1
 8023762:	d102      	bne.n	802376a <_close_r+0x1a>
 8023764:	6823      	ldr	r3, [r4, #0]
 8023766:	b103      	cbz	r3, 802376a <_close_r+0x1a>
 8023768:	602b      	str	r3, [r5, #0]
 802376a:	bd38      	pop	{r3, r4, r5, pc}
 802376c:	2000d710 	.word	0x2000d710

08023770 <_fstat_r>:
 8023770:	b538      	push	{r3, r4, r5, lr}
 8023772:	4c07      	ldr	r4, [pc, #28]	; (8023790 <_fstat_r+0x20>)
 8023774:	2300      	movs	r3, #0
 8023776:	4605      	mov	r5, r0
 8023778:	4608      	mov	r0, r1
 802377a:	4611      	mov	r1, r2
 802377c:	6023      	str	r3, [r4, #0]
 802377e:	f7de f87a 	bl	8001876 <_fstat>
 8023782:	1c43      	adds	r3, r0, #1
 8023784:	d102      	bne.n	802378c <_fstat_r+0x1c>
 8023786:	6823      	ldr	r3, [r4, #0]
 8023788:	b103      	cbz	r3, 802378c <_fstat_r+0x1c>
 802378a:	602b      	str	r3, [r5, #0]
 802378c:	bd38      	pop	{r3, r4, r5, pc}
 802378e:	bf00      	nop
 8023790:	2000d710 	.word	0x2000d710

08023794 <_isatty_r>:
 8023794:	b538      	push	{r3, r4, r5, lr}
 8023796:	4c06      	ldr	r4, [pc, #24]	; (80237b0 <_isatty_r+0x1c>)
 8023798:	2300      	movs	r3, #0
 802379a:	4605      	mov	r5, r0
 802379c:	4608      	mov	r0, r1
 802379e:	6023      	str	r3, [r4, #0]
 80237a0:	f7de f879 	bl	8001896 <_isatty>
 80237a4:	1c43      	adds	r3, r0, #1
 80237a6:	d102      	bne.n	80237ae <_isatty_r+0x1a>
 80237a8:	6823      	ldr	r3, [r4, #0]
 80237aa:	b103      	cbz	r3, 80237ae <_isatty_r+0x1a>
 80237ac:	602b      	str	r3, [r5, #0]
 80237ae:	bd38      	pop	{r3, r4, r5, pc}
 80237b0:	2000d710 	.word	0x2000d710

080237b4 <_lseek_r>:
 80237b4:	b538      	push	{r3, r4, r5, lr}
 80237b6:	4c07      	ldr	r4, [pc, #28]	; (80237d4 <_lseek_r+0x20>)
 80237b8:	4605      	mov	r5, r0
 80237ba:	4608      	mov	r0, r1
 80237bc:	4611      	mov	r1, r2
 80237be:	2200      	movs	r2, #0
 80237c0:	6022      	str	r2, [r4, #0]
 80237c2:	461a      	mov	r2, r3
 80237c4:	f7de f872 	bl	80018ac <_lseek>
 80237c8:	1c43      	adds	r3, r0, #1
 80237ca:	d102      	bne.n	80237d2 <_lseek_r+0x1e>
 80237cc:	6823      	ldr	r3, [r4, #0]
 80237ce:	b103      	cbz	r3, 80237d2 <_lseek_r+0x1e>
 80237d0:	602b      	str	r3, [r5, #0]
 80237d2:	bd38      	pop	{r3, r4, r5, pc}
 80237d4:	2000d710 	.word	0x2000d710

080237d8 <_read_r>:
 80237d8:	b538      	push	{r3, r4, r5, lr}
 80237da:	4c07      	ldr	r4, [pc, #28]	; (80237f8 <_read_r+0x20>)
 80237dc:	4605      	mov	r5, r0
 80237de:	4608      	mov	r0, r1
 80237e0:	4611      	mov	r1, r2
 80237e2:	2200      	movs	r2, #0
 80237e4:	6022      	str	r2, [r4, #0]
 80237e6:	461a      	mov	r2, r3
 80237e8:	f7de f800 	bl	80017ec <_read>
 80237ec:	1c43      	adds	r3, r0, #1
 80237ee:	d102      	bne.n	80237f6 <_read_r+0x1e>
 80237f0:	6823      	ldr	r3, [r4, #0]
 80237f2:	b103      	cbz	r3, 80237f6 <_read_r+0x1e>
 80237f4:	602b      	str	r3, [r5, #0]
 80237f6:	bd38      	pop	{r3, r4, r5, pc}
 80237f8:	2000d710 	.word	0x2000d710

080237fc <_init>:
 80237fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80237fe:	bf00      	nop
 8023800:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023802:	bc08      	pop	{r3}
 8023804:	469e      	mov	lr, r3
 8023806:	4770      	bx	lr

08023808 <_fini>:
 8023808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802380a:	bf00      	nop
 802380c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802380e:	bc08      	pop	{r3}
 8023810:	469e      	mov	lr, r3
 8023812:	4770      	bx	lr
