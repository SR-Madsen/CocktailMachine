/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef SCREEN1VIEWBASE_HPP
#define SCREEN1VIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/widgets/Image.hpp>
#include <touchgfx/widgets/Button.hpp>
#include <touchgfx/widgets/ButtonWithLabel.hpp>
#include <touchgfx/containers/scrollers/ScrollList.hpp>
#include <gui/containers/imageContainer.hpp>
#include <touchgfx/containers/progress_indicators/BoxProgress.hpp>
#include <touchgfx/widgets/TextArea.hpp>
#include <touchgfx/widgets/canvas/Line.hpp>
#include <touchgfx/widgets/canvas/PainterRGB565.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>

class Screen1ViewBase : public touchgfx::View<Screen1Presenter>
{
public:
    Screen1ViewBase();
    virtual ~Screen1ViewBase() {}
    virtual void setupScreen();
    virtual void handleKeyEvent(uint8_t key);

    virtual void ScrollListUpdateItem(imageContainer& item, int16_t itemIndex)
    {
        // Override and implement this function in Screen1
    }

    /*
     * Virtual Action Handlers
     */
    virtual void PourDrink()
    {
        // Override and implement this function in Screen1
    }

    virtual void SettingsScreen()
    {
        // Override and implement this function in Screen1
    }

    virtual void ExitSettings()
    {
        // Override and implement this function in Screen1
    }

    virtual void Click250mL()
    {
        // Override and implement this function in Screen1
    }

    virtual void Click500mL()
    {
        // Override and implement this function in Screen1
    }

    virtual void Click750mL()
    {
        // Override and implement this function in Screen1
    }

    virtual void FlowSim()
    {
        // Override and implement this function in Screen1
    }

    virtual void ChangePump1()
    {
        // Override and implement this function in Screen1
    }

    virtual void ChangePump2()
    {
        // Override and implement this function in Screen1
    }

    virtual void ChangePump3()
    {
        // Override and implement this function in Screen1
    }

    virtual void ChangePump4()
    {
        // Override and implement this function in Screen1
    }

    virtual void ToJuice()
    {
        // Override and implement this function in Screen1
    }

    virtual void ToWater()
    {
        // Override and implement this function in Screen1
    }

    virtual void ToNone()
    {
        // Override and implement this function in Screen1
    }

    virtual void ToGin()
    {
        // Override and implement this function in Screen1
    }

    virtual void ToRum()
    {
        // Override and implement this function in Screen1
    }

    virtual void ToTequila()
    {
        // Override and implement this function in Screen1
    }

    virtual void ToVodka()
    {
        // Override and implement this function in Screen1
    }

    virtual void ToTodo1()
    {
        // Override and implement this function in Screen1
    }

    virtual void ToTodo2()
    {
        // Override and implement this function in Screen1
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Box __background;
    touchgfx::Image Background;
    touchgfx::Button ExitButton;
    touchgfx::ButtonWithLabel PourButton;
    touchgfx::ScrollList ScrollList;
    touchgfx::DrawableListItems<imageContainer, 4> ScrollListListItems;
    touchgfx::Button SettingsButton;
    touchgfx::BoxProgress ProgressBar;
    touchgfx::ButtonWithLabel Button250mL;
    touchgfx::ButtonWithLabel Button500mL;
    touchgfx::ButtonWithLabel Button750mL;
    touchgfx::TextArea QuantityText;
    touchgfx::TextArea SettingsText;
    touchgfx::Line Line3;
    touchgfx::PainterRGB565 Line3Painter;
    touchgfx::Line Line2;
    touchgfx::PainterRGB565 Line2Painter;
    touchgfx::Line Line1;
    touchgfx::PainterRGB565 Line1Painter;
    touchgfx::TextArea Pump1Text;
    touchgfx::TextArea Pump2Text;
    touchgfx::TextArea Pump3Text;
    touchgfx::TextArea Pump4Text;
    touchgfx::Line PumpDiv1;
    touchgfx::PainterRGB565 PumpDiv1Painter;
    touchgfx::Line PumpDiv2;
    touchgfx::PainterRGB565 PumpDiv2Painter;
    touchgfx::Line PumpDiv3;
    touchgfx::PainterRGB565 PumpDiv3Painter;
    touchgfx::ButtonWithLabel Pump1Change;
    touchgfx::ButtonWithLabel Pump2Change;
    touchgfx::ButtonWithLabel Pump3Change;
    touchgfx::ButtonWithLabel Pump4Change;
    touchgfx::Line Line1_2;
    touchgfx::PainterRGB565 Line1_2Painter;
    touchgfx::TextAreaWithOneWildcard Pump1Content;
    touchgfx::TextAreaWithOneWildcard Pump2Content;
    touchgfx::TextAreaWithOneWildcard Pump3Content;
    touchgfx::TextAreaWithOneWildcard Pump4Content;
    touchgfx::TextArea SelectText;
    touchgfx::ButtonWithLabel SelectTodo1_1;
    touchgfx::ButtonWithLabel SelectTodo1;
    touchgfx::ButtonWithLabel SelectVodka;
    touchgfx::ButtonWithLabel SelectTequila;
    touchgfx::ButtonWithLabel SelectRum;
    touchgfx::ButtonWithLabel SelectGin;
    touchgfx::ButtonWithLabel SelectNone;
    touchgfx::ButtonWithLabel SelectWater;
    touchgfx::ButtonWithLabel SelectJuice;

    /*
     * Wildcard Buffers
     */
    static const uint16_t PUMP1CONTENT_SIZE = 8;
    touchgfx::Unicode::UnicodeChar Pump1ContentBuffer[PUMP1CONTENT_SIZE];
    static const uint16_t PUMP2CONTENT_SIZE = 8;
    touchgfx::Unicode::UnicodeChar Pump2ContentBuffer[PUMP2CONTENT_SIZE];
    static const uint16_t PUMP3CONTENT_SIZE = 8;
    touchgfx::Unicode::UnicodeChar Pump3ContentBuffer[PUMP3CONTENT_SIZE];
    static const uint16_t PUMP4CONTENT_SIZE = 8;
    touchgfx::Unicode::UnicodeChar Pump4ContentBuffer[PUMP4CONTENT_SIZE];

private:

    /*
     * Callback Declarations
     */
    touchgfx::Callback<Screen1ViewBase, const touchgfx::AbstractButton&> buttonCallback;
    touchgfx::Callback<Screen1ViewBase, touchgfx::DrawableListItemsInterface*, int16_t, int16_t> updateItemCallback;

    /*
     * Callback Handler Declarations
     */
    void buttonCallbackHandler(const touchgfx::AbstractButton& src);
    void updateItemCallbackHandler(touchgfx::DrawableListItemsInterface* items, int16_t containerIndex, int16_t itemIndex);

    /*
     * Canvas Buffer Size
     */
    static const uint16_t CANVAS_BUFFER_SIZE = 12000;
    uint8_t canvasBuffer[CANVAS_BUFFER_SIZE];
};

#endif // SCREEN1VIEWBASE_HPP
